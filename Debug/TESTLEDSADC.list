
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008120  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f024  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080172cc  080172cc  00033fc8  2**0
                  CONTENTS
  4 .ARM          00000008  080172cc  080172cc  000272cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080172d4  080172d4  00033fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080172d4  080172d4  000272d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080172d8  080172d8  000272d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080172dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00003ecc  200000fc  080173d8  000300fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000fc8c  20003fc8  0801b2a4  00033fc8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013c54  0801b2a4  00043c54  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003141a  00000000  00000000  00033ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00006e96  00000000  00000000  00065412  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000107dc  00000000  00000000  0006c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001898  00000000  00000000  0007ca88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001fa8  00000000  00000000  0007e320  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002a39f  00000000  00000000  000802c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001b589  00000000  00000000  000aa667  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000cda79  00000000  00000000  000c5bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00193669  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004e34  00000000  00000000  001936e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20003fc8 	.word	0x20003fc8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008290 	.word	0x08008290

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20003fcc 	.word	0x20003fcc
 80001c4:	08008290 	.word	0x08008290

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <_ZN10AudioCodec8Read_RegEh>:
}

uint16_t AudioCodec::Read_Reg(uint8_t reg)
{
    return WM8978_REGVAL[reg];
}
 8000e14:	4b01      	ldr	r3, [pc, #4]	; (8000e1c <_ZN10AudioCodec8Read_RegEh+0x8>)
 8000e16:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8000e1a:	4770      	bx	lr
 8000e1c:	20000000 	.word	0x20000000

08000e20 <_ZN10AudioCodec9Write_RegEht>:

uint8_t AudioCodec::Write_Reg(uint8_t reg, uint16_t val)
{
 8000e20:	b530      	push	{r4, r5, lr}
 8000e22:	b085      	sub	sp, #20
 8000e24:	460d      	mov	r5, r1
 8000e26:	4614      	mov	r4, r2
    uint8_t res;
    uint8_t RegAddr;
    uint8_t RegValue;
    RegAddr = (reg << 1) | ((uint8_t)((val >> 8) & 0x01)); //reg address + data highest bit
 8000e28:	f3c2 2300 	ubfx	r3, r2, #8, #1
 8000e2c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

    HAL_StatusTypeDef status = HAL_OK;
    uint8_t data[2];

    //     /* Assemble 2-byte data in WM8731 format */
    data[0] = RegAddr;  // 0x0C in your example
 8000e30:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = RegValue; // MSB byte of 16bit data
 8000e34:	f88d 200d 	strb.w	r2, [sp, #13]

    status = HAL_I2C_Master_Transmit(i2c, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 8000e38:	6840      	ldr	r0, [r0, #4]
 8000e3a:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2302      	movs	r3, #2
 8000e42:	aa03      	add	r2, sp, #12
 8000e44:	2134      	movs	r1, #52	; 0x34
 8000e46:	f004 fd19 	bl	800587c <HAL_I2C_Master_Transmit>
                                                                                       //     /* Check the communication status */
    if (status != HAL_OK)
 8000e4a:	b928      	cbnz	r0, 8000e58 <_ZN10AudioCodec9Write_RegEht+0x38>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
        // Error handling, for example re-initialization of the I2C peripheral
        // Error_Handler();
    }

    WM8978_REGVAL[reg] = val;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <_ZN10AudioCodec9Write_RegEht+0x48>)
 8000e4e:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
    return res;
}
 8000e52:	2000      	movs	r0, #0
 8000e54:	b005      	add	sp, #20
 8000e56:	bd30      	pop	{r4, r5, pc}
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <_ZN10AudioCodec9Write_RegEht+0x4c>)
 8000e60:	f004 fb7c 	bl	800555c <HAL_GPIO_WritePin>
 8000e64:	e7f2      	b.n	8000e4c <_ZN10AudioCodec9Write_RegEht+0x2c>
 8000e66:	bf00      	nop
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	40020800 	.word	0x40020800

08000e70 <_ZN10AudioCodec8ADDA_CfgEhh>:
    HAL_I2S_Transmit_DMA(i2s, (uint16_t *)&buffer[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
    return 0;
}

void AudioCodec::ADDA_Cfg(uint8_t dacen, uint8_t adcen)
{
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	4604      	mov	r4, r0
 8000e74:	460e      	mov	r6, r1
 8000e76:	4615      	mov	r5, r2
    uint16_t regval;
    regval = Read_Reg(3); //read R3
 8000e78:	2103      	movs	r1, #3
 8000e7a:	f7ff ffcb 	bl	8000e14 <_ZN10AudioCodec8Read_RegEh>
    if (dacen)
 8000e7e:	b19e      	cbz	r6, 8000ea8 <_ZN10AudioCodec8ADDA_CfgEhh+0x38>
        regval |= 3 << 0; //R3 set lowest 2 bits to 1,enable DACR&DACL
 8000e80:	f040 0203 	orr.w	r2, r0, #3
 8000e84:	b292      	uxth	r2, r2
    else
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
    Write_Reg(3, regval);
 8000e86:	2103      	movs	r1, #3
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff ffc9 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(2); //read R2
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4620      	mov	r0, r4
 8000e92:	f7ff ffbf 	bl	8000e14 <_ZN10AudioCodec8Read_RegEh>
    if (adcen)
 8000e96:	b95d      	cbnz	r5, 8000eb0 <_ZN10AudioCodec8ADDA_CfgEhh+0x40>
        regval |= 3 << 0; //R2 set lowest bits to 1, enable ADCR&ADCL
    else
        regval &= ~(3 << 0); //R2 set lowest bits to 0, disable ADCR&ADCL.
 8000e98:	f020 0203 	bic.w	r2, r0, #3
 8000e9c:	b292      	uxth	r2, r2
    Write_Reg(2, regval);    //R2
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff ffbd 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
}
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
 8000ea8:	f020 0203 	bic.w	r2, r0, #3
 8000eac:	b292      	uxth	r2, r2
 8000eae:	e7ea      	b.n	8000e86 <_ZN10AudioCodec8ADDA_CfgEhh+0x16>
        regval |= 3 << 0; //R2 set lowest bits to 1, enable ADCR&ADCL
 8000eb0:	f040 0203 	orr.w	r2, r0, #3
 8000eb4:	b292      	uxth	r2, r2
 8000eb6:	e7f2      	b.n	8000e9e <_ZN10AudioCodec8ADDA_CfgEhh+0x2e>

08000eb8 <_ZN10AudioCodec11LINEIN_GainEh>:
}

//WM8978 L2/R2(Line In)db config(L2/R2-->ADC input db)
//gain:0~7,0 means channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void AudioCodec::LINEIN_Gain(uint8_t gain)
{
 8000eb8:	b538      	push	{r3, r4, r5, lr}
 8000eba:	4605      	mov	r5, r0
    uint16_t regval;
    gain &= 0X07;
 8000ebc:	f001 0407 	and.w	r4, r1, #7
    regval = Read_Reg(47);
 8000ec0:	212f      	movs	r1, #47	; 0x2f
 8000ec2:	f7ff ffa7 	bl	8000e14 <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 4); //reset old config
 8000ec6:	f020 0270 	bic.w	r2, r0, #112	; 0x70
 8000eca:	b292      	uxth	r2, r2
    Write_Reg(47, regval | gain << 4);
 8000ecc:	0124      	lsls	r4, r4, #4
 8000ece:	4322      	orrs	r2, r4
 8000ed0:	212f      	movs	r1, #47	; 0x2f
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	f7ff ffa4 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(48);
 8000ed8:	2130      	movs	r1, #48	; 0x30
 8000eda:	4628      	mov	r0, r5
 8000edc:	f7ff ff9a 	bl	8000e14 <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 4); //reset old config
 8000ee0:	f020 0270 	bic.w	r2, r0, #112	; 0x70
 8000ee4:	b292      	uxth	r2, r2
    Write_Reg(48, regval | gain << 4);
 8000ee6:	4322      	orrs	r2, r4
 8000ee8:	2130      	movs	r1, #48	; 0x30
 8000eea:	4628      	mov	r0, r5
 8000eec:	f7ff ff98 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
}
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}

08000ef2 <_ZN10AudioCodec8AUX_GainEh>:
//WM8978 AUXR,AUXL(PWM audio config)db config(AUXR/L-->ADC input db)
//gain:0~7,0 channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void AudioCodec::AUX_Gain(uint8_t gain)
{
 8000ef2:	b538      	push	{r3, r4, r5, lr}
 8000ef4:	4605      	mov	r5, r0
    uint16_t regval;
    gain &= 0X07;
 8000ef6:	f001 0407 	and.w	r4, r1, #7
    regval = Read_Reg(47);
 8000efa:	212f      	movs	r1, #47	; 0x2f
 8000efc:	f7ff ff8a 	bl	8000e14 <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 0); //reset old config
 8000f00:	f020 0207 	bic.w	r2, r0, #7
 8000f04:	b292      	uxth	r2, r2
    Write_Reg(47, regval | gain << 0);
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	4322      	orrs	r2, r4
 8000f0a:	212f      	movs	r1, #47	; 0x2f
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f7ff ff87 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(48);
 8000f12:	2130      	movs	r1, #48	; 0x30
 8000f14:	4628      	mov	r0, r5
 8000f16:	f7ff ff7d 	bl	8000e14 <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 0); //reset old config
 8000f1a:	f020 0207 	bic.w	r2, r0, #7
 8000f1e:	b292      	uxth	r2, r2
    Write_Reg(48, regval | gain << 0);
 8000f20:	4322      	orrs	r2, r4
 8000f22:	2130      	movs	r1, #48	; 0x30
 8000f24:	4628      	mov	r0, r5
 8000f26:	f7ff ff7b 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
}
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}

08000f2c <_ZN10AudioCodec9Input_CfgEhhh>:
{
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	460f      	mov	r7, r1
 8000f32:	4616      	mov	r6, r2
 8000f34:	461d      	mov	r5, r3
    regval = Read_Reg(2);
 8000f36:	2102      	movs	r1, #2
 8000f38:	f7ff ff6c 	bl	8000e14 <_ZN10AudioCodec8Read_RegEh>
    if (micen)
 8000f3c:	b1ef      	cbz	r7, 8000f7a <_ZN10AudioCodec9Input_CfgEhhh+0x4e>
        regval |= 3 << 2; //open INPPGAENR,INPPGAENL(MIC��PGA�Ŵ�)
 8000f3e:	f040 020c 	orr.w	r2, r0, #12
 8000f42:	b292      	uxth	r2, r2
    Write_Reg(2, regval);
 8000f44:	2102      	movs	r1, #2
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff ff6a 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(44);
 8000f4c:	212c      	movs	r1, #44	; 0x2c
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff ff60 	bl	8000e14 <_ZN10AudioCodec8Read_RegEh>
    if (micen)
 8000f54:	b1af      	cbz	r7, 8000f82 <_ZN10AudioCodec9Input_CfgEhhh+0x56>
        regval |= 3 << 4 | 3 << 0; //enable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 8000f56:	f040 0233 	orr.w	r2, r0, #51	; 0x33
 8000f5a:	b292      	uxth	r2, r2
    Write_Reg(44, regval);
 8000f5c:	212c      	movs	r1, #44	; 0x2c
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f7ff ff5e 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    if (lineinen)
 8000f64:	b18e      	cbz	r6, 8000f8a <_ZN10AudioCodec9Input_CfgEhhh+0x5e>
        LINEIN_Gain(5); //LINE IN 0dB
 8000f66:	2105      	movs	r1, #5
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f7ff ffa5 	bl	8000eb8 <_ZN10AudioCodec11LINEIN_GainEh>
    if (auxen)
 8000f6e:	b98d      	cbnz	r5, 8000f94 <_ZN10AudioCodec9Input_CfgEhhh+0x68>
        AUX_Gain(0); //disable AUX input
 8000f70:	2100      	movs	r1, #0
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff ffbd 	bl	8000ef2 <_ZN10AudioCodec8AUX_GainEh>
}
 8000f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        regval &= ~(3 << 2); //close INPPGAENR,INPPGAENL.
 8000f7a:	f020 020c 	bic.w	r2, r0, #12
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	e7e0      	b.n	8000f44 <_ZN10AudioCodec9Input_CfgEhhh+0x18>
        regval &= ~(3 << 4 | 3 << 0); //disable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 8000f82:	f020 0233 	bic.w	r2, r0, #51	; 0x33
 8000f86:	b292      	uxth	r2, r2
 8000f88:	e7e8      	b.n	8000f5c <_ZN10AudioCodec9Input_CfgEhhh+0x30>
        LINEIN_Gain(0); //disable LINE IN
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff ff93 	bl	8000eb8 <_ZN10AudioCodec11LINEIN_GainEh>
 8000f92:	e7ec      	b.n	8000f6e <_ZN10AudioCodec9Input_CfgEhhh+0x42>
        AUX_Gain(7); //AUX 6dB
 8000f94:	2107      	movs	r1, #7
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff ffab 	bl	8000ef2 <_ZN10AudioCodec8AUX_GainEh>
 8000f9c:	e7ec      	b.n	8000f78 <_ZN10AudioCodec9Input_CfgEhhh+0x4c>

08000f9e <_ZN10AudioCodec10Output_CfgEhh>:

//WM8978 output setting
//dacen:DAC output enabled(1)/disabled(0)
//bpsen:Bypass output(record,include MIC,LINE IN,AUX��) enabled(1)/disabled(0)
void AudioCodec::Output_Cfg(uint8_t dacen, uint8_t bpsen)
{
 8000f9e:	b538      	push	{r3, r4, r5, lr}
 8000fa0:	4605      	mov	r5, r0
    uint16_t regval = 0;
    if (dacen)
 8000fa2:	b971      	cbnz	r1, 8000fc2 <_ZN10AudioCodec10Output_CfgEhh+0x24>
    uint16_t regval = 0;
 8000fa4:	2400      	movs	r4, #0
        regval |= 1 << 0; //DAC output enabled
    if (bpsen)
 8000fa6:	b10a      	cbz	r2, 8000fac <_ZN10AudioCodec10Output_CfgEhh+0xe>
    {
        regval |= 1 << 1; //BYPASS enabled
        regval |= 5 << 2; //0dB
 8000fa8:	f044 0416 	orr.w	r4, r4, #22
    }
    Write_Reg(50, regval);
 8000fac:	4622      	mov	r2, r4
 8000fae:	2132      	movs	r1, #50	; 0x32
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	f7ff ff35 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(51, regval);
 8000fb6:	4622      	mov	r2, r4
 8000fb8:	2133      	movs	r1, #51	; 0x33
 8000fba:	4628      	mov	r0, r5
 8000fbc:	f7ff ff30 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
}
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
        regval |= 1 << 0; //DAC output enabled
 8000fc2:	2401      	movs	r4, #1
 8000fc4:	e7ef      	b.n	8000fa6 <_ZN10AudioCodec10Output_CfgEhh+0x8>

08000fc6 <_ZN10AudioCodec9HPvol_SetEhh>:

//Headphone volume
void AudioCodec::HPvol_Set(uint8_t voll, uint8_t volr)
{
 8000fc6:	b538      	push	{r3, r4, r5, lr}
 8000fc8:	4605      	mov	r5, r0
    HP_Volume = voll;
 8000fca:	7001      	strb	r1, [r0, #0]

    voll &= 0X3F;
    volr &= 0X3F;
 8000fcc:	f002 043f 	and.w	r4, r2, #63	; 0x3f
    if (voll == 0)
 8000fd0:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
 8000fd4:	d101      	bne.n	8000fda <_ZN10AudioCodec9HPvol_SetEhh+0x14>
        voll |= 1 << 6; //volume is 0, mute on
 8000fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    if (volr == 0)
 8000fda:	b90c      	cbnz	r4, 8000fe0 <_ZN10AudioCodec9HPvol_SetEhh+0x1a>
        volr |= 1 << 6;             //volume is 0, mute on
 8000fdc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    Write_Reg(52, voll);            //R52, left channel volume
 8000fe0:	2134      	movs	r1, #52	; 0x34
 8000fe2:	4628      	mov	r0, r5
 8000fe4:	f7ff ff1c 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(53, volr | (1 << 8)); //R53, right channel volume
 8000fe8:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 8000fec:	2135      	movs	r1, #53	; 0x35
 8000fee:	4628      	mov	r0, r5
 8000ff0:	f7ff ff16 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
}
 8000ff4:	bd38      	pop	{r3, r4, r5, pc}

08000ff6 <_ZN10AudioCodec10SPKvol_SetEh>:

//speaker volume
//voll:left channel volume(0~63)
void AudioCodec::SPKvol_Set(uint8_t volx)
{
 8000ff6:	b538      	push	{r3, r4, r5, lr}
 8000ff8:	4605      	mov	r5, r0
    SPK_Volume = volx;
 8000ffa:	7041      	strb	r1, [r0, #1]
    volx &= 0X3F;
    if (volx == 0)
 8000ffc:	f011 043f 	ands.w	r4, r1, #63	; 0x3f
 8001000:	d101      	bne.n	8001006 <_ZN10AudioCodec10SPKvol_SetEh+0x10>
        volx |= 1 << 6;             //volume is 0, mute on
 8001002:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    Write_Reg(54, volx);            //R54, left channel audio volume
 8001006:	4622      	mov	r2, r4
 8001008:	2136      	movs	r1, #54	; 0x36
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff ff08 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(55, volx | (1 << 8)); //R55, right channel audio volume
 8001010:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 8001014:	2137      	movs	r1, #55	; 0x37
 8001016:	4628      	mov	r0, r5
 8001018:	f7ff ff02 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
}
 800101c:	bd38      	pop	{r3, r4, r5, pc}

0800101e <_ZN10AudioCodec7I2S_CfgEhh>:

//I2S working mode
//fmt:0,LSB;1,MSB;2,I2S;3,PCM/DSP;
//len:0,16bist;1,20bits;2,24bits;3,32bits;
void AudioCodec::I2S_Cfg(uint8_t fmt, uint8_t len)
{
 800101e:	b508      	push	{r3, lr}
    fmt &= 0x02;
 8001020:	f001 0102 	and.w	r1, r1, #2
    len &= 0x03;
 8001024:	f002 0203 	and.w	r2, r2, #3
    Write_Reg(4, (fmt << 3) | (len << 5)); //R4,WM8978 working mode
 8001028:	0152      	lsls	r2, r2, #5
 800102a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800102e:	2104      	movs	r1, #4
 8001030:	f7ff fef6 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
}
 8001034:	bd08      	pop	{r3, pc}

08001036 <_ZN10AudioCodec4InitEv>:
{
 8001036:	b538      	push	{r3, r4, r5, lr}
 8001038:	4604      	mov	r4, r0
    Res = Write_Reg(0, 0); //soft reset WM8978
 800103a:	2200      	movs	r2, #0
 800103c:	4611      	mov	r1, r2
 800103e:	f7ff feef 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    if (Res)
 8001042:	b110      	cbz	r0, 800104a <_ZN10AudioCodec4InitEv+0x14>
        return 1; //reset failed, WM8978 exception
 8001044:	2501      	movs	r5, #1
}
 8001046:	4628      	mov	r0, r5
 8001048:	bd38      	pop	{r3, r4, r5, pc}
 800104a:	4605      	mov	r5, r0
    Write_Reg(1, 0X1B);  //R1,MICEN 1(MIC enabled),BIASEN 1(emu on),VMIDSEL[1:0]:11(5K) R1,MICEN设置为1(MIC使能)，BIASEN设置为1(模拟工作，VMIDSEL[1:0]设置为：11（5）)
 800104c:	221b      	movs	r2, #27
 800104e:	2101      	movs	r1, #1
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff fee5 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(2, 0X1B0); //R2, ROUT1,LOUT1 output enabled(headphone),BOOSTENR,BOOSTENL enabled.
 8001056:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800105a:	2102      	movs	r1, #2
 800105c:	4620      	mov	r0, r4
 800105e:	f7ff fedf 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(3, 0X6C);  //R3, LOUT2,ROUT2 output enabled(speaker on),RMIX,LMIX enabled
 8001062:	226c      	movs	r2, #108	; 0x6c
 8001064:	2103      	movs	r1, #3
 8001066:	4620      	mov	r0, r4
 8001068:	f7ff feda 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(6, 0); //R6, MCLK from out
 800106c:	2200      	movs	r2, #0
 800106e:	2106      	movs	r1, #6
 8001070:	4620      	mov	r0, r4
 8001072:	f7ff fed5 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(43, 1 << 4); //R43,INVROUT2 inverted, drive speaker
 8001076:	2210      	movs	r2, #16
 8001078:	212b      	movs	r1, #43	; 0x2b
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fed0 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(47, 1 << 8); //R47,PGABOOSTL,left MIC got 20 db
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	212f      	movs	r1, #47	; 0x2f
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff feca 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(48, 1 << 8); //R48,PGABOOSTR, right MIC got 20 db
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	2130      	movs	r1, #48	; 0x30
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff fec4 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(49, 1 << 1); //R49,TSDEN, open hot protecting
 8001098:	2202      	movs	r2, #2
 800109a:	2131      	movs	r1, #49	; 0x31
 800109c:	4620      	mov	r0, r4
 800109e:	f7ff febf 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(10, 1 << 3); //R10,SOFTMUTE closed,128x sample rate, best SNR
 80010a2:	2208      	movs	r2, #8
 80010a4:	210a      	movs	r1, #10
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff feba 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(14, 1 << 3); //R14,ADC 128x sample rate
 80010ac:	2208      	movs	r2, #8
 80010ae:	210e      	movs	r1, #14
 80010b0:	4620      	mov	r0, r4
 80010b2:	f7ff feb5 	bl	8000e20 <_ZN10AudioCodec9Write_RegEht>
    ADDA_Cfg(1, 1);     //open DAC
 80010b6:	2201      	movs	r2, #1
 80010b8:	4611      	mov	r1, r2
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff fed8 	bl	8000e70 <_ZN10AudioCodec8ADDA_CfgEhh>
    Input_Cfg(1, 0, 0); //close input channel
 80010c0:	2300      	movs	r3, #0
 80010c2:	461a      	mov	r2, r3
 80010c4:	2101      	movs	r1, #1
 80010c6:	4620      	mov	r0, r4
 80010c8:	f7ff ff30 	bl	8000f2c <_ZN10AudioCodec9Input_CfgEhhh>
    Output_Cfg(1, 0);   //open DAC output
 80010cc:	2200      	movs	r2, #0
 80010ce:	2101      	movs	r1, #1
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ff64 	bl	8000f9e <_ZN10AudioCodec10Output_CfgEhh>
    I2S_Cfg(2, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff ff9f 	bl	800101e <_ZN10AudioCodec7I2S_CfgEhh>
    HPvol_Set(HP_Volume, HP_Volume);
 80010e0:	7821      	ldrb	r1, [r4, #0]
 80010e2:	460a      	mov	r2, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	f7ff ff6e 	bl	8000fc6 <_ZN10AudioCodec9HPvol_SetEhh>
    SPKvol_Set(SPK_Volume);
 80010ea:	7861      	ldrb	r1, [r4, #1]
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff ff82 	bl	8000ff6 <_ZN10AudioCodec10SPKvol_SetEh>
    HAL_I2S_Transmit_DMA(i2s, (uint16_t *)&buffer[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
 80010f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010f6:	68e1      	ldr	r1, [r4, #12]
 80010f8:	68a0      	ldr	r0, [r4, #8]
 80010fa:	f004 fd2b 	bl	8005b54 <HAL_I2S_Transmit_DMA>
    return 0;
 80010fe:	e7a2      	b.n	8001046 <_ZN10AudioCodec4InitEv+0x10>

08001100 <_ZN10AudioCodecC1EP17I2C_HandleTypeDefP19__I2S_HandleTypeDefPt>:
AudioCodec::AudioCodec(I2C_HandleTypeDef *hi2c, I2S_HandleTypeDef *hi2s, uint16_t *audiobuff)
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
    i2c = hi2c;
 8001104:	6041      	str	r1, [r0, #4]
    i2s = hi2s;
 8001106:	6082      	str	r2, [r0, #8]
    buffer = audiobuff;
 8001108:	60c3      	str	r3, [r0, #12]
    Init();
 800110a:	f7ff ff94 	bl	8001036 <_ZN10AudioCodec4InitEv>
}
 800110e:	4620      	mov	r0, r4
 8001110:	bd10      	pop	{r4, pc}

08001112 <_ZN3LCD10invertTextEb>:
        write(LCD_DISPLAY_NORMAL, LCD_COMMAND);
    }
}
void LCD::invertText(bool mode)
{
    display.inverttext = mode;
 8001112:	f880 11fc 	strb.w	r1, [r0, #508]	; 0x1fc
}
 8001116:	4770      	bx	lr

08001118 <_ZN3LCD4sendEh>:
    write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
    clrScr();
    display.inverttext = false;
}
void LCD::send(uint8_t val)
{
 8001118:	b510      	push	{r4, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	ac02      	add	r4, sp, #8
 800111e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    HAL_SPI_Transmit(gpio->SPICH, &val, 0x01, 1000);
 8001122:	6800      	ldr	r0, [r0, #0]
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	2201      	movs	r2, #1
 800112a:	4621      	mov	r1, r4
 800112c:	6980      	ldr	r0, [r0, #24]
 800112e:	f005 fb4c 	bl	80067ca <HAL_SPI_Transmit>
};
 8001132:	b002      	add	sp, #8
 8001134:	bd10      	pop	{r4, pc}

08001136 <_ZN3LCD5writeEhh>:
void LCD::write(uint8_t data, uint8_t mode)
{
 8001136:	b538      	push	{r3, r4, r5, lr}
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
    if (mode == LCD_COMMAND)
 800113c:	b1b2      	cbz	r2, 800116c <_ZN3LCD5writeEhh+0x36>
        send(data);
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
    }
    else
    {
        HAL_GPIO_WritePin(gpio->DCPORT, gpio->DCPIN, GPIO_PIN_SET);
 800113e:	6803      	ldr	r3, [r0, #0]
 8001140:	2201      	movs	r2, #1
 8001142:	8999      	ldrh	r1, [r3, #12]
 8001144:	6898      	ldr	r0, [r3, #8]
 8001146:	f004 fa09 	bl	800555c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_RESET);
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	8899      	ldrh	r1, [r3, #4]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	f004 fa03 	bl	800555c <HAL_GPIO_WritePin>
        send(data);
 8001156:	4629      	mov	r1, r5
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff ffdd 	bl	8001118 <_ZN3LCD4sendEh>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	2201      	movs	r2, #1
 8001162:	8899      	ldrh	r1, [r3, #4]
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f004 f9f9 	bl	800555c <HAL_GPIO_WritePin>
    }
}
 800116a:	bd38      	pop	{r3, r4, r5, pc}
        HAL_GPIO_WritePin(gpio->DCPORT, gpio->DCPIN, GPIO_PIN_RESET);
 800116c:	6803      	ldr	r3, [r0, #0]
 800116e:	8999      	ldrh	r1, [r3, #12]
 8001170:	6898      	ldr	r0, [r3, #8]
 8001172:	f004 f9f3 	bl	800555c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_RESET);
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	8899      	ldrh	r1, [r3, #4]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f004 f9ed 	bl	800555c <HAL_GPIO_WritePin>
        send(data);
 8001182:	4629      	mov	r1, r5
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff ffc7 	bl	8001118 <_ZN3LCD4sendEh>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	2201      	movs	r2, #1
 800118e:	8899      	ldrh	r1, [r3, #4]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	f004 f9e3 	bl	800555c <HAL_GPIO_WritePin>
 8001196:	e7e8      	b.n	800116a <_ZN3LCD5writeEhh+0x34>

08001198 <_ZN3LCD6clrScrEv>:
{
 8001198:	b538      	push	{r3, r4, r5, lr}
 800119a:	4605      	mov	r5, r0
    for (int i = 0; i < 504; i++)
 800119c:	2400      	movs	r4, #0
 800119e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80011a2:	da09      	bge.n	80011b8 <_ZN3LCD6clrScrEv+0x20>
        write(0x00, LCD_DATA);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2100      	movs	r1, #0
 80011a8:	4628      	mov	r0, r5
 80011aa:	f7ff ffc4 	bl	8001136 <_ZN3LCD5writeEhh>
        display.buffer[i] = 0;
 80011ae:	192b      	adds	r3, r5, r4
 80011b0:	2200      	movs	r2, #0
 80011b2:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 504; i++)
 80011b4:	3401      	adds	r4, #1
 80011b6:	e7f2      	b.n	800119e <_ZN3LCD6clrScrEv+0x6>
}
 80011b8:	bd38      	pop	{r3, r4, r5, pc}

080011ba <_ZN3LCD4goXYEhh>:
{
 80011ba:	b538      	push	{r3, r4, r5, lr}
 80011bc:	4604      	mov	r4, r0
 80011be:	4615      	mov	r5, r2
    write(0x80 | x, LCD_COMMAND); //Column.
 80011c0:	2200      	movs	r2, #0
 80011c2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80011c6:	f7ff ffb6 	bl	8001136 <_ZN3LCD5writeEhh>
    write(0x40 | y, LCD_COMMAND); //Row.
 80011ca:	2200      	movs	r2, #0
 80011cc:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff ffb0 	bl	8001136 <_ZN3LCD5writeEhh>
};
 80011d6:	bd38      	pop	{r3, r4, r5, pc}

080011d8 <_ZN3LCD7putCharEc>:
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	4605      	mov	r5, r0
 80011dc:	460e      	mov	r6, r1
    for (int i = 0; i < 6; i++)
 80011de:	2400      	movs	r4, #0
 80011e0:	e00e      	b.n	8001200 <_ZN3LCD7putCharEc+0x28>
            write(~(ASCII[c - 0x20][i]), LCD_DATA);
 80011e2:	f1a6 0320 	sub.w	r3, r6, #32
 80011e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011ea:	005a      	lsls	r2, r3, #1
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <_ZN3LCD7putCharEc+0x50>)
 80011ee:	4413      	add	r3, r2
 80011f0:	5d19      	ldrb	r1, [r3, r4]
 80011f2:	43c9      	mvns	r1, r1
 80011f4:	2201      	movs	r2, #1
 80011f6:	b2c9      	uxtb	r1, r1
 80011f8:	4628      	mov	r0, r5
 80011fa:	f7ff ff9c 	bl	8001136 <_ZN3LCD5writeEhh>
    for (int i = 0; i < 6; i++)
 80011fe:	3401      	adds	r4, #1
 8001200:	2c05      	cmp	r4, #5
 8001202:	dc10      	bgt.n	8001226 <_ZN3LCD7putCharEc+0x4e>
        if (display.inverttext != true)
 8001204:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1ea      	bne.n	80011e2 <_ZN3LCD7putCharEc+0xa>
            write(ASCII[c - 0x20][i], LCD_DATA);
 800120c:	f1a6 0320 	sub.w	r3, r6, #32
 8001210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001214:	005a      	lsls	r2, r3, #1
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <_ZN3LCD7putCharEc+0x50>)
 8001218:	4413      	add	r3, r2
 800121a:	2201      	movs	r2, #1
 800121c:	5d19      	ldrb	r1, [r3, r4]
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff ff89 	bl	8001136 <_ZN3LCD5writeEhh>
 8001224:	e7eb      	b.n	80011fe <_ZN3LCD7putCharEc+0x26>
}
 8001226:	bd70      	pop	{r4, r5, r6, pc}
 8001228:	080082a8 	.word	0x080082a8

0800122c <_ZN3LCD5printEPchh>:
{
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4605      	mov	r5, r0
 8001230:	460c      	mov	r4, r1
 8001232:	4611      	mov	r1, r2
    goXY(x, y);
 8001234:	461a      	mov	r2, r3
 8001236:	f7ff ffc0 	bl	80011ba <_ZN3LCD4goXYEhh>
    while (*str)
 800123a:	7821      	ldrb	r1, [r4, #0]
 800123c:	b121      	cbz	r1, 8001248 <_ZN3LCD5printEPchh+0x1c>
        putChar(*str++);
 800123e:	3401      	adds	r4, #1
 8001240:	4628      	mov	r0, r5
 8001242:	f7ff ffc9 	bl	80011d8 <_ZN3LCD7putCharEc>
    while (*str)
 8001246:	e7f8      	b.n	800123a <_ZN3LCD5printEPchh+0xe>
};
 8001248:	bd38      	pop	{r3, r4, r5, pc}

0800124a <_ZN3LCD4initEv>:
{
 800124a:	b510      	push	{r4, lr}
 800124c:	4604      	mov	r4, r0
    write(0x21, LCD_COMMAND);               //LCD extended commands.
 800124e:	2200      	movs	r2, #0
 8001250:	2121      	movs	r1, #33	; 0x21
 8001252:	f7ff ff70 	bl	8001136 <_ZN3LCD5writeEhh>
    write(0xBE, LCD_COMMAND);               //set LCD Vop(Contrast).
 8001256:	2200      	movs	r2, #0
 8001258:	21be      	movs	r1, #190	; 0xbe
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff ff6b 	bl	8001136 <_ZN3LCD5writeEhh>
    write(0x04, LCD_COMMAND);               //set temp coefficent.
 8001260:	2200      	movs	r2, #0
 8001262:	2104      	movs	r1, #4
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff ff66 	bl	8001136 <_ZN3LCD5writeEhh>
    write(0x14, LCD_COMMAND);               //LCD bias mode 1:40.
 800126a:	2200      	movs	r2, #0
 800126c:	2114      	movs	r1, #20
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff ff61 	bl	8001136 <_ZN3LCD5writeEhh>
    write(0x20, LCD_COMMAND);               //LCD basic commands.
 8001274:	2200      	movs	r2, #0
 8001276:	2120      	movs	r1, #32
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff ff5c 	bl	8001136 <_ZN3LCD5writeEhh>
    write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 800127e:	2200      	movs	r2, #0
 8001280:	210c      	movs	r1, #12
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff ff57 	bl	8001136 <_ZN3LCD5writeEhh>
    clrScr();
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff ff85 	bl	8001198 <_ZN3LCD6clrScrEv>
    display.inverttext = false;
 800128e:	2300      	movs	r3, #0
 8001290:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8001294:	bd10      	pop	{r4, pc}

08001296 <_ZN3LCDC1EP8LCD_GPIO>:
LCD::LCD(LCD_GPIO* hgpio)
 8001296:	b510      	push	{r4, lr}
 8001298:	4604      	mov	r4, r0
 800129a:	460b      	mov	r3, r1
    gpio = hgpio;
 800129c:	6021      	str	r1, [r4, #0]
    HAL_GPIO_WritePin(gpio->BLPORT, gpio->BLPIN, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	8a89      	ldrh	r1, [r1, #20]
 80012a2:	6918      	ldr	r0, [r3, #16]
 80012a4:	f004 f95a 	bl	800555c <HAL_GPIO_WritePin>
    init();
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff ffce 	bl	800124a <_ZN3LCD4initEv>
}
 80012ae:	4620      	mov	r0, r4
 80012b0:	bd10      	pop	{r4, pc}

080012b2 <_ZN3LCD10refreshScrEv>:
void LCD::refreshScr()
{
 80012b2:	b570      	push	{r4, r5, r6, lr}
 80012b4:	4605      	mov	r5, r0
    goXY(LCD_SETXADDR, LCD_SETYADDR);
 80012b6:	2240      	movs	r2, #64	; 0x40
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	f7ff ff7e 	bl	80011ba <_ZN3LCD4goXYEhh>
    for (int i = 0; i < 6; i++)
 80012be:	2600      	movs	r6, #0
 80012c0:	e000      	b.n	80012c4 <_ZN3LCD10refreshScrEv+0x12>
 80012c2:	3601      	adds	r6, #1
 80012c4:	2e05      	cmp	r6, #5
 80012c6:	dc0d      	bgt.n	80012e4 <_ZN3LCD10refreshScrEv+0x32>
    {
        for (int j = 0; j < LCD_WIDTH; j++)
 80012c8:	2400      	movs	r4, #0
 80012ca:	2c53      	cmp	r4, #83	; 0x53
 80012cc:	dcf9      	bgt.n	80012c2 <_ZN3LCD10refreshScrEv+0x10>
        {
            write(display.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 80012ce:	2354      	movs	r3, #84	; 0x54
 80012d0:	fb03 4306 	mla	r3, r3, r6, r4
 80012d4:	442b      	add	r3, r5
 80012d6:	2201      	movs	r2, #1
 80012d8:	7919      	ldrb	r1, [r3, #4]
 80012da:	4628      	mov	r0, r5
 80012dc:	f7ff ff2b 	bl	8001136 <_ZN3LCD5writeEhh>
        for (int j = 0; j < LCD_WIDTH; j++)
 80012e0:	3401      	adds	r4, #1
 80012e2:	e7f2      	b.n	80012ca <_ZN3LCD10refreshScrEv+0x18>
        }
    }
};
 80012e4:	bd70      	pop	{r4, r5, r6, pc}

080012e6 <_ZN3LCD9drawHLineEiii>:

void LCD::drawHLine(int x, int y, int l)
{
    int by, bi;

    if ((x >= 0) && (x < LCD_WIDTH) && (y >= 0) && (y < LCD_HEIGHT))
 80012e6:	2953      	cmp	r1, #83	; 0x53
 80012e8:	d823      	bhi.n	8001332 <_ZN3LCD9drawHLineEiii+0x4c>
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	db21      	blt.n	8001332 <_ZN3LCD9drawHLineEiii+0x4c>
 80012ee:	2a2f      	cmp	r2, #47	; 0x2f
 80012f0:	dc1f      	bgt.n	8001332 <_ZN3LCD9drawHLineEiii+0x4c>
{
 80012f2:	b4f0      	push	{r4, r5, r6, r7}
    {
        for (int cx = 0; cx < l; cx++)
 80012f4:	2500      	movs	r5, #0
 80012f6:	e013      	b.n	8001320 <_ZN3LCD9drawHLineEiii+0x3a>
        {
            by = ((y / 8) * 84) + x;
 80012f8:	10e4      	asrs	r4, r4, #3
 80012fa:	2654      	movs	r6, #84	; 0x54
 80012fc:	fb06 1404 	mla	r4, r6, r4, r1
            bi = y % 8;
 8001300:	4256      	negs	r6, r2
 8001302:	f002 0707 	and.w	r7, r2, #7
 8001306:	f006 0607 	and.w	r6, r6, #7
 800130a:	bf58      	it	pl
 800130c:	4277      	negpl	r7, r6
            display.buffer[by + cx] |= (1 << bi);
 800130e:	442c      	add	r4, r5
 8001310:	2601      	movs	r6, #1
 8001312:	fa06 f707 	lsl.w	r7, r6, r7
 8001316:	4404      	add	r4, r0
 8001318:	7926      	ldrb	r6, [r4, #4]
 800131a:	433e      	orrs	r6, r7
 800131c:	7126      	strb	r6, [r4, #4]
        for (int cx = 0; cx < l; cx++)
 800131e:	3501      	adds	r5, #1
 8001320:	429d      	cmp	r5, r3
 8001322:	da04      	bge.n	800132e <_ZN3LCD9drawHLineEiii+0x48>
            by = ((y / 8) * 84) + x;
 8001324:	4614      	mov	r4, r2
 8001326:	2a00      	cmp	r2, #0
 8001328:	dae6      	bge.n	80012f8 <_ZN3LCD9drawHLineEiii+0x12>
 800132a:	1dd4      	adds	r4, r2, #7
 800132c:	e7e4      	b.n	80012f8 <_ZN3LCD9drawHLineEiii+0x12>
        }
    }
};
 800132e:	bcf0      	pop	{r4, r5, r6, r7}
 8001330:	4770      	bx	lr
 8001332:	4770      	bx	lr

08001334 <maincpp>:
//         i2c.DR
//     }
// };

int maincpp(PS_Communication_Interface* comms, PS_Encoder_Timers* enc, LCD_GPIO* lcdGpio)
{
 8001334:	b500      	push	{lr}
 8001336:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800133a:	4604      	mov	r4, r0

    LCD lcd (lcdGpio);
 800133c:	4611      	mov	r1, r2
 800133e:	a806      	add	r0, sp, #24
 8001340:	f7ff ffa9 	bl	8001296 <_ZN3LCDC1EP8LCD_GPIO>
    MenuSystem menu(&lcd);
 8001344:	a906      	add	r1, sp, #24
 8001346:	a805      	add	r0, sp, #20
 8001348:	f000 f80c 	bl	8001364 <_ZN10MenuSystemC1EP3LCD>

    uint16_t audiobuff[1];
    AudioCodec audio(comms->i2c, comms->i2s, audiobuff);
 800134c:	ab04      	add	r3, sp, #16
 800134e:	6862      	ldr	r2, [r4, #4]
 8001350:	6821      	ldr	r1, [r4, #0]
 8001352:	4668      	mov	r0, sp
 8001354:	f7ff fed4 	bl	8001100 <_ZN10AudioCodecC1EP17I2C_HandleTypeDefP19__I2S_HandleTypeDefPt>

    menu.MainMenu();
 8001358:	a805      	add	r0, sp, #20
 800135a:	f000 f805 	bl	8001368 <_ZN10MenuSystem8MainMenuEv>

    // make use of i2c struct
    while(1)
    {
        PS_Application();
 800135e:	f000 f8af 	bl	80014c0 <PS_Application>
 8001362:	e7fc      	b.n	800135e <maincpp+0x2a>

08001364 <_ZN10MenuSystemC1EP3LCD>:

extern uint8_t WM8978_SPK_Volume;

MenuSystem::MenuSystem(LCD *hlcd)
{
    lcd = hlcd;
 8001364:	6001      	str	r1, [r0, #0]
}
 8001366:	4770      	bx	lr

08001368 <_ZN10MenuSystem8MainMenuEv>:
/**
  * @brief Main Menu
  */
void MenuSystem::MainMenu()
{
 8001368:	b510      	push	{r4, lr}
 800136a:	4604      	mov	r4, r0
    lcd->drawHLine(0, 8, 83);
 800136c:	2353      	movs	r3, #83	; 0x53
 800136e:	2208      	movs	r2, #8
 8001370:	2100      	movs	r1, #0
 8001372:	6800      	ldr	r0, [r0, #0]
 8001374:	f7ff ffb7 	bl	80012e6 <_ZN3LCD9drawHLineEiii>
    lcd->refreshScr();
 8001378:	6820      	ldr	r0, [r4, #0]
 800137a:	f7ff ff9a 	bl	80012b2 <_ZN3LCD10refreshScrEv>
    if (activeItem == 0)
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <_ZN10MenuSystem8MainMenuEv+0xe8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d132      	bne.n	80013ec <_ZN10MenuSystem8MainMenuEv+0x84>
    {
        lcd->invertText(true);
 8001386:	2101      	movs	r1, #1
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	f7ff fec2 	bl	8001112 <_ZN3LCD10invertTextEb>
        lcd->print("SINE", 0, 0);
 800138e:	2300      	movs	r3, #0
 8001390:	461a      	mov	r2, r3
 8001392:	4930      	ldr	r1, [pc, #192]	; (8001454 <_ZN10MenuSystem8MainMenuEv+0xec>)
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	f7ff ff49 	bl	800122c <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 800139a:	2100      	movs	r1, #0
 800139c:	6820      	ldr	r0, [r4, #0]
 800139e:	f7ff feb8 	bl	8001112 <_ZN3LCD10invertTextEb>
    else
    {
        lcd->print("SINE", 0, 0);
    }
    //  lcd->goXY(0,20);
    lcd->print("Freq       440", 0, 1);
 80013a2:	2301      	movs	r3, #1
 80013a4:	2200      	movs	r2, #0
 80013a6:	492c      	ldr	r1, [pc, #176]	; (8001458 <_ZN10MenuSystem8MainMenuEv+0xf0>)
 80013a8:	6820      	ldr	r0, [r4, #0]
 80013aa:	f7ff ff3f 	bl	800122c <_ZN3LCD5printEPchh>
    lcd->print("Mod        100", 0, 2);
 80013ae:	2302      	movs	r3, #2
 80013b0:	2200      	movs	r2, #0
 80013b2:	492a      	ldr	r1, [pc, #168]	; (800145c <_ZN10MenuSystem8MainMenuEv+0xf4>)
 80013b4:	6820      	ldr	r0, [r4, #0]
 80013b6:	f7ff ff39 	bl	800122c <_ZN3LCD5printEPchh>
    lcd->print("Rate      1200", 0, 3);
 80013ba:	2303      	movs	r3, #3
 80013bc:	2200      	movs	r2, #0
 80013be:	4928      	ldr	r1, [pc, #160]	; (8001460 <_ZN10MenuSystem8MainMenuEv+0xf8>)
 80013c0:	6820      	ldr	r0, [r4, #0]
 80013c2:	f7ff ff33 	bl	800122c <_ZN3LCD5printEPchh>
    lcd->print("- - - -       ", 0, 4);
 80013c6:	2304      	movs	r3, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	4926      	ldr	r1, [pc, #152]	; (8001464 <_ZN10MenuSystem8MainMenuEv+0xfc>)
 80013cc:	6820      	ldr	r0, [r4, #0]
 80013ce:	f7ff ff2d 	bl	800122c <_ZN3LCD5printEPchh>

    if (activeItem == 1)
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <_ZN10MenuSystem8MainMenuEv+0xe8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d00f      	beq.n	80013fa <_ZN10MenuSystem8MainMenuEv+0x92>
        lcd->print("         MIXER", 0, 5);
        lcd->invertText(true);
        lcd->print("<  >", 0, 5);
        lcd->invertText(false);
    }
    else if (activeItem == 2)
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d022      	beq.n	8001424 <_ZN10MenuSystem8MainMenuEv+0xbc>
        lcd->print("MIXER", 54, 5);
        lcd->invertText(false);
    }
    else
    {
        lcd->print("<  >     MIXER", 0, 5);
 80013de:	2305      	movs	r3, #5
 80013e0:	2200      	movs	r2, #0
 80013e2:	4921      	ldr	r1, [pc, #132]	; (8001468 <_ZN10MenuSystem8MainMenuEv+0x100>)
 80013e4:	6820      	ldr	r0, [r4, #0]
 80013e6:	f7ff ff21 	bl	800122c <_ZN3LCD5printEPchh>
    }
}
 80013ea:	bd10      	pop	{r4, pc}
        lcd->print("SINE", 0, 0);
 80013ec:	2300      	movs	r3, #0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4918      	ldr	r1, [pc, #96]	; (8001454 <_ZN10MenuSystem8MainMenuEv+0xec>)
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	f7ff ff1a 	bl	800122c <_ZN3LCD5printEPchh>
 80013f8:	e7d3      	b.n	80013a2 <_ZN10MenuSystem8MainMenuEv+0x3a>
        lcd->print("         MIXER", 0, 5);
 80013fa:	2305      	movs	r3, #5
 80013fc:	2200      	movs	r2, #0
 80013fe:	491b      	ldr	r1, [pc, #108]	; (800146c <_ZN10MenuSystem8MainMenuEv+0x104>)
 8001400:	6820      	ldr	r0, [r4, #0]
 8001402:	f7ff ff13 	bl	800122c <_ZN3LCD5printEPchh>
        lcd->invertText(true);
 8001406:	2101      	movs	r1, #1
 8001408:	6820      	ldr	r0, [r4, #0]
 800140a:	f7ff fe82 	bl	8001112 <_ZN3LCD10invertTextEb>
        lcd->print("<  >", 0, 5);
 800140e:	2305      	movs	r3, #5
 8001410:	2200      	movs	r2, #0
 8001412:	4917      	ldr	r1, [pc, #92]	; (8001470 <_ZN10MenuSystem8MainMenuEv+0x108>)
 8001414:	6820      	ldr	r0, [r4, #0]
 8001416:	f7ff ff09 	bl	800122c <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 800141a:	2100      	movs	r1, #0
 800141c:	6820      	ldr	r0, [r4, #0]
 800141e:	f7ff fe78 	bl	8001112 <_ZN3LCD10invertTextEb>
 8001422:	e7e2      	b.n	80013ea <_ZN10MenuSystem8MainMenuEv+0x82>
        lcd->print("<  >", 0, 5);
 8001424:	2305      	movs	r3, #5
 8001426:	2200      	movs	r2, #0
 8001428:	4911      	ldr	r1, [pc, #68]	; (8001470 <_ZN10MenuSystem8MainMenuEv+0x108>)
 800142a:	6820      	ldr	r0, [r4, #0]
 800142c:	f7ff fefe 	bl	800122c <_ZN3LCD5printEPchh>
        lcd->invertText(true);
 8001430:	2101      	movs	r1, #1
 8001432:	6820      	ldr	r0, [r4, #0]
 8001434:	f7ff fe6d 	bl	8001112 <_ZN3LCD10invertTextEb>
        lcd->print("MIXER", 54, 5);
 8001438:	2305      	movs	r3, #5
 800143a:	2236      	movs	r2, #54	; 0x36
 800143c:	490d      	ldr	r1, [pc, #52]	; (8001474 <_ZN10MenuSystem8MainMenuEv+0x10c>)
 800143e:	6820      	ldr	r0, [r4, #0]
 8001440:	f7ff fef4 	bl	800122c <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 8001444:	2100      	movs	r1, #0
 8001446:	6820      	ldr	r0, [r4, #0]
 8001448:	f7ff fe63 	bl	8001112 <_ZN3LCD10invertTextEb>
 800144c:	e7cd      	b.n	80013ea <_ZN10MenuSystem8MainMenuEv+0x82>
 800144e:	bf00      	nop
 8001450:	20003fe4 	.word	0x20003fe4
 8001454:	080084e8 	.word	0x080084e8
 8001458:	080084f0 	.word	0x080084f0
 800145c:	08008500 	.word	0x08008500
 8001460:	08008510 	.word	0x08008510
 8001464:	08008520 	.word	0x08008520
 8001468:	08008550 	.word	0x08008550
 800146c:	08008530 	.word	0x08008530
 8001470:	08008540 	.word	0x08008540
 8001474:	08008548 	.word	0x08008548

08001478 <TriggerSound>:
 * @brief  Trigger the sound on
 * @param  None
 * @retval none
 */
void TriggerSound(void)
{
 8001478:	b510      	push	{r4, lr}
	if(triggered) {
 800147a:	4c0d      	ldr	r4, [pc, #52]	; (80014b0 <TriggerSound+0x38>)
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <TriggerSound+0x3c>)
 800147e:	7822      	ldrb	r2, [r4, #0]
 8001480:	b17a      	cbz	r2, 80014a2 <TriggerSound+0x2a>
		velocity = 0;
 8001482:	2200      	movs	r2, #0
		ADSR_keyOff(&adsr);
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <TriggerSound+0x40>)
		velocity = 0;
 8001486:	701a      	strb	r2, [r3, #0]
		ADSR_keyOff(&adsr);
 8001488:	f000 f963 	bl	8001752 <ADSR_keyOff>
	} else {
		velocity = 127;
		ADSR_keyOn(&adsr);
	}

	triggered = !triggered;
 800148c:	7822      	ldrb	r2, [r4, #0]
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <TriggerSound+0x44>)
	triggered = !triggered;
 8001490:	f082 0201 	eor.w	r2, r2, #1
 8001494:	7022      	strb	r2, [r4, #0]
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 8001496:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 800149a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 800149e:	f004 b85d 	b.w	800555c <HAL_GPIO_WritePin>
		velocity = 127;
 80014a2:	227f      	movs	r2, #127	; 0x7f
		ADSR_keyOn(&adsr);
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <TriggerSound+0x40>)
		velocity = 127;
 80014a6:	701a      	strb	r2, [r3, #0]
		ADSR_keyOn(&adsr);
 80014a8:	f000 f94a 	bl	8001740 <ADSR_keyOn>
 80014ac:	e7ee      	b.n	800148c <TriggerSound+0x14>
 80014ae:	bf00      	nop
 80014b0:	20003fe8 	.word	0x20003fe8
 80014b4:	20012ab4 	.word	0x20012ab4
 80014b8:	200000fc 	.word	0x200000fc
 80014bc:	40020800 	.word	0x40020800

080014c0 <PS_Application>:
{
 80014c0:	b508      	push	{r3, lr}
	TriggerSound();
 80014c2:	f7ff ffd9 	bl	8001478 <TriggerSound>
	HAL_Delay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80014ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 80014ce:	f003 bd5b 	b.w	8004f88 <HAL_Delay>

080014d2 <MagicFX>:
//}

/*-----------------------------------------------------------------------------*/
void MagicFX(uint8_t val) /* random effects parameters */
{
	if (val == MIDI_MAXi)
 80014d2:	287f      	cmp	r0, #127	; 0x7f
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
	if (val == MIDI_MAXi)
 80014d8:	d13d      	bne.n	8001556 <MagicFX+0x84>
	{
		Delay_switch(MIDI_MAXi);
 80014da:	f002 ffd5 	bl	8004488 <Delay_switch>
		Delay_time_set(MIDIrandVal());
 80014de:	f002 fbfd 	bl	8003cdc <MIDIrandVal>
 80014e2:	f001 fa31 	bl	8002948 <Delay_time_set>
		DelayWet_set(MIDIrandVal());
 80014e6:	f002 fbf9 	bl	8003cdc <MIDIrandVal>
 80014ea:	f001 fa67 	bl	80029bc <DelayWet_set>
		DelayFeedback_set(MIDIrandVal());
 80014ee:	f002 fbf5 	bl	8003cdc <MIDIrandVal>
 80014f2:	f001 fa53 	bl	800299c <DelayFeedback_set>

		Chorus_switch(MIDI_MAXi);
 80014f6:	4620      	mov	r0, r4
 80014f8:	f002 ffdc 	bl	80044b4 <Chorus_switch>
		ChorusRate_set(MIDIrandVal());
 80014fc:	f002 fbee 	bl	8003cdc <MIDIrandVal>
 8001500:	f001 f848 	bl	8002594 <ChorusRate_set>
		ChorusSecondRate_set(MIDIrandVal());
 8001504:	f002 fbea 	bl	8003cdc <MIDIrandVal>
 8001508:	f001 f862 	bl	80025d0 <ChorusSecondRate_set>
		ChorusDelay_set(MIDIrandVal());
 800150c:	f002 fbe6 	bl	8003cdc <MIDIrandVal>
 8001510:	f001 f87c 	bl	800260c <ChorusDelay_set>
		ChorusSweep_set(MIDIrandVal());
 8001514:	f002 fbe2 	bl	8003cdc <MIDIrandVal>
 8001518:	f001 f8aa 	bl	8002670 <ChorusSweep_set>
		ChorusFeedback_set(MIDIrandVal());
 800151c:	f002 fbde 	bl	8003cdc <MIDIrandVal>
 8001520:	f001 f88a 	bl	8002638 <ChorusFeedback_set>
		ChorusMode_switch(MIDIrandVal());
 8001524:	f002 fbda 	bl	8003cdc <MIDIrandVal>
 8001528:	f001 f8b4 	bl	8002694 <ChorusMode_switch>
		ChorusFDBsign_switch(MIDIrandVal());
 800152c:	f002 fbd6 	bl	8003cdc <MIDIrandVal>
 8001530:	f001 f8c4 	bl	80026bc <ChorusFDBsign_switch>

		Phaser_switch(MIDI_MAXi);
 8001534:	4620      	mov	r0, r4
 8001536:	f002 ffc7 	bl	80044c8 <Phaser_switch>
		Phaser_Rate_set(MIDIrandVal());
 800153a:	f002 fbcf 	bl	8003cdc <MIDIrandVal>
 800153e:	f002 fae9 	bl	8003b14 <Phaser_Rate_set>
		Phaser_Feedback_set(MIDIrandVal());
 8001542:	f002 fbcb 	bl	8003cdc <MIDIrandVal>
 8001546:	f002 fb05 	bl	8003b54 <Phaser_Feedback_set>
		Phaser_Wet_set(MIDIrandVal());
 800154a:	f002 fbc7 	bl	8003cdc <MIDIrandVal>
	}
}
 800154e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Phaser_Wet_set(MIDIrandVal());
 8001552:	f002 bb15 	b.w	8003b80 <Phaser_Wet_set>
}
 8001556:	bd10      	pop	{r4, pc}

08001558 <MagicPatch>:
/*-----------------------------------------------------------------------------*/
void MagicPatch(uint8_t val) /* random sound parameters */
{
	if (val == MIDI_MAXi)
 8001558:	287f      	cmp	r0, #127	; 0x7f
{
 800155a:	b508      	push	{r3, lr}
	if (val == MIDI_MAXi)
 800155c:	f040 80bb 	bne.w	80016d6 <MagicPatch+0x17e>
	{
		seq_tempo_set(MIDIrandVal());
 8001560:	f002 fbbc 	bl	8003cdc <MIDIrandVal>
 8001564:	f002 fdae 	bl	80040c4 <seq_tempo_set>
		seq_freqMax_set(MIDIrandVal());
 8001568:	f002 fbb8 	bl	8003cdc <MIDIrandVal>
 800156c:	f002 fe3c 	bl	80041e8 <seq_freqMax_set>
		seq_scale_set(MIDIrandVal());
 8001570:	f002 fbb4 	bl	8003cdc <MIDIrandVal>
 8001574:	f002 fe02 	bl	800417c <seq_scale_set>
		seq_switchMovingSeq(MIDIrandVal());
 8001578:	f002 fbb0 	bl	8003cdc <MIDIrandVal>
 800157c:	f002 fe1c 	bl	80041b8 <seq_switchMovingSeq>
		seq_switchMute(MIDIrandVal());
 8001580:	f002 fbac 	bl	8003cdc <MIDIrandVal>
 8001584:	f002 fe22 	bl	80041cc <seq_switchMute>
		seq_gateTime_set(MIDIrandVal());
 8001588:	f002 fba8 	bl	8003cdc <MIDIrandVal>
 800158c:	f002 fdbe 	bl	800410c <seq_gateTime_set>
		autoSound_set(rand() % 3);
 8001590:	f006 fdd6 	bl	8008140 <rand>
 8001594:	2303      	movs	r3, #3
 8001596:	fb90 f3f3 	sdiv	r3, r0, r3
 800159a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800159e:	1ac0      	subs	r0, r0, r3
 80015a0:	b240      	sxtb	r0, r0
 80015a2:	f002 fee5 	bl	8004370 <autoSound_set>
		Sound_set(MIDIrandVal());
 80015a6:	f002 fb99 	bl	8003cdc <MIDIrandVal>
 80015aa:	f002 ff97 	bl	80044dc <Sound_set>
		uint8_t snd = soundNumber_get();
 80015ae:	f002 fee5 	bl	800437c <soundNumber_get>

		if (snd == FM2)
 80015b2:	280e      	cmp	r0, #14
 80015b4:	d17c      	bne.n	80016b0 <MagicPatch+0x158>
		{
			FM_OP1_freq_set(MIDIrandVal());
 80015b6:	f002 fb91 	bl	8003cdc <MIDIrandVal>
 80015ba:	f002 ffb1 	bl	8004520 <FM_OP1_freq_set>
			FM_OP1_modInd_set(MIDIrandVal());
 80015be:	f002 fb8d 	bl	8003cdc <MIDIrandVal>
 80015c2:	f002 ffb3 	bl	800452c <FM_OP1_modInd_set>
			FM_OP2_freq_set(MIDIrandVal());
 80015c6:	f002 fb89 	bl	8003cdc <MIDIrandVal>
 80015ca:	f002 ffb5 	bl	8004538 <FM_OP2_freq_set>
			FM_OP2_modInd_set(MIDIrandVal());
 80015ce:	f002 fb85 	bl	8003cdc <MIDIrandVal>
 80015d2:	f002 ffc3 	bl	800455c <FM_OP2_modInd_set>
			FM_OP3_freq_set(MIDIrandVal());
 80015d6:	f002 fb81 	bl	8003cdc <MIDIrandVal>
 80015da:	f002 ffc5 	bl	8004568 <FM_OP3_freq_set>
			FM_OP3_modInd_set(MIDIrandVal());
 80015de:	f002 fb7d 	bl	8003cdc <MIDIrandVal>
 80015e2:	f002 ffd3 	bl	800458c <FM_OP3_modInd_set>
			FM_OP4_freq_set(MIDIrandVal());
 80015e6:	f002 fb79 	bl	8003cdc <MIDIrandVal>
 80015ea:	f002 ffd5 	bl	8004598 <FM_OP4_freq_set>
			FM_OP4_modInd_set(MIDIrandVal());
 80015ee:	f002 fb75 	bl	8003cdc <MIDIrandVal>
 80015f2:	f002 ffe3 	bl	80045bc <FM_OP4_modInd_set>
			Drifter_minFreq_set(MIDIrandVal());
			Drifter_maxFreq_set(MIDIrandVal());
			Drifter_centralFreq_set(MIDIrandVal());
		}

		Filter1Freq_set(MIDIrandVal());
 80015f6:	f002 fb71 	bl	8003cdc <MIDIrandVal>
 80015fa:	f002 fbfd 	bl	8003df8 <Filter1Freq_set>
		Filter1Res_set(MIDIrandVal());
 80015fe:	f002 fb6d 	bl	8003cdc <MIDIrandVal>
 8001602:	f002 fc17 	bl	8003e34 <Filter1Res_set>
		Filter1Drive_set(MIDIrandVal());
 8001606:	f002 fb69 	bl	8003cdc <MIDIrandVal>
 800160a:	f002 fc23 	bl	8003e54 <Filter1Drive_set>
		Filter1Type_set(MIDIrandVal());
 800160e:	f002 fb65 	bl	8003cdc <MIDIrandVal>
 8001612:	f002 fc25 	bl	8003e60 <Filter1Type_set>
		Filt1LFO_amp_set(MIDIrandVal());
 8001616:	f002 fb61 	bl	8003cdc <MIDIrandVal>
 800161a:	f002 fed5 	bl	80043c8 <Filt1LFO_amp_set>
		Filt1LFO_freq_set(MIDIrandVal());
 800161e:	f002 fb5d 	bl	8003cdc <MIDIrandVal>
 8001622:	f002 fee1 	bl	80043e8 <Filt1LFO_freq_set>

		Filter2Freq_set(MIDIrandVal());
 8001626:	f002 fb59 	bl	8003cdc <MIDIrandVal>
 800162a:	f002 fc2d 	bl	8003e88 <Filter2Freq_set>
		Filter2Res_set(MIDIrandVal());
 800162e:	f002 fb55 	bl	8003cdc <MIDIrandVal>
 8001632:	f002 fc47 	bl	8003ec4 <Filter2Res_set>
		Filter2Drive_set(MIDIrandVal());
 8001636:	f002 fb51 	bl	8003cdc <MIDIrandVal>
 800163a:	f002 fc53 	bl	8003ee4 <Filter2Drive_set>
		Filter2Type_set(MIDIrandVal());
 800163e:	f002 fb4d 	bl	8003cdc <MIDIrandVal>
 8001642:	f002 fc55 	bl	8003ef0 <Filter2Type_set>
		Filt2LFO_amp_set(MIDIrandVal());
 8001646:	f002 fb49 	bl	8003cdc <MIDIrandVal>
 800164a:	f002 fedd 	bl	8004408 <Filt2LFO_amp_set>
		Filt2LFO_freq_set(MIDIrandVal());
 800164e:	f002 fb45 	bl	8003cdc <MIDIrandVal>
 8001652:	f002 fee9 	bl	8004428 <Filt2LFO_freq_set>

		Filter_Random_switch(MIDIrandVal());
 8001656:	f002 fb41 	bl	8003cdc <MIDIrandVal>
 800165a:	f002 ff21 	bl	80044a0 <Filter_Random_switch>

		AttTime_set((uint8_t)lrintf(frand_a_b(0, MIDI_MAX / 10)));
 800165e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80016d8 <MagicPatch+0x180>
 8001662:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80016dc <MagicPatch+0x184>
 8001666:	f002 fb23 	bl	8003cb0 <frand_a_b>
 800166a:	f005 fb4d 	bl	8006d08 <lrintf>
 800166e:	b2c0      	uxtb	r0, r0
 8001670:	f000 f878 	bl	8001764 <AttTime_set>
		DecTime_set(MIDIrandVal());
 8001674:	f002 fb32 	bl	8003cdc <MIDIrandVal>
 8001678:	f000 f896 	bl	80017a8 <DecTime_set>
		SustLevel_set(MIDIrandVal());
 800167c:	f002 fb2e 	bl	8003cdc <MIDIrandVal>
 8001680:	f000 f8c6 	bl	8001810 <SustLevel_set>
		RelTime_set(MIDIrandVal());
 8001684:	f002 fb2a 	bl	8003cdc <MIDIrandVal>
 8001688:	f000 f8d2 	bl	8001830 <RelTime_set>

		VibratoAmp_set(MIDIrandVal());
 800168c:	f002 fb26 	bl	8003cdc <MIDIrandVal>
 8001690:	f002 feda 	bl	8004448 <VibratoAmp_set>
		VibratoFreq_set(MIDIrandVal());
 8001694:	f002 fb22 	bl	8003cdc <MIDIrandVal>
 8001698:	f002 fee6 	bl	8004468 <VibratoFreq_set>

		AmpLFO_amp_set(MIDIrandVal());
 800169c:	f002 fb1e 	bl	8003cdc <MIDIrandVal>
 80016a0:	f002 fe72 	bl	8004388 <AmpLFO_amp_set>
		AmpLFO_freq_set(MIDIrandVal());
 80016a4:	f002 fb1a 	bl	8003cdc <MIDIrandVal>
	}
}
 80016a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		AmpLFO_freq_set(MIDIrandVal());
 80016ac:	f002 be7c 	b.w	80043a8 <AmpLFO_freq_set>
		else if (snd == DRIFTERS)
 80016b0:	280d      	cmp	r0, #13
 80016b2:	d1a0      	bne.n	80015f6 <MagicPatch+0x9e>
			Drifter_amp_set(MIDIrandVal());
 80016b4:	f002 fb12 	bl	8003cdc <MIDIrandVal>
 80016b8:	f001 f9ec 	bl	8002a94 <Drifter_amp_set>
			Drifter_minFreq_set(MIDIrandVal());
 80016bc:	f002 fb0e 	bl	8003cdc <MIDIrandVal>
 80016c0:	f001 f9fe 	bl	8002ac0 <Drifter_minFreq_set>
			Drifter_maxFreq_set(MIDIrandVal());
 80016c4:	f002 fb0a 	bl	8003cdc <MIDIrandVal>
 80016c8:	f001 fa16 	bl	8002af8 <Drifter_maxFreq_set>
			Drifter_centralFreq_set(MIDIrandVal());
 80016cc:	f002 fb06 	bl	8003cdc <MIDIrandVal>
 80016d0:	f001 fd0a 	bl	80030e8 <Drifter_centralFreq_set>
 80016d4:	e78f      	b.n	80015f6 <MagicPatch+0x9e>
}
 80016d6:	bd08      	pop	{r3, pc}
 80016d8:	414b3333 	.word	0x414b3333
 80016dc:	00000000 	.word	0x00000000

080016e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2)
 80016e0:	6802      	ldr	r2, [r0, #0]
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_I2S_TxCpltCallback+0x14>)
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d104      	bne.n	80016f2 <HAL_I2S_TxCpltCallback+0x12>
  {
    /* Call the user function which will manage directly transfer complete */
	  make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
 80016e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <HAL_I2S_TxCpltCallback+0x18>)
 80016ee:	f003 b8b7 	b.w	8004860 <make_sound>
  }
}
 80016f2:	4770      	bx	lr
 80016f4:	40003800 	.word	0x40003800
 80016f8:	20013286 	.word	0x20013286

080016fc <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2)
 80016fc:	6802      	ldr	r2, [r0, #0]
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <HAL_I2S_TxHalfCpltCallback+0x14>)
 8001700:	429a      	cmp	r2, r3
 8001702:	d104      	bne.n	800170e <HAL_I2S_TxHalfCpltCallback+0x12>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  	make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
 8001704:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <HAL_I2S_TxHalfCpltCallback+0x18>)
 800170a:	f003 b8a9 	b.w	8004860 <make_sound>
  }
}
 800170e:	4770      	bx	lr
 8001710:	40003800 	.word	0x40003800
 8001714:	20012ab6 	.word	0x20012ab6

08001718 <ADSR_init>:

/*---------------------------------------------------------------------------*/

void ADSR_init(ADSR_t *env)
{
  env->target_ = 0.0;
 8001718:	2300      	movs	r3, #0
 800171a:	6183      	str	r3, [r0, #24]
  env->value_ = 0.0;
 800171c:	6103      	str	r3, [r0, #16]
  env->attackRate_ = 0.001;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <ADSR_init+0x20>)
 8001720:	6003      	str	r3, [r0, #0]
  env->decayRate_ = 0.001;
 8001722:	6043      	str	r3, [r0, #4]
  env->sustainLevel_ = 0.5;
 8001724:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001728:	6083      	str	r3, [r0, #8]
  env->releaseRate_ = 0.01;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <ADSR_init+0x24>)
 800172c:	60c3      	str	r3, [r0, #12]
  env->state_ = ATTACK;
 800172e:	2300      	movs	r3, #0
  env->cnt_ = 0;
 8001730:	e9c0 3308 	strd	r3, r3, [r0, #32]
  //env->gateTime_ = 10000;
}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	3a83126f 	.word	0x3a83126f
 800173c:	3c23d70a 	.word	0x3c23d70a

08001740 <ADSR_keyOn>:

void ADSR_keyOn(ADSR_t *env)
{
	env->cnt_ = 0;
	env->target_ = 1.0f;
 8001740:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	env->cnt_ = 0;
 8001744:	2300      	movs	r3, #0
	env->target_ = 1.0f;
 8001746:	6182      	str	r2, [r0, #24]
	env->rate_ = 	env->attackRate_;
 8001748:	6802      	ldr	r2, [r0, #0]
	env->cnt_ = 0;
 800174a:	6243      	str	r3, [r0, #36]	; 0x24
	env->rate_ = 	env->attackRate_;
 800174c:	61c2      	str	r2, [r0, #28]
	env->state_ = ATTACK;
 800174e:	6203      	str	r3, [r0, #32]
}
 8001750:	4770      	bx	lr

08001752 <ADSR_keyOff>:

void ADSR_keyOff(ADSR_t *env)
{
	env->cnt_ = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	6243      	str	r3, [r0, #36]	; 0x24
	env->target_ = 0.0;
 8001756:	2300      	movs	r3, #0
 8001758:	6183      	str	r3, [r0, #24]
	env->rate_ = 	env->releaseRate_;
 800175a:	68c3      	ldr	r3, [r0, #12]
 800175c:	61c3      	str	r3, [r0, #28]
	env->state_ = RELEASE;
 800175e:	2303      	movs	r3, #3
 8001760:	6203      	str	r3, [r0, #32]
}
 8001762:	4770      	bx	lr

08001764 <AttTime_set>:
  return env->state_;
}

void AttTime_set(uint8_t val)
{
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 8001764:	ee07 0a90 	vmov	s15, r0
 8001768:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001794 <AttTime_set+0x30>
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <AttTime_set+0x34>)
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 800176e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001776:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800179c <AttTime_set+0x38>
 800177a:	ee77 7a87 	vadd.f32	s15, s15, s14
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 800177e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80017a0 <AttTime_set+0x3c>
 8001782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800178a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800178e:	ed83 7a00 	vstr	s14, [r3]
}
 8001792:	4770      	bx	lr
 8001794:	42fe0000 	.word	0x42fe0000
 8001798:	200000fc 	.word	0x200000fc
 800179c:	38d1b717 	.word	0x38d1b717
 80017a0:	472c4400 	.word	0x472c4400
 80017a4:	00000000 	.word	0x00000000

080017a8 <DecTime_set>:
void DecTime_set(uint8_t val)
{
 80017a8:	b508      	push	{r3, lr}
	ADSR_setDecayTime(&adsr, .2*val/MIDI_MAX + 0.0001f);
 80017aa:	f7fe fe5f 	bl	800046c <__aeabi_i2d>
 80017ae:	a312      	add	r3, pc, #72	; (adr r3, 80017f8 <DecTime_set+0x50>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe fec4 	bl	8000540 <__aeabi_dmul>
 80017b8:	a311      	add	r3, pc, #68	; (adr r3, 8001800 <DecTime_set+0x58>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ffe9 	bl	8000794 <__aeabi_ddiv>
 80017c2:	a311      	add	r3, pc, #68	; (adr r3, 8001808 <DecTime_set+0x60>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fd04 	bl	80001d4 <__adddf3>
 80017cc:	f7ff f952 	bl	8000a74 <__aeabi_d2f>
	env->decayRate_ = 1.0 / ( time * SAMPLERATE );
 80017d0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80017f0 <DecTime_set+0x48>
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <DecTime_set+0x4c>)
 80017d6:	ee07 0a10 	vmov	s14, r0
 80017da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017e6:	ed83 7a01 	vstr	s14, [r3, #4]
}
 80017ea:	bd08      	pop	{r3, pc}
 80017ec:	f3af 8000 	nop.w
 80017f0:	472c4400 	.word	0x472c4400
 80017f4:	200000fc 	.word	0x200000fc
 80017f8:	9999999a 	.word	0x9999999a
 80017fc:	3fc99999 	.word	0x3fc99999
 8001800:	00000000 	.word	0x00000000
 8001804:	405fc000 	.word	0x405fc000
 8001808:	e0000000 	.word	0xe0000000
 800180c:	3f1a36e2 	.word	0x3f1a36e2

08001810 <SustLevel_set>:
void SustLevel_set(uint8_t val)
{
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 8001810:	ee07 0a90 	vmov	s15, r0
 8001814:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001828 <SustLevel_set+0x18>
	env->sustainLevel_ = level;
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <SustLevel_set+0x1c>)
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 800181a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	env->sustainLevel_ = level;
 8001822:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001826:	4770      	bx	lr
 8001828:	42fe0000 	.word	0x42fe0000
 800182c:	200000fc 	.word	0x200000fc

08001830 <RelTime_set>:
void RelTime_set(uint8_t val)
{
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 8001830:	ee06 0a90 	vmov	s13, r0
 8001834:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001860 <RelTime_set+0x30>
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <RelTime_set+0x34>)
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 800183a:	eefa 6aef 	vcvt.f32.s32	s13, s13, #1
 800183e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001842:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001868 <RelTime_set+0x38>
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 8001846:	edd3 6a02 	vldr	s13, [r3, #8]
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 800184a:	ee77 7a87 	vadd.f32	s15, s15, s14
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 800184e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800186c <RelTime_set+0x3c>
 8001852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185a:	ed83 7a03 	vstr	s14, [r3, #12]
}
 800185e:	4770      	bx	lr
 8001860:	42fe0000 	.word	0x42fe0000
 8001864:	200000fc 	.word	0x200000fc
 8001868:	38d1b717 	.word	0x38d1b717
 800186c:	472c4400 	.word	0x472c4400

08001870 <ADSR_computeSample>:
/*--------------------------------------------------------------------------------------*/
float ADSR_computeSample(ADSR_t *env)
{
	(env->cnt_)++;
 8001870:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001872:	edd0 7a04 	vldr	s15, [r0, #16]
 8001876:	3301      	adds	r3, #1
 8001878:	6243      	str	r3, [r0, #36]	; 0x24

	switch (env->state_) {
 800187a:	6a03      	ldr	r3, [r0, #32]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d018      	beq.n	80018b2 <ADSR_computeSample+0x42>
 8001880:	2b03      	cmp	r3, #3
 8001882:	d029      	beq.n	80018d8 <ADSR_computeSample+0x68>
 8001884:	bb9b      	cbnz	r3, 80018ee <ADSR_computeSample+0x7e>

  case ATTACK:
	  env->value_ += env->rate_;
 8001886:	ed90 7a07 	vldr	s14, [r0, #28]
 800188a:	ee77 7a87 	vadd.f32	s15, s15, s14
    if (env->value_ >= env->target_)
 800188e:	ed90 7a06 	vldr	s14, [r0, #24]
	  env->value_ += env->rate_;
 8001892:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ >= env->target_)
 8001896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	db26      	blt.n	80018ee <ADSR_computeSample+0x7e>
    {
    	env->value_ = env->target_;
    	env->rate_ = env->decayRate_;
 80018a0:	6843      	ldr	r3, [r0, #4]
 80018a2:	61c3      	str	r3, [r0, #28]
    	env->target_ = env->sustainLevel_;
 80018a4:	6883      	ldr	r3, [r0, #8]
 80018a6:	6183      	str	r3, [r0, #24]
    	env->value_ = env->target_;
 80018a8:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->state_ = DECAY;
 80018ac:	2301      	movs	r3, #1
  case RELEASE:
	  env->value_ -= env->releaseRate_;
    if (env->value_ <= 0.0f)
    {
    	env->value_ =  0.0f;
    	env->state_ = DONE;
 80018ae:	6203      	str	r3, [r0, #32]
 80018b0:	e01d      	b.n	80018ee <ADSR_computeSample+0x7e>
	  env->value_ -= env->decayRate_;
 80018b2:	ed90 7a01 	vldr	s14, [r0, #4]
 80018b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (env->value_ <= env->sustainLevel_)
 80018ba:	ed90 7a02 	vldr	s14, [r0, #8]
	  env->value_ -= env->decayRate_;
 80018be:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ <= env->sustainLevel_)
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d810      	bhi.n	80018ee <ADSR_computeSample+0x7e>
    	env->rate_ = 0.0f;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61c3      	str	r3, [r0, #28]
    	env->value_ = env->sustainLevel_;
 80018d0:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->state_ = SUSTAIN;
 80018d4:	2302      	movs	r3, #2
 80018d6:	e7ea      	b.n	80018ae <ADSR_computeSample+0x3e>
	  env->value_ -= env->releaseRate_;
 80018d8:	ed90 7a03 	vldr	s14, [r0, #12]
 80018dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (env->value_ <= 0.0f)
 80018e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d906      	bls.n	80018f8 <ADSR_computeSample+0x88>
	  env->value_ -= env->releaseRate_;
 80018ea:	edc0 7a04 	vstr	s15, [r0, #16]
    }
  }

  env->lastOutput_ = env->value_;
 80018ee:	ed90 0a04 	vldr	s0, [r0, #16]
 80018f2:	ed80 0a05 	vstr	s0, [r0, #20]
  return env->value_;
}
 80018f6:	4770      	bx	lr
    	env->value_ =  0.0f;
 80018f8:	2300      	movs	r3, #0
 80018fa:	6103      	str	r3, [r0, #16]
    	env->state_ = DONE;
 80018fc:	2304      	movs	r3, #4
 80018fe:	e7d6      	b.n	80018ae <ADSR_computeSample+0x3e>

08001900 <place_step_dd>:

/**======================================================================================================**/


void place_step_dd(float *buffer, int index, float phase, float w, float scale)
{
 8001900:	b538      	push	{r3, r4, r5, lr}
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 8001902:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800196c <place_step_dd+0x6c>
 8001906:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 800190a:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
 800190e:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
 8001912:	4604      	mov	r4, r0
 8001914:	460d      	mov	r5, r1
	i = lrintf(r - 0.5f);
 8001916:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800191a:	ee38 0a40 	vsub.f32	s0, s16, s0
{
 800191e:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
 8001922:	f005 f9f1 	bl	8006d08 <lrintf>
	r -= (float)i;
 8001926:	ee07 0a90 	vmov	s15, r0
 800192a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <place_step_dd+0x70>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8001930:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8001934:	ee38 8a60 	vsub.f32	s16, s16, s1
 8001938:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800193c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	 *    index++;
	 *  }
	 */

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 8001940:	edd3 6a00 	vldr	s13, [r3]
 8001944:	ed13 7a01 	vldr	s14, [r3, #-4]
 8001948:	edd1 7a00 	vldr	s15, [r1]
 800194c:	eea6 7a88 	vfma.f32	s14, s13, s16
		i += MINBLEP_PHASES;
 8001950:	3040      	adds	r0, #64	; 0x40
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 8001952:	f5b0 5f90 	cmp.w	r0, #4608	; 0x1200
 8001956:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 800195a:	eee7 7a28 	vfma.f32	s15, s14, s17
 800195e:	ece1 7a01 	vstmia	r1!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 8001962:	dbed      	blt.n	8001940 <place_step_dd+0x40>
		index++;
	}
}
 8001964:	ecbd 8b02 	vpop	{d8}
 8001968:	bd38      	pop	{r3, r4, r5, pc}
 800196a:	bf00      	nop
 800196c:	42800000 	.word	0x42800000
 8001970:	0800cc68 	.word	0x0800cc68

08001974 <place_slope_dd>:
//----------------------------------------------------------------------------------------------------------

void place_slope_dd(float *buffer, int index, float phase, float w, float slope_delta)
{
 8001974:	b538      	push	{r3, r4, r5, lr}
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 8001976:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80019ec <place_slope_dd+0x78>
 800197a:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 800197e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
 8001982:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
	i = lrintf(r - 0.5f);
 800198a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800198e:	ee38 0ac0 	vsub.f32	s0, s17, s0
{
 8001992:	eeb0 8a60 	vmov.f32	s16, s1
 8001996:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
 800199a:	f005 f9b5 	bl	8006d08 <lrintf>
	r -= (float)i;
 800199e:	ee07 0a90 	vmov	s15, r0
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <place_slope_dd+0x7c>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80019a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80019ac:	ee78 8ae7 	vsub.f32	s17, s17, s15

	slope_delta *= w;
 80019b0:	ee28 8a09 	vmul.f32	s16, s16, s18
 80019b4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80019b8:	eb03 0380 	add.w	r3, r3, r0, lsl #2

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80019c4:	ed91 7a00 	vldr	s14, [r1]
 80019c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
		i += MINBLEP_PHASES;
 80019cc:	3040      	adds	r0, #64	; 0x40
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80019ce:	eee6 7aa8 	vfma.f32	s15, s13, s17
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 80019d2:	f5b0 5f8e 	cmp.w	r0, #4544	; 0x11c0
 80019d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80019da:	eea7 7a88 	vfma.f32	s14, s15, s16
 80019de:	eca1 7a01 	vstmia	r1!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 80019e2:	dbeb      	blt.n	80019bc <place_slope_dd+0x48>
		index++;
	}
}
 80019e4:	ecbd 8b04 	vpop	{d8-d9}
 80019e8:	bd38      	pop	{r3, r4, r5, pc}
 80019ea:	bf00      	nop
 80019ec:	42800000 	.word	0x42800000
 80019f0:	08008560 	.word	0x08008560

080019f4 <VCO_blepsaw_Init>:

/* ==== hard-sync-capable sawtooth oscillator ==== */

void VCO_blepsaw_Init(VCO_blepsaw_t *vco)
{
	vco->_init = true;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f880 3548 	strb.w	r3, [r0, #1352]	; 0x548
	vco->amp = 1.0f;
 80019fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019fe:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <VCO_blepsaw_Init+0x28>)
 8001a02:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 8001a04:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 8001a06:	2300      	movs	r3, #0
 8001a08:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001a0a:	6203      	str	r3, [r0, #32]
	vco->_j = 0;
 8001a0c:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001a10:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001a14:	3024      	adds	r0, #36	; 0x24
 8001a16:	f006 bb8a 	b.w	800812e <memset>
 8001a1a:	bf00      	nop
 8001a1c:	43dc0000 	.word	0x43dc0000

08001a20 <VCO_blepsaw_SampleCompute>:
}

//----------------------------------------------------------------------------------------------------------

float VCO_blepsaw_SampleCompute(VCO_blepsaw_t *vco)
{
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	ed90 7a03 	vldr	s14, [r0, #12]
 8001a26:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8001bd0 <VCO_blepsaw_SampleCompute+0x1b0>
	freq = vco->freq;

	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 8001a2a:	f8d0 5544 	ldr.w	r5, [r0, #1348]	; 0x544
{
 8001a2e:	ed2d 8b06 	vpush	{d8-d10}
 8001a32:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8001a36:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001a38:	edd0 aa04 	vldr	s21, [r0, #16]
	z = vco->_z;  /* low pass filter state */
 8001a3c:	edd0 9a08 	vldr	s19, [r0, #32]
 8001a40:	ee19 0a10 	vmov	r0, s18
 8001a44:	f7fe fd24 	bl	8000490 <__aeabi_f2d>

	if (vco->_init) {
 8001a48:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
 8001a4c:	4606      	mov	r6, r0
 8001a4e:	460f      	mov	r7, r1
 8001a50:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d17f      	bne.n	8001b58 <VCO_blepsaw_SampleCompute+0x138>
	p = vco->_p;  /* phase [0, 1) */
 8001a58:	ed94 8a06 	vldr	s16, [r4, #24]
	w = vco->_w;  /* phase increment */
 8001a5c:	edd4 8a07 	vldr	s17, [r4, #28]

	//a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8001a60:	a359      	add	r3, pc, #356	; (adr r3, 8001bc8 <VCO_blepsaw_SampleCompute+0x1a8>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	4630      	mov	r0, r6
 8001a68:	4639      	mov	r1, r7
 8001a6a:	f7fe ffdb 	bl	8000a24 <__aeabi_dcmplt>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	f040 808a 	bne.w	8001b88 <VCO_blepsaw_SampleCompute+0x168>
	if (t > 0.5) t = 0.5;
 8001a74:	eeb4 9a4a 	vcmp.f32	s18, s20
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001a80:	bfc8      	it	gt
 8001a82:	eeb0 9a67 	vmovgt.f32	s18, s15
	dw = (t - w); // n= 1
 8001a86:	ee39 9a68 	vsub.f32	s18, s18, s17
	w += dw;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 8001a8a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8001bd4 <VCO_blepsaw_SampleCompute+0x1b4>
	w += dw;
 8001a8e:	ee78 8a89 	vadd.f32	s17, s17, s18
	if (syncin >= 1e-20f) {  /* sync to master */
 8001a92:	eef4 aae7 	vcmpe.f32	s21, s15
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	p += w;
 8001a9a:	ee38 8a28 	vadd.f32	s16, s16, s17
 8001a9e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	if (syncin >= 1e-20f) {  /* sync to master */
 8001aa2:	db74      	blt.n	8001b8e <VCO_blepsaw_SampleCompute+0x16e>

		float eof_offset = (syncin - 1e-20f) * w;
 8001aa4:	ee3a 9ae7 	vsub.f32	s18, s21, s15
 8001aa8:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8001aac:	ee29 9a28 	vmul.f32	s18, s18, s17
		float p_at_reset = p - eof_offset;
 8001ab0:	ee38 8a49 	vsub.f32	s16, s16, s18
		p = eof_offset;

		/* place any DD that may have occurred in subsample before reset */
		if (p_at_reset >= 1.0f) {
 8001ab4:	eeb4 8ac1 	vcmpe.f32	s16, s2
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	db09      	blt.n	8001ad2 <VCO_blepsaw_SampleCompute+0xb2>
			p_at_reset -= 1.0f;
 8001abe:	ee38 8a41 	vsub.f32	s16, s16, s2
			place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001ac2:	eef0 0a68 	vmov.f32	s1, s17
 8001ac6:	ee39 0a08 	vadd.f32	s0, s18, s16
 8001aca:	4629      	mov	r1, r5
 8001acc:	4630      	mov	r0, r6
 8001ace:	f7ff ff17 	bl	8001900 <place_step_dd>
		}

		/* now place reset DD */
		place_step_dd(vco->_f, j, p, w, p_at_reset);
 8001ad2:	eeb0 1a48 	vmov.f32	s2, s16
 8001ad6:	eef0 0a68 	vmov.f32	s1, s17
 8001ada:	eeb0 0a49 	vmov.f32	s0, s18
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4630      	mov	r0, r6
 8001ae2:	f7ff ff0d 	bl	8001900 <place_step_dd>

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001ae6:	edc4 aa05 	vstr	s21, [r4, #20]
 8001aea:	eb04 0385 	add.w	r3, r4, r5, lsl #2

	} else {

		vco->syncout = 0.0f;
	}
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 8001aee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001af2:	ee3a 7a49 	vsub.f32	s14, s20, s18

	z += a * (vco->_f[j] - z); // LP filtering
	vco->out = vco->amp * z;

	if (++j == FILLEN)
 8001af6:	3501      	adds	r5, #1
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 8001af8:	ee77 7a87 	vadd.f32	s15, s15, s14
	if (++j == FILLEN)
 8001afc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 8001b00:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	z += a * (vco->_f[j] - z); // LP filtering
 8001b04:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	vco->out = vco->amp * z;
 8001b08:	ed94 8a01 	vldr	s16, [r4, #4]
	z += a * (vco->_f[j] - z); // LP filtering
 8001b0c:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8001b10:	eee7 9a8a 	vfma.f32	s19, s15, s20
	vco->out = vco->amp * z;
 8001b14:	ee29 8a88 	vmul.f32	s16, s19, s16
 8001b18:	ed84 8a00 	vstr	s16, [r4]
	if (++j == FILLEN)
 8001b1c:	d10f      	bne.n	8001b3e <VCO_blepsaw_SampleCompute+0x11e>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001b1e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001b22:	f204 4124 	addw	r1, r4, #1060	; 0x424
 8001b26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b2a:	f006 faf5 	bl	8008118 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b32:	2100      	movs	r1, #0
 8001b34:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8001b38:	f006 faf9 	bl	800812e <memset>
		j = 0;
 8001b3c:	2500      	movs	r5, #0
	vco->_w = w;
	vco->_z = z;
	vco->_j = j;

	return vco->out;
}
 8001b3e:	eeb0 0a48 	vmov.f32	s0, s16
	vco->_p = p;
 8001b42:	ed84 9a06 	vstr	s18, [r4, #24]
	vco->_w = w;
 8001b46:	edc4 8a07 	vstr	s17, [r4, #28]
	vco->_z = z;
 8001b4a:	edc4 9a08 	vstr	s19, [r4, #32]
}
 8001b4e:	ecbd 8b06 	vpop	{d8-d10}
	vco->_j = j;
 8001b52:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
}
 8001b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (w < 1e-5) w = 1e-5;
 8001b58:	a31b      	add	r3, pc, #108	; (adr r3, 8001bc8 <VCO_blepsaw_SampleCompute+0x1a8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe ff61 	bl	8000a24 <__aeabi_dcmplt>
 8001b62:	b970      	cbnz	r0, 8001b82 <VCO_blepsaw_SampleCompute+0x162>
		if (w > 0.5) w = 0.5;
 8001b64:	eeb4 9aca 	vcmpe.f32	s18, s20
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		w = freq / SAMPLERATE;
 8001b6c:	bfd4      	ite	le
 8001b6e:	eef0 8a49 	vmovle.f32	s17, s18
 8001b72:	eef0 8a4a 	vmovgt.f32	s17, s20
		vco->_init = false;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		p = 0.5f;
 8001b7c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001b80:	e76e      	b.n	8001a60 <VCO_blepsaw_SampleCompute+0x40>
		if (w < 1e-5) w = 1e-5;
 8001b82:	eddf 8a15 	vldr	s17, [pc, #84]	; 8001bd8 <VCO_blepsaw_SampleCompute+0x1b8>
 8001b86:	e7f6      	b.n	8001b76 <VCO_blepsaw_SampleCompute+0x156>
	if (t < 1e-5) t = 1e-5;
 8001b88:	ed9f 9a13 	vldr	s18, [pc, #76]	; 8001bd8 <VCO_blepsaw_SampleCompute+0x1b8>
 8001b8c:	e77b      	b.n	8001a86 <VCO_blepsaw_SampleCompute+0x66>
	} else if (p >= 1.0f) {  /* normal phase reset */
 8001b8e:	eeb4 8ac1 	vcmpe.f32	s16, s2
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	db11      	blt.n	8001bbc <VCO_blepsaw_SampleCompute+0x19c>
		p -= 1.0f;
 8001b98:	ee38 9a41 	vsub.f32	s18, s16, s2
		place_step_dd(vco->_f, j, p, w, 1.0f);
 8001b9c:	eef0 0a68 	vmov.f32	s1, s17
		vco->syncout = p / w + 1e-20f;
 8001ba0:	ee89 7a28 	vdiv.f32	s14, s18, s17
		place_step_dd(vco->_f, j, p, w, 1.0f);
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001baa:	eeb0 0a49 	vmov.f32	s0, s18
		vco->syncout = p / w + 1e-20f;
 8001bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb2:	edc4 7a05 	vstr	s15, [r4, #20]
		place_step_dd(vco->_f, j, p, w, 1.0f);
 8001bb6:	f7ff fea3 	bl	8001900 <place_step_dd>
 8001bba:	e796      	b.n	8001aea <VCO_blepsaw_SampleCompute+0xca>
		vco->syncout = 0.0f;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6163      	str	r3, [r4, #20]
	p += w;
 8001bc0:	eeb0 9a48 	vmov.f32	s18, s16
 8001bc4:	e791      	b.n	8001aea <VCO_blepsaw_SampleCompute+0xca>
 8001bc6:	bf00      	nop
 8001bc8:	88e368f1 	.word	0x88e368f1
 8001bcc:	3ee4f8b5 	.word	0x3ee4f8b5
 8001bd0:	472c4400 	.word	0x472c4400
 8001bd4:	1e3ce508 	.word	0x1e3ce508
 8001bd8:	3727c5ac 	.word	0x3727c5ac

08001bdc <VCO_bleprect_Init>:
//----------------------------------------------------------------------------------------------------------
/* ==== variable-width, hard-sync-capable rectangular oscillator ==== */

void VCO_bleprect_Init(VCO_bleprect_t *vco)
{
	vco->_init = true;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f880 3558 	strb.w	r3, [r0, #1368]	; 0x558
	vco->amp = 1.0f;
 8001be2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001be6:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <VCO_bleprect_Init+0x28>)
 8001bea:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 8001bec:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 8001bf2:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001bf4:	62c3      	str	r3, [r0, #44]	; 0x2c
	vco->_j = 0;
 8001bf6:	f8c0 1550 	str.w	r1, [r0, #1360]	; 0x550
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001bfa:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001bfe:	3030      	adds	r0, #48	; 0x30
 8001c00:	f006 ba95 	b.w	800812e <memset>
 8001c04:	43dc0000 	.word	0x43dc0000

08001c08 <VCO_bleprect_SampleCompute>:
}
////----------------------------------------------------------------------------------------------------------

float VCO_bleprect_SampleCompute(VCO_bleprect_t *vco)
{
 8001c08:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001c0c:	ed90 7a03 	vldr	s14, [r0, #12]
 8001c10:	eddf 7ae7 	vldr	s15, [pc, #924]	; 8001fb0 <VCO_bleprect_SampleCompute+0x3a8>
	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	b = vco->_b;  /* duty cycle (0, 1) */
	x = vco->_x;  /* temporary output variable */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 8001c14:	f8d0 5550 	ldr.w	r5, [r0, #1360]	; 0x550
{
 8001c18:	ed2d 8b0a 	vpush	{d8-d12}
 8001c1c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8001c20:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001c22:	ed90 ca05 	vldr	s24, [r0, #20]
	z = vco->_z;  /* low pass filter state */
 8001c26:	ed90 ba0b 	vldr	s22, [r0, #44]	; 0x2c
 8001c2a:	ee19 0a90 	vmov	r0, s19
 8001c2e:	f7fe fc2f 	bl	8000490 <__aeabi_f2d>
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
	//
	if (vco->_init) {
 8001c32:	f894 3558 	ldrb.w	r3, [r4, #1368]	; 0x558
 8001c36:	4680      	mov	r8, r0
 8001c38:	4689      	mov	r9, r1
 8001c3a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8001c3e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 80d5 	bne.w	8001df2 <VCO_bleprect_SampleCompute+0x1ea>
	p = vco->_p;  /* phase [0, 1) */
 8001c48:	ed94 8a07 	vldr	s16, [r4, #28]
	w = vco->_w;  /* phase increment */
 8001c4c:	edd4 8a08 	vldr	s17, [r4, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001c50:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
	x = vco->_x;  /* temporary output variable */
 8001c54:	ed94 aa0a 	vldr	s20, [r4, #40]	; 0x28
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8001c58:	f8d4 6554 	ldr.w	r6, [r4, #1364]	; 0x554
	//
	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8001c5c:	a3d2      	add	r3, pc, #840	; (adr r3, 8001fa8 <VCO_bleprect_SampleCompute+0x3a0>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	4640      	mov	r0, r8
 8001c64:	4649      	mov	r1, r9
 8001c66:	f7fe fedd 	bl	8000a24 <__aeabi_dcmplt>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	f040 80fb 	bne.w	8001e66 <VCO_bleprect_SampleCompute+0x25e>
	if (t > 0.5) t = 0.5;
 8001c70:	eef4 9a6b 	vcmp.f32	s19, s23
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001c7c:	bfc8      	it	gt
 8001c7e:	eef0 9a67 	vmovgt.f32	s19, s15
	dw = (t - w) ;
	t = 0.5 * (1.0 + vco->waveform );
 8001c82:	6920      	ldr	r0, [r4, #16]
 8001c84:	f7fe fc04 	bl	8000490 <__aeabi_f2d>
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4bca      	ldr	r3, [pc, #808]	; (8001fb4 <VCO_bleprect_SampleCompute+0x3ac>)
 8001c8c:	f7fe faa2 	bl	80001d4 <__adddf3>
 8001c90:	2200      	movs	r2, #0
 8001c92:	4bc9      	ldr	r3, [pc, #804]	; (8001fb8 <VCO_bleprect_SampleCompute+0x3b0>)
 8001c94:	f7fe fc54 	bl	8000540 <__aeabi_dmul>
 8001c98:	f7fe feec 	bl	8000a74 <__aeabi_d2f>
 8001c9c:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 8001ca0:	eef4 8a47 	vcmp.f32	s17, s14
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (t > 1.0f - w) t = 1.0f - w;
 8001ca8:	ee7a 7ae8 	vsub.f32	s15, s21, s17
	if (t < w) t = w;
 8001cac:	bfc8      	it	gt
 8001cae:	eeb0 7a68 	vmovgt.f32	s14, s17
	dw = (t - w) ;
 8001cb2:	ee79 9ae8 	vsub.f32	s19, s19, s17
	if (t > 1.0f - w) t = 1.0f - w;
 8001cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	db = (t - b) ;

	w += dw;
 8001cbe:	ee78 8aa9 	vadd.f32	s17, s17, s19
	b += db;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 8001cc2:	eddf 9abe 	vldr	s19, [pc, #760]	; 8001fbc <VCO_bleprect_SampleCompute+0x3b4>
	if (t > 1.0f - w) t = 1.0f - w;
 8001cc6:	bf58      	it	pl
 8001cc8:	eef0 7a47 	vmovpl.f32	s15, s14
	db = (t - b) ;
 8001ccc:	ee77 7ac9 	vsub.f32	s15, s15, s18
	if (syncin >= 1e-20f) {  /* sync to master */
 8001cd0:	eeb4 cae9 	vcmpe.f32	s24, s19
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	b += db;
 8001cd8:	ee39 9a27 	vadd.f32	s18, s18, s15
	p += w;
 8001cdc:	ee38 8a28 	vadd.f32	s16, s16, s17
 8001ce0:	eef0 ca69 	vmov.f32	s25, s19
	if (syncin >= 1e-20f) {  /* sync to master */
 8001ce4:	f2c0 80f0 	blt.w	8001ec8 <VCO_bleprect_SampleCompute+0x2c0>
		//
		float eof_offset = (syncin - 1e-20f) * w;
 8001ce8:	ee7c 9a69 	vsub.f32	s19, s24, s19
 8001cec:	ee69 9aa8 	vmul.f32	s19, s19, s17
		float p_at_reset = p - eof_offset;
 8001cf0:	ee38 8a69 	vsub.f32	s16, s16, s19
		p = eof_offset;

		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	f040 80b9 	bne.w	8001e6c <VCO_bleprect_SampleCompute+0x264>
			if (p_at_reset >= b) {
 8001cfa:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	f200 8149 	bhi.w	8001f98 <VCO_bleprect_SampleCompute+0x390>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 8001d06:	ee38 0a49 	vsub.f32	s0, s16, s18
 8001d0a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001d0e:	eef0 0a68 	vmov.f32	s1, s17
 8001d12:	ee30 0a29 	vadd.f32	s0, s0, s19
 8001d16:	4629      	mov	r1, r5
 8001d18:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001d1c:	f7ff fdf0 	bl	8001900 <place_step_dd>
				k = 1;
				x = -0.5f;
			}
			if (p_at_reset >= 1.0f) {
 8001d20:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	f2c0 80c5 	blt.w	8001eb6 <VCO_bleprect_SampleCompute+0x2ae>
				p_at_reset -= 1.0f;
 8001d2c:	ee38 8a6a 	vsub.f32	s16, s16, s21
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001d30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001d34:	ee38 0a29 	vadd.f32	s0, s16, s19
 8001d38:	eef0 0a68 	vmov.f32	s1, s17
			}
		}

		/* now place reset DD */
		if (k) {
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001d42:	f7ff fddd 	bl	8001900 <place_step_dd>
 8001d46:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
			k = 0;
			x = 0.5f;
		}
		if (p >= b) {
 8001d4a:	eeb4 9ae9 	vcmpe.f32	s18, s19
 8001d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d52:	f200 80b7 	bhi.w	8001ec4 <VCO_bleprect_SampleCompute+0x2bc>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001d56:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001d5a:	eef0 0a68 	vmov.f32	s1, s17
 8001d5e:	ee39 0ac9 	vsub.f32	s0, s19, s18
 8001d62:	4629      	mov	r1, r5
 8001d64:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001d68:	f7ff fdca 	bl	8001900 <place_step_dd>
			k = 1;
			x = -0.5f;
 8001d6c:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 8001d70:	2601      	movs	r6, #1
		}

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001d72:	ed84 ca06 	vstr	s24, [r4, #24]
		p = eof_offset;
 8001d76:	eeb0 8a69 	vmov.f32	s16, s19
 8001d7a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
			k = 1;
			x = -0.5f;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001d7e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d82:	ee77 7a8a 	vadd.f32	s15, s15, s20

	z += a * (vco->_f[j] - z);
	vco->out = vco->amp * z;

	if (++j == FILLEN)
 8001d86:	3501      	adds	r5, #1
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001d88:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	z += a * (vco->_f[j] - z);
 8001d8c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
	vco->out = vco->amp * z;
 8001d90:	edd4 9a01 	vldr	s19, [r4, #4]
	z += a * (vco->_f[j] - z);
 8001d94:	ee77 7acb 	vsub.f32	s15, s15, s22
	if (++j == FILLEN)
 8001d98:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	z += a * (vco->_f[j] - z);
 8001d9c:	eea7 baab 	vfma.f32	s22, s15, s23
	vco->out = vco->amp * z;
 8001da0:	ee6b 9a29 	vmul.f32	s19, s22, s19
 8001da4:	edc4 9a00 	vstr	s19, [r4]
	if (++j == FILLEN)
 8001da8:	d10f      	bne.n	8001dca <VCO_bleprect_SampleCompute+0x1c2>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001daa:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001dae:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8001db2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001db6:	f006 f9af 	bl	8008118 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001dc4:	f006 f9b3 	bl	800812e <memset>
		j = 0;
 8001dc8:	2500      	movs	r5, #0
	vco->_j = j;
	vco->_k = k;

	return vco->out;

}
 8001dca:	eeb0 0a69 	vmov.f32	s0, s19
	vco->_p = p;
 8001dce:	ed84 8a07 	vstr	s16, [r4, #28]
	vco->_w = w;
 8001dd2:	edc4 8a08 	vstr	s17, [r4, #32]
	vco->_b = b;
 8001dd6:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
	vco->_x = x;
 8001dda:	ed84 aa0a 	vstr	s20, [r4, #40]	; 0x28
	vco->_z = z;
 8001dde:	ed84 ba0b 	vstr	s22, [r4, #44]	; 0x2c
}
 8001de2:	ecbd 8b0a 	vpop	{d8-d12}
	vco->_j = j;
 8001de6:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
	vco->_k = k;
 8001dea:	f8c4 6554 	str.w	r6, [r4, #1364]	; 0x554
}
 8001dee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		if (w < 1e-5) w = 1e-5;
 8001df2:	a36d      	add	r3, pc, #436	; (adr r3, 8001fa8 <VCO_bleprect_SampleCompute+0x3a0>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fe14 	bl	8000a24 <__aeabi_dcmplt>
 8001dfc:	bb80      	cbnz	r0, 8001e60 <VCO_bleprect_SampleCompute+0x258>
		w = freq / SAMPLERATE;
 8001dfe:	eef4 9aeb 	vcmpe.f32	s19, s23
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	bfd4      	ite	le
 8001e08:	eef0 8a69 	vmovle.f32	s17, s19
 8001e0c:	eef0 8a6b 	vmovgt.f32	s17, s23
		b = 0.5 * (1.0 + vco->waveform );
 8001e10:	6920      	ldr	r0, [r4, #16]
		p = 0.0f;
 8001e12:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 8001fc0 <VCO_bleprect_SampleCompute+0x3b8>
		b = 0.5 * (1.0 + vco->waveform );
 8001e16:	f7fe fb3b 	bl	8000490 <__aeabi_f2d>
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <VCO_bleprect_SampleCompute+0x3ac>)
 8001e1e:	f7fe f9d9 	bl	80001d4 <__adddf3>
 8001e22:	2200      	movs	r2, #0
 8001e24:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <VCO_bleprect_SampleCompute+0x3b0>)
 8001e26:	f7fe fb8b 	bl	8000540 <__aeabi_dmul>
 8001e2a:	f7fe fe23 	bl	8000a74 <__aeabi_d2f>
 8001e2e:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8001e32:	eef4 8a67 	vcmp.f32	s17, s15
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (b > 1.0f - w) b = 1.0f - w;
 8001e3a:	ee3a 9ae8 	vsub.f32	s18, s21, s17
		if (b < w) b = w;
 8001e3e:	bfc8      	it	gt
 8001e40:	eef0 7a68 	vmovgt.f32	s15, s17
		if (b > 1.0f - w) b = 1.0f - w;
 8001e44:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		vco->_init = false;
 8001e4c:	f04f 0600 	mov.w	r6, #0
		if (b > 1.0f - w) b = 1.0f - w;
 8001e50:	bf58      	it	pl
 8001e52:	eeb0 9a67 	vmovpl.f32	s18, s15
		vco->_init = false;
 8001e56:	f884 6558 	strb.w	r6, [r4, #1368]	; 0x558
		x = 0.5f;
 8001e5a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001e5e:	e6fd      	b.n	8001c5c <VCO_bleprect_SampleCompute+0x54>
		if (w < 1e-5) w = 1e-5;
 8001e60:	eddf 8a58 	vldr	s17, [pc, #352]	; 8001fc4 <VCO_bleprect_SampleCompute+0x3bc>
 8001e64:	e7d4      	b.n	8001e10 <VCO_bleprect_SampleCompute+0x208>
	if (t < 1e-5) t = 1e-5;
 8001e66:	eddf 9a57 	vldr	s19, [pc, #348]	; 8001fc4 <VCO_bleprect_SampleCompute+0x3bc>
 8001e6a:	e70a      	b.n	8001c82 <VCO_bleprect_SampleCompute+0x7a>
			if (p_at_reset >= 1.0f) {
 8001e6c:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	db1f      	blt.n	8001eb6 <VCO_bleprect_SampleCompute+0x2ae>
				p_at_reset -= 1.0f;
 8001e76:	ee38 8a6a 	vsub.f32	s16, s16, s21
 8001e7a:	f104 0630 	add.w	r6, r4, #48	; 0x30
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001e7e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001e82:	eef0 0a68 	vmov.f32	s1, s17
 8001e86:	ee39 0a88 	vadd.f32	s0, s19, s16
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	4630      	mov	r0, r6
 8001e8e:	f7ff fd37 	bl	8001900 <place_step_dd>
			if (!k && p_at_reset >= b) {
 8001e92:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	f63f af54 	bhi.w	8001d46 <VCO_bleprect_SampleCompute+0x13e>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 8001e9e:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001ea2:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001ea6:	eef0 0a68 	vmov.f32	s1, s17
 8001eaa:	ee38 0a29 	vadd.f32	s0, s16, s19
 8001eae:	4629      	mov	r1, r5
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f7ff fd25 	bl	8001900 <place_step_dd>
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001eb6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001eba:	eef0 0a68 	vmov.f32	s1, s17
 8001ebe:	eeb0 0a69 	vmov.f32	s0, s19
 8001ec2:	e73b      	b.n	8001d3c <VCO_bleprect_SampleCompute+0x134>
 8001ec4:	2600      	movs	r6, #0
 8001ec6:	e754      	b.n	8001d72 <VCO_bleprect_SampleCompute+0x16a>
	} else if (!k) {  /* normal operation, signal currently high */
 8001ec8:	bb9e      	cbnz	r6, 8001f32 <VCO_bleprect_SampleCompute+0x32a>
		if (p >= b) {
 8001eca:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	d828      	bhi.n	8001f26 <VCO_bleprect_SampleCompute+0x31e>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001ed4:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001ed8:	eef0 0a68 	vmov.f32	s1, s17
 8001edc:	ee38 0a49 	vsub.f32	s0, s16, s18
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001ee6:	f7ff fd0b 	bl	8001900 <place_step_dd>
			x = -0.5f;
 8001eea:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 8001eee:	2301      	movs	r3, #1
		if (p >= 1.0f) {
 8001ef0:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	db17      	blt.n	8001f2a <VCO_bleprect_SampleCompute+0x322>
			p -= 1.0f;
 8001efa:	ee38 8a6a 	vsub.f32	s16, s16, s21
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001efe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			vco->syncout = p / w + 1e-20f;
 8001f02:	eec8 7a28 	vdiv.f32	s15, s16, s17
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001f06:	4629      	mov	r1, r5
 8001f08:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001f0c:	eef0 0a68 	vmov.f32	s1, s17
			vco->syncout = p / w + 1e-20f;
 8001f10:	ee77 7aac 	vadd.f32	s15, s15, s25
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001f14:	eeb0 0a48 	vmov.f32	s0, s16
			vco->syncout = p / w + 1e-20f;
 8001f18:	edc4 7a06 	vstr	s15, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001f1c:	f7ff fcf0 	bl	8001900 <place_step_dd>
			x = 0.5f;
 8001f20:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001f24:	e729      	b.n	8001d7a <VCO_bleprect_SampleCompute+0x172>
 8001f26:	4633      	mov	r3, r6
 8001f28:	e7e2      	b.n	8001ef0 <VCO_bleprect_SampleCompute+0x2e8>
			vco->syncout = 0.0f;
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61a2      	str	r2, [r4, #24]
 8001f2e:	461e      	mov	r6, r3
 8001f30:	e723      	b.n	8001d7a <VCO_bleprect_SampleCompute+0x172>
		if (p >= 1.0f) {
 8001f32:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	db1c      	blt.n	8001f76 <VCO_bleprect_SampleCompute+0x36e>
			p -= 1.0f;
 8001f3c:	ee38 8a6a 	vsub.f32	s16, s16, s21
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001f40:	f104 0630 	add.w	r6, r4, #48	; 0x30
			vco->syncout = p / w + 1e-20f;
 8001f44:	eec8 7a28 	vdiv.f32	s15, s16, s17
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			vco->syncout = p / w + 1e-20f;
 8001f50:	ee77 9aa9 	vadd.f32	s19, s15, s19
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001f54:	eef0 0a68 	vmov.f32	s1, s17
			vco->syncout = p / w + 1e-20f;
 8001f58:	edc4 9a06 	vstr	s19, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8001f60:	f7ff fcce 	bl	8001900 <place_step_dd>
		if (!k && p >= b) {
 8001f64:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	d906      	bls.n	8001f7c <VCO_bleprect_SampleCompute+0x374>
			x = 0.5f;
 8001f6e:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001f72:	2600      	movs	r6, #0
 8001f74:	e701      	b.n	8001d7a <VCO_bleprect_SampleCompute+0x172>
			vco->syncout = 0.0f;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61a3      	str	r3, [r4, #24]
 8001f7a:	e6fe      	b.n	8001d7a <VCO_bleprect_SampleCompute+0x172>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001f82:	eef0 0a68 	vmov.f32	s1, s17
 8001f86:	ee38 0a49 	vsub.f32	s0, s16, s18
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	f7ff fcb8 	bl	8001900 <place_step_dd>
			x = -0.5f;
 8001f90:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 8001f94:	2601      	movs	r6, #1
 8001f96:	e6f0      	b.n	8001d7a <VCO_bleprect_SampleCompute+0x172>
			if (p_at_reset >= 1.0f) {
 8001f98:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	f6bf aec4 	bge.w	8001d2c <VCO_bleprect_SampleCompute+0x124>
 8001fa4:	e6d1      	b.n	8001d4a <VCO_bleprect_SampleCompute+0x142>
 8001fa6:	bf00      	nop
 8001fa8:	88e368f1 	.word	0x88e368f1
 8001fac:	3ee4f8b5 	.word	0x3ee4f8b5
 8001fb0:	472c4400 	.word	0x472c4400
 8001fb4:	3ff00000 	.word	0x3ff00000
 8001fb8:	3fe00000 	.word	0x3fe00000
 8001fbc:	1e3ce508 	.word	0x1e3ce508
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	3727c5ac 	.word	0x3727c5ac

08001fc8 <VCO_bleptri_Init>:

///* ==== variable-slope, hard-sync-capable triangle oscillator ==== */

void VCO_bleptri_Init(VCO_bleptri_t *vco)
{
	vco->amp = 1.0f;
 8001fc8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fcc:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <VCO_bleptri_Init+0x28>)
 8001fd0:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_init = true;
 8001fd2:	2201      	movs	r2, #1
	vco->syncin = 0.0f;
 8001fd4:	2300      	movs	r3, #0
	vco->_z = 0.0f;
	vco->_j = 0;
 8001fd6:	2100      	movs	r1, #0
	vco->_init = true;
 8001fd8:	f880 2554 	strb.w	r2, [r0, #1364]	; 0x554
	vco->syncin = 0.0f;
 8001fdc:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 8001fde:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001fe0:	6283      	str	r3, [r0, #40]	; 0x28
	vco->_j = 0;
 8001fe2:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001fe6:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001fea:	302c      	adds	r0, #44	; 0x2c
 8001fec:	f006 b89f 	b.w	800812e <memset>
 8001ff0:	43dc0000 	.word	0x43dc0000
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <VCO_bleptri_SampleCompute>:
}
////----------------------------------------------------------------------------------------------------------

float VCO_bleptri_SampleCompute(VCO_bleptri_t *vco)
{
 8001ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ffc:	ed90 7a03 	vldr	s14, [r0, #12]
 8002000:	eddf 7ae3 	vldr	s15, [pc, #908]	; 8002390 <VCO_bleptri_SampleCompute+0x398>
	freq = vco->freq;
	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	b = vco->_b;  /* duty cycle (0, 1) */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 8002004:	f8d0 554c 	ldr.w	r5, [r0, #1356]	; 0x54c
{
 8002008:	ed2d 8b0c 	vpush	{d8-d13}
 800200c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8002010:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8002012:	ed90 ba05 	vldr	s22, [r0, #20]
	z = vco->_z;  /* low pass filter state */
 8002016:	edd0 aa0a 	vldr	s21, [r0, #40]	; 0x28
 800201a:	ee19 0a90 	vmov	r0, s19
 800201e:	f7fe fa37 	bl	8000490 <__aeabi_f2d>
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */

	if (vco->_init) {
 8002022:	f894 3554 	ldrb.w	r3, [r4, #1364]	; 0x554
 8002026:	4680      	mov	r8, r0
 8002028:	4689      	mov	r9, r1
 800202a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800202e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 80e6 	bne.w	8002204 <VCO_bleptri_SampleCompute+0x20c>
	p = vco->_p;  /* phase [0, 1) */
 8002038:	ed94 8a07 	vldr	s16, [r4, #28]
	w = vco->_w;  /* phase increment */
 800203c:	ed94 9a08 	vldr	s18, [r4, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8002040:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8002044:	f8d4 6550 	ldr.w	r6, [r4, #1360]	; 0x550

	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8002048:	a3cf      	add	r3, pc, #828	; (adr r3, 8002388 <VCO_bleptri_SampleCompute+0x390>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	4640      	mov	r0, r8
 8002050:	4649      	mov	r1, r9
 8002052:	f7fe fce7 	bl	8000a24 <__aeabi_dcmplt>
 8002056:	2800      	cmp	r0, #0
 8002058:	f040 810b 	bne.w	8002272 <VCO_bleptri_SampleCompute+0x27a>
	if (t > 0.5) t = 0.5;
 800205c:	eef4 9a4a 	vcmp.f32	s19, s20
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002068:	bfc8      	it	gt
 800206a:	eef0 9a67 	vmovgt.f32	s19, s15
	dw = (t - w) ;
	t = 0.5 * (1.0 + vco->waveform );
 800206e:	6920      	ldr	r0, [r4, #16]
	w += dw;
	b += db;
	b1 = 1.0f - b;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 8002070:	eddf bac8 	vldr	s23, [pc, #800]	; 8002394 <VCO_bleptri_SampleCompute+0x39c>
	t = 0.5 * (1.0 + vco->waveform );
 8002074:	f7fe fa0c 	bl	8000490 <__aeabi_f2d>
 8002078:	2200      	movs	r2, #0
 800207a:	4bc7      	ldr	r3, [pc, #796]	; (8002398 <VCO_bleptri_SampleCompute+0x3a0>)
 800207c:	f7fe f8aa 	bl	80001d4 <__adddf3>
 8002080:	2200      	movs	r2, #0
 8002082:	4bc6      	ldr	r3, [pc, #792]	; (800239c <VCO_bleptri_SampleCompute+0x3a4>)
 8002084:	f7fe fa5c 	bl	8000540 <__aeabi_dmul>
 8002088:	f7fe fcf4 	bl	8000a74 <__aeabi_d2f>
 800208c:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 8002090:	eeb4 9a47 	vcmp.f32	s18, s14
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (t > 1.0f - w) t = 1.0f - w;
 8002098:	ee7c 7a49 	vsub.f32	s15, s24, s18
	if (t < w) t = w;
 800209c:	bfc8      	it	gt
 800209e:	eeb0 7a49 	vmovgt.f32	s14, s18
	if (t > 1.0f - w) t = 1.0f - w;
 80020a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020aa:	bf58      	it	pl
 80020ac:	eef0 7a47 	vmovpl.f32	s15, s14
	dw = (t - w) ;
 80020b0:	ee79 9ac9 	vsub.f32	s19, s19, s18
	db = (t - b) ;
 80020b4:	ee77 7ae8 	vsub.f32	s15, s15, s17
	w += dw;
 80020b8:	ee39 9a29 	vadd.f32	s18, s18, s19
	b += db;
 80020bc:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if (syncin >= 1e-20f) {  /* sync to master */
 80020c0:	eeb4 baeb 	vcmpe.f32	s22, s23
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	b1 = 1.0f - b;
 80020c8:	ee7c ca68 	vsub.f32	s25, s24, s17
	p += w;
 80020cc:	ee38 8a09 	vadd.f32	s16, s16, s18
 80020d0:	eeb0 da6b 	vmov.f32	s26, s23
	if (syncin >= 1e-20f) {  /* sync to master */
 80020d4:	f2c0 812b 	blt.w	800232e <VCO_bleptri_SampleCompute+0x336>

		float eof_offset = (syncin - 1e-20f) * w;
 80020d8:	ee7b ba6b 	vsub.f32	s23, s22, s23
 80020dc:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80020e0:	ee6b ba89 	vmul.f32	s23, s23, s18
		float p_at_reset = p - eof_offset;
 80020e4:	ee38 8a6b 	vsub.f32	s16, s16, s23
		p = eof_offset;
		//
		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 80020e8:	2e00      	cmp	r6, #0
 80020ea:	f040 80c5 	bne.w	8002278 <VCO_bleptri_SampleCompute+0x280>
			x = -0.5f + p_at_reset / b;
			if (p_at_reset >= b) {
 80020ee:	eef4 8ac8 	vcmpe.f32	s17, s16
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	f200 81b5 	bhi.w	8002464 <VCO_bleptri_SampleCompute+0x46c>
				x = 0.5f - (p_at_reset - b) / b1;
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 80020fa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80020fe:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8002102:	4629      	mov	r1, r5
 8002104:	4638      	mov	r0, r7
 8002106:	eecc 7a28 	vdiv.f32	s15, s24, s17
				x = 0.5f - (p_at_reset - b) / b1;
 800210a:	ee38 0a68 	vsub.f32	s0, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 800210e:	ee31 1a67 	vsub.f32	s2, s2, s15
				x = 0.5f - (p_at_reset - b) / b1;
 8002112:	eec0 9a2c 	vdiv.f32	s19, s0, s25
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8002116:	eef0 0a49 	vmov.f32	s1, s18
 800211a:	ee30 0a2b 	vadd.f32	s0, s0, s23
 800211e:	f7ff fc29 	bl	8001974 <place_slope_dd>
				k = 1;
			}
			if (p_at_reset >= 1.0f) {
 8002122:	eeb4 8acc 	vcmpe.f32	s16, s24
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				x = 0.5f - (p_at_reset - b) / b1;
 800212a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			if (p_at_reset >= 1.0f) {
 800212e:	f2c0 80ae 	blt.w	800228e <VCO_bleptri_SampleCompute+0x296>
				p_at_reset -= 1.0f;
 8002132:	ee38 8a4c 	vsub.f32	s16, s16, s24
				x = -0.5f + p_at_reset / b;
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8002136:	ee8c 1a28 	vdiv.f32	s2, s24, s17
				x = -0.5f + p_at_reset / b;
 800213a:	eec8 9a28 	vdiv.f32	s19, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 800213e:	eecc 7a2c 	vdiv.f32	s15, s24, s25
				x = -0.5f + p_at_reset / b;
 8002142:	ee79 9aca 	vsub.f32	s19, s19, s20
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8002146:	ee31 1a27 	vadd.f32	s2, s2, s15
 800214a:	ee3b 0a88 	vadd.f32	s0, s23, s16
 800214e:	eef0 0a49 	vmov.f32	s1, s18
			}
		}

		/* now place reset DDs */
		if (k)
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002152:	4629      	mov	r1, r5
 8002154:	4638      	mov	r0, r7
 8002156:	f7ff fc0d 	bl	8001974 <place_slope_dd>
		place_step_dd(vco->_f, j, p, w, -0.5f - x);
 800215a:	eebe 1a00 	vmov.f32	s2, #224	; 0xbf000000 -0.5
 800215e:	ee31 1a69 	vsub.f32	s2, s2, s19
 8002162:	eef0 0a49 	vmov.f32	s1, s18
 8002166:	eeb0 0a6b 	vmov.f32	s0, s23
 800216a:	4629      	mov	r1, r5
 800216c:	4638      	mov	r0, r7
 800216e:	f7ff fbc7 	bl	8001900 <place_step_dd>
		x = -0.5f + p / b;
		k = 0;
		if (p >= b) {
 8002172:	eef4 8aeb 	vcmpe.f32	s17, s23
 8002176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217a:	f240 80c2 	bls.w	8002302 <VCO_bleptri_SampleCompute+0x30a>
		x = -0.5f + p / b;
 800217e:	eecb 9aa8 	vdiv.f32	s19, s23, s17
		k = 0;
 8002182:	2600      	movs	r6, #0
		x = -0.5f + p / b;
 8002184:	ee79 9aca 	vsub.f32	s19, s19, s20
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8002188:	ed84 ba06 	vstr	s22, [r4, #24]
		p = eof_offset;
 800218c:	eeb0 8a6b 	vmov.f32	s16, s23
 8002190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8002194:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002198:	ee77 9aa9 	vadd.f32	s19, s15, s19

	z += a * (vco->_f[j] - z);
 800219c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 80021a0:	edc3 9a0f 	vstr	s19, [r3, #60]	; 0x3c
	z += a * (vco->_f[j] - z);
 80021a4:	ee77 7aea 	vsub.f32	s15, s15, s21
	vco->out = vco->amp * z;
 80021a8:	edd4 9a01 	vldr	s19, [r4, #4]
	z += a * (vco->_f[j] - z);
 80021ac:	eee7 aa8a 	vfma.f32	s21, s15, s20

	if (++j == FILLEN)
 80021b0:	3501      	adds	r5, #1
 80021b2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	vco->out = vco->amp * z;
 80021b6:	ee6a 9aa9 	vmul.f32	s19, s21, s19
 80021ba:	edc4 9a00 	vstr	s19, [r4]
	if (++j == FILLEN)
 80021be:	d10f      	bne.n	80021e0 <VCO_bleptri_SampleCompute+0x1e8>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 80021c0:	f44f 7290 	mov.w	r2, #288	; 0x120
 80021c4:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80021c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80021cc:	f005 ffa4 	bl	8008118 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 80021d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d4:	2100      	movs	r1, #0
 80021d6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 80021da:	f005 ffa8 	bl	800812e <memset>
		j = 0;
 80021de:	2500      	movs	r5, #0
	vco->_j = j;
	vco->_k = k;

	return vco->out;

}
 80021e0:	eeb0 0a69 	vmov.f32	s0, s19
	vco->_p = p;
 80021e4:	ed84 8a07 	vstr	s16, [r4, #28]
	vco->_w = w;
 80021e8:	ed84 9a08 	vstr	s18, [r4, #32]
	vco->_b = b;
 80021ec:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
	vco->_z = z;
 80021f0:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
}
 80021f4:	ecbd 8b0c 	vpop	{d8-d13}
	vco->_j = j;
 80021f8:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
	vco->_k = k;
 80021fc:	f8c4 6550 	str.w	r6, [r4, #1360]	; 0x550
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (w < 1e-5) w = 1e-5;
 8002204:	a360      	add	r3, pc, #384	; (adr r3, 8002388 <VCO_bleptri_SampleCompute+0x390>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fe fc0b 	bl	8000a24 <__aeabi_dcmplt>
 800220e:	bb68      	cbnz	r0, 800226c <VCO_bleptri_SampleCompute+0x274>
		w = freq / SAMPLERATE;
 8002210:	eef4 9aca 	vcmpe.f32	s19, s20
 8002214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002218:	bfd4      	ite	le
 800221a:	eeb0 9a69 	vmovle.f32	s18, s19
 800221e:	eeb0 9a4a 	vmovgt.f32	s18, s20
		b = 0.5 * (1.0 + vco->waveform);
 8002222:	6920      	ldr	r0, [r4, #16]
 8002224:	f7fe f934 	bl	8000490 <__aeabi_f2d>
 8002228:	2200      	movs	r2, #0
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <VCO_bleptri_SampleCompute+0x3a0>)
 800222c:	f7fd ffd2 	bl	80001d4 <__adddf3>
 8002230:	2200      	movs	r2, #0
 8002232:	4b5a      	ldr	r3, [pc, #360]	; (800239c <VCO_bleptri_SampleCompute+0x3a4>)
 8002234:	f7fe f984 	bl	8000540 <__aeabi_dmul>
 8002238:	f7fe fc1c 	bl	8000a74 <__aeabi_d2f>
 800223c:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8002240:	eeb4 9a67 	vcmp.f32	s18, s15
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (b > 1.0f - w) b = 1.0f - w;
 8002248:	ee7c 8a49 	vsub.f32	s17, s24, s18
		if (b < w) b = w;
 800224c:	bfc8      	it	gt
 800224e:	eef0 7a49 	vmovgt.f32	s15, s18
		if (b > 1.0f - w) b = 1.0f - w;
 8002252:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	bf58      	it	pl
 800225c:	eef0 8a67 	vmovpl.f32	s17, s15
		vco->_init = false;
 8002260:	2600      	movs	r6, #0
		p = 0.5f * b;
 8002262:	ee28 8a8a 	vmul.f32	s16, s17, s20
		vco->_init = false;
 8002266:	f884 6554 	strb.w	r6, [r4, #1364]	; 0x554
 800226a:	e6ed      	b.n	8002048 <VCO_bleptri_SampleCompute+0x50>
		if (w < 1e-5) w = 1e-5;
 800226c:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 80023a0 <VCO_bleptri_SampleCompute+0x3a8>
 8002270:	e7d7      	b.n	8002222 <VCO_bleptri_SampleCompute+0x22a>
	if (t < 1e-5) t = 1e-5;
 8002272:	eddf 9a4b 	vldr	s19, [pc, #300]	; 80023a0 <VCO_bleptri_SampleCompute+0x3a8>
 8002276:	e6fa      	b.n	800206e <VCO_bleptri_SampleCompute+0x76>
			if (p_at_reset >= 1.0f) {
 8002278:	eeb4 8acc 	vcmpe.f32	s16, s24
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	da10      	bge.n	80022a4 <VCO_bleptri_SampleCompute+0x2ac>
			x = 0.5f - (p_at_reset - b) / b1;
 8002282:	ee38 8a68 	vsub.f32	s16, s16, s17
 8002286:	eec8 9a2c 	vdiv.f32	s19, s16, s25
 800228a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 800228e:	ee8c 1a28 	vdiv.f32	s2, s24, s17
 8002292:	eecc 7a2c 	vdiv.f32	s15, s24, s25
 8002296:	eef0 0a49 	vmov.f32	s1, s18
 800229a:	ee31 1a27 	vadd.f32	s2, s2, s15
 800229e:	eeb0 0a6b 	vmov.f32	s0, s23
 80022a2:	e756      	b.n	8002152 <VCO_bleptri_SampleCompute+0x15a>
 80022a4:	ee8c da28 	vdiv.f32	s26, s24, s17
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 80022a8:	4629      	mov	r1, r5
 80022aa:	4638      	mov	r0, r7
 80022ac:	ee8c 1a2c 	vdiv.f32	s2, s24, s25
				p_at_reset -= 1.0f;
 80022b0:	ee38 8a4c 	vsub.f32	s16, s16, s24
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 80022b4:	ee31 1a0d 	vadd.f32	s2, s2, s26
 80022b8:	eef0 0a49 	vmov.f32	s1, s18
 80022bc:	ee3b 0a88 	vadd.f32	s0, s23, s16
 80022c0:	f7ff fb58 	bl	8001974 <place_slope_dd>
			if (!k && p_at_reset >= b) {
 80022c4:	eef4 8ac8 	vcmpe.f32	s17, s16
 80022c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022cc:	d904      	bls.n	80022d8 <VCO_bleptri_SampleCompute+0x2e0>
			x = -0.5f + p_at_reset / b;
 80022ce:	eec8 9a28 	vdiv.f32	s19, s16, s17
 80022d2:	ee79 9aca 	vsub.f32	s19, s19, s20
 80022d6:	e740      	b.n	800215a <VCO_bleptri_SampleCompute+0x162>
				x = 0.5f - (p_at_reset - b) / b1;
 80022d8:	ee38 8a68 	vsub.f32	s16, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 80022dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80022e0:	ee87 1aac 	vdiv.f32	s2, s15, s25
 80022e4:	4629      	mov	r1, r5
 80022e6:	4638      	mov	r0, r7
				x = 0.5f - (p_at_reset - b) / b1;
 80022e8:	eec8 9a2c 	vdiv.f32	s19, s16, s25
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 80022ec:	ee31 1a4d 	vsub.f32	s2, s2, s26
 80022f0:	eef0 0a49 	vmov.f32	s1, s18
 80022f4:	ee38 0a2b 	vadd.f32	s0, s16, s23
				x = 0.5f - (p_at_reset - b) / b1;
 80022f8:	ee7a 9a69 	vsub.f32	s19, s20, s19
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 80022fc:	f7ff fb3a 	bl	8001974 <place_slope_dd>
 8002300:	e7c5      	b.n	800228e <VCO_bleptri_SampleCompute+0x296>
			x = 0.5f - (p - b) / b1;
 8002302:	ee3b 0ae8 	vsub.f32	s0, s23, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002306:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800230a:	ee87 1aac 	vdiv.f32	s2, s15, s25
 800230e:	4629      	mov	r1, r5
 8002310:	4638      	mov	r0, r7
			k = 1;
 8002312:	2601      	movs	r6, #1
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002314:	eecc 7a28 	vdiv.f32	s15, s24, s17
			x = 0.5f - (p - b) / b1;
 8002318:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 800231c:	ee31 1a67 	vsub.f32	s2, s2, s15
 8002320:	eef0 0a49 	vmov.f32	s1, s18
			x = 0.5f - (p - b) / b1;
 8002324:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002328:	f7ff fb24 	bl	8001974 <place_slope_dd>
 800232c:	e72c      	b.n	8002188 <VCO_bleptri_SampleCompute+0x190>
	} else if (!k) {  /* normal operation, slope currently up */
 800232e:	2e00      	cmp	r6, #0
 8002330:	d153      	bne.n	80023da <VCO_bleptri_SampleCompute+0x3e2>
		if (p >= b) {
 8002332:	eef4 8ac8 	vcmpe.f32	s17, s16
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d933      	bls.n	80023a4 <VCO_bleptri_SampleCompute+0x3ac>
		x = -0.5f + p / b;
 800233c:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8002340:	4633      	mov	r3, r6
 8002342:	ee79 9aca 	vsub.f32	s19, s19, s20
		if (p >= 1.0f) {
 8002346:	eeb4 8acc 	vcmpe.f32	s16, s24
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	db40      	blt.n	80023d2 <VCO_bleptri_SampleCompute+0x3da>
			p -= 1.0f;
 8002350:	ee38 8a4c 	vsub.f32	s16, s16, s24
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002354:	ee8c 1a28 	vdiv.f32	s2, s24, s17
 8002358:	4629      	mov	r1, r5
 800235a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
			vco->syncout = p / w + 1e-20f;
 800235e:	eec8 7a09 	vdiv.f32	s15, s16, s18
			x = -0.5f + p / b;
 8002362:	eec8 9a28 	vdiv.f32	s19, s16, s17
			vco->syncout = p / w + 1e-20f;
 8002366:	ee77 7a8d 	vadd.f32	s15, s15, s26
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 800236a:	eef0 0a49 	vmov.f32	s1, s18
			vco->syncout = p / w + 1e-20f;
 800236e:	edc4 7a06 	vstr	s15, [r4, #24]
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002372:	eecc 7a2c 	vdiv.f32	s15, s24, s25
 8002376:	eeb0 0a48 	vmov.f32	s0, s16
 800237a:	ee31 1a27 	vadd.f32	s2, s2, s15
			x = -0.5f + p / b;
 800237e:	ee79 9aca 	vsub.f32	s19, s19, s20
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002382:	f7ff faf7 	bl	8001974 <place_slope_dd>
 8002386:	e703      	b.n	8002190 <VCO_bleptri_SampleCompute+0x198>
 8002388:	88e368f1 	.word	0x88e368f1
 800238c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002390:	472c4400 	.word	0x472c4400
 8002394:	1e3ce508 	.word	0x1e3ce508
 8002398:	3ff00000 	.word	0x3ff00000
 800239c:	3fe00000 	.word	0x3fe00000
 80023a0:	3727c5ac 	.word	0x3727c5ac
			x = 0.5f - (p - b) / b1;
 80023a4:	ee38 0a68 	vsub.f32	s0, s16, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 80023a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80023ac:	ee87 1aac 	vdiv.f32	s2, s15, s25
 80023b0:	4629      	mov	r1, r5
 80023b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80023b6:	eecc 7a28 	vdiv.f32	s15, s24, s17
			x = 0.5f - (p - b) / b1;
 80023ba:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 80023be:	ee31 1a67 	vsub.f32	s2, s2, s15
 80023c2:	eef0 0a49 	vmov.f32	s1, s18
 80023c6:	f7ff fad5 	bl	8001974 <place_slope_dd>
			x = 0.5f - (p - b) / b1;
 80023ca:	ee7a 9a69 	vsub.f32	s19, s20, s19
			k = 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e7b9      	b.n	8002346 <VCO_bleptri_SampleCompute+0x34e>
			vco->syncout = 0.0f;
 80023d2:	2200      	movs	r2, #0
 80023d4:	61a2      	str	r2, [r4, #24]
 80023d6:	461e      	mov	r6, r3
 80023d8:	e6da      	b.n	8002190 <VCO_bleptri_SampleCompute+0x198>
		if (p >= 1.0f) {
 80023da:	eeb4 8acc 	vcmpe.f32	s16, s24
 80023de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e2:	db22      	blt.n	800242a <VCO_bleptri_SampleCompute+0x432>
			p -= 1.0f;
 80023e4:	ee38 8a4c 	vsub.f32	s16, s16, s24
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 80023e8:	ee8c ba28 	vdiv.f32	s22, s24, s17
 80023ec:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80023f0:	4629      	mov	r1, r5
 80023f2:	4630      	mov	r0, r6
			vco->syncout = p / w + 1e-20f;
 80023f4:	eec8 7a09 	vdiv.f32	s15, s16, s18
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 80023f8:	ee8c 1a2c 	vdiv.f32	s2, s24, s25
			vco->syncout = p / w + 1e-20f;
 80023fc:	ee77 baab 	vadd.f32	s23, s15, s23
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002400:	ee31 1a0b 	vadd.f32	s2, s2, s22
			vco->syncout = p / w + 1e-20f;
 8002404:	edc4 ba06 	vstr	s23, [r4, #24]
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002408:	eef0 0a49 	vmov.f32	s1, s18
 800240c:	eeb0 0a48 	vmov.f32	s0, s16
 8002410:	f7ff fab0 	bl	8001974 <place_slope_dd>
		if (!k && p >= b) {
 8002414:	eef4 8ac8 	vcmpe.f32	s17, s16
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	d90e      	bls.n	800243c <VCO_bleptri_SampleCompute+0x444>
			x = -0.5f + p / b;
 800241e:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8002422:	2600      	movs	r6, #0
 8002424:	ee79 9aca 	vsub.f32	s19, s19, s20
 8002428:	e6b2      	b.n	8002190 <VCO_bleptri_SampleCompute+0x198>
		x = 0.5f - (p - b) / b1;
 800242a:	ee78 7a68 	vsub.f32	s15, s16, s17
			vco->syncout = 0.0f;
 800242e:	2300      	movs	r3, #0
		x = 0.5f - (p - b) / b1;
 8002430:	eec7 9aac 	vdiv.f32	s19, s15, s25
			vco->syncout = 0.0f;
 8002434:	61a3      	str	r3, [r4, #24]
		x = 0.5f - (p - b) / b1;
 8002436:	ee7a 9a69 	vsub.f32	s19, s20, s19
 800243a:	e6a9      	b.n	8002190 <VCO_bleptri_SampleCompute+0x198>
			x = 0.5f - (p - b) / b1;
 800243c:	ee38 0a68 	vsub.f32	s0, s16, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002440:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002444:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8002448:	4630      	mov	r0, r6
 800244a:	4629      	mov	r1, r5
			k = 1;
 800244c:	2601      	movs	r6, #1
			x = 0.5f - (p - b) / b1;
 800244e:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002452:	ee31 1a4b 	vsub.f32	s2, s2, s22
 8002456:	eef0 0a49 	vmov.f32	s1, s18
			x = 0.5f - (p - b) / b1;
 800245a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 800245e:	f7ff fa89 	bl	8001974 <place_slope_dd>
 8002462:	e695      	b.n	8002190 <VCO_bleptri_SampleCompute+0x198>
			if (p_at_reset >= 1.0f) {
 8002464:	eeb4 8acc 	vcmpe.f32	s16, s24
 8002468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246c:	f6bf ae61 	bge.w	8002132 <VCO_bleptri_SampleCompute+0x13a>
 8002470:	e72d      	b.n	80022ce <VCO_bleptri_SampleCompute+0x2d6>
 8002472:	bf00      	nop

08002474 <Lfo_SampleCompute>:
/*-------------------------------------------------------------------------------------------*/
float Lfo_SampleCompute(Lfo_t * op) // ! returns a positive value between 0 and op.amp !
{
	float z;

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002474:	edd0 7a02 	vldr	s15, [r0, #8]
 8002478:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80024ec <Lfo_SampleCompute+0x78>
 800247c:	edd0 6a01 	vldr	s13, [r0, #4]
 8002480:	eee6 7a87 	vfma.f32	s15, s13, s14
{
 8002484:	b510      	push	{r4, lr}
 8002486:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80024f0 <Lfo_SampleCompute+0x7c>
	op->phase += _2PI * Ts * op->freq; // increment phase
 800248a:	edc0 7a02 	vstr	s15, [r0, #8]
{
 800248e:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002490:	edd4 7a02 	vldr	s15, [r4, #8]
 8002494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	d41c      	bmi.n	80024d8 <Lfo_SampleCompute+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800249e:	edd4 7a02 	vldr	s15, [r4, #8]
 80024a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	da1a      	bge.n	80024e2 <Lfo_SampleCompute+0x6e>
		op->phase -= _2PI;

	z = sinetable[lrintf(ALPHA * (op->phase))];
 80024ac:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80024f4 <Lfo_SampleCompute+0x80>
 80024b0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80024b4:	f004 fc28 	bl	8006d08 <lrintf>
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <Lfo_SampleCompute+0x84>)
 80024ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	op->out = op->amp * (z + 1); // returns a positive value between 0 and op.amp
 80024be:	ed90 0a00 	vldr	s0, [r0]
 80024c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80024c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80024ca:	edd4 7a00 	vldr	s15, [r4]
 80024ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024d2:	ed84 0a03 	vstr	s0, [r4, #12]

	return op->out;
}
 80024d6:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 80024d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024dc:	edc4 7a02 	vstr	s15, [r4, #8]
 80024e0:	e7d6      	b.n	8002490 <Lfo_SampleCompute+0x1c>
		op->phase -= _2PI;
 80024e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024e6:	edc4 7a02 	vstr	s15, [r4, #8]
 80024ea:	e7d8      	b.n	800249e <Lfo_SampleCompute+0x2a>
 80024ec:	39156592 	.word	0x39156592
 80024f0:	40c90fdb 	.word	0x40c90fdb
 80024f4:	4322f983 	.word	0x4322f983
 80024f8:	08015ea8 	.word	0x08015ea8

080024fc <Chorus_init>:
		}
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_delay(monochorus_t *del, float delay)
{
	del->baseDelay = delay;
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <Chorus_init+0x68>)
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fb(monochorus_t *del, float val)
{
	del->fb = val;
 80024fe:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <Chorus_init+0x6c>)
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
	del->baseDelay = delay;
 8002502:	4f1a      	ldr	r7, [pc, #104]	; (800256c <Chorus_init+0x70>)
 8002504:	601f      	str	r7, [r3, #0]
	del->fb = val;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <Chorus_init+0x74>)
 8002508:	4c1a      	ldr	r4, [pc, #104]	; (8002574 <Chorus_init+0x78>)
 800250a:	6054      	str	r4, [r2, #4]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fw(monochorus_t *del, float val)
{
	del->fw = val;
 800250c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	del->mode = 1;
 8002510:	f241 50f4 	movw	r0, #5620	; 0x15f4
 8002514:	2501      	movs	r5, #1
	del->fw = val;
 8002516:	6091      	str	r1, [r2, #8]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_mix(monochorus_t *del, float val)
{
	del->mix = val;
 8002518:	6011      	str	r1, [r2, #0]
	del->fw = val;
 800251a:	6099      	str	r1, [r3, #8]
	del->mix = val;
 800251c:	6019      	str	r1, [r3, #0]
	lfoL.amp = LEFT_SWEEP;
 800251e:	4916      	ldr	r1, [pc, #88]	; (8002578 <Chorus_init+0x7c>)
	del->mode = 1;
 8002520:	5415      	strb	r5, [r2, r0]
 8002522:	541d      	strb	r5, [r3, r0]
	lfoL.amp = LEFT_SWEEP;
 8002524:	4815      	ldr	r0, [pc, #84]	; (800257c <Chorus_init+0x80>)
 8002526:	6008      	str	r0, [r1, #0]
	lfoR.amp = RIGHT_SWEEP;
 8002528:	6108      	str	r0, [r1, #16]
	lfoL.freq = LEFT_RATE ;
 800252a:	4815      	ldr	r0, [pc, #84]	; (8002580 <Chorus_init+0x84>)
 800252c:	6048      	str	r0, [r1, #4]
	lfoR.freq = RIGHT_RATE ;
 800252e:	4815      	ldr	r0, [pc, #84]	; (8002584 <Chorus_init+0x88>)
 8002530:	6148      	str	r0, [r1, #20]
	rateCoeff = 1;
 8002532:	4815      	ldr	r0, [pc, #84]	; (8002588 <Chorus_init+0x8c>)
	del->fb = val;
 8002534:	605c      	str	r4, [r3, #4]
	rateCoeff = 1;
 8002536:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	del->baseDelay = delay;
 800253a:	4c14      	ldr	r4, [pc, #80]	; (800258c <Chorus_init+0x90>)
	rateCoeff = 1;
 800253c:	6005      	str	r5, [r0, #0]
	lfoL.phase = _PI/2; // initial phases for quadrature
 800253e:	4814      	ldr	r0, [pc, #80]	; (8002590 <Chorus_init+0x94>)
 8002540:	6088      	str	r0, [r1, #8]
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8002542:	f240 5677 	movw	r6, #1399	; 0x577
	lfoR.phase = 0;
 8002546:	2000      	movs	r0, #0
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8002548:	60d6      	str	r6, [r2, #12]
 800254a:	60de      	str	r6, [r3, #12]
	lfoR.phase = 0;
 800254c:	6188      	str	r0, [r1, #24]
	del->baseDelay = delay;
 800254e:	6027      	str	r7, [r4, #0]
 8002550:	3310      	adds	r3, #16
 8002552:	3210      	adds	r2, #16
 8002554:	4601      	mov	r1, r0
		delR.dline[var] = 0;
 8002556:	f843 1b04 	str.w	r1, [r3], #4
	for (int var = 0; var < DEPTH; ++var) {
 800255a:	42a3      	cmp	r3, r4
		delL.dline[var] = 0;
 800255c:	f842 1b04 	str.w	r1, [r2], #4
	for (int var = 0; var < DEPTH; ++var) {
 8002560:	d1f9      	bne.n	8002556 <Chorus_init+0x5a>
}
 8002562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002564:	20002734 	.word	0x20002734
 8002568:	20001144 	.word	0x20001144
 800256c:	43700000 	.word	0x43700000
 8002570:	2000273c 	.word	0x2000273c
 8002574:	be4ccccd 	.word	0xbe4ccccd
 8002578:	20001124 	.word	0x20001124
 800257c:	42480000 	.word	0x42480000
 8002580:	3de147ae 	.word	0x3de147ae
 8002584:	3df5c28f 	.word	0x3df5c28f
 8002588:	20013a58 	.word	0x20013a58
 800258c:	20003d2c 	.word	0x20003d2c
 8002590:	3fc90fdb 	.word	0x3fc90fdb

08002594 <ChorusRate_set>:
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8002594:	ee07 0a90 	vmov	s15, r0
 8002598:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80025c0 <ChorusRate_set+0x2c>
	lfoR.freq = rateCoeff * rate;
 800259c:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <ChorusRate_set+0x30>)
	lfoL.freq = rate;
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <ChorusRate_set+0x34>)
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 80025a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025a4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80025cc <ChorusRate_set+0x38>
 80025a8:	eee6 7a87 	vfma.f32	s15, s13, s14
	lfoR.freq = rateCoeff * rate;
 80025ac:	ed92 7a00 	vldr	s14, [r2]
	lfoL.freq = rate;
 80025b0:	edc3 7a01 	vstr	s15, [r3, #4]
	lfoR.freq = rateCoeff * rate;
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	3d61c387 	.word	0x3d61c387
 80025c4:	20013a58 	.word	0x20013a58
 80025c8:	20001124 	.word	0x20001124
 80025cc:	3ca3d70a 	.word	0x3ca3d70a

080025d0 <ChorusSecondRate_set>:
	rateCoeff = 0.9f / MIDI_MAX * val + 0.1f; // from 10 % to 100 % of lfoL rate
 80025d0:	ee07 0a90 	vmov	s15, r0
 80025d4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80025fc <ChorusSecondRate_set+0x2c>
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <ChorusSecondRate_set+0x30>)
 80025da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025de:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002604 <ChorusSecondRate_set+0x34>
 80025e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80025e6:	edc3 7a00 	vstr	s15, [r3]
	lfoR.freq = rateCoeff * lfoL.freq;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <ChorusSecondRate_set+0x38>)
 80025ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80025f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	3be836d4 	.word	0x3be836d4
 8002600:	20013a58 	.word	0x20013a58
 8002604:	3dcccccd 	.word	0x3dcccccd
 8002608:	20001124 	.word	0x20001124

0800260c <ChorusDelay_set>:
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 800260c:	ee07 0a90 	vmov	s15, r0
 8002610:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800262c <ChorusDelay_set+0x20>
	delL.baseDelay = d;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <ChorusDelay_set+0x24>)
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 8002616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800261a:	ee67 7a87 	vmul.f32	s15, s15, s14
	delL.baseDelay = d;
 800261e:	edc3 7a00 	vstr	s15, [r3]
	delR.baseDelay = d;
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <ChorusDelay_set+0x28>)
 8002624:	edc3 7a00 	vstr	s15, [r3]
}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40b060c2 	.word	0x40b060c2
 8002630:	20002734 	.word	0x20002734
 8002634:	20003d2c 	.word	0x20003d2c

08002638 <ChorusFeedback_set>:
	fb = 0.95f * val / MIDI_MAX;
 8002638:	ee07 0a90 	vmov	s15, r0
 800263c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002660 <ChorusFeedback_set+0x28>
 8002640:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002664 <ChorusFeedback_set+0x2c>
	delL.fb = fb;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <ChorusFeedback_set+0x30>)
	fb = 0.95f * val / MIDI_MAX;
 8002646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	delL.fb = fb;
 8002652:	ed83 7a01 	vstr	s14, [r3, #4]
	delR.fb = fb;
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <ChorusFeedback_set+0x34>)
 8002658:	ed83 7a01 	vstr	s14, [r3, #4]
}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	3f733333 	.word	0x3f733333
 8002664:	42fe0000 	.word	0x42fe0000
 8002668:	20001144 	.word	0x20001144
 800266c:	2000273c 	.word	0x2000273c

08002670 <ChorusSweep_set>:
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 8002670:	ee07 0a90 	vmov	s15, r0
 8002674:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800268c <ChorusSweep_set+0x1c>
	lfoL.amp = sw;
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <ChorusSweep_set+0x20>)
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 800267a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267e:	ee67 7a87 	vmul.f32	s15, s15, s14
	lfoL.amp = sw;
 8002682:	edc3 7a00 	vstr	s15, [r3]
	lfoR.amp = sw;
 8002686:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800268a:	4770      	bx	lr
 800268c:	3f8c7f66 	.word	0x3f8c7f66
 8002690:	20001124 	.word	0x20001124

08002694 <ChorusMode_switch>:
	switch (val)
 8002694:	b148      	cbz	r0, 80026aa <ChorusMode_switch+0x16>
 8002696:	287f      	cmp	r0, #127	; 0x7f
 8002698:	d106      	bne.n	80026a8 <ChorusMode_switch+0x14>
		case 127 : 	delR.mode = delL.mode = -1 ; break;
 800269a:	f241 53f4 	movw	r3, #5620	; 0x15f4
 800269e:	22ff      	movs	r2, #255	; 0xff
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 80026a0:	4904      	ldr	r1, [pc, #16]	; (80026b4 <ChorusMode_switch+0x20>)
 80026a2:	54ca      	strb	r2, [r1, r3]
 80026a4:	4904      	ldr	r1, [pc, #16]	; (80026b8 <ChorusMode_switch+0x24>)
 80026a6:	54ca      	strb	r2, [r1, r3]
}
 80026a8:	4770      	bx	lr
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 80026aa:	f241 53f4 	movw	r3, #5620	; 0x15f4
 80026ae:	2201      	movs	r2, #1
 80026b0:	e7f6      	b.n	80026a0 <ChorusMode_switch+0xc>
 80026b2:	bf00      	nop
 80026b4:	20001144 	.word	0x20001144
 80026b8:	2000273c 	.word	0x2000273c

080026bc <ChorusFDBsign_switch>:
	switch (val)
 80026bc:	b180      	cbz	r0, 80026e0 <ChorusFDBsign_switch+0x24>
 80026be:	287f      	cmp	r0, #127	; 0x7f
 80026c0:	d10d      	bne.n	80026de <ChorusFDBsign_switch+0x22>
		case 127 : 	delR.fb = fabsf(delR.fb); delL.fb = fabsf(delL.fb); break; // positive feedback;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <ChorusFDBsign_switch+0x48>)
 80026c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80026c8:	eef0 7ae7 	vabs.f32	s15, s15
 80026cc:	edc3 7a01 	vstr	s15, [r3, #4]
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <ChorusFDBsign_switch+0x4c>)
 80026d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026d6:	eef0 7ae7 	vabs.f32	s15, s15
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 80026da:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80026de:	4770      	bx	lr
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <ChorusFDBsign_switch+0x48>)
 80026e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026e6:	eef0 7ae7 	vabs.f32	s15, s15
 80026ea:	eef1 7a67 	vneg.f32	s15, s15
 80026ee:	edc3 7a01 	vstr	s15, [r3, #4]
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <ChorusFDBsign_switch+0x4c>)
 80026f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80026f8:	eef0 7ae7 	vabs.f32	s15, s15
 80026fc:	eef1 7a67 	vneg.f32	s15, s15
 8002700:	e7eb      	b.n	80026da <ChorusFDBsign_switch+0x1e>
 8002702:	bf00      	nop
 8002704:	2000273c 	.word	0x2000273c
 8002708:	20001144 	.word	0x20001144

0800270c <delay_write>:
	return del->mix;
}
/*-------------------------------------------------------------------------------------------*/
void delay_write (monochorus_t *del, float xin)
{
	del->dline[del->in_idx] = xin;
 800270c:	68c3      	ldr	r3, [r0, #12]
 800270e:	eb00 0283 	add.w	r2, r0, r3, lsl #2

	(del->in_idx)++;
 8002712:	3301      	adds	r3, #1
	if (del->in_idx >= DEPTH)
 8002714:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
		del->in_idx = 0;
 8002718:	bfa8      	it	ge
 800271a:	2300      	movge	r3, #0
	del->dline[del->in_idx] = xin;
 800271c:	ed82 0a04 	vstr	s0, [r2, #16]
		del->in_idx = 0;
 8002720:	60c3      	str	r3, [r0, #12]
}
 8002722:	4770      	bx	lr

08002724 <delay_read>:
/*-------------------------------------------------------------------------------------------*/
float delay_read (monochorus_t *del, float delay) // "delay" is a floating point number of samples
{
 8002724:	b510      	push	{r4, lr}
	float y_n_2;	// y(n-2)
	float y_n_3;	// y(n-3)
	int32_t idx;

	d = delay;
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002726:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 800272a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002732:	ed2d 8b02 	vpush	{d8}
 8002736:	4604      	mov	r4, r0
 8002738:	eeb0 8a40 	vmov.f32	s16, s0
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 800273c:	d464      	bmi.n	8002808 <delay_read+0xe4>
	if (d > DEPTH-MARGIN) d = DEPTH-MARGIN;
 800273e:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002810 <delay_read+0xec>
 8002742:	eeb4 0a67 	vcmp.f32	s0, s15
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	bfc8      	it	gt
 800274c:	eeb0 8a67 	vmovgt.f32	s16, s15

	i = (int32_t)floorf(d);
 8002750:	eeb0 0a48 	vmov.f32	s0, s16
 8002754:	f004 fa96 	bl	8006c84 <floorf>
 8002758:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	f = d - i;

	idx = del->in_idx - i;
 800275c:	68e3      	ldr	r3, [r4, #12]
	if (idx < 0) idx += DEPTH;
 800275e:	ee10 2a10 	vmov	r2, s0
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	bf48      	it	mi
 8002766:	f503 63af 	addmi.w	r3, r3, #1400	; 0x578
	y_n = del->dline[idx]; 		// y(n)
 800276a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800276e:	edd2 5a04 	vldr	s11, [r2, #16]

	idx--;
	if (idx < 0) idx += DEPTH;
 8002772:	1e5a      	subs	r2, r3, #1
 8002774:	bf48      	it	mi
 8002776:	f203 5277 	addwmi	r2, r3, #1399	; 0x577
	y_n_1 = del->dline[idx];	// y(n-1)
 800277a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
	f = d - i;
 800277e:	eef8 7ac0 	vcvt.f32.s32	s15, s0
	y_n_1 = del->dline[idx];	// y(n-1)
 8002782:	ed93 5a04 	vldr	s10, [r3, #16]
	//return (.5f)*(f-1)*(f-2)*y_n - f*(f-2)*y_n_1 + (.5f)*f*(f-1)*y_n_2 ; // 2nd order Lagrange interpolation

	//return .5f*(f-1)*((f-2)*y_n + f*y_n_2) - f*(f-2)*y_n_1 ;	// 2nd order Lagrange interpolation (faster)

	/* 3rd order Lagrange interpolation :  */
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 8002786:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002814 <delay_read+0xf0>
	if (idx < 0) idx += DEPTH;
 800278a:	1e53      	subs	r3, r2, #1
	f = d - i;
 800278c:	ee38 8a67 	vsub.f32	s16, s16, s15
	if (idx < 0) idx += DEPTH;
 8002790:	bf48      	it	mi
 8002792:	f202 5377 	addwmi	r3, r2, #1399	; 0x577
	if (idx < 0) idx += DEPTH;
 8002796:	1e58      	subs	r0, r3, #1
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 8002798:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800279c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80027a0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80027a4:	ee78 6a66 	vsub.f32	s13, s16, s13
	if (idx < 0) idx += DEPTH;
 80027a8:	bf48      	it	mi
 80027aa:	f203 5077 	addwmi	r0, r3, #1399	; 0x577
	y_n_2 = del->dline[idx];	// y(n-2)
 80027ae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	y_n_3 = del->dline[idx];	// y(n-3)
 80027b2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80027b6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80027ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80027be:	edd4 7a04 	vldr	s15, [r4, #16]
	y_n_2 = del->dline[idx];	// y(n-2)
 80027c2:	edd2 4a04 	vldr	s9, [r2, #16]
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80027c6:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
 80027ca:	ee20 0a27 	vmul.f32	s0, s0, s15
 80027ce:	ee66 6a84 	vmul.f32	s13, s13, s8
 80027d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027d6:	ee38 7a47 	vsub.f32	s14, s16, s14
 80027da:	eea6 0aa4 	vfma.f32	s0, s13, s9
 80027de:	ee67 7a08 	vmul.f32	s15, s14, s16
 80027e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80027e6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002818 <delay_read+0xf4>
 80027ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80027f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80027f6:	ee28 8a05 	vmul.f32	s16, s16, s10
 80027fa:	eea7 8a25 	vfma.f32	s16, s14, s11

}
 80027fe:	eea6 0a08 	vfma.f32	s0, s12, s16
 8002802:	ecbd 8b02 	vpop	{d8}
 8002806:	bd10      	pop	{r4, pc}
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002808:	eeb0 8a67 	vmov.f32	s16, s15
 800280c:	e7a0      	b.n	8002750 <delay_read+0x2c>
 800280e:	bf00      	nop
 8002810:	44ae4000 	.word	0x44ae4000
 8002814:	3e2aaaab 	.word	0x3e2aaaab
 8002818:	be2aaaab 	.word	0xbe2aaaab

0800281c <mono_chorus_compute>:
/*---------------------------------------------------------------------------------------------*/

float mono_chorus_compute(monochorus_t *del, Lfo_t *lfo, float xin)
{
 800281c:	b538      	push	{r3, r4, r5, lr}
	float yout;
	float x1;
	float x2;

	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 800281e:	f500 55af 	add.w	r5, r0, #5600	; 0x15e0
{
 8002822:	ed2d 8b04 	vpush	{d8-d9}
 8002826:	4604      	mov	r4, r0
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002828:	3510      	adds	r5, #16
 800282a:	4608      	mov	r0, r1
 800282c:	edd5 8a00 	vldr	s17, [r5]
{
 8002830:	eeb0 8a40 	vmov.f32	s16, s0
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002834:	f7ff fe1e 	bl	8002474 <Lfo_SampleCompute>
 8002838:	ee38 0a80 	vadd.f32	s0, s17, s0
 800283c:	eef1 9a08 	vmov.f32	s19, #24	; 0x40c00000  6.0
 8002840:	ee30 0a29 	vadd.f32	s0, s0, s19
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff ff6d 	bl	8002724 <delay_read>

	if (del->mode == 1)
 800284a:	f241 53f4 	movw	r3, #5620	; 0x15f4
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 800284e:	eef0 8a40 	vmov.f32	s17, s0
	if (del->mode == 1)
 8002852:	56e3      	ldrsb	r3, [r4, r3]
 8002854:	ed94 9a01 	vldr	s18, [r4, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d123      	bne.n	80028a4 <mono_chorus_compute+0x88>
		x1 = xin + del->fb * x2; // variable delay feedback signal or ...
 800285c:	eeb0 0a48 	vmov.f32	s0, s16
 8002860:	eea9 0a28 	vfma.f32	s0, s18, s17
	else
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal

	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 8002864:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002868:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800286c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002870:	dc24      	bgt.n	80028bc <mono_chorus_compute+0xa0>
	x1 = (x1 < -1.0f) ? -1.0f : x1 ;
 8002872:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002876:	eeb4 0a67 	vcmp.f32	s0, s15
 800287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287e:	bf48      	it	mi
 8002880:	eeb0 0a67 	vmovmi.f32	s0, s15

	yout = del->mix * x1 + del->fw * x2;
 8002884:	edd4 7a02 	vldr	s15, [r4, #8]
 8002888:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800288c:	edd4 7a00 	vldr	s15, [r4]
 8002890:	eee7 8a80 	vfma.f32	s17, s15, s0
	//yout = del->mix * xin + del->fw * x2; // not good sounding...
	delay_write(del, x1);
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff ff39 	bl	800270c <delay_write>

	return yout;
}
 800289a:	eeb0 0a68 	vmov.f32	s0, s17
 800289e:	ecbd 8b04 	vpop	{d8-d9}
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal
 80028a4:	ed95 0a00 	vldr	s0, [r5]
 80028a8:	4620      	mov	r0, r4
 80028aa:	ee30 0a29 	vadd.f32	s0, s0, s19
 80028ae:	f7ff ff39 	bl	8002724 <delay_read>
 80028b2:	eea9 8a00 	vfma.f32	s16, s18, s0
 80028b6:	eeb0 0a48 	vmov.f32	s0, s16
 80028ba:	e7d3      	b.n	8002864 <mono_chorus_compute+0x48>
	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 80028bc:	eeb0 0a67 	vmov.f32	s0, s15
 80028c0:	e7e0      	b.n	8002884 <mono_chorus_compute+0x68>
	...

080028c4 <stereoChorus_compute>:

/*--------------------This is the main stereo chorus function : ----------------------------*/

void stereoChorus_compute (float * left_out, float * right_out, float in)
{
 80028c4:	b570      	push	{r4, r5, r6, lr}
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80028c6:	4c0c      	ldr	r4, [pc, #48]	; (80028f8 <stereoChorus_compute+0x34>)
{
 80028c8:	ed2d 8b02 	vpush	{d8}
 80028cc:	4606      	mov	r6, r0
 80028ce:	460d      	mov	r5, r1
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80028d0:	480a      	ldr	r0, [pc, #40]	; (80028fc <stereoChorus_compute+0x38>)
 80028d2:	4621      	mov	r1, r4
{
 80028d4:	eeb0 8a40 	vmov.f32	s16, s0
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80028d8:	f7ff ffa0 	bl	800281c <mono_chorus_compute>
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80028dc:	f104 0110 	add.w	r1, r4, #16
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80028e0:	ed86 0a00 	vstr	s0, [r6]
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80028e4:	4806      	ldr	r0, [pc, #24]	; (8002900 <stereoChorus_compute+0x3c>)
 80028e6:	eeb0 0a48 	vmov.f32	s0, s16
 80028ea:	f7ff ff97 	bl	800281c <mono_chorus_compute>
}
 80028ee:	ecbd 8b02 	vpop	{d8}
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80028f2:	ed85 0a00 	vstr	s0, [r5]
}
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	20001124 	.word	0x20001124
 80028fc:	20001144 	.word	0x20001144
 8002900:	2000273c 	.word	0x2000273c

08002904 <Delay_init>:

/*-------------------------------------------------------------------------------------------*/
void Delay_init(void)
{
	/* initialize pointers positions for delay effect */
	shift = INIT_DELAY;
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <Delay_init+0x18>)
 8002906:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800290a:	601a      	str	r2, [r3, #0]
	readpos = delayline;
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <Delay_init+0x1c>)
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <Delay_init+0x20>)
 8002910:	601a      	str	r2, [r3, #0]
	writepos = delayline + INIT_DELAY;
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <Delay_init+0x24>)
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <Delay_init+0x28>)
 8002916:	601a      	str	r2, [r3, #0]
}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20012a5c 	.word	0x20012a5c
 8002920:	20012a58 	.word	0x20012a58
 8002924:	20003fec 	.word	0x20003fec
 8002928:	20012a60 	.word	0x20012a60
 800292c:	20010b0c 	.word	0x20010b0c

08002930 <Delay_clean>:
/*-------------------------------------------------------------------------------------------*/
void Delay_clean(void)
{
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <Delay_clean+0x10>)
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <Delay_clean+0x14>)
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
		delayline[i] = 0;
 8002934:	2100      	movs	r1, #0
 8002936:	f843 1b04 	str.w	r1, [r3], #4
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 800293a:	4293      	cmp	r3, r2
 800293c:	d1fb      	bne.n	8002936 <Delay_clean+0x6>
}
 800293e:	4770      	bx	lr
 8002940:	20003fec 	.word	0x20003fec
 8002944:	20012a54 	.word	0x20012a54

08002948 <Delay_time_set>:
}
/*-------------------------------------------------------------------------------------------*/
void Delay_time_set(uint8_t val)
{
	float 	*pos;
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 8002948:	ee07 0a90 	vmov	s15, r0
 800294c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002984 <Delay_time_set+0x3c>
 8002950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002954:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002988 <Delay_time_set+0x40>
{
 8002958:	b508      	push	{r3, lr}
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 800295a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800295e:	f004 f9d3 	bl	8006d08 <lrintf>
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <Delay_time_set+0x44>)
 8002964:	6018      	str	r0, [r3, #0]
	pos = writepos - shift;
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <Delay_time_set+0x48>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
	if (pos >= delayline)
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <Delay_time_set+0x4c>)
 8002970:	4298      	cmp	r0, r3
		readpos = pos;
	else
		readpos = pos + DELAYLINE_LEN - 1;
 8002972:	bf38      	it	cc
 8002974:	f500 406a 	addcc.w	r0, r0, #59904	; 0xea00
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <Delay_time_set+0x50>)
 800297a:	bf38      	it	cc
 800297c:	305c      	addcc	r0, #92	; 0x5c
 800297e:	6018      	str	r0, [r3, #0]

}
 8002980:	bd08      	pop	{r3, pc}
 8002982:	bf00      	nop
 8002984:	437a0000 	.word	0x437a0000
 8002988:	42e84489 	.word	0x42e84489
 800298c:	20012a5c 	.word	0x20012a5c
 8002990:	20012a60 	.word	0x20012a60
 8002994:	20003fec 	.word	0x20003fec
 8002998:	20012a58 	.word	0x20012a58

0800299c <DelayFeedback_set>:
	fdb *= 0.95f ;//
}
/*-------------------------------------------------------------------------------------------*/
void DelayFeedback_set(uint8_t val)
{
	fdb = val / MIDI_MAX;
 800299c:	ee07 0a90 	vmov	s15, r0
 80029a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80029b4 <DelayFeedback_set+0x18>
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <DelayFeedback_set+0x1c>)
 80029a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ae:	edc3 7a00 	vstr	s15, [r3]
}
 80029b2:	4770      	bx	lr
 80029b4:	42fe0000 	.word	0x42fe0000
 80029b8:	20000078 	.word	0x20000078

080029bc <DelayWet_set>:
/*-------------------------------------------------------------------------------------------*/
void DelayWet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 80029bc:	ee07 0a90 	vmov	s15, r0
 80029c0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80029d4 <DelayWet_set+0x18>
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <DelayWet_set+0x1c>)
 80029c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ce:	edc3 7a00 	vstr	s15, [r3]
}
 80029d2:	4770      	bx	lr
 80029d4:	42fe0000 	.word	0x42fe0000
 80029d8:	2000007c 	.word	0x2000007c

080029dc <Delay_compute>:
float Delay_compute (float x)
{
	float y, dy;

	// (*readpos) : delayed sample read at the output of the delay line
	dy = (1.f - coeff_a1)*(*readpos) + coeff_a1 * old_dy; // apply lowpass filter in the loop
 80029dc:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <Delay_compute+0x98>)
 80029de:	4926      	ldr	r1, [pc, #152]	; (8002a78 <Delay_compute+0x9c>)
 80029e0:	ed92 7a00 	vldr	s14, [r2]
 80029e4:	eddf 7a25 	vldr	s15, [pc, #148]	; 8002a7c <Delay_compute+0xa0>
 80029e8:	680b      	ldr	r3, [r1, #0]
 80029ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ee:	edd3 6a00 	vldr	s13, [r3]
 80029f2:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002a80 <Delay_compute+0xa4>
 80029f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
{
 80029fa:	b530      	push	{r4, r5, lr}
	old_dy = dy;
 80029fc:	ed82 7a00 	vstr	s14, [r2]
	y = x + fdb*dy;
 8002a00:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <Delay_compute+0xa8>)
 8002a02:	edd2 7a00 	vldr	s15, [r2]
 8002a06:	eef0 6a40 	vmov.f32	s13, s0
 8002a0a:	eee7 6a87 	vfma.f32	s13, s15, s14

	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 8002a0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002a12:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	y = x + fdb*dy;
 8002a1a:	eeb0 7a66 	vmov.f32	s14, s13
	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 8002a1e:	dc25      	bgt.n	8002a6c <Delay_compute+0x90>
	y = (y < -1.0f) ? -1.0f : y ;
 8002a20:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8002a24:	eeb4 7a66 	vcmp.f32	s14, s13
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	bf48      	it	mi
 8002a2e:	eeb0 7a66 	vmovmi.f32	s14, s13
	*writepos = y; // write new computed sample at the input of the delay line
 8002a32:	4d15      	ldr	r5, [pc, #84]	; (8002a88 <Delay_compute+0xac>)

	/* update the delay line pointers : */
	writepos++;
	readpos++;

	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002a34:	4c15      	ldr	r4, [pc, #84]	; (8002a8c <Delay_compute+0xb0>)
	*writepos = y; // write new computed sample at the input of the delay line
 8002a36:	682a      	ldr	r2, [r5, #0]
 8002a38:	eca2 7a01 	vstmia	r2!, {s14}
	writepos++;
 8002a3c:	602a      	str	r2, [r5, #0]
	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002a3e:	f64e 205c 	movw	r0, #59996	; 0xea5c
	readpos++;
 8002a42:	3304      	adds	r3, #4
	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002a44:	1b12      	subs	r2, r2, r4
	readpos++;
 8002a46:	600b      	str	r3, [r1, #0]
	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002a48:	4282      	cmp	r2, r0
		writepos = delayline; // wrap pointer

	if ((readpos - delayline) >= DELAYLINE_LEN)
 8002a4a:	eba3 0304 	sub.w	r3, r3, r4
		writepos = delayline; // wrap pointer
 8002a4e:	bfc8      	it	gt
 8002a50:	602c      	strgt	r4, [r5, #0]
	if ((readpos - delayline) >= DELAYLINE_LEN)
 8002a52:	4283      	cmp	r3, r0
		readpos = delayline;  // wrap pointer

	return (wet * y + (1 - wet) * x);
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <Delay_compute+0xb4>)
		readpos = delayline;  // wrap pointer
 8002a56:	bfc8      	it	gt
 8002a58:	600c      	strgt	r4, [r1, #0]
	return (wet * y + (1 - wet) * x);
 8002a5a:	edd3 6a00 	vldr	s13, [r3]
 8002a5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a62:	ee27 0a80 	vmul.f32	s0, s15, s0

}
 8002a66:	eea6 0a87 	vfma.f32	s0, s13, s14
 8002a6a:	bd30      	pop	{r4, r5, pc}
	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 8002a6c:	eeb0 7a67 	vmov.f32	s14, s15
 8002a70:	e7df      	b.n	8002a32 <Delay_compute+0x56>
 8002a72:	bf00      	nop
 8002a74:	20012a54 	.word	0x20012a54
 8002a78:	20012a58 	.word	0x20012a58
 8002a7c:	3f19999a 	.word	0x3f19999a
 8002a80:	3ecccccc 	.word	0x3ecccccc
 8002a84:	20000078 	.word	0x20000078
 8002a88:	20012a60 	.word	0x20012a60
 8002a8c:	20003fec 	.word	0x20003fec
 8002a90:	2000007c 	.word	0x2000007c

08002a94 <Drifter_amp_set>:
Drifter_t	d3 _CCM_ ;

/*-------------------------------------------------------------------------------------------*/
void	Drifter_amp_set(uint8_t val)
{
	d1.gain = d2.gain = d3.gain = (val / MIDI_MAX)*(val / MIDI_MAX);
 8002a94:	ee07 0a90 	vmov	s15, r0
 8002a98:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ab8 <Drifter_amp_set+0x24>
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <Drifter_amp_set+0x28>)
 8002a9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002aaa:	edc3 7a02 	vstr	s15, [r3, #8]
 8002aae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8002ab2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

}
 8002ab6:	4770      	bx	lr
 8002ab8:	42fe0000 	.word	0x42fe0000
 8002abc:	20003d34 	.word	0x20003d34

08002ac0 <Drifter_minFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_minFreq_set(uint8_t val)
{
	d1.fmin = d2.fmin = d3.fmin = .1f + 50 * val / MIDI_MAX;
 8002ac0:	2332      	movs	r3, #50	; 0x32
 8002ac2:	4358      	muls	r0, r3
 8002ac4:	ee07 0a90 	vmov	s15, r0
 8002ac8:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002aec <Drifter_minFreq_set+0x2c>
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <Drifter_minFreq_set+0x30>)
 8002ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002af4 <Drifter_minFreq_set+0x34>
 8002ada:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ade:	edc3 7a01 	vstr	s15, [r3, #4]
 8002ae2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8002ae6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

}
 8002aea:	4770      	bx	lr
 8002aec:	42fe0000 	.word	0x42fe0000
 8002af0:	20003d34 	.word	0x20003d34
 8002af4:	3dcccccd 	.word	0x3dcccccd

08002af8 <Drifter_maxFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_maxFreq_set(uint8_t val)
{
	float x;

	x = (1 + 19 * val / MIDI_MAX )* d1.fmin ;
 8002af8:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002afc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002b00:	ee07 0a90 	vmov	s15, r0
 8002b04:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002b4c <Drifter_maxFreq_set+0x54>
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <Drifter_maxFreq_set+0x58>)
 8002b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b1a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8002b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (x > 10000)
 8002b22:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b54 <Drifter_maxFreq_set+0x5c>
 8002b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		d1.fmax = d2.fmax = d3.fmax = 10000;
 8002b2e:	bfc3      	ittte	gt
 8002b30:	ed83 7a00 	vstrgt	s14, [r3]
 8002b34:	ed83 7a0b 	vstrgt	s14, [r3, #44]	; 0x2c
 8002b38:	ed83 7a16 	vstrgt	s14, [r3, #88]	; 0x58
	else {
		d1.fmax = d2.fmax = d3.fmax = x;
 8002b3c:	edc3 7a00 	vstrle	s15, [r3]
 8002b40:	bfdc      	itt	le
 8002b42:	edc3 7a0b 	vstrle	s15, [r3, #44]	; 0x2c
 8002b46:	edc3 7a16 	vstrle	s15, [r3, #88]	; 0x58
	}
}
 8002b4a:	4770      	bx	lr
 8002b4c:	42fe0000 	.word	0x42fe0000
 8002b50:	20003d34 	.word	0x20003d34
 8002b54:	461c4000 	.word	0x461c4000

08002b58 <drifter_newSegment>:
/*-------------------------------------------------------------------------------------------*/
void drifter_newSegment(Drifter_t *d) //
{
	d->n = 0;
	d->initial = d->final;
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 8002b58:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002bb8 <drifter_newSegment+0x60>
 8002b5c:	ed90 7a00 	vldr	s14, [r0]
 8002b60:	ee87 0a87 	vdiv.f32	s0, s15, s14
	d->n = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	6183      	str	r3, [r0, #24]
	d->initial = d->final;
 8002b68:	6a03      	ldr	r3, [r0, #32]
 8002b6a:	61c3      	str	r3, [r0, #28]
{
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	4604      	mov	r4, r0
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 8002b70:	ed90 7a01 	vldr	s14, [r0, #4]
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 8002b74:	ed80 0a03 	vstr	s0, [r0, #12]
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 8002b78:	eec7 0a87 	vdiv.f32	s1, s15, s14
 8002b7c:	edc0 0a04 	vstr	s1, [r0, #16]
	d->length = frand_a_b(d->minLength,d->maxLength);
 8002b80:	f001 f896 	bl	8003cb0 <frand_a_b>
 8002b84:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	d->final = frand_a_b(-1, 1);
 8002b88:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	d->length = frand_a_b(d->minLength,d->maxLength);
 8002b8c:	ed84 0a05 	vstr	s0, [r4, #20]
	d->final = frand_a_b(-1, 1);
 8002b90:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002b94:	f001 f88c 	bl	8003cb0 <frand_a_b>
	d->slope = (d->final - d->initial) / d->length ;
 8002b98:	edd4 7a07 	vldr	s15, [r4, #28]
	d->final = frand_a_b(-1, 1);
 8002b9c:	ed84 0a08 	vstr	s0, [r4, #32]
	d->slope = (d->final - d->initial) / d->length ;
 8002ba0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002ba4:	edd4 7a05 	vldr	s15, [r4, #20]
 8002ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bac:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8002bb0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 8002bb4:	bd10      	pop	{r4, pc}
 8002bb6:	bf00      	nop
 8002bb8:	46ac4400 	.word	0x46ac4400

08002bbc <drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float drifter_nextSample(Drifter_t *d) //
{
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002bbc:	edd0 7a06 	vldr	s15, [r0, #24]
 8002bc0:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
	(d->n)++;
 8002bc4:	6983      	ldr	r3, [r0, #24]
	if (d->n >= d->length)
 8002bc6:	6942      	ldr	r2, [r0, #20]
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bcc:	edd0 7a07 	vldr	s15, [r0, #28]
 8002bd0:	eee6 7a87 	vfma.f32	s15, s13, s14
	(d->n)++;
 8002bd4:	3301      	adds	r3, #1
	if (d->n >= d->length)
 8002bd6:	4293      	cmp	r3, r2
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002bd8:	ed90 7a02 	vldr	s14, [r0, #8]
	(d->n)++;
 8002bdc:	6183      	str	r3, [r0, #24]
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002bde:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 8002be2:	b510      	push	{r4, lr}
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002be4:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
{
 8002be8:	4604      	mov	r4, r0
	if (d->n >= d->length)
 8002bea:	d301      	bcc.n	8002bf0 <drifter_nextSample+0x34>
		{
			drifter_newSegment(d);
 8002bec:	f7ff ffb4 	bl	8002b58 <drifter_newSegment>
		}
	return d->out;
}
 8002bf0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8002bf4:	bd10      	pop	{r4, pc}
	...

08002bf8 <d1_drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float d1_drifter_nextSample(void) //
{
	return drifter_nextSample(&d1);
 8002bf8:	4801      	ldr	r0, [pc, #4]	; (8002c00 <d1_drifter_nextSample+0x8>)
 8002bfa:	f7ff bfdf 	b.w	8002bbc <drifter_nextSample>
 8002bfe:	bf00      	nop
 8002c00:	20003d8c 	.word	0x20003d8c

08002c04 <d2_drifter_nextSample>:
}
/*-------------------------------------------------------------------------------------------*/
float d2_drifter_nextSample(void) //
{
	return drifter_nextSample(&d2);
 8002c04:	4801      	ldr	r0, [pc, #4]	; (8002c0c <d2_drifter_nextSample+0x8>)
 8002c06:	f7ff bfd9 	b.w	8002bbc <drifter_nextSample>
 8002c0a:	bf00      	nop
 8002c0c:	20003d60 	.word	0x20003d60

08002c10 <drifter_prepare>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_prepare(Drifter_t *d)
{
	d->final = 0;
 8002c10:	2200      	movs	r2, #0
 8002c12:	6202      	str	r2, [r0, #32]
	d->fmax = 4;
 8002c14:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002c18:	6002      	str	r2, [r0, #0]
	d->fmin = 2;
 8002c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c1e:	6042      	str	r2, [r0, #4]
	d->gain = .01f;
 8002c20:	4a01      	ldr	r2, [pc, #4]	; (8002c28 <drifter_prepare+0x18>)
 8002c22:	6082      	str	r2, [r0, #8]

	drifter_newSegment(d);
 8002c24:	f7ff bf98 	b.w	8002b58 <drifter_newSegment>
 8002c28:	3c23d70a 	.word	0x3c23d70a

08002c2c <drifter_init>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_init(void)
{
 8002c2c:	b510      	push	{r4, lr}
	drifter_prepare(&d1);
 8002c2e:	4c07      	ldr	r4, [pc, #28]	; (8002c4c <drifter_init+0x20>)
 8002c30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c34:	f7ff ffec 	bl	8002c10 <drifter_prepare>
	drifter_prepare(&d2);
 8002c38:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002c3c:	f7ff ffe8 	bl	8002c10 <drifter_prepare>
	drifter_prepare(&d3);
 8002c40:	4620      	mov	r0, r4
}
 8002c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	drifter_prepare(&d3);
 8002c46:	f7ff bfe3 	b.w	8002c10 <drifter_prepare>
 8002c4a:	bf00      	nop
 8002c4c:	20003d34 	.word	0x20003d34

08002c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c50:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c52:	2410      	movs	r4, #16
{
 8002c54:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c56:	4622      	mov	r2, r4
 8002c58:	2100      	movs	r1, #0
 8002c5a:	a80e      	add	r0, sp, #56	; 0x38
 8002c5c:	f005 fa67 	bl	800812e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c60:	2214      	movs	r2, #20
 8002c62:	2100      	movs	r1, #0
 8002c64:	a807      	add	r0, sp, #28
 8002c66:	f005 fa62 	bl	800812e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	a803      	add	r0, sp, #12
 8002c70:	f005 fa5d 	bl	800812e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	2400      	movs	r4, #0
 8002c76:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <SystemClock_Config+0xac>)
 8002c78:	9401      	str	r4, [sp, #4]
 8002c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <SystemClock_Config+0xb0>)
 8002c8e:	9402      	str	r4, [sp, #8]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	9302      	str	r3, [sp, #8]
 8002ca0:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca2:	2601      	movs	r6, #1
 8002ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ca8:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002caa:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002cb2:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cb4:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002cb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002cbc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc0:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cc6:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc8:	f003 f96e 	bl	8005fa8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ccc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cce:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002cd2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cda:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cde:	a807      	add	r0, sp, #28
 8002ce0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ce4:	f003 fb34 	bl	8006350 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 144;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	2090      	movs	r0, #144	; 0x90
 8002cec:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf0:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002cf2:	9603      	str	r6, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf4:	f003 fbe6 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002cf8:	b018      	add	sp, #96	; 0x60
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40007000 	.word	0x40007000

08002d04 <main>:
{
 8002d04:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002d08:	b097      	sub	sp, #92	; 0x5c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0a:	2400      	movs	r4, #0
 8002d0c:	4e9b      	ldr	r6, [pc, #620]	; (8002f7c <main+0x278>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8002d0e:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8002fb4 <main+0x2b0>
  hi2c2.Instance = I2C2;
 8002d12:	4f9b      	ldr	r7, [pc, #620]	; (8002f80 <main+0x27c>)
  huart1.Instance = USART1;
 8002d14:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8002fb8 <main+0x2b4>
  HAL_Init();
 8002d18:	f002 f90a 	bl	8004f30 <HAL_Init>
  SystemClock_Config();
 8002d1c:	f7ff ff98 	bl	8002c50 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	2214      	movs	r2, #20
 8002d22:	2100      	movs	r1, #0
 8002d24:	a80d      	add	r0, sp, #52	; 0x34
 8002d26:	f005 fa02 	bl	800812e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2a:	9405      	str	r4, [sp, #20]
 8002d2c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6333      	str	r3, [r6, #48]	; 0x30
 8002d34:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	9305      	str	r3, [sp, #20]
 8002d3c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d3e:	9406      	str	r4, [sp, #24]
 8002d40:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d46:	6333      	str	r3, [r6, #48]	; 0x30
 8002d48:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	9306      	str	r3, [sp, #24]
 8002d50:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	9407      	str	r4, [sp, #28]
 8002d54:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6333      	str	r3, [r6, #48]	; 0x30
 8002d5c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	9307      	str	r3, [sp, #28]
 8002d64:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	9408      	str	r4, [sp, #32]
 8002d68:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	6333      	str	r3, [r6, #48]	; 0x30
 8002d70:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8002d78:	4622      	mov	r2, r4
 8002d7a:	210c      	movs	r1, #12
 8002d7c:	4658      	mov	r0, fp
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8002d80:	f002 fbec 	bl	800555c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8002d84:	4b7f      	ldr	r3, [pc, #508]	; (8002f84 <main+0x280>)
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	f002 fbe5 	bl	800555c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, GPIO_PIN_RESET);
 8002d92:	4622      	mov	r2, r4
 8002d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d98:	487b      	ldr	r0, [pc, #492]	; (8002f88 <main+0x284>)
 8002d9a:	f002 fbdf 	bl	800555c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_A_Pin SW1_B_Pin */
  GPIO_InitStruct.Pin = SW1_A_Pin | SW1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d9e:	4a7b      	ldr	r2, [pc, #492]	; (8002f8c <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da0:	4879      	ldr	r0, [pc, #484]	; (8002f88 <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da2:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002da6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002daa:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dac:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	f002 faf2 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_BTN_Pin FIRE_BTN_Pin */
  GPIO_InitStruct.Pin = SW1_BTN_Pin | FIRE_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002db8:	4a75      	ldr	r2, [pc, #468]	; (8002f90 <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	4873      	ldr	r0, [pc, #460]	; (8002f88 <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dbc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002dc0:	f248 0180 	movw	r1, #32896	; 0x8080
 8002dc4:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc8:	a90d      	add	r1, sp, #52	; 0x34
 8002dca:	f002 fae7 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_DC_Pin;
 8002dce:	250c      	movs	r5, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	a90d      	add	r1, sp, #52	; 0x34
 8002dd2:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd4:	e9cd 590d 	strd	r5, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ddc:	f002 fade 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002de0:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de2:	e9cd 390d 	strd	r3, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	a90d      	add	r1, sp, #52	; 0x34
 8002dea:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002df0:	f002 fad4 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_LED_Pin */
  GPIO_InitStruct.Pin = FIRE_LED_Pin;
 8002df4:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8002df8:	a90d      	add	r1, sp, #52	; 0x34
 8002dfa:	4863      	ldr	r0, [pc, #396]	; (8002f88 <main+0x284>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dfc:	e9cd 290d 	strd	r2, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8002e04:	f002 faca 	bl	800539c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	2017      	movs	r0, #23
 8002e0e:	f002 f8e1 	bl	8004fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e12:	2017      	movs	r0, #23
 8002e14:	f002 f912 	bl	800503c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	2028      	movs	r0, #40	; 0x28
 8002e1e:	f002 f8d9 	bl	8004fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e22:	2028      	movs	r0, #40	; 0x28
 8002e24:	f002 f90a 	bl	800503c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e28:	9404      	str	r4, [sp, #16]
 8002e2a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002e2c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002e30:	6332      	str	r2, [r6, #48]	; 0x30
 8002e32:	6b32      	ldr	r2, [r6, #48]	; 0x30
  hi2s2.Instance = SPI2;
 8002e34:	4e57      	ldr	r6, [pc, #348]	; (8002f94 <main+0x290>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e3a:	9204      	str	r2, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002e3c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e3e:	9a04      	ldr	r2, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002e40:	200f      	movs	r0, #15
 8002e42:	4622      	mov	r2, r4
 8002e44:	f002 f8c6 	bl	8004fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002e48:	200f      	movs	r0, #15
 8002e4a:	f002 f8f7 	bl	800503c <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 100000;
 8002e4e:	4852      	ldr	r0, [pc, #328]	; (8002f98 <main+0x294>)
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <main+0x298>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e52:	623c      	str	r4, [r7, #32]
  hi2c2.Init.ClockSpeed = 100000;
 8002e54:	e9c7 0200 	strd	r0, r2, [r7]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e5c:	4638      	mov	r0, r7
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e5e:	e9c7 2404 	strd	r2, r4, [r7, #16]
  hi2c2.Init.OwnAddress1 = 0;
 8002e62:	e9c7 4402 	strd	r4, r4, [r7, #8]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e66:	e9c7 4406 	strd	r4, r4, [r7, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e6a:	f002 fc5b 	bl	8005724 <HAL_I2C_Init>
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002e6e:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <main+0x29c>)
 8002e70:	f44f 7a00 	mov.w	sl, #512	; 0x200
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002e74:	f64b 3180 	movw	r1, #48000	; 0xbb80
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002e78:	4630      	mov	r0, r6
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002e7a:	e9c6 2a00 	strd	r2, sl, [r6]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002e7e:	f8c6 a010 	str.w	sl, [r6, #16]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002e82:	e9c6 1405 	strd	r1, r4, [r6, #20]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e86:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8002e8a:	e9c6 4907 	strd	r4, r9, [r6, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002e8e:	f002 fdc9 	bl	8005a24 <HAL_I2S_Init>
  huart1.Init.BaudRate = 115200;
 8002e92:	f8df c128 	ldr.w	ip, [pc, #296]	; 8002fbc <main+0x2b8>
 8002e96:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e9a:	4640      	mov	r0, r8
  huart1.Init.BaudRate = 115200;
 8002e9c:	e9c8 c100 	strd	ip, r1, [r8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ea0:	e9c8 4504 	strd	r4, r5, [r8, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea4:	e9c8 4402 	strd	r4, r4, [r8, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea8:	e9c8 4406 	strd	r4, r4, [r8, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eac:	f003 febc 	bl	8006c28 <HAL_UART_Init>
  hrng.Instance = RNG;
 8002eb0:	483c      	ldr	r0, [pc, #240]	; (8002fa4 <main+0x2a0>)
 8002eb2:	493d      	ldr	r1, [pc, #244]	; (8002fa8 <main+0x2a4>)
  hspi3.Instance = SPI3;
 8002eb4:	4d3d      	ldr	r5, [pc, #244]	; (8002fac <main+0x2a8>)
  hrng.Instance = RNG;
 8002eb6:	6001      	str	r1, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002eb8:	f003 fbca 	bl	8006650 <HAL_RNG_Init>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ebc:	f8df e100 	ldr.w	lr, [pc, #256]	; 8002fc0 <main+0x2bc>
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ec0:	f8c5 a018 	str.w	sl, [r5, #24]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ec4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ec8:	e9c5 e100 	strd	lr, r1, [r5]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ecc:	f04f 0a18 	mov.w	sl, #24
  hspi3.Init.CRCPolynomial = 10;
 8002ed0:	210a      	movs	r1, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ed2:	4628      	mov	r0, r5
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ed4:	e9c5 a407 	strd	sl, r4, [r5, #28]
  hspi3.Init.CRCPolynomial = 10;
 8002ed8:	62e9      	str	r1, [r5, #44]	; 0x2c
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eda:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ede:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee2:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ee6:	f003 fc33 	bl	8006750 <HAL_SPI_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eea:	4652      	mov	r2, sl
 8002eec:	4621      	mov	r1, r4
 8002eee:	a810      	add	r0, sp, #64	; 0x40
 8002ef0:	f005 f91d 	bl	800812e <memset>
  htim1.Instance = TIM1;
 8002ef4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8002fc4 <main+0x2c0>
 8002ef8:	492d      	ldr	r1, [pc, #180]	; (8002fb0 <main+0x2ac>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efa:	f8ca 4008 	str.w	r4, [sl, #8]
  htim1.Init.Prescaler = 0;
 8002efe:	e9ca 1400 	strd	r1, r4, [sl]
  htim1.Init.Period = 65535;
 8002f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002f06:	2302      	movs	r3, #2
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f08:	e9ca 1403 	strd	r1, r4, [sl, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002f0c:	2103      	movs	r1, #3
 8002f0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002f12:	4650      	mov	r0, sl
 8002f14:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f16:	e9cd 3912 	strd	r3, r9, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	e9ca 4405 	strd	r4, r4, [sl, #20]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f22:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002f26:	f003 fd81 	bl	8006a2c <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f2a:	a909      	add	r1, sp, #36	; 0x24
 8002f2c:	4650      	mov	r0, sl
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f32:	f003 fdc7 	bl	8006ac4 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002f36:	213c      	movs	r1, #60	; 0x3c
 8002f38:	4650      	mov	r0, sl
 8002f3a:	f003 fcee 	bl	800691a <HAL_TIM_Encoder_Start>
  Synth_Init();
 8002f3e:	f001 fb43 	bl	80045c8 <Synth_Init>
  lcd.CEPIN = LCD_CS_Pin;
 8002f42:	2204      	movs	r2, #4
  lcd.BLPORT = LCD_BL_GPIO_Port;
 8002f44:	9b01      	ldr	r3, [sp, #4]
  lcd.CEPIN = LCD_CS_Pin;
 8002f46:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  lcd.DCPIN = LCD_DC_Pin;
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  lcd.BLPORT = LCD_BL_GPIO_Port;
 8002f50:	9311      	str	r3, [sp, #68]	; 0x44
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 8002f52:	aa0d      	add	r2, sp, #52	; 0x34
  lcd.BLPIN = LCD_BL_Pin;
 8002f54:	f04f 0302 	mov.w	r3, #2
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 8002f58:	a903      	add	r1, sp, #12
 8002f5a:	a809      	add	r0, sp, #36	; 0x24
  comms.i2s = &hi2s2;
 8002f5c:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
  comms.uart = &huart1;
 8002f60:	e9cd 580b 	strd	r5, r8, [sp, #44]	; 0x2c
  enc.tim1 = &htim1;
 8002f64:	f8cd a00c 	str.w	sl, [sp, #12]
  lcd.CEPORT = LCD_CS_GPIO_Port;
 8002f68:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  lcd.DCPORT = LCD_DC_GPIO_Port;
 8002f6c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  lcd.BLPIN = LCD_BL_Pin;
 8002f70:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  lcd.SPICH = &hspi3;
 8002f74:	9513      	str	r5, [sp, #76]	; 0x4c
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 8002f76:	f7fe f9dd 	bl	8001334 <maincpp>
 8002f7a:	e7fe      	b.n	8002f7a <main+0x276>
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	20013a5c 	.word	0x20013a5c
 8002f84:	40020400 	.word	0x40020400
 8002f88:	40020800 	.word	0x40020800
 8002f8c:	10110000 	.word	0x10110000
 8002f90:	10310000 	.word	0x10310000
 8002f94:	20013bf8 	.word	0x20013bf8
 8002f98:	40005800 	.word	0x40005800
 8002f9c:	000186a0 	.word	0x000186a0
 8002fa0:	40003800 	.word	0x40003800
 8002fa4:	20013b88 	.word	0x20013b88
 8002fa8:	50060800 	.word	0x50060800
 8002fac:	20013ab0 	.word	0x20013ab0
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	20013b08 	.word	0x20013b08
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	40003c00 	.word	0x40003c00
 8002fc4:	20013b48 	.word	0x20013b48

08002fc8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fc8:	4770      	bx	lr
	...

08002fcc <Lin2Exp>:
}
//------------------------------------------------------------------------------------
// input val in 0 ... 127
// output is an exponential between min and max
float	Lin2Exp(uint8_t val, float min, float max)
{
 8002fcc:	b508      	push	{r3, lr}
	return min * powf(max / min, val / MIDI_MAX);
 8002fce:	ee07 0a90 	vmov	s15, r0
{
 8002fd2:	ed2d 8b02 	vpush	{d8}
 8002fd6:	eeb0 8a40 	vmov.f32	s16, s0
	return min * powf(max / min, val / MIDI_MAX);
 8002fda:	ee80 0a88 	vdiv.f32	s0, s1, s16
 8002fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe2:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002ff8 <Lin2Exp+0x2c>
 8002fe6:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8002fea:	f003 ff69 	bl	8006ec0 <powf>
}
 8002fee:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002ff2:	ecbd 8b02 	vpop	{d8}
 8002ff6:	bd08      	pop	{r3, pc}
 8002ff8:	42fe0000 	.word	0x42fe0000

08002ffc <tanhXdX>:
//------------------------------------------------------------------------------------

float tanhXdX(float x)
{
	float a = x*x;
 8002ffc:	ee20 0a00 	vmul.f32	s0, s0, s0
	// IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)
	x = ((a + 105)*a + 945) / ((15*a + 420)*a + 945);
 8003000:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800302c <tanhXdX+0x30>
 8003004:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8003030 <tanhXdX+0x34>
 8003008:	ee30 7a07 	vadd.f32	s14, s0, s14
 800300c:	eef0 6a67 	vmov.f32	s13, s15
 8003010:	eee7 6a00 	vfma.f32	s13, s14, s0
 8003014:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003034 <tanhXdX+0x38>
 8003018:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
 800301c:	eea0 7a06 	vfma.f32	s14, s0, s12
 8003020:	eee7 7a00 	vfma.f32	s15, s14, s0
	return x;
}
 8003024:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	42d20000 	.word	0x42d20000
 8003030:	446c4000 	.word	0x446c4000
 8003034:	43d20000 	.word	0x43d20000

08003038 <fastTanh>:

//------------------------------------------------------------------------------------
float fastTanh(float var)
{
	if(var < -1.95f)     return -1.0f;
 8003038:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003078 <fastTanh+0x40>
 800303c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003044:	d411      	bmi.n	800306a <fastTanh+0x32>
	else if(var > 1.95f) return  1.0f;
 8003046:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800307c <fastTanh+0x44>
 800304a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003052:	dc0d      	bgt.n	8003070 <fastTanh+0x38>
	else return  4.15f*var/(4.29f+var*var);
 8003054:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8003080 <fastTanh+0x48>
 8003058:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003084 <fastTanh+0x4c>
 800305c:	eee0 7a00 	vfma.f32	s15, s0, s0
 8003060:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003064:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003068:	4770      	bx	lr
	if(var < -1.95f)     return -1.0f;
 800306a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800306e:	4770      	bx	lr
	else if(var > 1.95f) return  1.0f;
 8003070:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	bff9999a 	.word	0xbff9999a
 800307c:	3ff9999a 	.word	0x3ff9999a
 8003080:	408947ae 	.word	0x408947ae
 8003084:	4084cccd 	.word	0x4084cccd

08003088 <softClipTwo>:
//------------------------------------------------------------------------------------
float 	softClipTwo(float in)
{
 8003088:	eef0 5a40 	vmov.f32	s11, s0
 800308c:	b508      	push	{r3, lr}
	return in * tanhXdX(0.5*in);
 800308e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003092:	ee25 0a80 	vmul.f32	s0, s11, s0
 8003096:	f7ff ffb1 	bl	8002ffc <tanhXdX>
}
 800309a:	ee20 0a25 	vmul.f32	s0, s0, s11
 800309e:	bd08      	pop	{r3, pc}

080030a0 <fastTan>:
//------------------------------------------------------------------------------------
float 	fastTan(float x)
{
	float A = -15*x+x*x*x;
 80030a0:	ee20 7a00 	vmul.f32	s14, s0, s0
	float B = 3*(-5+2*x*x);
 80030a4:	ee70 6a00 	vadd.f32	s13, s0, s0
	float A = -15*x+x*x*x;
 80030a8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80030ac:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
 80030b0:	eea0 7a27 	vfma.f32	s14, s0, s15
	float B = 3*(-5+2*x*x);
 80030b4:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 80030b8:	eee6 7a80 	vfma.f32	s15, s13, s0
 80030bc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80030c0:	ee27 0a80 	vmul.f32	s0, s15, s0
	return A/B;
}
 80030c4:	ee87 0a00 	vdiv.f32	s0, s14, s0
 80030c8:	4770      	bx	lr

080030ca <osc_init>:
osc_init(Oscillator_t * op, float_t amp, float_t freq)
{
	op->amp = amp;
	op->last_amp = amp;
	op->freq = freq;
	op->phase = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60c3      	str	r3, [r0, #12]
	op->out = 0;
 80030ce:	61c3      	str	r3, [r0, #28]
	op->modInd = 0;
 80030d0:	6143      	str	r3, [r0, #20]
	op->mul = 1;
 80030d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	op->amp = amp;
 80030d6:	ed80 0a00 	vstr	s0, [r0]
	op->last_amp = amp;
 80030da:	ed80 0a01 	vstr	s0, [r0, #4]
	op->freq = freq;
 80030de:	edc0 0a02 	vstr	s1, [r0, #8]
	op->mul = 1;
 80030e2:	6183      	str	r3, [r0, #24]
}
 80030e4:	4770      	bx	lr
	...

080030e8 <Drifter_centralFreq_set>:
	op->freq = f;
}

/*---------------------------------------------------------------*/
void	Drifter_centralFreq_set(uint8_t val)
{
 80030e8:	b508      	push	{r3, lr}
	centralFreq = Lin2Exp(val, 1, 6000);
 80030ea:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003100 <Drifter_centralFreq_set+0x18>
 80030ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80030f2:	f7ff ff6b 	bl	8002fcc <Lin2Exp>
 80030f6:	4b03      	ldr	r3, [pc, #12]	; (8003104 <Drifter_centralFreq_set+0x1c>)
 80030f8:	ed83 0a00 	vstr	s0, [r3]
}
 80030fc:	bd08      	pop	{r3, pc}
 80030fe:	bf00      	nop
 8003100:	45bb8000 	.word	0x45bb8000
 8003104:	20000084 	.word	0x20000084

08003108 <FM_op_freq_set>:
}


/*---------------------------------------------------------------*/
void FM_op_freq_set(Oscillator_t *op, uint8_t val)
{
 8003108:	b510      	push	{r4, lr}
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 800310a:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003120 <FM_op_freq_set+0x18>
{
 800310e:	4604      	mov	r4, r0
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 8003110:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003114:	4608      	mov	r0, r1
 8003116:	f7ff ff59 	bl	8002fcc <Lin2Exp>
 800311a:	ed84 0a02 	vstr	s0, [r4, #8]
}
 800311e:	bd10      	pop	{r4, pc}
 8003120:	45fa0000 	.word	0x45fa0000

08003124 <FM_op_modInd_set>:
/*-------------------------------------------------------*/
void FM_op_modInd_set(Oscillator_t *op, uint8_t val)
{
	op->modInd = (1.4f * val / MIDI_MAX) * (1.4f * val / MIDI_MAX);
 8003124:	ee07 1a90 	vmov	s15, r1
 8003128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800312c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003148 <FM_op_modInd_set+0x24>
 8003130:	eddf 6a06 	vldr	s13, [pc, #24]	; 800314c <FM_op_modInd_set+0x28>
 8003134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800313c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003140:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	3fb33333 	.word	0x3fb33333
 800314c:	42fe0000 	.word	0x42fe0000

08003150 <OpSampleCompute0>:

	return  0.5f * (op1.out + op3.out);
}
/*----------------------------------------------------------------------------------------------*/
float_t OpSampleCompute0(Oscillator_t * op) // accurate sine
{
 8003150:	b510      	push	{r4, lr}
 8003152:	ed2d 8b02 	vpush	{d8}
	float_t z;


	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8003156:	eddf 7a12 	vldr	s15, [pc, #72]	; 80031a0 <OpSampleCompute0+0x50>
{
 800315a:	4604      	mov	r4, r0
	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 800315c:	ed94 8a03 	vldr	s16, [r4, #12]
 8003160:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	da14      	bge.n	8003194 <OpSampleCompute0+0x44>
		op->phase -= _2PI;

	z = sinf(op->phase);
 800316a:	eeb0 0a48 	vmov.f32	s0, s16
 800316e:	f003 fe65 	bl	8006e3c <sinf>
	op->out = op->amp*z;
 8003172:	edd4 7a00 	vldr	s15, [r4]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003176:	ed94 7a02 	vldr	s14, [r4, #8]
	op->out = op->amp*z;
 800317a:	ee20 0a27 	vmul.f32	s0, s0, s15
	op->phase += _2PI * Ts * op->freq; // increment phase
 800317e:	eddf 7a09 	vldr	s15, [pc, #36]	; 80031a4 <OpSampleCompute0+0x54>
	op->out = op->amp*z;
 8003182:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003186:	eea7 8a27 	vfma.f32	s16, s14, s15
 800318a:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 800318e:	ecbd 8b02 	vpop	{d8}
 8003192:	bd10      	pop	{r4, pc}
		op->phase -= _2PI;
 8003194:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003198:	ed84 8a03 	vstr	s16, [r4, #12]
 800319c:	e7de      	b.n	800315c <OpSampleCompute0+0xc>
 800319e:	bf00      	nop
 80031a0:	40c90fdb 	.word	0x40c90fdb
 80031a4:	39156592 	.word	0x39156592

080031a8 <Osc_WT_SINE_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_WT_SINE_SampleCompute(Oscillator_t * op) // basic wave table sine
{
 80031a8:	b510      	push	{r4, lr}
 80031aa:	ed2d 8b02 	vpush	{d8}
 80031ae:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003220 <Osc_WT_SINE_SampleCompute+0x78>
 80031b2:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 80031b4:	edd4 7a03 	vldr	s15, [r4, #12]
 80031b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d424      	bmi.n	800320c <Osc_WT_SINE_SampleCompute+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 80031c2:	edd4 7a03 	vldr	s15, [r4, #12]
 80031c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ce:	da22      	bge.n	8003216 <Osc_WT_SINE_SampleCompute+0x6e>
		op->phase -= _2PI;

	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 80031d0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003224 <Osc_WT_SINE_SampleCompute+0x7c>
 80031d4:	ed94 8a00 	vldr	s16, [r4]
 80031d8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80031dc:	f003 fd94 	bl	8006d08 <lrintf>
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <Osc_WT_SINE_SampleCompute+0x80>)
	op->phase += _2PI * Ts * op->freq; // increment phase
 80031e2:	edd4 7a03 	vldr	s15, [r4, #12]
 80031e6:	edd4 6a02 	vldr	s13, [r4, #8]
 80031ea:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800322c <Osc_WT_SINE_SampleCompute+0x84>
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 80031ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80031f2:	ed90 0a00 	vldr	s0, [r0]
 80031f6:	ee28 0a00 	vmul.f32	s0, s16, s0

	return op->out;
}
 80031fa:	ecbd 8b02 	vpop	{d8}
	op->phase += _2PI * Ts * op->freq; // increment phase
 80031fe:	eee6 7a87 	vfma.f32	s15, s13, s14
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8003202:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003206:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800320a:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 800320c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003210:	edc4 7a03 	vstr	s15, [r4, #12]
 8003214:	e7ce      	b.n	80031b4 <Osc_WT_SINE_SampleCompute+0xc>
		op->phase -= _2PI;
 8003216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800321a:	edc4 7a03 	vstr	s15, [r4, #12]
 800321e:	e7d0      	b.n	80031c2 <Osc_WT_SINE_SampleCompute+0x1a>
 8003220:	40c90fdb 	.word	0x40c90fdb
 8003224:	4322f983 	.word	0x4322f983
 8003228:	08015ea8 	.word	0x08015ea8
 800322c:	39156592 	.word	0x39156592

08003230 <Osc_FM_sine_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_FM_sine_SampleCompute(Oscillator_t * op, float FMinput) // basic wave table sine with FM
{

	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8003230:	edd0 7a05 	vldr	s15, [r0, #20]
 8003234:	ed90 7a02 	vldr	s14, [r0, #8]
 8003238:	ee20 0a27 	vmul.f32	s0, s0, s15
 800323c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80032b4 <Osc_FM_sine_SampleCompute+0x84>
 8003240:	eea7 0a27 	vfma.f32	s0, s14, s15
{
 8003244:	b510      	push	{r4, lr}
	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8003246:	edd0 7a03 	vldr	s15, [r0, #12]
 800324a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80032b8 <Osc_FM_sine_SampleCompute+0x88>
 800324e:	ee37 0a80 	vadd.f32	s0, s15, s0
{
 8003252:	ed2d 8b02 	vpush	{d8}
 8003256:	4604      	mov	r4, r0
	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8003258:	ed80 0a03 	vstr	s0, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 800325c:	edd4 7a03 	vldr	s15, [r4, #12]
 8003260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003268:	d41a      	bmi.n	80032a0 <Osc_FM_sine_SampleCompute+0x70>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800326a:	edd4 7a03 	vldr	s15, [r4, #12]
 800326e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	da18      	bge.n	80032aa <Osc_FM_sine_SampleCompute+0x7a>
		op->phase -= _2PI;
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8003278:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80032bc <Osc_FM_sine_SampleCompute+0x8c>
 800327c:	ed94 8a00 	vldr	s16, [r4]
 8003280:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003284:	f003 fd40 	bl	8006d08 <lrintf>
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <Osc_FM_sine_SampleCompute+0x90>)
 800328a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800328e:	ed90 0a00 	vldr	s0, [r0]
 8003292:	ee28 0a00 	vmul.f32	s0, s16, s0
	return op->out;
}
 8003296:	ecbd 8b02 	vpop	{d8}
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 800329a:	ed84 0a07 	vstr	s0, [r4, #28]
}
 800329e:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 80032a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032a4:	edc4 7a03 	vstr	s15, [r4, #12]
 80032a8:	e7d8      	b.n	800325c <Osc_FM_sine_SampleCompute+0x2c>
		op->phase -= _2PI;
 80032aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032ae:	edc4 7a03 	vstr	s15, [r4, #12]
 80032b2:	e7da      	b.n	800326a <Osc_FM_sine_SampleCompute+0x3a>
 80032b4:	39156592 	.word	0x39156592
 80032b8:	40c90fdb 	.word	0x40c90fdb
 80032bc:	4322f983 	.word	0x4322f983
 80032c0:	08015ea8 	.word	0x08015ea8

080032c4 <FM2_sampleCompute>:
{
 80032c4:	b510      	push	{r4, lr}
	op1.freq = frq;
 80032c6:	4c1c      	ldr	r4, [pc, #112]	; (8003338 <FM2_sampleCompute+0x74>)
	op2.freq = op2.mul * frq;
 80032c8:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
	op1.freq = frq;
 80032cc:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
	op2.freq = op2.mul * frq;
 80032d0:	ee67 7a80 	vmul.f32	s15, s15, s0
{
 80032d4:	ed2d 8b02 	vpush	{d8}
	op2.freq = op2.mul * frq;
 80032d8:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
	op3.freq = op3.mul * frq;
 80032dc:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 80032e0:	ed9f 8a16 	vldr	s16, [pc, #88]	; 800333c <FM2_sampleCompute+0x78>
	op3.freq = op3.mul * frq;
 80032e4:	ee67 7a80 	vmul.f32	s15, s15, s0
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 80032e8:	f104 0040 	add.w	r0, r4, #64	; 0x40
	op3.freq = op3.mul * frq;
 80032ec:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	op4.freq = op4.mul * frq;
 80032f0:	edd4 7a06 	vldr	s15, [r4, #24]
 80032f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80032f8:	ed84 0a02 	vstr	s0, [r4, #8]
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 80032fc:	eeb0 0a48 	vmov.f32	s0, s16
 8003300:	f7ff ff96 	bl	8003230 <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op1, in);
 8003304:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8003308:	f7ff ff92 	bl	8003230 <Osc_FM_sine_SampleCompute>
	in = Osc_FM_sine_SampleCompute(&op4, 0);
 800330c:	eeb0 0a48 	vmov.f32	s0, s16
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff ff8d 	bl	8003230 <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op3, in);
 8003316:	f104 0020 	add.w	r0, r4, #32
 800331a:	f7ff ff89 	bl	8003230 <Osc_FM_sine_SampleCompute>
}
 800331e:	ecbd 8b02 	vpop	{d8}
	return  0.5f * (op1.out + op3.out);
 8003322:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8003326:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 800332a:	ee77 7a80 	vadd.f32	s15, s15, s0
}
 800332e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003332:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003336:	bd10      	pop	{r4, pc}
 8003338:	20003db8 	.word	0x20003db8
 800333c:	00000000 	.word	0x00000000

08003340 <OpSampleCompute7bis>:
/*-------------------------------------------------------*/
float_t OpSampleCompute7bis(Oscillator_t * op) // basic wave table positive sine : 0 < output < op.amp
{
 8003340:	b510      	push	{r4, lr}
 8003342:	ed2d 8b02 	vpush	{d8}
 8003346:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80033c8 <OpSampleCompute7bis+0x88>
 800334a:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 800334c:	edd4 7a03 	vldr	s15, [r4, #12]
 8003350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003358:	d42c      	bmi.n	80033b4 <OpSampleCompute7bis+0x74>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800335a:	edd4 7a03 	vldr	s15, [r4, #12]
 800335e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	da2a      	bge.n	80033be <OpSampleCompute7bis+0x7e>
		op->phase -= _2PI;

	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8003368:	ed94 0a00 	vldr	s0, [r4]
 800336c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8003370:	ee20 8a08 	vmul.f32	s16, s0, s16
 8003374:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80033cc <OpSampleCompute7bis+0x8c>
 8003378:	ee27 0a80 	vmul.f32	s0, s15, s0
 800337c:	f003 fcc4 	bl	8006d08 <lrintf>
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <OpSampleCompute7bis+0x90>)
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003382:	edd4 6a02 	vldr	s13, [r4, #8]
 8003386:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80033d4 <OpSampleCompute7bis+0x94>
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 800338a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800338e:	ed90 0a00 	vldr	s0, [r0]
 8003392:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003396:	ee30 0a27 	vadd.f32	s0, s0, s15
	op->phase += _2PI * Ts * op->freq; // increment phase
 800339a:	edd4 7a03 	vldr	s15, [r4, #12]
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 800339e:	ee20 0a08 	vmul.f32	s0, s0, s16

	return op->out;
}
 80033a2:	ecbd 8b02 	vpop	{d8}
	op->phase += _2PI * Ts * op->freq; // increment phase
 80033a6:	eee6 7a87 	vfma.f32	s15, s13, s14
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 80033aa:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80033ae:	edc4 7a03 	vstr	s15, [r4, #12]
}
 80033b2:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 80033b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033b8:	edc4 7a03 	vstr	s15, [r4, #12]
 80033bc:	e7c6      	b.n	800334c <OpSampleCompute7bis+0xc>
		op->phase -= _2PI;
 80033be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033c2:	edc4 7a03 	vstr	s15, [r4, #12]
 80033c6:	e7c8      	b.n	800335a <OpSampleCompute7bis+0x1a>
 80033c8:	40c90fdb 	.word	0x40c90fdb
 80033cc:	4322f983 	.word	0x4322f983
 80033d0:	08015ea8 	.word	0x08015ea8
 80033d4:	39156592 	.word	0x39156592

080033d8 <OpSampleCompute1>:
/*-------------------------------------------------------*/
float_t OpSampleCompute1(Oscillator_t * op) // basic sawtooth^2
{
 80033d8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8003464 <OpSampleCompute1+0x8c>
	while (op->phase < 0) // keep phase in [0, 2pi]
 80033dc:	edd0 7a03 	vldr	s15, [r0, #12]
 80033e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	d431      	bmi.n	800344e <OpSampleCompute1+0x76>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 80033ea:	ed90 7a03 	vldr	s14, [r0, #12]
 80033ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80033f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f6:	da2f      	bge.n	8003458 <OpSampleCompute1+0x80>
 80033f8:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8003468 <OpSampleCompute1+0x90>
 80033fc:	edd0 7a00 	vldr	s15, [r0]
 8003400:	eec7 6a06 	vdiv.f32	s13, s14, s12
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8003404:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 800340c:	bf5b      	ittet	pl
 800340e:	eeb0 6a00 	vmovpl.f32	s12, #0	; 0x40000000  2.0
 8003412:	ee76 6ac6 	vsubpl.f32	s13, s13, s12
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8003416:	eeb6 6a00 	vmovmi.f32	s12, #96	; 0x3f000000  0.5
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 800341a:	ee66 7aa7 	vmulpl.f32	s15, s13, s15
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 800341e:	bf4b      	itete	mi
 8003420:	ee67 7a86 	vmulmi.f32	s15, s15, s12
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8003424:	ee67 7aa6 	vmulpl.f32	s15, s15, s13
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8003428:	ee67 7aa6 	vmulmi.f32	s15, s15, s13
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 800342c:	eefe 6a00 	vmovpl.f32	s13, #224	; 0xbf000000 -0.5
 8003430:	ee67 7aa6 	vmul.f32	s15, s15, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003434:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8003438:	edc0 7a07 	vstr	s15, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 800343c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800346c <OpSampleCompute1+0x94>
	return op->out;
}
 8003440:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003444:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003448:	ed80 7a03 	vstr	s14, [r0, #12]
}
 800344c:	4770      	bx	lr
		op->phase += _2PI;
 800344e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003452:	edc0 7a03 	vstr	s15, [r0, #12]
 8003456:	e7c1      	b.n	80033dc <OpSampleCompute1+0x4>
		op->phase -= _2PI;
 8003458:	ee37 7a66 	vsub.f32	s14, s14, s13
 800345c:	ed80 7a03 	vstr	s14, [r0, #12]
 8003460:	e7c3      	b.n	80033ea <OpSampleCompute1+0x12>
 8003462:	bf00      	nop
 8003464:	40c90fdb 	.word	0x40c90fdb
 8003468:	40490fdb 	.word	0x40490fdb
 800346c:	39156592 	.word	0x39156592

08003470 <OpSampleCompute2>:
/*-------------------------------------------------------*/
float_t OpSampleCompute2(Oscillator_t * op) // basic sawtooth
{
 8003470:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80034e8 <OpSampleCompute2+0x78>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003474:	edd0 7a03 	vldr	s15, [r0, #12]
 8003478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	d428      	bmi.n	80034d4 <OpSampleCompute2+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8003482:	edd0 7a03 	vldr	s15, [r0, #12]
 8003486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348e:	da26      	bge.n	80034de <OpSampleCompute2+0x6e>
 8003490:	ed9f 6a16 	vldr	s12, [pc, #88]	; 80034ec <OpSampleCompute2+0x7c>
 8003494:	ed90 7a00 	vldr	s14, [r0]
 8003498:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800349c:	ee67 6a26 	vmul.f32	s13, s14, s13
 80034a0:	ee87 7a86 	vdiv.f32	s14, s15, s12
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = 0.5f*op->amp * (op->phase / _PI);
 80034a4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80034a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 80034ac:	bf5c      	itt	pl
 80034ae:	eeb0 6a00 	vmovpl.f32	s12, #0	; 0x40000000  2.0
 80034b2:	ee37 7a46 	vsubpl.f32	s14, s14, s12
 80034b6:	ee27 7a26 	vmul.f32	s14, s14, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 80034ba:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 80034be:	ed80 7a07 	vstr	s14, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80034c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80034f0 <OpSampleCompute2+0x80>
	return op->out;
}
 80034c6:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80034ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80034ce:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80034d2:	4770      	bx	lr
		op->phase += _2PI;
 80034d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034d8:	edc0 7a03 	vstr	s15, [r0, #12]
 80034dc:	e7ca      	b.n	8003474 <OpSampleCompute2+0x4>
		op->phase -= _2PI;
 80034de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034e2:	edc0 7a03 	vstr	s15, [r0, #12]
 80034e6:	e7cc      	b.n	8003482 <OpSampleCompute2+0x12>
 80034e8:	40c90fdb 	.word	0x40c90fdb
 80034ec:	40490fdb 	.word	0x40490fdb
 80034f0:	39156592 	.word	0x39156592

080034f4 <OpSampleCompute3>:
/*-------------------------------------------------------*/
float_t OpSampleCompute3(Oscillator_t * op) // sin(phi)^5
{
 80034f4:	b510      	push	{r4, lr}
 80034f6:	ed2d 8b02 	vpush	{d8}
 80034fa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800356c <OpSampleCompute3+0x78>
 80034fe:	4604      	mov	r4, r0
	float_t z;

	while (op->phase < 0) // keep phase in [0, 2pi]
 8003500:	edd4 7a03 	vldr	s15, [r4, #12]
 8003504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	d423      	bmi.n	8003556 <OpSampleCompute3+0x62>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800350e:	ed94 8a03 	vldr	s16, [r4, #12]
 8003512:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8003516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351a:	da21      	bge.n	8003560 <OpSampleCompute3+0x6c>
		op->phase -= _2PI;

	z = sinf(op->phase);
 800351c:	eeb0 0a48 	vmov.f32	s0, s16
 8003520:	f003 fc8c 	bl	8006e3c <sinf>
	op->out = op->amp*z*z*z*z*z;
 8003524:	edd4 7a00 	vldr	s15, [r4]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003528:	ed94 7a02 	vldr	s14, [r4, #8]
	op->out = op->amp*z*z*z*z*z;
 800352c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003530:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003534:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003538:	ee67 7a80 	vmul.f32	s15, s15, s0
 800353c:	ee27 0a80 	vmul.f32	s0, s15, s0
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003540:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003570 <OpSampleCompute3+0x7c>
	op->out = op->amp*z*z*z*z*z;
 8003544:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003548:	eea7 8a27 	vfma.f32	s16, s14, s15
 800354c:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 8003550:	ecbd 8b02 	vpop	{d8}
 8003554:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8003556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800355a:	edc4 7a03 	vstr	s15, [r4, #12]
 800355e:	e7cf      	b.n	8003500 <OpSampleCompute3+0xc>
		op->phase -= _2PI;
 8003560:	ee38 8a47 	vsub.f32	s16, s16, s14
 8003564:	ed84 8a03 	vstr	s16, [r4, #12]
 8003568:	e7d1      	b.n	800350e <OpSampleCompute3+0x1a>
 800356a:	bf00      	nop
 800356c:	40c90fdb 	.word	0x40c90fdb
 8003570:	39156592 	.word	0x39156592

08003574 <OpSampleCompute5>:

	return op->out;
}
/*-------------------------------------------------------*/
float_t OpSampleCompute5(Oscillator_t * op) // Naive Triangle
{
 8003574:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80035ec <OpSampleCompute5+0x78>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003578:	edd0 7a03 	vldr	s15, [r0, #12]
 800357c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003584:	d428      	bmi.n	80035d8 <OpSampleCompute5+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8003586:	edd0 7a03 	vldr	s15, [r0, #12]
 800358a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	da26      	bge.n	80035e2 <OpSampleCompute5+0x6e>
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 8003594:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80035f0 <OpSampleCompute5+0x7c>
 8003598:	edd0 6a00 	vldr	s13, [r0]
 800359c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a4:	bf4b      	itete	mi
 80035a6:	ed9f 6a13 	vldrmi	s12, [pc, #76]	; 80035f4 <OpSampleCompute5+0x80>
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 80035aa:	ed9f 6a13 	vldrpl	s12, [pc, #76]	; 80035f8 <OpSampleCompute5+0x84>
	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 80035ae:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 80035b2:	eeb8 7a08 	vmovpl.f32	s14, #136	; 0xc0400000 -3.0
 80035b6:	eea7 7a86 	vfma.f32	s14, s15, s12
 80035ba:	ee27 7a26 	vmul.f32	s14, s14, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 80035be:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 80035c2:	ed80 7a07 	vstr	s14, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80035c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80035fc <OpSampleCompute5+0x88>
	return op->out;
}
 80035ca:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80035ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80035d2:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80035d6:	4770      	bx	lr
		op->phase += _2PI;
 80035d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035dc:	edc0 7a03 	vstr	s15, [r0, #12]
 80035e0:	e7ca      	b.n	8003578 <OpSampleCompute5+0x4>
		op->phase -= _2PI;
 80035e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035e6:	edc0 7a03 	vstr	s15, [r0, #12]
 80035ea:	e7cc      	b.n	8003586 <OpSampleCompute5+0x12>
 80035ec:	40c90fdb 	.word	0x40c90fdb
 80035f0:	40490fdb 	.word	0x40490fdb
 80035f4:	bf22f983 	.word	0xbf22f983
 80035f8:	3f22f983 	.word	0x3f22f983
 80035fc:	39156592 	.word	0x39156592

08003600 <MorphingSaw_SampleCompute>:
/*-------------------------------------------------------*/
float_t MorphingSaw_SampleCompute(Oscillator_t * op) // Morphing sawtooth, tends to a triangle at high freqs
{
 8003600:	eddf 6a32 	vldr	s13, [pc, #200]	; 80036cc <MorphingSaw_SampleCompute+0xcc>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003604:	edd0 7a03 	vldr	s15, [r0, #12]
 8003608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003610:	d441      	bmi.n	8003696 <MorphingSaw_SampleCompute+0x96>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8003612:	edd0 7a03 	vldr	s15, [r0, #12]
 8003616:	eef4 7ae6 	vcmpe.f32	s15, s13
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361e:	da3f      	bge.n	80036a0 <MorphingSaw_SampleCompute+0xa0>
		op->phase -= _2PI;

	if (op->freq < 8000) op->phi0 = _PI/8000*(op->freq); else op->phi0 = _PI;
 8003620:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80036d0 <MorphingSaw_SampleCompute+0xd0>
 8003624:	edd0 5a02 	vldr	s11, [r0, #8]
 8003628:	ed90 5a00 	vldr	s10, [r0]
 800362c:	eef4 5ac7 	vcmpe.f32	s11, s14
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	bf4d      	iteet	mi
 8003636:	ed9f 7a27 	vldrmi	s14, [pc, #156]	; 80036d4 <MorphingSaw_SampleCompute+0xd4>
 800363a:	4b27      	ldrpl	r3, [pc, #156]	; (80036d8 <MorphingSaw_SampleCompute+0xd8>)
 800363c:	6103      	strpl	r3, [r0, #16]
 800363e:	ee25 7a87 	vmulmi.f32	s14, s11, s14
 8003642:	bf48      	it	mi
 8003644:	ed80 7a04 	vstrmi	s14, [r0, #16]
	if (op->phi0 <= .0001f) op->phi0 = .0001f;
 8003648:	ed90 6a04 	vldr	s12, [r0, #16]
 800364c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80036dc <MorphingSaw_SampleCompute+0xdc>
 8003650:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8003654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003658:	bf98      	it	ls
 800365a:	ed80 7a04 	vstrls	s14, [r0, #16]
	if (op->phase < op->phi0) op->out = op->amp * (-2/op->phi0 * op->phase + 1);
 800365e:	ed90 6a04 	vldr	s12, [r0, #16]
 8003662:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366a:	d51e      	bpl.n	80036aa <MorphingSaw_SampleCompute+0xaa>
 800366c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003670:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003678:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800367c:	ee27 7a05 	vmul.f32	s14, s14, s10
 8003680:	ed80 7a07 	vstr	s14, [r0, #28]
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003684:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80036e0 <MorphingSaw_SampleCompute+0xe0>
	return op->out;
}
 8003688:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 800368c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8003690:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8003694:	4770      	bx	lr
		op->phase += _2PI;
 8003696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369a:	edc0 7a03 	vstr	s15, [r0, #12]
 800369e:	e7b1      	b.n	8003604 <MorphingSaw_SampleCompute+0x4>
		op->phase -= _2PI;
 80036a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80036a4:	edc0 7a03 	vstr	s15, [r0, #12]
 80036a8:	e7b3      	b.n	8003612 <MorphingSaw_SampleCompute+0x12>
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);
 80036aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80036e4 <MorphingSaw_SampleCompute+0xe4>
 80036ae:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80036b2:	eea7 7aa4 	vfma.f32	s14, s15, s9
 80036b6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80036ba:	ee37 7a46 	vsub.f32	s14, s14, s12
 80036be:	ee27 7a05 	vmul.f32	s14, s14, s10
 80036c2:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80036c6:	ed80 6a07 	vstr	s12, [r0, #28]
 80036ca:	e7db      	b.n	8003684 <MorphingSaw_SampleCompute+0x84>
 80036cc:	40c90fdb 	.word	0x40c90fdb
 80036d0:	45fa0000 	.word	0x45fa0000
 80036d4:	39cde32e 	.word	0x39cde32e
 80036d8:	40490fdb 	.word	0x40490fdb
 80036dc:	38d1b717 	.word	0x38d1b717
 80036e0:	39156592 	.word	0x39156592
 80036e4:	c0c90fdb 	.word	0xc0c90fdb

080036e8 <Drifters_sampleCompute>:
{
 80036e8:	b538      	push	{r3, r4, r5, lr}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 80036ea:	4823      	ldr	r0, [pc, #140]	; (8003778 <Drifters_sampleCompute+0x90>)
 80036ec:	4d23      	ldr	r5, [pc, #140]	; (800377c <Drifters_sampleCompute+0x94>)
	op->freq = f;
 80036ee:	4c24      	ldr	r4, [pc, #144]	; (8003780 <Drifters_sampleCompute+0x98>)
{
 80036f0:	ed2d 8b02 	vpush	{d8}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 80036f4:	f7ff fa62 	bl	8002bbc <drifter_nextSample>
 80036f8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80036fc:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003700:	edd5 7a00 	vldr	s15, [r5]
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 8003704:	481f      	ldr	r0, [pc, #124]	; (8003784 <Drifters_sampleCompute+0x9c>)
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 8003706:	eeb3 8a09 	vmov.f32	s16, #57	; 0x41c80000  25.0
 800370a:	eeb0 7a48 	vmov.f32	s14, s16
 800370e:	eea0 7a27 	vfma.f32	s14, s0, s15
	op->freq = f;
 8003712:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 8003716:	f7ff fa51 	bl	8002bbc <drifter_nextSample>
 800371a:	edd5 7a00 	vldr	s15, [r5]
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 800371e:	481a      	ldr	r0, [pc, #104]	; (8003788 <Drifters_sampleCompute+0xa0>)
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 8003720:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003724:	eeb0 7a48 	vmov.f32	s14, s16
 8003728:	eea0 7a27 	vfma.f32	s14, s0, s15
	op->freq = f;
 800372c:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 8003730:	f7ff fa44 	bl	8002bbc <drifter_nextSample>
 8003734:	edd5 7a00 	vldr	s15, [r5]
 8003738:	ee30 0a28 	vadd.f32	s0, s0, s17
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800373c:	f104 0060 	add.w	r0, r4, #96	; 0x60
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 8003740:	eea0 8a27 	vfma.f32	s16, s0, s15
	op->freq = f;
 8003744:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003748:	f7ff ff5a 	bl	8003600 <MorphingSaw_SampleCompute>
 800374c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003750:	eeb0 4a40 	vmov.f32	s8, s0
 8003754:	f7ff ff54 	bl	8003600 <MorphingSaw_SampleCompute>
 8003758:	f104 0020 	add.w	r0, r4, #32
 800375c:	ee34 4a00 	vadd.f32	s8, s8, s0
 8003760:	f7ff ff4e 	bl	8003600 <MorphingSaw_SampleCompute>
}
 8003764:	ecbd 8b02 	vpop	{d8}
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003768:	ee34 0a00 	vadd.f32	s0, s8, s0
}
 800376c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800378c <Drifters_sampleCompute+0xa4>
 8003770:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003774:	bd38      	pop	{r3, r4, r5, pc}
 8003776:	bf00      	nop
 8003778:	20003d8c 	.word	0x20003d8c
 800377c:	20000084 	.word	0x20000084
 8003780:	20003db8 	.word	0x20003db8
 8003784:	20003d60 	.word	0x20003d60
 8003788:	20003d34 	.word	0x20003d34
 800378c:	3ea8f5c3 	.word	0x3ea8f5c3

08003790 <AdditiveGen_newWaveform>:
	op->phase += _2PI * Ts * op->freq; // increment phase
	return op->out;
}
/*-------------------------------------------------------*/
void AdditiveGen_newWaveform(void) //
{
 8003790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t k;

	a[0] = a[1] = 1;
 8003794:	4c1a      	ldr	r4, [pc, #104]	; (8003800 <AdditiveGen_newWaveform+0x70>)
{
 8003796:	ed2d 8b04 	vpush	{d8-d9}
	a[0] = a[1] = 1;
 800379a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	ph[0] = ph[1] = 0;
 800379e:	2200      	movs	r2, #0

	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
	{
		a[k] = frand_a_b(0.001f , 0.98f);
 80037a0:	ed9f 9a18 	vldr	s18, [pc, #96]	; 8003804 <AdditiveGen_newWaveform+0x74>
 80037a4:	eddf 8a18 	vldr	s17, [pc, #96]	; 8003808 <AdditiveGen_newWaveform+0x78>
	a[0] = a[1] = 1;
 80037a8:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 80037ac:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
	ph[0] = ph[1] = 0;
 80037b0:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80037b4:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 80037b8:	f104 0688 	add.w	r6, r4, #136	; 0x88
 80037bc:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
 80037c0:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 80037c4:	eeb0 8a67 	vmov.f32	s16, s15
 80037c8:	4615      	mov	r5, r2
		a[k] = frand_a_b(0.001f , 0.98f);
 80037ca:	eef0 0a49 	vmov.f32	s1, s18
 80037ce:	eeb0 0a68 	vmov.f32	s0, s17
 80037d2:	f000 fa6d 	bl	8003cb0 <frand_a_b>
 80037d6:	eca6 0a01 	vstmia	r6!, {s0}
		a[0] += a[k];
 80037da:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
		ph[k] = 0;
 80037de:	f847 5b04 	str.w	r5, [r7], #4
		a[0] += a[k];
 80037e2:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 80037e6:	4546      	cmp	r6, r8
		a[0] += a[k];
 80037e8:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 80037ec:	d1ed      	bne.n	80037ca <AdditiveGen_newWaveform+0x3a>
	}
	a[0] = 1.f / a[0];
 80037ee:	eec8 7a00 	vdiv.f32	s15, s16, s0
}
 80037f2:	ecbd 8b04 	vpop	{d8-d9}
	a[0] = 1.f / a[0];
 80037f6:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
}
 80037fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037fe:	bf00      	nop
 8003800:	20003db8 	.word	0x20003db8
 8003804:	3f7ae148 	.word	0x3f7ae148
 8003808:	3a83126f 	.word	0x3a83126f

0800380c <AdditiveGen_SampleCompute>:
/*-------------------------------------------------------*/
float_t AdditiveGen_SampleCompute(Oscillator_t * op) // additive sine generator
{
 800380c:	b530      	push	{r4, r5, lr}
 800380e:	4c27      	ldr	r4, [pc, #156]	; (80038ac <AdditiveGen_SampleCompute+0xa0>)
	uint8_t k = 1;
	float_t y = 0;
 8003810:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80038b0 <AdditiveGen_SampleCompute+0xa4>

	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003814:	eddf 5a27 	vldr	s11, [pc, #156]	; 80038b4 <AdditiveGen_SampleCompute+0xa8>
	{
		//while (ph[k] < 0) // keep phase in [0, 2pi]
		//	ph[k] += _2PI;
		while (ph[k] >= _2PI)
 8003818:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80038b8 <AdditiveGen_SampleCompute+0xac>
			ph[k] -= _2PI;
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 800381c:	4d27      	ldr	r5, [pc, #156]	; (80038bc <AdditiveGen_SampleCompute+0xb0>)
 800381e:	ed9f 5a28 	vldr	s10, [pc, #160]	; 80038c0 <AdditiveGen_SampleCompute+0xb4>
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 8003822:	eddf 4a28 	vldr	s9, [pc, #160]	; 80038c4 <AdditiveGen_SampleCompute+0xb8>
 8003826:	f104 012c 	add.w	r1, r4, #44	; 0x2c
{
 800382a:	2201      	movs	r2, #1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 800382c:	ee07 2a90 	vmov	s15, r2
 8003830:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003834:	edd0 7a02 	vldr	s15, [r0, #8]
 8003838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800383c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003844:	d404      	bmi.n	8003850 <AdditiveGen_SampleCompute+0x44>
 8003846:	e024      	b.n	8003892 <AdditiveGen_SampleCompute+0x86>
			ph[k] -= _2PI;
 8003848:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800384c:	edc1 7a00 	vstr	s15, [r1]
		while (ph[k] >= _2PI)
 8003850:	edd1 7a00 	vldr	s15, [r1]
 8003854:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	daf4      	bge.n	8003848 <AdditiveGen_SampleCompute+0x3c>
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 800385e:	ee27 7a85 	vmul.f32	s14, s15, s10
 8003862:	ecb4 4a01 	vldmia	r4!, {s8}
 8003866:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 800386a:	ee66 6aa4 	vmul.f32	s13, s13, s9
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 800386e:	ee17 3a10 	vmov	r3, s14
 8003872:	b29b      	uxth	r3, r3
 8003874:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003878:	ed93 7a00 	vldr	s14, [r3]
 800387c:	eea4 0a07 	vfma.f32	s0, s8, s14
 8003880:	3201      	adds	r2, #1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003882:	2a0b      	cmp	r2, #11
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 8003884:	ed90 7a02 	vldr	s14, [r0, #8]
 8003888:	eee6 7a87 	vfma.f32	s15, s13, s14
 800388c:	ece1 7a01 	vstmia	r1!, {s15}
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003890:	d1cc      	bne.n	800382c <AdditiveGen_SampleCompute+0x20>
		k++;
	}
	y = a[0] * y;
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <AdditiveGen_SampleCompute+0xbc>)
 8003894:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003898:	ee20 0a27 	vmul.f32	s0, s0, s15

	op->out = op->amp * y;
 800389c:	edd0 7a00 	vldr	s15, [r0]
 80038a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80038a4:	ed80 0a07 	vstr	s0, [r0, #28]

	return op->out;
}
 80038a8:	bd30      	pop	{r4, r5, pc}
 80038aa:	bf00      	nop
 80038ac:	20003e3c 	.word	0x20003e3c
 80038b0:	00000000 	.word	0x00000000
 80038b4:	46ac4400 	.word	0x46ac4400
 80038b8:	40c90fdb 	.word	0x40c90fdb
 80038bc:	08015ea8 	.word	0x08015ea8
 80038c0:	4322f983 	.word	0x4322f983
 80038c4:	39156592 	.word	0x39156592
 80038c8:	20003db8 	.word	0x20003db8
 80038cc:	00000000 	.word	0x00000000

080038d0 <waveCompute>:

/*-------------------------------------------------------------------------------------------------------------------*/

float waveCompute(uint8_t sound, float frq)
{
 80038d0:	b510      	push	{r4, lr}
	op->freq = f;
 80038d2:	4c6f      	ldr	r4, [pc, #444]	; (8003a90 <waveCompute+0x1c0>)
{
 80038d4:	ed2d 8b02 	vpush	{d8}
	op->freq = f;
 80038d8:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
{
 80038dc:	eeb0 8a40 	vmov.f32	s16, s0

	OpSetFreq(&op1, frq);


	/* choose waveform generator */
	switch (sound)
 80038e0:	280f      	cmp	r0, #15
 80038e2:	f200 80ce 	bhi.w	8003a82 <waveCompute+0x1b2>
 80038e6:	e8df f000 	tbb	[pc, r0]
 80038ea:	1008      	.short	0x1008
 80038ec:	45625e32 	.word	0x45625e32
 80038f0:	7469554c 	.word	0x7469554c
 80038f4:	b7a8a587 	.word	0xb7a8a587
 80038f8:	c3bd      	.short	0xc3bd
	{
	case MORPH_SAW : 	y = 0.8f * MorphingSaw_SampleCompute(&op1); 		break ;
 80038fa:	4866      	ldr	r0, [pc, #408]	; (8003a94 <waveCompute+0x1c4>)
 80038fc:	f7ff fe80 	bl	8003600 <MorphingSaw_SampleCompute>
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;

	case BLEPSQUARE : 		mbRectOsc.freq = frq;
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;

	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 8003900:	eddf 7a65 	vldr	s15, [pc, #404]	; 8003a98 <waveCompute+0x1c8>

	case VOICES3 :	{ // 3 slightly detuned oscillators with drifters

		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003904:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 8003908:	e031      	b.n	800396e <waveCompute+0x9e>
		if (frq < 200) y =  OpSampleCompute1(&op1);
 800390a:	eddf 7a64 	vldr	s15, [pc, #400]	; 8003a9c <waveCompute+0x1cc>
 800390e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003916:	d506      	bpl.n	8003926 <waveCompute+0x56>
		y = 0;	break ;

	}

	return y;
}
 8003918:	ecbd 8b02 	vpop	{d8}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 800391c:	485d      	ldr	r0, [pc, #372]	; (8003a94 <waveCompute+0x1c4>)
}
 800391e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 8003922:	f7ff bd59 	b.w	80033d8 <OpSampleCompute1>
		else if (frq < 600) y = OpSampleCompute2(&op1);
 8003926:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8003aa0 <waveCompute+0x1d0>
 800392a:	485a      	ldr	r0, [pc, #360]	; (8003a94 <waveCompute+0x1c4>)
 800392c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	d505      	bpl.n	8003942 <waveCompute+0x72>
}
 8003936:	ecbd 8b02 	vpop	{d8}
 800393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else if (frq < 600) y = OpSampleCompute2(&op1);
 800393e:	f7ff bd97 	b.w	8003470 <OpSampleCompute2>
}
 8003942:	ecbd 8b02 	vpop	{d8}
 8003946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else y = OpSampleCompute5(&op1);
 800394a:	f7ff be13 	b.w	8003574 <OpSampleCompute5>
	case ACC_SINE : 		y = 0.8 * OpSampleCompute0(&op1); 		break;
 800394e:	4851      	ldr	r0, [pc, #324]	; (8003a94 <waveCompute+0x1c4>)
 8003950:	f7ff fbfe 	bl	8003150 <OpSampleCompute0>
 8003954:	ee10 0a10 	vmov	r0, s0
 8003958:	f7fc fd9a 	bl	8000490 <__aeabi_f2d>
 800395c:	a34a      	add	r3, pc, #296	; (adr r3, 8003a88 <waveCompute+0x1b8>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f7fc fded 	bl	8000540 <__aeabi_dmul>
 8003966:	f7fd f885 	bl	8000a74 <__aeabi_d2f>
 800396a:	ee00 0a10 	vmov	s0, r0
}
 800396e:	ecbd 8b02 	vpop	{d8}
 8003972:	bd10      	pop	{r4, pc}
 8003974:	ecbd 8b02 	vpop	{d8}
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 8003978:	4846      	ldr	r0, [pc, #280]	; (8003a94 <waveCompute+0x1c4>)
}
 800397a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 800397e:	f7ff bdb9 	b.w	80034f4 <OpSampleCompute3>
}
 8003982:	ecbd 8b02 	vpop	{d8}
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 8003986:	4847      	ldr	r0, [pc, #284]	; (8003aa4 <waveCompute+0x1d4>)
}
 8003988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 800398c:	ed80 0a03 	vstr	s0, [r0, #12]
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;
 8003990:	f7fe bb32 	b.w	8001ff8 <VCO_bleptri_SampleCompute>
}
 8003994:	ecbd 8b02 	vpop	{d8}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 8003998:	4843      	ldr	r0, [pc, #268]	; (8003aa8 <waveCompute+0x1d8>)
}
 800399a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 800399e:	ed80 0a03 	vstr	s0, [r0, #12]
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;
 80039a2:	f7fe b931 	b.w	8001c08 <VCO_bleprect_SampleCompute>
	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 80039a6:	483b      	ldr	r0, [pc, #236]	; (8003a94 <waveCompute+0x1c4>)
 80039a8:	f7ff fbfe 	bl	80031a8 <Osc_WT_SINE_SampleCompute>
 80039ac:	e7a8      	b.n	8003900 <waveCompute+0x30>
}
 80039ae:	ecbd 8b02 	vpop	{d8}
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 80039b2:	4838      	ldr	r0, [pc, #224]	; (8003a94 <waveCompute+0x1c4>)
}
 80039b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 80039b8:	f7ff bf28 	b.w	800380c <AdditiveGen_SampleCompute>
	case NOISE : 			y = op1.amp * frand_a_b(-.8f , .8f);	break; // noise !
 80039bc:	eddf 0a36 	vldr	s1, [pc, #216]	; 8003a98 <waveCompute+0x1c8>
 80039c0:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8003aac <waveCompute+0x1dc>
 80039c4:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 80039c8:	f000 f972 	bl	8003cb0 <frand_a_b>
 80039cc:	ee28 0a00 	vmul.f32	s0, s16, s0
 80039d0:	e7cd      	b.n	800396e <waveCompute+0x9e>
		OpSetFreq(&op2, frq * 1.50f);
 80039d2:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80039d6:	ee28 8a00 	vmul.f32	s16, s16, s0
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 80039da:	482e      	ldr	r0, [pc, #184]	; (8003a94 <waveCompute+0x1c4>)
	op->freq = f;
 80039dc:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 80039e0:	f7ff fe0e 	bl	8003600 <MorphingSaw_SampleCompute>
 80039e4:	4832      	ldr	r0, [pc, #200]	; (8003ab0 <waveCompute+0x1e0>)
 80039e6:	eeb0 4a40 	vmov.f32	s8, s0
 80039ea:	f7ff fe09 	bl	8003600 <MorphingSaw_SampleCompute>
 80039ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80039f2:	ee34 0a00 	vadd.f32	s0, s8, s0
 80039f6:	e785      	b.n	8003904 <waveCompute+0x34>
		OpSetFreq(&op2, frq * 1.26f);
 80039f8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8003ab4 <waveCompute+0x1e4>
		OpSetFreq(&op2, frq * 1.1892f);
 80039fc:	ee68 7a27 	vmul.f32	s15, s16, s15
		OpSetFreq(&op3, frq * 1.5f);
 8003a00:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
	op->freq = f;
 8003a04:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 8003a08:	ee20 8a08 	vmul.f32	s16, s0, s16
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003a0c:	4821      	ldr	r0, [pc, #132]	; (8003a94 <waveCompute+0x1c4>)
	op->freq = f;
 8003a0e:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003a12:	f7ff fdf5 	bl	8003600 <MorphingSaw_SampleCompute>
 8003a16:	4826      	ldr	r0, [pc, #152]	; (8003ab0 <waveCompute+0x1e0>)
 8003a18:	eeb0 4a40 	vmov.f32	s8, s0
 8003a1c:	f7ff fdf0 	bl	8003600 <MorphingSaw_SampleCompute>
 8003a20:	4825      	ldr	r0, [pc, #148]	; (8003ab8 <waveCompute+0x1e8>)
 8003a22:	ee34 4a00 	vadd.f32	s8, s8, s0
 8003a26:	f7ff fdeb 	bl	8003600 <MorphingSaw_SampleCompute>
 8003a2a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003abc <waveCompute+0x1ec>
 8003a2e:	ee34 0a00 	vadd.f32	s0, s8, s0
 8003a32:	e767      	b.n	8003904 <waveCompute+0x34>
		OpSetFreq(&op2, frq * 1.1892f);
 8003a34:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003ac0 <waveCompute+0x1f0>
 8003a38:	e7e0      	b.n	80039fc <waveCompute+0x12c>
		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
 8003a3a:	f7ff f8dd 	bl	8002bf8 <d1_drifter_nextSample>
 8003a3e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8003a42:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003a46:	ee20 0a08 	vmul.f32	s0, s0, s16
	op->freq = f;
 8003a4a:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 8003a4e:	f7ff f8d9 	bl	8002c04 <d2_drifter_nextSample>
 8003a52:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003a56:	e7d7      	b.n	8003a08 <waveCompute+0x138>
}
 8003a58:	ecbd 8b02 	vpop	{d8}
 8003a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case DRIFTERS : 	y = Drifters_sampleCompute(); break;
 8003a60:	f7ff be42 	b.w	80036e8 <Drifters_sampleCompute>
}
 8003a64:	ecbd 8b02 	vpop	{d8}
 8003a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case FM2 : 			y = FM2_sampleCompute(frq); break;
 8003a6c:	f7ff bc2a 	b.w	80032c4 <FM2_sampleCompute>
}
 8003a70:	ecbd 8b02 	vpop	{d8}
		mbSawOsc.freq = frq;
 8003a74:	4813      	ldr	r0, [pc, #76]	; (8003ac4 <waveCompute+0x1f4>)
}
 8003a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mbSawOsc.freq = frq;
 8003a7a:	ed80 0a03 	vstr	s0, [r0, #12]
		y = VCO_blepsaw_SampleCompute(&mbSawOsc);
 8003a7e:	f7fd bfcf 	b.w	8001a20 <VCO_blepsaw_SampleCompute>
		y = 0;	break ;
 8003a82:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003ac8 <waveCompute+0x1f8>
	return y;
 8003a86:	e772      	b.n	800396e <waveCompute+0x9e>
 8003a88:	9999999a 	.word	0x9999999a
 8003a8c:	3fe99999 	.word	0x3fe99999
 8003a90:	20003db8 	.word	0x20003db8
 8003a94:	20003e18 	.word	0x20003e18
 8003a98:	3f4ccccd 	.word	0x3f4ccccd
 8003a9c:	43480000 	.word	0x43480000
 8003aa0:	44160000 	.word	0x44160000
 8003aa4:	20000124 	.word	0x20000124
 8003aa8:	2000067c 	.word	0x2000067c
 8003aac:	bf4ccccd 	.word	0xbf4ccccd
 8003ab0:	20003df8 	.word	0x20003df8
 8003ab4:	3fa147ae 	.word	0x3fa147ae
 8003ab8:	20003dd8 	.word	0x20003dd8
 8003abc:	3ea8f5c3 	.word	0x3ea8f5c3
 8003ac0:	3f9837b5 	.word	0x3f9837b5
 8003ac4:	20000bd8 	.word	0x20000bd8
 8003ac8:	00000000 	.word	0x00000000

08003acc <PhaserInit>:
void PhaserInit(void)
{
	f_min = 200.f;
	f_max = 1700.f;
	swrate = 0.1f;
	fb = 0.7f;
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <PhaserInit+0x20>)
 8003ace:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <PhaserInit+0x24>)
 8003ad0:	601a      	str	r2, [r3, #0]
	wet = 0.3f;
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <PhaserInit+0x28>)
 8003ad4:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <PhaserInit+0x2c>)
 8003ad6:	601a      	str	r2, [r3, #0]

	dmin = 2 * f_min / SAMPLERATE;
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <PhaserInit+0x30>)
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <PhaserInit+0x34>)
 8003adc:	601a      	str	r2, [r3, #0]
	dmax = 2 * f_max / SAMPLERATE;
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <PhaserInit+0x38>)
 8003ae0:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <PhaserInit+0x3c>)
 8003ae2:	601a      	str	r2, [r3, #0]
	lfoInc = _2PI * swrate / SAMPLERATE;
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <PhaserInit+0x40>)
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <PhaserInit+0x44>)
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	4770      	bx	lr
 8003aec:	20012a74 	.word	0x20012a74
 8003af0:	3f333333 	.word	0x3f333333
 8003af4:	20012a98 	.word	0x20012a98
 8003af8:	3e99999a 	.word	0x3e99999a
 8003afc:	20012a70 	.word	0x20012a70
 8003b00:	3c149b93 	.word	0x3c149b93
 8003b04:	20012a6c 	.word	0x20012a6c
 8003b08:	3d9de54c 	.word	0x3d9de54c
 8003b0c:	20012a78 	.word	0x20012a78
 8003b10:	376f08eb 	.word	0x376f08eb

08003b14 <Phaser_Rate_set>:
/*---------------------------------------------------------------------*/
void Phaser_Rate_set(uint8_t val)
{
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 8003b14:	ee07 0a90 	vmov	s15, r0
 8003b18:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003b40 <Phaser_Rate_set+0x2c>
	lfoInc = _2PI * swrate / SAMPLERATE;
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <Phaser_Rate_set+0x30>)
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 8003b1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b22:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003b48 <Phaser_Rate_set+0x34>
 8003b26:	eee6 7a87 	vfma.f32	s15, s13, s14
	lfoInc = _2PI * swrate / SAMPLERATE;
 8003b2a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003b4c <Phaser_Rate_set+0x38>
 8003b2e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003b50 <Phaser_Rate_set+0x3c>
 8003b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b3a:	ed83 7a00 	vstr	s14, [r3]
}
 8003b3e:	4770      	bx	lr
 8003b40:	3d611e66 	.word	0x3d611e66
 8003b44:	20012a78 	.word	0x20012a78
 8003b48:	3ca3d70a 	.word	0x3ca3d70a
 8003b4c:	40c90fdb 	.word	0x40c90fdb
 8003b50:	472c4400 	.word	0x472c4400

08003b54 <Phaser_Feedback_set>:
/*---------------------------------------------------------------------*/
void Phaser_Feedback_set(uint8_t val)
{
	fb = 0.999f * val / MIDI_MAX;
 8003b54:	ee07 0a90 	vmov	s15, r0
 8003b58:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003b74 <Phaser_Feedback_set+0x20>
 8003b5c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003b78 <Phaser_Feedback_set+0x24>
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <Phaser_Feedback_set+0x28>)
 8003b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b6e:	ed83 7a00 	vstr	s14, [r3]
}
 8003b72:	4770      	bx	lr
 8003b74:	3f7fbe77 	.word	0x3f7fbe77
 8003b78:	42fe0000 	.word	0x42fe0000
 8003b7c:	20012a74 	.word	0x20012a74

08003b80 <Phaser_Wet_set>:
/*---------------------------------------------------------------------*/
void Phaser_Wet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 8003b80:	ee07 0a90 	vmov	s15, r0
 8003b84:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003b98 <Phaser_Wet_set+0x18>
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <Phaser_Wet_set+0x1c>)
 8003b8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b92:	edc3 7a00 	vstr	s15, [r3]
}
 8003b96:	4770      	bx	lr
 8003b98:	42fe0000 	.word	0x42fe0000
 8003b9c:	20012a98 	.word	0x20012a98

08003ba0 <Phaser_compute>:
	return yout;
}

/*---------------------------------------------------------------------*/
float Phaser_compute(float xin)
{
 8003ba0:	b510      	push	{r4, lr}
	int i;
	float d;

	//calculate and update phaser sweep lfo...

	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003ba2:	4c37      	ldr	r4, [pc, #220]	; (8003c80 <Phaser_compute+0xe0>)
 8003ba4:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <Phaser_compute+0xe4>)
{
 8003ba6:	ed2d 8b04 	vpush	{d8-d9}
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003baa:	ed94 8a00 	vldr	s16, [r4]
 8003bae:	edd3 8a00 	vldr	s17, [r3]
 8003bb2:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <Phaser_compute+0xe8>)
{
 8003bb4:	eef0 9a40 	vmov.f32	s19, s0
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003bb8:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8003c8c <Phaser_compute+0xec>
 8003bbc:	ed93 9a00 	vldr	s18, [r3]
 8003bc0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003bc4:	f003 f8a0 	bl	8006d08 <lrintf>
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <Phaser_compute+0xf0>)
	//update filter coeffs
	a1 = (1.f - d) / (1.f + d);

	//calculate output

	yout = allpass(xin + zm1 * fb, 0);
 8003bca:	4932      	ldr	r1, [pc, #200]	; (8003c94 <Phaser_compute+0xf4>)
	yout = - yin * a1 + old[ind];
 8003bcc:	4a32      	ldr	r2, [pc, #200]	; (8003c98 <Phaser_compute+0xf8>)
	yout = allpass(xin + zm1 * fb, 0);
 8003bce:	ed91 6a00 	vldr	s12, [r1]
	yout = - yin * a1 + old[ind];
 8003bd2:	ed92 0a00 	vldr	s0, [r2]
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003bd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003bda:	ed90 7a00 	vldr	s14, [r0]
	lfoPhase += lfoInc;
 8003bde:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <Phaser_compute+0xfc>)
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003be0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003bec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003bf0:	ee39 9a68 	vsub.f32	s18, s18, s17
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003bf4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003ca0 <Phaser_compute+0x100>
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003bf8:	eee9 8a07 	vfma.f32	s17, s18, s14
	lfoPhase += lfoInc;
 8003bfc:	ed93 7a00 	vldr	s14, [r3]
	a1 = (1.f - d) / (1.f + d);
 8003c00:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <Phaser_compute+0x104>)
	lfoPhase += lfoInc;
 8003c02:	ee38 7a07 	vadd.f32	s14, s16, s14
	yout = allpass(xin + zm1 * fb, 0);
 8003c06:	eef0 5a69 	vmov.f32	s11, s19
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003c0a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c12:	bfa8      	it	ge
 8003c14:	ee37 7a66 	vsubge.f32	s14, s14, s13
	a1 = (1.f - d) / (1.f + d);
 8003c18:	ee77 6ae8 	vsub.f32	s13, s15, s17
 8003c1c:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003c20:	ed84 7a00 	vstr	s14, [r4]
	a1 = (1.f - d) / (1.f + d);
 8003c24:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 8003c28:	ed83 7a00 	vstr	s14, [r3]
	yout = allpass(xin + zm1 * fb, 0);
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <Phaser_compute+0x108>)
 8003c2e:	edd3 6a00 	vldr	s13, [r3]
 8003c32:	eee6 5a26 	vfma.f32	s11, s12, s13
	old[ind] = yout * a1 + yin;
 8003c36:	4613      	mov	r3, r2
 8003c38:	3218      	adds	r2, #24
	yout = - yin * a1 + old[ind];
 8003c3a:	eea5 0ac7 	vfms.f32	s0, s11, s14
	yout = allpass(xin + zm1 * fb, 0);
 8003c3e:	eef0 6a65 	vmov.f32	s13, s11
	old[ind] = yout * a1 + yin;
 8003c42:	eee7 6a00 	vfma.f32	s13, s14, s0
 8003c46:	ece3 6a01 	vstmia	r3!, {s13}
	yout = - yin * a1 + old[ind];
 8003c4a:	edd3 6a00 	vldr	s13, [r3]
 8003c4e:	eee0 6a47 	vfms.f32	s13, s0, s14
	old[ind] = yout * a1 + yin;
 8003c52:	eea7 0a26 	vfma.f32	s0, s14, s13
 8003c56:	eca3 0a01 	vstmia	r3!, {s0}

	for(i = 1; i < PH_STAGES; i++)
 8003c5a:	429a      	cmp	r2, r3
	yout = - yin * a1 + old[ind];
 8003c5c:	eeb0 0a66 	vmov.f32	s0, s13
	for(i = 1; i < PH_STAGES; i++)
 8003c60:	d1f3      	bne.n	8003c4a <Phaser_compute+0xaa>
	{
		yout = allpass(yout, i);
	}
	zm1 = yout;

	yout = (1 - wet) * xin + wet * yout;
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <Phaser_compute+0x10c>)
	zm1 = yout;
 8003c64:	edc1 6a00 	vstr	s13, [r1]
	yout = (1 - wet) * xin + wet * yout;
 8003c68:	ed93 7a00 	vldr	s14, [r3]
 8003c6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c70:	ee27 0a26 	vmul.f32	s0, s14, s13

	return yout;
}
 8003c74:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8003c78:	ecbd 8b04 	vpop	{d8-d9}
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	bf00      	nop
 8003c80:	20012a7c 	.word	0x20012a7c
 8003c84:	20012a70 	.word	0x20012a70
 8003c88:	20012a6c 	.word	0x20012a6c
 8003c8c:	4322f983 	.word	0x4322f983
 8003c90:	08015ea8 	.word	0x08015ea8
 8003c94:	20012a9c 	.word	0x20012a9c
 8003c98:	20012a80 	.word	0x20012a80
 8003c9c:	20012a78 	.word	0x20012a78
 8003ca0:	40c90fdb 	.word	0x40c90fdb
 8003ca4:	20012a68 	.word	0x20012a68
 8003ca8:	20012a74 	.word	0x20012a74
 8003cac:	20012a98 	.word	0x20012a98

08003cb0 <frand_a_b>:
//---------------------------------------------------------------------------
/**************
 * returns a random float between a and b
 *****************/
float_t frand_a_b(float_t a, float_t b)
{
 8003cb0:	b508      	push	{r3, lr}
 8003cb2:	ed2d 8b02 	vpush	{d8}
 8003cb6:	eef0 8a40 	vmov.f32	s17, s0
 8003cba:	eeb0 8a60 	vmov.f32	s16, s1
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 8003cbe:	f004 fa3f 	bl	8008140 <rand>
 8003cc2:	ee78 0a68 	vsub.f32	s1, s16, s17
}
 8003cc6:	eeb0 0a68 	vmov.f32	s0, s17
 8003cca:	ecbd 8b02 	vpop	{d8}
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 8003cce:	ee07 0a90 	vmov	s15, r0
 8003cd2:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
}
 8003cd6:	eea7 0aa0 	vfma.f32	s0, s15, s1
 8003cda:	bd08      	pop	{r3, pc}

08003cdc <MIDIrandVal>:
/*-----------------------------------------------------------------------------*/
/**************
 * returns a random integer between 0 and MIDI_MAX
 *****************/
uint8_t MIDIrandVal(void)
{
 8003cdc:	b508      	push	{r3, lr}
	return (uint8_t)lrintf(frand_a_b(0 , MIDI_MAX));
 8003cde:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003cf4 <MIDIrandVal+0x18>
 8003ce2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003cf8 <MIDIrandVal+0x1c>
 8003ce6:	f7ff ffe3 	bl	8003cb0 <frand_a_b>
 8003cea:	f003 f80d 	bl	8006d08 <lrintf>
}
 8003cee:	b2c0      	uxtb	r0, r0
 8003cf0:	bd08      	pop	{r3, pc}
 8003cf2:	bf00      	nop
 8003cf4:	42fe0000 	.word	0x42fe0000
 8003cf8:	00000000 	.word	0x00000000

08003cfc <SVF_setReso>:

/****************************************************************************************************************/

void SVF_setReso(ResonantFilter* filter, float feedback)
{
	filter->q = 1-feedback;
 8003cfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003d00:	ee37 0ac0 	vsub.f32	s0, s15, s0
	if(filter->q < 0.01f) filter->q = 0.01f;
 8003d04:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003d1c <SVF_setReso+0x20>
 8003d08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	filter->q = 1-feedback;
 8003d10:	bf58      	it	pl
 8003d12:	eef0 7a40 	vmovpl.f32	s15, s0
 8003d16:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8003d1a:	4770      	bx	lr
 8003d1c:	3c23d70a 	.word	0x3c23d70a

08003d20 <SVF_setDrive>:
{
#if USE_SHAPER_NONLINEARITY
	filter->drive = drive;
	setDistortionShape(&filter->shaper, filter->drive);
#else
	filter->drive =  /*  0.4f +  */ (drive/MIDI_MAX)*(drive/MIDI_MAX)*6; // the output can be muted (at 0)
 8003d20:	ee07 1a90 	vmov	s15, r1
 8003d24:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003d44 <SVF_setDrive+0x24>
 8003d28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d30:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003d34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d3c:	edc0 7a06 	vstr	s15, [r0, #24]
#endif

}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	42fe0000 	.word	0x42fe0000

08003d48 <SVF_directSetFilterValue>:
//------------------------------------------------------------------------------------
void SVF_directSetFilterValue(ResonantFilter* filter, float val) // 0 < val < 1
{
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	ed2d 8b02 	vpush	{d8}
	if (val > 0.95) val = 0.95f;
 8003d50:	ee10 0a10 	vmov	r0, s0
{
 8003d54:	eeb0 8a40 	vmov.f32	s16, s0
	if (val > 0.95) val = 0.95f;
 8003d58:	f7fc fb9a 	bl	8000490 <__aeabi_f2d>
 8003d5c:	a310      	add	r3, pc, #64	; (adr r3, 8003da0 <SVF_directSetFilterValue+0x58>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f7fc fe7d 	bl	8000a60 <__aeabi_dcmpgt>
 8003d66:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003d98 <SVF_directSetFilterValue+0x50>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	bf18      	it	ne
 8003d6e:	eeb0 8a67 	vmovne.f32	s16, s15
	filter->f = val*0.5f;
 8003d72:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003d76:	ee28 8a00 	vmul.f32	s16, s16, s0
	filter->g  = fastTan(_PI * filter->f );
 8003d7a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003d9c <SVF_directSetFilterValue+0x54>
	filter->f = val*0.5f;
 8003d7e:	ed84 8a01 	vstr	s16, [r4, #4]
	filter->g  = fastTan(_PI * filter->f );
 8003d82:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003d86:	f7ff f98b 	bl	80030a0 <fastTan>

}
 8003d8a:	ecbd 8b02 	vpop	{d8}
	filter->g  = fastTan(_PI * filter->f );
 8003d8e:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8003d92:	bd10      	pop	{r4, pc}
 8003d94:	f3af 8000 	nop.w
 8003d98:	3f733333 	.word	0x3f733333
 8003d9c:	40490fdb 	.word	0x40490fdb
 8003da0:	66666666 	.word	0x66666666
 8003da4:	3fee6666 	.word	0x3fee6666

08003da8 <SVF_initialize>:
{
 8003da8:	b538      	push	{r3, r4, r5, lr}
	filter->type = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	7003      	strb	r3, [r0, #0]
	filter->f = 0.20f;
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <SVF_initialize+0x28>)
 8003db0:	6043      	str	r3, [r0, #4]
	filter->q = 0.9f;
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <SVF_initialize+0x2c>)
 8003db4:	60c3      	str	r3, [r0, #12]
	filter->s1 = 0;
 8003db6:	2500      	movs	r5, #0
{
 8003db8:	4604      	mov	r4, r0
	filter->drive = 0.4f;
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <SVF_initialize+0x30>)
	filter->s1 = 0;
 8003dbc:	6105      	str	r5, [r0, #16]
	filter->s2 = 0;
 8003dbe:	6145      	str	r5, [r0, #20]
	filter->drive = 0.4f;
 8003dc0:	6183      	str	r3, [r0, #24]
	SVF_directSetFilterValue(filter,0.25f);
 8003dc2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8003dc6:	f7ff ffbf 	bl	8003d48 <SVF_directSetFilterValue>
	filter->zi = 0;	//input z^(-1)
 8003dca:	61e5      	str	r5, [r4, #28]
}
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	3e4ccccd 	.word	0x3e4ccccd
 8003dd4:	3f666666 	.word	0x3f666666
 8003dd8:	3ecccccd 	.word	0x3ecccccd

08003ddc <SVF_init>:
//=====================================================================================================
void SVF_init(void)
{
 8003ddc:	b510      	push	{r4, lr}
	SVF_initialize(&SVFilter);
 8003dde:	4c05      	ldr	r4, [pc, #20]	; (8003df4 <SVF_init+0x18>)
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff ffe1 	bl	8003da8 <SVF_initialize>
	SVF_initialize(&SVFilter2);
 8003de6:	f104 0020 	add.w	r0, r4, #32
}
 8003dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SVF_initialize(&SVFilter2);
 8003dee:	f7ff bfdb 	b.w	8003da8 <SVF_initialize>
 8003df2:	bf00      	nop
 8003df4:	20003f10 	.word	0x20003f10

08003df8 <Filter1Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter1Freq_set(uint8_t val)
{
 8003df8:	b508      	push	{r3, lr}
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003dfa:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003e20 <Filter1Freq_set+0x28>
 8003dfe:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003e24 <Filter1Freq_set+0x2c>
 8003e02:	f7ff f8e3 	bl	8002fcc <Lin2Exp>
 8003e06:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003e28 <Filter1Freq_set+0x30>
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <Filter1Freq_set+0x34>)
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003e0c:	4808      	ldr	r0, [pc, #32]	; (8003e30 <Filter1Freq_set+0x38>)
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003e0e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003e12:	ed83 0a00 	vstr	s0, [r3]
}
 8003e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003e1a:	f7ff bf95 	b.w	8003d48 <SVF_directSetFilterValue>
 8003e1e:	bf00      	nop
 8003e20:	45fa0000 	.word	0x45fa0000
 8003e24:	42a00000 	.word	0x42a00000
 8003e28:	472c4400 	.word	0x472c4400
 8003e2c:	20013c40 	.word	0x20013c40
 8003e30:	20003f10 	.word	0x20003f10

08003e34 <Filter1Res_set>:
//------------------------------------------------------------------------------------
void 	Filter1Res_set(uint8_t val)
{
	SVF_setReso(&SVFilter, val / MIDI_MAX);
 8003e34:	ee07 0a90 	vmov	s15, r0
 8003e38:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003e3c:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003e4c <Filter1Res_set+0x18>
 8003e40:	4803      	ldr	r0, [pc, #12]	; (8003e50 <Filter1Res_set+0x1c>)
 8003e42:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003e46:	f7ff bf59 	b.w	8003cfc <SVF_setReso>
 8003e4a:	bf00      	nop
 8003e4c:	42fe0000 	.word	0x42fe0000
 8003e50:	20003f10 	.word	0x20003f10

08003e54 <Filter1Drive_set>:
}
//------------------------------------------------------------------------------------
void	Filter1Drive_set(uint8_t val)
{
	SVF_setDrive(&SVFilter, val);
 8003e54:	4601      	mov	r1, r0
 8003e56:	4801      	ldr	r0, [pc, #4]	; (8003e5c <Filter1Drive_set+0x8>)
 8003e58:	f7ff bf62 	b.w	8003d20 <SVF_setDrive>
 8003e5c:	20003f10 	.word	0x20003f10

08003e60 <Filter1Type_set>:
}
//------------------------------------------------------------------------------------
void 	Filter1Type_set(uint8_t val)
{
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003e60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e64:	ee07 0a90 	vmov	s15, r0
 8003e68:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003e6c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003e80 <Filter1Type_set+0x20>
{
 8003e70:	b508      	push	{r3, lr}
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003e72:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003e76:	f002 ff47 	bl	8006d08 <lrintf>
 8003e7a:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <Filter1Type_set+0x24>)
 8003e7c:	7018      	strb	r0, [r3, #0]
}
 8003e7e:	bd08      	pop	{r3, pc}
 8003e80:	42fe0000 	.word	0x42fe0000
 8003e84:	20003f10 	.word	0x20003f10

08003e88 <Filter2Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter2Freq_set(uint8_t val)
{
 8003e88:	b508      	push	{r3, lr}
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003e8a:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003eb0 <Filter2Freq_set+0x28>
 8003e8e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003eb4 <Filter2Freq_set+0x2c>
 8003e92:	f7ff f89b 	bl	8002fcc <Lin2Exp>
 8003e96:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003eb8 <Filter2Freq_set+0x30>
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <Filter2Freq_set+0x34>)
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 8003e9c:	4808      	ldr	r0, [pc, #32]	; (8003ec0 <Filter2Freq_set+0x38>)
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003e9e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003ea2:	ed83 0a00 	vstr	s0, [r3]
}
 8003ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 8003eaa:	f7ff bf4d 	b.w	8003d48 <SVF_directSetFilterValue>
 8003eae:	bf00      	nop
 8003eb0:	45fa0000 	.word	0x45fa0000
 8003eb4:	42a00000 	.word	0x42a00000
 8003eb8:	472c4400 	.word	0x472c4400
 8003ebc:	20013c44 	.word	0x20013c44
 8003ec0:	20003f30 	.word	0x20003f30

08003ec4 <Filter2Res_set>:
//------------------------------------------------------------------------------------
void 	Filter2Res_set(uint8_t val)
{
	SVF_setReso(&SVFilter2, val / MIDI_MAX);
 8003ec4:	ee07 0a90 	vmov	s15, r0
 8003ec8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003ecc:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003edc <Filter2Res_set+0x18>
 8003ed0:	4803      	ldr	r0, [pc, #12]	; (8003ee0 <Filter2Res_set+0x1c>)
 8003ed2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003ed6:	f7ff bf11 	b.w	8003cfc <SVF_setReso>
 8003eda:	bf00      	nop
 8003edc:	42fe0000 	.word	0x42fe0000
 8003ee0:	20003f30 	.word	0x20003f30

08003ee4 <Filter2Drive_set>:
}
//------------------------------------------------------------------------------------
void	Filter2Drive_set(uint8_t val)
{
	SVF_setDrive(&SVFilter2, val);
 8003ee4:	4601      	mov	r1, r0
 8003ee6:	4801      	ldr	r0, [pc, #4]	; (8003eec <Filter2Drive_set+0x8>)
 8003ee8:	f7ff bf1a 	b.w	8003d20 <SVF_setDrive>
 8003eec:	20003f30 	.word	0x20003f30

08003ef0 <Filter2Type_set>:
}
//------------------------------------------------------------------------------------
void 	Filter2Type_set(uint8_t val)
{
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003ef0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ef4:	ee07 0a90 	vmov	s15, r0
 8003ef8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003efc:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003f14 <Filter2Type_set+0x24>
{
 8003f00:	b508      	push	{r3, lr}
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003f02:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003f06:	f002 feff 	bl	8006d08 <lrintf>
 8003f0a:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <Filter2Type_set+0x28>)
 8003f0c:	f883 0020 	strb.w	r0, [r3, #32]
}
 8003f10:	bd08      	pop	{r3, pc}
 8003f12:	bf00      	nop
 8003f14:	42fe0000 	.word	0x42fe0000
 8003f18:	20003f10 	.word	0x20003f10

08003f1c <SVF_calcSample>:

//------------------------------------------------------------------------------------

float SVF_calcSample(ResonantFilter* filter, float in)
{
 8003f1c:	b510      	push	{r4, lr}
	const float f 	= filter->g;
	//fix unstable filter for high f and r settings
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003f1e:	ed90 7a01 	vldr	s14, [r0, #4]
 8003f22:	eddf 7a66 	vldr	s15, [pc, #408]	; 80040bc <SVF_calcSample+0x1a0>
{
 8003f26:	ed2d 8b0c 	vpush	{d8-d13}
 8003f2a:	eeb0 8a40 	vmov.f32	s16, s0


#if USE_SHAPER_NONLINEARITY
	const float x = (buf[i]/((float)0x7fff));
#else
	const float x = softClipTwo( in * filter->drive);
 8003f2e:	ed90 0a06 	vldr	s0, [r0, #24]
	const float f 	= filter->g;
 8003f32:	edd0 8a02 	vldr	s17, [r0, #8]
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3e:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	const float x = softClipTwo( in * filter->drive);
 8003f42:	ee28 0a00 	vmul.f32	s0, s16, s0
{
 8003f46:	4604      	mov	r4, r0
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003f48:	bfb4      	ite	lt
 8003f4a:	ed90 aa03 	vldrlt	s20, [r0, #12]
 8003f4e:	eeb0 aa6b 	vmovge.f32	s20, s23
	const float x = softClipTwo( in * filter->drive);
 8003f52:	f7ff f899 	bl	8003088 <softClipTwo>
#endif

#if ENABLE_NONLINEAR_INTEGRATORS
	// input with half sample delay, for non-linearities
	float ih = 0.5f * (x + filter->zi);
 8003f56:	edd4 7a07 	vldr	s15, [r4, #28]
	filter->zi = x;
 8003f5a:	ed84 0a07 	vstr	s0, [r4, #28]
	const float x = softClipTwo( in * filter->drive);
 8003f5e:	eeb0 ca40 	vmov.f32	s24, s0
	float ih = 0.5f * (x + filter->zi);
 8003f62:	ee70 7a27 	vadd.f32	s15, s0, s15
		You can trivially remove any saturator by setting the corresponding gain t0,...,t1 to 1. Also, you can simply scale any saturator (i.e. change clipping threshold) to 1/a*tanh(a*x) by writing
		double t1 = tanhXdX(a*s[0]);
	 */
#if ENABLE_NONLINEAR_INTEGRATORS
	const float scale = 0.5f;
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 8003f66:	ee7a ca0a 	vadd.f32	s25, s20, s20
 8003f6a:	ed94 0a04 	vldr	s0, [r4, #16]
 8003f6e:	ee20 0a6c 	vnmul.f32	s0, s0, s25
 8003f72:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8003f76:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8003f7a:	edd4 7a05 	vldr	s15, [r4, #20]
 8003f7e:	ee30 0a67 	vsub.f32	s0, s0, s15
	const float ff 	= f*f;
 8003f82:	ee28 9aa8 	vmul.f32	s18, s17, s17
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 8003f86:	ee20 0a29 	vmul.f32	s0, s0, s19
 8003f8a:	f7ff f837 	bl	8002ffc <tanhXdX>
 8003f8e:	eef0 aa40 	vmov.f32	s21, s0
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 8003f92:	ed94 0a04 	vldr	s0, [r4, #16]
 8003f96:	ee20 0a29 	vmul.f32	s0, s0, s19
 8003f9a:	f7ff f82f 	bl	8002ffc <tanhXdX>
	const float t0 = 1;
	const float t1 = 1;
#endif

	// g# the denominators for solutions of individual stages
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003f9e:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8003fa2:	eeb0 7a6b 	vmov.f32	s14, s23
 8003fa6:	ee77 7aa7 	vadd.f32	s15, s15, s15
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 8003faa:	eeb0 da40 	vmov.f32	s26, s0
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003fae:	eea7 7a8a 	vfma.f32	s14, s15, s20

	const float s1 = filter->s1;
 8003fb2:	ed94 0a04 	vldr	s0, [r4, #16]
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003fb6:	eecb da87 	vdiv.f32	s27, s23, s14
	const float s2 = filter->s2;

	// solve feedback
	const float f1 = ff*g0*t0*t1;
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003fba:	ed94 7a05 	vldr	s14, [r4, #20]
	const float f1 = ff*g0*t0*t1;
 8003fbe:	ee69 7a2d 	vmul.f32	s15, s18, s27
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003fc2:	ee68 6aad 	vmul.f32	s13, s17, s27
	const float f1 = ff*g0*t0*t1;
 8003fc6:	ee67 7aaa 	vmul.f32	s15, s15, s21
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003fca:	ee66 6a8d 	vmul.f32	s13, s13, s26
	const float f1 = ff*g0*t0*t1;
 8003fce:	ee67 7a8d 	vmul.f32	s15, s15, s26
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003fd2:	eeac 7a27 	vfma.f32	s14, s24, s15
 8003fd6:	ee77 7aab 	vadd.f32	s15, s15, s23
 8003fda:	eea6 7a80 	vfma.f32	s14, s13, s0
 8003fde:	eec7 9a27 	vdiv.f32	s19, s14, s15


	// solve the remaining stages with nonlinear gain
	const float xx = t0*(x - y1);
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003fe2:	f7ff f851 	bl	8003088 <softClipTwo>
	const float xx = t0*(x - y1);
 8003fe6:	ee3c ba69 	vsub.f32	s22, s24, s19
 8003fea:	ee2b ba2a 	vmul.f32	s22, s22, s21
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003fee:	eea8 0a8b 	vfma.f32	s0, s17, s22
 8003ff2:	ee60 da2d 	vmul.f32	s27, s0, s27

	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003ff6:	ed94 0a04 	vldr	s0, [r4, #16]
 8003ffa:	f7ff f845 	bl	8003088 <softClipTwo>
 8003ffe:	ee7a aaaa 	vadd.f32	s21, s21, s21
 8004002:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8004006:	ee2a aa6a 	vnmul.f32	s20, s20, s21
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 800400a:	edd4 7a05 	vldr	s15, [r4, #20]

	float out;


	switch(filter->type)
 800400e:	7823      	ldrb	r3, [r4, #0]
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8004010:	eeaa ba2d 	vfma.f32	s22, s20, s27
	switch(filter->type)
 8004014:	3b01      	subs	r3, #1
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8004016:	eea8 0a8b 	vfma.f32	s0, s17, s22
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 800401a:	ee68 8a8d 	vmul.f32	s17, s17, s26
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 800401e:	ed84 0a04 	vstr	s0, [r4, #16]
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8004022:	eee8 7aad 	vfma.f32	s15, s17, s27
 8004026:	edc4 7a05 	vstr	s15, [r4, #20]
	switch(filter->type)
 800402a:	2b04      	cmp	r3, #4
 800402c:	d80a      	bhi.n	8004044 <SVF_calcSample+0x128>
 800402e:	e8df f003 	tbb	[pc, r3]
 8004032:	1c03      	.short	0x1c03
 8004034:	2c27      	.short	0x2c27
 8004036:	35          	.byte	0x35
 8004037:	00          	.byte	0x00
	case FILTER_LP:
#if USE_SHAPER_NONLINEARITY

		buf[i] = FILTER_GAIN * fastTanh( distortion_calcSampleFloat(&filter->shaper, y1));
#else
		out = fastTanh(y1) ;
 8004038:	eeb0 0a69 	vmov.f32	s0, s19
 800403c:	f7fe fffc 	bl	8003038 <fastTanh>
 8004040:	eeb0 8a40 	vmov.f32	s16, s0
	default:
		out = in ;
		break;
	}

	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 8004044:	eeb4 8aeb 	vcmpe.f32	s16, s23
 8004048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404c:	dc33      	bgt.n	80040b6 <SVF_calcSample+0x19a>
	out = (out < -1.0f) ? -1.0f : out;
 800404e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004052:	eeb4 8a67 	vcmp.f32	s16, s15
 8004056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405a:	bf48      	it	mi
 800405c:	eeb0 8a67 	vmovmi.f32	s16, s15

	return out;

}
 8004060:	eeb0 0a48 	vmov.f32	s0, s16
 8004064:	ecbd 8b0c 	vpop	{d8-d13}
 8004068:	bd10      	pop	{r4, pc}
		const float h = x - ugb - y1;
 800406a:	eeb0 0a4c 	vmov.f32	s0, s24
 800406e:	eeac 0aed 	vfms.f32	s0, s25, s27
		out = h * FILTER_GAIN_F;
 8004072:	eddf 7a13 	vldr	s15, [pc, #76]	; 80040c0 <SVF_calcSample+0x1a4>
		const float h = x - ugb - y1;
 8004076:	ee30 8a69 	vsub.f32	s16, s0, s19
		out = h * FILTER_GAIN_F;
 800407a:	ee28 8a27 	vmul.f32	s16, s16, s15
	break;
 800407e:	e7e1      	b.n	8004044 <SVF_calcSample+0x128>
		out = y0 * FILTER_GAIN_F;
 8004080:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 80040c0 <SVF_calcSample+0x1a4>
 8004084:	ee2d 8a88 	vmul.f32	s16, s27, s16
		break;
 8004088:	e7dc      	b.n	8004044 <SVF_calcSample+0x128>
		out = (x-ugb) * FILTER_GAIN_F;
 800408a:	eeb0 0a4c 	vmov.f32	s0, s24
 800408e:	eeac 0aed 	vfms.f32	s0, s25, s27
 8004092:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80040c0 <SVF_calcSample+0x1a4>
 8004096:	ee20 8a27 	vmul.f32	s16, s0, s15
	break;
 800409a:	e7d3      	b.n	8004044 <SVF_calcSample+0x128>
		const float h = x - ugb - y1;
 800409c:	eeb0 0a4c 	vmov.f32	s0, s24
 80040a0:	eeac 0aed 	vfms.f32	s0, s25, s27
		out = (y1-h) * FILTER_GAIN_F;
 80040a4:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80040c0 <SVF_calcSample+0x1a4>
		const float h = x - ugb - y1;
 80040a8:	ee30 0a69 	vsub.f32	s0, s0, s19
		out = (y1-h) * FILTER_GAIN_F;
 80040ac:	ee39 0ac0 	vsub.f32	s0, s19, s0
 80040b0:	ee20 8a08 	vmul.f32	s16, s0, s16
	break;
 80040b4:	e7c6      	b.n	8004044 <SVF_calcSample+0x128>
	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 80040b6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80040ba:	e7d1      	b.n	8004060 <SVF_calcSample+0x144>
 80040bc:	3ee6594b 	.word	0x3ee6594b
 80040c0:	3f6147ae 	.word	0x3f6147ae

080040c4 <seq_tempo_set>:
Sequencer_t seq _CCM_;
NoteGenerator_t noteGen _CCM_;

/*--------------------------------------------------------------------------------------------*/
void seq_tempo_set(uint8_t val) {
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 80040c4:	ee07 0a90 	vmov	s15, r0
 80040c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040cc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80040fc <seq_tempo_set+0x38>
 80040d0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004100 <seq_tempo_set+0x3c>
 80040d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80040dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
void seq_tempo_set(uint8_t val) {
 80040e0:	b510      	push	{r4, lr}
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 80040e2:	4c08      	ldr	r4, [pc, #32]	; (8004104 <seq_tempo_set+0x40>)
 80040e4:	ee77 7a80 	vadd.f32	s15, s15, s0
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 80040e8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004108 <seq_tempo_set+0x44>
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 80040ec:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 80040f0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80040f4:	f002 fe08 	bl	8006d08 <lrintf>
 80040f8:	6460      	str	r0, [r4, #68]	; 0x44
	//seq.smp_count = seq.steptime;
}
 80040fa:	bd10      	pop	{r4, pc}
 80040fc:	44480000 	.word	0x44480000
 8004100:	42fe0000 	.word	0x42fe0000
 8004104:	20003f50 	.word	0x20003f50
 8004108:	4a217fc0 	.word	0x4a217fc0

0800410c <seq_gateTime_set>:
/*-------------------------------------------------------*/
void seq_gateTime_set(uint8_t val) // val is a number of samples
{
	seq.gateTime = seq.steptime * ((0.9f - 0.1f) * val / MIDI_MAX + 0.1f); // from 10% to 90% of each step duration
 800410c:	ee07 0a90 	vmov	s15, r0
 8004110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004114:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004144 <seq_gateTime_set+0x38>
 8004118:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004148 <seq_gateTime_set+0x3c>
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <seq_gateTime_set+0x40>)
 800411e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004126:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004150 <seq_gateTime_set+0x44>
 800412a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800412e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8004132:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8004142:	4770      	bx	lr
 8004144:	3f4ccccc 	.word	0x3f4ccccc
 8004148:	42fe0000 	.word	0x42fe0000
 800414c:	20003f50 	.word	0x20003f50
 8004150:	3dcccccd 	.word	0x3dcccccd

08004154 <seq_chooseScale>:
		noteGen.transpose = -2;
	}
}

/*-------------------------------------------------------*/
void seq_chooseScale(int16_t idx) {
 8004154:	b280      	uxth	r0, r0
 8004156:	280e      	cmp	r0, #14
 8004158:	bf96      	itet	ls
 800415a:	4b05      	ldrls	r3, [pc, #20]	; (8004170 <seq_chooseScale+0x1c>)
 800415c:	4a05      	ldrhi	r2, [pc, #20]	; (8004174 <seq_chooseScale+0x20>)
 800415e:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
		break;
	default:
		currentScale = (uint8_t*) MIDIscale11;
		break;
	}
	noteGen.currentScale = currentScale;
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <seq_chooseScale+0x24>)
 8004164:	659a      	str	r2, [r3, #88]	; 0x58
	noteGen.chRequested = true;
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	08015e6c 	.word	0x08015e6c
 8004174:	08015ca3 	.word	0x08015ca3
 8004178:	20003f50 	.word	0x20003f50

0800417c <seq_scale_set>:
		seq_chooseScale(noteGen.scaleIndex);
	}
}
/*-------------------------------------------------------*/
void seq_scale_set(uint8_t val) {
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 800417c:	ee07 0a90 	vmov	s15, r0
 8004180:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004184:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80041b0 <seq_scale_set+0x34>
void seq_scale_set(uint8_t val) {
 8004188:	b507      	push	{r0, r1, r2, lr}
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 800418a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800418e:	f002 fdfb 	bl	8006d88 <rintf>
 8004192:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <seq_scale_set+0x38>)
 8004198:	edcd 7a01 	vstr	s15, [sp, #4]
 800419c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80041a0:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	seq_chooseScale(noteGen.scaleIndex);
}
 80041a4:	b003      	add	sp, #12
 80041a6:	f85d eb04 	ldr.w	lr, [sp], #4
	seq_chooseScale(noteGen.scaleIndex);
 80041aa:	f7ff bfd3 	b.w	8004154 <seq_chooseScale>
 80041ae:	bf00      	nop
 80041b0:	3de1c387 	.word	0x3de1c387
 80041b4:	20003f50 	.word	0x20003f50

080041b8 <seq_switchMovingSeq>:
	else
		noteGen.automaticON = true;
}
/*-------------------------------------------------------*/
void seq_switchMovingSeq(uint8_t val) {
	if (val > 63)
 80041b8:	283f      	cmp	r0, #63	; 0x3f
 80041ba:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <seq_switchMovingSeq+0x10>)
		noteGen.automaticON = true;
 80041bc:	bf8c      	ite	hi
 80041be:	2201      	movhi	r2, #1
	else
		noteGen.automaticON = false;
 80041c0:	2200      	movls	r2, #0
 80041c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
}
 80041c6:	4770      	bx	lr
 80041c8:	20003f50 	.word	0x20003f50

080041cc <seq_switchMute>:
	else
		noteGen.someNotesMuted = true;
}
/*-------------------------------------------------------*/
void seq_switchMute(uint8_t val) {
	switch (val) {
 80041cc:	b130      	cbz	r0, 80041dc <seq_switchMute+0x10>
 80041ce:	287f      	cmp	r0, #127	; 0x7f
 80041d0:	d107      	bne.n	80041e2 <seq_switchMute+0x16>
	case MIDI_MAXi:
		noteGen.someNotesMuted = true;
 80041d2:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <seq_switchMute+0x18>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		break;
 80041da:	4770      	bx	lr
	case 0:
		noteGen.someNotesMuted = false;
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <seq_switchMute+0x18>)
 80041de:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
		break;
	}
}
 80041e2:	4770      	bx	lr
 80041e4:	20003f50 	.word	0x20003f50

080041e8 <seq_freqMax_set>:
		//pitchGenChangePoints();
	}
}
/*-------------------------------------------------------*/
void seq_freqMax_set(uint8_t val) {
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 80041e8:	ee07 0a90 	vmov	s15, r0
 80041ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004218 <seq_freqMax_set+0x30>
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <seq_freqMax_set+0x34>)
 80041f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void seq_freqMax_set(uint8_t val) {
 80041f6:	b082      	sub	sp, #8
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 80041f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004200:	edcd 7a01 	vstr	s15, [sp, #4]
 8004204:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004208:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
	noteGen.chRequested = true;
 800420c:	2301      	movs	r3, #1
 800420e:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
}
 8004212:	b002      	add	sp, #8
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	3d810204 	.word	0x3d810204
 800421c:	20003f50 	.word	0x20003f50

08004220 <seq_sequence_new>:

/*--------------------------------------------------------------------------------------------*/
void seq_sequence_new(void) {
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int16_t relativeNote;
	int16_t octaveShift;
	int16_t index;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		relativeNote = noteGen.currentScale[lrintf(
 8004222:	4d1d      	ldr	r5, [pc, #116]	; (8004298 <seq_sequence_new+0x78>)
void seq_sequence_new(void) {
 8004224:	ed2d 8b02 	vpush	{d8}
				frand_a_b(1, noteGen.currentScale[0]))];
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8004228:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 800429c <seq_sequence_new+0x7c>
void seq_sequence_new(void) {
 800422c:	2400      	movs	r4, #0
 800422e:	462f      	mov	r7, r5
		relativeNote = noteGen.currentScale[lrintf(
 8004230:	6dae      	ldr	r6, [r5, #88]	; 0x58
 8004232:	7833      	ldrb	r3, [r6, #0]
 8004234:	ee00 3a90 	vmov	s1, r3
 8004238:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800423c:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8004240:	f7ff fd36 	bl	8003cb0 <frand_a_b>
 8004244:	f002 fd60 	bl	8006d08 <lrintf>
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8004248:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
		relativeNote = noteGen.currentScale[lrintf(
 800424c:	5c36      	ldrb	r6, [r6, r0]
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 800424e:	ee00 3a90 	vmov	s1, r3
 8004252:	eeb0 0a48 	vmov.f32	s0, s16
 8004256:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800425a:	f7ff fd29 	bl	8003cb0 <frand_a_b>
 800425e:	f002 fd53 	bl	8006d08 <lrintf>
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 8004262:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8004266:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 800426a:	3b15      	subs	r3, #21
 800426c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004270:	4430      	add	r0, r6
 8004272:	b200      	sxth	r0, r0

		while (index > MAX_NOTE_INDEX)
 8004274:	286a      	cmp	r0, #106	; 0x6a
 8004276:	dc09      	bgt.n	800428c <seq_sequence_new+0x6c>
			index -= 12;
		while (index < 0)
 8004278:	2800      	cmp	r0, #0
 800427a:	db09      	blt.n	8004290 <seq_sequence_new+0x70>
			index += 12;
		seq.track1.note[i] = index; // note frequency is in notesFreq[index]
 800427c:	f827 0014 	strh.w	r0, [r7, r4, lsl #1]
 8004280:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8004282:	2c10      	cmp	r4, #16
 8004284:	d1d4      	bne.n	8004230 <seq_sequence_new+0x10>
	}
}
 8004286:	ecbd 8b02 	vpop	{d8}
 800428a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800428c:	380c      	subs	r0, #12
 800428e:	e7f0      	b.n	8004272 <seq_sequence_new+0x52>
 8004290:	300c      	adds	r0, #12
 8004292:	b200      	sxth	r0, r0
 8004294:	e7f0      	b.n	8004278 <seq_sequence_new+0x58>
 8004296:	bf00      	nop
 8004298:	20003f50 	.word	0x20003f50
 800429c:	00000000 	.word	0x00000000

080042a0 <seq_transpose>:
/*--------------------------------------------------------------------------------------------*/
void seq_transpose(void) {
	int16_t noteIndex;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 80042a0:	4a0d      	ldr	r2, [pc, #52]	; (80042d8 <seq_transpose+0x38>)
void seq_transpose(void) {
 80042a2:	b510      	push	{r4, lr}
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 80042a4:	f8b2 4060 	ldrh.w	r4, [r2, #96]	; 0x60
 80042a8:	1e91      	subs	r1, r2, #2
 80042aa:	f102 001e 	add.w	r0, r2, #30
 80042ae:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80042b2:	4423      	add	r3, r4
 80042b4:	b21b      	sxth	r3, r3
		while (noteIndex > MAX_NOTE_INDEX)
 80042b6:	2b6a      	cmp	r3, #106	; 0x6a
 80042b8:	dc08      	bgt.n	80042cc <seq_transpose+0x2c>
			noteIndex -= 12;
		while (noteIndex < 0)
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	db08      	blt.n	80042d0 <seq_transpose+0x30>
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 80042be:	4281      	cmp	r1, r0
			noteIndex += 12;
		seq.track1.note[i] = noteIndex;
 80042c0:	800b      	strh	r3, [r1, #0]
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 80042c2:	d1f4      	bne.n	80042ae <seq_transpose+0xe>
	}
	noteGen.transpose = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
}
 80042ca:	bd10      	pop	{r4, pc}
 80042cc:	3b0c      	subs	r3, #12
 80042ce:	e7f1      	b.n	80042b4 <seq_transpose+0x14>
 80042d0:	330c      	adds	r3, #12
 80042d2:	b21b      	sxth	r3, r3
 80042d4:	e7f1      	b.n	80042ba <seq_transpose+0x1a>
 80042d6:	bf00      	nop
 80042d8:	20003f50 	.word	0x20003f50

080042dc <sequencer_init>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_init(void) {
 80042dc:	b510      	push	{r4, lr}
	seq.tempo = INIT_TEMPO;
 80042de:	4c11      	ldr	r4, [pc, #68]	; (8004324 <sequencer_init+0x48>)
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <sequencer_init+0x4c>)
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 80042e2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800432c <sequencer_init+0x50>
	seq.tempo = INIT_TEMPO;
 80042e6:	6423      	str	r3, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 80042e8:	f002 fd0e 	bl	8006d08 <lrintf>
	seq.smp_count = 0;
 80042ec:	2300      	movs	r3, #0
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 80042ee:	6460      	str	r0, [r4, #68]	; 0x44
	seq.smp_count = 0;
 80042f0:	64a3      	str	r3, [r4, #72]	; 0x48
	seq.step_idx = 0;
 80042f2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	seq.gateTime = seq.steptime / 2;

	noteGen.transpose = 0;
	noteGen.automaticON = false;
 80042f6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	noteGen.glideON = false;
 80042fa:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	noteGen.chRequested = false;
 80042fe:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	noteGen.someNotesMuted = false;
 8004302:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	noteGen.scaleIndex = 0;
 8004306:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	noteGen.octaveSpread = 4;
	noteGen.rootNote = 36;
 800430a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	seq.gateTime = seq.steptime / 2;
 800430e:	1040      	asrs	r0, r0, #1
	noteGen.octaveSpread = 4;
 8004310:	4a07      	ldr	r2, [pc, #28]	; (8004330 <sequencer_init+0x54>)
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <sequencer_init+0x58>)
	seq.gateTime = seq.steptime / 2;
 8004314:	6520      	str	r0, [r4, #80]	; 0x50
	noteGen.octaveSpread = 4;
 8004316:	65e2      	str	r2, [r4, #92]	; 0x5c
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 8004318:	65a3      	str	r3, [r4, #88]	; 0x58

	seq_sequence_new();
}
 800431a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seq_sequence_new();
 800431e:	f7ff bf7f 	b.w	8004220 <seq_sequence_new>
 8004322:	bf00      	nop
 8004324:	20003f50 	.word	0x20003f50
 8004328:	43a00000 	.word	0x43a00000
 800432c:	46013300 	.word	0x46013300
 8004330:	00240004 	.word	0x00240004
 8004334:	08015cb8 	.word	0x08015cb8

08004338 <sequencer_process>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_process(void) // To be called at each sample treatment
{
 8004338:	b510      	push	{r4, lr}
	/* If we have reached a new step ....  */
	if (seq.smp_count-- <= 0) {
 800433a:	4c0c      	ldr	r4, [pc, #48]	; (800436c <sequencer_process+0x34>)
 800433c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800433e:	1e5a      	subs	r2, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	64a2      	str	r2, [r4, #72]	; 0x48
 8004344:	dc11      	bgt.n	800436a <sequencer_process+0x32>
		/* If we are at the beginning of a new sequence .... */
		if (seq.step_idx == 0) {
 8004346:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 800434a:	b90b      	cbnz	r3, 8004350 <sequencer_process+0x18>
			sequencer_newSequence_action();
 800434c:	f000 fa74 	bl	8004838 <sequencer_newSequence_action>
		}
		sequencer_newStep_action();
 8004350:	f000 f9d0 	bl	80046f4 <sequencer_newStep_action>

		seq.smp_count = seq.steptime; // reload the counter
 8004354:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004356:	64a3      	str	r3, [r4, #72]	; 0x48
		seq.step_idx++;
 8004358:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800435c:	3301      	adds	r3, #1
 800435e:	b21b      	sxth	r3, r3
		if (seq.step_idx >= NUMBER_STEPS)
 8004360:	2b0f      	cmp	r3, #15
			seq.step_idx = 0;
 8004362:	bfc8      	it	gt
 8004364:	2300      	movgt	r3, #0
 8004366:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c

	}
}
 800436a:	bd10      	pop	{r4, pc}
 800436c:	20003f50 	.word	0x20003f50

08004370 <autoSound_set>:
static enum timbre sound _CCM_;

/*===============================================================================================================*/

void autoSound_set(int8_t val) {
	autoSound = val;
 8004370:	4b01      	ldr	r3, [pc, #4]	; (8004378 <autoSound_set+0x8>)
 8004372:	7018      	strb	r0, [r3, #0]
}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20003fb8 	.word	0x20003fb8

0800437c <soundNumber_get>:
	}
}
/*---------------------------------------------------------*/
uint8_t soundNumber_get(void) {
	return sound;
}
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <soundNumber_get+0x8>)
 800437e:	7858      	ldrb	r0, [r3, #1]
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20003fb8 	.word	0x20003fb8

08004388 <AmpLFO_amp_set>:
	}
}

/*-------------------------------------------------------*/
void AmpLFO_amp_set(uint8_t val) {
	amp_lfo.amp = val / MIDI_MAX;
 8004388:	ee07 0a90 	vmov	s15, r0
 800438c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80043a0 <AmpLFO_amp_set+0x18>
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <AmpLFO_amp_set+0x1c>)
 8004392:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800439a:	edc3 7a00 	vstr	s15, [r3]
}
 800439e:	4770      	bx	lr
 80043a0:	42fe0000 	.word	0x42fe0000
 80043a4:	20003e90 	.word	0x20003e90

080043a8 <AmpLFO_freq_set>:
/*-------------------------------------------------------*/
void AmpLFO_freq_set(uint8_t val) {
	amp_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 80043a8:	ee07 0a90 	vmov	s15, r0
 80043ac:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80043c0 <AmpLFO_freq_set+0x18>
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <AmpLFO_freq_set+0x1c>)
 80043b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ba:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80043be:	4770      	bx	lr
 80043c0:	3dc18306 	.word	0x3dc18306
 80043c4:	20003e90 	.word	0x20003e90

080043c8 <Filt1LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt1LFO_amp_set(uint8_t val) {
	filt_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 80043c8:	ee07 0a90 	vmov	s15, r0
 80043cc:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80043e0 <Filt1LFO_amp_set+0x18>
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <Filt1LFO_amp_set+0x1c>)
 80043d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043da:	edc3 7a00 	vstr	s15, [r3]
}
 80043de:	4770      	bx	lr
 80043e0:	3e810204 	.word	0x3e810204
 80043e4:	20003ed0 	.word	0x20003ed0

080043e8 <Filt1LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt1LFO_freq_set(uint8_t val) {
	filt_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 80043e8:	ee07 0a90 	vmov	s15, r0
 80043ec:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004400 <Filt1LFO_freq_set+0x18>
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <Filt1LFO_freq_set+0x1c>)
 80043f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043fa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80043fe:	4770      	bx	lr
 8004400:	3dc18306 	.word	0x3dc18306
 8004404:	20003ed0 	.word	0x20003ed0

08004408 <Filt2LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt2LFO_amp_set(uint8_t val) {
	filt2_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 8004408:	ee07 0a90 	vmov	s15, r0
 800440c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004420 <Filt2LFO_amp_set+0x18>
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <Filt2LFO_amp_set+0x1c>)
 8004412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800441a:	edc3 7a00 	vstr	s15, [r3]
}
 800441e:	4770      	bx	lr
 8004420:	3e810204 	.word	0x3e810204
 8004424:	20003eb0 	.word	0x20003eb0

08004428 <Filt2LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt2LFO_freq_set(uint8_t val) {
	filt2_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8004428:	ee07 0a90 	vmov	s15, r0
 800442c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004440 <Filt2LFO_freq_set+0x18>
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <Filt2LFO_freq_set+0x1c>)
 8004432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800443a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800443e:	4770      	bx	lr
 8004440:	3dc18306 	.word	0x3dc18306
 8004444:	20003eb0 	.word	0x20003eb0

08004448 <VibratoAmp_set>:
	} else
		vibr_lfo.amp = vibr_lfo.last_amp;
}
/*-------------------------------------------------------*/
void VibratoAmp_set(uint8_t val) {
	vibr_lfo.amp = MAX_VIBRATO_AMP / MIDI_MAX * val;
 8004448:	ee07 0a90 	vmov	s15, r0
 800444c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004460 <VibratoAmp_set+0x18>
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <VibratoAmp_set+0x1c>)
 8004452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800445a:	edc3 7a00 	vstr	s15, [r3]
}
 800445e:	4770      	bx	lr
 8004460:	3b810204 	.word	0x3b810204
 8004464:	20003ef0 	.word	0x20003ef0

08004468 <VibratoFreq_set>:
/*-------------------------------------------------------*/
void VibratoFreq_set(uint8_t val) {
	vibr_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8004468:	ee07 0a90 	vmov	s15, r0
 800446c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004480 <VibratoFreq_set+0x18>
 8004470:	4b04      	ldr	r3, [pc, #16]	; (8004484 <VibratoFreq_set+0x1c>)
 8004472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800447a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800447e:	4770      	bx	lr
 8004480:	3dc18306 	.word	0x3dc18306
 8004484:	20003ef0 	.word	0x20003ef0

08004488 <Delay_switch>:
		delayON = true;
}
/*-------------------------------------------------------*/
void Delay_switch(uint8_t val) {

	if (val > 63)
 8004488:	283f      	cmp	r0, #63	; 0x3f
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <Delay_switch+0x14>)
 800448c:	d902      	bls.n	8004494 <Delay_switch+0xc>
		delayON = true;
 800448e:	2201      	movs	r2, #1
 8004490:	709a      	strb	r2, [r3, #2]
	else {
		delayON = false;
		Delay_clean();
	}
}
 8004492:	4770      	bx	lr
		delayON = false;
 8004494:	2200      	movs	r2, #0
 8004496:	709a      	strb	r2, [r3, #2]
		Delay_clean();
 8004498:	f7fe ba4a 	b.w	8002930 <Delay_clean>
 800449c:	20003fb8 	.word	0x20003fb8

080044a0 <Filter_Random_switch>:
	else
		autoFilterON = true;
}
/*-------------------------------------------------------*/
void Filter_Random_switch(uint8_t val) {
	if (val > 63)
 80044a0:	283f      	cmp	r0, #63	; 0x3f
 80044a2:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <Filter_Random_switch+0x10>)
		autoFilterON = true;
 80044a4:	bf8c      	ite	hi
 80044a6:	2201      	movhi	r2, #1
	else
		autoFilterON = false;
 80044a8:	2200      	movls	r2, #0
 80044aa:	70da      	strb	r2, [r3, #3]
}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20003fb8 	.word	0x20003fb8

080044b4 <Chorus_switch>:
		chorusON = true;
}
/*-------------------------------------------------------*/
void Chorus_switch(uint8_t val) {

	if (val > 63)
 80044b4:	283f      	cmp	r0, #63	; 0x3f
 80044b6:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <Chorus_switch+0x10>)
		chorusON = true;
 80044b8:	bf8c      	ite	hi
 80044ba:	2201      	movhi	r2, #1
	else
		chorusON = false;
 80044bc:	2200      	movls	r2, #0
 80044be:	711a      	strb	r2, [r3, #4]
}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20003fb8 	.word	0x20003fb8

080044c8 <Phaser_switch>:
/*-------------------------------------------------------*/
void Phaser_switch(uint8_t val) {

	if (val > 63)
 80044c8:	283f      	cmp	r0, #63	; 0x3f
 80044ca:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <Phaser_switch+0x10>)
		phaserON = true;
 80044cc:	bf8c      	ite	hi
 80044ce:	2201      	movhi	r2, #1
	else
		phaserON = false;
 80044d0:	2200      	movls	r2, #0
 80044d2:	715a      	strb	r2, [r3, #5]
}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20003fb8 	.word	0x20003fb8

080044dc <Sound_set>:
	else
		sound = 0;
}
/*-------------------------------------------------------*/
void Sound_set(uint8_t val) {
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 80044dc:	ee07 0a90 	vmov	s15, r0
 80044e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80044e4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8004518 <Sound_set+0x3c>
void Sound_set(uint8_t val) {
 80044e8:	b507      	push	{r0, r1, r2, lr}
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 80044ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80044ee:	f002 fc4b 	bl	8006d88 <rintf>
 80044f2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <Sound_set+0x40>)
 80044f8:	edcd 7a01 	vstr	s15, [sp, #4]
 80044fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004500:	7053      	strb	r3, [r2, #1]
	if (sound != ADDITIVE)
 8004502:	2b04      	cmp	r3, #4
 8004504:	d004      	beq.n	8004510 <Sound_set+0x34>
		AdditiveGen_newWaveform();
}
 8004506:	b003      	add	sp, #12
 8004508:	f85d eb04 	ldr.w	lr, [sp], #4
		AdditiveGen_newWaveform();
 800450c:	f7ff b940 	b.w	8003790 <AdditiveGen_newWaveform>
}
 8004510:	b003      	add	sp, #12
 8004512:	f85d fb04 	ldr.w	pc, [sp], #4
 8004516:	bf00      	nop
 8004518:	3df1e3c8 	.word	0x3df1e3c8
 800451c:	20003fb8 	.word	0x20003fb8

08004520 <FM_OP1_freq_set>:
/*******************************************************************************************************************************/

void FM_OP1_freq_set(uint8_t val) {
	FM_op_freq_set(&op1, val);
 8004520:	4601      	mov	r1, r0
 8004522:	4801      	ldr	r0, [pc, #4]	; (8004528 <FM_OP1_freq_set+0x8>)
 8004524:	f7fe bdf0 	b.w	8003108 <FM_op_freq_set>
 8004528:	20003e18 	.word	0x20003e18

0800452c <FM_OP1_modInd_set>:
}
/*-------------------------------------------------------*/
void FM_OP1_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op1, val);
 800452c:	4601      	mov	r1, r0
 800452e:	4801      	ldr	r0, [pc, #4]	; (8004534 <FM_OP1_modInd_set+0x8>)
 8004530:	f7fe bdf8 	b.w	8003124 <FM_op_modInd_set>
 8004534:	20003e18 	.word	0x20003e18

08004538 <FM_OP2_freq_set>:
}

/*----------------------------------------------------------------------------------------------------------------------------*/
void FM_OP2_freq_set(uint8_t val) {
 8004538:	b508      	push	{r3, lr}
	//FM_op_freq_set(&op2, val);
	op2.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op2 is a multiple of the main pitch freq (op1)
 800453a:	eddf 0a05 	vldr	s1, [pc, #20]	; 8004550 <FM_OP2_freq_set+0x18>
 800453e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004554 <FM_OP2_freq_set+0x1c>
 8004542:	f7fe fd43 	bl	8002fcc <Lin2Exp>
 8004546:	4b04      	ldr	r3, [pc, #16]	; (8004558 <FM_OP2_freq_set+0x20>)
 8004548:	ed83 0a06 	vstr	s0, [r3, #24]
	//op2.mul = roundf(32 * val/MIDI_MAX);
}
 800454c:	bd08      	pop	{r3, pc}
 800454e:	bf00      	nop
 8004550:	42000000 	.word	0x42000000
 8004554:	3e4ccccd 	.word	0x3e4ccccd
 8004558:	20003df8 	.word	0x20003df8

0800455c <FM_OP2_modInd_set>:
		op2.mul *= 0.99f;
	}
}
/*-------------------------------------------------------*/
void FM_OP2_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op2, val);
 800455c:	4601      	mov	r1, r0
 800455e:	4801      	ldr	r0, [pc, #4]	; (8004564 <FM_OP2_modInd_set+0x8>)
 8004560:	f7fe bde0 	b.w	8003124 <FM_op_modInd_set>
 8004564:	20003df8 	.word	0x20003df8

08004568 <FM_OP3_freq_set>:
}

/*------------------------------------------------------------------------------------------------------------------------------*/
void FM_OP3_freq_set(uint8_t val) {
 8004568:	b508      	push	{r3, lr}
	op3.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op3 is a multiple of the main pitch freq (op1)
 800456a:	eddf 0a05 	vldr	s1, [pc, #20]	; 8004580 <FM_OP3_freq_set+0x18>
 800456e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004584 <FM_OP3_freq_set+0x1c>
 8004572:	f7fe fd2b 	bl	8002fcc <Lin2Exp>
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <FM_OP3_freq_set+0x20>)
 8004578:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800457c:	bd08      	pop	{r3, pc}
 800457e:	bf00      	nop
 8004580:	42000000 	.word	0x42000000
 8004584:	3e4ccccd 	.word	0x3e4ccccd
 8004588:	20003dd8 	.word	0x20003dd8

0800458c <FM_OP3_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP3_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op3, val);
 800458c:	4601      	mov	r1, r0
 800458e:	4801      	ldr	r0, [pc, #4]	; (8004594 <FM_OP3_modInd_set+0x8>)
 8004590:	f7fe bdc8 	b.w	8003124 <FM_op_modInd_set>
 8004594:	20003dd8 	.word	0x20003dd8

08004598 <FM_OP4_freq_set>:
		op3.mul *= 0.99f;
	}
}

/*--------------------------------------------------------------------------------------------------------------------------*/
void FM_OP4_freq_set(uint8_t val) {
 8004598:	b508      	push	{r3, lr}
	op4.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op4 is a multiple of the main pitch freq (op1)
 800459a:	eddf 0a05 	vldr	s1, [pc, #20]	; 80045b0 <FM_OP4_freq_set+0x18>
 800459e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80045b4 <FM_OP4_freq_set+0x1c>
 80045a2:	f7fe fd13 	bl	8002fcc <Lin2Exp>
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <FM_OP4_freq_set+0x20>)
 80045a8:	ed83 0a06 	vstr	s0, [r3, #24]
}
 80045ac:	bd08      	pop	{r3, pc}
 80045ae:	bf00      	nop
 80045b0:	42000000 	.word	0x42000000
 80045b4:	3e4ccccd 	.word	0x3e4ccccd
 80045b8:	20003db8 	.word	0x20003db8

080045bc <FM_OP4_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP4_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op4, val);
 80045bc:	4601      	mov	r1, r0
 80045be:	4801      	ldr	r0, [pc, #4]	; (80045c4 <FM_OP4_modInd_set+0x8>)
 80045c0:	f7fe bdb0 	b.w	8003124 <FM_op_modInd_set>
 80045c4:	20003db8 	.word	0x20003db8

080045c8 <Synth_Init>:
	}
}

/*===============================================================================================================*/

void Synth_Init(void) {
 80045c8:	b508      	push	{r3, lr}

	vol = env = 1;
 80045ca:	4b38      	ldr	r3, [pc, #224]	; (80046ac <Synth_Init+0xe4>)
 80045cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
void Synth_Init(void) {
 80045d0:	ed2d 8b02 	vpush	{d8}
	vol = env = 1;
 80045d4:	609a      	str	r2, [r3, #8]
	sound = WT_SINE;
 80045d6:	2203      	movs	r2, #3
 80045d8:	705a      	strb	r2, [r3, #1]
	autoFilterON = false;
 80045da:	2200      	movs	r2, #0
 80045dc:	70da      	strb	r2, [r3, #3]
	autoSound = 0;
 80045de:	701a      	strb	r2, [r3, #0]
	chorusON = false;
 80045e0:	711a      	strb	r2, [r3, #4]
	delayON = false;
 80045e2:	709a      	strb	r2, [r3, #2]
	phaserON = true;
 80045e4:	2201      	movs	r2, #1
 80045e6:	715a      	strb	r2, [r3, #5]

	Delay_init();
 80045e8:	f7fe f98c 	bl	8002904 <Delay_init>
	drifter_init();
 80045ec:	f7fe fb1e 	bl	8002c2c <drifter_init>
//	pitchGen_init();
	sequencer_init();
 80045f0:	f7ff fe74 	bl	80042dc <sequencer_init>
	ADSR_init(&adsr);
 80045f4:	482e      	ldr	r0, [pc, #184]	; (80046b0 <Synth_Init+0xe8>)
	Chorus_init();
	PhaserInit();
	SVF_init();
	filterFreq = 0.25f;
	filterFreq2 = 0.25f;
	osc_init(&op1, 0.8f, 587.f);
 80045f6:	eddf 8a2f 	vldr	s17, [pc, #188]	; 80046b4 <Synth_Init+0xec>
 80045fa:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 80046b8 <Synth_Init+0xf0>
	ADSR_init(&adsr);
 80045fe:	f7fd f88b 	bl	8001718 <ADSR_init>
	Chorus_init();
 8004602:	f7fd ff7b 	bl	80024fc <Chorus_init>
	PhaserInit();
 8004606:	f7ff fa61 	bl	8003acc <PhaserInit>
	SVF_init();
 800460a:	f7ff fbe7 	bl	8003ddc <SVF_init>
	filterFreq = 0.25f;
 800460e:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <Synth_Init+0xf4>)
	osc_init(&op1, 0.8f, 587.f);
 8004610:	482b      	ldr	r0, [pc, #172]	; (80046c0 <Synth_Init+0xf8>)
	filterFreq = 0.25f;
 8004612:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8004616:	6013      	str	r3, [r2, #0]
	filterFreq2 = 0.25f;
 8004618:	4a2a      	ldr	r2, [pc, #168]	; (80046c4 <Synth_Init+0xfc>)
	osc_init(&op1, 0.8f, 587.f);
 800461a:	eef0 0a68 	vmov.f32	s1, s17
 800461e:	eeb0 0a48 	vmov.f32	s0, s16
	filterFreq2 = 0.25f;
 8004622:	6013      	str	r3, [r2, #0]
	osc_init(&op1, 0.8f, 587.f);
 8004624:	f7fe fd51 	bl	80030ca <osc_init>
	osc_init(&op2, 0.8f, 587.f);
 8004628:	eef0 0a68 	vmov.f32	s1, s17
 800462c:	eeb0 0a48 	vmov.f32	s0, s16
 8004630:	4825      	ldr	r0, [pc, #148]	; (80046c8 <Synth_Init+0x100>)
 8004632:	f7fe fd4a 	bl	80030ca <osc_init>
	osc_init(&op3, 0.8f, 587.f);
 8004636:	eef0 0a68 	vmov.f32	s1, s17
 800463a:	eeb0 0a48 	vmov.f32	s0, s16
 800463e:	4823      	ldr	r0, [pc, #140]	; (80046cc <Synth_Init+0x104>)
 8004640:	f7fe fd43 	bl	80030ca <osc_init>
	osc_init(&op4, 0.8f, 587.f);
 8004644:	eeb0 0a48 	vmov.f32	s0, s16
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 8004648:	ed9f 8a21 	vldr	s16, [pc, #132]	; 80046d0 <Synth_Init+0x108>
	osc_init(&op4, 0.8f, 587.f);
 800464c:	4821      	ldr	r0, [pc, #132]	; (80046d4 <Synth_Init+0x10c>)
 800464e:	eef0 0a68 	vmov.f32	s1, s17
 8004652:	f7fe fd3a 	bl	80030ca <osc_init>
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 8004656:	eeb0 0a48 	vmov.f32	s0, s16
 800465a:	eef1 0a06 	vmov.f32	s1, #22	; 0x40b00000  5.5
 800465e:	481e      	ldr	r0, [pc, #120]	; (80046d8 <Synth_Init+0x110>)
 8004660:	f7fe fd33 	bl	80030ca <osc_init>
	osc_init(&filt_lfo, 0, 0);
 8004664:	eef0 0a48 	vmov.f32	s1, s16
 8004668:	eeb0 0a48 	vmov.f32	s0, s16
 800466c:	481b      	ldr	r0, [pc, #108]	; (80046dc <Synth_Init+0x114>)
 800466e:	f7fe fd2c 	bl	80030ca <osc_init>
	osc_init(&filt2_lfo, 0, 0);
 8004672:	eef0 0a48 	vmov.f32	s1, s16
 8004676:	eeb0 0a48 	vmov.f32	s0, s16
 800467a:	4819      	ldr	r0, [pc, #100]	; (80046e0 <Synth_Init+0x118>)
 800467c:	f7fe fd25 	bl	80030ca <osc_init>
	osc_init(&amp_lfo, 0, 0);
 8004680:	eef0 0a48 	vmov.f32	s1, s16
 8004684:	eeb0 0a48 	vmov.f32	s0, s16
 8004688:	4816      	ldr	r0, [pc, #88]	; (80046e4 <Synth_Init+0x11c>)
 800468a:	f7fe fd1e 	bl	80030ca <osc_init>
	AdditiveGen_newWaveform();
 800468e:	f7ff f87f 	bl	8003790 <AdditiveGen_newWaveform>
	VCO_blepsaw_Init(&mbSawOsc);
 8004692:	4815      	ldr	r0, [pc, #84]	; (80046e8 <Synth_Init+0x120>)
 8004694:	f7fd f9ae 	bl	80019f4 <VCO_blepsaw_Init>
	VCO_bleprect_Init(&mbRectOsc);
 8004698:	4814      	ldr	r0, [pc, #80]	; (80046ec <Synth_Init+0x124>)
 800469a:	f7fd fa9f 	bl	8001bdc <VCO_bleprect_Init>
	VCO_bleptri_Init(&mbTriOsc);
}
 800469e:	ecbd 8b02 	vpop	{d8}
	VCO_bleptri_Init(&mbTriOsc);
 80046a2:	4813      	ldr	r0, [pc, #76]	; (80046f0 <Synth_Init+0x128>)
}
 80046a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	VCO_bleptri_Init(&mbTriOsc);
 80046a8:	f7fd bc8e 	b.w	8001fc8 <VCO_bleptri_Init>
 80046ac:	20003fb8 	.word	0x20003fb8
 80046b0:	200000fc 	.word	0x200000fc
 80046b4:	4412c000 	.word	0x4412c000
 80046b8:	3f4ccccd 	.word	0x3f4ccccd
 80046bc:	20013c40 	.word	0x20013c40
 80046c0:	20003e18 	.word	0x20003e18
 80046c4:	20013c44 	.word	0x20013c44
 80046c8:	20003df8 	.word	0x20003df8
 80046cc:	20003dd8 	.word	0x20003dd8
 80046d0:	00000000 	.word	0x00000000
 80046d4:	20003db8 	.word	0x20003db8
 80046d8:	20003ef0 	.word	0x20003ef0
 80046dc:	20003ed0 	.word	0x20003ed0
 80046e0:	20003eb0 	.word	0x20003eb0
 80046e4:	20003e90 	.word	0x20003e90
 80046e8:	20000bd8 	.word	0x20000bd8
 80046ec:	2000067c 	.word	0x2000067c
 80046f0:	20000124 	.word	0x20000124

080046f4 <sequencer_newStep_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newStep_action(void) // User callback function called by sequencer_process()
{
 80046f4:	b538      	push	{r3, r4, r5, lr}
	if ((noteGen.automaticON || noteGen.chRequested)) {
 80046f6:	4d45      	ldr	r5, [pc, #276]	; (800480c <sequencer_newStep_action+0x118>)
 80046f8:	7bab      	ldrb	r3, [r5, #14]
 80046fa:	b90b      	cbnz	r3, 8004700 <sequencer_newStep_action+0xc>
 80046fc:	7c2b      	ldrb	r3, [r5, #16]
 80046fe:	b12b      	cbz	r3, 800470c <sequencer_newStep_action+0x18>
		seq_sequence_new();
 8004700:	f7ff fd8e 	bl	8004220 <seq_sequence_new>
		noteGen.chRequested = false;
 8004704:	2300      	movs	r3, #0
 8004706:	742b      	strb	r3, [r5, #16]
		AdditiveGen_newWaveform();
 8004708:	f7ff f842 	bl	8003790 <AdditiveGen_newWaveform>
	}

	if ((noteGen.someNotesMuted) && (rintf(frand_a_b(0.4f, 1)) == 0))
 800470c:	7c6b      	ldrb	r3, [r5, #17]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d040      	beq.n	8004794 <sequencer_newStep_action+0xa0>
 8004712:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004716:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004810 <sequencer_newStep_action+0x11c>
 800471a:	f7ff fac9 	bl	8003cb0 <frand_a_b>
 800471e:	f002 fb33 	bl	8006d88 <rintf>
 8004722:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472a:	d133      	bne.n	8004794 <sequencer_newStep_action+0xa0>
		ADSR_keyOff(&adsr);
 800472c:	4839      	ldr	r0, [pc, #228]	; (8004814 <sequencer_newStep_action+0x120>)
 800472e:	f7fd f810 	bl	8001752 <ADSR_keyOff>
	else
		ADSR_keyOn(&adsr);

	if (autoFilterON)
 8004732:	4c39      	ldr	r4, [pc, #228]	; (8004818 <sequencer_newStep_action+0x124>)
 8004734:	78e3      	ldrb	r3, [r4, #3]
 8004736:	b193      	cbz	r3, 800475e <sequencer_newStep_action+0x6a>
		SVF_directSetFilterValue(&SVFilter,
		Ts * 600.f * powf(5000.f / 600.f, frand_a_b(0, 1)));
 8004738:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800473c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800481c <sequencer_newStep_action+0x128>
 8004740:	f7ff fab6 	bl	8003cb0 <frand_a_b>
 8004744:	eef0 0a40 	vmov.f32	s1, s0
 8004748:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004820 <sequencer_newStep_action+0x12c>
 800474c:	f002 fbb8 	bl	8006ec0 <powf>
		SVF_directSetFilterValue(&SVFilter,
 8004750:	eddf 7a34 	vldr	s15, [pc, #208]	; 8004824 <sequencer_newStep_action+0x130>
 8004754:	4834      	ldr	r0, [pc, #208]	; (8004828 <sequencer_newStep_action+0x134>)
 8004756:	ee20 0a27 	vmul.f32	s0, s0, s15
 800475a:	f7ff faf5 	bl	8003d48 <SVF_directSetFilterValue>

	if (noteGen.transpose != 0) {
 800475e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004762:	b123      	cbz	r3, 800476e <sequencer_newStep_action+0x7a>
		noteGen.rootNote += noteGen.transpose;
 8004764:	896a      	ldrh	r2, [r5, #10]
 8004766:	4413      	add	r3, r2
 8004768:	816b      	strh	r3, [r5, #10]
		seq_transpose();
 800476a:	f7ff fd99 	bl	80042a0 <seq_transpose>
	}

	if (autoSound == 1) {
 800476e:	f994 3000 	ldrsb.w	r3, [r4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d114      	bne.n	80047a0 <sequencer_newStep_action+0xac>
		switch (rand() % 4) // 4 random timbers
 8004776:	f003 fce3 	bl	8008140 <rand>
 800477a:	4243      	negs	r3, r0
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	f000 0003 	and.w	r0, r0, #3
 8004784:	bf58      	it	pl
 8004786:	4258      	negpl	r0, r3
 8004788:	2803      	cmp	r0, #3
 800478a:	d809      	bhi.n	80047a0 <sequencer_newStep_action+0xac>
 800478c:	e8df f000 	tbb	[pc, r0]
 8004790:	3b393506 	.word	0x3b393506
		ADSR_keyOn(&adsr);
 8004794:	481f      	ldr	r0, [pc, #124]	; (8004814 <sequencer_newStep_action+0x120>)
 8004796:	f7fc ffd3 	bl	8001740 <ADSR_keyOn>
 800479a:	e7ca      	b.n	8004732 <sequencer_newStep_action+0x3e>
		{
		case 0:
			sound = CHORD15;
 800479c:	2309      	movs	r3, #9
			break;
		case 2:
			sound = CHORD13min5;
			break;
		case 3:
			sound = VOICES3;
 800479e:	7063      	strb	r3, [r4, #1]
			break;
		}
	}
	if (autoSound == 2) {
 80047a0:	f994 3000 	ldrsb.w	r3, [r4]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d115      	bne.n	80047d4 <sequencer_newStep_action+0xe0>
		sound = rand() % LAST_SOUND;
 80047a8:	f003 fcca 	bl	8008140 <rand>
 80047ac:	4243      	negs	r3, r0
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	f000 000f 	and.w	r0, r0, #15
 80047b6:	bf58      	it	pl
 80047b8:	4258      	negpl	r0, r3
 80047ba:	b2c0      	uxtb	r0, r0
		if ((sound == CHORD13min5) || (sound == CHORD135))
 80047bc:	f1a0 030a 	sub.w	r3, r0, #10
 80047c0:	2b01      	cmp	r3, #1
			sound = VOICES3;
 80047c2:	bf96      	itet	ls
 80047c4:	230c      	movls	r3, #12
		sound = rand() % LAST_SOUND;
 80047c6:	7060      	strbhi	r0, [r4, #1]
			sound = VOICES3;
 80047c8:	7063      	strbls	r3, [r4, #1]
		if (sound == ADDITIVE)
 80047ca:	7863      	ldrb	r3, [r4, #1]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d101      	bne.n	80047d4 <sequencer_newStep_action+0xe0>
			AdditiveGen_newWaveform();
 80047d0:	f7fe ffde 	bl	8003790 <AdditiveGen_newWaveform>
	}

	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80047d4:	4b15      	ldr	r3, [pc, #84]	; (800482c <sequencer_newStep_action+0x138>)
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80047d6:	eddf 0a16 	vldr	s1, [pc, #88]	; 8004830 <sequencer_newStep_action+0x13c>
	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80047da:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80047de:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004810 <sequencer_newStep_action+0x11c>
	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80047e2:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <sequencer_newStep_action+0x140>)
 80047e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60e3      	str	r3, [r4, #12]
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80047f0:	f7ff fa5e 	bl	8003cb0 <frand_a_b>
 80047f4:	ed84 0a02 	vstr	s0, [r4, #8]
}
 80047f8:	bd38      	pop	{r3, r4, r5, pc}
			AdditiveGen_newWaveform();
 80047fa:	f7fe ffc9 	bl	8003790 <AdditiveGen_newWaveform>
			sound = ADDITIVE;
 80047fe:	2304      	movs	r3, #4
 8004800:	e7cd      	b.n	800479e <sequencer_newStep_action+0xaa>
			sound = CHORD13min5;
 8004802:	230b      	movs	r3, #11
 8004804:	e7cb      	b.n	800479e <sequencer_newStep_action+0xaa>
			sound = VOICES3;
 8004806:	230c      	movs	r3, #12
 8004808:	e7c9      	b.n	800479e <sequencer_newStep_action+0xaa>
 800480a:	bf00      	nop
 800480c:	20003fa4 	.word	0x20003fa4
 8004810:	3ecccccd 	.word	0x3ecccccd
 8004814:	200000fc 	.word	0x200000fc
 8004818:	20003fb8 	.word	0x20003fb8
 800481c:	00000000 	.word	0x00000000
 8004820:	41055555 	.word	0x41055555
 8004824:	3c5ee95c 	.word	0x3c5ee95c
 8004828:	20003f10 	.word	0x20003f10
 800482c:	20003f50 	.word	0x20003f50
 8004830:	3f4ccccd 	.word	0x3f4ccccd
 8004834:	08015cc0 	.word	0x08015cc0

08004838 <sequencer_newSequence_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newSequence_action(void) // User callback function called by sequencer_process()
{
 8004838:	b508      	push	{r3, lr}
	/* A new sequence begins ... */
	if ((demoMode == true) && (freeze == false)) {
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <sequencer_newSequence_action+0x20>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b153      	cbz	r3, 8004856 <sequencer_newSequence_action+0x1e>
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <sequencer_newSequence_action+0x24>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	b93b      	cbnz	r3, 8004856 <sequencer_newSequence_action+0x1e>
		MagicPatch(MIDI_MAXi);
 8004846:	207f      	movs	r0, #127	; 0x7f
 8004848:	f7fc fe86 	bl	8001558 <MagicPatch>
		MagicFX(MIDI_MAXi);
 800484c:	207f      	movs	r0, #127	; 0x7f
	}
}
 800484e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		MagicFX(MIDI_MAXi);
 8004852:	f7fc be3e 	b.w	80014d2 <MagicFX>
}
 8004856:	bd08      	pop	{r3, pc}
 8004858:	20000080 	.word	0x20000080
 800485c:	20012a64 	.word	0x20012a64

08004860 <make_sound>:
/*===============================================================================================================*/

void make_sound(uint16_t *buf, uint16_t length) // To be used with the Sequencer
{
 8004860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004864:	ed2d 8b04 	vpush	{d8-d9}
 8004868:	1d06      	adds	r6, r0, #4

	for (pos = 0; pos < length; pos++) {
		/*--- Sequencer actions and update ---*/
		//sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
		// GRA
		if (sequencerIsOn == true) {
 800486a:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8004a78 <make_sound+0x218>
 800486e:	4c72      	ldr	r4, [pc, #456]	; (8004a38 <make_sound+0x1d8>)
 8004870:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{
 8004874:	b082      	sub	sp, #8
 8004876:	1d05      	adds	r5, r0, #4
	for (pos = 0; pos < length; pos++) {
 8004878:	42ae      	cmp	r6, r5
 800487a:	d104      	bne.n	8004886 <make_sound+0x26>

		*outp++ = valueL; // left channel sample
		*outp++ = valueR; // right channel sample
	}

}
 800487c:	b002      	add	sp, #8
 800487e:	ecbd 8b04 	vpop	{d8-d9}
 8004882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sequencerIsOn == true) {
 8004886:	f898 3000 	ldrb.w	r3, [r8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80b3 	beq.w	80049f6 <make_sound+0x196>
			sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
 8004890:	f7ff fd52 	bl	8004338 <sequencer_process>
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 8004894:	4869      	ldr	r0, [pc, #420]	; (8004a3c <make_sound+0x1dc>)
		env = ADSR_computeSample(&adsr)
 8004896:	4f6a      	ldr	r7, [pc, #424]	; (8004a40 <make_sound+0x1e0>)
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 8004898:	f7fe fc86 	bl	80031a8 <Osc_WT_SINE_SampleCompute>
 800489c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80048a0:	edd4 7a03 	vldr	s15, [r4, #12]
		y = waveCompute(sound, f1);
 80048a4:	7860      	ldrb	r0, [r4, #1]
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 80048a6:	ee30 0a28 	vadd.f32	s0, s0, s17
		y = waveCompute(sound, f1);
 80048aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80048ae:	f7ff f80f 	bl	80038d0 <waveCompute>
		env = ADSR_computeSample(&adsr)
 80048b2:	4638      	mov	r0, r7
		y = waveCompute(sound, f1);
 80048b4:	eeb0 8a40 	vmov.f32	s16, s0
		env = ADSR_computeSample(&adsr)
 80048b8:	f7fc ffda 	bl	8001870 <ADSR_computeSample>
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80048bc:	4861      	ldr	r0, [pc, #388]	; (8004a44 <make_sound+0x1e4>)
		env = ADSR_computeSample(&adsr)
 80048be:	eef0 9a40 	vmov.f32	s19, s0
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80048c2:	f7fe fc71 	bl	80031a8 <Osc_WT_SINE_SampleCompute>
 80048c6:	ee30 9a28 	vadd.f32	s18, s0, s17
		y *= vol * env; // apply volume and envelop
 80048ca:	ed94 0a02 	vldr	s0, [r4, #8]
		if (sequencerIsOn == true) {
 80048ce:	f898 3000 	ldrb.w	r3, [r8]
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80048d2:	ee29 9a29 	vmul.f32	s18, s18, s19
		y *= vol * env; // apply volume and envelop
 80048d6:	ee29 9a00 	vmul.f32	s18, s18, s0
 80048da:	ee29 9a08 	vmul.f32	s18, s18, s16
		if (sequencerIsOn == true) {
 80048de:	b13b      	cbz	r3, 80048f0 <make_sound+0x90>
			if (adsr.cnt_ >= seq.gateTime)
 80048e0:	4b59      	ldr	r3, [pc, #356]	; (8004a48 <make_sound+0x1e8>)
 80048e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <make_sound+0x90>
				ADSR_keyOff(&adsr);
 80048ea:	4638      	mov	r0, r7
 80048ec:	f7fc ff31 	bl	8001752 <ADSR_keyOff>
		if ((!autoFilterON) && (filt_lfo.amp != 0))
 80048f0:	78e3      	ldrb	r3, [r4, #3]
 80048f2:	b99b      	cbnz	r3, 800491c <make_sound+0xbc>
 80048f4:	4855      	ldr	r0, [pc, #340]	; (8004a4c <make_sound+0x1ec>)
 80048f6:	edd0 7a00 	vldr	s15, [r0]
 80048fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004902:	d00b      	beq.n	800491c <make_sound+0xbc>
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 8004904:	f7fe fd1c 	bl	8003340 <OpSampleCompute7bis>
			SVF_directSetFilterValue(&SVFilter,
 8004908:	4b51      	ldr	r3, [pc, #324]	; (8004a50 <make_sound+0x1f0>)
 800490a:	4852      	ldr	r0, [pc, #328]	; (8004a54 <make_sound+0x1f4>)
 800490c:	edd3 7a00 	vldr	s15, [r3]
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 8004910:	ee30 0a28 	vadd.f32	s0, s0, s17
			SVF_directSetFilterValue(&SVFilter,
 8004914:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004918:	f7ff fa16 	bl	8003d48 <SVF_directSetFilterValue>
		if (filt2_lfo.amp != 0)
 800491c:	484e      	ldr	r0, [pc, #312]	; (8004a58 <make_sound+0x1f8>)
 800491e:	edd0 7a00 	vldr	s15, [r0]
 8004922:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492a:	d00b      	beq.n	8004944 <make_sound+0xe4>
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 800492c:	f7fe fd08 	bl	8003340 <OpSampleCompute7bis>
			SVF_directSetFilterValue(&SVFilter2,
 8004930:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <make_sound+0x1fc>)
 8004932:	484b      	ldr	r0, [pc, #300]	; (8004a60 <make_sound+0x200>)
 8004934:	edd3 7a00 	vldr	s15, [r3]
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 8004938:	ee30 0a28 	vadd.f32	s0, s0, s17
			SVF_directSetFilterValue(&SVFilter2,
 800493c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004940:	f7ff fa02 	bl	8003d48 <SVF_directSetFilterValue>
						* (SVF_calcSample(&SVFilter, y)
 8004944:	4843      	ldr	r0, [pc, #268]	; (8004a54 <make_sound+0x1f4>)
 8004946:	eeb0 0a49 	vmov.f32	s0, s18
 800494a:	f7ff fae7 	bl	8003f1c <SVF_calcSample>
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 800494e:	4844      	ldr	r0, [pc, #272]	; (8004a60 <make_sound+0x200>)
						* (SVF_calcSample(&SVFilter, y)
 8004950:	eeb0 8a40 	vmov.f32	s16, s0
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 8004954:	eeb0 0a49 	vmov.f32	s0, s18
 8004958:	f7ff fae0 	bl	8003f1c <SVF_calcSample>
		if (delayON)
 800495c:	78a3      	ldrb	r3, [r4, #2]
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 800495e:	ee38 0a00 	vadd.f32	s0, s16, s0
		y =
 8004962:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004966:	ee20 0a27 	vmul.f32	s0, s0, s15
		if (delayON)
 800496a:	b10b      	cbz	r3, 8004970 <make_sound+0x110>
			y = Delay_compute(y);
 800496c:	f7fe f836 	bl	80029dc <Delay_compute>
		if (phaserON)
 8004970:	7963      	ldrb	r3, [r4, #5]
 8004972:	b10b      	cbz	r3, 8004978 <make_sound+0x118>
			y = Phaser_compute(y);
 8004974:	f7ff f914 	bl	8003ba0 <Phaser_compute>
		if (chorusON)
 8004978:	7923      	ldrb	r3, [r4, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d051      	beq.n	8004a22 <make_sound+0x1c2>
			stereoChorus_compute(&yL, &yR, y);
 800497e:	a901      	add	r1, sp, #4
 8004980:	4668      	mov	r0, sp
 8004982:	f7fd ff9f 	bl	80028c4 <stereoChorus_compute>
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 8004986:	ed9d 7a00 	vldr	s14, [sp]
 800498a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800498e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004992:	dc4b      	bgt.n	8004a2c <make_sound+0x1cc>
		yL = (yL < -1.0f) ? -1.0f : yL;
 8004994:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004998:	eeb4 7a67 	vcmp.f32	s14, s15
 800499c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a0:	bf48      	it	mi
 80049a2:	eeb0 7a67 	vmovmi.f32	s14, s15
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 80049a6:	eddd 7a01 	vldr	s15, [sp, #4]
		yL = (yL < -1.0f) ? -1.0f : yL;
 80049aa:	ed8d 7a00 	vstr	s14, [sp]
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 80049ae:	eef4 7ae8 	vcmpe.f32	s15, s17
 80049b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b6:	dc3c      	bgt.n	8004a32 <make_sound+0x1d2>
		yR = (yR < -1.0f) ? -1.0f : yR;
 80049b8:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80049bc:	eef4 7a66 	vcmp.f32	s15, s13
 80049c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c4:	bf48      	it	mi
 80049c6:	eef0 7a66 	vmovmi.f32	s15, s13
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80049ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004a64 <make_sound+0x204>
		yR = (yR < -1.0f) ? -1.0f : yR;
 80049ce:	edcd 7a01 	vstr	s15, [sp, #4]
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80049d2:	ee27 7a26 	vmul.f32	s14, s14, s13
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80049d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80049da:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80049de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80049e2:	ee17 3a10 	vmov	r3, s14
 80049e6:	f826 3c04 	strh.w	r3, [r6, #-4]
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80049ea:	ee17 3a90 	vmov	r3, s15
 80049ee:	3604      	adds	r6, #4
 80049f0:	f826 3c06 	strh.w	r3, [r6, #-6]
 80049f4:	e740      	b.n	8004878 <make_sound+0x18>
			f0 = notesFreq[currentNote];
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <make_sound+0x208>)
			vol = (float) velocity / 127.0f;
 80049f8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004a6c <make_sound+0x20c>
			f0 = notesFreq[currentNote];
 80049fc:	f993 2000 	ldrsb.w	r2, [r3]
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <make_sound+0x210>)
 8004a02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60e3      	str	r3, [r4, #12]
			vol = (float) velocity / 127.0f;
 8004a0a:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <make_sound+0x214>)
 8004a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a1c:	ed84 7a02 	vstr	s14, [r4, #8]
 8004a20:	e738      	b.n	8004894 <make_sound+0x34>
			yL = yR = y;
 8004a22:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004a26:	ed8d 0a00 	vstr	s0, [sp]
 8004a2a:	e7ac      	b.n	8004986 <make_sound+0x126>
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 8004a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a30:	e7b9      	b.n	80049a6 <make_sound+0x146>
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 8004a32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004a36:	e7c8      	b.n	80049ca <make_sound+0x16a>
 8004a38:	20003fb8 	.word	0x20003fb8
 8004a3c:	20003ef0 	.word	0x20003ef0
 8004a40:	200000fc 	.word	0x200000fc
 8004a44:	20003e90 	.word	0x20003e90
 8004a48:	20003f50 	.word	0x20003f50
 8004a4c:	20003ed0 	.word	0x20003ed0
 8004a50:	20013c40 	.word	0x20013c40
 8004a54:	20003f10 	.word	0x20003f10
 8004a58:	20003eb0 	.word	0x20003eb0
 8004a5c:	20013c44 	.word	0x20013c44
 8004a60:	20003f30 	.word	0x20003f30
 8004a64:	46fffe00 	.word	0x46fffe00
 8004a68:	20000074 	.word	0x20000074
 8004a6c:	42fe0000 	.word	0x42fe0000
 8004a70:	08015cc0 	.word	0x08015cc0
 8004a74:	20012ab4 	.word	0x20012ab4
 8004a78:	20012a65 	.word	0x20012a65

08004a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a7c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <HAL_MspInit+0x34>)
 8004a80:	2100      	movs	r1, #0
 8004a82:	9100      	str	r1, [sp, #0]
 8004a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8a:	645a      	str	r2, [r3, #68]	; 0x44
 8004a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a92:	9200      	str	r2, [sp, #0]
 8004a94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	9101      	str	r1, [sp, #4]
 8004a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aaa:	b002      	add	sp, #8
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800

08004ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ab4:	b530      	push	{r4, r5, lr}
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aba:	2214      	movs	r2, #20
 8004abc:	2100      	movs	r1, #0
 8004abe:	a803      	add	r0, sp, #12
 8004ac0:	f003 fb35 	bl	800812e <memset>
  if(hi2c->Instance==I2C2)
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <HAL_I2C_MspInit+0x68>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d124      	bne.n	8004b16 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004acc:	4c14      	ldr	r4, [pc, #80]	; (8004b20 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ace:	4815      	ldr	r0, [pc, #84]	; (8004b24 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ad0:	2500      	movs	r5, #0
 8004ad2:	9501      	str	r5, [sp, #4]
 8004ad4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ad6:	f043 0302 	orr.w	r3, r3, #2
 8004ada:	6323      	str	r3, [r4, #48]	; 0x30
 8004adc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ae6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004aea:	2312      	movs	r3, #18
 8004aec:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af0:	2101      	movs	r1, #1
 8004af2:	2303      	movs	r3, #3
 8004af4:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004af8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004afc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afe:	f000 fc4d 	bl	800539c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b02:	9502      	str	r5, [sp, #8]
 8004b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b0a:	6423      	str	r3, [r4, #64]	; 0x40
 8004b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b12:	9302      	str	r3, [sp, #8]
 8004b14:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b16:	b009      	add	sp, #36	; 0x24
 8004b18:	bd30      	pop	{r4, r5, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40005800 	.word	0x40005800
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40020400 	.word	0x40020400

08004b28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b30:	2214      	movs	r2, #20
 8004b32:	2100      	movs	r1, #0
 8004b34:	a803      	add	r0, sp, #12
 8004b36:	f003 fafa 	bl	800812e <memset>
  if(hi2s->Instance==SPI2)
 8004b3a:	6832      	ldr	r2, [r6, #0]
 8004b3c:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <HAL_I2S_MspInit+0xf0>)
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d167      	bne.n	8004c12 <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b42:	2500      	movs	r5, #0
 8004b44:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b48:	9500      	str	r5, [sp, #0]
 8004b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b4c:	4833      	ldr	r0, [pc, #204]	; (8004c1c <HAL_I2S_MspInit+0xf4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
 8004b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b56:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004b5a:	9200      	str	r2, [sp, #0]
 8004b5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b5e:	9501      	str	r5, [sp, #4]
 8004b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b62:	f042 0202 	orr.w	r2, r2, #2
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
 8004b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6a:	f002 0202 	and.w	r2, r2, #2
 8004b6e:	9201      	str	r2, [sp, #4]
 8004b70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b72:	9502      	str	r5, [sp, #8]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	f042 0204 	orr.w	r2, r2, #4
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b84:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b86:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b88:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b92:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b96:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9a:	f000 fbff 	bl	800539c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004b9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004ba8:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004baa:	481c      	ldr	r0, [pc, #112]	; (8004c1c <HAL_I2S_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004bac:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004bae:	2740      	movs	r7, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb0:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb4:	f000 fbf2 	bl	800539c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bb8:	a903      	add	r1, sp, #12
 8004bba:	4819      	ldr	r0, [pc, #100]	; (8004c20 <HAL_I2S_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bbc:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc0:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc4:	e9cd 5505 	strd	r5, r5, [sp, #20]

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004bc8:	4c16      	ldr	r4, [pc, #88]	; (8004c24 <HAL_I2S_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bca:	f000 fbe7 	bl	800539c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004bce:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <HAL_I2S_MspInit+0x100>)
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004bd0:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004bd2:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bde:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004be6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004bea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004bee:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	e9c4 0308 	strd	r0, r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004bf8:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004bfa:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bfc:	e9c4 7502 	strd	r7, r5, [r4, #8]
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004c00:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004c04:	f000 fa54 	bl	80050b0 <HAL_DMA_Init>
 8004c08:	b108      	cbz	r0, 8004c0e <HAL_I2S_MspInit+0xe6>
    {
      Error_Handler();
 8004c0a:	f7fe f9dd 	bl	8002fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8004c0e:	63b4      	str	r4, [r6, #56]	; 0x38
 8004c10:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c12:	b008      	add	sp, #32
 8004c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c18:	40003800 	.word	0x40003800
 8004c1c:	40020400 	.word	0x40020400
 8004c20:	40020800 	.word	0x40020800
 8004c24:	20013b98 	.word	0x20013b98
 8004c28:	40026070 	.word	0x40026070

08004c2c <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004c2c:	6802      	ldr	r2, [r0, #0]
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RNG_MspInit+0x28>)
 8004c30:	429a      	cmp	r2, r3
{
 8004c32:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8004c34:	d10b      	bne.n	8004c4e <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004c36:	2300      	movs	r3, #0
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RNG_MspInit+0x2c>)
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004c4e:	b002      	add	sp, #8
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	50060800 	.word	0x50060800
 8004c58:	40023800 	.word	0x40023800

08004c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	4604      	mov	r4, r0
 8004c60:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c62:	2214      	movs	r2, #20
 8004c64:	2100      	movs	r1, #0
 8004c66:	a803      	add	r0, sp, #12
 8004c68:	f003 fa61 	bl	800812e <memset>
  if(hspi->Instance==SPI3)
 8004c6c:	6822      	ldr	r2, [r4, #0]
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <HAL_SPI_MspInit+0x64>)
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d123      	bne.n	8004cbc <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c74:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8004c78:	2100      	movs	r1, #0
 8004c7a:	9101      	str	r1, [sp, #4]
 8004c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7e:	4811      	ldr	r0, [pc, #68]	; (8004cc4 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
 8004c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c88:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004c8c:	9201      	str	r2, [sp, #4]
 8004c8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c90:	9102      	str	r1, [sp, #8]
 8004c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c94:	f042 0204 	orr.w	r2, r2, #4
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	9302      	str	r3, [sp, #8]
 8004ca2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8004ca8:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004caa:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cac:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004cb0:	2306      	movs	r3, #6
 8004cb2:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb6:	a903      	add	r1, sp, #12
 8004cb8:	f000 fb70 	bl	800539c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004cbc:	b008      	add	sp, #32
 8004cbe:	bd10      	pop	{r4, pc}
 8004cc0:	40003c00 	.word	0x40003c00
 8004cc4:	40020800 	.word	0x40020800

08004cc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4604      	mov	r4, r0
 8004ccc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cce:	2214      	movs	r2, #20
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	a803      	add	r0, sp, #12
 8004cd4:	f003 fa2b 	bl	800812e <memset>
  if(htim_encoder->Instance==TIM1)
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <HAL_TIM_Encoder_MspInit+0x64>)
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d122      	bne.n	8004d26 <HAL_TIM_Encoder_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ce0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	9101      	str	r1, [sp, #4]
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cea:	4811      	ldr	r0, [pc, #68]	; (8004d30 <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
 8004cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf4:	f002 0201 	and.w	r2, r2, #1
 8004cf8:	9201      	str	r2, [sp, #4]
 8004cfa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cfc:	9102      	str	r1, [sp, #8]
 8004cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	9302      	str	r3, [sp, #8]
 8004d0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004d14:	2302      	movs	r3, #2
 8004d16:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004d20:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d22:	f000 fb3b 	bl	800539c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004d26:	b008      	add	sp, #32
 8004d28:	bd10      	pop	{r4, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40020000 	.word	0x40020000

08004d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d34:	b510      	push	{r4, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3a:	2214      	movs	r2, #20
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	a803      	add	r0, sp, #12
 8004d40:	f003 f9f5 	bl	800812e <memset>
  if(huart->Instance==USART1)
 8004d44:	6822      	ldr	r2, [r4, #0]
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <HAL_UART_MspInit+0x64>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d122      	bne.n	8004d92 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d4c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004d50:	2100      	movs	r1, #0
 8004d52:	9101      	str	r1, [sp, #4]
 8004d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d56:	4811      	ldr	r0, [pc, #68]	; (8004d9c <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d58:	f042 0210 	orr.w	r2, r2, #16
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
 8004d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d60:	f002 0210 	and.w	r2, r2, #16
 8004d64:	9201      	str	r2, [sp, #4]
 8004d66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d68:	9102      	str	r1, [sp, #8]
 8004d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6c:	f042 0202 	orr.w	r2, r2, #2
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	9302      	str	r3, [sp, #8]
 8004d7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d7c:	22c0      	movs	r2, #192	; 0xc0
 8004d7e:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d80:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d82:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d86:	2307      	movs	r3, #7
 8004d88:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d8c:	a903      	add	r1, sp, #12
 8004d8e:	f000 fb05 	bl	800539c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004d92:	b008      	add	sp, #32
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	bf00      	nop
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	40020400 	.word	0x40020400

08004da0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004da0:	4770      	bx	lr

08004da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004da2:	e7fe      	b.n	8004da2 <HardFault_Handler>

08004da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004da4:	e7fe      	b.n	8004da4 <MemManage_Handler>

08004da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004da6:	e7fe      	b.n	8004da6 <BusFault_Handler>

08004da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004da8:	e7fe      	b.n	8004da8 <UsageFault_Handler>

08004daa <SVC_Handler>:
 8004daa:	4770      	bx	lr

08004dac <DebugMon_Handler>:
 8004dac:	4770      	bx	lr

08004dae <PendSV_Handler>:
 8004dae:	4770      	bx	lr

08004db0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004db0:	f000 b8d8 	b.w	8004f64 <HAL_IncTick>

08004db4 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <DMA1_Stream4_IRQHandler+0x8>)
 8004db6:	f000 ba33 	b.w	8005220 <HAL_DMA_IRQHandler>
 8004dba:	bf00      	nop
 8004dbc:	20013b98 	.word	0x20013b98

08004dc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004dc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  TriggerSound();
 8004dc2:	f7fc fb59 	bl	8001478 <TriggerSound>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004dc6:	2080      	movs	r0, #128	; 0x80
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004dcc:	f000 bbcc 	b.w	8005568 <HAL_GPIO_EXTI_IRQHandler>

08004dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004dd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <EXTI15_10_IRQHandler+0x58>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	049a      	lsls	r2, r3, #18
 8004dd8:	d507      	bpl.n	8004dea <EXTI15_10_IRQHandler+0x1a>
  { // SW1_A
    if (sw1bon)
 8004dda:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <EXTI15_10_IRQHandler+0x5c>)
 8004ddc:	7811      	ldrb	r1, [r2, #0]
 8004dde:	2301      	movs	r3, #1
 8004de0:	b1e1      	cbz	r1, 8004e1c <EXTI15_10_IRQHandler+0x4c>
    {
      sw1dir = true;
 8004de2:	4913      	ldr	r1, [pc, #76]	; (8004e30 <EXTI15_10_IRQHandler+0x60>)
 8004de4:	700b      	strb	r3, [r1, #0]
      sw1bon = false;
 8004de6:	2300      	movs	r3, #0
    }
    else
    {
      sw1aon = true;
 8004de8:	7013      	strb	r3, [r2, #0]
    }
  }
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))
 8004dea:	4b0f      	ldr	r3, [pc, #60]	; (8004e28 <EXTI15_10_IRQHandler+0x58>)
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	045b      	lsls	r3, r3, #17
 8004df0:	d506      	bpl.n	8004e00 <EXTI15_10_IRQHandler+0x30>
  { // SW1_B
    if (sw1aon)
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <EXTI15_10_IRQHandler+0x64>)
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	b19a      	cbz	r2, 8004e20 <EXTI15_10_IRQHandler+0x50>
    {
      sw1dir = false;
 8004df8:	490d      	ldr	r1, [pc, #52]	; (8004e30 <EXTI15_10_IRQHandler+0x60>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	700a      	strb	r2, [r1, #0]
      sw1aon = false;
    }
    else
    {
      sw1bon = true;
 8004dfe:	701a      	strb	r2, [r3, #0]
    }
    // TriggerENC1(sw1dir);
  }
  // MenuSelect();
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004e00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e04:	f000 fbb0 	bl	8005568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004e08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e0c:	f000 fbac 	bl	8005568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004e10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004e18:	f000 bba6 	b.w	8005568 <HAL_GPIO_EXTI_IRQHandler>
      sw1aon = true;
 8004e1c:	4a05      	ldr	r2, [pc, #20]	; (8004e34 <EXTI15_10_IRQHandler+0x64>)
 8004e1e:	e7e3      	b.n	8004de8 <EXTI15_10_IRQHandler+0x18>
      sw1bon = true;
 8004e20:	4b02      	ldr	r3, [pc, #8]	; (8004e2c <EXTI15_10_IRQHandler+0x5c>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	e7eb      	b.n	8004dfe <EXTI15_10_IRQHandler+0x2e>
 8004e26:	bf00      	nop
 8004e28:	40013c00 	.word	0x40013c00
 8004e2c:	20013c4a 	.word	0x20013c4a
 8004e30:	20013c49 	.word	0x20013c49
 8004e34:	20013c48 	.word	0x20013c48

08004e38 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <_sbrk+0x30>)
 8004e3a:	6819      	ldr	r1, [r3, #0]
{
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8004e40:	b909      	cbnz	r1, 8004e46 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004e42:	490a      	ldr	r1, [pc, #40]	; (8004e6c <_sbrk+0x34>)
 8004e44:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	4909      	ldr	r1, [pc, #36]	; (8004e70 <_sbrk+0x38>)
 8004e4a:	4c0a      	ldr	r4, [pc, #40]	; (8004e74 <_sbrk+0x3c>)
 8004e4c:	4402      	add	r2, r0
 8004e4e:	1b09      	subs	r1, r1, r4
 8004e50:	428a      	cmp	r2, r1
 8004e52:	d906      	bls.n	8004e62 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004e54:	f003 f936 	bl	80080c4 <__errno>
 8004e58:	230c      	movs	r3, #12
 8004e5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004e60:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004e62:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8004e64:	e7fc      	b.n	8004e60 <_sbrk+0x28>
 8004e66:	bf00      	nop
 8004e68:	20012aa0 	.word	0x20012aa0
 8004e6c:	20013c58 	.word	0x20013c58
 8004e70:	20020000 	.word	0x20020000
 8004e74:	00000400 	.word	0x00000400

08004e78 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <SystemInit+0x18>)
 8004e7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e7e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e8a:	609a      	str	r2, [r3, #8]
#endif
}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	e000ed00 	.word	0xe000ed00

08004e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ecc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e9a:	e003      	b.n	8004ea4 <LoopCopyDataInit>

08004e9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ea0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ea2:	3104      	adds	r1, #4

08004ea4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ea4:	480b      	ldr	r0, [pc, #44]	; (8004ed4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ea8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004eaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004eac:	d3f6      	bcc.n	8004e9c <CopyDataInit>
  ldr  r2, =_sbss
 8004eae:	4a0b      	ldr	r2, [pc, #44]	; (8004edc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004eb0:	e002      	b.n	8004eb8 <LoopFillZerobss>

08004eb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004eb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004eb4:	f842 3b04 	str.w	r3, [r2], #4

08004eb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004eba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ebc:	d3f9      	bcc.n	8004eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ebe:	f7ff ffdb 	bl	8004e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ec2:	f003 f905 	bl	80080d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ec6:	f7fd ff1d 	bl	8002d04 <main>
  bx  lr    
 8004eca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ecc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ed0:	080172dc 	.word	0x080172dc
  ldr  r0, =_sdata
 8004ed4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ed8:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8004edc:	20003fc8 	.word	0x20003fc8
  ldr  r3, = _ebss
 8004ee0:	20013c54 	.word	0x20013c54

08004ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ee4:	e7fe      	b.n	8004ee4 <ADC_IRQHandler>
	...

08004ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ee8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004eea:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <HAL_InitTick+0x3c>)
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <HAL_InitTick+0x40>)
{
 8004eee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ef0:	7818      	ldrb	r0, [r3, #0]
 8004ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ef6:	fbb3 f3f0 	udiv	r3, r3, r0
 8004efa:	6810      	ldr	r0, [r2, #0]
 8004efc:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f00:	f000 f8aa 	bl	8005058 <HAL_SYSTICK_Config>
 8004f04:	4604      	mov	r4, r0
 8004f06:	b958      	cbnz	r0, 8004f20 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f08:	2d0f      	cmp	r5, #15
 8004f0a:	d809      	bhi.n	8004f20 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f14:	f000 f85e 	bl	8004fd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <HAL_InitTick+0x44>)
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004f20:	2001      	movs	r0, #1
 8004f22:	e7fc      	b.n	8004f1e <HAL_InitTick+0x36>
 8004f24:	20000088 	.word	0x20000088
 8004f28:	2000008c 	.word	0x2000008c
 8004f2c:	20000090 	.word	0x20000090

08004f30 <HAL_Init>:
{
 8004f30:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_Init+0x30>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f4a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f000 f82f 	bl	8004fb0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f52:	2000      	movs	r0, #0
 8004f54:	f7ff ffc8 	bl	8004ee8 <HAL_InitTick>
  HAL_MspInit();
 8004f58:	f7ff fd90 	bl	8004a7c <HAL_MspInit>
}
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	bd08      	pop	{r3, pc}
 8004f60:	40023c00 	.word	0x40023c00

08004f64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004f64:	4a03      	ldr	r2, [pc, #12]	; (8004f74 <HAL_IncTick+0x10>)
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_IncTick+0x14>)
 8004f68:	6811      	ldr	r1, [r2, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	440b      	add	r3, r1
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20013c4c 	.word	0x20013c4c
 8004f78:	2000008c 	.word	0x2000008c

08004f7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004f7c:	4b01      	ldr	r3, [pc, #4]	; (8004f84 <HAL_GetTick+0x8>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20013c4c 	.word	0x20013c4c

08004f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004f8c:	f7ff fff6 	bl	8004f7c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f90:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004f92:	bf1c      	itt	ne
 8004f94:	4b05      	ldrne	r3, [pc, #20]	; (8004fac <HAL_Delay+0x24>)
 8004f96:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004f98:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004f9a:	bf18      	it	ne
 8004f9c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f9e:	f7ff ffed 	bl	8004f7c <HAL_GetTick>
 8004fa2:	1b40      	subs	r0, r0, r5
 8004fa4:	42a0      	cmp	r0, r4
 8004fa6:	d3fa      	bcc.n	8004f9e <HAL_Delay+0x16>
  {
  }
}
 8004fa8:	bd38      	pop	{r3, r4, r5, pc}
 8004faa:	bf00      	nop
 8004fac:	2000008c 	.word	0x2000008c

08004fb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fb0:	4a07      	ldr	r2, [pc, #28]	; (8004fd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004fb2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004fb8:	041b      	lsls	r3, r3, #16
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fc0:	0200      	lsls	r0, r0, #8
 8004fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004fca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004fcc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004fce:	4770      	bx	lr
 8004fd0:	e000ed00 	.word	0xe000ed00

08004fd4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fd4:	4b17      	ldr	r3, [pc, #92]	; (8005034 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fd6:	b570      	push	{r4, r5, r6, lr}
 8004fd8:	68dc      	ldr	r4, [r3, #12]
 8004fda:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fde:	f1c4 0507 	rsb	r5, r4, #7
 8004fe2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fe4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe8:	bf28      	it	cs
 8004fea:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ff0:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ff6:	bf8c      	ite	hi
 8004ff8:	3c03      	subhi	r4, #3
 8004ffa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ffc:	ea21 0303 	bic.w	r3, r1, r3
 8005000:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005002:	fa06 f404 	lsl.w	r4, r6, r4
 8005006:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800500a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800500c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005010:	bfa8      	it	ge
 8005012:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8005016:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501a:	bfbc      	itt	lt
 800501c:	f000 000f 	andlt.w	r0, r0, #15
 8005020:	4a05      	ldrlt	r2, [pc, #20]	; (8005038 <HAL_NVIC_SetPriority+0x64>)
 8005022:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005024:	bfaa      	itet	ge
 8005026:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	bf00      	nop
 8005034:	e000ed00 	.word	0xe000ed00
 8005038:	e000ed14 	.word	0xe000ed14

0800503c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800503c:	2800      	cmp	r0, #0
 800503e:	db08      	blt.n	8005052 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005040:	0942      	lsrs	r2, r0, #5
 8005042:	2301      	movs	r3, #1
 8005044:	f000 001f 	and.w	r0, r0, #31
 8005048:	fa03 f000 	lsl.w	r0, r3, r0
 800504c:	4b01      	ldr	r3, [pc, #4]	; (8005054 <HAL_NVIC_EnableIRQ+0x18>)
 800504e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005052:	4770      	bx	lr
 8005054:	e000e100 	.word	0xe000e100

08005058 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005058:	3801      	subs	r0, #1
 800505a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800505e:	d20a      	bcs.n	8005076 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005062:	4a07      	ldr	r2, [pc, #28]	; (8005080 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005064:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005066:	21f0      	movs	r1, #240	; 0xf0
 8005068:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800506c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800506e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005070:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005076:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	e000e010 	.word	0xe000e010
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005084:	6803      	ldr	r3, [r0, #0]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800508c:	f023 0303 	bic.w	r3, r3, #3
 8005090:	2118      	movs	r1, #24
 8005092:	3a10      	subs	r2, #16
 8005094:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005098:	4904      	ldr	r1, [pc, #16]	; (80050ac <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800509a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800509c:	bf88      	it	hi
 800509e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050a0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050a2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050a4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80050a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	08016ec4 	.word	0x08016ec4

080050b0 <HAL_DMA_Init>:
{
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050b4:	f7ff ff62 	bl	8004f7c <HAL_GetTick>
 80050b8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80050ba:	2c00      	cmp	r4, #0
 80050bc:	d071      	beq.n	80051a2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80050be:	2300      	movs	r3, #0
 80050c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80050c4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80050c6:	2302      	movs	r3, #2
 80050c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80050cc:	6813      	ldr	r3, [r2, #0]
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050d4:	6821      	ldr	r1, [r4, #0]
 80050d6:	680b      	ldr	r3, [r1, #0]
 80050d8:	07d8      	lsls	r0, r3, #31
 80050da:	d43c      	bmi.n	8005156 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80050dc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050de:	4d32      	ldr	r5, [pc, #200]	; (80051a8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050e2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050e4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	68e2      	ldr	r2, [r4, #12]
 80050ec:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ee:	6922      	ldr	r2, [r4, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	6962      	ldr	r2, [r4, #20]
 80050f4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f6:	69e2      	ldr	r2, [r4, #28]
 80050f8:	4303      	orrs	r3, r0
 80050fa:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80050fc:	6a22      	ldr	r2, [r4, #32]
 80050fe:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005100:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005102:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005104:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005108:	bf02      	ittt	eq
 800510a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800510e:	4335      	orreq	r5, r6
 8005110:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8005112:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8005114:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005116:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005118:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800511c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005120:	d10b      	bne.n	800513a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8005122:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005124:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8005126:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005128:	b13d      	cbz	r5, 800513a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800512a:	b9f8      	cbnz	r0, 800516c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800512c:	2a01      	cmp	r2, #1
 800512e:	d02d      	beq.n	800518c <HAL_DMA_Init+0xdc>
 8005130:	d301      	bcc.n	8005136 <HAL_DMA_Init+0x86>
 8005132:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005134:	d101      	bne.n	800513a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005136:	01ea      	lsls	r2, r5, #7
 8005138:	d42b      	bmi.n	8005192 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800513a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff ffa1 	bl	8005084 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005142:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005144:	233f      	movs	r3, #63	; 0x3f
 8005146:	4093      	lsls	r3, r2
 8005148:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800514a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800514c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800514e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005150:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005154:	e009      	b.n	800516a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005156:	f7ff ff11 	bl	8004f7c <HAL_GetTick>
 800515a:	1b40      	subs	r0, r0, r5
 800515c:	2805      	cmp	r0, #5
 800515e:	d9b9      	bls.n	80050d4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005160:	2320      	movs	r3, #32
 8005162:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005164:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8005166:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800516a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800516c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005170:	d113      	bne.n	800519a <HAL_DMA_Init+0xea>
    switch (tmp)
 8005172:	2a03      	cmp	r2, #3
 8005174:	d8e1      	bhi.n	800513a <HAL_DMA_Init+0x8a>
 8005176:	a001      	add	r0, pc, #4	; (adr r0, 800517c <HAL_DMA_Init+0xcc>)
 8005178:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800517c:	08005193 	.word	0x08005193
 8005180:	08005137 	.word	0x08005137
 8005184:	08005193 	.word	0x08005193
 8005188:	0800518d 	.word	0x0800518d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800518c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8005190:	d1d3      	bne.n	800513a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005192:	2340      	movs	r3, #64	; 0x40
 8005194:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005196:	2001      	movs	r0, #1
 8005198:	e7e5      	b.n	8005166 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800519a:	2a02      	cmp	r2, #2
 800519c:	d9f9      	bls.n	8005192 <HAL_DMA_Init+0xe2>
 800519e:	2a03      	cmp	r2, #3
 80051a0:	e7c8      	b.n	8005134 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80051a2:	2001      	movs	r0, #1
 80051a4:	e7e1      	b.n	800516a <HAL_DMA_Init+0xba>
 80051a6:	bf00      	nop
 80051a8:	f010803f 	.word	0xf010803f

080051ac <HAL_DMA_Start_IT>:
{
 80051ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80051ae:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80051b2:	2c01      	cmp	r4, #1
 80051b4:	d032      	beq.n	800521c <HAL_DMA_Start_IT+0x70>
 80051b6:	2401      	movs	r4, #1
 80051b8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80051bc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80051c2:	2c01      	cmp	r4, #1
 80051c4:	f04f 0500 	mov.w	r5, #0
 80051c8:	f04f 0402 	mov.w	r4, #2
 80051cc:	d124      	bne.n	8005218 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80051ce:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051d2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051d6:	6825      	ldr	r5, [r4, #0]
 80051d8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80051dc:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80051de:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051e0:	6883      	ldr	r3, [r0, #8]
 80051e2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80051e4:	bf0e      	itee	eq
 80051e6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80051e8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80051ea:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051ec:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80051ee:	bf08      	it	eq
 80051f0:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051f2:	233f      	movs	r3, #63	; 0x3f
 80051f4:	4093      	lsls	r3, r2
 80051f6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	f043 0316 	orr.w	r3, r3, #22
 80051fe:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005200:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005202:	b11b      	cbz	r3, 800520c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	f043 0308 	orr.w	r3, r3, #8
 800520a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2000      	movs	r0, #0
}
 8005216:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8005218:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800521c:	2002      	movs	r0, #2
 800521e:	e7fa      	b.n	8005216 <HAL_DMA_Start_IT+0x6a>

08005220 <HAL_DMA_IRQHandler>:
{
 8005220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005226:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005228:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800522a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800522c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800522e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005230:	2208      	movs	r2, #8
 8005232:	409a      	lsls	r2, r3
 8005234:	4232      	tst	r2, r6
{
 8005236:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005238:	d00c      	beq.n	8005254 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800523a:	6801      	ldr	r1, [r0, #0]
 800523c:	6808      	ldr	r0, [r1, #0]
 800523e:	0740      	lsls	r0, r0, #29
 8005240:	d508      	bpl.n	8005254 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005242:	6808      	ldr	r0, [r1, #0]
 8005244:	f020 0004 	bic.w	r0, r0, #4
 8005248:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800524a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800524c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005254:	2201      	movs	r2, #1
 8005256:	409a      	lsls	r2, r3
 8005258:	4232      	tst	r2, r6
 800525a:	d008      	beq.n	800526e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800525c:	6821      	ldr	r1, [r4, #0]
 800525e:	6949      	ldr	r1, [r1, #20]
 8005260:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005262:	bf41      	itttt	mi
 8005264:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005266:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8005268:	f042 0202 	orrmi.w	r2, r2, #2
 800526c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800526e:	2204      	movs	r2, #4
 8005270:	409a      	lsls	r2, r3
 8005272:	4232      	tst	r2, r6
 8005274:	d008      	beq.n	8005288 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005276:	6821      	ldr	r1, [r4, #0]
 8005278:	6809      	ldr	r1, [r1, #0]
 800527a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800527c:	bf41      	itttt	mi
 800527e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005280:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8005282:	f042 0204 	orrmi.w	r2, r2, #4
 8005286:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005288:	2210      	movs	r2, #16
 800528a:	409a      	lsls	r2, r3
 800528c:	4232      	tst	r2, r6
 800528e:	d010      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	0709      	lsls	r1, r1, #28
 8005296:	d50c      	bpl.n	80052b2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005298:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	0350      	lsls	r0, r2, #13
 800529e:	d537      	bpl.n	8005310 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	0319      	lsls	r1, r3, #12
 80052a4:	d401      	bmi.n	80052aa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80052a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a8:	e000      	b.n	80052ac <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80052ac:	b10b      	cbz	r3, 80052b2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80052ae:	4620      	mov	r0, r4
 80052b0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052b2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80052b4:	2220      	movs	r2, #32
 80052b6:	408a      	lsls	r2, r1
 80052b8:	4232      	tst	r2, r6
 80052ba:	d03a      	beq.n	8005332 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	06c6      	lsls	r6, r0, #27
 80052c2:	d536      	bpl.n	8005332 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052c4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052c6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80052ca:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052cc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052ce:	d127      	bne.n	8005320 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052d0:	f022 0216 	bic.w	r2, r2, #22
 80052d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052dc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052e0:	b90a      	cbnz	r2, 80052e6 <HAL_DMA_IRQHandler+0xc6>
 80052e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80052e4:	b11a      	cbz	r2, 80052ee <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	f022 0208 	bic.w	r2, r2, #8
 80052ec:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ee:	233f      	movs	r3, #63	; 0x3f
 80052f0:	408b      	lsls	r3, r1
 80052f2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80052f4:	2300      	movs	r3, #0
 80052f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005300:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8005302:	2b00      	cmp	r3, #0
 8005304:	d045      	beq.n	8005392 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8005306:	4620      	mov	r0, r4
}
 8005308:	b003      	add	sp, #12
 800530a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800530e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005314:	bf5e      	ittt	pl
 8005316:	681a      	ldrpl	r2, [r3, #0]
 8005318:	f022 0208 	bicpl.w	r2, r2, #8
 800531c:	601a      	strpl	r2, [r3, #0]
 800531e:	e7c2      	b.n	80052a6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005320:	0350      	lsls	r0, r2, #13
 8005322:	d527      	bpl.n	8005374 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	0319      	lsls	r1, r3, #12
 8005328:	d431      	bmi.n	800538e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800532a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800532c:	b10b      	cbz	r3, 8005332 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800532e:	4620      	mov	r0, r4
 8005330:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005332:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005334:	b36b      	cbz	r3, 8005392 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005336:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005338:	07da      	lsls	r2, r3, #31
 800533a:	d519      	bpl.n	8005370 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 800533c:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800533e:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005340:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800534c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005350:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8005354:	9b01      	ldr	r3, [sp, #4]
 8005356:	3301      	adds	r3, #1
 8005358:	42bb      	cmp	r3, r7
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	d802      	bhi.n	8005364 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	07db      	lsls	r3, r3, #31
 8005362:	d4f7      	bmi.n	8005354 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8005364:	2300      	movs	r3, #0
 8005366:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800536a:	2301      	movs	r3, #1
 800536c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005370:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005372:	e7c6      	b.n	8005302 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800537a:	d108      	bne.n	800538e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800537c:	6819      	ldr	r1, [r3, #0]
 800537e:	f021 0110 	bic.w	r1, r1, #16
 8005382:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005384:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8005386:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800538a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800538e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005390:	e7cc      	b.n	800532c <HAL_DMA_IRQHandler+0x10c>
}
 8005392:	b003      	add	sp, #12
 8005394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005396:	bf00      	nop
 8005398:	20000088 	.word	0x20000088

0800539c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053a2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005554 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053a8:	4a68      	ldr	r2, [pc, #416]	; (800554c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053aa:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8005558 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053ae:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053b0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80053b2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053b4:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80053b6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053b8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80053ba:	42ac      	cmp	r4, r5
 80053bc:	f040 80b0 	bne.w	8005520 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053c0:	684c      	ldr	r4, [r1, #4]
 80053c2:	f024 0c10 	bic.w	ip, r4, #16
 80053c6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80053ca:	2603      	movs	r6, #3
 80053cc:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 80053d0:	fa06 f60e 	lsl.w	r6, r6, lr
 80053d4:	2f01      	cmp	r7, #1
 80053d6:	ea6f 0606 	mvn.w	r6, r6
 80053da:	d811      	bhi.n	8005400 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 80053dc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053de:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053e2:	68cf      	ldr	r7, [r1, #12]
 80053e4:	fa07 f70e 	lsl.w	r7, r7, lr
 80053e8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80053ec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80053ee:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053f0:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053f4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80053f8:	409f      	lsls	r7, r3
 80053fa:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80053fe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8005400:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005402:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005406:	688f      	ldr	r7, [r1, #8]
 8005408:	fa07 f70e 	lsl.w	r7, r7, lr
 800540c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005410:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8005414:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005416:	d116      	bne.n	8005446 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8005418:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800541c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005420:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005424:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005428:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800542c:	f04f 0c0f 	mov.w	ip, #15
 8005430:	fa0c fc0b 	lsl.w	ip, ip, fp
 8005434:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005438:	690f      	ldr	r7, [r1, #16]
 800543a:	fa07 f70b 	lsl.w	r7, r7, fp
 800543e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8005442:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8005446:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005448:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800544a:	f004 0703 	and.w	r7, r4, #3
 800544e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8005452:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8005456:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005458:	00e6      	lsls	r6, r4, #3
 800545a:	d561      	bpl.n	8005520 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545c:	f04f 0b00 	mov.w	fp, #0
 8005460:	f8cd b00c 	str.w	fp, [sp, #12]
 8005464:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005468:	4e39      	ldr	r6, [pc, #228]	; (8005550 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800546a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800546e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8005472:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8005476:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800547a:	9703      	str	r7, [sp, #12]
 800547c:	9f03      	ldr	r7, [sp, #12]
 800547e:	f023 0703 	bic.w	r7, r3, #3
 8005482:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8005486:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800548a:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800548e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005492:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005496:	f04f 0c0f 	mov.w	ip, #15
 800549a:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800549e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054a0:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054a4:	d043      	beq.n	800552e <HAL_GPIO_Init+0x192>
 80054a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054aa:	42b0      	cmp	r0, r6
 80054ac:	d041      	beq.n	8005532 <HAL_GPIO_Init+0x196>
 80054ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054b2:	42b0      	cmp	r0, r6
 80054b4:	d03f      	beq.n	8005536 <HAL_GPIO_Init+0x19a>
 80054b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054ba:	42b0      	cmp	r0, r6
 80054bc:	d03d      	beq.n	800553a <HAL_GPIO_Init+0x19e>
 80054be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054c2:	42b0      	cmp	r0, r6
 80054c4:	d03b      	beq.n	800553e <HAL_GPIO_Init+0x1a2>
 80054c6:	4548      	cmp	r0, r9
 80054c8:	d03b      	beq.n	8005542 <HAL_GPIO_Init+0x1a6>
 80054ca:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80054ce:	42b0      	cmp	r0, r6
 80054d0:	d039      	beq.n	8005546 <HAL_GPIO_Init+0x1aa>
 80054d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054d6:	42b0      	cmp	r0, r6
 80054d8:	bf14      	ite	ne
 80054da:	2608      	movne	r6, #8
 80054dc:	2607      	moveq	r6, #7
 80054de:	fa06 f60e 	lsl.w	r6, r6, lr
 80054e2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054e6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80054e8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80054ea:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054ec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80054f0:	bf0c      	ite	eq
 80054f2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80054f4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80054f6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80054f8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054fa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80054fe:	bf0c      	ite	eq
 8005500:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005502:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8005504:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005506:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005508:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800550c:	bf0c      	ite	eq
 800550e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005510:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8005512:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8005514:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005516:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8005518:	bf54      	ite	pl
 800551a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800551c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800551e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005520:	3301      	adds	r3, #1
 8005522:	2b10      	cmp	r3, #16
 8005524:	f47f af45 	bne.w	80053b2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8005528:	b005      	add	sp, #20
 800552a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800552e:	465e      	mov	r6, fp
 8005530:	e7d5      	b.n	80054de <HAL_GPIO_Init+0x142>
 8005532:	2601      	movs	r6, #1
 8005534:	e7d3      	b.n	80054de <HAL_GPIO_Init+0x142>
 8005536:	2602      	movs	r6, #2
 8005538:	e7d1      	b.n	80054de <HAL_GPIO_Init+0x142>
 800553a:	2603      	movs	r6, #3
 800553c:	e7cf      	b.n	80054de <HAL_GPIO_Init+0x142>
 800553e:	2604      	movs	r6, #4
 8005540:	e7cd      	b.n	80054de <HAL_GPIO_Init+0x142>
 8005542:	2605      	movs	r6, #5
 8005544:	e7cb      	b.n	80054de <HAL_GPIO_Init+0x142>
 8005546:	2606      	movs	r6, #6
 8005548:	e7c9      	b.n	80054de <HAL_GPIO_Init+0x142>
 800554a:	bf00      	nop
 800554c:	40013c00 	.word	0x40013c00
 8005550:	40020000 	.word	0x40020000
 8005554:	40023800 	.word	0x40023800
 8005558:	40021400 	.word	0x40021400

0800555c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800555c:	b10a      	cbz	r2, 8005562 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800555e:	6181      	str	r1, [r0, #24]
  }
}
 8005560:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005562:	0409      	lsls	r1, r1, #16
 8005564:	e7fb      	b.n	800555e <HAL_GPIO_WritePin+0x2>

08005566 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005566:	4770      	bx	lr

08005568 <HAL_GPIO_EXTI_IRQHandler>:
{
 8005568:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800556c:	6959      	ldr	r1, [r3, #20]
 800556e:	4201      	tst	r1, r0
 8005570:	d002      	beq.n	8005578 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005572:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005574:	f7ff fff7 	bl	8005566 <HAL_GPIO_EXTI_Callback>
}
 8005578:	bd08      	pop	{r3, pc}
 800557a:	bf00      	nop
 800557c:	40013c00 	.word	0x40013c00

08005580 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005580:	6801      	ldr	r1, [r0, #0]
 8005582:	694b      	ldr	r3, [r1, #20]
 8005584:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	d010      	beq.n	80055b0 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005592:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8005594:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005598:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800559c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055a0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055a6:	f043 0304 	orr.w	r3, r3, #4
 80055aa:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80055ac:	2001      	movs	r0, #1
 80055ae:	4770      	bx	lr
  }
  return HAL_OK;
 80055b0:	4618      	mov	r0, r3
}
 80055b2:	4770      	bx	lr

080055b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80055b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b8:	4604      	mov	r4, r0
 80055ba:	4616      	mov	r6, r2
 80055bc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055be:	b28f      	uxth	r7, r1
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	6968      	ldr	r0, [r5, #20]
 80055c4:	ea37 0000 	bics.w	r0, r7, r0
 80055c8:	d017      	beq.n	80055fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ca:	696b      	ldr	r3, [r5, #20]
 80055cc:	055a      	lsls	r2, r3, #21
 80055ce:	d516      	bpl.n	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80055dc:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80055de:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055ee:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80055f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80055f8:	2001      	movs	r0, #1
}
 80055fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80055fe:	1c73      	adds	r3, r6, #1
 8005600:	d0df      	beq.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7ff fcbb 	bl	8004f7c <HAL_GetTick>
 8005606:	eba0 0008 	sub.w	r0, r0, r8
 800560a:	42b0      	cmp	r0, r6
 800560c:	d801      	bhi.n	8005612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 800560e:	2e00      	cmp	r6, #0
 8005610:	d1d6      	bne.n	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005612:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005614:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005616:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005618:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005620:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005622:	f042 0220 	orr.w	r2, r2, #32
 8005626:	e7e4      	b.n	80055f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08005628 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4604      	mov	r4, r0
 800562c:	460d      	mov	r5, r1
 800562e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	075b      	lsls	r3, r3, #29
 8005636:	d501      	bpl.n	800563c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005638:	2000      	movs	r0, #0
}
 800563a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff ff9f 	bl	8005580 <I2C_IsAcknowledgeFailed>
 8005642:	b9a8      	cbnz	r0, 8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005644:	1c6a      	adds	r2, r5, #1
 8005646:	d0f3      	beq.n	8005630 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005648:	f7ff fc98 	bl	8004f7c <HAL_GetTick>
 800564c:	1b80      	subs	r0, r0, r6
 800564e:	42a8      	cmp	r0, r5
 8005650:	d801      	bhi.n	8005656 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005652:	2d00      	cmp	r5, #0
 8005654:	d1ec      	bne.n	8005630 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005656:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005658:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800565a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800565c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005660:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005664:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005666:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	f042 0220 	orr.w	r2, r2, #32
 800566e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005670:	2001      	movs	r0, #1
 8005672:	e7e2      	b.n	800563a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005674 <I2C_WaitOnFlagUntilTimeout>:
{
 8005674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005678:	9e08      	ldr	r6, [sp, #32]
 800567a:	4604      	mov	r4, r0
 800567c:	4690      	mov	r8, r2
 800567e:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005680:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8005684:	b28d      	uxth	r5, r1
 8005686:	6821      	ldr	r1, [r4, #0]
 8005688:	f1b9 0f01 	cmp.w	r9, #1
 800568c:	bf0c      	ite	eq
 800568e:	694b      	ldreq	r3, [r1, #20]
 8005690:	698b      	ldrne	r3, [r1, #24]
 8005692:	ea35 0303 	bics.w	r3, r5, r3
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	4598      	cmp	r8, r3
 800569e:	d001      	beq.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80056a0:	2000      	movs	r0, #0
 80056a2:	e016      	b.n	80056d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80056a4:	1c7b      	adds	r3, r7, #1
 80056a6:	d0ef      	beq.n	8005688 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a8:	f7ff fc68 	bl	8004f7c <HAL_GetTick>
 80056ac:	1b80      	subs	r0, r0, r6
 80056ae:	42b8      	cmp	r0, r7
 80056b0:	d801      	bhi.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80056b2:	2f00      	cmp	r7, #0
 80056b4:	d1e7      	bne.n	8005686 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056b6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80056b8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056ba:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80056c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056ca:	f042 0220 	orr.w	r2, r2, #32
 80056ce:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80056d0:	2001      	movs	r0, #1
}
 80056d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080056d6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80056d6:	b570      	push	{r4, r5, r6, lr}
 80056d8:	4604      	mov	r4, r0
 80056da:	460d      	mov	r5, r1
 80056dc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	061b      	lsls	r3, r3, #24
 80056e4:	d501      	bpl.n	80056ea <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80056e6:	2000      	movs	r0, #0
}
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7ff ff48 	bl	8005580 <I2C_IsAcknowledgeFailed>
 80056f0:	b9a8      	cbnz	r0, 800571e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	1c6a      	adds	r2, r5, #1
 80056f4:	d0f3      	beq.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7ff fc41 	bl	8004f7c <HAL_GetTick>
 80056fa:	1b80      	subs	r0, r0, r6
 80056fc:	42a8      	cmp	r0, r5
 80056fe:	d801      	bhi.n	8005704 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005700:	2d00      	cmp	r5, #0
 8005702:	d1ec      	bne.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005704:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005706:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005708:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800570a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800570e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005712:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005714:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005718:	f042 0220 	orr.w	r2, r2, #32
 800571c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800571e:	2001      	movs	r0, #1
 8005720:	e7e2      	b.n	80056e8 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08005724 <HAL_I2C_Init>:
{
 8005724:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005726:	4604      	mov	r4, r0
 8005728:	b908      	cbnz	r0, 800572e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800572a:	2001      	movs	r0, #1
}
 800572c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800572e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005732:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005736:	b91b      	cbnz	r3, 8005740 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005738:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800573c:	f7ff f9ba 	bl	8004ab4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005740:	2324      	movs	r3, #36	; 0x24
 8005742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005756:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800575e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005760:	f000 fe90 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	4a41      	ldr	r2, [pc, #260]	; (800586c <HAL_I2C_Init+0x148>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d84d      	bhi.n	8005808 <HAL_I2C_Init+0xe4>
 800576c:	4a40      	ldr	r2, [pc, #256]	; (8005870 <HAL_I2C_Init+0x14c>)
 800576e:	4290      	cmp	r0, r2
 8005770:	d9db      	bls.n	800572a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005772:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005774:	493f      	ldr	r1, [pc, #252]	; (8005874 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005776:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005778:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800577c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8005780:	430d      	orrs	r5, r1
 8005782:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005784:	6a15      	ldr	r5, [r2, #32]
 8005786:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800578a:	3101      	adds	r1, #1
 800578c:	4329      	orrs	r1, r5
 800578e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005790:	69d1      	ldr	r1, [r2, #28]
 8005792:	4d36      	ldr	r5, [pc, #216]	; (800586c <HAL_I2C_Init+0x148>)
 8005794:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005798:	42ab      	cmp	r3, r5
 800579a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800579e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80057a2:	d848      	bhi.n	8005836 <HAL_I2C_Init+0x112>
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	bf38      	it	cc
 80057b4:	2304      	movcc	r3, #4
 80057b6:	430b      	orrs	r3, r1
 80057b8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057ba:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80057be:	6811      	ldr	r1, [r2, #0]
 80057c0:	4303      	orrs	r3, r0
 80057c2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80057c6:	430b      	orrs	r3, r1
 80057c8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057ca:	6891      	ldr	r1, [r2, #8]
 80057cc:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80057d0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80057d4:	4303      	orrs	r3, r0
 80057d6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80057da:	430b      	orrs	r3, r1
 80057dc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057de:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80057e2:	68d1      	ldr	r1, [r2, #12]
 80057e4:	4303      	orrs	r3, r0
 80057e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80057ea:	430b      	orrs	r3, r1
 80057ec:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005800:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005802:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005806:	e791      	b.n	800572c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <HAL_I2C_Init+0x154>)
 800580a:	4290      	cmp	r0, r2
 800580c:	d98d      	bls.n	800572a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800580e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005810:	4e18      	ldr	r6, [pc, #96]	; (8005874 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005812:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005814:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005818:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800581c:	4335      	orrs	r5, r6
 800581e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005820:	6a15      	ldr	r5, [r2, #32]
 8005822:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005826:	4371      	muls	r1, r6
 8005828:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800582c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005830:	fbb1 f1f6 	udiv	r1, r1, r6
 8005834:	e7a9      	b.n	800578a <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005836:	68a5      	ldr	r5, [r4, #8]
 8005838:	b955      	cbnz	r5, 8005850 <HAL_I2C_Init+0x12c>
 800583a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800583e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005848:	b16b      	cbz	r3, 8005866 <HAL_I2C_Init+0x142>
 800584a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584e:	e7b2      	b.n	80057b6 <HAL_I2C_Init+0x92>
 8005850:	2519      	movs	r5, #25
 8005852:	436b      	muls	r3, r5
 8005854:	fbb0 f0f3 	udiv	r0, r0, r3
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585e:	b113      	cbz	r3, 8005866 <HAL_I2C_Init+0x142>
 8005860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005864:	e7a7      	b.n	80057b6 <HAL_I2C_Init+0x92>
 8005866:	2301      	movs	r3, #1
 8005868:	e7a5      	b.n	80057b6 <HAL_I2C_Init+0x92>
 800586a:	bf00      	nop
 800586c:	000186a0 	.word	0x000186a0
 8005870:	001e847f 	.word	0x001e847f
 8005874:	000f4240 	.word	0x000f4240
 8005878:	003d08ff 	.word	0x003d08ff

0800587c <HAL_I2C_Master_Transmit>:
{
 800587c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005880:	4604      	mov	r4, r0
 8005882:	461f      	mov	r7, r3
 8005884:	460d      	mov	r5, r1
 8005886:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005888:	f7ff fb78 	bl	8004f7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800588c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005890:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005892:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005894:	d004      	beq.n	80058a0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8005896:	2502      	movs	r5, #2
}
 8005898:	4628      	mov	r0, r5
 800589a:	b004      	add	sp, #16
 800589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a0:	9000      	str	r0, [sp, #0]
 80058a2:	2319      	movs	r3, #25
 80058a4:	2201      	movs	r2, #1
 80058a6:	495b      	ldr	r1, [pc, #364]	; (8005a14 <HAL_I2C_Master_Transmit+0x198>)
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff fee3 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d1f1      	bne.n	8005896 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80058b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d0ed      	beq.n	8005896 <HAL_I2C_Master_Transmit+0x1a>
 80058ba:	2301      	movs	r3, #1
 80058bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80058c6:	bf5e      	ittt	pl
 80058c8:	681a      	ldrpl	r2, [r3, #0]
 80058ca:	f042 0201 	orrpl.w	r2, r2, #1
 80058ce:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058d8:	2221      	movs	r2, #33	; 0x21
 80058da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058de:	2210      	movs	r2, #16
 80058e0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058e4:	2200      	movs	r2, #0
 80058e6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80058e8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058ec:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058ee:	4a4a      	ldr	r2, [pc, #296]	; (8005a18 <HAL_I2C_Master_Transmit+0x19c>)
 80058f0:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80058f4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058f8:	2a08      	cmp	r2, #8
 80058fa:	d004      	beq.n	8005906 <HAL_I2C_Master_Transmit+0x8a>
 80058fc:	2a01      	cmp	r2, #1
 80058fe:	d002      	beq.n	8005906 <HAL_I2C_Master_Transmit+0x8a>
 8005900:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005904:	d104      	bne.n	8005910 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e002      	b.n	8005916 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005910:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005912:	2a12      	cmp	r2, #18
 8005914:	d0f7      	beq.n	8005906 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005916:	2200      	movs	r2, #0
 8005918:	9600      	str	r6, [sp, #0]
 800591a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005920:	4620      	mov	r0, r4
 8005922:	f7ff fea7 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	b138      	cbz	r0, 800593a <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800592e:	bf44      	itt	mi
 8005930:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8005934:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005936:	2501      	movs	r5, #1
 8005938:	e7ae      	b.n	8005898 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005940:	d121      	bne.n	8005986 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005942:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005946:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005948:	4633      	mov	r3, r6
 800594a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800594c:	4933      	ldr	r1, [pc, #204]	; (8005a1c <HAL_I2C_Master_Transmit+0x1a0>)
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff fe30 	bl	80055b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005954:	4605      	mov	r5, r0
 8005956:	2800      	cmp	r0, #0
 8005958:	d1ed      	bne.n	8005936 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	9003      	str	r0, [sp, #12]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	9203      	str	r2, [sp, #12]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	9303      	str	r3, [sp, #12]
 8005966:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8005968:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800596a:	b9f3      	cbnz	r3, 80059aa <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596c:	6821      	ldr	r1, [r4, #0]
 800596e:	680a      	ldr	r2, [r1, #0]
 8005970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005974:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005976:	2220      	movs	r2, #32
 8005978:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800597c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005980:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005984:	e788      	b.n	8005898 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005986:	11eb      	asrs	r3, r5, #7
 8005988:	f003 0306 	and.w	r3, r3, #6
 800598c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005990:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005992:	4923      	ldr	r1, [pc, #140]	; (8005a20 <HAL_I2C_Master_Transmit+0x1a4>)
 8005994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005996:	4633      	mov	r3, r6
 8005998:	4620      	mov	r0, r4
 800599a:	f7ff fe0b 	bl	80055b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d1c9      	bne.n	8005936 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	b2ed      	uxtb	r5, r5
 80059a6:	611d      	str	r5, [r3, #16]
 80059a8:	e7ce      	b.n	8005948 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059aa:	4632      	mov	r2, r6
 80059ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7ff fe91 	bl	80056d6 <I2C_WaitOnTXEFlagUntilTimeout>
 80059b4:	b140      	cbz	r0, 80059c8 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d1bc      	bne.n	8005936 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e7b6      	b.n	8005936 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ca:	6820      	ldr	r0, [r4, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80059d2:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80059d4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80059d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80059d8:	3a01      	subs	r2, #1
 80059da:	b292      	uxth	r2, r2
 80059dc:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80059de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059e0:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80059e2:	1e51      	subs	r1, r2, #1
 80059e4:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059e6:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80059e8:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059ea:	d50a      	bpl.n	8005a02 <HAL_I2C_Master_Transmit+0x186>
 80059ec:	b149      	cbz	r1, 8005a02 <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ee:	7859      	ldrb	r1, [r3, #1]
 80059f0:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80059f2:	3302      	adds	r3, #2
 80059f4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80059f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80059fc:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80059fe:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005a00:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a02:	4632      	mov	r2, r6
 8005a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a06:	4620      	mov	r0, r4
 8005a08:	f7ff fe0e 	bl	8005628 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d0ab      	beq.n	8005968 <HAL_I2C_Master_Transmit+0xec>
 8005a10:	e7d1      	b.n	80059b6 <HAL_I2C_Master_Transmit+0x13a>
 8005a12:	bf00      	nop
 8005a14:	00100002 	.word	0x00100002
 8005a18:	ffff0000 	.word	0xffff0000
 8005a1c:	00010002 	.word	0x00010002
 8005a20:	00010008 	.word	0x00010008

08005a24 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a26:	4604      	mov	r4, r0
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d041      	beq.n	8005ab0 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005a30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a34:	b92b      	cbnz	r3, 8005a42 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a36:	4b42      	ldr	r3, [pc, #264]	; (8005b40 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8005a38:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a3c:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a3e:	f7ff f873 	bl	8004b28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a42:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a44:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a46:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a4a:	69d3      	ldr	r3, [r2, #28]
 8005a4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a50:	f023 030f 	bic.w	r3, r3, #15
 8005a54:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a56:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8005a58:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a5a:	428b      	cmp	r3, r1
 8005a5c:	d031      	beq.n	8005ac2 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a5e:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a60:	2b00      	cmp	r3, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a62:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8005a64:	bf14      	ite	ne
 8005a66:	2520      	movne	r5, #32
 8005a68:	2510      	moveq	r5, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a6a:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a6c:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8005a6e:	bf98      	it	ls
 8005a70:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a72:	f000 fdbf 	bl	80065f4 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6961      	ldr	r1, [r4, #20]
 8005a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005a80:	68e3      	ldr	r3, [r4, #12]
 8005a82:	220a      	movs	r2, #10
 8005a84:	b1b3      	cbz	r3, 8005ab4 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a86:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a8c:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a8e:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a90:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a94:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8005a96:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a9a:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a9e:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005aa0:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005aa2:	1e99      	subs	r1, r3, #2
 8005aa4:	29fd      	cmp	r1, #253	; 0xfd
 8005aa6:	d90e      	bls.n	8005ac6 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005aaa:	f043 0310 	orr.w	r3, r3, #16
 8005aae:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	e044      	b.n	8005b3e <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ab4:	00eb      	lsls	r3, r5, #3
 8005ab6:	e7e7      	b.n	8005a88 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ab8:	230a      	movs	r3, #10
 8005aba:	fbb0 f0f5 	udiv	r0, r0, r5
 8005abe:	4343      	muls	r3, r0
 8005ac0:	e7e5      	b.n	8005a8e <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	e7ed      	b.n	8005aa2 <HAL_I2S_Init+0x7e>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	6922      	ldr	r2, [r4, #16]
 8005aca:	6821      	ldr	r1, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005acc:	68e5      	ldr	r5, [r4, #12]
 8005ace:	69a0      	ldr	r0, [r4, #24]
 8005ad0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005b50 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005ad8:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8005adc:	ea46 0203 	orr.w	r2, r6, r3
 8005ae0:	69cf      	ldr	r7, [r1, #28]
 8005ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae6:	432a      	orrs	r2, r5
 8005ae8:	4302      	orrs	r2, r0
 8005aea:	ea07 070c 	and.w	r7, r7, ip
 8005aee:	433a      	orrs	r2, r7
 8005af0:	61ca      	str	r2, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005af2:	6a22      	ldr	r2, [r4, #32]
 8005af4:	2a01      	cmp	r2, #1
 8005af6:	d11d      	bne.n	8005b34 <HAL_I2S_Init+0x110>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005af8:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <HAL_I2S_Init+0x120>)
 8005afa:	6362      	str	r2, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005afc:	4f12      	ldr	r7, [pc, #72]	; (8005b48 <HAL_I2S_Init+0x124>)
 8005afe:	4a13      	ldr	r2, [pc, #76]	; (8005b4c <HAL_I2S_Init+0x128>)
 8005b00:	42b9      	cmp	r1, r7
 8005b02:	bf18      	it	ne
 8005b04:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005b08:	432b      	orrs	r3, r5
 8005b0a:	69d1      	ldr	r1, [r2, #28]
 8005b0c:	ea01 010c 	and.w	r1, r1, ip
 8005b10:	61d1      	str	r1, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b12:	2102      	movs	r1, #2
 8005b14:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b16:	69d7      	ldr	r7, [r2, #28]
 8005b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b1c:	4303      	orrs	r3, r0

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b1e:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8005b22:	ea43 0307 	orr.w	r3, r3, r7
 8005b26:	bf14      	ite	ne
 8005b28:	2100      	movne	r1, #0
 8005b2a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005b2e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b30:	430b      	orrs	r3, r1
 8005b32:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b34:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b36:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b38:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8005b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b40:	08005c3d 	.word	0x08005c3d
 8005b44:	08005d61 	.word	0x08005d61
 8005b48:	40003800 	.word	0x40003800
 8005b4c:	40003400 	.word	0x40003400
 8005b50:	fffff040 	.word	0xfffff040

08005b54 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4604      	mov	r4, r0
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d04e      	beq.n	8005bfa <HAL_I2S_Transmit_DMA+0xa6>
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	d04c      	beq.n	8005bfa <HAL_I2S_Transmit_DMA+0xa6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005b60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d00a      	beq.n	8005b7e <HAL_I2S_Transmit_DMA+0x2a>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005b6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_I2S_Transmit_DMA+0x2e>
  {
    __HAL_UNLOCK(hi2s);
 8005b7a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8005b7e:	2002      	movs	r0, #2
 8005b80:	e027      	b.n	8005bd2 <HAL_I2S_Transmit_DMA+0x7e>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005b82:	2003      	movs	r0, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005b84:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005b86:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b8a:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005b8c:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 8005b8e:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005b90:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005b94:	4283      	cmp	r3, r0
 8005b96:	d001      	beq.n	8005b9c <HAL_I2S_Transmit_DMA+0x48>
 8005b98:	2b05      	cmp	r3, #5
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_I2S_Transmit_DMA+0x80>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005b9c:	0053      	lsls	r3, r2, #1
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005ba2:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->TxXferSize = Size;
    hi2s->TxXferCount = Size;
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005ba4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ba6:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <HAL_I2S_Transmit_DMA+0xac>)
 8005ba8:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005baa:	4b16      	ldr	r3, [pc, #88]	; (8005c04 <HAL_I2S_Transmit_DMA+0xb0>)
 8005bac:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005bae:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <HAL_I2S_Transmit_DMA+0xb4>)
 8005bb0:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005bb2:	f105 020c 	add.w	r2, r5, #12
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8005bb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005bb8:	f7ff faf8 	bl	80051ac <HAL_DMA_Start_IT>
 8005bbc:	b168      	cbz	r0, 8005bda <HAL_I2S_Transmit_DMA+0x86>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005bc0:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bc2:	f043 0308 	orr.w	r3, r3, #8
 8005bc6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005bc8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
  }

  __HAL_UNLOCK(hi2s);
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = Size;
 8005bd4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005bd6:	8562      	strh	r2, [r4, #42]	; 0x2a
 8005bd8:	e7e4      	b.n	8005ba4 <HAL_I2S_Transmit_DMA+0x50>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	69da      	ldr	r2, [r3, #28]
 8005bde:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8005be0:	bf5e      	ittt	pl
 8005be2:	69da      	ldrpl	r2, [r3, #28]
 8005be4:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8005be8:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bee:	bf5e      	ittt	pl
 8005bf0:	685a      	ldrpl	r2, [r3, #4]
 8005bf2:	f042 0202 	orrpl.w	r2, r2, #2
 8005bf6:	605a      	strpl	r2, [r3, #4]
 8005bf8:	e7e8      	b.n	8005bcc <HAL_I2S_Transmit_DMA+0x78>
    return  HAL_ERROR;
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	e7e9      	b.n	8005bd2 <HAL_I2S_Transmit_DMA+0x7e>
 8005bfe:	bf00      	nop
 8005c00:	08005c0d 	.word	0x08005c0d
 8005c04:	08005c17 	.word	0x08005c17
 8005c08:	08005d37 	.word	0x08005d37

08005c0c <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005c0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005c10:	f7fb fd74 	bl	80016fc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c14:	bd08      	pop	{r3, pc}

08005c16 <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8005c16:	69c1      	ldr	r1, [r0, #28]
{
 8005c18:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8005c1c:	b941      	cbnz	r1, 8005c30 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	6842      	ldr	r2, [r0, #4]
 8005c22:	f022 0202 	bic.w	r2, r2, #2
 8005c26:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005c28:	2201      	movs	r2, #1
    hi2s->TxXferCount = 0U;
 8005c2a:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fb fd55 	bl	80016e0 <HAL_I2S_TxCpltCallback>
}
 8005c36:	bd08      	pop	{r3, pc}

08005c38 <HAL_I2S_RxCpltCallback>:
 8005c38:	4770      	bx	lr

08005c3a <HAL_I2S_ErrorCallback>:
 8005c3a:	4770      	bx	lr

08005c3c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c3e:	6803      	ldr	r3, [r0, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c44:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005c48:	2a04      	cmp	r2, #4
{
 8005c4a:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c4c:	d136      	bne.n	8005cbc <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c4e:	9a01      	ldr	r2, [sp, #4]
 8005c50:	07d1      	lsls	r1, r2, #31
 8005c52:	d517      	bpl.n	8005c84 <I2S_IRQHandler+0x48>
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	0652      	lsls	r2, r2, #25
 8005c58:	d514      	bpl.n	8005c84 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c5a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005c5c:	68d9      	ldr	r1, [r3, #12]
 8005c5e:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8005c62:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005c64:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005c66:	3a01      	subs	r2, #1
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8005c6c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	b942      	cbnz	r2, 8005c84 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c78:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8005c80:	f7ff ffda 	bl	8005c38 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	0659      	lsls	r1, r3, #25
 8005c88:	d518      	bpl.n	8005cbc <I2S_IRQHandler+0x80>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	0692      	lsls	r2, r2, #26
 8005c90:	d514      	bpl.n	8005cbc <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c98:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	9202      	str	r2, [sp, #8]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	9202      	str	r2, [sp, #8]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	9302      	str	r3, [sp, #8]
 8005ca6:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005cae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005cb0:	f043 0302 	orr.w	r3, r3, #2
 8005cb4:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f7ff ffbf 	bl	8005c3a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005cbc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d136      	bne.n	8005d32 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005cc4:	9b01      	ldr	r3, [sp, #4]
 8005cc6:	079b      	lsls	r3, r3, #30
 8005cc8:	d519      	bpl.n	8005cfe <I2S_IRQHandler+0xc2>
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	6853      	ldr	r3, [r2, #4]
 8005cce:	0618      	lsls	r0, r3, #24
 8005cd0:	d515      	bpl.n	8005cfe <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd4:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005cd8:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8005cda:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8005cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005ce4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	b94b      	cbnz	r3, 8005cfe <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cea:	6853      	ldr	r3, [r2, #4]
 8005cec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cf0:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7fb fcf1 	bl	80016e0 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	0719      	lsls	r1, r3, #28
 8005d02:	d516      	bpl.n	8005d32 <I2S_IRQHandler+0xf6>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	0692      	lsls	r2, r2, #26
 8005d0a:	d512      	bpl.n	8005d32 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d12:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d14:	2200      	movs	r2, #0
 8005d16:	9203      	str	r2, [sp, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	9303      	str	r3, [sp, #12]
 8005d1c:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d26:	f043 0304 	orr.w	r3, r3, #4
 8005d2a:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff ff84 	bl	8005c3a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d32:	b004      	add	sp, #16
 8005d34:	bd10      	pop	{r4, pc}

08005d36 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d36:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005d38:	6802      	ldr	r2, [r0, #0]
{
 8005d3a:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005d3c:	6853      	ldr	r3, [r2, #4]
 8005d3e:	f023 0303 	bic.w	r3, r3, #3
 8005d42:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005d48:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005d52:	f043 0308 	orr.w	r3, r3, #8
 8005d56:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8005d58:	f7ff ff6f 	bl	8005c3a <HAL_I2S_ErrorCallback>
}
 8005d5c:	bd08      	pop	{r3, pc}

08005d5e <HAL_I2SEx_TxRxCpltCallback>:
 8005d5e:	4770      	bx	lr

08005d60 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d60:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d62:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d64:	498e      	ldr	r1, [pc, #568]	; (8005fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d66:	6893      	ldr	r3, [r2, #8]
{
 8005d68:	b086      	sub	sp, #24
 8005d6a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d6c:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d6e:	4b8d      	ldr	r3, [pc, #564]	; (8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005d70:	428a      	cmp	r2, r1
 8005d72:	bf18      	it	ne
 8005d74:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005d78:	6899      	ldr	r1, [r3, #8]
 8005d7a:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d7c:	6851      	ldr	r1, [r2, #4]
 8005d7e:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d84:	6841      	ldr	r1, [r0, #4]
 8005d86:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8005d8a:	f040 8093 	bne.w	8005eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d8e:	9b00      	ldr	r3, [sp, #0]
 8005d90:	0799      	lsls	r1, r3, #30
 8005d92:	d51a      	bpl.n	8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8005d94:	9b02      	ldr	r3, [sp, #8]
 8005d96:	061b      	lsls	r3, r3, #24
 8005d98:	d517      	bpl.n	8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005d9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d9c:	1c99      	adds	r1, r3, #2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	6241      	str	r1, [r0, #36]	; 0x24
 8005da2:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8005da4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005dac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	b95b      	cbnz	r3, 8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005db2:	6853      	ldr	r3, [r2, #4]
 8005db4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005db8:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8005dba:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	b923      	cbnz	r3, 8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005dc6:	f7ff ffca 	bl	8005d5e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005dca:	9b01      	ldr	r3, [sp, #4]
 8005dcc:	07d8      	lsls	r0, r3, #31
 8005dce:	d522      	bpl.n	8005e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	0659      	lsls	r1, r3, #25
 8005dd4:	d51f      	bpl.n	8005e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005dd6:	6821      	ldr	r1, [r4, #0]
 8005dd8:	4a71      	ldr	r2, [pc, #452]	; (8005fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005dda:	4b72      	ldr	r3, [pc, #456]	; (8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005ddc:	4291      	cmp	r1, r2
 8005dde:	bf18      	it	ne
 8005de0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005de4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005de6:	68d9      	ldr	r1, [r3, #12]
 8005de8:	1c90      	adds	r0, r2, #2
 8005dea:	62e0      	str	r0, [r4, #44]	; 0x2c
 8005dec:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8005dee:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005df0:	3a01      	subs	r2, #1
 8005df2:	b292      	uxth	r2, r2
 8005df4:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005df6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005df8:	b292      	uxth	r2, r2
 8005dfa:	b962      	cbnz	r2, 8005e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	b92b      	cbnz	r3, 8005e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff ffa4 	bl	8005d5e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	065a      	lsls	r2, r3, #25
 8005e1a:	d522      	bpl.n	8005e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	069b      	lsls	r3, r3, #26
 8005e20:	d51f      	bpl.n	8005e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	495e      	ldr	r1, [pc, #376]	; (8005fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005e26:	4a5f      	ldr	r2, [pc, #380]	; (8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005e28:	428b      	cmp	r3, r1
 8005e2a:	bf18      	it	ne
 8005e2c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8005e30:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e32:	6851      	ldr	r1, [r2, #4]
 8005e34:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005e38:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e40:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e42:	2200      	movs	r2, #0
 8005e44:	9204      	str	r2, [sp, #16]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	9204      	str	r2, [sp, #16]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e58:	f043 0302 	orr.w	r3, r3, #2
 8005e5c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005e5e:	f7ff feec 	bl	8005c3a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	0718      	lsls	r0, r3, #28
 8005e66:	f140 8098 	bpl.w	8005f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	0699      	lsls	r1, r3, #26
 8005e6e:	f140 8094 	bpl.w	8005f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e72:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e74:	494a      	ldr	r1, [pc, #296]	; (8005fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e7c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e7e:	4a49      	ldr	r2, [pc, #292]	; (8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005e80:	428b      	cmp	r3, r1
 8005e82:	bf18      	it	ne
 8005e84:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005e88:	6851      	ldr	r1, [r2, #4]
 8005e8a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005e8e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e90:	2200      	movs	r2, #0
 8005e92:	9205      	str	r2, [sp, #20]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	9305      	str	r3, [sp, #20]
 8005e98:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ea0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005ea2:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ea4:	f043 0304 	orr.w	r3, r3, #4
 8005ea8:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005eaa:	b006      	add	sp, #24
 8005eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8005eb0:	f7ff bec3 	b.w	8005c3a <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005eb4:	9a01      	ldr	r2, [sp, #4]
 8005eb6:	0792      	lsls	r2, r2, #30
 8005eb8:	d51a      	bpl.n	8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8005eba:	9a03      	ldr	r2, [sp, #12]
 8005ebc:	0611      	lsls	r1, r2, #24
 8005ebe:	d517      	bpl.n	8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005ec0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005ec2:	1c91      	adds	r1, r2, #2
 8005ec4:	8812      	ldrh	r2, [r2, #0]
 8005ec6:	6241      	str	r1, [r0, #36]	; 0x24
 8005ec8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005eca:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005ecc:	3a01      	subs	r2, #1
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005ed2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	b95a      	cbnz	r2, 8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ede:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8005ee0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	b923      	cbnz	r3, 8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005eec:	f7ff ff37 	bl	8005d5e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ef0:	9b00      	ldr	r3, [sp, #0]
 8005ef2:	07da      	lsls	r2, r3, #31
 8005ef4:	d51c      	bpl.n	8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	065b      	lsls	r3, r3, #25
 8005efa:	d519      	bpl.n	8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	1c98      	adds	r0, r3, #2
 8005f02:	68d1      	ldr	r1, [r2, #12]
 8005f04:	62e0      	str	r0, [r4, #44]	; 0x2c
 8005f06:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8005f08:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8005f10:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	b963      	cbnz	r3, 8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f16:	6853      	ldr	r3, [r2, #4]
 8005f18:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005f1c:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8005f1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	b92b      	cbnz	r3, 8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f7ff ff17 	bl	8005d5e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f30:	9b00      	ldr	r3, [sp, #0]
 8005f32:	0658      	lsls	r0, r3, #25
 8005f34:	d51b      	bpl.n	8005f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 8005f36:	9b02      	ldr	r3, [sp, #8]
 8005f38:	0699      	lsls	r1, r3, #26
 8005f3a:	d518      	bpl.n	8005f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f3c:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f3e:	4918      	ldr	r1, [pc, #96]	; (8005fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f40:	6853      	ldr	r3, [r2, #4]
 8005f42:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005f46:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f48:	4b16      	ldr	r3, [pc, #88]	; (8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005f4a:	428a      	cmp	r2, r1
 8005f4c:	bf18      	it	ne
 8005f4e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8005f52:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f5a:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005f6a:	f7ff fe66 	bl	8005c3a <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	071a      	lsls	r2, r3, #28
 8005f72:	d512      	bpl.n	8005f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	069b      	lsls	r3, r3, #26
 8005f78:	d50f      	bpl.n	8005f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	4908      	ldr	r1, [pc, #32]	; (8005fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005f80:	428a      	cmp	r2, r1
 8005f82:	bf18      	it	ne
 8005f84:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8005f8e:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f90:	6853      	ldr	r3, [r2, #4]
 8005f92:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005f96:	6053      	str	r3, [r2, #4]
 8005f98:	e77f      	b.n	8005e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8005f9a:	b006      	add	sp, #24
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40003800 	.word	0x40003800
 8005fa4:	40003400 	.word	0x40003400

08005fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fac:	4604      	mov	r4, r0
 8005fae:	b908      	cbnz	r0, 8005fb4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	e03f      	b.n	8006034 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fb4:	6803      	ldr	r3, [r0, #0]
 8005fb6:	07dd      	lsls	r5, r3, #31
 8005fb8:	d410      	bmi.n	8005fdc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	0798      	lsls	r0, r3, #30
 8005fbe:	d45a      	bmi.n	8006076 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	071a      	lsls	r2, r3, #28
 8005fc4:	f100 809c 	bmi.w	8006100 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	075b      	lsls	r3, r3, #29
 8005fcc:	f100 80ba 	bmi.w	8006144 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fd0:	69a0      	ldr	r0, [r4, #24]
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	f040 811b 	bne.w	800620e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005fd8:	2000      	movs	r0, #0
 8005fda:	e02b      	b.n	8006034 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fdc:	4ba7      	ldr	r3, [pc, #668]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	f002 020c 	and.w	r2, r2, #12
 8005fe4:	2a04      	cmp	r2, #4
 8005fe6:	d007      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fee:	2a08      	cmp	r2, #8
 8005ff0:	d10a      	bne.n	8006008 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	0259      	lsls	r1, r3, #9
 8005ff6:	d507      	bpl.n	8006008 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff8:	4ba0      	ldr	r3, [pc, #640]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	039a      	lsls	r2, r3, #14
 8005ffe:	d5dc      	bpl.n	8005fba <HAL_RCC_OscConfig+0x12>
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1d9      	bne.n	8005fba <HAL_RCC_OscConfig+0x12>
 8006006:	e7d3      	b.n	8005fb0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006008:	6863      	ldr	r3, [r4, #4]
 800600a:	4d9c      	ldr	r5, [pc, #624]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006010:	d113      	bne.n	800603a <HAL_RCC_OscConfig+0x92>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800601a:	f7fe ffaf 	bl	8004f7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601e:	4d97      	ldr	r5, [pc, #604]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8006020:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	039b      	lsls	r3, r3, #14
 8006026:	d4c8      	bmi.n	8005fba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006028:	f7fe ffa8 	bl	8004f7c <HAL_GetTick>
 800602c:	1b80      	subs	r0, r0, r6
 800602e:	2864      	cmp	r0, #100	; 0x64
 8006030:	d9f7      	bls.n	8006022 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8006032:	2003      	movs	r0, #3
}
 8006034:	b002      	add	sp, #8
 8006036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800603a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800603e:	d104      	bne.n	800604a <HAL_RCC_OscConfig+0xa2>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	e7e3      	b.n	8006012 <HAL_RCC_OscConfig+0x6a>
 800604a:	682a      	ldr	r2, [r5, #0]
 800604c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006050:	602a      	str	r2, [r5, #0]
 8006052:	682a      	ldr	r2, [r5, #0]
 8006054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006058:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1dd      	bne.n	800601a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800605e:	f7fe ff8d 	bl	8004f7c <HAL_GetTick>
 8006062:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	039f      	lsls	r7, r3, #14
 8006068:	d5a7      	bpl.n	8005fba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800606a:	f7fe ff87 	bl	8004f7c <HAL_GetTick>
 800606e:	1b80      	subs	r0, r0, r6
 8006070:	2864      	cmp	r0, #100	; 0x64
 8006072:	d9f7      	bls.n	8006064 <HAL_RCC_OscConfig+0xbc>
 8006074:	e7dd      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006076:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	f012 0f0c 	tst.w	r2, #12
 800607e:	d007      	beq.n	8006090 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006086:	2a08      	cmp	r2, #8
 8006088:	d111      	bne.n	80060ae <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	025e      	lsls	r6, r3, #9
 800608e:	d40e      	bmi.n	80060ae <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006090:	4b7a      	ldr	r3, [pc, #488]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	0795      	lsls	r5, r2, #30
 8006096:	d502      	bpl.n	800609e <HAL_RCC_OscConfig+0xf6>
 8006098:	68e2      	ldr	r2, [r4, #12]
 800609a:	2a01      	cmp	r2, #1
 800609c:	d188      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	6921      	ldr	r1, [r4, #16]
 80060a2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80060a6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80060aa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ac:	e788      	b.n	8005fc0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060ae:	68e2      	ldr	r2, [r4, #12]
 80060b0:	4b73      	ldr	r3, [pc, #460]	; (8006280 <HAL_RCC_OscConfig+0x2d8>)
 80060b2:	b1b2      	cbz	r2, 80060e2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060b8:	f7fe ff60 	bl	8004f7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060bc:	4d6f      	ldr	r5, [pc, #444]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80060be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	0798      	lsls	r0, r3, #30
 80060c4:	d507      	bpl.n	80060d6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c6:	682b      	ldr	r3, [r5, #0]
 80060c8:	6922      	ldr	r2, [r4, #16]
 80060ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	e774      	b.n	8005fc0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060d6:	f7fe ff51 	bl	8004f7c <HAL_GetTick>
 80060da:	1b80      	subs	r0, r0, r6
 80060dc:	2802      	cmp	r0, #2
 80060de:	d9ef      	bls.n	80060c0 <HAL_RCC_OscConfig+0x118>
 80060e0:	e7a7      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80060e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060e4:	f7fe ff4a 	bl	8004f7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060e8:	4d64      	ldr	r5, [pc, #400]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80060ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	0799      	lsls	r1, r3, #30
 80060f0:	f57f af66 	bpl.w	8005fc0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060f4:	f7fe ff42 	bl	8004f7c <HAL_GetTick>
 80060f8:	1b80      	subs	r0, r0, r6
 80060fa:	2802      	cmp	r0, #2
 80060fc:	d9f6      	bls.n	80060ec <HAL_RCC_OscConfig+0x144>
 80060fe:	e798      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006100:	6962      	ldr	r2, [r4, #20]
 8006102:	4b60      	ldr	r3, [pc, #384]	; (8006284 <HAL_RCC_OscConfig+0x2dc>)
 8006104:	b17a      	cbz	r2, 8006126 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8006106:	2201      	movs	r2, #1
 8006108:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800610a:	f7fe ff37 	bl	8004f7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800610e:	4d5b      	ldr	r5, [pc, #364]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8006110:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006112:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006114:	079f      	lsls	r7, r3, #30
 8006116:	f53f af57 	bmi.w	8005fc8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800611a:	f7fe ff2f 	bl	8004f7c <HAL_GetTick>
 800611e:	1b80      	subs	r0, r0, r6
 8006120:	2802      	cmp	r0, #2
 8006122:	d9f6      	bls.n	8006112 <HAL_RCC_OscConfig+0x16a>
 8006124:	e785      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8006126:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006128:	f7fe ff28 	bl	8004f7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800612c:	4d53      	ldr	r5, [pc, #332]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800612e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006132:	0798      	lsls	r0, r3, #30
 8006134:	f57f af48 	bpl.w	8005fc8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006138:	f7fe ff20 	bl	8004f7c <HAL_GetTick>
 800613c:	1b80      	subs	r0, r0, r6
 800613e:	2802      	cmp	r0, #2
 8006140:	d9f6      	bls.n	8006130 <HAL_RCC_OscConfig+0x188>
 8006142:	e776      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006144:	4b4d      	ldr	r3, [pc, #308]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 8006146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006148:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800614c:	d128      	bne.n	80061a0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800614e:	9201      	str	r2, [sp, #4]
 8006150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006152:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006156:	641a      	str	r2, [r3, #64]	; 0x40
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615e:	9301      	str	r3, [sp, #4]
 8006160:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006162:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006164:	4d48      	ldr	r5, [pc, #288]	; (8006288 <HAL_RCC_OscConfig+0x2e0>)
 8006166:	682b      	ldr	r3, [r5, #0]
 8006168:	05d9      	lsls	r1, r3, #23
 800616a:	d51b      	bpl.n	80061a4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800616c:	68a3      	ldr	r3, [r4, #8]
 800616e:	4d43      	ldr	r5, [pc, #268]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 8006170:	2b01      	cmp	r3, #1
 8006172:	d127      	bne.n	80061c4 <HAL_RCC_OscConfig+0x21c>
 8006174:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800617c:	f7fe fefe 	bl	8004f7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006180:	4d3e      	ldr	r5, [pc, #248]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8006182:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006184:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006188:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	d539      	bpl.n	8006202 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800618e:	2e00      	cmp	r6, #0
 8006190:	f43f af1e 	beq.w	8005fd0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006194:	4a39      	ldr	r2, [pc, #228]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 8006196:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619c:	6413      	str	r3, [r2, #64]	; 0x40
 800619e:	e717      	b.n	8005fd0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80061a0:	2600      	movs	r6, #0
 80061a2:	e7df      	b.n	8006164 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061aa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80061ac:	f7fe fee6 	bl	8004f7c <HAL_GetTick>
 80061b0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	05da      	lsls	r2, r3, #23
 80061b6:	d4d9      	bmi.n	800616c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b8:	f7fe fee0 	bl	8004f7c <HAL_GetTick>
 80061bc:	1bc0      	subs	r0, r0, r7
 80061be:	2802      	cmp	r0, #2
 80061c0:	d9f7      	bls.n	80061b2 <HAL_RCC_OscConfig+0x20a>
 80061c2:	e736      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c4:	2b05      	cmp	r3, #5
 80061c6:	d104      	bne.n	80061d2 <HAL_RCC_OscConfig+0x22a>
 80061c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80061ca:	f043 0304 	orr.w	r3, r3, #4
 80061ce:	672b      	str	r3, [r5, #112]	; 0x70
 80061d0:	e7d0      	b.n	8006174 <HAL_RCC_OscConfig+0x1cc>
 80061d2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80061d4:	f022 0201 	bic.w	r2, r2, #1
 80061d8:	672a      	str	r2, [r5, #112]	; 0x70
 80061da:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80061dc:	f022 0204 	bic.w	r2, r2, #4
 80061e0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ca      	bne.n	800617c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80061e6:	f7fe fec9 	bl	8004f7c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ea:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80061ee:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80061f2:	0798      	lsls	r0, r3, #30
 80061f4:	d5cb      	bpl.n	800618e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fe fec1 	bl	8004f7c <HAL_GetTick>
 80061fa:	1bc0      	subs	r0, r0, r7
 80061fc:	4540      	cmp	r0, r8
 80061fe:	d9f7      	bls.n	80061f0 <HAL_RCC_OscConfig+0x248>
 8006200:	e717      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006202:	f7fe febb 	bl	8004f7c <HAL_GetTick>
 8006206:	1bc0      	subs	r0, r0, r7
 8006208:	4540      	cmp	r0, r8
 800620a:	d9bd      	bls.n	8006188 <HAL_RCC_OscConfig+0x1e0>
 800620c:	e711      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800620e:	4d1b      	ldr	r5, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
 8006210:	68ab      	ldr	r3, [r5, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	2b08      	cmp	r3, #8
 8006218:	d047      	beq.n	80062aa <HAL_RCC_OscConfig+0x302>
 800621a:	4e1c      	ldr	r6, [pc, #112]	; (800628c <HAL_RCC_OscConfig+0x2e4>)
 800621c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800621e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006220:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006222:	d135      	bne.n	8006290 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8006224:	f7fe feaa 	bl	8004f7c <HAL_GetTick>
 8006228:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	0199      	lsls	r1, r3, #6
 800622e:	d41e      	bmi.n	800626e <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006230:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8006234:	4313      	orrs	r3, r2
 8006236:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006238:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800623c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800623e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006244:	4c0d      	ldr	r4, [pc, #52]	; (800627c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006246:	0852      	lsrs	r2, r2, #1
 8006248:	3a01      	subs	r2, #1
 800624a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800624e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006250:	2301      	movs	r3, #1
 8006252:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006254:	f7fe fe92 	bl	8004f7c <HAL_GetTick>
 8006258:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	019a      	lsls	r2, r3, #6
 800625e:	f53f aebb 	bmi.w	8005fd8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006262:	f7fe fe8b 	bl	8004f7c <HAL_GetTick>
 8006266:	1b40      	subs	r0, r0, r5
 8006268:	2802      	cmp	r0, #2
 800626a:	d9f6      	bls.n	800625a <HAL_RCC_OscConfig+0x2b2>
 800626c:	e6e1      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800626e:	f7fe fe85 	bl	8004f7c <HAL_GetTick>
 8006272:	1bc0      	subs	r0, r0, r7
 8006274:	2802      	cmp	r0, #2
 8006276:	d9d8      	bls.n	800622a <HAL_RCC_OscConfig+0x282>
 8006278:	e6db      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800
 8006280:	42470000 	.word	0x42470000
 8006284:	42470e80 	.word	0x42470e80
 8006288:	40007000 	.word	0x40007000
 800628c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8006290:	f7fe fe74 	bl	8004f7c <HAL_GetTick>
 8006294:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	019b      	lsls	r3, r3, #6
 800629a:	f57f ae9d 	bpl.w	8005fd8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800629e:	f7fe fe6d 	bl	8004f7c <HAL_GetTick>
 80062a2:	1b00      	subs	r0, r0, r4
 80062a4:	2802      	cmp	r0, #2
 80062a6:	d9f6      	bls.n	8006296 <HAL_RCC_OscConfig+0x2ee>
 80062a8:	e6c3      	b.n	8006032 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062aa:	2801      	cmp	r0, #1
 80062ac:	f43f aec2 	beq.w	8006034 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 80062b0:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b2:	69e3      	ldr	r3, [r4, #28]
 80062b4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80062b8:	429a      	cmp	r2, r3
 80062ba:	f47f ae79 	bne.w	8005fb0 <HAL_RCC_OscConfig+0x8>
 80062be:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062c0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c4:	4293      	cmp	r3, r2
 80062c6:	f47f ae73 	bne.w	8005fb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062d0:	4003      	ands	r3, r0
 80062d2:	4293      	cmp	r3, r2
 80062d4:	f47f ae6c 	bne.w	8005fb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062da:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062de:	4293      	cmp	r3, r2
 80062e0:	f47f ae66 	bne.w	8005fb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80062e6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80062ea:	1ac0      	subs	r0, r0, r3
 80062ec:	bf18      	it	ne
 80062ee:	2001      	movne	r0, #1
 80062f0:	e6a0      	b.n	8006034 <HAL_RCC_OscConfig+0x8c>
 80062f2:	bf00      	nop

080062f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062f4:	4913      	ldr	r1, [pc, #76]	; (8006344 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80062f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062f8:	688b      	ldr	r3, [r1, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d003      	beq.n	800630a <HAL_RCC_GetSysClockFreq+0x16>
 8006302:	2b08      	cmp	r3, #8
 8006304:	d003      	beq.n	800630e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006306:	4810      	ldr	r0, [pc, #64]	; (8006348 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8006308:	e000      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800630a:	4810      	ldr	r0, [pc, #64]	; (800634c <HAL_RCC_GetSysClockFreq+0x58>)
}
 800630c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800630e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006310:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006312:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006314:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006318:	bf14      	ite	ne
 800631a:	480c      	ldrne	r0, [pc, #48]	; (800634c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631c:	480a      	ldreq	r0, [pc, #40]	; (8006348 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006322:	bf18      	it	ne
 8006324:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006326:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632a:	fba1 0100 	umull	r0, r1, r1, r0
 800632e:	f7fa fbf1 	bl	8000b14 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006332:	4b04      	ldr	r3, [pc, #16]	; (8006344 <HAL_RCC_GetSysClockFreq+0x50>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800633a:	3301      	adds	r3, #1
 800633c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800633e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006342:	e7e3      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x18>
 8006344:	40023800 	.word	0x40023800
 8006348:	00f42400 	.word	0x00f42400
 800634c:	017d7840 	.word	0x017d7840

08006350 <HAL_RCC_ClockConfig>:
{
 8006350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006356:	4604      	mov	r4, r0
 8006358:	b910      	cbnz	r0, 8006360 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800635a:	2001      	movs	r0, #1
}
 800635c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006360:	4b43      	ldr	r3, [pc, #268]	; (8006470 <HAL_RCC_ClockConfig+0x120>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	f002 020f 	and.w	r2, r2, #15
 8006368:	428a      	cmp	r2, r1
 800636a:	d328      	bcc.n	80063be <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800636c:	6821      	ldr	r1, [r4, #0]
 800636e:	078f      	lsls	r7, r1, #30
 8006370:	d42d      	bmi.n	80063ce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006372:	07c8      	lsls	r0, r1, #31
 8006374:	d440      	bmi.n	80063f8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006376:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <HAL_RCC_ClockConfig+0x120>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	f002 020f 	and.w	r2, r2, #15
 800637e:	42aa      	cmp	r2, r5
 8006380:	d865      	bhi.n	800644e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	0751      	lsls	r1, r2, #29
 8006386:	d46b      	bmi.n	8006460 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006388:	0713      	lsls	r3, r2, #28
 800638a:	d507      	bpl.n	800639c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800638c:	4a39      	ldr	r2, [pc, #228]	; (8006474 <HAL_RCC_ClockConfig+0x124>)
 800638e:	6921      	ldr	r1, [r4, #16]
 8006390:	6893      	ldr	r3, [r2, #8]
 8006392:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006396:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800639a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800639c:	f7ff ffaa 	bl	80062f4 <HAL_RCC_GetSysClockFreq>
 80063a0:	4b34      	ldr	r3, [pc, #208]	; (8006474 <HAL_RCC_ClockConfig+0x124>)
 80063a2:	4a35      	ldr	r2, [pc, #212]	; (8006478 <HAL_RCC_ClockConfig+0x128>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80063aa:	5cd3      	ldrb	r3, [r2, r3]
 80063ac:	40d8      	lsrs	r0, r3
 80063ae:	4b33      	ldr	r3, [pc, #204]	; (800647c <HAL_RCC_ClockConfig+0x12c>)
 80063b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80063b2:	4b33      	ldr	r3, [pc, #204]	; (8006480 <HAL_RCC_ClockConfig+0x130>)
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	f7fe fd97 	bl	8004ee8 <HAL_InitTick>
  return HAL_OK;
 80063ba:	2000      	movs	r0, #0
 80063bc:	e7ce      	b.n	800635c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063be:	b2ca      	uxtb	r2, r1
 80063c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	428b      	cmp	r3, r1
 80063ca:	d1c6      	bne.n	800635a <HAL_RCC_ClockConfig+0xa>
 80063cc:	e7ce      	b.n	800636c <HAL_RCC_ClockConfig+0x1c>
 80063ce:	4b29      	ldr	r3, [pc, #164]	; (8006474 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d4:	bf1e      	ittt	ne
 80063d6:	689a      	ldrne	r2, [r3, #8]
 80063d8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80063dc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063de:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063e0:	bf42      	ittt	mi
 80063e2:	689a      	ldrmi	r2, [r3, #8]
 80063e4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80063e8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	68a0      	ldr	r0, [r4, #8]
 80063ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80063f2:	4302      	orrs	r2, r0
 80063f4:	609a      	str	r2, [r3, #8]
 80063f6:	e7bc      	b.n	8006372 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063f8:	6862      	ldr	r2, [r4, #4]
 80063fa:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <HAL_RCC_ClockConfig+0x124>)
 80063fc:	2a01      	cmp	r2, #1
 80063fe:	d11c      	bne.n	800643a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006406:	d0a8      	beq.n	800635a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006408:	4e1a      	ldr	r6, [pc, #104]	; (8006474 <HAL_RCC_ClockConfig+0x124>)
 800640a:	68b3      	ldr	r3, [r6, #8]
 800640c:	f023 0303 	bic.w	r3, r3, #3
 8006410:	4313      	orrs	r3, r2
 8006412:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006414:	f7fe fdb2 	bl	8004f7c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006418:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800641c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641e:	68b3      	ldr	r3, [r6, #8]
 8006420:	6862      	ldr	r2, [r4, #4]
 8006422:	f003 030c 	and.w	r3, r3, #12
 8006426:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800642a:	d0a4      	beq.n	8006376 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800642c:	f7fe fda6 	bl	8004f7c <HAL_GetTick>
 8006430:	1bc0      	subs	r0, r0, r7
 8006432:	4540      	cmp	r0, r8
 8006434:	d9f3      	bls.n	800641e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8006436:	2003      	movs	r0, #3
 8006438:	e790      	b.n	800635c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643a:	1e91      	subs	r1, r2, #2
 800643c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006440:	d802      	bhi.n	8006448 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006442:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006446:	e7de      	b.n	8006406 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	f013 0f02 	tst.w	r3, #2
 800644c:	e7db      	b.n	8006406 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	b2ea      	uxtb	r2, r5
 8006450:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	42ab      	cmp	r3, r5
 800645a:	f47f af7e 	bne.w	800635a <HAL_RCC_ClockConfig+0xa>
 800645e:	e790      	b.n	8006382 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006460:	4904      	ldr	r1, [pc, #16]	; (8006474 <HAL_RCC_ClockConfig+0x124>)
 8006462:	68e0      	ldr	r0, [r4, #12]
 8006464:	688b      	ldr	r3, [r1, #8]
 8006466:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800646a:	4303      	orrs	r3, r0
 800646c:	608b      	str	r3, [r1, #8]
 800646e:	e78b      	b.n	8006388 <HAL_RCC_ClockConfig+0x38>
 8006470:	40023c00 	.word	0x40023c00
 8006474:	40023800 	.word	0x40023800
 8006478:	08016eac 	.word	0x08016eac
 800647c:	20000088 	.word	0x20000088
 8006480:	20000090 	.word	0x20000090

08006484 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006484:	4b04      	ldr	r3, [pc, #16]	; (8006498 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006486:	4a05      	ldr	r2, [pc, #20]	; (800649c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800648e:	5cd3      	ldrb	r3, [r2, r3]
 8006490:	4a03      	ldr	r2, [pc, #12]	; (80064a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006492:	6810      	ldr	r0, [r2, #0]
}
 8006494:	40d8      	lsrs	r0, r3
 8006496:	4770      	bx	lr
 8006498:	40023800 	.word	0x40023800
 800649c:	08016ebc 	.word	0x08016ebc
 80064a0:	20000088 	.word	0x20000088

080064a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064a4:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80064a6:	4a05      	ldr	r2, [pc, #20]	; (80064bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80064ae:	5cd3      	ldrb	r3, [r2, r3]
 80064b0:	4a03      	ldr	r2, [pc, #12]	; (80064c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80064b2:	6810      	ldr	r0, [r2, #0]
}
 80064b4:	40d8      	lsrs	r0, r3
 80064b6:	4770      	bx	lr
 80064b8:	40023800 	.word	0x40023800
 80064bc:	08016ebc 	.word	0x08016ebc
 80064c0:	20000088 	.word	0x20000088

080064c4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064c4:	6803      	ldr	r3, [r0, #0]
 80064c6:	f013 0f05 	tst.w	r3, #5
{
 80064ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064cc:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064ce:	d105      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064d0:	6828      	ldr	r0, [r5, #0]
 80064d2:	f010 0002 	ands.w	r0, r0, #2
 80064d6:	d128      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80064d8:	b003      	add	sp, #12
 80064da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80064dc:	4c41      	ldr	r4, [pc, #260]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064de:	4e42      	ldr	r6, [pc, #264]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 80064e0:	2300      	movs	r3, #0
 80064e2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80064e4:	f7fe fd4a 	bl	8004f7c <HAL_GetTick>
 80064e8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064ea:	6833      	ldr	r3, [r6, #0]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	d415      	bmi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80064f0:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80064f4:	071b      	lsls	r3, r3, #28
 80064f6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80064fa:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80064fe:	2301      	movs	r3, #1
 8006500:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006502:	f7fe fd3b 	bl	8004f7c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006506:	4c38      	ldr	r4, [pc, #224]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8006508:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	0118      	lsls	r0, r3, #4
 800650e:	d4df      	bmi.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006510:	f7fe fd34 	bl	8004f7c <HAL_GetTick>
 8006514:	1b80      	subs	r0, r0, r6
 8006516:	2802      	cmp	r0, #2
 8006518:	d9f7      	bls.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x46>
 800651a:	e004      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800651c:	f7fe fd2e 	bl	8004f7c <HAL_GetTick>
 8006520:	1bc0      	subs	r0, r0, r7
 8006522:	2802      	cmp	r0, #2
 8006524:	d9e1      	bls.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8006526:	2003      	movs	r0, #3
 8006528:	e7d6      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 800652a:	2300      	movs	r3, #0
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	4b2e      	ldr	r3, [pc, #184]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8006530:	4c2e      	ldr	r4, [pc, #184]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006534:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800654c:	f7fe fd16 	bl	8004f7c <HAL_GetTick>
 8006550:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	05d9      	lsls	r1, r3, #23
 8006556:	d51b      	bpl.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006558:	4c23      	ldr	r4, [pc, #140]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800655a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800655c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006560:	d11c      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006562:	68eb      	ldr	r3, [r5, #12]
 8006564:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006568:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800656c:	4a1e      	ldr	r2, [pc, #120]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800656e:	d134      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006570:	6891      	ldr	r1, [r2, #8]
 8006572:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8006576:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800657a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800657e:	4301      	orrs	r1, r0
 8006580:	6091      	str	r1, [r2, #8]
 8006582:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006588:	430b      	orrs	r3, r1
 800658a:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 800658c:	2000      	movs	r0, #0
 800658e:	e7a3      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006590:	f7fe fcf4 	bl	8004f7c <HAL_GetTick>
 8006594:	1b80      	subs	r0, r0, r6
 8006596:	2802      	cmp	r0, #2
 8006598:	d9db      	bls.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800659a:	e7c4      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800659c:	68ea      	ldr	r2, [r5, #12]
 800659e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d0dd      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80065a8:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80065aa:	2101      	movs	r1, #1
 80065ac:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065b2:	2100      	movs	r1, #0
 80065b4:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80065b6:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80065ba:	07da      	lsls	r2, r3, #31
 80065bc:	d5d1      	bpl.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 80065be:	f7fe fcdd 	bl	8004f7c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80065c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80065ca:	079b      	lsls	r3, r3, #30
 80065cc:	d4c9      	bmi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ce:	f7fe fcd5 	bl	8004f7c <HAL_GetTick>
 80065d2:	1b80      	subs	r0, r0, r6
 80065d4:	42b8      	cmp	r0, r7
 80065d6:	d9f7      	bls.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80065d8:	e7a5      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065da:	6891      	ldr	r1, [r2, #8]
 80065dc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80065e0:	e7ce      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80065e2:	bf00      	nop
 80065e4:	42470068 	.word	0x42470068
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40007000 	.word	0x40007000
 80065f0:	42470e40 	.word	0x42470e40

080065f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80065f4:	2801      	cmp	r0, #1
 80065f6:	d120      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80065f8:	4b11      	ldr	r3, [pc, #68]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80065fa:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80065fc:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8006600:	d004      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8006602:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006604:	480f      	ldr	r0, [pc, #60]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8006606:	bf18      	it	ne
 8006608:	2000      	movne	r0, #0
 800660a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800660c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800660e:	490c      	ldr	r1, [pc, #48]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006610:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006612:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006614:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006618:	bf4c      	ite	mi
 800661a:	4b0b      	ldrmi	r3, [pc, #44]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800661c:	4b0b      	ldrpl	r3, [pc, #44]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800661e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006622:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006626:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800662a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800662e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006630:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8006634:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8006638:	4770      	bx	lr
          frequency = 0U;
 800663a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40023800 	.word	0x40023800
 8006644:	00bb8000 	.word	0x00bb8000
 8006648:	017d7840 	.word	0x017d7840
 800664c:	00f42400 	.word	0x00f42400

08006650 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006650:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006652:	4604      	mov	r4, r0
 8006654:	b190      	cbz	r0, 800667c <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006656:	7943      	ldrb	r3, [r0, #5]
 8006658:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800665c:	b913      	cbnz	r3, 8006664 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800665e:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006660:	f7fe fae4 	bl	8004c2c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006664:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006666:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8006668:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006672:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8006674:	2301      	movs	r3, #1
 8006676:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006678:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 800667a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800667c:	2001      	movs	r0, #1
 800667e:	e7fc      	b.n	800667a <HAL_RNG_Init+0x2a>

08006680 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	460e      	mov	r6, r1
 8006686:	4615      	mov	r5, r2
 8006688:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800668a:	6821      	ldr	r1, [r4, #0]
 800668c:	688a      	ldr	r2, [r1, #8]
 800668e:	ea36 0302 	bics.w	r3, r6, r2
 8006692:	d001      	beq.n	8006698 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006694:	2000      	movs	r0, #0
 8006696:	e02d      	b.n	80066f4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8006698:	1c6b      	adds	r3, r5, #1
 800669a:	d0f7      	beq.n	800668c <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800669c:	f7fe fc6e 	bl	8004f7c <HAL_GetTick>
 80066a0:	1bc0      	subs	r0, r0, r7
 80066a2:	4285      	cmp	r5, r0
 80066a4:	d8f1      	bhi.n	800668a <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066ae:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b0:	6862      	ldr	r2, [r4, #4]
 80066b2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80066b6:	d10a      	bne.n	80066ce <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 80066b8:	68a2      	ldr	r2, [r4, #8]
 80066ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80066be:	d002      	beq.n	80066c6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80066c4:	d103      	bne.n	80066ce <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066cc:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80066d0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80066d4:	d107      	bne.n	80066e6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80066ec:	2300      	movs	r3, #0
 80066ee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80066f2:	2003      	movs	r0, #3
}
 80066f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066fa:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066fc:	4a12      	ldr	r2, [pc, #72]	; (8006748 <SPI_EndRxTxTransaction+0x50>)
 80066fe:	4e13      	ldr	r6, [pc, #76]	; (800674c <SPI_EndRxTxTransaction+0x54>)
 8006700:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006702:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006704:	fbb5 f6f6 	udiv	r6, r5, r6
 8006708:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800670c:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800670e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8006712:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006714:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006716:	d10b      	bne.n	8006730 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006718:	460a      	mov	r2, r1
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	f7ff ffb0 	bl	8006680 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8006720:	b178      	cbz	r0, 8006742 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006722:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006724:	f043 0320 	orr.w	r3, r3, #32
 8006728:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800672a:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 800672c:	b002      	add	sp, #8
 800672e:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8006730:	9b01      	ldr	r3, [sp, #4]
 8006732:	b133      	cbz	r3, 8006742 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8006734:	9b01      	ldr	r3, [sp, #4]
 8006736:	3b01      	subs	r3, #1
 8006738:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	061b      	lsls	r3, r3, #24
 8006740:	d4f6      	bmi.n	8006730 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8006742:	2000      	movs	r0, #0
 8006744:	e7f2      	b.n	800672c <SPI_EndRxTxTransaction+0x34>
 8006746:	bf00      	nop
 8006748:	20000088 	.word	0x20000088
 800674c:	016e3600 	.word	0x016e3600

08006750 <HAL_SPI_Init>:
{
 8006750:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8006752:	4604      	mov	r4, r0
 8006754:	2800      	cmp	r0, #0
 8006756:	d036      	beq.n	80067c6 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006758:	2300      	movs	r3, #0
 800675a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800675c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006760:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006764:	b91b      	cbnz	r3, 800676e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8006766:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800676a:	f7fe fa77 	bl	8004c5c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800676e:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006770:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006772:	2302      	movs	r3, #2
 8006774:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006778:	680b      	ldr	r3, [r1, #0]
 800677a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006780:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006784:	4303      	orrs	r3, r0
 8006786:	68e0      	ldr	r0, [r4, #12]
 8006788:	4303      	orrs	r3, r0
 800678a:	6920      	ldr	r0, [r4, #16]
 800678c:	4303      	orrs	r3, r0
 800678e:	6960      	ldr	r0, [r4, #20]
 8006790:	4303      	orrs	r3, r0
 8006792:	69e0      	ldr	r0, [r4, #28]
 8006794:	4303      	orrs	r3, r0
 8006796:	6a20      	ldr	r0, [r4, #32]
 8006798:	4303      	orrs	r3, r0
 800679a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800679c:	4303      	orrs	r3, r0
 800679e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80067a2:	4303      	orrs	r3, r0
 80067a4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80067a6:	0c12      	lsrs	r2, r2, #16
 80067a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067aa:	f002 0204 	and.w	r2, r2, #4
 80067ae:	431a      	orrs	r2, r3
 80067b0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067b2:	69cb      	ldr	r3, [r1, #28]
 80067b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067ba:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80067bc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067be:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80067c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80067c6:	2001      	movs	r0, #1
 80067c8:	e7fc      	b.n	80067c4 <HAL_SPI_Init+0x74>

080067ca <HAL_SPI_Transmit>:
{
 80067ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80067ce:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80067d0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80067d4:	2b01      	cmp	r3, #1
{
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80067dc:	f000 809b 	beq.w	8006916 <HAL_SPI_Transmit+0x14c>
 80067e0:	2301      	movs	r3, #1
 80067e2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80067e6:	f7fe fbc9 	bl	8004f7c <HAL_GetTick>
 80067ea:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80067ec:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80067f0:	b2c0      	uxtb	r0, r0
 80067f2:	2801      	cmp	r0, #1
 80067f4:	f040 808d 	bne.w	8006912 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 80067f8:	2d00      	cmp	r5, #0
 80067fa:	d05d      	beq.n	80068b8 <HAL_SPI_Transmit+0xee>
 80067fc:	f1b8 0f00 	cmp.w	r8, #0
 8006800:	d05a      	beq.n	80068b8 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006802:	2303      	movs	r3, #3
 8006804:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006808:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800680a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800680c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800680e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006810:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8006814:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006816:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006818:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 800681c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800681e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8006824:	bf08      	it	eq
 8006826:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8006828:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800682c:	bf04      	itt	eq
 800682e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8006832:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006834:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006836:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006838:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800683a:	bf5e      	ittt	pl
 800683c:	6803      	ldrpl	r3, [r0, #0]
 800683e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8006842:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006844:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006848:	6863      	ldr	r3, [r4, #4]
 800684a:	d13e      	bne.n	80068ca <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800684c:	b113      	cbz	r3, 8006854 <HAL_SPI_Transmit+0x8a>
 800684e:	f1b8 0f01 	cmp.w	r8, #1
 8006852:	d107      	bne.n	8006864 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006854:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006858:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800685a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800685c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800685e:	3b01      	subs	r3, #1
 8006860:	b29b      	uxth	r3, r3
 8006862:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006864:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006866:	b29b      	uxth	r3, r3
 8006868:	b9a3      	cbnz	r3, 8006894 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800686a:	463a      	mov	r2, r7
 800686c:	4631      	mov	r1, r6
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff ff42 	bl	80066f8 <SPI_EndRxTxTransaction>
 8006874:	2800      	cmp	r0, #0
 8006876:	d149      	bne.n	800690c <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006878:	68a3      	ldr	r3, [r4, #8]
 800687a:	b933      	cbnz	r3, 800688a <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	9201      	str	r2, [sp, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800688a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800688c:	3000      	adds	r0, #0
 800688e:	bf18      	it	ne
 8006890:	2001      	movne	r0, #1
error:
 8006892:	e011      	b.n	80068b8 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006894:	6822      	ldr	r2, [r4, #0]
 8006896:	6893      	ldr	r3, [r2, #8]
 8006898:	0798      	lsls	r0, r3, #30
 800689a:	d505      	bpl.n	80068a8 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800689c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800689e:	f833 1b02 	ldrh.w	r1, [r3], #2
 80068a2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a4:	6323      	str	r3, [r4, #48]	; 0x30
 80068a6:	e7d9      	b.n	800685c <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a8:	f7fe fb68 	bl	8004f7c <HAL_GetTick>
 80068ac:	1bc0      	subs	r0, r0, r7
 80068ae:	42b0      	cmp	r0, r6
 80068b0:	d3d8      	bcc.n	8006864 <HAL_SPI_Transmit+0x9a>
 80068b2:	1c71      	adds	r1, r6, #1
 80068b4:	d0d6      	beq.n	8006864 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80068b6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068be:	2300      	movs	r3, #0
 80068c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80068c4:	b002      	add	sp, #8
 80068c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ca:	b113      	cbz	r3, 80068d2 <HAL_SPI_Transmit+0x108>
 80068cc:	f1b8 0f01 	cmp.w	r8, #1
 80068d0:	d108      	bne.n	80068e4 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068d2:	782b      	ldrb	r3, [r5, #0]
 80068d4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80068d8:	3301      	adds	r3, #1
 80068da:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80068dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80068e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0be      	beq.n	800686a <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	0792      	lsls	r2, r2, #30
 80068f2:	d503      	bpl.n	80068fc <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80068f6:	7812      	ldrb	r2, [r2, #0]
 80068f8:	731a      	strb	r2, [r3, #12]
 80068fa:	e7ec      	b.n	80068d6 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068fc:	f7fe fb3e 	bl	8004f7c <HAL_GetTick>
 8006900:	1bc0      	subs	r0, r0, r7
 8006902:	42b0      	cmp	r0, r6
 8006904:	d3ee      	bcc.n	80068e4 <HAL_SPI_Transmit+0x11a>
 8006906:	1c73      	adds	r3, r6, #1
 8006908:	d0ec      	beq.n	80068e4 <HAL_SPI_Transmit+0x11a>
 800690a:	e7d4      	b.n	80068b6 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800690c:	2320      	movs	r3, #32
 800690e:	6563      	str	r3, [r4, #84]	; 0x54
 8006910:	e7b2      	b.n	8006878 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8006912:	2002      	movs	r0, #2
 8006914:	e7d0      	b.n	80068b8 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8006916:	2002      	movs	r0, #2
 8006918:	e7d4      	b.n	80068c4 <HAL_SPI_Transmit+0xfa>

0800691a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800691a:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800691c:	b189      	cbz	r1, 8006942 <HAL_TIM_Encoder_Start+0x28>
 800691e:	2904      	cmp	r1, #4
 8006920:	d007      	beq.n	8006932 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800692a:	6a1a      	ldr	r2, [r3, #32]
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	f022 0210 	bic.w	r2, r2, #16
 8006938:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	f042 0210 	orr.w	r2, r2, #16
 8006940:	e006      	b.n	8006950 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800694a:	6a1a      	ldr	r2, [r3, #32]
 800694c:	f042 0201 	orr.w	r2, r2, #1
 8006950:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]
}
 800695a:	2000      	movs	r0, #0
 800695c:	4770      	bx	lr
	...

08006960 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006960:	4a30      	ldr	r2, [pc, #192]	; (8006a24 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006962:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006964:	4290      	cmp	r0, r2
 8006966:	d012      	beq.n	800698e <TIM_Base_SetConfig+0x2e>
 8006968:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800696c:	d00f      	beq.n	800698e <TIM_Base_SetConfig+0x2e>
 800696e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006972:	4290      	cmp	r0, r2
 8006974:	d00b      	beq.n	800698e <TIM_Base_SetConfig+0x2e>
 8006976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800697a:	4290      	cmp	r0, r2
 800697c:	d007      	beq.n	800698e <TIM_Base_SetConfig+0x2e>
 800697e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006982:	4290      	cmp	r0, r2
 8006984:	d003      	beq.n	800698e <TIM_Base_SetConfig+0x2e>
 8006986:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800698a:	4290      	cmp	r0, r2
 800698c:	d119      	bne.n	80069c2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800698e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006994:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006996:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <TIM_Base_SetConfig+0xc4>)
 8006998:	4290      	cmp	r0, r2
 800699a:	d029      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 800699c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80069a0:	d026      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80069a6:	4290      	cmp	r0, r2
 80069a8:	d022      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069ae:	4290      	cmp	r0, r2
 80069b0:	d01e      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069b6:	4290      	cmp	r0, r2
 80069b8:	d01a      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80069be:	4290      	cmp	r0, r2
 80069c0:	d016      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069c2:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <TIM_Base_SetConfig+0xc8>)
 80069c4:	4290      	cmp	r0, r2
 80069c6:	d013      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069cc:	4290      	cmp	r0, r2
 80069ce:	d00f      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069d4:	4290      	cmp	r0, r2
 80069d6:	d00b      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069d8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80069dc:	4290      	cmp	r0, r2
 80069de:	d007      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069e4:	4290      	cmp	r0, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_Base_SetConfig+0x90>
 80069e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069ec:	4290      	cmp	r0, r2
 80069ee:	d103      	bne.n	80069f8 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069f0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80069f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069f6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f8:	694a      	ldr	r2, [r1, #20]
 80069fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fe:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006a00:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a02:	688b      	ldr	r3, [r1, #8]
 8006a04:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006a06:	680b      	ldr	r3, [r1, #0]
 8006a08:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <TIM_Base_SetConfig+0xc4>)
 8006a0c:	4298      	cmp	r0, r3
 8006a0e:	d003      	beq.n	8006a18 <TIM_Base_SetConfig+0xb8>
 8006a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a14:	4298      	cmp	r0, r3
 8006a16:	d101      	bne.n	8006a1c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006a18:	690b      	ldr	r3, [r1, #16]
 8006a1a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	6143      	str	r3, [r0, #20]
}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40014000 	.word	0x40014000

08006a2c <HAL_TIM_Encoder_Init>:
{
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	460c      	mov	r4, r1
  if (htim == NULL)
 8006a30:	4605      	mov	r5, r0
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d043      	beq.n	8006abe <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006a36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006a3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006a3e:	b91b      	cbnz	r3, 8006a48 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8006a40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006a44:	f7fe f940 	bl	8004cc8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a48:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8006a4a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a4c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a54:	6883      	ldr	r3, [r0, #8]
 8006a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a60:	f7ff ff7e 	bl	8006960 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8006a64:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8006a66:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006a68:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8006a6a:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a6c:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8006a6e:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8006a70:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a72:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a78:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a7c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8006a80:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a82:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a86:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a88:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006a90:	68e1      	ldr	r1, [r4, #12]
 8006a92:	430b      	orrs	r3, r1
 8006a94:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a96:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a9a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8006a9e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006aa0:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006aa2:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006aa6:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8006aa8:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006aaa:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8006aae:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ab0:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8006ab4:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8006ab6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8006aba:	2000      	movs	r0, #0
}
 8006abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006abe:	2001      	movs	r0, #1
 8006ac0:	e7fc      	b.n	8006abc <HAL_TIM_Encoder_Init+0x90>
	...

08006ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
{
 8006aca:	b530      	push	{r4, r5, lr}
 8006acc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006ad0:	d035      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8006ada:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006adc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8006ae0:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae2:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8006ae4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006ae8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aea:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aec:	4c15      	ldr	r4, [pc, #84]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8006aee:	42a3      	cmp	r3, r4
 8006af0:	d01a      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af6:	d017      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006af8:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d013      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006b00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	d00f      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006b08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	d00b      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006b10:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	d007      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006b18:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d003      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006b20:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	d104      	bne.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b28:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006b3e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006b40:	bd30      	pop	{r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	40010000 	.word	0x40010000

08006b48 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b48:	6803      	ldr	r3, [r0, #0]
 8006b4a:	68c1      	ldr	r1, [r0, #12]
 8006b4c:	691a      	ldr	r2, [r3, #16]
{
 8006b4e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b50:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8006b54:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b56:	430a      	orrs	r2, r1
 8006b58:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b5a:	6925      	ldr	r5, [r4, #16]
 8006b5c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b5e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b60:	69c0      	ldr	r0, [r0, #28]
 8006b62:	432a      	orrs	r2, r5
 8006b64:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006b66:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b6a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8006b6c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b70:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006b72:	430a      	orrs	r2, r1
 8006b74:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b76:	695a      	ldr	r2, [r3, #20]
 8006b78:	69a1      	ldr	r1, [r4, #24]
 8006b7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b7e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b80:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b84:	615a      	str	r2, [r3, #20]
 8006b86:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b88:	d129      	bne.n	8006bde <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <UART_SetConfig+0x4e>
 8006b8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d120      	bne.n	8006bd8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b96:	f7ff fc85 	bl	80064a4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b9a:	6862      	ldr	r2, [r4, #4]
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	1892      	adds	r2, r2, r2
 8006ba0:	f04f 0119 	mov.w	r1, #25
 8006ba4:	eb46 0306 	adc.w	r3, r6, r6
 8006ba8:	fba0 0101 	umull	r0, r1, r0, r1
 8006bac:	f7f9 ffb2 	bl	8000b14 <__aeabi_uldivmod>
 8006bb0:	2164      	movs	r1, #100	; 0x64
 8006bb2:	fbb0 f5f1 	udiv	r5, r0, r1
 8006bb6:	fb01 0315 	mls	r3, r1, r5, r0
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	3332      	adds	r3, #50	; 0x32
 8006bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bc2:	f003 0207 	and.w	r2, r3, #7
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	6821      	ldr	r1, [r4, #0]
 8006bca:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8006bce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bd2:	4413      	add	r3, r2
 8006bd4:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bd8:	f7ff fc54 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
 8006bdc:	e7dd      	b.n	8006b9a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d002      	beq.n	8006be8 <UART_SetConfig+0xa0>
 8006be2:	4a10      	ldr	r2, [pc, #64]	; (8006c24 <UART_SetConfig+0xdc>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d117      	bne.n	8006c18 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7ff fc5c 	bl	80064a4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bec:	6863      	ldr	r3, [r4, #4]
 8006bee:	2119      	movs	r1, #25
 8006bf0:	009a      	lsls	r2, r3, #2
 8006bf2:	fba0 0101 	umull	r0, r1, r0, r1
 8006bf6:	0f9b      	lsrs	r3, r3, #30
 8006bf8:	f7f9 ff8c 	bl	8000b14 <__aeabi_uldivmod>
 8006bfc:	2264      	movs	r2, #100	; 0x64
 8006bfe:	fbb0 f1f2 	udiv	r1, r0, r2
 8006c02:	fb02 0311 	mls	r3, r2, r1, r0
 8006c06:	6824      	ldr	r4, [r4, #0]
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	3332      	adds	r3, #50	; 0x32
 8006c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c10:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006c14:	60a3      	str	r3, [r4, #8]
}
 8006c16:	e7de      	b.n	8006bd6 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7ff fc34 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
 8006c1c:	e7e6      	b.n	8006bec <UART_SetConfig+0xa4>
 8006c1e:	bf00      	nop
 8006c20:	40011000 	.word	0x40011000
 8006c24:	40011400 	.word	0x40011400

08006c28 <HAL_UART_Init>:
{
 8006c28:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	b340      	cbz	r0, 8006c80 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006c2e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006c32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c36:	b91b      	cbnz	r3, 8006c40 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006c38:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006c3c:	f7fe f87a 	bl	8004d34 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006c40:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006c42:	2324      	movs	r3, #36	; 0x24
 8006c44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006c48:	68d3      	ldr	r3, [r2, #12]
 8006c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c4e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7ff ff79 	bl	8006b48 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c60:	695a      	ldr	r2, [r3, #20]
 8006c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c66:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c6e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c70:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006c72:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006c76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006c7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006c80:	2001      	movs	r0, #1
 8006c82:	e7fc      	b.n	8006c7e <HAL_UART_Init+0x56>

08006c84 <floorf>:
 8006c84:	ee10 3a10 	vmov	r3, s0
 8006c88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c8c:	0dca      	lsrs	r2, r1, #23
 8006c8e:	3a7f      	subs	r2, #127	; 0x7f
 8006c90:	2a16      	cmp	r2, #22
 8006c92:	dc2a      	bgt.n	8006cea <floorf+0x66>
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	da11      	bge.n	8006cbc <floorf+0x38>
 8006c98:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006cfc <floorf+0x78>
 8006c9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ca0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca8:	dd05      	ble.n	8006cb6 <floorf+0x32>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	da23      	bge.n	8006cf6 <floorf+0x72>
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <floorf+0x7c>)
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	bf18      	it	ne
 8006cb4:	4613      	movne	r3, r2
 8006cb6:	ee00 3a10 	vmov	s0, r3
 8006cba:	4770      	bx	lr
 8006cbc:	4911      	ldr	r1, [pc, #68]	; (8006d04 <floorf+0x80>)
 8006cbe:	4111      	asrs	r1, r2
 8006cc0:	420b      	tst	r3, r1
 8006cc2:	d0fa      	beq.n	8006cba <floorf+0x36>
 8006cc4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006cfc <floorf+0x78>
 8006cc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ccc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd4:	ddef      	ble.n	8006cb6 <floorf+0x32>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfbe      	ittt	lt
 8006cda:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006cde:	fa40 f202 	asrlt.w	r2, r0, r2
 8006ce2:	189b      	addlt	r3, r3, r2
 8006ce4:	ea23 0301 	bic.w	r3, r3, r1
 8006ce8:	e7e5      	b.n	8006cb6 <floorf+0x32>
 8006cea:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006cee:	d3e4      	bcc.n	8006cba <floorf+0x36>
 8006cf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006cf4:	4770      	bx	lr
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e7dd      	b.n	8006cb6 <floorf+0x32>
 8006cfa:	bf00      	nop
 8006cfc:	7149f2ca 	.word	0x7149f2ca
 8006d00:	bf800000 	.word	0xbf800000
 8006d04:	007fffff 	.word	0x007fffff

08006d08 <lrintf>:
 8006d08:	ee10 3a10 	vmov	r3, s0
 8006d0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006d10:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8006d14:	281e      	cmp	r0, #30
 8006d16:	b082      	sub	sp, #8
 8006d18:	dc2e      	bgt.n	8006d78 <lrintf+0x70>
 8006d1a:	1c41      	adds	r1, r0, #1
 8006d1c:	da02      	bge.n	8006d24 <lrintf+0x1c>
 8006d1e:	2000      	movs	r0, #0
 8006d20:	b002      	add	sp, #8
 8006d22:	4770      	bx	lr
 8006d24:	2816      	cmp	r0, #22
 8006d26:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8006d2a:	dd09      	ble.n	8006d40 <lrintf+0x38>
 8006d2c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d34:	3a96      	subs	r2, #150	; 0x96
 8006d36:	4090      	lsls	r0, r2
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d0f1      	beq.n	8006d20 <lrintf+0x18>
 8006d3c:	4240      	negs	r0, r0
 8006d3e:	e7ef      	b.n	8006d20 <lrintf+0x18>
 8006d40:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <lrintf+0x7c>)
 8006d42:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006d46:	ed93 7a00 	vldr	s14, [r3]
 8006d4a:	ee37 0a00 	vadd.f32	s0, s14, s0
 8006d4e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006d52:	eddd 7a01 	vldr	s15, [sp, #4]
 8006d56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d5a:	ee17 3a90 	vmov	r3, s15
 8006d5e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006d62:	d0dc      	beq.n	8006d1e <lrintf+0x16>
 8006d64:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006d68:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d70:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006d74:	40d8      	lsrs	r0, r3
 8006d76:	e7df      	b.n	8006d38 <lrintf+0x30>
 8006d78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006d7c:	ee17 0a90 	vmov	r0, s15
 8006d80:	e7ce      	b.n	8006d20 <lrintf+0x18>
 8006d82:	bf00      	nop
 8006d84:	08016ecc 	.word	0x08016ecc

08006d88 <rintf>:
 8006d88:	b513      	push	{r0, r1, r4, lr}
 8006d8a:	ee10 1a10 	vmov	r1, s0
 8006d8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d92:	0ddc      	lsrs	r4, r3, #23
 8006d94:	3c7f      	subs	r4, #127	; 0x7f
 8006d96:	2c16      	cmp	r4, #22
 8006d98:	dc46      	bgt.n	8006e28 <rintf+0xa0>
 8006d9a:	b32b      	cbz	r3, 8006de8 <rintf+0x60>
 8006d9c:	2c00      	cmp	r4, #0
 8006d9e:	ee10 2a10 	vmov	r2, s0
 8006da2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8006da6:	da21      	bge.n	8006dec <rintf+0x64>
 8006da8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8006dac:	425b      	negs	r3, r3
 8006dae:	4a21      	ldr	r2, [pc, #132]	; (8006e34 <rintf+0xac>)
 8006db0:	0a5b      	lsrs	r3, r3, #9
 8006db2:	0d09      	lsrs	r1, r1, #20
 8006db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db8:	0509      	lsls	r1, r1, #20
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006dc0:	ee07 3a90 	vmov	s15, r3
 8006dc4:	edd2 6a00 	vldr	s13, [r2]
 8006dc8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006dcc:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006dd0:	eddd 7a01 	vldr	s15, [sp, #4]
 8006dd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dd8:	ee17 3a90 	vmov	r3, s15
 8006ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006de4:	ee00 3a10 	vmov	s0, r3
 8006de8:	b002      	add	sp, #8
 8006dea:	bd10      	pop	{r4, pc}
 8006dec:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <rintf+0xb0>)
 8006dee:	4123      	asrs	r3, r4
 8006df0:	4219      	tst	r1, r3
 8006df2:	d0f9      	beq.n	8006de8 <rintf+0x60>
 8006df4:	085b      	lsrs	r3, r3, #1
 8006df6:	4219      	tst	r1, r3
 8006df8:	d006      	beq.n	8006e08 <rintf+0x80>
 8006dfa:	ea21 0203 	bic.w	r2, r1, r3
 8006dfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e02:	fa43 f404 	asr.w	r4, r3, r4
 8006e06:	4322      	orrs	r2, r4
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <rintf+0xac>)
 8006e0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e0e:	ed90 7a00 	vldr	s14, [r0]
 8006e12:	ee07 2a90 	vmov	s15, r2
 8006e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e1a:	edcd 7a01 	vstr	s15, [sp, #4]
 8006e1e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006e22:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006e26:	e7df      	b.n	8006de8 <rintf+0x60>
 8006e28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006e2c:	d3dc      	bcc.n	8006de8 <rintf+0x60>
 8006e2e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006e32:	e7d9      	b.n	8006de8 <rintf+0x60>
 8006e34:	08016ed4 	.word	0x08016ed4
 8006e38:	007fffff 	.word	0x007fffff

08006e3c <sinf>:
 8006e3c:	ee10 3a10 	vmov	r3, s0
 8006e40:	b507      	push	{r0, r1, r2, lr}
 8006e42:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <sinf+0x7c>)
 8006e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	dc05      	bgt.n	8006e58 <sinf+0x1c>
 8006e4c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006ebc <sinf+0x80>
 8006e50:	2000      	movs	r0, #0
 8006e52:	f001 f869 	bl	8007f28 <__kernel_sinf>
 8006e56:	e004      	b.n	8006e62 <sinf+0x26>
 8006e58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006e5c:	db04      	blt.n	8006e68 <sinf+0x2c>
 8006e5e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006e62:	b003      	add	sp, #12
 8006e64:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e68:	4668      	mov	r0, sp
 8006e6a:	f000 fc4d 	bl	8007708 <__ieee754_rem_pio2f>
 8006e6e:	f000 0003 	and.w	r0, r0, #3
 8006e72:	2801      	cmp	r0, #1
 8006e74:	d008      	beq.n	8006e88 <sinf+0x4c>
 8006e76:	2802      	cmp	r0, #2
 8006e78:	d00d      	beq.n	8006e96 <sinf+0x5a>
 8006e7a:	b9b0      	cbnz	r0, 8006eaa <sinf+0x6e>
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e82:	ed9d 0a00 	vldr	s0, [sp]
 8006e86:	e7e4      	b.n	8006e52 <sinf+0x16>
 8006e88:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e8c:	ed9d 0a00 	vldr	s0, [sp]
 8006e90:	f000 fd6a 	bl	8007968 <__kernel_cosf>
 8006e94:	e7e5      	b.n	8006e62 <sinf+0x26>
 8006e96:	2001      	movs	r0, #1
 8006e98:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e9c:	ed9d 0a00 	vldr	s0, [sp]
 8006ea0:	f001 f842 	bl	8007f28 <__kernel_sinf>
 8006ea4:	eeb1 0a40 	vneg.f32	s0, s0
 8006ea8:	e7db      	b.n	8006e62 <sinf+0x26>
 8006eaa:	eddd 0a01 	vldr	s1, [sp, #4]
 8006eae:	ed9d 0a00 	vldr	s0, [sp]
 8006eb2:	f000 fd59 	bl	8007968 <__kernel_cosf>
 8006eb6:	e7f5      	b.n	8006ea4 <sinf+0x68>
 8006eb8:	3f490fd8 	.word	0x3f490fd8
 8006ebc:	00000000 	.word	0x00000000

08006ec0 <powf>:
 8006ec0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8006ec4:	ed2d 8b04 	vpush	{d8-d9}
 8006ec8:	4ca7      	ldr	r4, [pc, #668]	; (8007168 <powf+0x2a8>)
 8006eca:	b08a      	sub	sp, #40	; 0x28
 8006ecc:	eef0 8a40 	vmov.f32	s17, s0
 8006ed0:	eeb0 8a60 	vmov.f32	s16, s1
 8006ed4:	f000 f958 	bl	8007188 <__ieee754_powf>
 8006ed8:	f994 5000 	ldrsb.w	r5, [r4]
 8006edc:	1c6b      	adds	r3, r5, #1
 8006ede:	eeb0 9a40 	vmov.f32	s18, s0
 8006ee2:	4626      	mov	r6, r4
 8006ee4:	d05f      	beq.n	8006fa6 <powf+0xe6>
 8006ee6:	eeb4 8a48 	vcmp.f32	s16, s16
 8006eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eee:	d65a      	bvs.n	8006fa6 <powf+0xe6>
 8006ef0:	eef4 8a68 	vcmp.f32	s17, s17
 8006ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef8:	d721      	bvc.n	8006f3e <powf+0x7e>
 8006efa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f02:	d150      	bne.n	8006fa6 <powf+0xe6>
 8006f04:	2301      	movs	r3, #1
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	4b98      	ldr	r3, [pc, #608]	; (800716c <powf+0x2ac>)
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	ee18 0a90 	vmov	r0, s17
 8006f10:	2300      	movs	r3, #0
 8006f12:	9308      	str	r3, [sp, #32]
 8006f14:	f7f9 fabc 	bl	8000490 <__aeabi_f2d>
 8006f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f1c:	ee18 0a10 	vmov	r0, s16
 8006f20:	f7f9 fab6 	bl	8000490 <__aeabi_f2d>
 8006f24:	4b92      	ldr	r3, [pc, #584]	; (8007170 <powf+0x2b0>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	2d02      	cmp	r5, #2
 8006f2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f32:	d032      	beq.n	8006f9a <powf+0xda>
 8006f34:	4668      	mov	r0, sp
 8006f36:	f001 f83f 	bl	8007fb8 <matherr>
 8006f3a:	bb40      	cbnz	r0, 8006f8e <powf+0xce>
 8006f3c:	e065      	b.n	800700a <powf+0x14a>
 8006f3e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8007174 <powf+0x2b4>
 8006f42:	eef4 8a69 	vcmp.f32	s17, s19
 8006f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4a:	d163      	bne.n	8007014 <powf+0x154>
 8006f4c:	eeb4 8a69 	vcmp.f32	s16, s19
 8006f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f54:	d12e      	bne.n	8006fb4 <powf+0xf4>
 8006f56:	2301      	movs	r3, #1
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4b84      	ldr	r3, [pc, #528]	; (800716c <powf+0x2ac>)
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	ee18 0a90 	vmov	r0, s17
 8006f62:	2300      	movs	r3, #0
 8006f64:	9308      	str	r3, [sp, #32]
 8006f66:	f7f9 fa93 	bl	8000490 <__aeabi_f2d>
 8006f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f6e:	ee18 0a10 	vmov	r0, s16
 8006f72:	f7f9 fa8d 	bl	8000490 <__aeabi_f2d>
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	d0d6      	beq.n	8006f34 <powf+0x74>
 8006f86:	4b7a      	ldr	r3, [pc, #488]	; (8007170 <powf+0x2b0>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f8e:	9b08      	ldr	r3, [sp, #32]
 8006f90:	b11b      	cbz	r3, 8006f9a <powf+0xda>
 8006f92:	f001 f897 	bl	80080c4 <__errno>
 8006f96:	9b08      	ldr	r3, [sp, #32]
 8006f98:	6003      	str	r3, [r0, #0]
 8006f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f9e:	f7f9 fd69 	bl	8000a74 <__aeabi_d2f>
 8006fa2:	ee09 0a10 	vmov	s18, r0
 8006fa6:	eeb0 0a49 	vmov.f32	s0, s18
 8006faa:	b00a      	add	sp, #40	; 0x28
 8006fac:	ecbd 8b04 	vpop	{d8-d9}
 8006fb0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8006fb8:	f001 f807 	bl	8007fca <finitef>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d0f2      	beq.n	8006fa6 <powf+0xe6>
 8006fc0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc8:	d5ed      	bpl.n	8006fa6 <powf+0xe6>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	4b67      	ldr	r3, [pc, #412]	; (800716c <powf+0x2ac>)
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	ee18 0a90 	vmov	r0, s17
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9308      	str	r3, [sp, #32]
 8006fda:	f7f9 fa59 	bl	8000490 <__aeabi_f2d>
 8006fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe2:	ee18 0a10 	vmov	r0, s16
 8006fe6:	f7f9 fa53 	bl	8000490 <__aeabi_f2d>
 8006fea:	f994 3000 	ldrsb.w	r3, [r4]
 8006fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff2:	b923      	cbnz	r3, 8006ffe <powf+0x13e>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ffc:	e79a      	b.n	8006f34 <powf+0x74>
 8006ffe:	495e      	ldr	r1, [pc, #376]	; (8007178 <powf+0x2b8>)
 8007000:	2000      	movs	r0, #0
 8007002:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d194      	bne.n	8006f34 <powf+0x74>
 800700a:	f001 f85b 	bl	80080c4 <__errno>
 800700e:	2321      	movs	r3, #33	; 0x21
 8007010:	6003      	str	r3, [r0, #0]
 8007012:	e7bc      	b.n	8006f8e <powf+0xce>
 8007014:	f000 ffd9 	bl	8007fca <finitef>
 8007018:	4605      	mov	r5, r0
 800701a:	2800      	cmp	r0, #0
 800701c:	d173      	bne.n	8007106 <powf+0x246>
 800701e:	eeb0 0a68 	vmov.f32	s0, s17
 8007022:	f000 ffd2 	bl	8007fca <finitef>
 8007026:	2800      	cmp	r0, #0
 8007028:	d06d      	beq.n	8007106 <powf+0x246>
 800702a:	eeb0 0a48 	vmov.f32	s0, s16
 800702e:	f000 ffcc 	bl	8007fca <finitef>
 8007032:	2800      	cmp	r0, #0
 8007034:	d067      	beq.n	8007106 <powf+0x246>
 8007036:	ee18 0a90 	vmov	r0, s17
 800703a:	f7f9 fa29 	bl	8000490 <__aeabi_f2d>
 800703e:	4680      	mov	r8, r0
 8007040:	ee18 0a10 	vmov	r0, s16
 8007044:	4689      	mov	r9, r1
 8007046:	f7f9 fa23 	bl	8000490 <__aeabi_f2d>
 800704a:	eeb4 9a49 	vcmp.f32	s18, s18
 800704e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007052:	f994 4000 	ldrsb.w	r4, [r4]
 8007056:	4b45      	ldr	r3, [pc, #276]	; (800716c <powf+0x2ac>)
 8007058:	d713      	bvc.n	8007082 <powf+0x1c2>
 800705a:	2201      	movs	r2, #1
 800705c:	e9cd 2300 	strd	r2, r3, [sp]
 8007060:	9508      	str	r5, [sp, #32]
 8007062:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800706a:	2c00      	cmp	r4, #0
 800706c:	d0c2      	beq.n	8006ff4 <powf+0x134>
 800706e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8007072:	ee17 0a90 	vmov	r0, s15
 8007076:	f7f9 fa0b 	bl	8000490 <__aeabi_f2d>
 800707a:	2c02      	cmp	r4, #2
 800707c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007080:	e7c2      	b.n	8007008 <powf+0x148>
 8007082:	2203      	movs	r2, #3
 8007084:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007088:	e9cd 2300 	strd	r2, r3, [sp]
 800708c:	9508      	str	r5, [sp, #32]
 800708e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007092:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007096:	ee28 8a27 	vmul.f32	s16, s16, s15
 800709a:	b9fc      	cbnz	r4, 80070dc <powf+0x21c>
 800709c:	4b37      	ldr	r3, [pc, #220]	; (800717c <powf+0x2bc>)
 800709e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80070a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80070a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070ae:	d553      	bpl.n	8007158 <powf+0x298>
 80070b0:	eeb0 0a48 	vmov.f32	s0, s16
 80070b4:	f7ff fe68 	bl	8006d88 <rintf>
 80070b8:	eeb4 0a48 	vcmp.f32	s0, s16
 80070bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c0:	d004      	beq.n	80070cc <powf+0x20c>
 80070c2:	4b2f      	ldr	r3, [pc, #188]	; (8007180 <powf+0x2c0>)
 80070c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80070c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070cc:	f996 3000 	ldrsb.w	r3, [r6]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d141      	bne.n	8007158 <powf+0x298>
 80070d4:	f000 fff6 	bl	80080c4 <__errno>
 80070d8:	2322      	movs	r3, #34	; 0x22
 80070da:	e799      	b.n	8007010 <powf+0x150>
 80070dc:	4b29      	ldr	r3, [pc, #164]	; (8007184 <powf+0x2c4>)
 80070de:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80070e2:	2200      	movs	r2, #0
 80070e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070ec:	d5ee      	bpl.n	80070cc <powf+0x20c>
 80070ee:	eeb0 0a48 	vmov.f32	s0, s16
 80070f2:	f7ff fe49 	bl	8006d88 <rintf>
 80070f6:	eeb4 0a48 	vcmp.f32	s0, s16
 80070fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fe:	d0e5      	beq.n	80070cc <powf+0x20c>
 8007100:	2200      	movs	r2, #0
 8007102:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <powf+0x2b8>)
 8007104:	e7e0      	b.n	80070c8 <powf+0x208>
 8007106:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800710a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710e:	f47f af4a 	bne.w	8006fa6 <powf+0xe6>
 8007112:	eeb0 0a68 	vmov.f32	s0, s17
 8007116:	f000 ff58 	bl	8007fca <finitef>
 800711a:	2800      	cmp	r0, #0
 800711c:	f43f af43 	beq.w	8006fa6 <powf+0xe6>
 8007120:	eeb0 0a48 	vmov.f32	s0, s16
 8007124:	f000 ff51 	bl	8007fca <finitef>
 8007128:	2800      	cmp	r0, #0
 800712a:	f43f af3c 	beq.w	8006fa6 <powf+0xe6>
 800712e:	2304      	movs	r3, #4
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	4b0e      	ldr	r3, [pc, #56]	; (800716c <powf+0x2ac>)
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	ee18 0a90 	vmov	r0, s17
 800713a:	2300      	movs	r3, #0
 800713c:	9308      	str	r3, [sp, #32]
 800713e:	f7f9 f9a7 	bl	8000490 <__aeabi_f2d>
 8007142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007146:	ee18 0a10 	vmov	r0, s16
 800714a:	f7f9 f9a1 	bl	8000490 <__aeabi_f2d>
 800714e:	2200      	movs	r2, #0
 8007150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007154:	2300      	movs	r3, #0
 8007156:	e7b7      	b.n	80070c8 <powf+0x208>
 8007158:	4668      	mov	r0, sp
 800715a:	f000 ff2d 	bl	8007fb8 <matherr>
 800715e:	2800      	cmp	r0, #0
 8007160:	f47f af15 	bne.w	8006f8e <powf+0xce>
 8007164:	e7b6      	b.n	80070d4 <powf+0x214>
 8007166:	bf00      	nop
 8007168:	20000094 	.word	0x20000094
 800716c:	08016edc 	.word	0x08016edc
 8007170:	3ff00000 	.word	0x3ff00000
 8007174:	00000000 	.word	0x00000000
 8007178:	fff00000 	.word	0xfff00000
 800717c:	47efffff 	.word	0x47efffff
 8007180:	c7efffff 	.word	0xc7efffff
 8007184:	7ff00000 	.word	0x7ff00000

08007188 <__ieee754_powf>:
 8007188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718c:	ee10 5a90 	vmov	r5, s1
 8007190:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007194:	ed2d 8b02 	vpush	{d8}
 8007198:	eeb0 8a40 	vmov.f32	s16, s0
 800719c:	eef0 8a60 	vmov.f32	s17, s1
 80071a0:	f000 8293 	beq.w	80076ca <__ieee754_powf+0x542>
 80071a4:	ee10 8a10 	vmov	r8, s0
 80071a8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80071ac:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80071b0:	dc06      	bgt.n	80071c0 <__ieee754_powf+0x38>
 80071b2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80071b6:	dd0a      	ble.n	80071ce <__ieee754_powf+0x46>
 80071b8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80071bc:	f000 8285 	beq.w	80076ca <__ieee754_powf+0x542>
 80071c0:	ecbd 8b02 	vpop	{d8}
 80071c4:	48d9      	ldr	r0, [pc, #868]	; (800752c <__ieee754_powf+0x3a4>)
 80071c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ca:	f000 bf09 	b.w	8007fe0 <nanf>
 80071ce:	f1b8 0f00 	cmp.w	r8, #0
 80071d2:	da1d      	bge.n	8007210 <__ieee754_powf+0x88>
 80071d4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80071d8:	da2c      	bge.n	8007234 <__ieee754_powf+0xac>
 80071da:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80071de:	db30      	blt.n	8007242 <__ieee754_powf+0xba>
 80071e0:	15fb      	asrs	r3, r7, #23
 80071e2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80071e6:	fa47 f603 	asr.w	r6, r7, r3
 80071ea:	fa06 f303 	lsl.w	r3, r6, r3
 80071ee:	42bb      	cmp	r3, r7
 80071f0:	d127      	bne.n	8007242 <__ieee754_powf+0xba>
 80071f2:	f006 0601 	and.w	r6, r6, #1
 80071f6:	f1c6 0602 	rsb	r6, r6, #2
 80071fa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80071fe:	d122      	bne.n	8007246 <__ieee754_powf+0xbe>
 8007200:	2d00      	cmp	r5, #0
 8007202:	f280 8268 	bge.w	80076d6 <__ieee754_powf+0x54e>
 8007206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800720a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800720e:	e00d      	b.n	800722c <__ieee754_powf+0xa4>
 8007210:	2600      	movs	r6, #0
 8007212:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007216:	d1f0      	bne.n	80071fa <__ieee754_powf+0x72>
 8007218:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800721c:	f000 8255 	beq.w	80076ca <__ieee754_powf+0x542>
 8007220:	dd0a      	ble.n	8007238 <__ieee754_powf+0xb0>
 8007222:	2d00      	cmp	r5, #0
 8007224:	f280 8254 	bge.w	80076d0 <__ieee754_powf+0x548>
 8007228:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8007530 <__ieee754_powf+0x3a8>
 800722c:	ecbd 8b02 	vpop	{d8}
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	2602      	movs	r6, #2
 8007236:	e7ec      	b.n	8007212 <__ieee754_powf+0x8a>
 8007238:	2d00      	cmp	r5, #0
 800723a:	daf5      	bge.n	8007228 <__ieee754_powf+0xa0>
 800723c:	eeb1 0a68 	vneg.f32	s0, s17
 8007240:	e7f4      	b.n	800722c <__ieee754_powf+0xa4>
 8007242:	2600      	movs	r6, #0
 8007244:	e7d9      	b.n	80071fa <__ieee754_powf+0x72>
 8007246:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800724a:	d102      	bne.n	8007252 <__ieee754_powf+0xca>
 800724c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007250:	e7ec      	b.n	800722c <__ieee754_powf+0xa4>
 8007252:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007256:	eeb0 0a48 	vmov.f32	s0, s16
 800725a:	d108      	bne.n	800726e <__ieee754_powf+0xe6>
 800725c:	f1b8 0f00 	cmp.w	r8, #0
 8007260:	db05      	blt.n	800726e <__ieee754_powf+0xe6>
 8007262:	ecbd 8b02 	vpop	{d8}
 8007266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726a:	f000 bb79 	b.w	8007960 <__ieee754_sqrtf>
 800726e:	f000 fea5 	bl	8007fbc <fabsf>
 8007272:	b124      	cbz	r4, 800727e <__ieee754_powf+0xf6>
 8007274:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007278:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800727c:	d117      	bne.n	80072ae <__ieee754_powf+0x126>
 800727e:	2d00      	cmp	r5, #0
 8007280:	bfbc      	itt	lt
 8007282:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007286:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800728a:	f1b8 0f00 	cmp.w	r8, #0
 800728e:	dacd      	bge.n	800722c <__ieee754_powf+0xa4>
 8007290:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007294:	ea54 0306 	orrs.w	r3, r4, r6
 8007298:	d104      	bne.n	80072a4 <__ieee754_powf+0x11c>
 800729a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800729e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80072a2:	e7c3      	b.n	800722c <__ieee754_powf+0xa4>
 80072a4:	2e01      	cmp	r6, #1
 80072a6:	d1c1      	bne.n	800722c <__ieee754_powf+0xa4>
 80072a8:	eeb1 0a40 	vneg.f32	s0, s0
 80072ac:	e7be      	b.n	800722c <__ieee754_powf+0xa4>
 80072ae:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80072b2:	3801      	subs	r0, #1
 80072b4:	ea56 0300 	orrs.w	r3, r6, r0
 80072b8:	d104      	bne.n	80072c4 <__ieee754_powf+0x13c>
 80072ba:	ee38 8a48 	vsub.f32	s16, s16, s16
 80072be:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80072c2:	e7b3      	b.n	800722c <__ieee754_powf+0xa4>
 80072c4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80072c8:	dd6d      	ble.n	80073a6 <__ieee754_powf+0x21e>
 80072ca:	4b9a      	ldr	r3, [pc, #616]	; (8007534 <__ieee754_powf+0x3ac>)
 80072cc:	429c      	cmp	r4, r3
 80072ce:	dc06      	bgt.n	80072de <__ieee754_powf+0x156>
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	daa9      	bge.n	8007228 <__ieee754_powf+0xa0>
 80072d4:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8007538 <__ieee754_powf+0x3b0>
 80072d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80072dc:	e7a6      	b.n	800722c <__ieee754_powf+0xa4>
 80072de:	4b97      	ldr	r3, [pc, #604]	; (800753c <__ieee754_powf+0x3b4>)
 80072e0:	429c      	cmp	r4, r3
 80072e2:	dd02      	ble.n	80072ea <__ieee754_powf+0x162>
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	dcf5      	bgt.n	80072d4 <__ieee754_powf+0x14c>
 80072e8:	e79e      	b.n	8007228 <__ieee754_powf+0xa0>
 80072ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80072f2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8007540 <__ieee754_powf+0x3b8>
 80072f6:	eef1 6a40 	vneg.f32	s13, s0
 80072fa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80072fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007302:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007306:	eee7 7a40 	vfms.f32	s15, s14, s0
 800730a:	ee60 0a00 	vmul.f32	s1, s0, s0
 800730e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8007544 <__ieee754_powf+0x3bc>
 8007312:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8007316:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8007548 <__ieee754_powf+0x3c0>
 800731a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800731e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007322:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800754c <__ieee754_powf+0x3c4>
 8007326:	eeb0 6a67 	vmov.f32	s12, s15
 800732a:	eea0 6a07 	vfma.f32	s12, s0, s14
 800732e:	ee16 3a10 	vmov	r3, s12
 8007332:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007336:	f023 030f 	bic.w	r3, r3, #15
 800733a:	ee00 3a90 	vmov	s1, r3
 800733e:	eee6 0a87 	vfma.f32	s1, s13, s14
 8007342:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007346:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800734a:	f025 050f 	bic.w	r5, r5, #15
 800734e:	ee07 5a10 	vmov	s14, r5
 8007352:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007356:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007362:	3e01      	subs	r6, #1
 8007364:	ea56 0200 	orrs.w	r2, r6, r0
 8007368:	ee07 5a10 	vmov	s14, r5
 800736c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007370:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007374:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007378:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800737c:	ee17 4a10 	vmov	r4, s14
 8007380:	bf08      	it	eq
 8007382:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007386:	2c00      	cmp	r4, #0
 8007388:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800738c:	f340 8184 	ble.w	8007698 <__ieee754_powf+0x510>
 8007390:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007394:	f340 80fc 	ble.w	8007590 <__ieee754_powf+0x408>
 8007398:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007538 <__ieee754_powf+0x3b0>
 800739c:	ee28 0a27 	vmul.f32	s0, s16, s15
 80073a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80073a4:	e742      	b.n	800722c <__ieee754_powf+0xa4>
 80073a6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80073aa:	bfbf      	itttt	lt
 80073ac:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8007550 <__ieee754_powf+0x3c8>
 80073b0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80073b4:	f06f 0217 	mvnlt.w	r2, #23
 80073b8:	ee17 4a90 	vmovlt	r4, s15
 80073bc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80073c0:	bfa8      	it	ge
 80073c2:	2200      	movge	r2, #0
 80073c4:	3b7f      	subs	r3, #127	; 0x7f
 80073c6:	4413      	add	r3, r2
 80073c8:	4a62      	ldr	r2, [pc, #392]	; (8007554 <__ieee754_powf+0x3cc>)
 80073ca:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80073ce:	4294      	cmp	r4, r2
 80073d0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80073d4:	dd06      	ble.n	80073e4 <__ieee754_powf+0x25c>
 80073d6:	4a60      	ldr	r2, [pc, #384]	; (8007558 <__ieee754_powf+0x3d0>)
 80073d8:	4294      	cmp	r4, r2
 80073da:	f340 80a5 	ble.w	8007528 <__ieee754_powf+0x3a0>
 80073de:	3301      	adds	r3, #1
 80073e0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80073e4:	2400      	movs	r4, #0
 80073e6:	4a5d      	ldr	r2, [pc, #372]	; (800755c <__ieee754_powf+0x3d4>)
 80073e8:	00a7      	lsls	r7, r4, #2
 80073ea:	443a      	add	r2, r7
 80073ec:	ee07 1a90 	vmov	s15, r1
 80073f0:	ed92 7a00 	vldr	s14, [r2]
 80073f4:	4a5a      	ldr	r2, [pc, #360]	; (8007560 <__ieee754_powf+0x3d8>)
 80073f6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80073fa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80073fe:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007402:	1049      	asrs	r1, r1, #1
 8007404:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007408:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800740c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007410:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8007414:	ee06 1a10 	vmov	s12, r1
 8007418:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800741c:	ee14 ca90 	vmov	ip, s9
 8007420:	ea02 0c0c 	and.w	ip, r2, ip
 8007424:	ee05 ca10 	vmov	s10, ip
 8007428:	eeb1 4a45 	vneg.f32	s8, s10
 800742c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007430:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007434:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007564 <__ieee754_powf+0x3dc>
 8007438:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800743c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007440:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007444:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8007448:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800744c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8007568 <__ieee754_powf+0x3e0>
 8007450:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007454:	eddf 5a45 	vldr	s11, [pc, #276]	; 800756c <__ieee754_powf+0x3e4>
 8007458:	eee7 5a27 	vfma.f32	s11, s14, s15
 800745c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007540 <__ieee754_powf+0x3b8>
 8007460:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007464:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007570 <__ieee754_powf+0x3e8>
 8007468:	eee7 5a27 	vfma.f32	s11, s14, s15
 800746c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007574 <__ieee754_powf+0x3ec>
 8007470:	ee75 6a24 	vadd.f32	s13, s10, s9
 8007474:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007478:	ee66 6a86 	vmul.f32	s13, s13, s12
 800747c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8007480:	eef0 7a65 	vmov.f32	s15, s11
 8007484:	eee3 6a87 	vfma.f32	s13, s7, s14
 8007488:	eee5 7a05 	vfma.f32	s15, s10, s10
 800748c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007490:	ee17 1a90 	vmov	r1, s15
 8007494:	4011      	ands	r1, r2
 8007496:	ee07 1a90 	vmov	s15, r1
 800749a:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800749e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8007578 <__ieee754_powf+0x3f0>
 80074a2:	eea4 7a05 	vfma.f32	s14, s8, s10
 80074a6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80074aa:	ee27 7a24 	vmul.f32	s14, s14, s9
 80074ae:	eea7 7a86 	vfma.f32	s14, s15, s12
 80074b2:	eeb0 6a47 	vmov.f32	s12, s14
 80074b6:	eea5 6a27 	vfma.f32	s12, s10, s15
 80074ba:	ee16 1a10 	vmov	r1, s12
 80074be:	4011      	ands	r1, r2
 80074c0:	ee06 1a90 	vmov	s13, r1
 80074c4:	eee4 6a27 	vfma.f32	s13, s8, s15
 80074c8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800757c <__ieee754_powf+0x3f4>
 80074cc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80074d0:	ee06 1a10 	vmov	s12, r1
 80074d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074d8:	eddf 7a29 	vldr	s15, [pc, #164]	; 8007580 <__ieee754_powf+0x3f8>
 80074dc:	4929      	ldr	r1, [pc, #164]	; (8007584 <__ieee754_powf+0x3fc>)
 80074de:	eea6 7a27 	vfma.f32	s14, s12, s15
 80074e2:	4439      	add	r1, r7
 80074e4:	edd1 7a00 	vldr	s15, [r1]
 80074e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef0 0a47 	vmov.f32	s1, s14
 80074f4:	4b24      	ldr	r3, [pc, #144]	; (8007588 <__ieee754_powf+0x400>)
 80074f6:	eee6 0a25 	vfma.f32	s1, s12, s11
 80074fa:	443b      	add	r3, r7
 80074fc:	ed93 5a00 	vldr	s10, [r3]
 8007500:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007504:	ee70 0a85 	vadd.f32	s1, s1, s10
 8007508:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800750c:	ee17 3a90 	vmov	r3, s15
 8007510:	4013      	ands	r3, r2
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800751a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800751e:	eee6 7a65 	vfms.f32	s15, s12, s11
 8007522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007526:	e70e      	b.n	8007346 <__ieee754_powf+0x1be>
 8007528:	2401      	movs	r4, #1
 800752a:	e75c      	b.n	80073e6 <__ieee754_powf+0x25e>
 800752c:	08016ee0 	.word	0x08016ee0
 8007530:	00000000 	.word	0x00000000
 8007534:	3f7ffff7 	.word	0x3f7ffff7
 8007538:	7149f2ca 	.word	0x7149f2ca
 800753c:	3f800007 	.word	0x3f800007
 8007540:	3eaaaaab 	.word	0x3eaaaaab
 8007544:	36eca570 	.word	0x36eca570
 8007548:	3fb8aa3b 	.word	0x3fb8aa3b
 800754c:	3fb8aa00 	.word	0x3fb8aa00
 8007550:	4b800000 	.word	0x4b800000
 8007554:	001cc471 	.word	0x001cc471
 8007558:	005db3d6 	.word	0x005db3d6
 800755c:	08016ee4 	.word	0x08016ee4
 8007560:	fffff000 	.word	0xfffff000
 8007564:	3e6c3255 	.word	0x3e6c3255
 8007568:	3e53f142 	.word	0x3e53f142
 800756c:	3e8ba305 	.word	0x3e8ba305
 8007570:	3edb6db7 	.word	0x3edb6db7
 8007574:	3f19999a 	.word	0x3f19999a
 8007578:	3f763800 	.word	0x3f763800
 800757c:	3f76384f 	.word	0x3f76384f
 8007580:	369dc3a0 	.word	0x369dc3a0
 8007584:	08016ef4 	.word	0x08016ef4
 8007588:	08016eec 	.word	0x08016eec
 800758c:	3338aa3c 	.word	0x3338aa3c
 8007590:	f040 8092 	bne.w	80076b8 <__ieee754_powf+0x530>
 8007594:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800758c <__ieee754_powf+0x404>
 8007598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800759c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80075a0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80075a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a8:	f73f aef6 	bgt.w	8007398 <__ieee754_powf+0x210>
 80075ac:	15db      	asrs	r3, r3, #23
 80075ae:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80075b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80075b6:	4103      	asrs	r3, r0
 80075b8:	4423      	add	r3, r4
 80075ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80075be:	4947      	ldr	r1, [pc, #284]	; (80076dc <__ieee754_powf+0x554>)
 80075c0:	3a7f      	subs	r2, #127	; 0x7f
 80075c2:	4111      	asrs	r1, r2
 80075c4:	ea23 0101 	bic.w	r1, r3, r1
 80075c8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80075cc:	ee07 1a10 	vmov	s14, r1
 80075d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80075d4:	f1c2 0217 	rsb	r2, r2, #23
 80075d8:	4110      	asrs	r0, r2
 80075da:	2c00      	cmp	r4, #0
 80075dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075e0:	bfb8      	it	lt
 80075e2:	4240      	neglt	r0, r0
 80075e4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80075e8:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076e0 <__ieee754_powf+0x558>
 80075ec:	ee17 3a10 	vmov	r3, s14
 80075f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80075f4:	f023 030f 	bic.w	r3, r3, #15
 80075f8:	ee07 3a10 	vmov	s14, r3
 80075fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007600:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007604:	eddf 7a37 	vldr	s15, [pc, #220]	; 80076e4 <__ieee754_powf+0x55c>
 8007608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007610:	eddf 6a35 	vldr	s13, [pc, #212]	; 80076e8 <__ieee754_powf+0x560>
 8007614:	eeb0 0a67 	vmov.f32	s0, s15
 8007618:	eea7 0a26 	vfma.f32	s0, s14, s13
 800761c:	eeb0 6a40 	vmov.f32	s12, s0
 8007620:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007624:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007628:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800762c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80076ec <__ieee754_powf+0x564>
 8007630:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80076f0 <__ieee754_powf+0x568>
 8007634:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007638:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80076f4 <__ieee754_powf+0x56c>
 800763c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007640:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80076f8 <__ieee754_powf+0x570>
 8007644:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007648:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80076fc <__ieee754_powf+0x574>
 800764c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007650:	eeb0 6a40 	vmov.f32	s12, s0
 8007654:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007658:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800765c:	eeb0 7a46 	vmov.f32	s14, s12
 8007660:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007664:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007668:	eee0 7a27 	vfma.f32	s15, s0, s15
 800766c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007674:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007678:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800767c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007680:	ee10 3a10 	vmov	r3, s0
 8007684:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800768c:	da1a      	bge.n	80076c4 <__ieee754_powf+0x53c>
 800768e:	f000 fcad 	bl	8007fec <scalbnf>
 8007692:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007696:	e5c9      	b.n	800722c <__ieee754_powf+0xa4>
 8007698:	4a19      	ldr	r2, [pc, #100]	; (8007700 <__ieee754_powf+0x578>)
 800769a:	4293      	cmp	r3, r2
 800769c:	dd02      	ble.n	80076a4 <__ieee754_powf+0x51c>
 800769e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007704 <__ieee754_powf+0x57c>
 80076a2:	e67b      	b.n	800739c <__ieee754_powf+0x214>
 80076a4:	d108      	bne.n	80076b8 <__ieee754_powf+0x530>
 80076a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076aa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80076ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b2:	f6ff af7b 	blt.w	80075ac <__ieee754_powf+0x424>
 80076b6:	e7f2      	b.n	800769e <__ieee754_powf+0x516>
 80076b8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80076bc:	f73f af76 	bgt.w	80075ac <__ieee754_powf+0x424>
 80076c0:	2000      	movs	r0, #0
 80076c2:	e78f      	b.n	80075e4 <__ieee754_powf+0x45c>
 80076c4:	ee00 3a10 	vmov	s0, r3
 80076c8:	e7e3      	b.n	8007692 <__ieee754_powf+0x50a>
 80076ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80076ce:	e5ad      	b.n	800722c <__ieee754_powf+0xa4>
 80076d0:	eeb0 0a68 	vmov.f32	s0, s17
 80076d4:	e5aa      	b.n	800722c <__ieee754_powf+0xa4>
 80076d6:	eeb0 0a48 	vmov.f32	s0, s16
 80076da:	e5a7      	b.n	800722c <__ieee754_powf+0xa4>
 80076dc:	007fffff 	.word	0x007fffff
 80076e0:	3f317218 	.word	0x3f317218
 80076e4:	35bfbe8c 	.word	0x35bfbe8c
 80076e8:	3f317200 	.word	0x3f317200
 80076ec:	3331bb4c 	.word	0x3331bb4c
 80076f0:	b5ddea0e 	.word	0xb5ddea0e
 80076f4:	388ab355 	.word	0x388ab355
 80076f8:	bb360b61 	.word	0xbb360b61
 80076fc:	3e2aaaab 	.word	0x3e2aaaab
 8007700:	43160000 	.word	0x43160000
 8007704:	0da24260 	.word	0x0da24260

08007708 <__ieee754_rem_pio2f>:
 8007708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770a:	ee10 6a10 	vmov	r6, s0
 800770e:	4b86      	ldr	r3, [pc, #536]	; (8007928 <__ieee754_rem_pio2f+0x220>)
 8007710:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007714:	429c      	cmp	r4, r3
 8007716:	b087      	sub	sp, #28
 8007718:	4605      	mov	r5, r0
 800771a:	dc05      	bgt.n	8007728 <__ieee754_rem_pio2f+0x20>
 800771c:	2300      	movs	r3, #0
 800771e:	ed85 0a00 	vstr	s0, [r5]
 8007722:	6043      	str	r3, [r0, #4]
 8007724:	2000      	movs	r0, #0
 8007726:	e020      	b.n	800776a <__ieee754_rem_pio2f+0x62>
 8007728:	4b80      	ldr	r3, [pc, #512]	; (800792c <__ieee754_rem_pio2f+0x224>)
 800772a:	429c      	cmp	r4, r3
 800772c:	dc38      	bgt.n	80077a0 <__ieee754_rem_pio2f+0x98>
 800772e:	2e00      	cmp	r6, #0
 8007730:	f024 040f 	bic.w	r4, r4, #15
 8007734:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8007930 <__ieee754_rem_pio2f+0x228>
 8007738:	4b7e      	ldr	r3, [pc, #504]	; (8007934 <__ieee754_rem_pio2f+0x22c>)
 800773a:	dd18      	ble.n	800776e <__ieee754_rem_pio2f+0x66>
 800773c:	429c      	cmp	r4, r3
 800773e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007742:	bf09      	itett	eq
 8007744:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007938 <__ieee754_rem_pio2f+0x230>
 8007748:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800793c <__ieee754_rem_pio2f+0x234>
 800774c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007750:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007940 <__ieee754_rem_pio2f+0x238>
 8007754:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007758:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800775c:	edc0 6a00 	vstr	s13, [r0]
 8007760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007764:	edc0 7a01 	vstr	s15, [r0, #4]
 8007768:	2001      	movs	r0, #1
 800776a:	b007      	add	sp, #28
 800776c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776e:	429c      	cmp	r4, r3
 8007770:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007774:	bf09      	itett	eq
 8007776:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007938 <__ieee754_rem_pio2f+0x230>
 800777a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800793c <__ieee754_rem_pio2f+0x234>
 800777e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007782:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007940 <__ieee754_rem_pio2f+0x238>
 8007786:	ee77 6a87 	vadd.f32	s13, s15, s14
 800778a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800778e:	edc0 6a00 	vstr	s13, [r0]
 8007792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007796:	edc0 7a01 	vstr	s15, [r0, #4]
 800779a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800779e:	e7e4      	b.n	800776a <__ieee754_rem_pio2f+0x62>
 80077a0:	4b68      	ldr	r3, [pc, #416]	; (8007944 <__ieee754_rem_pio2f+0x23c>)
 80077a2:	429c      	cmp	r4, r3
 80077a4:	dc71      	bgt.n	800788a <__ieee754_rem_pio2f+0x182>
 80077a6:	f000 fc09 	bl	8007fbc <fabsf>
 80077aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007948 <__ieee754_rem_pio2f+0x240>
 80077ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80077b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80077b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80077be:	ee17 0a90 	vmov	r0, s15
 80077c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007930 <__ieee754_rem_pio2f+0x228>
 80077c6:	eeb1 7a46 	vneg.f32	s14, s12
 80077ca:	eea7 0a27 	vfma.f32	s0, s14, s15
 80077ce:	281f      	cmp	r0, #31
 80077d0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800793c <__ieee754_rem_pio2f+0x234>
 80077d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80077d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80077dc:	ee16 3a90 	vmov	r3, s13
 80077e0:	dc1c      	bgt.n	800781c <__ieee754_rem_pio2f+0x114>
 80077e2:	1e47      	subs	r7, r0, #1
 80077e4:	4959      	ldr	r1, [pc, #356]	; (800794c <__ieee754_rem_pio2f+0x244>)
 80077e6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80077ea:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80077ee:	428a      	cmp	r2, r1
 80077f0:	d014      	beq.n	800781c <__ieee754_rem_pio2f+0x114>
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	ed95 7a00 	vldr	s14, [r5]
 80077f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80077fc:	2e00      	cmp	r6, #0
 80077fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007802:	ed85 0a01 	vstr	s0, [r5, #4]
 8007806:	dab0      	bge.n	800776a <__ieee754_rem_pio2f+0x62>
 8007808:	eeb1 7a47 	vneg.f32	s14, s14
 800780c:	eeb1 0a40 	vneg.f32	s0, s0
 8007810:	ed85 7a00 	vstr	s14, [r5]
 8007814:	ed85 0a01 	vstr	s0, [r5, #4]
 8007818:	4240      	negs	r0, r0
 800781a:	e7a6      	b.n	800776a <__ieee754_rem_pio2f+0x62>
 800781c:	15e4      	asrs	r4, r4, #23
 800781e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007822:	1aa2      	subs	r2, r4, r2
 8007824:	2a08      	cmp	r2, #8
 8007826:	dde4      	ble.n	80077f2 <__ieee754_rem_pio2f+0xea>
 8007828:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007938 <__ieee754_rem_pio2f+0x230>
 800782c:	eef0 6a40 	vmov.f32	s13, s0
 8007830:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007834:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007838:	eea7 0a27 	vfma.f32	s0, s14, s15
 800783c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007940 <__ieee754_rem_pio2f+0x238>
 8007840:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007844:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007848:	eef0 7a40 	vmov.f32	s15, s0
 800784c:	ee15 3a90 	vmov	r3, s11
 8007850:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007854:	1aa4      	subs	r4, r4, r2
 8007856:	2c19      	cmp	r4, #25
 8007858:	dc04      	bgt.n	8007864 <__ieee754_rem_pio2f+0x15c>
 800785a:	edc5 5a00 	vstr	s11, [r5]
 800785e:	eeb0 0a66 	vmov.f32	s0, s13
 8007862:	e7c7      	b.n	80077f4 <__ieee754_rem_pio2f+0xec>
 8007864:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007950 <__ieee754_rem_pio2f+0x248>
 8007868:	eeb0 0a66 	vmov.f32	s0, s13
 800786c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8007870:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007874:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007878:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007954 <__ieee754_rem_pio2f+0x24c>
 800787c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8007880:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007884:	ed85 7a00 	vstr	s14, [r5]
 8007888:	e7b4      	b.n	80077f4 <__ieee754_rem_pio2f+0xec>
 800788a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800788e:	db06      	blt.n	800789e <__ieee754_rem_pio2f+0x196>
 8007890:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007894:	edc0 7a01 	vstr	s15, [r0, #4]
 8007898:	edc0 7a00 	vstr	s15, [r0]
 800789c:	e742      	b.n	8007724 <__ieee754_rem_pio2f+0x1c>
 800789e:	15e2      	asrs	r2, r4, #23
 80078a0:	3a86      	subs	r2, #134	; 0x86
 80078a2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078ae:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007958 <__ieee754_rem_pio2f+0x250>
 80078b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 80078be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 80078d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078de:	edcd 7a05 	vstr	s15, [sp, #20]
 80078e2:	d11e      	bne.n	8007922 <__ieee754_rem_pio2f+0x21a>
 80078e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80078e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2302      	movne	r3, #2
 80078f2:	491a      	ldr	r1, [pc, #104]	; (800795c <__ieee754_rem_pio2f+0x254>)
 80078f4:	9101      	str	r1, [sp, #4]
 80078f6:	2102      	movs	r1, #2
 80078f8:	9100      	str	r1, [sp, #0]
 80078fa:	a803      	add	r0, sp, #12
 80078fc:	4629      	mov	r1, r5
 80078fe:	f000 f891 	bl	8007a24 <__kernel_rem_pio2f>
 8007902:	2e00      	cmp	r6, #0
 8007904:	f6bf af31 	bge.w	800776a <__ieee754_rem_pio2f+0x62>
 8007908:	edd5 7a00 	vldr	s15, [r5]
 800790c:	eef1 7a67 	vneg.f32	s15, s15
 8007910:	edc5 7a00 	vstr	s15, [r5]
 8007914:	edd5 7a01 	vldr	s15, [r5, #4]
 8007918:	eef1 7a67 	vneg.f32	s15, s15
 800791c:	edc5 7a01 	vstr	s15, [r5, #4]
 8007920:	e77a      	b.n	8007818 <__ieee754_rem_pio2f+0x110>
 8007922:	2303      	movs	r3, #3
 8007924:	e7e5      	b.n	80078f2 <__ieee754_rem_pio2f+0x1ea>
 8007926:	bf00      	nop
 8007928:	3f490fd8 	.word	0x3f490fd8
 800792c:	4016cbe3 	.word	0x4016cbe3
 8007930:	3fc90f80 	.word	0x3fc90f80
 8007934:	3fc90fd0 	.word	0x3fc90fd0
 8007938:	37354400 	.word	0x37354400
 800793c:	37354443 	.word	0x37354443
 8007940:	2e85a308 	.word	0x2e85a308
 8007944:	43490f80 	.word	0x43490f80
 8007948:	3f22f984 	.word	0x3f22f984
 800794c:	08016efc 	.word	0x08016efc
 8007950:	2e85a300 	.word	0x2e85a300
 8007954:	248d3132 	.word	0x248d3132
 8007958:	43800000 	.word	0x43800000
 800795c:	08016f7c 	.word	0x08016f7c

08007960 <__ieee754_sqrtf>:
 8007960:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007964:	4770      	bx	lr
	...

08007968 <__kernel_cosf>:
 8007968:	ee10 3a10 	vmov	r3, s0
 800796c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007970:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007978:	da05      	bge.n	8007986 <__kernel_cosf+0x1e>
 800797a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800797e:	ee17 2a90 	vmov	r2, s15
 8007982:	2a00      	cmp	r2, #0
 8007984:	d03b      	beq.n	80079fe <__kernel_cosf+0x96>
 8007986:	ee20 6a00 	vmul.f32	s12, s0, s0
 800798a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800798e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007a04 <__kernel_cosf+0x9c>
 8007992:	4a1d      	ldr	r2, [pc, #116]	; (8007a08 <__kernel_cosf+0xa0>)
 8007994:	ee66 7a07 	vmul.f32	s15, s12, s14
 8007998:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007a0c <__kernel_cosf+0xa4>
 800799c:	eea6 7a25 	vfma.f32	s14, s12, s11
 80079a0:	4293      	cmp	r3, r2
 80079a2:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007a10 <__kernel_cosf+0xa8>
 80079a6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80079aa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007a14 <__kernel_cosf+0xac>
 80079ae:	eea5 7a86 	vfma.f32	s14, s11, s12
 80079b2:	eddf 5a19 	vldr	s11, [pc, #100]	; 8007a18 <__kernel_cosf+0xb0>
 80079b6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80079ba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007a1c <__kernel_cosf+0xb4>
 80079be:	eea5 7a86 	vfma.f32	s14, s11, s12
 80079c2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80079c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80079ca:	eee6 0a07 	vfma.f32	s1, s12, s14
 80079ce:	dc04      	bgt.n	80079da <__kernel_cosf+0x72>
 80079d0:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80079d4:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80079d8:	4770      	bx	lr
 80079da:	4a11      	ldr	r2, [pc, #68]	; (8007a20 <__kernel_cosf+0xb8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	bfda      	itte	le
 80079e0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80079e4:	ee07 3a10 	vmovle	s14, r3
 80079e8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80079ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079f0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80079f4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80079f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80079fc:	4770      	bx	lr
 80079fe:	eeb0 0a66 	vmov.f32	s0, s13
 8007a02:	4770      	bx	lr
 8007a04:	ad47d74e 	.word	0xad47d74e
 8007a08:	3e999999 	.word	0x3e999999
 8007a0c:	310f74f6 	.word	0x310f74f6
 8007a10:	b493f27c 	.word	0xb493f27c
 8007a14:	37d00d01 	.word	0x37d00d01
 8007a18:	bab60b61 	.word	0xbab60b61
 8007a1c:	3d2aaaab 	.word	0x3d2aaaab
 8007a20:	3f480000 	.word	0x3f480000

08007a24 <__kernel_rem_pio2f>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	ed2d 8b04 	vpush	{d8-d9}
 8007a2c:	b0d7      	sub	sp, #348	; 0x15c
 8007a2e:	469b      	mov	fp, r3
 8007a30:	460e      	mov	r6, r1
 8007a32:	4bbe      	ldr	r3, [pc, #760]	; (8007d2c <__kernel_rem_pio2f+0x308>)
 8007a34:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007a36:	9002      	str	r0, [sp, #8]
 8007a38:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007a3c:	9865      	ldr	r0, [sp, #404]	; 0x194
 8007a3e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8007d3c <__kernel_rem_pio2f+0x318>
 8007a42:	1ed1      	subs	r1, r2, #3
 8007a44:	2308      	movs	r3, #8
 8007a46:	fb91 f1f3 	sdiv	r1, r1, r3
 8007a4a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007a4e:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8007a52:	1c4c      	adds	r4, r1, #1
 8007a54:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8007a58:	eba1 050a 	sub.w	r5, r1, sl
 8007a5c:	aa1a      	add	r2, sp, #104	; 0x68
 8007a5e:	eb09 070a 	add.w	r7, r9, sl
 8007a62:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8007a66:	4696      	mov	lr, r2
 8007a68:	2300      	movs	r3, #0
 8007a6a:	42bb      	cmp	r3, r7
 8007a6c:	dd0f      	ble.n	8007a8e <__kernel_rem_pio2f+0x6a>
 8007a6e:	af42      	add	r7, sp, #264	; 0x108
 8007a70:	2200      	movs	r2, #0
 8007a72:	454a      	cmp	r2, r9
 8007a74:	dc27      	bgt.n	8007ac6 <__kernel_rem_pio2f+0xa2>
 8007a76:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8007a7a:	eb0b 0302 	add.w	r3, fp, r2
 8007a7e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8007a82:	9d02      	ldr	r5, [sp, #8]
 8007a84:	eddf 7aad 	vldr	s15, [pc, #692]	; 8007d3c <__kernel_rem_pio2f+0x318>
 8007a88:	f04f 0c00 	mov.w	ip, #0
 8007a8c:	e015      	b.n	8007aba <__kernel_rem_pio2f+0x96>
 8007a8e:	42dd      	cmn	r5, r3
 8007a90:	bf5d      	ittte	pl
 8007a92:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8007a96:	ee07 2a90 	vmovpl	s15, r2
 8007a9a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007a9e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007aa2:	ecee 7a01 	vstmia	lr!, {s15}
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	e7df      	b.n	8007a6a <__kernel_rem_pio2f+0x46>
 8007aaa:	ecf5 6a01 	vldmia	r5!, {s13}
 8007aae:	ed33 7a01 	vldmdb	r3!, {s14}
 8007ab2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ab6:	f10c 0c01 	add.w	ip, ip, #1
 8007aba:	45d4      	cmp	ip, sl
 8007abc:	ddf5      	ble.n	8007aaa <__kernel_rem_pio2f+0x86>
 8007abe:	ece7 7a01 	vstmia	r7!, {s15}
 8007ac2:	3201      	adds	r2, #1
 8007ac4:	e7d5      	b.n	8007a72 <__kernel_rem_pio2f+0x4e>
 8007ac6:	ab06      	add	r3, sp, #24
 8007ac8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8007d38 <__kernel_rem_pio2f+0x314>
 8007ad2:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007d34 <__kernel_rem_pio2f+0x310>
 8007ad6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007ada:	9303      	str	r3, [sp, #12]
 8007adc:	464d      	mov	r5, r9
 8007ade:	ab56      	add	r3, sp, #344	; 0x158
 8007ae0:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007ae4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007ae8:	3f01      	subs	r7, #1
 8007aea:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007aee:	00bf      	lsls	r7, r7, #2
 8007af0:	ab56      	add	r3, sp, #344	; 0x158
 8007af2:	19da      	adds	r2, r3, r7
 8007af4:	3a4c      	subs	r2, #76	; 0x4c
 8007af6:	2300      	movs	r3, #0
 8007af8:	1ae9      	subs	r1, r5, r3
 8007afa:	2900      	cmp	r1, #0
 8007afc:	dc4c      	bgt.n	8007b98 <__kernel_rem_pio2f+0x174>
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 fa74 	bl	8007fec <scalbnf>
 8007b04:	eeb0 8a40 	vmov.f32	s16, s0
 8007b08:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007b0c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007b10:	f7ff f8b8 	bl	8006c84 <floorf>
 8007b14:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007b18:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007b1c:	2c00      	cmp	r4, #0
 8007b1e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007b22:	edcd 7a01 	vstr	s15, [sp, #4]
 8007b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b2a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007b2e:	dd48      	ble.n	8007bc2 <__kernel_rem_pio2f+0x19e>
 8007b30:	1e69      	subs	r1, r5, #1
 8007b32:	ab06      	add	r3, sp, #24
 8007b34:	f1c4 0008 	rsb	r0, r4, #8
 8007b38:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007b3c:	9a01      	ldr	r2, [sp, #4]
 8007b3e:	fa4c f300 	asr.w	r3, ip, r0
 8007b42:	441a      	add	r2, r3
 8007b44:	4083      	lsls	r3, r0
 8007b46:	9201      	str	r2, [sp, #4]
 8007b48:	ebac 0203 	sub.w	r2, ip, r3
 8007b4c:	ab06      	add	r3, sp, #24
 8007b4e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007b52:	f1c4 0307 	rsb	r3, r4, #7
 8007b56:	fa42 f803 	asr.w	r8, r2, r3
 8007b5a:	f1b8 0f00 	cmp.w	r8, #0
 8007b5e:	dd41      	ble.n	8007be4 <__kernel_rem_pio2f+0x1c0>
 8007b60:	9b01      	ldr	r3, [sp, #4]
 8007b62:	2000      	movs	r0, #0
 8007b64:	3301      	adds	r3, #1
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	4601      	mov	r1, r0
 8007b6a:	4285      	cmp	r5, r0
 8007b6c:	dc6d      	bgt.n	8007c4a <__kernel_rem_pio2f+0x226>
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	dd04      	ble.n	8007b7c <__kernel_rem_pio2f+0x158>
 8007b72:	2c01      	cmp	r4, #1
 8007b74:	d07e      	beq.n	8007c74 <__kernel_rem_pio2f+0x250>
 8007b76:	2c02      	cmp	r4, #2
 8007b78:	f000 8086 	beq.w	8007c88 <__kernel_rem_pio2f+0x264>
 8007b7c:	f1b8 0f02 	cmp.w	r8, #2
 8007b80:	d130      	bne.n	8007be4 <__kernel_rem_pio2f+0x1c0>
 8007b82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007b86:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007b8a:	b359      	cbz	r1, 8007be4 <__kernel_rem_pio2f+0x1c0>
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 fa2d 	bl	8007fec <scalbnf>
 8007b92:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007b96:	e025      	b.n	8007be4 <__kernel_rem_pio2f+0x1c0>
 8007b98:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007b9c:	a806      	add	r0, sp, #24
 8007b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ba6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007baa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007bae:	ee10 1a10 	vmov	r1, s0
 8007bb2:	ed32 0a01 	vldmdb	r2!, {s0}
 8007bb6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8007bba:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	e79a      	b.n	8007af8 <__kernel_rem_pio2f+0xd4>
 8007bc2:	d106      	bne.n	8007bd2 <__kernel_rem_pio2f+0x1ae>
 8007bc4:	1e6b      	subs	r3, r5, #1
 8007bc6:	aa06      	add	r2, sp, #24
 8007bc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007bcc:	ea4f 2822 	mov.w	r8, r2, asr #8
 8007bd0:	e7c3      	b.n	8007b5a <__kernel_rem_pio2f+0x136>
 8007bd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007bd6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bde:	da31      	bge.n	8007c44 <__kernel_rem_pio2f+0x220>
 8007be0:	f04f 0800 	mov.w	r8, #0
 8007be4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bec:	f040 80a8 	bne.w	8007d40 <__kernel_rem_pio2f+0x31c>
 8007bf0:	1e6b      	subs	r3, r5, #1
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4548      	cmp	r0, r9
 8007bf8:	da4d      	bge.n	8007c96 <__kernel_rem_pio2f+0x272>
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	f000 8087 	beq.w	8007d0e <__kernel_rem_pio2f+0x2ea>
 8007c00:	aa06      	add	r2, sp, #24
 8007c02:	3c08      	subs	r4, #8
 8007c04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	f000 808d 	beq.w	8007d28 <__kernel_rem_pio2f+0x304>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	f000 f9e9 	bl	8007fec <scalbnf>
 8007c1a:	9b02      	ldr	r3, [sp, #8]
 8007c1c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007d38 <__kernel_rem_pio2f+0x314>
 8007c20:	0099      	lsls	r1, r3, #2
 8007c22:	aa42      	add	r2, sp, #264	; 0x108
 8007c24:	1850      	adds	r0, r2, r1
 8007c26:	1d05      	adds	r5, r0, #4
 8007c28:	461c      	mov	r4, r3
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	f280 80b8 	bge.w	8007da0 <__kernel_rem_pio2f+0x37c>
 8007c30:	2500      	movs	r5, #0
 8007c32:	1b5c      	subs	r4, r3, r5
 8007c34:	2c00      	cmp	r4, #0
 8007c36:	f2c0 80d8 	blt.w	8007dea <__kernel_rem_pio2f+0x3c6>
 8007c3a:	4f3d      	ldr	r7, [pc, #244]	; (8007d30 <__kernel_rem_pio2f+0x30c>)
 8007c3c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007d3c <__kernel_rem_pio2f+0x318>
 8007c40:	2400      	movs	r4, #0
 8007c42:	e0c6      	b.n	8007dd2 <__kernel_rem_pio2f+0x3ae>
 8007c44:	f04f 0802 	mov.w	r8, #2
 8007c48:	e78a      	b.n	8007b60 <__kernel_rem_pio2f+0x13c>
 8007c4a:	ab06      	add	r3, sp, #24
 8007c4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c50:	b949      	cbnz	r1, 8007c66 <__kernel_rem_pio2f+0x242>
 8007c52:	b12b      	cbz	r3, 8007c60 <__kernel_rem_pio2f+0x23c>
 8007c54:	aa06      	add	r2, sp, #24
 8007c56:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007c5a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	3001      	adds	r0, #1
 8007c62:	4619      	mov	r1, r3
 8007c64:	e781      	b.n	8007b6a <__kernel_rem_pio2f+0x146>
 8007c66:	aa06      	add	r2, sp, #24
 8007c68:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007c6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007c70:	460b      	mov	r3, r1
 8007c72:	e7f5      	b.n	8007c60 <__kernel_rem_pio2f+0x23c>
 8007c74:	1e68      	subs	r0, r5, #1
 8007c76:	ab06      	add	r3, sp, #24
 8007c78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c80:	aa06      	add	r2, sp, #24
 8007c82:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007c86:	e779      	b.n	8007b7c <__kernel_rem_pio2f+0x158>
 8007c88:	1e68      	subs	r0, r5, #1
 8007c8a:	ab06      	add	r3, sp, #24
 8007c8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c94:	e7f4      	b.n	8007c80 <__kernel_rem_pio2f+0x25c>
 8007c96:	a906      	add	r1, sp, #24
 8007c98:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007c9c:	3801      	subs	r0, #1
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	e7a9      	b.n	8007bf6 <__kernel_rem_pio2f+0x1d2>
 8007ca2:	f10c 0c01 	add.w	ip, ip, #1
 8007ca6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	d0f9      	beq.n	8007ca2 <__kernel_rem_pio2f+0x27e>
 8007cae:	eb0b 0305 	add.w	r3, fp, r5
 8007cb2:	aa1a      	add	r2, sp, #104	; 0x68
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	1898      	adds	r0, r3, r2
 8007cb8:	3004      	adds	r0, #4
 8007cba:	1c69      	adds	r1, r5, #1
 8007cbc:	3704      	adds	r7, #4
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4465      	add	r5, ip
 8007cc2:	9005      	str	r0, [sp, #20]
 8007cc4:	428d      	cmp	r5, r1
 8007cc6:	f6ff af0a 	blt.w	8007ade <__kernel_rem_pio2f+0xba>
 8007cca:	a81a      	add	r0, sp, #104	; 0x68
 8007ccc:	eb02 0c03 	add.w	ip, r2, r3
 8007cd0:	4484      	add	ip, r0
 8007cd2:	9803      	ldr	r0, [sp, #12]
 8007cd4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007cd8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007cdc:	9001      	str	r0, [sp, #4]
 8007cde:	ee07 0a90 	vmov	s15, r0
 8007ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ce6:	9805      	ldr	r0, [sp, #20]
 8007ce8:	edcc 7a00 	vstr	s15, [ip]
 8007cec:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007d3c <__kernel_rem_pio2f+0x318>
 8007cf0:	eb00 0802 	add.w	r8, r0, r2
 8007cf4:	f04f 0c00 	mov.w	ip, #0
 8007cf8:	45d4      	cmp	ip, sl
 8007cfa:	dd0c      	ble.n	8007d16 <__kernel_rem_pio2f+0x2f2>
 8007cfc:	eb02 0c07 	add.w	ip, r2, r7
 8007d00:	a842      	add	r0, sp, #264	; 0x108
 8007d02:	4484      	add	ip, r0
 8007d04:	edcc 7a01 	vstr	s15, [ip, #4]
 8007d08:	3101      	adds	r1, #1
 8007d0a:	3204      	adds	r2, #4
 8007d0c:	e7da      	b.n	8007cc4 <__kernel_rem_pio2f+0x2a0>
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	f04f 0c01 	mov.w	ip, #1
 8007d14:	e7c7      	b.n	8007ca6 <__kernel_rem_pio2f+0x282>
 8007d16:	ecfe 6a01 	vldmia	lr!, {s13}
 8007d1a:	ed38 7a01 	vldmdb	r8!, {s14}
 8007d1e:	f10c 0c01 	add.w	ip, ip, #1
 8007d22:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d26:	e7e7      	b.n	8007cf8 <__kernel_rem_pio2f+0x2d4>
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	e769      	b.n	8007c00 <__kernel_rem_pio2f+0x1dc>
 8007d2c:	080172c0 	.word	0x080172c0
 8007d30:	08017294 	.word	0x08017294
 8007d34:	43800000 	.word	0x43800000
 8007d38:	3b800000 	.word	0x3b800000
 8007d3c:	00000000 	.word	0x00000000
 8007d40:	4260      	negs	r0, r4
 8007d42:	eeb0 0a48 	vmov.f32	s0, s16
 8007d46:	f000 f951 	bl	8007fec <scalbnf>
 8007d4a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007d34 <__kernel_rem_pio2f+0x310>
 8007d4e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d56:	db1a      	blt.n	8007d8e <__kernel_rem_pio2f+0x36a>
 8007d58:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007d38 <__kernel_rem_pio2f+0x314>
 8007d5c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007d60:	aa06      	add	r2, sp, #24
 8007d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d66:	a906      	add	r1, sp, #24
 8007d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d6c:	3408      	adds	r4, #8
 8007d6e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007d7a:	ee10 3a10 	vmov	r3, s0
 8007d7e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007d82:	1c6b      	adds	r3, r5, #1
 8007d84:	ee17 2a90 	vmov	r2, s15
 8007d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007d8c:	e73f      	b.n	8007c0e <__kernel_rem_pio2f+0x1ea>
 8007d8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007d92:	aa06      	add	r2, sp, #24
 8007d94:	ee10 3a10 	vmov	r3, s0
 8007d98:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	e736      	b.n	8007c0e <__kernel_rem_pio2f+0x1ea>
 8007da0:	aa06      	add	r2, sp, #24
 8007da2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007da6:	9202      	str	r2, [sp, #8]
 8007da8:	ee07 2a90 	vmov	s15, r2
 8007dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007db0:	3c01      	subs	r4, #1
 8007db2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007db6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007dba:	ed65 7a01 	vstmdb	r5!, {s15}
 8007dbe:	e734      	b.n	8007c2a <__kernel_rem_pio2f+0x206>
 8007dc0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007dc4:	ecf7 6a01 	vldmia	r7!, {s13}
 8007dc8:	ed9c 7a00 	vldr	s14, [ip]
 8007dcc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007dd0:	3401      	adds	r4, #1
 8007dd2:	454c      	cmp	r4, r9
 8007dd4:	dc01      	bgt.n	8007dda <__kernel_rem_pio2f+0x3b6>
 8007dd6:	42a5      	cmp	r5, r4
 8007dd8:	daf2      	bge.n	8007dc0 <__kernel_rem_pio2f+0x39c>
 8007dda:	aa56      	add	r2, sp, #344	; 0x158
 8007ddc:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007de0:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007de4:	3501      	adds	r5, #1
 8007de6:	3804      	subs	r0, #4
 8007de8:	e723      	b.n	8007c32 <__kernel_rem_pio2f+0x20e>
 8007dea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007dec:	2a03      	cmp	r2, #3
 8007dee:	d84d      	bhi.n	8007e8c <__kernel_rem_pio2f+0x468>
 8007df0:	e8df f002 	tbb	[pc, r2]
 8007df4:	021f1f3e 	.word	0x021f1f3e
 8007df8:	aa56      	add	r2, sp, #344	; 0x158
 8007dfa:	4411      	add	r1, r2
 8007dfc:	399c      	subs	r1, #156	; 0x9c
 8007dfe:	4608      	mov	r0, r1
 8007e00:	461c      	mov	r4, r3
 8007e02:	2c00      	cmp	r4, #0
 8007e04:	dc5f      	bgt.n	8007ec6 <__kernel_rem_pio2f+0x4a2>
 8007e06:	4608      	mov	r0, r1
 8007e08:	461c      	mov	r4, r3
 8007e0a:	2c01      	cmp	r4, #1
 8007e0c:	dc6b      	bgt.n	8007ee6 <__kernel_rem_pio2f+0x4c2>
 8007e0e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8007d3c <__kernel_rem_pio2f+0x318>
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	dc77      	bgt.n	8007f06 <__kernel_rem_pio2f+0x4e2>
 8007e16:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007e1a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007e1e:	f1b8 0f00 	cmp.w	r8, #0
 8007e22:	d176      	bne.n	8007f12 <__kernel_rem_pio2f+0x4ee>
 8007e24:	edc6 6a00 	vstr	s13, [r6]
 8007e28:	ed86 7a01 	vstr	s14, [r6, #4]
 8007e2c:	edc6 7a02 	vstr	s15, [r6, #8]
 8007e30:	e02c      	b.n	8007e8c <__kernel_rem_pio2f+0x468>
 8007e32:	aa56      	add	r2, sp, #344	; 0x158
 8007e34:	4411      	add	r1, r2
 8007e36:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8007d3c <__kernel_rem_pio2f+0x318>
 8007e3a:	399c      	subs	r1, #156	; 0x9c
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	da32      	bge.n	8007ea8 <__kernel_rem_pio2f+0x484>
 8007e42:	f1b8 0f00 	cmp.w	r8, #0
 8007e46:	d035      	beq.n	8007eb4 <__kernel_rem_pio2f+0x490>
 8007e48:	eef1 7a47 	vneg.f32	s15, s14
 8007e4c:	edc6 7a00 	vstr	s15, [r6]
 8007e50:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e58:	a82f      	add	r0, sp, #188	; 0xbc
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	428b      	cmp	r3, r1
 8007e5e:	da2c      	bge.n	8007eba <__kernel_rem_pio2f+0x496>
 8007e60:	f1b8 0f00 	cmp.w	r8, #0
 8007e64:	d001      	beq.n	8007e6a <__kernel_rem_pio2f+0x446>
 8007e66:	eef1 7a67 	vneg.f32	s15, s15
 8007e6a:	edc6 7a01 	vstr	s15, [r6, #4]
 8007e6e:	e00d      	b.n	8007e8c <__kernel_rem_pio2f+0x468>
 8007e70:	aa56      	add	r2, sp, #344	; 0x158
 8007e72:	4411      	add	r1, r2
 8007e74:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007d3c <__kernel_rem_pio2f+0x318>
 8007e78:	399c      	subs	r1, #156	; 0x9c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	da0e      	bge.n	8007e9c <__kernel_rem_pio2f+0x478>
 8007e7e:	f1b8 0f00 	cmp.w	r8, #0
 8007e82:	d001      	beq.n	8007e88 <__kernel_rem_pio2f+0x464>
 8007e84:	eef1 7a67 	vneg.f32	s15, s15
 8007e88:	edc6 7a00 	vstr	s15, [r6]
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	f003 0007 	and.w	r0, r3, #7
 8007e92:	b057      	add	sp, #348	; 0x15c
 8007e94:	ecbd 8b04 	vpop	{d8-d9}
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9c:	ed31 7a01 	vldmdb	r1!, {s14}
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ea6:	e7e8      	b.n	8007e7a <__kernel_rem_pio2f+0x456>
 8007ea8:	ed71 7a01 	vldmdb	r1!, {s15}
 8007eac:	3801      	subs	r0, #1
 8007eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007eb2:	e7c4      	b.n	8007e3e <__kernel_rem_pio2f+0x41a>
 8007eb4:	eef0 7a47 	vmov.f32	s15, s14
 8007eb8:	e7c8      	b.n	8007e4c <__kernel_rem_pio2f+0x428>
 8007eba:	ecb0 7a01 	vldmia	r0!, {s14}
 8007ebe:	3101      	adds	r1, #1
 8007ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ec4:	e7ca      	b.n	8007e5c <__kernel_rem_pio2f+0x438>
 8007ec6:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007eca:	ed70 6a01 	vldmdb	r0!, {s13}
 8007ece:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007ed2:	3c01      	subs	r4, #1
 8007ed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ed8:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee0:	edc0 7a00 	vstr	s15, [r0]
 8007ee4:	e78d      	b.n	8007e02 <__kernel_rem_pio2f+0x3de>
 8007ee6:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007eea:	ed70 6a01 	vldmdb	r0!, {s13}
 8007eee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007ef2:	3c01      	subs	r4, #1
 8007ef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ef8:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f00:	edc0 7a00 	vstr	s15, [r0]
 8007f04:	e781      	b.n	8007e0a <__kernel_rem_pio2f+0x3e6>
 8007f06:	ed31 7a01 	vldmdb	r1!, {s14}
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f10:	e77f      	b.n	8007e12 <__kernel_rem_pio2f+0x3ee>
 8007f12:	eef1 6a66 	vneg.f32	s13, s13
 8007f16:	eeb1 7a47 	vneg.f32	s14, s14
 8007f1a:	edc6 6a00 	vstr	s13, [r6]
 8007f1e:	ed86 7a01 	vstr	s14, [r6, #4]
 8007f22:	eef1 7a67 	vneg.f32	s15, s15
 8007f26:	e781      	b.n	8007e2c <__kernel_rem_pio2f+0x408>

08007f28 <__kernel_sinf>:
 8007f28:	ee10 3a10 	vmov	r3, s0
 8007f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f30:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007f34:	da04      	bge.n	8007f40 <__kernel_sinf+0x18>
 8007f36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007f3a:	ee17 3a90 	vmov	r3, s15
 8007f3e:	b35b      	cbz	r3, 8007f98 <__kernel_sinf+0x70>
 8007f40:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007f44:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007f9c <__kernel_sinf+0x74>
 8007f48:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007fa0 <__kernel_sinf+0x78>
 8007f4c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007f50:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007fa4 <__kernel_sinf+0x7c>
 8007f54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f58:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007fa8 <__kernel_sinf+0x80>
 8007f5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007f60:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007fac <__kernel_sinf+0x84>
 8007f64:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007f68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f6c:	b930      	cbnz	r0, 8007f7c <__kernel_sinf+0x54>
 8007f6e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007fb0 <__kernel_sinf+0x88>
 8007f72:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007f76:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007f7a:	4770      	bx	lr
 8007f7c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007f80:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007f84:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007f88:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007f8c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007fb4 <__kernel_sinf+0x8c>
 8007f90:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007f94:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	2f2ec9d3 	.word	0x2f2ec9d3
 8007fa0:	b2d72f34 	.word	0xb2d72f34
 8007fa4:	3638ef1b 	.word	0x3638ef1b
 8007fa8:	b9500d01 	.word	0xb9500d01
 8007fac:	3c088889 	.word	0x3c088889
 8007fb0:	be2aaaab 	.word	0xbe2aaaab
 8007fb4:	3e2aaaab 	.word	0x3e2aaaab

08007fb8 <matherr>:
 8007fb8:	2000      	movs	r0, #0
 8007fba:	4770      	bx	lr

08007fbc <fabsf>:
 8007fbc:	ee10 3a10 	vmov	r3, s0
 8007fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	ee00 3a10 	vmov	s0, r3
 8007fc8:	4770      	bx	lr

08007fca <finitef>:
 8007fca:	ee10 3a10 	vmov	r3, s0
 8007fce:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007fd2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007fd6:	bfac      	ite	ge
 8007fd8:	2000      	movge	r0, #0
 8007fda:	2001      	movlt	r0, #1
 8007fdc:	4770      	bx	lr
	...

08007fe0 <nanf>:
 8007fe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fe8 <nanf+0x8>
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	7fc00000 	.word	0x7fc00000

08007fec <scalbnf>:
 8007fec:	b508      	push	{r3, lr}
 8007fee:	ee10 2a10 	vmov	r2, s0
 8007ff2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007ff6:	ed2d 8b02 	vpush	{d8}
 8007ffa:	eef0 0a40 	vmov.f32	s1, s0
 8007ffe:	d004      	beq.n	800800a <scalbnf+0x1e>
 8008000:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008004:	d306      	bcc.n	8008014 <scalbnf+0x28>
 8008006:	ee70 0a00 	vadd.f32	s1, s0, s0
 800800a:	ecbd 8b02 	vpop	{d8}
 800800e:	eeb0 0a60 	vmov.f32	s0, s1
 8008012:	bd08      	pop	{r3, pc}
 8008014:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008018:	d21c      	bcs.n	8008054 <scalbnf+0x68>
 800801a:	4b1f      	ldr	r3, [pc, #124]	; (8008098 <scalbnf+0xac>)
 800801c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800809c <scalbnf+0xb0>
 8008020:	4298      	cmp	r0, r3
 8008022:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008026:	db10      	blt.n	800804a <scalbnf+0x5e>
 8008028:	ee10 2a90 	vmov	r2, s1
 800802c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008030:	3b19      	subs	r3, #25
 8008032:	4403      	add	r3, r0
 8008034:	2bfe      	cmp	r3, #254	; 0xfe
 8008036:	dd0f      	ble.n	8008058 <scalbnf+0x6c>
 8008038:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80080a0 <scalbnf+0xb4>
 800803c:	eeb0 0a48 	vmov.f32	s0, s16
 8008040:	f000 f834 	bl	80080ac <copysignf>
 8008044:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008048:	e7df      	b.n	800800a <scalbnf+0x1e>
 800804a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80080a4 <scalbnf+0xb8>
 800804e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008052:	e7da      	b.n	800800a <scalbnf+0x1e>
 8008054:	0ddb      	lsrs	r3, r3, #23
 8008056:	e7ec      	b.n	8008032 <scalbnf+0x46>
 8008058:	2b00      	cmp	r3, #0
 800805a:	dd06      	ble.n	800806a <scalbnf+0x7e>
 800805c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008060:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008064:	ee00 3a90 	vmov	s1, r3
 8008068:	e7cf      	b.n	800800a <scalbnf+0x1e>
 800806a:	f113 0f16 	cmn.w	r3, #22
 800806e:	da06      	bge.n	800807e <scalbnf+0x92>
 8008070:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008074:	4298      	cmp	r0, r3
 8008076:	dcdf      	bgt.n	8008038 <scalbnf+0x4c>
 8008078:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80080a4 <scalbnf+0xb8>
 800807c:	e7de      	b.n	800803c <scalbnf+0x50>
 800807e:	3319      	adds	r3, #25
 8008080:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008084:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008088:	eddf 7a07 	vldr	s15, [pc, #28]	; 80080a8 <scalbnf+0xbc>
 800808c:	ee07 3a10 	vmov	s14, r3
 8008090:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008094:	e7b9      	b.n	800800a <scalbnf+0x1e>
 8008096:	bf00      	nop
 8008098:	ffff3cb0 	.word	0xffff3cb0
 800809c:	4c000000 	.word	0x4c000000
 80080a0:	7149f2ca 	.word	0x7149f2ca
 80080a4:	0da24260 	.word	0x0da24260
 80080a8:	33000000 	.word	0x33000000

080080ac <copysignf>:
 80080ac:	ee10 3a10 	vmov	r3, s0
 80080b0:	ee10 2a90 	vmov	r2, s1
 80080b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80080bc:	4313      	orrs	r3, r2
 80080be:	ee00 3a10 	vmov	s0, r3
 80080c2:	4770      	bx	lr

080080c4 <__errno>:
 80080c4:	4b01      	ldr	r3, [pc, #4]	; (80080cc <__errno+0x8>)
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000098 	.word	0x20000098

080080d0 <__libc_init_array>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	4e0d      	ldr	r6, [pc, #52]	; (8008108 <__libc_init_array+0x38>)
 80080d4:	4c0d      	ldr	r4, [pc, #52]	; (800810c <__libc_init_array+0x3c>)
 80080d6:	1ba4      	subs	r4, r4, r6
 80080d8:	10a4      	asrs	r4, r4, #2
 80080da:	2500      	movs	r5, #0
 80080dc:	42a5      	cmp	r5, r4
 80080de:	d109      	bne.n	80080f4 <__libc_init_array+0x24>
 80080e0:	4e0b      	ldr	r6, [pc, #44]	; (8008110 <__libc_init_array+0x40>)
 80080e2:	4c0c      	ldr	r4, [pc, #48]	; (8008114 <__libc_init_array+0x44>)
 80080e4:	f000 f8d4 	bl	8008290 <_init>
 80080e8:	1ba4      	subs	r4, r4, r6
 80080ea:	10a4      	asrs	r4, r4, #2
 80080ec:	2500      	movs	r5, #0
 80080ee:	42a5      	cmp	r5, r4
 80080f0:	d105      	bne.n	80080fe <__libc_init_array+0x2e>
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080f8:	4798      	blx	r3
 80080fa:	3501      	adds	r5, #1
 80080fc:	e7ee      	b.n	80080dc <__libc_init_array+0xc>
 80080fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008102:	4798      	blx	r3
 8008104:	3501      	adds	r5, #1
 8008106:	e7f2      	b.n	80080ee <__libc_init_array+0x1e>
 8008108:	080172d4 	.word	0x080172d4
 800810c:	080172d4 	.word	0x080172d4
 8008110:	080172d4 	.word	0x080172d4
 8008114:	080172d8 	.word	0x080172d8

08008118 <memcpy>:
 8008118:	b510      	push	{r4, lr}
 800811a:	1e43      	subs	r3, r0, #1
 800811c:	440a      	add	r2, r1
 800811e:	4291      	cmp	r1, r2
 8008120:	d100      	bne.n	8008124 <memcpy+0xc>
 8008122:	bd10      	pop	{r4, pc}
 8008124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008128:	f803 4f01 	strb.w	r4, [r3, #1]!
 800812c:	e7f7      	b.n	800811e <memcpy+0x6>

0800812e <memset>:
 800812e:	4402      	add	r2, r0
 8008130:	4603      	mov	r3, r0
 8008132:	4293      	cmp	r3, r2
 8008134:	d100      	bne.n	8008138 <memset+0xa>
 8008136:	4770      	bx	lr
 8008138:	f803 1b01 	strb.w	r1, [r3], #1
 800813c:	e7f9      	b.n	8008132 <memset+0x4>
	...

08008140 <rand>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4b13      	ldr	r3, [pc, #76]	; (8008190 <rand+0x50>)
 8008144:	681c      	ldr	r4, [r3, #0]
 8008146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008148:	b97b      	cbnz	r3, 800816a <rand+0x2a>
 800814a:	2018      	movs	r0, #24
 800814c:	f000 f82c 	bl	80081a8 <malloc>
 8008150:	4a10      	ldr	r2, [pc, #64]	; (8008194 <rand+0x54>)
 8008152:	4b11      	ldr	r3, [pc, #68]	; (8008198 <rand+0x58>)
 8008154:	63a0      	str	r0, [r4, #56]	; 0x38
 8008156:	e9c0 2300 	strd	r2, r3, [r0]
 800815a:	4b10      	ldr	r3, [pc, #64]	; (800819c <rand+0x5c>)
 800815c:	6083      	str	r3, [r0, #8]
 800815e:	230b      	movs	r3, #11
 8008160:	8183      	strh	r3, [r0, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	2300      	movs	r3, #0
 8008166:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800816a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800816c:	480c      	ldr	r0, [pc, #48]	; (80081a0 <rand+0x60>)
 800816e:	690a      	ldr	r2, [r1, #16]
 8008170:	694b      	ldr	r3, [r1, #20]
 8008172:	4c0c      	ldr	r4, [pc, #48]	; (80081a4 <rand+0x64>)
 8008174:	4350      	muls	r0, r2
 8008176:	fb04 0003 	mla	r0, r4, r3, r0
 800817a:	fba2 2304 	umull	r2, r3, r2, r4
 800817e:	4403      	add	r3, r0
 8008180:	1c54      	adds	r4, r2, #1
 8008182:	f143 0500 	adc.w	r5, r3, #0
 8008186:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800818a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20000098 	.word	0x20000098
 8008194:	abcd330e 	.word	0xabcd330e
 8008198:	e66d1234 	.word	0xe66d1234
 800819c:	0005deec 	.word	0x0005deec
 80081a0:	5851f42d 	.word	0x5851f42d
 80081a4:	4c957f2d 	.word	0x4c957f2d

080081a8 <malloc>:
 80081a8:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <malloc+0xc>)
 80081aa:	4601      	mov	r1, r0
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	f000 b803 	b.w	80081b8 <_malloc_r>
 80081b2:	bf00      	nop
 80081b4:	20000098 	.word	0x20000098

080081b8 <_malloc_r>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	1ccd      	adds	r5, r1, #3
 80081bc:	f025 0503 	bic.w	r5, r5, #3
 80081c0:	3508      	adds	r5, #8
 80081c2:	2d0c      	cmp	r5, #12
 80081c4:	bf38      	it	cc
 80081c6:	250c      	movcc	r5, #12
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	4606      	mov	r6, r0
 80081cc:	db01      	blt.n	80081d2 <_malloc_r+0x1a>
 80081ce:	42a9      	cmp	r1, r5
 80081d0:	d903      	bls.n	80081da <_malloc_r+0x22>
 80081d2:	230c      	movs	r3, #12
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	2000      	movs	r0, #0
 80081d8:	bd70      	pop	{r4, r5, r6, pc}
 80081da:	f000 f857 	bl	800828c <__malloc_lock>
 80081de:	4a21      	ldr	r2, [pc, #132]	; (8008264 <_malloc_r+0xac>)
 80081e0:	6814      	ldr	r4, [r2, #0]
 80081e2:	4621      	mov	r1, r4
 80081e4:	b991      	cbnz	r1, 800820c <_malloc_r+0x54>
 80081e6:	4c20      	ldr	r4, [pc, #128]	; (8008268 <_malloc_r+0xb0>)
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	b91b      	cbnz	r3, 80081f4 <_malloc_r+0x3c>
 80081ec:	4630      	mov	r0, r6
 80081ee:	f000 f83d 	bl	800826c <_sbrk_r>
 80081f2:	6020      	str	r0, [r4, #0]
 80081f4:	4629      	mov	r1, r5
 80081f6:	4630      	mov	r0, r6
 80081f8:	f000 f838 	bl	800826c <_sbrk_r>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d124      	bne.n	800824a <_malloc_r+0x92>
 8008200:	230c      	movs	r3, #12
 8008202:	6033      	str	r3, [r6, #0]
 8008204:	4630      	mov	r0, r6
 8008206:	f000 f842 	bl	800828e <__malloc_unlock>
 800820a:	e7e4      	b.n	80081d6 <_malloc_r+0x1e>
 800820c:	680b      	ldr	r3, [r1, #0]
 800820e:	1b5b      	subs	r3, r3, r5
 8008210:	d418      	bmi.n	8008244 <_malloc_r+0x8c>
 8008212:	2b0b      	cmp	r3, #11
 8008214:	d90f      	bls.n	8008236 <_malloc_r+0x7e>
 8008216:	600b      	str	r3, [r1, #0]
 8008218:	50cd      	str	r5, [r1, r3]
 800821a:	18cc      	adds	r4, r1, r3
 800821c:	4630      	mov	r0, r6
 800821e:	f000 f836 	bl	800828e <__malloc_unlock>
 8008222:	f104 000b 	add.w	r0, r4, #11
 8008226:	1d23      	adds	r3, r4, #4
 8008228:	f020 0007 	bic.w	r0, r0, #7
 800822c:	1ac3      	subs	r3, r0, r3
 800822e:	d0d3      	beq.n	80081d8 <_malloc_r+0x20>
 8008230:	425a      	negs	r2, r3
 8008232:	50e2      	str	r2, [r4, r3]
 8008234:	e7d0      	b.n	80081d8 <_malloc_r+0x20>
 8008236:	428c      	cmp	r4, r1
 8008238:	684b      	ldr	r3, [r1, #4]
 800823a:	bf16      	itet	ne
 800823c:	6063      	strne	r3, [r4, #4]
 800823e:	6013      	streq	r3, [r2, #0]
 8008240:	460c      	movne	r4, r1
 8008242:	e7eb      	b.n	800821c <_malloc_r+0x64>
 8008244:	460c      	mov	r4, r1
 8008246:	6849      	ldr	r1, [r1, #4]
 8008248:	e7cc      	b.n	80081e4 <_malloc_r+0x2c>
 800824a:	1cc4      	adds	r4, r0, #3
 800824c:	f024 0403 	bic.w	r4, r4, #3
 8008250:	42a0      	cmp	r0, r4
 8008252:	d005      	beq.n	8008260 <_malloc_r+0xa8>
 8008254:	1a21      	subs	r1, r4, r0
 8008256:	4630      	mov	r0, r6
 8008258:	f000 f808 	bl	800826c <_sbrk_r>
 800825c:	3001      	adds	r0, #1
 800825e:	d0cf      	beq.n	8008200 <_malloc_r+0x48>
 8008260:	6025      	str	r5, [r4, #0]
 8008262:	e7db      	b.n	800821c <_malloc_r+0x64>
 8008264:	20012aa4 	.word	0x20012aa4
 8008268:	20012aa8 	.word	0x20012aa8

0800826c <_sbrk_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4c06      	ldr	r4, [pc, #24]	; (8008288 <_sbrk_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4605      	mov	r5, r0
 8008274:	4608      	mov	r0, r1
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	f7fc fdde 	bl	8004e38 <_sbrk>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_sbrk_r+0x1a>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	b103      	cbz	r3, 8008286 <_sbrk_r+0x1a>
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20013c50 	.word	0x20013c50

0800828c <__malloc_lock>:
 800828c:	4770      	bx	lr

0800828e <__malloc_unlock>:
 800828e:	4770      	bx	lr

08008290 <_init>:
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008292:	bf00      	nop
 8008294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008296:	bc08      	pop	{r3}
 8008298:	469e      	mov	lr, r3
 800829a:	4770      	bx	lr

0800829c <_fini>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr
