
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007910  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e96c  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016404  08016404  00033f48  2**0
                  CONTENTS
  4 .ARM          00000008  08016404  08016404  00026404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801640c  0801640c  00033f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801640c  0801640c  0002640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016410  08016410  00026410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08016414  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00003ecc  2000007c  08016490  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000fcbc  20003f48  0801a35c  00033f48  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013c04  0801a35c  00043c04  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00033f48  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026490  00000000  00000000  00033f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000057f1  00000000  00000000  0005a408  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000bfa0  00000000  00000000  0005fbf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000015d8  00000000  00000000  0006bba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014c0  00000000  00000000  0006d178  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00025d92  00000000  00000000  0006e638  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00017771  00000000  00000000  000943ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c4002  00000000  00000000  000abb3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f4  00000000  00000000  0016fb3d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003fcc  00000000  00000000  0016fc34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20003f48 	.word	0x20003f48
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a80 	.word	0x08007a80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20003f4c 	.word	0x20003f4c
 80001c4:	08007a80 	.word	0x08007a80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 b96e 	b.w	8000e08 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f040 8083 	bne.w	8000c5a <__udivmoddi4+0x116>
 8000b54:	428a      	cmp	r2, r1
 8000b56:	4617      	mov	r7, r2
 8000b58:	d947      	bls.n	8000bea <__udivmoddi4+0xa6>
 8000b5a:	fab2 f282 	clz	r2, r2
 8000b5e:	b142      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b60:	f1c2 0020 	rsb	r0, r2, #32
 8000b64:	fa24 f000 	lsr.w	r0, r4, r0
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	4097      	lsls	r7, r2
 8000b6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbbc f6f8 	udiv	r6, ip, r8
 8000b7c:	fa1f fe87 	uxth.w	lr, r7
 8000b80:	fb08 c116 	mls	r1, r8, r6, ip
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb06 f10e 	mul.w	r1, r6, lr
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b96:	f080 8119 	bcs.w	8000dcc <__udivmoddi4+0x288>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8116 	bls.w	8000dcc <__udivmoddi4+0x288>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	443b      	add	r3, r7
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc2:	f080 8105 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	f240 8102 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	443c      	add	r4, r7
 8000bd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	2600      	movs	r6, #0
 8000bda:	b11d      	cbz	r5, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c5 4300 	strd	r4, r3, [r5]
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	b902      	cbnz	r2, 8000bee <__udivmoddi4+0xaa>
 8000bec:	deff      	udf	#255	; 0xff
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d150      	bne.n	8000c98 <__udivmoddi4+0x154>
 8000bf6:	1bcb      	subs	r3, r1, r7
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	2601      	movs	r6, #1
 8000c02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c06:	0c21      	lsrs	r1, r4, #16
 8000c08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c10:	fb08 f30c 	mul.w	r3, r8, ip
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000c18:	1879      	adds	r1, r7, r1
 8000c1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0xe2>
 8000c20:	428b      	cmp	r3, r1
 8000c22:	f200 80e9 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c26:	4684      	mov	ip, r0
 8000c28:	1ac9      	subs	r1, r1, r3
 8000c2a:	b2a3      	uxth	r3, r4
 8000c2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c38:	fb08 f800 	mul.w	r8, r8, r0
 8000c3c:	45a0      	cmp	r8, r4
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x10c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x10a>
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	f200 80d9 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c4e:	4618      	mov	r0, r3
 8000c50:	eba4 0408 	sub.w	r4, r4, r8
 8000c54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c58:	e7bf      	b.n	8000bda <__udivmoddi4+0x96>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0x12e>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <__udivmoddi4+0x282>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x1cc>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0x140>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80b8 	bhi.w	8000df4 <__udivmoddi4+0x2b0>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0103 	sbc.w	r1, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0a8      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c96:	e7a5      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c98:	f1c2 0320 	rsb	r3, r2, #32
 8000c9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca0:	4097      	lsls	r7, r2
 8000ca2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000caa:	40d9      	lsrs	r1, r3
 8000cac:	4330      	orrs	r0, r6
 8000cae:	0c03      	lsrs	r3, r0, #16
 8000cb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f108 	mul.w	r1, r6, r8
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cca:	d909      	bls.n	8000ce0 <__udivmoddi4+0x19c>
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cd2:	f080 808d 	bcs.w	8000df0 <__udivmoddi4+0x2ac>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 808a 	bls.w	8000df0 <__udivmoddi4+0x2ac>
 8000cdc:	3e02      	subs	r6, #2
 8000cde:	443b      	add	r3, r7
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b281      	uxth	r1, r0
 8000ce4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf0:	fb00 f308 	mul.w	r3, r0, r8
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x1c4>
 8000cf8:	1879      	adds	r1, r7, r1
 8000cfa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cfe:	d273      	bcs.n	8000de8 <__udivmoddi4+0x2a4>
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d971      	bls.n	8000de8 <__udivmoddi4+0x2a4>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4439      	add	r1, r7
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d0e:	e778      	b.n	8000c02 <__udivmoddi4+0xbe>
 8000d10:	f1c6 0c20 	rsb	ip, r6, #32
 8000d14:	fa03 f406 	lsl.w	r4, r3, r6
 8000d18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d1c:	431c      	orrs	r4, r3
 8000d1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	0c3b      	lsrs	r3, r7, #16
 8000d32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d36:	fa1f f884 	uxth.w	r8, r4
 8000d3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d42:	fb09 fa08 	mul.w	sl, r9, r8
 8000d46:	458a      	cmp	sl, r1
 8000d48:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x220>
 8000d52:	1861      	adds	r1, r4, r1
 8000d54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d58:	d248      	bcs.n	8000dec <__udivmoddi4+0x2a8>
 8000d5a:	458a      	cmp	sl, r1
 8000d5c:	d946      	bls.n	8000dec <__udivmoddi4+0x2a8>
 8000d5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d62:	4421      	add	r1, r4
 8000d64:	eba1 010a 	sub.w	r1, r1, sl
 8000d68:	b2bf      	uxth	r7, r7
 8000d6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d76:	fb00 f808 	mul.w	r8, r0, r8
 8000d7a:	45b8      	cmp	r8, r7
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x24a>
 8000d7e:	19e7      	adds	r7, r4, r7
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d84:	d22e      	bcs.n	8000de4 <__udivmoddi4+0x2a0>
 8000d86:	45b8      	cmp	r8, r7
 8000d88:	d92c      	bls.n	8000de4 <__udivmoddi4+0x2a0>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4427      	add	r7, r4
 8000d8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d92:	eba7 0708 	sub.w	r7, r7, r8
 8000d96:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9a:	454f      	cmp	r7, r9
 8000d9c:	46c6      	mov	lr, r8
 8000d9e:	4649      	mov	r1, r9
 8000da0:	d31a      	bcc.n	8000dd8 <__udivmoddi4+0x294>
 8000da2:	d017      	beq.n	8000dd4 <__udivmoddi4+0x290>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x27a>
 8000da6:	ebb3 020e 	subs.w	r2, r3, lr
 8000daa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000db2:	40f2      	lsrs	r2, r6
 8000db4:	ea4c 0202 	orr.w	r2, ip, r2
 8000db8:	40f7      	lsrs	r7, r6
 8000dba:	e9c5 2700 	strd	r2, r7, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e70b      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e9      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fd      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd4:	4543      	cmp	r3, r8
 8000dd6:	d2e5      	bcs.n	8000da4 <__udivmoddi4+0x260>
 8000dd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ddc:	eb69 0104 	sbc.w	r1, r9, r4
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7df      	b.n	8000da4 <__udivmoddi4+0x260>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e7d2      	b.n	8000d8e <__udivmoddi4+0x24a>
 8000de8:	4660      	mov	r0, ip
 8000dea:	e78d      	b.n	8000d08 <__udivmoddi4+0x1c4>
 8000dec:	4681      	mov	r9, r0
 8000dee:	e7b9      	b.n	8000d64 <__udivmoddi4+0x220>
 8000df0:	4666      	mov	r6, ip
 8000df2:	e775      	b.n	8000ce0 <__udivmoddi4+0x19c>
 8000df4:	4630      	mov	r0, r6
 8000df6:	e74a      	b.n	8000c8e <__udivmoddi4+0x14a>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	4439      	add	r1, r7
 8000dfe:	e713      	b.n	8000c28 <__udivmoddi4+0xe4>
 8000e00:	3802      	subs	r0, #2
 8000e02:	443c      	add	r4, r7
 8000e04:	e724      	b.n	8000c50 <__udivmoddi4+0x10c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <PS_Application>:
{
	// bpm_led_state = !bpm_led_state;
	// HAL_GPIO_WritePin(PS_BPM_LED_GPIO, PS_BPM_LED, bpm_led_state);
	// uint16_t delay = shift / 10;
	// HAL_Delay(delay);
}
 8000e0c:	4770      	bx	lr

08000e0e <MagicFX>:

/*-----------------------------------------------------------------------------*/
void MagicFX(uint8_t val) /* random effects parameters */
{
	if (val == MIDI_MAXi)
 8000e0e:	287f      	cmp	r0, #127	; 0x7f
 8000e10:	d000      	beq.n	8000e14 <MagicFX+0x6>
 8000e12:	4770      	bx	lr
{
 8000e14:	b508      	push	{r3, lr}
	{
		Delay_switch(MIDI_MAXi);
 8000e16:	f002 feb1 	bl	8003b7c <Delay_switch>
		Delay_time_set(MIDIrandVal());
 8000e1a:	f002 fa79 	bl	8003310 <MIDIrandVal>
 8000e1e:	f001 fb19 	bl	8002454 <Delay_time_set>
		DelayWet_set(MIDIrandVal());
 8000e22:	f002 fa75 	bl	8003310 <MIDIrandVal>
 8000e26:	f001 fb53 	bl	80024d0 <DelayWet_set>
		DelayFeedback_set(MIDIrandVal());
 8000e2a:	f002 fa71 	bl	8003310 <MIDIrandVal>
 8000e2e:	f001 fb3f 	bl	80024b0 <DelayFeedback_set>

		Chorus_switch(MIDI_MAXi);
 8000e32:	207f      	movs	r0, #127	; 0x7f
 8000e34:	f002 febe 	bl	8003bb4 <Chorus_switch>
		ChorusRate_set(MIDIrandVal());
 8000e38:	f002 fa6a 	bl	8003310 <MIDIrandVal>
 8000e3c:	f001 f880 	bl	8001f40 <ChorusRate_set>
		ChorusSecondRate_set(MIDIrandVal());
 8000e40:	f002 fa66 	bl	8003310 <MIDIrandVal>
 8000e44:	f001 f89c 	bl	8001f80 <ChorusSecondRate_set>
		ChorusDelay_set(MIDIrandVal());
 8000e48:	f002 fa62 	bl	8003310 <MIDIrandVal>
 8000e4c:	f001 f8b8 	bl	8001fc0 <ChorusDelay_set>
		ChorusSweep_set(MIDIrandVal());
 8000e50:	f002 fa5e 	bl	8003310 <MIDIrandVal>
 8000e54:	f001 f8ea 	bl	800202c <ChorusSweep_set>
		ChorusFeedback_set(MIDIrandVal());
 8000e58:	f002 fa5a 	bl	8003310 <MIDIrandVal>
 8000e5c:	f001 f8ca 	bl	8001ff4 <ChorusFeedback_set>
		ChorusMode_switch(MIDIrandVal());
 8000e60:	f002 fa56 	bl	8003310 <MIDIrandVal>
 8000e64:	f001 f8f4 	bl	8002050 <ChorusMode_switch>
		ChorusFDBsign_switch(MIDIrandVal());
 8000e68:	f002 fa52 	bl	8003310 <MIDIrandVal>
 8000e6c:	f001 f908 	bl	8002080 <ChorusFDBsign_switch>

		Phaser_switch(MIDI_MAXi);
 8000e70:	207f      	movs	r0, #127	; 0x7f
 8000e72:	f002 feab 	bl	8003bcc <Phaser_switch>
		Phaser_Rate_set(MIDIrandVal());
 8000e76:	f002 fa4b 	bl	8003310 <MIDIrandVal>
 8000e7a:	f002 f95f 	bl	800313c <Phaser_Rate_set>
		Phaser_Feedback_set(MIDIrandVal());
 8000e7e:	f002 fa47 	bl	8003310 <MIDIrandVal>
 8000e82:	f002 f97d 	bl	8003180 <Phaser_Feedback_set>
		Phaser_Wet_set(MIDIrandVal());
 8000e86:	f002 fa43 	bl	8003310 <MIDIrandVal>
 8000e8a:	f002 f98f 	bl	80031ac <Phaser_Wet_set>
	}
}
 8000e8e:	bd08      	pop	{r3, pc}

08000e90 <MagicPatch>:
/*-----------------------------------------------------------------------------*/
void MagicPatch(uint8_t val) /* random sound parameters */
{
	if (val == MIDI_MAXi)
 8000e90:	287f      	cmp	r0, #127	; 0x7f
 8000e92:	d000      	beq.n	8000e96 <MagicPatch+0x6>
 8000e94:	4770      	bx	lr
{
 8000e96:	b508      	push	{r3, lr}
	{
		seq_tempo_set(MIDIrandVal());
 8000e98:	f002 fa3a 	bl	8003310 <MIDIrandVal>
 8000e9c:	f002 fc3e 	bl	800371c <seq_tempo_set>
		seq_freqMax_set(MIDIrandVal());
 8000ea0:	f002 fa36 	bl	8003310 <MIDIrandVal>
 8000ea4:	f002 fd0e 	bl	80038c4 <seq_freqMax_set>
		seq_scale_set(MIDIrandVal());
 8000ea8:	f002 fa32 	bl	8003310 <MIDIrandVal>
 8000eac:	f002 fcce 	bl	800384c <seq_scale_set>
		seq_switchMovingSeq(MIDIrandVal());
 8000eb0:	f002 fa2e 	bl	8003310 <MIDIrandVal>
 8000eb4:	f002 fce8 	bl	8003888 <seq_switchMovingSeq>
		seq_switchMute(MIDIrandVal());
 8000eb8:	f002 fa2a 	bl	8003310 <MIDIrandVal>
 8000ebc:	f002 fcf2 	bl	80038a4 <seq_switchMute>
		seq_gateTime_set(MIDIrandVal());
 8000ec0:	f002 fa26 	bl	8003310 <MIDIrandVal>
 8000ec4:	f002 fc4e 	bl	8003764 <seq_gateTime_set>
		autoSound_set(rand() % 3);
 8000ec8:	f005 fef8 	bl	8006cbc <rand>
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <MagicPatch+0x118>)
 8000ece:	fb83 2300 	smull	r2, r3, r3, r0
 8000ed2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8000ed6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000eda:	1ac3      	subs	r3, r0, r3
 8000edc:	b258      	sxtb	r0, r3
 8000ede:	f002 fdc1 	bl	8003a64 <autoSound_set>
		Sound_set(MIDIrandVal());
 8000ee2:	f002 fa15 	bl	8003310 <MIDIrandVal>
 8000ee6:	f002 fe8b 	bl	8003c00 <Sound_set>
		uint8_t snd = soundNumber_get();
 8000eea:	f002 fdc1 	bl	8003a70 <soundNumber_get>
		// 	Drifter_minFreq_set(MIDIrandVal());
		// 	Drifter_maxFreq_set(MIDIrandVal());
		// 	Drifter_centralFreq_set(MIDIrandVal());
		// }

		Filter1Freq_set(MIDIrandVal());
 8000eee:	f002 fa0f 	bl	8003310 <MIDIrandVal>
 8000ef2:	f002 fa97 	bl	8003424 <Filter1Freq_set>
		Filter1Res_set(MIDIrandVal());
 8000ef6:	f002 fa0b 	bl	8003310 <MIDIrandVal>
 8000efa:	f002 faaf 	bl	800345c <Filter1Res_set>
		Filter1Drive_set(MIDIrandVal());
 8000efe:	f002 fa07 	bl	8003310 <MIDIrandVal>
 8000f02:	f002 fabd 	bl	8003480 <Filter1Drive_set>
		Filter1Type_set(MIDIrandVal());
 8000f06:	f002 fa03 	bl	8003310 <MIDIrandVal>
 8000f0a:	f002 fac1 	bl	8003490 <Filter1Type_set>
		Filt1LFO_amp_set(MIDIrandVal());
 8000f0e:	f002 f9ff 	bl	8003310 <MIDIrandVal>
 8000f12:	f002 fdd3 	bl	8003abc <Filt1LFO_amp_set>
		Filt1LFO_freq_set(MIDIrandVal());
 8000f16:	f002 f9fb 	bl	8003310 <MIDIrandVal>
 8000f1a:	f002 fddf 	bl	8003adc <Filt1LFO_freq_set>

		Filter2Freq_set(MIDIrandVal());
 8000f1e:	f002 f9f7 	bl	8003310 <MIDIrandVal>
 8000f22:	f002 fac9 	bl	80034b8 <Filter2Freq_set>
		Filter2Res_set(MIDIrandVal());
 8000f26:	f002 f9f3 	bl	8003310 <MIDIrandVal>
 8000f2a:	f002 fae1 	bl	80034f0 <Filter2Res_set>
		Filter2Drive_set(MIDIrandVal());
 8000f2e:	f002 f9ef 	bl	8003310 <MIDIrandVal>
 8000f32:	f002 faef 	bl	8003514 <Filter2Drive_set>
		Filter2Type_set(MIDIrandVal());
 8000f36:	f002 f9eb 	bl	8003310 <MIDIrandVal>
 8000f3a:	f002 faf3 	bl	8003524 <Filter2Type_set>
		Filt2LFO_amp_set(MIDIrandVal());
 8000f3e:	f002 f9e7 	bl	8003310 <MIDIrandVal>
 8000f42:	f002 fddb 	bl	8003afc <Filt2LFO_amp_set>
		Filt2LFO_freq_set(MIDIrandVal());
 8000f46:	f002 f9e3 	bl	8003310 <MIDIrandVal>
 8000f4a:	f002 fde7 	bl	8003b1c <Filt2LFO_freq_set>

		Filter_Random_switch(MIDIrandVal());
 8000f4e:	f002 f9df 	bl	8003310 <MIDIrandVal>
 8000f52:	f002 fe23 	bl	8003b9c <Filter_Random_switch>

		AttTime_set((uint8_t)lrintf(frand_a_b(0, MIDI_MAX / 10)));
 8000f56:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000fac <MagicPatch+0x11c>
 8000f5a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000fb0 <MagicPatch+0x120>
 8000f5e:	f002 f9bb 	bl	80032d8 <frand_a_b>
 8000f62:	f005 ffa5 	bl	8006eb0 <lrintf>
 8000f66:	b2c0      	uxtb	r0, r0
 8000f68:	f000 f97e 	bl	8001268 <AttTime_set>
		DecTime_set(MIDIrandVal());
 8000f6c:	f002 f9d0 	bl	8003310 <MIDIrandVal>
 8000f70:	f000 f992 	bl	8001298 <DecTime_set>
		SustLevel_set(MIDIrandVal());
 8000f74:	f002 f9cc 	bl	8003310 <MIDIrandVal>
 8000f78:	f000 f9b8 	bl	80012ec <SustLevel_set>
		RelTime_set(MIDIrandVal());
 8000f7c:	f002 f9c8 	bl	8003310 <MIDIrandVal>
 8000f80:	f000 f9c6 	bl	8001310 <RelTime_set>

		VibratoAmp_set(MIDIrandVal());
 8000f84:	f002 f9c4 	bl	8003310 <MIDIrandVal>
 8000f88:	f002 fdd8 	bl	8003b3c <VibratoAmp_set>
		VibratoFreq_set(MIDIrandVal());
 8000f8c:	f002 f9c0 	bl	8003310 <MIDIrandVal>
 8000f90:	f002 fde4 	bl	8003b5c <VibratoFreq_set>

		AmpLFO_amp_set(MIDIrandVal());
 8000f94:	f002 f9bc 	bl	8003310 <MIDIrandVal>
 8000f98:	f002 fd70 	bl	8003a7c <AmpLFO_amp_set>
		AmpLFO_freq_set(MIDIrandVal());
 8000f9c:	f002 f9b8 	bl	8003310 <MIDIrandVal>
 8000fa0:	f002 fd7c 	bl	8003a9c <AmpLFO_freq_set>
	}
}
 8000fa4:	bd08      	pop	{r3, pc}
 8000fa6:	bf00      	nop
 8000fa8:	55555556 	.word	0x55555556
 8000fac:	414b3333 	.word	0x414b3333
 8000fb0:	00000000 	.word	0x00000000

08000fb4 <HAL_I2S_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fb4:	b508      	push	{r3, lr}
  if(hi2s->Instance == SPI2)
 8000fb6:	6802      	ldr	r2, [r0, #0]
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_I2S_TxCpltCallback+0x18>)
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d000      	beq.n	8000fc0 <HAL_I2S_TxCpltCallback+0xc>
  {
    /* Call the user function which will manage directly transfer complete */
	  make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
  }
}
 8000fbe:	bd08      	pop	{r3, pc}
	  make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
 8000fc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <HAL_I2S_TxCpltCallback+0x1c>)
 8000fc6:	f002 ffad 	bl	8003f24 <make_sound>
}
 8000fca:	e7f8      	b.n	8000fbe <HAL_I2S_TxCpltCallback+0xa>
 8000fcc:	40003800 	.word	0x40003800
 8000fd0:	2001320c 	.word	0x2001320c

08000fd4 <HAL_I2S_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fd4:	b508      	push	{r3, lr}
  if(hi2s->Instance == SPI2)
 8000fd6:	6802      	ldr	r2, [r0, #0]
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_I2S_TxHalfCpltCallback+0x18>)
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d000      	beq.n	8000fe0 <HAL_I2S_TxHalfCpltCallback+0xc>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  	make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
  }
}
 8000fde:	bd08      	pop	{r3, pc}
  	make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
 8000fe0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000fe6:	f002 ff9d 	bl	8003f24 <make_sound>
}
 8000fea:	e7f8      	b.n	8000fde <HAL_I2S_TxHalfCpltCallback+0xa>
 8000fec:	40003800 	.word	0x40003800
 8000ff0:	20012a3c 	.word	0x20012a3c

08000ff4 <PS_Interface_Loop>:
    //        velocity = 0;
    //        triggered = 0;
    //    }

    // HAL_GPIO_WritePin(PS_TRIG_LED_GPIO, PS_TRIG_LED, triggered);
}
 8000ff4:	4770      	bx	lr
	...

08000ff8 <Trigger>:
 * @brief  Trigger the sound on
 * @param  None
 * @retval none
 */
void Trigger(void)
{
 8000ff8:	b508      	push	{r3, lr}

    if (triggered)
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <Trigger+0x38>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b17b      	cbz	r3, 8001020 <Trigger+0x28>
    {
        velocity = 0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <Trigger+0x3c>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
        ADSR_keyOff(&adsr);
 8001006:	480c      	ldr	r0, [pc, #48]	; (8001038 <Trigger+0x40>)
 8001008:	f000 f8f7 	bl	80011fa <ADSR_keyOff>
        velocity = 127;
        ADSR_keyOn(&adsr);
        //  MagicPatch(MIDI_MAXi);
    }

    triggered = !triggered;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <Trigger+0x38>)
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	f082 0201 	eor.w	r2, r2, #1
 8001014:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(PS_TRIG_LED_GPIO, PS_TRIG_LED, triggered);
 8001016:	2110      	movs	r1, #16
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <Trigger+0x44>)
 800101a:	f004 fa28 	bl	800546e <HAL_GPIO_WritePin>
}
 800101e:	bd08      	pop	{r3, pc}
        velocity = 127;
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <Trigger+0x3c>)
 8001022:	227f      	movs	r2, #127	; 0x7f
 8001024:	701a      	strb	r2, [r3, #0]
        ADSR_keyOn(&adsr);
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <Trigger+0x40>)
 8001028:	f000 f8de 	bl	80011e8 <ADSR_keyOn>
 800102c:	e7ee      	b.n	800100c <Trigger+0x14>
 800102e:	bf00      	nop
 8001030:	20003f66 	.word	0x20003f66
 8001034:	20012a3b 	.word	0x20012a3b
 8001038:	2000007c 	.word	0x2000007c
 800103c:	40020000 	.word	0x40020000

08001040 <PS_LED_On>:

void PS_LED_On(void)
{
 8001040:	b508      	push	{r3, lr}
    bpm_led_state = true;
 8001042:	2201      	movs	r2, #1
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <PS_LED_On+0x14>)
 8001046:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(PS_BPM_LED_GPIO, PS_BPM_LED, bpm_led_state);
 8001048:	2104      	movs	r1, #4
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <PS_LED_On+0x18>)
 800104c:	f004 fa0f 	bl	800546e <HAL_GPIO_WritePin>
}
 8001050:	bd08      	pop	{r3, pc}
 8001052:	bf00      	nop
 8001054:	20003f64 	.word	0x20003f64
 8001058:	40020000 	.word	0x40020000

0800105c <PS_LED_Toggle>:
    bpm_led_state = false;
    HAL_GPIO_WritePin(PS_BPM_LED_GPIO, PS_BPM_LED, bpm_led_state);
}

void PS_LED_Toggle(void)
{
 800105c:	b508      	push	{r3, lr}
    bpm_led_state = !bpm_led_state;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <PS_LED_Toggle+0x18>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	fab2 f282 	clz	r2, r2
 8001066:	0952      	lsrs	r2, r2, #5
 8001068:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(PS_BPM_LED_GPIO, PS_BPM_LED, bpm_led_state);
 800106a:	2104      	movs	r1, #4
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <PS_LED_Toggle+0x1c>)
 800106e:	f004 f9fe 	bl	800546e <HAL_GPIO_WritePin>
}
 8001072:	bd08      	pop	{r3, pc}
 8001074:	20003f64 	.word	0x20003f64
 8001078:	40020000 	.word	0x40020000

0800107c <PS_StartPots>:
 * @brief  Starts reading the pots
 * @param  None
 * @retval none
 */
void PS_StartPots(void)
{
 800107c:	b508      	push	{r3, lr}
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValArray, 4);
 800107e:	2204      	movs	r2, #4
 8001080:	4902      	ldr	r1, [pc, #8]	; (800108c <PS_StartPots+0x10>)
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <PS_StartPots+0x14>)
 8001084:	f003 fcc4 	bl	8004a10 <HAL_ADC_Start_DMA>
}
 8001088:	bd08      	pop	{r3, pc}
 800108a:	bf00      	nop
 800108c:	20012a30 	.word	0x20012a30
 8001090:	20013a38 	.word	0x20013a38

08001094 <PS_Interface_Init>:
{
 8001094:	b508      	push	{r3, lr}
    PS_StartPots();
 8001096:	f7ff fff1 	bl	800107c <PS_StartPots>
    PS_StartBPMLED();
 800109a:	f003 faa7 	bl	80045ec <PS_StartBPMLED>
    DelayFeedback_set(80);
 800109e:	2050      	movs	r0, #80	; 0x50
 80010a0:	f001 fa06 	bl	80024b0 <DelayFeedback_set>
    DelayWet_set(127);
 80010a4:	207f      	movs	r0, #127	; 0x7f
 80010a6:	f001 fa13 	bl	80024d0 <DelayWet_set>
}
 80010aa:	bd08      	pop	{r3, pc}

080010ac <map>:

float map(float val, float I_Min, float I_Max, float O_Min, float O_Max)
{
    return O_Max - (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
 80010ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 80010b0:	ee32 7a61 	vsub.f32	s14, s4, s3
 80010b4:	ee71 0a60 	vsub.f32	s1, s2, s1
 80010b8:	eec7 7a20 	vdiv.f32	s15, s14, s1
 80010bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80010c0:	ee30 0a21 	vadd.f32	s0, s0, s3
}
 80010c4:	ee32 0a40 	vsub.f32	s0, s4, s0
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_ADC_ConvCpltCallback>:
 * @brief  ADC data receive callback.
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010cc:	b510      	push	{r4, lr}
 80010ce:	ed2d 8b04 	vpush	{d8-d9}
 80010d2:	b082      	sub	sp, #8
    // set frequency
    currentFreq = map(adcValArray[1], 0, 4096, 20, 12600);
 80010d4:	4c32      	ldr	r4, [pc, #200]	; (80011a0 <HAL_ADC_ConvCpltCallback+0xd4>)
 80010d6:	8863      	ldrh	r3, [r4, #2]
 80010d8:	ee09 3a10 	vmov	s18, r3
 80010dc:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 80010e0:	eddf 8a30 	vldr	s17, [pc, #192]	; 80011a4 <HAL_ADC_ConvCpltCallback+0xd8>
 80010e4:	ed9f 8a30 	vldr	s16, [pc, #192]	; 80011a8 <HAL_ADC_ConvCpltCallback+0xdc>
 80010e8:	ed9f 2a30 	vldr	s4, [pc, #192]	; 80011ac <HAL_ADC_ConvCpltCallback+0xe0>
 80010ec:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 80010f0:	eeb0 1a68 	vmov.f32	s2, s17
 80010f4:	eef0 0a48 	vmov.f32	s1, s16
 80010f8:	eeb0 0a49 	vmov.f32	s0, s18
 80010fc:	f7ff ffd6 	bl	80010ac <map>
 8001100:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001106:	ee10 2a10 	vmov	r2, s0
 800110a:	801a      	strh	r2, [r3, #0]
    currentNote = map(adcValArray[1], 0, 4096, 0, 107);
 800110c:	eddf 9a29 	vldr	s19, [pc, #164]	; 80011b4 <HAL_ADC_ConvCpltCallback+0xe8>
 8001110:	eeb0 2a69 	vmov.f32	s4, s19
 8001114:	eef0 1a48 	vmov.f32	s3, s16
 8001118:	eeb0 1a68 	vmov.f32	s2, s17
 800111c:	eef0 0a48 	vmov.f32	s1, s16
 8001120:	eeb0 0a49 	vmov.f32	s0, s18
 8001124:	f7ff ffc2 	bl	80010ac <map>
 8001128:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800112c:	ee17 3a90 	vmov	r3, s15
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <HAL_ADC_ConvCpltCallback+0xec>)
 8001132:	7013      	strb	r3, [r2, #0]

    VibratoFreq_set(map(adcValArray[2], 0, 4096, 0, 107));
 8001134:	88a3      	ldrh	r3, [r4, #4]
 8001136:	ee00 3a10 	vmov	s0, r3
 800113a:	eeb0 2a69 	vmov.f32	s4, s19
 800113e:	eef0 1a48 	vmov.f32	s3, s16
 8001142:	eeb0 1a68 	vmov.f32	s2, s17
 8001146:	eef0 0a48 	vmov.f32	s1, s16
 800114a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800114e:	f7ff ffad 	bl	80010ac <map>
 8001152:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001156:	edcd 7a01 	vstr	s15, [sp, #4]
 800115a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800115e:	f002 fcfd 	bl	8003b5c <VibratoFreq_set>
    VibratoAmp_set(MIDI_MAX);
 8001162:	207f      	movs	r0, #127	; 0x7f
 8001164:	f002 fcea 	bl	8003b3c <VibratoAmp_set>

    FM_OP1_modInd_set(map(adcValArray[3], 0, 4096, 0, MIDI_MAX));
 8001168:	88e3      	ldrh	r3, [r4, #6]
 800116a:	ee00 3a10 	vmov	s0, r3
 800116e:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80011bc <HAL_ADC_ConvCpltCallback+0xf0>
 8001172:	eef0 1a48 	vmov.f32	s3, s16
 8001176:	eeb0 1a68 	vmov.f32	s2, s17
 800117a:	eef0 0a48 	vmov.f32	s1, s16
 800117e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001182:	f7ff ff93 	bl	80010ac <map>
 8001186:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800118a:	edcd 7a01 	vstr	s15, [sp, #4]
 800118e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001192:	f002 fd55 	bl	8003c40 <FM_OP1_modInd_set>
    // Delay_time_set(map(adcValArray[3],  0, 4096, 0, MIDI_MAX));
}
 8001196:	b002      	add	sp, #8
 8001198:	ecbd 8b04 	vpop	{d8-d9}
 800119c:	bd10      	pop	{r4, pc}
 800119e:	bf00      	nop
 80011a0:	20012a30 	.word	0x20012a30
 80011a4:	45800000 	.word	0x45800000
 80011a8:	00000000 	.word	0x00000000
 80011ac:	4644e000 	.word	0x4644e000
 80011b0:	20012a38 	.word	0x20012a38
 80011b4:	42d60000 	.word	0x42d60000
 80011b8:	20012a3a 	.word	0x20012a3a
 80011bc:	42fe0000 	.word	0x42fe0000

080011c0 <ADSR_init>:

/*---------------------------------------------------------------------------*/

void ADSR_init(ADSR_t *env)
{
  env->target_ = 0.0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	6183      	str	r3, [r0, #24]
  env->value_ = 0.0;
 80011c4:	6103      	str	r3, [r0, #16]
  env->attackRate_ = 0.001;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <ADSR_init+0x20>)
 80011c8:	6003      	str	r3, [r0, #0]
  env->decayRate_ = 0.001;
 80011ca:	6043      	str	r3, [r0, #4]
  env->sustainLevel_ = 0.5;
 80011cc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80011d0:	6083      	str	r3, [r0, #8]
  env->releaseRate_ = 0.01;
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <ADSR_init+0x24>)
 80011d4:	60c3      	str	r3, [r0, #12]
  env->state_ = ATTACK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	6203      	str	r3, [r0, #32]
  env->cnt_ = 0;
 80011da:	6243      	str	r3, [r0, #36]	; 0x24
  //env->gateTime_ = 10000;
}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	3a83126f 	.word	0x3a83126f
 80011e4:	3c23d70a 	.word	0x3c23d70a

080011e8 <ADSR_keyOn>:

void ADSR_keyOn(ADSR_t *env)
{
	env->cnt_ = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	6243      	str	r3, [r0, #36]	; 0x24
	env->target_ = 1.0f;
 80011ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011f0:	6182      	str	r2, [r0, #24]
	env->rate_ = 	env->attackRate_;
 80011f2:	6802      	ldr	r2, [r0, #0]
 80011f4:	61c2      	str	r2, [r0, #28]
	env->state_ = ATTACK;
 80011f6:	6203      	str	r3, [r0, #32]
}
 80011f8:	4770      	bx	lr

080011fa <ADSR_keyOff>:

void ADSR_keyOff(ADSR_t *env)
{
	env->cnt_ = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	6243      	str	r3, [r0, #36]	; 0x24
	env->target_ = 0.0;
 80011fe:	2300      	movs	r3, #0
 8001200:	6183      	str	r3, [r0, #24]
	env->rate_ = 	env->releaseRate_;
 8001202:	68c3      	ldr	r3, [r0, #12]
 8001204:	61c3      	str	r3, [r0, #28]
	env->state_ = RELEASE;
 8001206:	2303      	movs	r3, #3
 8001208:	6203      	str	r3, [r0, #32]
}
 800120a:	4770      	bx	lr

0800120c <ADSR_setSustainLevel>:
	env->decayRate_ = rate;
}

void ADSR_setSustainLevel(ADSR_t *env, float level)
{
	env->sustainLevel_ = level;
 800120c:	ed80 0a02 	vstr	s0, [r0, #8]
}
 8001210:	4770      	bx	lr
	...

08001214 <ADSR_setAttackTime>:
	env->releaseRate_ = rate;
}

void ADSR_setAttackTime(ADSR_t *env, float time)
{
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 8001214:	eddf 7a05 	vldr	s15, [pc, #20]	; 800122c <ADSR_setAttackTime+0x18>
 8001218:	ee20 0a27 	vmul.f32	s0, s0, s15
 800121c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001220:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001224:	edc0 7a00 	vstr	s15, [r0]
}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	472c4400 	.word	0x472c4400

08001230 <ADSR_setDecayTime>:

void ADSR_setDecayTime(ADSR_t *env, float time)
{
	env->decayRate_ = 1.0 / ( time * SAMPLERATE );
 8001230:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001248 <ADSR_setDecayTime+0x18>
 8001234:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800123c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001240:	edc0 7a01 	vstr	s15, [r0, #4]
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	472c4400 	.word	0x472c4400

0800124c <ADSR_setReleaseTime>:

void ADSR_setReleaseTime(ADSR_t *env, float time)
{
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 800124c:	ed90 7a02 	vldr	s14, [r0, #8]
 8001250:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001264 <ADSR_setReleaseTime+0x18>
 8001254:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001258:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800125c:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	472c4400 	.word	0x472c4400

08001268 <AttTime_set>:
{
  return env->state_;
}

void AttTime_set(uint8_t val)
{
 8001268:	b508      	push	{r3, lr}
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 800126a:	ee07 0a90 	vmov	s15, r0
 800126e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001272:	eddf 7a06 	vldr	s15, [pc, #24]	; 800128c <AttTime_set+0x24>
 8001276:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800127a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001290 <AttTime_set+0x28>
 800127e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <AttTime_set+0x2c>)
 8001284:	f7ff ffc6 	bl	8001214 <ADSR_setAttackTime>
}
 8001288:	bd08      	pop	{r3, pc}
 800128a:	bf00      	nop
 800128c:	42fe0000 	.word	0x42fe0000
 8001290:	38d1b717 	.word	0x38d1b717
 8001294:	2000007c 	.word	0x2000007c

08001298 <DecTime_set>:
void DecTime_set(uint8_t val)
{
 8001298:	b508      	push	{r3, lr}
	ADSR_setDecayTime(&adsr, .2*val/MIDI_MAX + 0.0001f);
 800129a:	f7ff f8e7 	bl	800046c <__aeabi_i2d>
 800129e:	a30d      	add	r3, pc, #52	; (adr r3, 80012d4 <DecTime_set+0x3c>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f94c 	bl	8000540 <__aeabi_dmul>
 80012a8:	a30c      	add	r3, pc, #48	; (adr r3, 80012dc <DecTime_set+0x44>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff fa71 	bl	8000794 <__aeabi_ddiv>
 80012b2:	a30c      	add	r3, pc, #48	; (adr r3, 80012e4 <DecTime_set+0x4c>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7fe ff8c 	bl	80001d4 <__adddf3>
 80012bc:	f7ff fbda 	bl	8000a74 <__aeabi_d2f>
 80012c0:	ee00 0a10 	vmov	s0, r0
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <DecTime_set+0x38>)
 80012c6:	f7ff ffb3 	bl	8001230 <ADSR_setDecayTime>
}
 80012ca:	bd08      	pop	{r3, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	2000007c 	.word	0x2000007c
 80012d4:	9999999a 	.word	0x9999999a
 80012d8:	3fc99999 	.word	0x3fc99999
 80012dc:	00000000 	.word	0x00000000
 80012e0:	405fc000 	.word	0x405fc000
 80012e4:	e0000000 	.word	0xe0000000
 80012e8:	3f1a36e2 	.word	0x3f1a36e2

080012ec <SustLevel_set>:
void SustLevel_set(uint8_t val)
{
 80012ec:	b508      	push	{r3, lr}
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 80012ee:	ee07 0a90 	vmov	s15, r0
 80012f2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80012f6:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001308 <SustLevel_set+0x1c>
 80012fa:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <SustLevel_set+0x20>)
 8001300:	f7ff ff84 	bl	800120c <ADSR_setSustainLevel>
}
 8001304:	bd08      	pop	{r3, pc}
 8001306:	bf00      	nop
 8001308:	42fe0000 	.word	0x42fe0000
 800130c:	2000007c 	.word	0x2000007c

08001310 <RelTime_set>:
void RelTime_set(uint8_t val)
{
 8001310:	b508      	push	{r3, lr}
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 8001312:	ee07 0a90 	vmov	s15, r0
 8001316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800131e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001322:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800133c <RelTime_set+0x2c>
 8001326:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800132a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001340 <RelTime_set+0x30>
 800132e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <RelTime_set+0x34>)
 8001334:	f7ff ff8a 	bl	800124c <ADSR_setReleaseTime>
}
 8001338:	bd08      	pop	{r3, pc}
 800133a:	bf00      	nop
 800133c:	42fe0000 	.word	0x42fe0000
 8001340:	38d1b717 	.word	0x38d1b717
 8001344:	2000007c 	.word	0x2000007c

08001348 <ADSR_computeSample>:
/*--------------------------------------------------------------------------------------*/
float ADSR_computeSample(ADSR_t *env)
{
	(env->cnt_)++;
 8001348:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800134a:	3301      	adds	r3, #1
 800134c:	6243      	str	r3, [r0, #36]	; 0x24

	switch (env->state_) {
 800134e:	6a03      	ldr	r3, [r0, #32]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d01f      	beq.n	8001394 <ADSR_computeSample+0x4c>
 8001354:	2b03      	cmp	r3, #3
 8001356:	d033      	beq.n	80013c0 <ADSR_computeSample+0x78>
 8001358:	b123      	cbz	r3, 8001364 <ADSR_computeSample+0x1c>
    	env->value_ =  0.0f;
    	env->state_ = DONE;
    }
  }

  env->lastOutput_ = env->value_;
 800135a:	ed90 0a04 	vldr	s0, [r0, #16]
 800135e:	ed80 0a05 	vstr	s0, [r0, #20]
  return env->value_;
}
 8001362:	4770      	bx	lr
	  env->value_ += env->rate_;
 8001364:	edd0 7a07 	vldr	s15, [r0, #28]
 8001368:	ed90 7a04 	vldr	s14, [r0, #16]
 800136c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001370:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ >= env->target_)
 8001374:	ed90 7a06 	vldr	s14, [r0, #24]
 8001378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	dbeb      	blt.n	800135a <ADSR_computeSample+0x12>
    	env->value_ = env->target_;
 8001382:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->rate_ = env->decayRate_;
 8001386:	6843      	ldr	r3, [r0, #4]
 8001388:	61c3      	str	r3, [r0, #28]
    	env->target_ = env->sustainLevel_;
 800138a:	6883      	ldr	r3, [r0, #8]
 800138c:	6183      	str	r3, [r0, #24]
    	env->state_ = DECAY;
 800138e:	2301      	movs	r3, #1
 8001390:	6203      	str	r3, [r0, #32]
 8001392:	e7e2      	b.n	800135a <ADSR_computeSample+0x12>
	  env->value_ -= env->decayRate_;
 8001394:	ed90 7a01 	vldr	s14, [r0, #4]
 8001398:	edd0 7a04 	vldr	s15, [r0, #16]
 800139c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013a0:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ <= env->sustainLevel_)
 80013a4:	ed90 7a02 	vldr	s14, [r0, #8]
 80013a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d8d3      	bhi.n	800135a <ADSR_computeSample+0x12>
    	env->value_ = env->sustainLevel_;
 80013b2:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->rate_ = 0.0f;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61c3      	str	r3, [r0, #28]
    	env->state_ = SUSTAIN;
 80013ba:	2302      	movs	r3, #2
 80013bc:	6203      	str	r3, [r0, #32]
 80013be:	e7cc      	b.n	800135a <ADSR_computeSample+0x12>
	  env->value_ -= env->releaseRate_;
 80013c0:	ed90 7a03 	vldr	s14, [r0, #12]
 80013c4:	edd0 7a04 	vldr	s15, [r0, #16]
 80013c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013cc:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ <= 0.0f)
 80013d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	d8bf      	bhi.n	800135a <ADSR_computeSample+0x12>
    	env->value_ =  0.0f;
 80013da:	2300      	movs	r3, #0
 80013dc:	6103      	str	r3, [r0, #16]
    	env->state_ = DONE;
 80013de:	2304      	movs	r3, #4
 80013e0:	6203      	str	r3, [r0, #32]
 80013e2:	e7ba      	b.n	800135a <ADSR_computeSample+0x12>

080013e4 <place_step_dd>:

/**======================================================================================================**/


void place_step_dd(float *buffer, int index, float phase, float w, float scale)
{
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	ed2d 8b02 	vpush	{d8}
 80013ea:	4605      	mov	r5, r0
 80013ec:	460c      	mov	r4, r1
 80013ee:	eef0 8a41 	vmov.f32	s17, s2
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 80013f2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001458 <place_step_dd+0x74>
 80013f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80013fa:	ee80 8a20 	vdiv.f32	s16, s0, s1
	i = lrintf(r - 0.5f);
 80013fe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001402:	ee38 0a40 	vsub.f32	s0, s16, s0
 8001406:	f005 fd53 	bl	8006eb0 <lrintf>
	r -= (float)i;
 800140a:	ee07 0a90 	vmov	s15, r0
 800140e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001412:	ee78 6a66 	vsub.f32	s13, s16, s13
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8001416:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	 *    i += MINBLEP_PHASES;
	 *    index++;
	 *  }
	 */

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 800141a:	e016      	b.n	800144a <place_step_dd+0x66>
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 800141c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <place_step_dd+0x78>)
 8001422:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ed93 7a01 	vldr	s14, [r3, #4]
 800142e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001436:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800143a:	ed92 7a00 	vldr	s14, [r2]
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	edc2 7a00 	vstr	s15, [r2]
		i += MINBLEP_PHASES;
 8001446:	3040      	adds	r0, #64	; 0x40
		index++;
 8001448:	3401      	adds	r4, #1
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 800144a:	f5b0 5f90 	cmp.w	r0, #4608	; 0x1200
 800144e:	dbe5      	blt.n	800141c <place_step_dd+0x38>
	}
}
 8001450:	ecbd 8b02 	vpop	{d8}
 8001454:	bd38      	pop	{r3, r4, r5, pc}
 8001456:	bf00      	nop
 8001458:	42800000 	.word	0x42800000
 800145c:	0800c19c 	.word	0x0800c19c

08001460 <place_slope_dd>:
//----------------------------------------------------------------------------------------------------------

void place_slope_dd(float *buffer, int index, float phase, float w, float slope_delta)
{
 8001460:	b538      	push	{r3, r4, r5, lr}
 8001462:	ed2d 8b04 	vpush	{d8-d9}
 8001466:	4605      	mov	r5, r0
 8001468:	460c      	mov	r4, r1
 800146a:	eeb0 8a60 	vmov.f32	s16, s1
 800146e:	eeb0 9a41 	vmov.f32	s18, s2
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 8001472:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80014e4 <place_slope_dd+0x84>
 8001476:	ee20 0a27 	vmul.f32	s0, s0, s15
 800147a:	eec0 8a20 	vdiv.f32	s17, s0, s1
	i = lrintf(r - 0.5f);
 800147e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001482:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8001486:	f005 fd13 	bl	8006eb0 <lrintf>
	r -= (float)i;
 800148a:	ee07 0a90 	vmov	s15, r0
 800148e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001492:	ee78 6ae6 	vsub.f32	s13, s17, s13
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8001496:	f000 003f 	and.w	r0, r0, #63	; 0x3f

	slope_delta *= w;
 800149a:	ee28 1a09 	vmul.f32	s2, s16, s18

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 800149e:	e01b      	b.n	80014d8 <place_slope_dd+0x78>
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80014a0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <place_slope_dd+0x88>)
 80014a6:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 80014aa:	edd1 7a00 	vldr	s15, [r1]
 80014ae:	1c41      	adds	r1, r0, #1
 80014b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80014b4:	ed93 7a00 	vldr	s14, [r3]
 80014b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80014c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c4:	ee67 7a81 	vmul.f32	s15, s15, s2
 80014c8:	ed92 7a00 	vldr	s14, [r2]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	edc2 7a00 	vstr	s15, [r2]
		i += MINBLEP_PHASES;
 80014d4:	3040      	adds	r0, #64	; 0x40
		index++;
 80014d6:	3401      	adds	r4, #1
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 80014d8:	f5b0 5f8e 	cmp.w	r0, #4544	; 0x11c0
 80014dc:	dbe0      	blt.n	80014a0 <place_slope_dd+0x40>
	}
}
 80014de:	ecbd 8b04 	vpop	{d8-d9}
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
 80014e4:	42800000 	.word	0x42800000
 80014e8:	08007a98 	.word	0x08007a98

080014ec <VCO_blepsaw_Init>:
//----------------------------------------------------------------------------------------------------------

/* ==== hard-sync-capable sawtooth oscillator ==== */

void VCO_blepsaw_Init(VCO_blepsaw_t *vco)
{
 80014ec:	b508      	push	{r3, lr}
	vco->_init = true;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f880 3548 	strb.w	r3, [r0, #1352]	; 0x548
	vco->amp = 1.0f;
 80014f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014f8:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <VCO_blepsaw_Init+0x2c>)
 80014fc:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
 80014fe:	2300      	movs	r3, #0
 8001500:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001502:	6203      	str	r3, [r0, #32]
	vco->_j = 0;
 8001504:	2100      	movs	r1, #0
 8001506:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 800150a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800150e:	3024      	adds	r0, #36	; 0x24
 8001510:	f005 fbcc 	bl	8006cac <memset>
}
 8001514:	bd08      	pop	{r3, pc}
 8001516:	bf00      	nop
 8001518:	43dc0000 	.word	0x43dc0000

0800151c <VCO_bleprect_Init>:

//----------------------------------------------------------------------------------------------------------
/* ==== variable-width, hard-sync-capable rectangular oscillator ==== */

void VCO_bleprect_Init(VCO_bleprect_t *vco)
{
 800151c:	b508      	push	{r3, lr}
	vco->_init = true;
 800151e:	2301      	movs	r3, #1
 8001520:	f880 3558 	strb.w	r3, [r0, #1368]	; 0x558
	vco->amp = 1.0f;
 8001524:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001528:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <VCO_bleprect_Init+0x2c>)
 800152c:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
 800152e:	2300      	movs	r3, #0
 8001530:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 8001532:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001534:	62c3      	str	r3, [r0, #44]	; 0x2c
	vco->_j = 0;
 8001536:	2100      	movs	r1, #0
 8001538:	f8c0 1550 	str.w	r1, [r0, #1360]	; 0x550
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 800153c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001540:	3030      	adds	r0, #48	; 0x30
 8001542:	f005 fbb3 	bl	8006cac <memset>
}
 8001546:	bd08      	pop	{r3, pc}
 8001548:	43dc0000 	.word	0x43dc0000
 800154c:	00000000 	.word	0x00000000

08001550 <VCO_bleprect_SampleCompute>:
////----------------------------------------------------------------------------------------------------------

float VCO_bleprect_SampleCompute(VCO_bleprect_t *vco)
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	ed2d 8b08 	vpush	{d8-d11}
 8001556:	4604      	mov	r4, r0
	int    j, k;
	float  freq, syncin;
	float  a, b, db, p, t, w, dw, x, z;

	syncin  = vco->syncin;
 8001558:	ed90 8a05 	vldr	s16, [r0, #20]
	freq = vco->freq;
 800155c:	edd0 ba03 	vldr	s23, [r0, #12]
	p = vco->_p;  /* phase [0, 1) */
 8001560:	ed90 9a07 	vldr	s18, [r0, #28]
	w = vco->_w;  /* phase increment */
 8001564:	edd0 8a08 	vldr	s17, [r0, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001568:	ed90 ba09 	vldr	s22, [r0, #36]	; 0x24
	x = vco->_x;  /* temporary output variable */
 800156c:	edd0 aa0a 	vldr	s21, [r0, #40]	; 0x28
	z = vco->_z;  /* low pass filter state */
 8001570:	ed90 aa0b 	vldr	s20, [r0, #44]	; 0x2c
	j = vco->_j;  /* index into buffer _f */
 8001574:	f8d0 5550 	ldr.w	r5, [r0, #1360]	; 0x550
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8001578:	f8d0 6554 	ldr.w	r6, [r0, #1364]	; 0x554
	//
	if (vco->_init) {
 800157c:	f890 3558 	ldrb.w	r3, [r0, #1368]	; 0x558
 8001580:	2b00      	cmp	r3, #0
 8001582:	d040      	beq.n	8001606 <VCO_bleprect_SampleCompute+0xb6>
		p = 0.0f;

		w = freq / SAMPLERATE;
 8001584:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8001918 <VCO_bleprect_SampleCompute+0x3c8>
 8001588:	eecb 8aa7 	vdiv.f32	s17, s23, s15
		if (w < 1e-5) w = 1e-5;
 800158c:	ee18 0a90 	vmov	r0, s17
 8001590:	f7fe ff7e 	bl	8000490 <__aeabi_f2d>
 8001594:	a3de      	add	r3, pc, #888	; (adr r3, 8001910 <VCO_bleprect_SampleCompute+0x3c0>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff fa43 	bl	8000a24 <__aeabi_dcmplt>
 800159e:	b108      	cbz	r0, 80015a4 <VCO_bleprect_SampleCompute+0x54>
 80015a0:	eddf 8ade 	vldr	s17, [pc, #888]	; 800191c <VCO_bleprect_SampleCompute+0x3cc>
		if (w > 0.5) w = 0.5;
 80015a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80015a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	dd01      	ble.n	80015b6 <VCO_bleprect_SampleCompute+0x66>
 80015b2:	eef0 8a67 	vmov.f32	s17, s15
		b = 0.5 * (1.0 + vco->waveform );
 80015b6:	6920      	ldr	r0, [r4, #16]
 80015b8:	f7fe ff6a 	bl	8000490 <__aeabi_f2d>
 80015bc:	2200      	movs	r2, #0
 80015be:	4bd8      	ldr	r3, [pc, #864]	; (8001920 <VCO_bleprect_SampleCompute+0x3d0>)
 80015c0:	f7fe fe08 	bl	80001d4 <__adddf3>
 80015c4:	2200      	movs	r2, #0
 80015c6:	4bd7      	ldr	r3, [pc, #860]	; (8001924 <VCO_bleprect_SampleCompute+0x3d4>)
 80015c8:	f7fe ffba 	bl	8000540 <__aeabi_dmul>
 80015cc:	f7ff fa52 	bl	8000a74 <__aeabi_d2f>
 80015d0:	ee07 0a10 	vmov	s14, r0
		if (b < w) b = w;
 80015d4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	dd01      	ble.n	80015e2 <VCO_bleprect_SampleCompute+0x92>
 80015de:	eeb0 7a68 	vmov.f32	s14, s17
		if (b > 1.0f - w) b = 1.0f - w;
 80015e2:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 80015e6:	ee3b ba68 	vsub.f32	s22, s22, s17
 80015ea:	eeb4 bac7 	vcmpe.f32	s22, s14
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	d401      	bmi.n	80015f8 <VCO_bleprect_SampleCompute+0xa8>
 80015f4:	eeb0 ba47 	vmov.f32	s22, s14
		x = 0.5f;
		/* if we valued alias-free startup over low startup time, we could do:
		 *   p -= w;
		 *   place_step_dd(_f, j, 0.0f, w, 0.5f); */
		k = 0;
		vco->_init = false;
 80015f8:	2600      	movs	r6, #0
 80015fa:	f884 6558 	strb.w	r6, [r4, #1368]	; 0x558
		x = 0.5f;
 80015fe:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		p = 0.0f;
 8001602:	ed9f 9ac9 	vldr	s18, [pc, #804]	; 8001928 <VCO_bleprect_SampleCompute+0x3d8>
	}
	//
	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
 8001606:	eddf 7ac4 	vldr	s15, [pc, #784]	; 8001918 <VCO_bleprect_SampleCompute+0x3c8>
 800160a:	eecb 9aa7 	vdiv.f32	s19, s23, s15
	if (t < 1e-5) t = 1e-5;
 800160e:	ee19 0a90 	vmov	r0, s19
 8001612:	f7fe ff3d 	bl	8000490 <__aeabi_f2d>
 8001616:	a3be      	add	r3, pc, #760	; (adr r3, 8001910 <VCO_bleprect_SampleCompute+0x3c0>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff fa02 	bl	8000a24 <__aeabi_dcmplt>
 8001620:	b108      	cbz	r0, 8001626 <VCO_bleprect_SampleCompute+0xd6>
 8001622:	eddf 9abe 	vldr	s19, [pc, #760]	; 800191c <VCO_bleprect_SampleCompute+0x3cc>
	if (t > 0.5) t = 0.5;
 8001626:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800162a:	eef4 9ae7 	vcmpe.f32	s19, s15
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	dd01      	ble.n	8001638 <VCO_bleprect_SampleCompute+0xe8>
 8001634:	eef0 9a67 	vmov.f32	s19, s15
	dw = (t - w) ;
 8001638:	ee79 9ae8 	vsub.f32	s19, s19, s17
	t = 0.5 * (1.0 + vco->waveform );
 800163c:	6920      	ldr	r0, [r4, #16]
 800163e:	f7fe ff27 	bl	8000490 <__aeabi_f2d>
 8001642:	2200      	movs	r2, #0
 8001644:	4bb6      	ldr	r3, [pc, #728]	; (8001920 <VCO_bleprect_SampleCompute+0x3d0>)
 8001646:	f7fe fdc5 	bl	80001d4 <__adddf3>
 800164a:	2200      	movs	r2, #0
 800164c:	4bb5      	ldr	r3, [pc, #724]	; (8001924 <VCO_bleprect_SampleCompute+0x3d4>)
 800164e:	f7fe ff77 	bl	8000540 <__aeabi_dmul>
 8001652:	f7ff fa0f 	bl	8000a74 <__aeabi_d2f>
 8001656:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 800165a:	eef4 8ac7 	vcmpe.f32	s17, s14
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	dd01      	ble.n	8001668 <VCO_bleprect_SampleCompute+0x118>
 8001664:	eeb0 7a68 	vmov.f32	s14, s17
	if (t > 1.0f - w) t = 1.0f - w;
 8001668:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800166c:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8001670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	d401      	bmi.n	800167e <VCO_bleprect_SampleCompute+0x12e>
 800167a:	eef0 7a47 	vmov.f32	s15, s14
	db = (t - b) ;
 800167e:	ee77 7acb 	vsub.f32	s15, s15, s22

	w += dw;
 8001682:	ee78 8aa9 	vadd.f32	s17, s17, s19
	b += db;
 8001686:	ee3b ba27 	vadd.f32	s22, s22, s15
	p += w;
 800168a:	ee39 9a28 	vadd.f32	s18, s18, s17

	if (syncin >= 1e-20f) {  /* sync to master */
 800168e:	eddf 7aa7 	vldr	s15, [pc, #668]	; 800192c <VCO_bleprect_SampleCompute+0x3dc>
 8001692:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	f2c0 80c0 	blt.w	800181e <VCO_bleprect_SampleCompute+0x2ce>
		//
		float eof_offset = (syncin - 1e-20f) * w;
 800169e:	ee78 9a67 	vsub.f32	s19, s16, s15
 80016a2:	ee69 9aa8 	vmul.f32	s19, s19, s17
		float p_at_reset = p - eof_offset;
 80016a6:	ee39 9a69 	vsub.f32	s18, s18, s19
		p = eof_offset;

		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 80016aa:	2e00      	cmp	r6, #0
 80016ac:	d17b      	bne.n	80017a6 <VCO_bleprect_SampleCompute+0x256>
			if (p_at_reset >= b) {
 80016ae:	eeb4 bac9 	vcmpe.f32	s22, s18
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d955      	bls.n	8001764 <VCO_bleprect_SampleCompute+0x214>
 80016b8:	4633      	mov	r3, r6
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
				k = 1;
				x = -0.5f;
			}
			if (p_at_reset >= 1.0f) {
 80016ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80016be:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	da5e      	bge.n	8001786 <VCO_bleprect_SampleCompute+0x236>
 80016c8:	461e      	mov	r6, r3
				x = -0.5f;
			}
		}

		/* now place reset DD */
		if (k) {
 80016ca:	b16e      	cbz	r6, 80016e8 <VCO_bleprect_SampleCompute+0x198>
			place_step_dd(vco->_f, j, p, w, 1.0f);
 80016cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80016d0:	eef0 0a68 	vmov.f32	s1, s17
 80016d4:	eeb0 0a69 	vmov.f32	s0, s19
 80016d8:	4629      	mov	r1, r5
 80016da:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80016de:	f7ff fe81 	bl	80013e4 <place_step_dd>
			k = 0;
			x = 0.5f;
 80016e2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			k = 0;
 80016e6:	2600      	movs	r6, #0
		}
		if (p >= b) {
 80016e8:	eeb4 bae9 	vcmpe.f32	s22, s19
 80016ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f0:	f240 8086 	bls.w	8001800 <VCO_bleprect_SampleCompute+0x2b0>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
			k = 1;
			x = -0.5f;
		}

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 80016f4:	ed84 8a06 	vstr	s16, [r4, #24]
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
			k = 1;
			x = -0.5f;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 80016f8:	f105 0310 	add.w	r3, r5, #16
 80016fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8001708:	edc3 7a00 	vstr	s15, [r3]

	z += a * (vco->_f[j] - z);
 800170c:	f105 030c 	add.w	r3, r5, #12
 8001710:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001714:	ed93 8a00 	vldr	s16, [r3]
 8001718:	ee38 8a4a 	vsub.f32	s16, s16, s20
 800171c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001720:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001724:	ee38 8a0a 	vadd.f32	s16, s16, s20
	vco->out = vco->amp * z;
 8001728:	ed94 9a01 	vldr	s18, [r4, #4]
 800172c:	ee29 9a08 	vmul.f32	s18, s18, s16
 8001730:	ed84 9a00 	vstr	s18, [r4]

	if (++j == FILLEN)
 8001734:	3501      	adds	r5, #1
 8001736:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800173a:	f000 80f9 	beq.w	8001930 <VCO_bleprect_SampleCompute+0x3e0>
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
	}

	vco->_p = p;
 800173e:	edc4 9a07 	vstr	s19, [r4, #28]
	vco->_w = w;
 8001742:	edc4 8a08 	vstr	s17, [r4, #32]
	vco->_b = b;
 8001746:	ed84 ba09 	vstr	s22, [r4, #36]	; 0x24
	vco->_x = x;
 800174a:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
	vco->_z = z;
 800174e:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
	vco->_j = j;
 8001752:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
	vco->_k = k;
 8001756:	f8c4 6554 	str.w	r6, [r4, #1364]	; 0x554

	return vco->out;

}
 800175a:	eeb0 0a49 	vmov.f32	s0, s18
 800175e:	ecbd 8b08 	vpop	{d8-d11}
 8001762:	bd70      	pop	{r4, r5, r6, pc}
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 8001764:	ee39 0a4b 	vsub.f32	s0, s18, s22
 8001768:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800176c:	eef0 0a68 	vmov.f32	s1, s17
 8001770:	ee30 0a29 	vadd.f32	s0, s0, s19
 8001774:	4629      	mov	r1, r5
 8001776:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800177a:	f7ff fe33 	bl	80013e4 <place_step_dd>
				x = -0.5f;
 800177e:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	e799      	b.n	80016ba <VCO_bleprect_SampleCompute+0x16a>
				p_at_reset -= 1.0f;
 8001786:	eeb0 1a67 	vmov.f32	s2, s15
 800178a:	ee39 9a67 	vsub.f32	s18, s18, s15
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 800178e:	eef0 0a68 	vmov.f32	s1, s17
 8001792:	ee39 0a89 	vadd.f32	s0, s19, s18
 8001796:	4629      	mov	r1, r5
 8001798:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800179c:	f7ff fe22 	bl	80013e4 <place_step_dd>
				x = 0.5f;
 80017a0:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80017a4:	e7a0      	b.n	80016e8 <VCO_bleprect_SampleCompute+0x198>
			if (p_at_reset >= 1.0f) {
 80017a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80017aa:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	da14      	bge.n	80017de <VCO_bleprect_SampleCompute+0x28e>
			if (!k && p_at_reset >= b) {
 80017b4:	2e00      	cmp	r6, #0
 80017b6:	d188      	bne.n	80016ca <VCO_bleprect_SampleCompute+0x17a>
 80017b8:	eeb4 9acb 	vcmpe.f32	s18, s22
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	db83      	blt.n	80016ca <VCO_bleprect_SampleCompute+0x17a>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 80017c2:	ee39 9a4b 	vsub.f32	s18, s18, s22
 80017c6:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80017ca:	eef0 0a68 	vmov.f32	s1, s17
 80017ce:	ee39 0a29 	vadd.f32	s0, s18, s19
 80017d2:	4629      	mov	r1, r5
 80017d4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80017d8:	f7ff fe04 	bl	80013e4 <place_step_dd>
 80017dc:	e776      	b.n	80016cc <VCO_bleprect_SampleCompute+0x17c>
				p_at_reset -= 1.0f;
 80017de:	eeb0 1a67 	vmov.f32	s2, s15
 80017e2:	ee39 9a67 	vsub.f32	s18, s18, s15
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 80017e6:	eef0 0a68 	vmov.f32	s1, s17
 80017ea:	ee39 0a89 	vadd.f32	s0, s19, s18
 80017ee:	4629      	mov	r1, r5
 80017f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80017f4:	f7ff fdf6 	bl	80013e4 <place_step_dd>
				x = 0.5f;
 80017f8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
				k = 0;
 80017fc:	2600      	movs	r6, #0
 80017fe:	e7d9      	b.n	80017b4 <VCO_bleprect_SampleCompute+0x264>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001800:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001804:	eef0 0a68 	vmov.f32	s1, s17
 8001808:	ee39 0acb 	vsub.f32	s0, s19, s22
 800180c:	4629      	mov	r1, r5
 800180e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001812:	f7ff fde7 	bl	80013e4 <place_step_dd>
			x = -0.5f;
 8001816:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
			k = 1;
 800181a:	2601      	movs	r6, #1
 800181c:	e76a      	b.n	80016f4 <VCO_bleprect_SampleCompute+0x1a4>
	} else if (!k) {  /* normal operation, signal currently high */
 800181e:	bbce      	cbnz	r6, 8001894 <VCO_bleprect_SampleCompute+0x344>
		if (p >= b) {
 8001820:	eeb4 bac9 	vcmpe.f32	s22, s18
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	d90d      	bls.n	8001846 <VCO_bleprect_SampleCompute+0x2f6>
 800182a:	4633      	mov	r3, r6
		if (p >= 1.0f) {
 800182c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001830:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	da14      	bge.n	8001864 <VCO_bleprect_SampleCompute+0x314>
			vco->syncout = 0.0f;
 800183a:	2200      	movs	r2, #0
 800183c:	61a2      	str	r2, [r4, #24]
	p += w;
 800183e:	eef0 9a49 	vmov.f32	s19, s18
			vco->syncout = 0.0f;
 8001842:	461e      	mov	r6, r3
 8001844:	e758      	b.n	80016f8 <VCO_bleprect_SampleCompute+0x1a8>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001846:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800184a:	eef0 0a68 	vmov.f32	s1, s17
 800184e:	ee39 0a4b 	vsub.f32	s0, s18, s22
 8001852:	4629      	mov	r1, r5
 8001854:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001858:	f7ff fdc4 	bl	80013e4 <place_step_dd>
			x = -0.5f;
 800185c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
			k = 1;
 8001860:	2301      	movs	r3, #1
 8001862:	e7e3      	b.n	800182c <VCO_bleprect_SampleCompute+0x2dc>
			p -= 1.0f;
 8001864:	eeb0 1a67 	vmov.f32	s2, s15
 8001868:	ee79 9a67 	vsub.f32	s19, s18, s15
			vco->syncout = p / w + 1e-20f;
 800186c:	eec9 7aa8 	vdiv.f32	s15, s19, s17
 8001870:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800192c <VCO_bleprect_SampleCompute+0x3dc>
 8001874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001878:	edc4 7a06 	vstr	s15, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 800187c:	eef0 0a68 	vmov.f32	s1, s17
 8001880:	eeb0 0a69 	vmov.f32	s0, s19
 8001884:	4629      	mov	r1, r5
 8001886:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800188a:	f7ff fdab 	bl	80013e4 <place_step_dd>
			x = 0.5f;
 800188e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8001892:	e731      	b.n	80016f8 <VCO_bleprect_SampleCompute+0x1a8>
		if (p >= 1.0f) {
 8001894:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001898:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	da1b      	bge.n	80018da <VCO_bleprect_SampleCompute+0x38a>
			vco->syncout = 0.0f;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61a3      	str	r3, [r4, #24]
	p += w;
 80018a6:	eef0 9a49 	vmov.f32	s19, s18
		if (!k && p >= b) {
 80018aa:	2e00      	cmp	r6, #0
 80018ac:	f47f af24 	bne.w	80016f8 <VCO_bleprect_SampleCompute+0x1a8>
 80018b0:	eef4 9acb 	vcmpe.f32	s19, s22
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	f6ff af1e 	blt.w	80016f8 <VCO_bleprect_SampleCompute+0x1a8>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 80018bc:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018c0:	eef0 0a68 	vmov.f32	s1, s17
 80018c4:	ee39 0acb 	vsub.f32	s0, s19, s22
 80018c8:	4629      	mov	r1, r5
 80018ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80018ce:	f7ff fd89 	bl	80013e4 <place_step_dd>
			x = -0.5f;
 80018d2:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
			k = 1;
 80018d6:	2601      	movs	r6, #1
 80018d8:	e70e      	b.n	80016f8 <VCO_bleprect_SampleCompute+0x1a8>
			p -= 1.0f;
 80018da:	eeb0 1a67 	vmov.f32	s2, s15
 80018de:	ee79 9a67 	vsub.f32	s19, s18, s15
			vco->syncout = p / w + 1e-20f;
 80018e2:	eec9 7aa8 	vdiv.f32	s15, s19, s17
 80018e6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800192c <VCO_bleprect_SampleCompute+0x3dc>
 80018ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ee:	edc4 7a06 	vstr	s15, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 80018f2:	eef0 0a68 	vmov.f32	s1, s17
 80018f6:	eeb0 0a69 	vmov.f32	s0, s19
 80018fa:	4629      	mov	r1, r5
 80018fc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001900:	f7ff fd70 	bl	80013e4 <place_step_dd>
			x = 0.5f;
 8001904:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			k = 0;
 8001908:	2600      	movs	r6, #0
 800190a:	e7ce      	b.n	80018aa <VCO_bleprect_SampleCompute+0x35a>
 800190c:	f3af 8000 	nop.w
 8001910:	88e368f1 	.word	0x88e368f1
 8001914:	3ee4f8b5 	.word	0x3ee4f8b5
 8001918:	472c4400 	.word	0x472c4400
 800191c:	3727c5ac 	.word	0x3727c5ac
 8001920:	3ff00000 	.word	0x3ff00000
 8001924:	3fe00000 	.word	0x3fe00000
 8001928:	00000000 	.word	0x00000000
 800192c:	1e3ce508 	.word	0x1e3ce508
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001930:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001934:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8001938:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800193c:	f005 f9a8 	bl	8006c90 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001944:	2100      	movs	r1, #0
 8001946:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800194a:	f005 f9af 	bl	8006cac <memset>
		j = 0;
 800194e:	2500      	movs	r5, #0
 8001950:	e6f5      	b.n	800173e <VCO_bleprect_SampleCompute+0x1ee>
 8001952:	bf00      	nop

08001954 <VCO_bleptri_Init>:
//----------------------------------------------------------------------------------------------------------

///* ==== variable-slope, hard-sync-capable triangle oscillator ==== */

void VCO_bleptri_Init(VCO_bleptri_t *vco)
{
 8001954:	b508      	push	{r3, lr}
	vco->amp = 1.0f;
 8001956:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800195a:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <VCO_bleptri_Init+0x2c>)
 800195e:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
 8001960:	2300      	movs	r3, #0
 8001962:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 8001964:	6103      	str	r3, [r0, #16]
	vco->_init = true;
 8001966:	2201      	movs	r2, #1
 8001968:	f880 2554 	strb.w	r2, [r0, #1364]	; 0x554
	vco->_z = 0.0f;
 800196c:	6283      	str	r3, [r0, #40]	; 0x28
	vco->_j = 0;
 800196e:	2100      	movs	r1, #0
 8001970:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001974:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001978:	302c      	adds	r0, #44	; 0x2c
 800197a:	f005 f997 	bl	8006cac <memset>
}
 800197e:	bd08      	pop	{r3, pc}
 8001980:	43dc0000 	.word	0x43dc0000
 8001984:	00000000 	.word	0x00000000

08001988 <VCO_bleptri_SampleCompute>:
////----------------------------------------------------------------------------------------------------------

float VCO_bleptri_SampleCompute(VCO_bleptri_t *vco)
{
 8001988:	b570      	push	{r4, r5, r6, lr}
 800198a:	ed2d 8b08 	vpush	{d8-d11}
 800198e:	4604      	mov	r4, r0
	int    j, k;
	float  freq, syncin;
	float  a, b, b1, db, p, t, w, dw, x, z;

	syncin  = vco->syncin;
 8001990:	edd0 8a05 	vldr	s17, [r0, #20]
	freq = vco->freq;
 8001994:	ed90 ba03 	vldr	s22, [r0, #12]
	p = vco->_p;  /* phase [0, 1) */
 8001998:	ed90 aa07 	vldr	s20, [r0, #28]
	w = vco->_w;  /* phase increment */
 800199c:	ed90 9a08 	vldr	s18, [r0, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 80019a0:	ed90 8a09 	vldr	s16, [r0, #36]	; 0x24
	z = vco->_z;  /* low pass filter state */
 80019a4:	edd0 aa0a 	vldr	s21, [r0, #40]	; 0x28
	j = vco->_j;  /* index into buffer _f */
 80019a8:	f8d0 554c 	ldr.w	r5, [r0, #1356]	; 0x54c
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80019ac:	f8d0 6550 	ldr.w	r6, [r0, #1360]	; 0x550

	if (vco->_init) {
 80019b0:	f890 3554 	ldrb.w	r3, [r0, #1364]	; 0x554
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d040      	beq.n	8001a3a <VCO_bleptri_SampleCompute+0xb2>
		//		w = (exp2ap (freq[1] + vco->_port[OCTN] + vco->_port[TUNE] + expm[1] * vco->_port[EXPG] + 8.03136)
		//				+ 1e3 * linm[1] * vco->_port[LING]) / SAMPLERATE;
		w = freq / SAMPLERATE;
 80019b8:	eddf 7ae5 	vldr	s15, [pc, #916]	; 8001d50 <VCO_bleptri_SampleCompute+0x3c8>
 80019bc:	ee8b 9a27 	vdiv.f32	s18, s22, s15
		if (w < 1e-5) w = 1e-5;
 80019c0:	ee19 0a10 	vmov	r0, s18
 80019c4:	f7fe fd64 	bl	8000490 <__aeabi_f2d>
 80019c8:	a3df      	add	r3, pc, #892	; (adr r3, 8001d48 <VCO_bleptri_SampleCompute+0x3c0>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7ff f829 	bl	8000a24 <__aeabi_dcmplt>
 80019d2:	b108      	cbz	r0, 80019d8 <VCO_bleptri_SampleCompute+0x50>
 80019d4:	ed9f 9adf 	vldr	s18, [pc, #892]	; 8001d54 <VCO_bleptri_SampleCompute+0x3cc>
		if (w > 0.5) w = 0.5;
 80019d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80019dc:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	dd01      	ble.n	80019ea <VCO_bleptri_SampleCompute+0x62>
 80019e6:	eeb0 9a67 	vmov.f32	s18, s15
		b = 0.5 * (1.0 + vco->waveform);
 80019ea:	6920      	ldr	r0, [r4, #16]
 80019ec:	f7fe fd50 	bl	8000490 <__aeabi_f2d>
 80019f0:	2200      	movs	r2, #0
 80019f2:	4bd9      	ldr	r3, [pc, #868]	; (8001d58 <VCO_bleptri_SampleCompute+0x3d0>)
 80019f4:	f7fe fbee 	bl	80001d4 <__adddf3>
 80019f8:	2200      	movs	r2, #0
 80019fa:	4bd8      	ldr	r3, [pc, #864]	; (8001d5c <VCO_bleptri_SampleCompute+0x3d4>)
 80019fc:	f7fe fda0 	bl	8000540 <__aeabi_dmul>
 8001a00:	f7ff f838 	bl	8000a74 <__aeabi_d2f>
 8001a04:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8001a08:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	dd01      	ble.n	8001a16 <VCO_bleptri_SampleCompute+0x8e>
 8001a12:	eef0 7a49 	vmov.f32	s15, s18
		if (b > 1.0f - w) b = 1.0f - w;
 8001a16:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8001a1a:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001a1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	d401      	bmi.n	8001a2c <VCO_bleptri_SampleCompute+0xa4>
 8001a28:	eeb0 8a67 	vmov.f32	s16, s15
		p = 0.5f * b;
 8001a2c:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8001a30:	ee28 aa29 	vmul.f32	s20, s16, s19
		/* if we valued alias-free startup over low startup time, we could do:
		 *   p -= w;
		 *   place_slope_dd(_f, j, 0.0f, w, 1.0f / b); */
		k = 0;
		vco->_init = false;
 8001a34:	2600      	movs	r6, #0
 8001a36:	f884 6554 	strb.w	r6, [r4, #1364]	; 0x554
	}

	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
 8001a3a:	eddf 7ac5 	vldr	s15, [pc, #788]	; 8001d50 <VCO_bleptri_SampleCompute+0x3c8>
 8001a3e:	eecb 9a27 	vdiv.f32	s19, s22, s15
	if (t < 1e-5) t = 1e-5;
 8001a42:	ee19 0a90 	vmov	r0, s19
 8001a46:	f7fe fd23 	bl	8000490 <__aeabi_f2d>
 8001a4a:	a3bf      	add	r3, pc, #764	; (adr r3, 8001d48 <VCO_bleptri_SampleCompute+0x3c0>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe ffe8 	bl	8000a24 <__aeabi_dcmplt>
 8001a54:	b108      	cbz	r0, 8001a5a <VCO_bleptri_SampleCompute+0xd2>
 8001a56:	eddf 9abf 	vldr	s19, [pc, #764]	; 8001d54 <VCO_bleptri_SampleCompute+0x3cc>
	if (t > 0.5) t = 0.5;
 8001a5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001a5e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a66:	dd01      	ble.n	8001a6c <VCO_bleptri_SampleCompute+0xe4>
 8001a68:	eef0 9a67 	vmov.f32	s19, s15
	dw = (t - w) ;
 8001a6c:	ee79 9ac9 	vsub.f32	s19, s19, s18
	t = 0.5 * (1.0 + vco->waveform );
 8001a70:	6920      	ldr	r0, [r4, #16]
 8001a72:	f7fe fd0d 	bl	8000490 <__aeabi_f2d>
 8001a76:	2200      	movs	r2, #0
 8001a78:	4bb7      	ldr	r3, [pc, #732]	; (8001d58 <VCO_bleptri_SampleCompute+0x3d0>)
 8001a7a:	f7fe fbab 	bl	80001d4 <__adddf3>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4bb6      	ldr	r3, [pc, #728]	; (8001d5c <VCO_bleptri_SampleCompute+0x3d4>)
 8001a82:	f7fe fd5d 	bl	8000540 <__aeabi_dmul>
 8001a86:	f7fe fff5 	bl	8000a74 <__aeabi_d2f>
 8001a8a:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 8001a8e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	dd01      	ble.n	8001a9c <VCO_bleptri_SampleCompute+0x114>
 8001a98:	eeb0 7a49 	vmov.f32	s14, s18
	if (t > 1.0f - w) t = 1.0f - w;
 8001a9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001aa0:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8001aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	d401      	bmi.n	8001ab2 <VCO_bleptri_SampleCompute+0x12a>
 8001aae:	eef0 7a47 	vmov.f32	s15, s14
	db = (t - b) ;
 8001ab2:	ee77 7ac8 	vsub.f32	s15, s15, s16

	w += dw;
 8001ab6:	ee39 9a29 	vadd.f32	s18, s18, s19
	b += db;
 8001aba:	ee38 8a27 	vadd.f32	s16, s16, s15
	b1 = 1.0f - b;
 8001abe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ac2:	ee77 bac8 	vsub.f32	s23, s15, s16
	p += w;
 8001ac6:	ee7a 9a09 	vadd.f32	s19, s20, s18

	if (syncin >= 1e-20f) {  /* sync to master */
 8001aca:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8001d60 <VCO_bleptri_SampleCompute+0x3d8>
 8001ace:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	f2c0 811a 	blt.w	8001d0e <VCO_bleptri_SampleCompute+0x386>

		float eof_offset = (syncin - 1e-20f) * w;
 8001ada:	ee38 bae7 	vsub.f32	s22, s17, s15
 8001ade:	ee2b ba09 	vmul.f32	s22, s22, s18
		float p_at_reset = p - eof_offset;
 8001ae2:	ee79 9acb 	vsub.f32	s19, s19, s22
		p = eof_offset;
		//
		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 8001ae6:	2e00      	cmp	r6, #0
 8001ae8:	f040 80aa 	bne.w	8001c40 <VCO_bleptri_SampleCompute+0x2b8>
			x = -0.5f + p_at_reset / b;
 8001aec:	ee89 aa88 	vdiv.f32	s20, s19, s16
 8001af0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001af4:	ee3a aa67 	vsub.f32	s20, s20, s15
			if (p_at_reset >= b) {
 8001af8:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	d969      	bls.n	8001bd6 <VCO_bleptri_SampleCompute+0x24e>
				x = 0.5f - (p_at_reset - b) / b1;
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
				k = 1;
			}
			if (p_at_reset >= 1.0f) {
 8001b02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b06:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	da7f      	bge.n	8001c10 <VCO_bleptri_SampleCompute+0x288>
				k = 1;
			}
		}

		/* now place reset DDs */
		if (k)
 8001b10:	b186      	cbz	r6, 8001b34 <VCO_bleptri_SampleCompute+0x1ac>
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001b12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b16:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8001b1a:	ee87 7aab 	vdiv.f32	s14, s15, s23
 8001b1e:	ee31 1a07 	vadd.f32	s2, s2, s14
 8001b22:	eef0 0a49 	vmov.f32	s1, s18
 8001b26:	eeb0 0a4b 	vmov.f32	s0, s22
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001b30:	f7ff fc96 	bl	8001460 <place_slope_dd>
		place_step_dd(vco->_f, j, p, w, -0.5f - x);
 8001b34:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8001b38:	eebe 1a00 	vmov.f32	s2, #224	; 0xbf000000 -0.5
 8001b3c:	ee31 1a4a 	vsub.f32	s2, s2, s20
 8001b40:	eef0 0a49 	vmov.f32	s1, s18
 8001b44:	eeb0 0a4b 	vmov.f32	s0, s22
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f7ff fc4a 	bl	80013e4 <place_step_dd>
		x = -0.5f + p / b;
 8001b50:	ee8b aa08 	vdiv.f32	s20, s22, s16
 8001b54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001b58:	ee3a aa67 	vsub.f32	s20, s20, s15
		k = 0;
		if (p >= b) {
 8001b5c:	eeb4 8acb 	vcmpe.f32	s16, s22
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	f240 80b9 	bls.w	8001cda <VCO_bleptri_SampleCompute+0x352>
		k = 0;
 8001b68:	2600      	movs	r6, #0
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001b6a:	edc4 8a06 	vstr	s17, [r4, #24]
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001b6e:	f105 030e 	add.w	r3, r5, #14
 8001b72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b76:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b7a:	ee37 aa8a 	vadd.f32	s20, s15, s20
 8001b7e:	ed83 aa01 	vstr	s20, [r3, #4]

	z += a * (vco->_f[j] - z);
 8001b82:	f105 030a 	add.w	r3, r5, #10
 8001b86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b8a:	edd3 8a01 	vldr	s17, [r3, #4]
 8001b8e:	ee78 8aea 	vsub.f32	s17, s17, s21
 8001b92:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001b96:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001b9a:	ee78 8aaa 	vadd.f32	s17, s17, s21
	vco->out = vco->amp * z;
 8001b9e:	edd4 9a01 	vldr	s19, [r4, #4]
 8001ba2:	ee69 9aa8 	vmul.f32	s19, s19, s17
 8001ba6:	edc4 9a00 	vstr	s19, [r4]

	if (++j == FILLEN)
 8001baa:	3501      	adds	r5, #1
 8001bac:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001bb0:	f000 816b 	beq.w	8001e8a <VCO_bleptri_SampleCompute+0x502>
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
	}

	vco->_p = p;
 8001bb4:	ed84 ba07 	vstr	s22, [r4, #28]
	vco->_w = w;
 8001bb8:	ed84 9a08 	vstr	s18, [r4, #32]
	vco->_b = b;
 8001bbc:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
	vco->_z = z;
 8001bc0:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	vco->_j = j;
 8001bc4:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
	vco->_k = k;
 8001bc8:	f8c4 6550 	str.w	r6, [r4, #1360]	; 0x550

	return vco->out;

}
 8001bcc:	eeb0 0a69 	vmov.f32	s0, s19
 8001bd0:	ecbd 8b08 	vpop	{d8-d11}
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
				x = 0.5f - (p_at_reset - b) / b1;
 8001bd6:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8001bda:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001bde:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001be2:	ee3a aa67 	vsub.f32	s20, s20, s15
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001be6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001bea:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bf2:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001bf6:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001bfa:	eef0 0a49 	vmov.f32	s1, s18
 8001bfe:	ee30 0a0b 	vadd.f32	s0, s0, s22
 8001c02:	4629      	mov	r1, r5
 8001c04:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001c08:	f7ff fc2a 	bl	8001460 <place_slope_dd>
				k = 1;
 8001c0c:	2601      	movs	r6, #1
 8001c0e:	e778      	b.n	8001b02 <VCO_bleptri_SampleCompute+0x17a>
				p_at_reset -= 1.0f;
 8001c10:	ee39 0ae7 	vsub.f32	s0, s19, s15
				x = -0.5f + p_at_reset / b;
 8001c14:	ee80 aa08 	vdiv.f32	s20, s0, s16
 8001c18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c1c:	ee3a aa47 	vsub.f32	s20, s20, s14
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001c20:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8001c24:	ee87 7aab 	vdiv.f32	s14, s15, s23
 8001c28:	ee31 1a07 	vadd.f32	s2, s2, s14
 8001c2c:	eef0 0a49 	vmov.f32	s1, s18
 8001c30:	ee3b 0a00 	vadd.f32	s0, s22, s0
 8001c34:	4629      	mov	r1, r5
 8001c36:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001c3a:	f7ff fc11 	bl	8001460 <place_slope_dd>
 8001c3e:	e779      	b.n	8001b34 <VCO_bleptri_SampleCompute+0x1ac>
			x = 0.5f - (p_at_reset - b) / b1;
 8001c40:	ee39 7ac8 	vsub.f32	s14, s19, s16
 8001c44:	eec7 7a2b 	vdiv.f32	s15, s14, s23
 8001c48:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001c4c:	ee3a aa67 	vsub.f32	s20, s20, s15
			if (p_at_reset >= 1.0f) {
 8001c50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c54:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	da24      	bge.n	8001ca8 <VCO_bleptri_SampleCompute+0x320>
			if (!k && p_at_reset >= b) {
 8001c5e:	2e00      	cmp	r6, #0
 8001c60:	f47f af56 	bne.w	8001b10 <VCO_bleptri_SampleCompute+0x188>
 8001c64:	eef4 9ac8 	vcmpe.f32	s19, s16
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	f6ff af50 	blt.w	8001b10 <VCO_bleptri_SampleCompute+0x188>
				x = 0.5f - (p_at_reset - b) / b1;
 8001c70:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8001c74:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001c78:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001c7c:	ee3a aa67 	vsub.f32	s20, s20, s15
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001c80:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001c84:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c8c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001c90:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001c94:	eef0 0a49 	vmov.f32	s1, s18
 8001c98:	ee30 0a0b 	vadd.f32	s0, s0, s22
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001ca2:	f7ff fbdd 	bl	8001460 <place_slope_dd>
 8001ca6:	e734      	b.n	8001b12 <VCO_bleptri_SampleCompute+0x18a>
				p_at_reset -= 1.0f;
 8001ca8:	ee79 9ae7 	vsub.f32	s19, s19, s15
				x = -0.5f + p_at_reset / b;
 8001cac:	ee89 aa88 	vdiv.f32	s20, s19, s16
 8001cb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cb4:	ee3a aa47 	vsub.f32	s20, s20, s14
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001cb8:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8001cbc:	ee87 7aab 	vdiv.f32	s14, s15, s23
 8001cc0:	ee31 1a07 	vadd.f32	s2, s2, s14
 8001cc4:	eef0 0a49 	vmov.f32	s1, s18
 8001cc8:	ee3b 0a29 	vadd.f32	s0, s22, s19
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001cd2:	f7ff fbc5 	bl	8001460 <place_slope_dd>
				k = 0;
 8001cd6:	2600      	movs	r6, #0
 8001cd8:	e7c1      	b.n	8001c5e <VCO_bleptri_SampleCompute+0x2d6>
			x = 0.5f - (p - b) / b1;
 8001cda:	ee3b 0a48 	vsub.f32	s0, s22, s16
 8001cde:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001ce2:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001ce6:	ee3a aa67 	vsub.f32	s20, s20, s15
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001cea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001cee:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cf6:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001cfa:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001cfe:	eef0 0a49 	vmov.f32	s1, s18
 8001d02:	4629      	mov	r1, r5
 8001d04:	4630      	mov	r0, r6
 8001d06:	f7ff fbab 	bl	8001460 <place_slope_dd>
			k = 1;
 8001d0a:	2601      	movs	r6, #1
 8001d0c:	e72d      	b.n	8001b6a <VCO_bleptri_SampleCompute+0x1e2>
	} else if (!k) {  /* normal operation, slope currently up */
 8001d0e:	2e00      	cmp	r6, #0
 8001d10:	d163      	bne.n	8001dda <VCO_bleptri_SampleCompute+0x452>
		x = -0.5f + p / b;
 8001d12:	ee89 aa88 	vdiv.f32	s20, s19, s16
 8001d16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001d1a:	ee3a aa67 	vsub.f32	s20, s20, s15
		if (p >= b) {
 8001d1e:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	d91d      	bls.n	8001d64 <VCO_bleptri_SampleCompute+0x3dc>
 8001d28:	4633      	mov	r3, r6
		if (p >= 1.0f) {
 8001d2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d2e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	da30      	bge.n	8001d9a <VCO_bleptri_SampleCompute+0x412>
			vco->syncout = 0.0f;
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61a2      	str	r2, [r4, #24]
	p += w;
 8001d3c:	eeb0 ba69 	vmov.f32	s22, s19
			vco->syncout = 0.0f;
 8001d40:	461e      	mov	r6, r3
 8001d42:	e714      	b.n	8001b6e <VCO_bleptri_SampleCompute+0x1e6>
 8001d44:	f3af 8000 	nop.w
 8001d48:	88e368f1 	.word	0x88e368f1
 8001d4c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001d50:	472c4400 	.word	0x472c4400
 8001d54:	3727c5ac 	.word	0x3727c5ac
 8001d58:	3ff00000 	.word	0x3ff00000
 8001d5c:	3fe00000 	.word	0x3fe00000
 8001d60:	1e3ce508 	.word	0x1e3ce508
			x = 0.5f - (p - b) / b1;
 8001d64:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8001d68:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001d6c:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001d70:	ee3a aa67 	vsub.f32	s20, s20, s15
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001d74:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001d78:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d80:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001d84:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001d88:	eef0 0a49 	vmov.f32	s1, s18
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001d92:	f7ff fb65 	bl	8001460 <place_slope_dd>
			k = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e7c7      	b.n	8001d2a <VCO_bleptri_SampleCompute+0x3a2>
			p -= 1.0f;
 8001d9a:	ee39 bae7 	vsub.f32	s22, s19, s15
			vco->syncout = p / w + 1e-20f;
 8001d9e:	ee8b 7a09 	vdiv.f32	s14, s22, s18
 8001da2:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8001d60 <VCO_bleptri_SampleCompute+0x3d8>
 8001da6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001daa:	ed84 7a06 	vstr	s14, [r4, #24]
			x = -0.5f + p / b;
 8001dae:	ee8b aa08 	vdiv.f32	s20, s22, s16
 8001db2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001db6:	ee3a aa47 	vsub.f32	s20, s20, s14
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001dba:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8001dbe:	ee87 7aab 	vdiv.f32	s14, s15, s23
 8001dc2:	ee31 1a07 	vadd.f32	s2, s2, s14
 8001dc6:	eef0 0a49 	vmov.f32	s1, s18
 8001dca:	eeb0 0a4b 	vmov.f32	s0, s22
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001dd4:	f7ff fb44 	bl	8001460 <place_slope_dd>
 8001dd8:	e6c9      	b.n	8001b6e <VCO_bleptri_SampleCompute+0x1e6>
		x = 0.5f - (p - b) / b1;
 8001dda:	ee39 7ac8 	vsub.f32	s14, s19, s16
 8001dde:	eec7 7a2b 	vdiv.f32	s15, s14, s23
 8001de2:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001de6:	ee3a aa67 	vsub.f32	s20, s20, s15
		if (p >= 1.0f) {
 8001dea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001dee:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	da27      	bge.n	8001e48 <VCO_bleptri_SampleCompute+0x4c0>
			vco->syncout = 0.0f;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61a3      	str	r3, [r4, #24]
	p += w;
 8001dfc:	eeb0 ba69 	vmov.f32	s22, s19
		if (!k && p >= b) {
 8001e00:	2e00      	cmp	r6, #0
 8001e02:	f47f aeb4 	bne.w	8001b6e <VCO_bleptri_SampleCompute+0x1e6>
 8001e06:	eeb4 bac8 	vcmpe.f32	s22, s16
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	f6ff aeae 	blt.w	8001b6e <VCO_bleptri_SampleCompute+0x1e6>
			x = 0.5f - (p - b) / b1;
 8001e12:	ee3b 0a48 	vsub.f32	s0, s22, s16
 8001e16:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001e1a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001e1e:	ee3a aa67 	vsub.f32	s20, s20, s15
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001e22:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001e26:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e2e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001e32:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001e36:	eef0 0a49 	vmov.f32	s1, s18
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001e40:	f7ff fb0e 	bl	8001460 <place_slope_dd>
			k = 1;
 8001e44:	2601      	movs	r6, #1
 8001e46:	e692      	b.n	8001b6e <VCO_bleptri_SampleCompute+0x1e6>
			p -= 1.0f;
 8001e48:	ee39 bae7 	vsub.f32	s22, s19, s15
			vco->syncout = p / w + 1e-20f;
 8001e4c:	ee8b 7a09 	vdiv.f32	s14, s22, s18
 8001e50:	ed5f 6a3d 	vldr	s13, [pc, #-244]	; 8001d60 <VCO_bleptri_SampleCompute+0x3d8>
 8001e54:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001e58:	ed84 7a06 	vstr	s14, [r4, #24]
			x = -0.5f + p / b;
 8001e5c:	ee8b aa08 	vdiv.f32	s20, s22, s16
 8001e60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e64:	ee3a aa47 	vsub.f32	s20, s20, s14
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001e68:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8001e6c:	ee87 7aab 	vdiv.f32	s14, s15, s23
 8001e70:	ee31 1a07 	vadd.f32	s2, s2, s14
 8001e74:	eef0 0a49 	vmov.f32	s1, s18
 8001e78:	eeb0 0a4b 	vmov.f32	s0, s22
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001e82:	f7ff faed 	bl	8001460 <place_slope_dd>
			k = 0;
 8001e86:	2600      	movs	r6, #0
 8001e88:	e7ba      	b.n	8001e00 <VCO_bleptri_SampleCompute+0x478>
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001e8a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001e8e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001e92:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001e96:	f004 fefb 	bl	8006c90 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 8001ea4:	f004 ff02 	bl	8006cac <memset>
		j = 0;
 8001ea8:	2500      	movs	r5, #0
 8001eaa:	e683      	b.n	8001bb4 <VCO_bleptri_SampleCompute+0x22c>

08001eac <Lfo_SampleCompute>:
static monochorus_t		delR  _CCM_ , delL  _CCM_ ; // 2 fractional delay lines
float rateCoeff;

/*-------------------------------------------------------------------------------------------*/
float Lfo_SampleCompute(Lfo_t * op) // ! returns a positive value between 0 and op.amp !
{
 8001eac:	b510      	push	{r4, lr}
 8001eae:	4604      	mov	r4, r0
	float z;

	op->phase += _2PI * Ts * op->freq; // increment phase
 8001eb0:	edd0 7a01 	vldr	s15, [r0, #4]
 8001eb4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001f30 <Lfo_SampleCompute+0x84>
 8001eb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ebc:	edd0 7a02 	vldr	s15, [r0, #8]
 8001ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ec4:	edc0 7a02 	vstr	s15, [r0, #8]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8001ec8:	e005      	b.n	8001ed6 <Lfo_SampleCompute+0x2a>
		op->phase += _2PI;
 8001eca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001f34 <Lfo_SampleCompute+0x88>
 8001ece:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ed2:	edc4 7a02 	vstr	s15, [r4, #8]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8001ed6:	edd4 7a02 	vldr	s15, [r4, #8]
 8001eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d4f2      	bmi.n	8001eca <Lfo_SampleCompute+0x1e>
 8001ee4:	e005      	b.n	8001ef2 <Lfo_SampleCompute+0x46>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 8001ee6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001f34 <Lfo_SampleCompute+0x88>
 8001eea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001eee:	edc4 7a02 	vstr	s15, [r4, #8]
	while (op->phase >= _2PI)
 8001ef2:	edd4 7a02 	vldr	s15, [r4, #8]
 8001ef6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001f34 <Lfo_SampleCompute+0x88>
 8001efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	daf0      	bge.n	8001ee6 <Lfo_SampleCompute+0x3a>

	z = sinetable[lrintf(ALPHA * (op->phase))];
 8001f04:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001f38 <Lfo_SampleCompute+0x8c>
 8001f08:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001f0c:	f004 ffd0 	bl	8006eb0 <lrintf>
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <Lfo_SampleCompute+0x90>)
 8001f12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001f16:	edd0 7a00 	vldr	s15, [r0]
	op->out = op->amp * (z + 1); // returns a positive value between 0 and op.amp
 8001f1a:	ed94 0a00 	vldr	s0, [r4]
 8001f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f26:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001f2a:	ed84 0a03 	vstr	s0, [r4, #12]

	return op->out;
}
 8001f2e:	bd10      	pop	{r4, pc}
 8001f30:	39156592 	.word	0x39156592
 8001f34:	40c90fdb 	.word	0x40c90fdb
 8001f38:	4322f983 	.word	0x4322f983
 8001f3c:	080153b4 	.word	0x080153b4

08001f40 <ChorusRate_set>:
}
/*---------------------------------------------------------------------------------------------*/
void ChorusRate_set(uint8_t val)
{
	float rate;
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8001f40:	ee07 0a90 	vmov	s15, r0
 8001f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f48:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001f70 <ChorusRate_set+0x30>
 8001f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f50:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001f74 <ChorusRate_set+0x34>
 8001f54:	ee77 7a87 	vadd.f32	s15, s15, s14
	lfoL.freq = rate;
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <ChorusRate_set+0x38>)
 8001f5a:	edc3 7a01 	vstr	s15, [r3, #4]
	//lfoR.freq = 0.98f * rate;
	lfoR.freq = rateCoeff * rate;
 8001f5e:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <ChorusRate_set+0x3c>)
 8001f60:	ed92 7a00 	vldr	s14, [r2]
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	3d61c387 	.word	0x3d61c387
 8001f74:	3ca3d70a 	.word	0x3ca3d70a
 8001f78:	200010a4 	.word	0x200010a4
 8001f7c:	200139dc 	.word	0x200139dc

08001f80 <ChorusSecondRate_set>:
/*---------------------------------------------------------------------------------------------*/
void ChorusSecondRate_set(uint8_t val)
{
	rateCoeff = 0.9f / MIDI_MAX * val + 0.1f; // from 10 % to 100 % of lfoL rate
 8001f80:	ee07 0a90 	vmov	s15, r0
 8001f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f88:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001fb0 <ChorusSecondRate_set+0x30>
 8001f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f90:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001fb4 <ChorusSecondRate_set+0x34>
 8001f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <ChorusSecondRate_set+0x38>)
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
	lfoR.freq = rateCoeff * lfoL.freq;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <ChorusSecondRate_set+0x3c>)
 8001fa0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa8:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	3be836d4 	.word	0x3be836d4
 8001fb4:	3dcccccd 	.word	0x3dcccccd
 8001fb8:	200139dc 	.word	0x200139dc
 8001fbc:	200010a4 	.word	0x200010a4

08001fc0 <ChorusDelay_set>:
}
/*---------------------------------------------------------------------------------------------*/
void ChorusDelay_set(uint8_t val)
{
	float d;
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 8001fc0:	ee07 0a90 	vmov	s15, r0
 8001fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001fe8 <ChorusDelay_set+0x28>
 8001fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
	delL.baseDelay = d;
 8001fd0:	f241 51f0 	movw	r1, #5616	; 0x15f0
 8001fd4:	4a05      	ldr	r2, [pc, #20]	; (8001fec <ChorusDelay_set+0x2c>)
 8001fd6:	440a      	add	r2, r1
 8001fd8:	edc2 7a00 	vstr	s15, [r2]
	delR.baseDelay = d;
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <ChorusDelay_set+0x30>)
 8001fde:	440b      	add	r3, r1
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40b060c2 	.word	0x40b060c2
 8001fec:	200010c4 	.word	0x200010c4
 8001ff0:	200026bc 	.word	0x200026bc

08001ff4 <ChorusFeedback_set>:
}
/*---------------------------------------------------------------------------------------------*/
void ChorusFeedback_set(uint8_t val)
{
	float_t fb;
	fb = 0.95f * val / MIDI_MAX;
 8001ff4:	ee07 0a90 	vmov	s15, r0
 8001ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800201c <ChorusFeedback_set+0x28>
 8002000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002004:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002020 <ChorusFeedback_set+0x2c>
 8002008:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	delL.fb = fb;
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <ChorusFeedback_set+0x30>)
 800200e:	ed83 7a01 	vstr	s14, [r3, #4]
	delR.fb = fb;
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <ChorusFeedback_set+0x34>)
 8002014:	ed83 7a01 	vstr	s14, [r3, #4]
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	3f733333 	.word	0x3f733333
 8002020:	42fe0000 	.word	0x42fe0000
 8002024:	200010c4 	.word	0x200010c4
 8002028:	200026bc 	.word	0x200026bc

0800202c <ChorusSweep_set>:
}
/*---------------------------------------------------------------------------------------------*/
void ChorusSweep_set(uint8_t val)
{
	float sw;
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 800202c:	ee07 0a90 	vmov	s15, r0
 8002030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002034:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002048 <ChorusSweep_set+0x1c>
 8002038:	ee67 7a87 	vmul.f32	s15, s15, s14
	lfoL.amp = sw;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <ChorusSweep_set+0x20>)
 800203e:	edc3 7a00 	vstr	s15, [r3]
	lfoR.amp = sw;
 8002042:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8002046:	4770      	bx	lr
 8002048:	3f8c7f66 	.word	0x3f8c7f66
 800204c:	200010a4 	.word	0x200010a4

08002050 <ChorusMode_switch>:
	delR.mode *= -1 ;//
}
/*---------------------------------------------------------------------------------------------*/
void ChorusMode_switch(uint8_t val)
{
	switch (val)
 8002050:	b148      	cbz	r0, 8002066 <ChorusMode_switch+0x16>
 8002052:	287f      	cmp	r0, #127	; 0x7f
 8002054:	d10e      	bne.n	8002074 <ChorusMode_switch+0x24>
		{
		case 127 : 	delR.mode = delL.mode = -1 ; break;
 8002056:	f241 53f4 	movw	r3, #5620	; 0x15f4
 800205a:	22ff      	movs	r2, #255	; 0xff
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <ChorusMode_switch+0x28>)
 800205e:	54ca      	strb	r2, [r1, r3]
 8002060:	4906      	ldr	r1, [pc, #24]	; (800207c <ChorusMode_switch+0x2c>)
 8002062:	54ca      	strb	r2, [r1, r3]
 8002064:	4770      	bx	lr
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 8002066:	f241 53f4 	movw	r3, #5620	; 0x15f4
 800206a:	2201      	movs	r2, #1
 800206c:	4902      	ldr	r1, [pc, #8]	; (8002078 <ChorusMode_switch+0x28>)
 800206e:	54ca      	strb	r2, [r1, r3]
 8002070:	4902      	ldr	r1, [pc, #8]	; (800207c <ChorusMode_switch+0x2c>)
 8002072:	54ca      	strb	r2, [r1, r3]
		}
}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	200010c4 	.word	0x200010c4
 800207c:	200026bc 	.word	0x200026bc

08002080 <ChorusFDBsign_switch>:
	delR.fb *= -1.f ;//
}
/*---------------------------------------------------------------------------------------------*/
void ChorusFDBsign_switch(uint8_t val)
{
	switch (val)
 8002080:	b180      	cbz	r0, 80020a4 <ChorusFDBsign_switch+0x24>
 8002082:	287f      	cmp	r0, #127	; 0x7f
 8002084:	d120      	bne.n	80020c8 <ChorusFDBsign_switch+0x48>
		{
		case 127 : 	delR.fb = fabsf(delR.fb); delL.fb = fabsf(delL.fb); break; // positive feedback;
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <ChorusFDBsign_switch+0x4c>)
 8002088:	edd3 7a01 	vldr	s15, [r3, #4]
 800208c:	eef0 7ae7 	vabs.f32	s15, s15
 8002090:	edc3 7a01 	vstr	s15, [r3, #4]
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <ChorusFDBsign_switch+0x50>)
 8002096:	edd3 7a01 	vldr	s15, [r3, #4]
 800209a:	eef0 7ae7 	vabs.f32	s15, s15
 800209e:	edc3 7a01 	vstr	s15, [r3, #4]
 80020a2:	4770      	bx	lr
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <ChorusFDBsign_switch+0x4c>)
 80020a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80020aa:	eef0 7ae7 	vabs.f32	s15, s15
 80020ae:	eef1 7a67 	vneg.f32	s15, s15
 80020b2:	edc3 7a01 	vstr	s15, [r3, #4]
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <ChorusFDBsign_switch+0x50>)
 80020b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80020bc:	eef0 7ae7 	vabs.f32	s15, s15
 80020c0:	eef1 7a67 	vneg.f32	s15, s15
 80020c4:	edc3 7a01 	vstr	s15, [r3, #4]
		}
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200026bc 	.word	0x200026bc
 80020d0:	200010c4 	.word	0x200010c4

080020d4 <Delay_set_delay>:
/*-------------------------------------------------------------------------------------------*/
void Delay_set_delay(monochorus_t *del, float delay)
{
	del->baseDelay = delay;
 80020d4:	f500 50af 	add.w	r0, r0, #5600	; 0x15e0
 80020d8:	ed80 0a04 	vstr	s0, [r0, #16]
}
 80020dc:	4770      	bx	lr

080020de <Delay_set_fb>:
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fb(monochorus_t *del, float val)
{
	del->fb = val;
 80020de:	ed80 0a01 	vstr	s0, [r0, #4]
}
 80020e2:	4770      	bx	lr

080020e4 <Delay_set_fw>:
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fw(monochorus_t *del, float val)
{
	del->fw = val;
 80020e4:	ed80 0a02 	vstr	s0, [r0, #8]
}
 80020e8:	4770      	bx	lr

080020ea <Delay_set_mix>:
/*-------------------------------------------------------------------------------------------*/
void Delay_set_mix(monochorus_t *del, float val)
{
	del->mix = val;
 80020ea:	ed80 0a00 	vstr	s0, [r0]
}
 80020ee:	4770      	bx	lr

080020f0 <ChorusDelay_init>:
{
 80020f0:	b510      	push	{r4, lr}
 80020f2:	ed2d 8b04 	vpush	{d8-d9}
 80020f6:	4604      	mov	r4, r0
 80020f8:	eeb0 8a40 	vmov.f32	s16, s0
 80020fc:	eeb0 9a41 	vmov.f32	s18, s2
 8002100:	eef0 8a61 	vmov.f32	s17, s3
	Delay_set_fb(del, dfb);
 8002104:	eeb0 0a60 	vmov.f32	s0, s1
 8002108:	f7ff ffe9 	bl	80020de <Delay_set_fb>
	Delay_set_fw(del, dfw);
 800210c:	eeb0 0a49 	vmov.f32	s0, s18
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff ffe7 	bl	80020e4 <Delay_set_fw>
	Delay_set_mix(del, dmix);
 8002116:	eeb0 0a68 	vmov.f32	s0, s17
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff ffe5 	bl	80020ea <Delay_set_mix>
	Delay_set_delay(del, delay);
 8002120:	eeb0 0a48 	vmov.f32	s0, s16
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ffd5 	bl	80020d4 <Delay_set_delay>
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 800212a:	f240 5377 	movw	r3, #1399	; 0x577
 800212e:	60e3      	str	r3, [r4, #12]
	del->mode = 1;
 8002130:	f241 53f4 	movw	r3, #5620	; 0x15f4
 8002134:	2201      	movs	r2, #1
 8002136:	54e2      	strb	r2, [r4, r3]
}
 8002138:	ecbd 8b04 	vpop	{d8-d9}
 800213c:	bd10      	pop	{r4, pc}
	...

08002140 <Chorus_init>:
{
 8002140:	b508      	push	{r3, lr}
 8002142:	ed2d 8b02 	vpush	{d8}
	ChorusDelay_init(&delL, LEFT_DELAY, FEEDBACK, FORWARD, MIX);
 8002146:	eddf 8a1e 	vldr	s17, [pc, #120]	; 80021c0 <Chorus_init+0x80>
 800214a:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 80021c4 <Chorus_init+0x84>
 800214e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002152:	eeb0 1a61 	vmov.f32	s2, s3
 8002156:	eef0 0a68 	vmov.f32	s1, s17
 800215a:	eeb0 0a48 	vmov.f32	s0, s16
 800215e:	481a      	ldr	r0, [pc, #104]	; (80021c8 <Chorus_init+0x88>)
 8002160:	f7ff ffc6 	bl	80020f0 <ChorusDelay_init>
	ChorusDelay_init(&delR, RIGHT_DELAY, FEEDBACK, FORWARD, MIX);
 8002164:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002168:	eeb0 1a61 	vmov.f32	s2, s3
 800216c:	eef0 0a68 	vmov.f32	s1, s17
 8002170:	eeb0 0a48 	vmov.f32	s0, s16
 8002174:	4815      	ldr	r0, [pc, #84]	; (80021cc <Chorus_init+0x8c>)
 8002176:	f7ff ffbb 	bl	80020f0 <ChorusDelay_init>
	lfoL.amp = LEFT_SWEEP;
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <Chorus_init+0x90>)
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <Chorus_init+0x94>)
 800217e:	601a      	str	r2, [r3, #0]
	lfoR.amp = RIGHT_SWEEP;
 8002180:	611a      	str	r2, [r3, #16]
	lfoL.freq = LEFT_RATE ;
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <Chorus_init+0x98>)
 8002184:	605a      	str	r2, [r3, #4]
	lfoR.freq = RIGHT_RATE ;
 8002186:	4a15      	ldr	r2, [pc, #84]	; (80021dc <Chorus_init+0x9c>)
 8002188:	615a      	str	r2, [r3, #20]
	rateCoeff = 1;
 800218a:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <Chorus_init+0xa0>)
 800218c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002190:	6011      	str	r1, [r2, #0]
	lfoL.phase = _PI/2; // initial phases for quadrature
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <Chorus_init+0xa4>)
 8002194:	609a      	str	r2, [r3, #8]
	lfoR.phase = 0;
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
	for (int var = 0; var < DEPTH; ++var) {
 800219a:	2200      	movs	r2, #0
 800219c:	e009      	b.n	80021b2 <Chorus_init+0x72>
		delR.dline[var] = 0;
 800219e:	1d13      	adds	r3, r2, #4
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <Chorus_init+0x8c>)
 80021a4:	4419      	add	r1, r3
 80021a6:	2000      	movs	r0, #0
 80021a8:	6008      	str	r0, [r1, #0]
		delL.dline[var] = 0;
 80021aa:	4907      	ldr	r1, [pc, #28]	; (80021c8 <Chorus_init+0x88>)
 80021ac:	440b      	add	r3, r1
 80021ae:	6018      	str	r0, [r3, #0]
	for (int var = 0; var < DEPTH; ++var) {
 80021b0:	3201      	adds	r2, #1
 80021b2:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
 80021b6:	dbf2      	blt.n	800219e <Chorus_init+0x5e>
}
 80021b8:	ecbd 8b02 	vpop	{d8}
 80021bc:	bd08      	pop	{r3, pc}
 80021be:	bf00      	nop
 80021c0:	be4ccccd 	.word	0xbe4ccccd
 80021c4:	43700000 	.word	0x43700000
 80021c8:	200010c4 	.word	0x200010c4
 80021cc:	200026bc 	.word	0x200026bc
 80021d0:	200010a4 	.word	0x200010a4
 80021d4:	42480000 	.word	0x42480000
 80021d8:	3de147ae 	.word	0x3de147ae
 80021dc:	3df5c28f 	.word	0x3df5c28f
 80021e0:	200139dc 	.word	0x200139dc
 80021e4:	3fc90fdb 	.word	0x3fc90fdb

080021e8 <delay_write>:
	return del->mix;
}
/*-------------------------------------------------------------------------------------------*/
void delay_write (monochorus_t *del, float xin)
{
	del->dline[del->in_idx] = xin;
 80021e8:	68c3      	ldr	r3, [r0, #12]
 80021ea:	1d1a      	adds	r2, r3, #4
 80021ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80021f0:	ed82 0a00 	vstr	s0, [r2]

	(del->in_idx)++;
 80021f4:	3301      	adds	r3, #1
 80021f6:	60c3      	str	r3, [r0, #12]
	if (del->in_idx >= DEPTH)
 80021f8:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80021fc:	db01      	blt.n	8002202 <delay_write+0x1a>
		del->in_idx = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	60c3      	str	r3, [r0, #12]
}
 8002202:	4770      	bx	lr

08002204 <delay_read>:
/*-------------------------------------------------------------------------------------------*/
float delay_read (monochorus_t *del, float delay) // "delay" is a floating point number of samples
{
 8002204:	b510      	push	{r4, lr}
 8002206:	ed2d 8b02 	vpush	{d8}
 800220a:	4604      	mov	r4, r0
 800220c:	eeb0 8a40 	vmov.f32	s16, s0
	float y_n_2;	// y(n-2)
	float y_n_3;	// y(n-3)
	int32_t idx;

	d = delay;
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002210:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8002214:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	d501      	bpl.n	8002222 <delay_read+0x1e>
 800221e:	eeb0 8a67 	vmov.f32	s16, s15
	if (d > DEPTH-MARGIN) d = DEPTH-MARGIN;
 8002222:	eddf 7a39 	vldr	s15, [pc, #228]	; 8002308 <delay_read+0x104>
 8002226:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	dd01      	ble.n	8002234 <delay_read+0x30>
 8002230:	eeb0 8a67 	vmov.f32	s16, s15

	i = (int32_t)floorf(d);
 8002234:	eeb0 0a48 	vmov.f32	s0, s16
 8002238:	f004 fdf4 	bl	8006e24 <floorf>
 800223c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	f = d - i;
 8002240:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8002244:	ee38 8a67 	vsub.f32	s16, s16, s15

	idx = del->in_idx - i;
 8002248:	68e3      	ldr	r3, [r4, #12]
	if (idx < 0) idx += DEPTH;
 800224a:	ee10 2a10 	vmov	r2, s0
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	d44e      	bmi.n	80022f0 <delay_read+0xec>
	y_n = del->dline[idx]; 		// y(n)
 8002252:	1d1a      	adds	r2, r3, #4
 8002254:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002258:	ed92 6a00 	vldr	s12, [r2]

	idx--;
	if (idx < 0) idx += DEPTH;
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	d44a      	bmi.n	80022f6 <delay_read+0xf2>
	y_n_1 = del->dline[idx];	// y(n-1)
 8002260:	1d13      	adds	r3, r2, #4
 8002262:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002266:	ed93 4a00 	vldr	s8, [r3]

	idx--;
	if (idx < 0) idx += DEPTH;
 800226a:	1e53      	subs	r3, r2, #1
 800226c:	d446      	bmi.n	80022fc <delay_read+0xf8>
	y_n_2 = del->dline[idx];	// y(n-2)
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002274:	edd2 4a00 	vldr	s9, [r2]

	idx--;
	if (idx < 0) idx += DEPTH;
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	d442      	bmi.n	8002302 <delay_read+0xfe>
	y_n_3 = del->dline[idx];	// y(n-3)
 800227c:	3204      	adds	r2, #4
 800227e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8002282:	ed94 5a00 	vldr	s10, [r4]
	//return (.5f)*(f-1)*(f-2)*y_n - f*(f-2)*y_n_1 + (.5f)*f*(f-1)*y_n_2 ; // 2nd order Lagrange interpolation

	//return .5f*(f-1)*((f-2)*y_n + f*y_n_2) - f*(f-2)*y_n_1 ;	// 2nd order Lagrange interpolation (faster)

	/* 3rd order Lagrange interpolation :  */
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 8002286:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800228a:	ee78 6a66 	vsub.f32	s13, s16, s13
 800228e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8002292:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002296:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800229a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800229e:	ee38 7a47 	vsub.f32	s14, s16, s14
 80022a2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800230c <delay_read+0x108>
 80022a6:	ee27 0a00 	vmul.f32	s0, s14, s0
 80022aa:	ee20 0a06 	vmul.f32	s0, s0, s12
 80022ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80022b2:	ee28 6a06 	vmul.f32	s12, s16, s12
 80022b6:	ee26 6a04 	vmul.f32	s12, s12, s8
 80022ba:	ee30 0a06 	vadd.f32	s0, s0, s12
 80022be:	ee25 0a80 	vmul.f32	s0, s11, s0
 80022c2:	ee27 8a08 	vmul.f32	s16, s14, s16
 80022c6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80022ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ce:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80022d2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002310 <delay_read+0x10c>
 80022d6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80022da:	ee66 6a85 	vmul.f32	s13, s13, s10
 80022de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022e2:	ee68 7a27 	vmul.f32	s15, s16, s15

}
 80022e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80022ea:	ecbd 8b02 	vpop	{d8}
 80022ee:	bd10      	pop	{r4, pc}
	if (idx < 0) idx += DEPTH;
 80022f0:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80022f4:	e7ad      	b.n	8002252 <delay_read+0x4e>
	if (idx < 0) idx += DEPTH;
 80022f6:	f203 5277 	addw	r2, r3, #1399	; 0x577
 80022fa:	e7b1      	b.n	8002260 <delay_read+0x5c>
	if (idx < 0) idx += DEPTH;
 80022fc:	f202 5377 	addw	r3, r2, #1399	; 0x577
 8002300:	e7b5      	b.n	800226e <delay_read+0x6a>
	if (idx < 0) idx += DEPTH;
 8002302:	f203 5277 	addw	r2, r3, #1399	; 0x577
 8002306:	e7b9      	b.n	800227c <delay_read+0x78>
 8002308:	44ae4000 	.word	0x44ae4000
 800230c:	be2aaaab 	.word	0xbe2aaaab
 8002310:	3e2aaaab 	.word	0x3e2aaaab

08002314 <mono_chorus_compute>:
/*---------------------------------------------------------------------------------------------*/

float mono_chorus_compute(monochorus_t *del, Lfo_t *lfo, float xin)
{
 8002314:	b510      	push	{r4, lr}
 8002316:	ed2d 8b04 	vpush	{d8-d9}
 800231a:	4604      	mov	r4, r0
 800231c:	eeb0 8a40 	vmov.f32	s16, s0
	float yout;
	float x1;
	float x2;

	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002320:	f500 53af 	add.w	r3, r0, #5600	; 0x15e0
 8002324:	edd3 8a04 	vldr	s17, [r3, #16]
 8002328:	4608      	mov	r0, r1
 800232a:	f7ff fdbf 	bl	8001eac <Lfo_SampleCompute>
 800232e:	ee38 0a80 	vadd.f32	s0, s17, s0
 8002332:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8002336:	ee30 0a27 	vadd.f32	s0, s0, s15
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff ff62 	bl	8002204 <delay_read>
 8002340:	eeb0 9a40 	vmov.f32	s18, s0

	if (del->mode == 1)
 8002344:	f241 53f4 	movw	r3, #5620	; 0x15f4
 8002348:	56e3      	ldrsb	r3, [r4, r3]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d032      	beq.n	80023b4 <mono_chorus_compute+0xa0>
		x1 = xin + del->fb * x2; // variable delay feedback signal or ...
	else
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal
 800234e:	edd4 8a01 	vldr	s17, [r4, #4]
 8002352:	f504 53af 	add.w	r3, r4, #5600	; 0x15e0
 8002356:	ed93 0a04 	vldr	s0, [r3, #16]
 800235a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 800235e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ff4e 	bl	8002204 <delay_read>
 8002368:	ee28 0a80 	vmul.f32	s0, s17, s0
 800236c:	ee30 0a08 	vadd.f32	s0, s0, s16

	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 8002370:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002374:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	dd01      	ble.n	8002382 <mono_chorus_compute+0x6e>
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
	x1 = (x1 < -1.0f) ? -1.0f : x1 ;
 8002382:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002386:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	d418      	bmi.n	80023c2 <mono_chorus_compute+0xae>

	yout = del->mix * x1 + del->fw * x2;
 8002390:	ed94 8a00 	vldr	s16, [r4]
 8002394:	ee28 8a00 	vmul.f32	s16, s16, s0
 8002398:	edd4 7a02 	vldr	s15, [r4, #8]
 800239c:	ee67 7a89 	vmul.f32	s15, s15, s18
 80023a0:	ee38 8a27 	vadd.f32	s16, s16, s15
	//yout = del->mix * xin + del->fw * x2; // not good sounding...
	delay_write(del, x1);
 80023a4:	4620      	mov	r0, r4
 80023a6:	f7ff ff1f 	bl	80021e8 <delay_write>

	return yout;
}
 80023aa:	eeb0 0a48 	vmov.f32	s0, s16
 80023ae:	ecbd 8b04 	vpop	{d8-d9}
 80023b2:	bd10      	pop	{r4, pc}
		x1 = xin + del->fb * x2; // variable delay feedback signal or ...
 80023b4:	ed94 0a01 	vldr	s0, [r4, #4]
 80023b8:	ee20 0a09 	vmul.f32	s0, s0, s18
 80023bc:	ee30 0a08 	vadd.f32	s0, s0, s16
 80023c0:	e7d6      	b.n	8002370 <mono_chorus_compute+0x5c>
	x1 = (x1 < -1.0f) ? -1.0f : x1 ;
 80023c2:	eeb0 0a67 	vmov.f32	s0, s15
 80023c6:	e7e3      	b.n	8002390 <mono_chorus_compute+0x7c>

080023c8 <stereoChorus_compute>:

/*--------------------This is the main stereo chorus function : ----------------------------*/

void stereoChorus_compute (float * left_out, float * right_out, float in)
{
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	ed2d 8b02 	vpush	{d8}
 80023ce:	4606      	mov	r6, r0
 80023d0:	460d      	mov	r5, r1
 80023d2:	eeb0 8a40 	vmov.f32	s16, s0
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80023d6:	4c09      	ldr	r4, [pc, #36]	; (80023fc <stereoChorus_compute+0x34>)
 80023d8:	4621      	mov	r1, r4
 80023da:	4809      	ldr	r0, [pc, #36]	; (8002400 <stereoChorus_compute+0x38>)
 80023dc:	f7ff ff9a 	bl	8002314 <mono_chorus_compute>
 80023e0:	ed86 0a00 	vstr	s0, [r6]
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80023e4:	eeb0 0a48 	vmov.f32	s0, s16
 80023e8:	f104 0110 	add.w	r1, r4, #16
 80023ec:	4805      	ldr	r0, [pc, #20]	; (8002404 <stereoChorus_compute+0x3c>)
 80023ee:	f7ff ff91 	bl	8002314 <mono_chorus_compute>
 80023f2:	ed85 0a00 	vstr	s0, [r5]
}
 80023f6:	ecbd 8b02 	vpop	{d8}
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	200010a4 	.word	0x200010a4
 8002400:	200010c4 	.word	0x200010c4
 8002404:	200026bc 	.word	0x200026bc

08002408 <Delay_init>:

/*-------------------------------------------------------------------------------------------*/
void Delay_init(void)
{
	/* initialize pointers positions for delay effect */
	shift = INIT_DELAY;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <Delay_init+0x18>)
 800240a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800240e:	601a      	str	r2, [r3, #0]
	readpos = delayline;
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <Delay_init+0x1c>)
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <Delay_init+0x20>)
 8002414:	601a      	str	r2, [r3, #0]
	writepos = delayline + INIT_DELAY;
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <Delay_init+0x24>)
 8002418:	4a05      	ldr	r2, [pc, #20]	; (8002430 <Delay_init+0x28>)
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200139e0 	.word	0x200139e0
 8002424:	200129d4 	.word	0x200129d4
 8002428:	20003f68 	.word	0x20003f68
 800242c:	200129d8 	.word	0x200129d8
 8002430:	20010a88 	.word	0x20010a88

08002434 <Delay_clean>:
/*-------------------------------------------------------------------------------------------*/
void Delay_clean(void)
{
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	e005      	b.n	8002444 <Delay_clean+0x10>
		delayline[i] = 0;
 8002438:	4a05      	ldr	r2, [pc, #20]	; (8002450 <Delay_clean+0x1c>)
 800243a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800243e:	2100      	movs	r1, #0
 8002440:	6011      	str	r1, [r2, #0]
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 8002442:	3301      	adds	r3, #1
 8002444:	f643 2299 	movw	r2, #15001	; 0x3a99
 8002448:	4293      	cmp	r3, r2
 800244a:	ddf5      	ble.n	8002438 <Delay_clean+0x4>
}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20003f68 	.word	0x20003f68

08002454 <Delay_time_set>:
			readpos = pos + DELAYLINE_LEN - 1;
	}
}
/*-------------------------------------------------------------------------------------------*/
void Delay_time_set(uint8_t val)
{
 8002454:	b508      	push	{r3, lr}
	float 	*pos;
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 8002456:	ee07 0a90 	vmov	s15, r0
 800245a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002498 <Delay_time_set+0x44>
 8002462:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002466:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800249c <Delay_time_set+0x48>
 800246a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800246e:	f004 fd1f 	bl	8006eb0 <lrintf>
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <Delay_time_set+0x4c>)
 8002474:	6018      	str	r0, [r3, #0]
	pos = writepos - shift;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <Delay_time_set+0x50>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
	if (pos >= delayline)
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <Delay_time_set+0x54>)
 8002480:	4298      	cmp	r0, r3
 8002482:	d205      	bcs.n	8002490 <Delay_time_set+0x3c>
		readpos = pos;
	else
		readpos = pos + DELAYLINE_LEN - 1;
 8002484:	f500 406a 	add.w	r0, r0, #59904	; 0xea00
 8002488:	305c      	adds	r0, #92	; 0x5c
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <Delay_time_set+0x58>)
 800248c:	6018      	str	r0, [r3, #0]

}
 800248e:	bd08      	pop	{r3, pc}
		readpos = pos;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <Delay_time_set+0x58>)
 8002492:	6018      	str	r0, [r3, #0]
 8002494:	e7fb      	b.n	800248e <Delay_time_set+0x3a>
 8002496:	bf00      	nop
 8002498:	42e84489 	.word	0x42e84489
 800249c:	437a0000 	.word	0x437a0000
 80024a0:	200139e0 	.word	0x200139e0
 80024a4:	200129d8 	.word	0x200129d8
 80024a8:	20003f68 	.word	0x20003f68
 80024ac:	200129d4 	.word	0x200129d4

080024b0 <DelayFeedback_set>:
	fdb *= 0.95f ;//
}
/*-------------------------------------------------------------------------------------------*/
void DelayFeedback_set(uint8_t val)
{
	fdb = val / MIDI_MAX;
 80024b0:	ee07 0a90 	vmov	s15, r0
 80024b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024b8:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80024c8 <DelayFeedback_set+0x18>
 80024bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <DelayFeedback_set+0x1c>)
 80024c2:	edc3 7a00 	vstr	s15, [r3]
}
 80024c6:	4770      	bx	lr
 80024c8:	42fe0000 	.word	0x42fe0000
 80024cc:	20000000 	.word	0x20000000

080024d0 <DelayWet_set>:
/*-------------------------------------------------------------------------------------------*/
void DelayWet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 80024d0:	ee07 0a90 	vmov	s15, r0
 80024d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024d8:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80024e8 <DelayWet_set+0x18>
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	4b02      	ldr	r3, [pc, #8]	; (80024ec <DelayWet_set+0x1c>)
 80024e2:	edc3 7a00 	vstr	s15, [r3]
}
 80024e6:	4770      	bx	lr
 80024e8:	42fe0000 	.word	0x42fe0000
 80024ec:	20000004 	.word	0x20000004

080024f0 <Delay_compute>:
float Delay_compute (float x)
{
	float y, dy;

	// (*readpos) : delayed sample read at the output of the delay line
	dy = (1.f - coeff_a1)*(*readpos) + coeff_a1 * old_dy; // apply lowpass filter in the loop
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <Delay_compute+0xa8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800259c <Delay_compute+0xac>
 80024fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <Delay_compute+0xb0>)
 8002502:	ed92 7a00 	vldr	s14, [r2]
 8002506:	eddf 6a27 	vldr	s13, [pc, #156]	; 80025a4 <Delay_compute+0xb4>
 800250a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800250e:	ee77 7a87 	vadd.f32	s15, s15, s14
	old_dy = dy;
 8002512:	edc2 7a00 	vstr	s15, [r2]
	y = x + fdb*dy;
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <Delay_compute+0xb8>)
 8002518:	ed92 7a00 	vldr	s14, [r2]
 800251c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002520:	ee77 7a80 	vadd.f32	s15, s15, s0

	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 8002524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	dd01      	ble.n	8002536 <Delay_compute+0x46>
 8002532:	eef0 7a47 	vmov.f32	s15, s14
	y = (y < -1.0f) ? -1.0f : y ;
 8002536:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800253a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	d425      	bmi.n	8002590 <Delay_compute+0xa0>
	*writepos = y; // write new computed sample at the input of the delay line
 8002544:	4919      	ldr	r1, [pc, #100]	; (80025ac <Delay_compute+0xbc>)
 8002546:	680a      	ldr	r2, [r1, #0]
 8002548:	ece2 7a01 	vstmia	r2!, {s15}

	/* update the delay line pointers : */
	writepos++;
 800254c:	600a      	str	r2, [r1, #0]
	readpos++;
 800254e:	3304      	adds	r3, #4
 8002550:	4911      	ldr	r1, [pc, #68]	; (8002598 <Delay_compute+0xa8>)
 8002552:	600b      	str	r3, [r1, #0]

	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002554:	4916      	ldr	r1, [pc, #88]	; (80025b0 <Delay_compute+0xc0>)
 8002556:	1a52      	subs	r2, r2, r1
 8002558:	f64e 205c 	movw	r0, #59996	; 0xea5c
 800255c:	4282      	cmp	r2, r0
 800255e:	dd01      	ble.n	8002564 <Delay_compute+0x74>
		writepos = delayline; // wrap pointer
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <Delay_compute+0xbc>)
 8002562:	6011      	str	r1, [r2, #0]

	if ((readpos - delayline) >= DELAYLINE_LEN)
 8002564:	1a5b      	subs	r3, r3, r1
 8002566:	f64e 225c 	movw	r2, #59996	; 0xea5c
 800256a:	4293      	cmp	r3, r2
 800256c:	dd02      	ble.n	8002574 <Delay_compute+0x84>
		readpos = delayline;  // wrap pointer
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <Delay_compute+0xa8>)
 8002570:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <Delay_compute+0xc0>)
 8002572:	601a      	str	r2, [r3, #0]

	return (wet * y + (1 - wet) * x);
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <Delay_compute+0xc4>)
 8002576:	edd3 6a00 	vldr	s13, [r3]
 800257a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002582:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002586:	ee27 0a00 	vmul.f32	s0, s14, s0

}
 800258a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800258e:	4770      	bx	lr
	y = (y < -1.0f) ? -1.0f : y ;
 8002590:	eef0 7a47 	vmov.f32	s15, s14
 8002594:	e7d6      	b.n	8002544 <Delay_compute+0x54>
 8002596:	bf00      	nop
 8002598:	200129d4 	.word	0x200129d4
 800259c:	3ecccccc 	.word	0x3ecccccc
 80025a0:	200129d0 	.word	0x200129d0
 80025a4:	3f19999a 	.word	0x3f19999a
 80025a8:	20000000 	.word	0x20000000
 80025ac:	200129d8 	.word	0x200129d8
 80025b0:	20003f68 	.word	0x20003f68
 80025b4:	20000004 	.word	0x20000004

080025b8 <drifter_newSegment>:
	}
}

/*-------------------------------------------------------------------------------------------*/
void drifter_newSegment(Drifter_t *d) //
{
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
	d->n = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	6183      	str	r3, [r0, #24]
	d->initial = d->final;
 80025c0:	6a03      	ldr	r3, [r0, #32]
 80025c2:	61c3      	str	r3, [r0, #28]
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 80025c4:	ed90 7a00 	vldr	s14, [r0]
 80025c8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002618 <drifter_newSegment+0x60>
 80025cc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80025d0:	ed80 0a03 	vstr	s0, [r0, #12]
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 80025d4:	ed90 7a01 	vldr	s14, [r0, #4]
 80025d8:	eec7 0a87 	vdiv.f32	s1, s15, s14
 80025dc:	edc0 0a04 	vstr	s1, [r0, #16]
	d->length = frand_a_b(d->minLength,d->maxLength);
 80025e0:	f000 fe7a 	bl	80032d8 <frand_a_b>
 80025e4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80025e8:	ed84 0a05 	vstr	s0, [r4, #20]
	d->final = frand_a_b(-1, 1);
 80025ec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80025f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80025f4:	f000 fe70 	bl	80032d8 <frand_a_b>
 80025f8:	ed84 0a08 	vstr	s0, [r4, #32]
	d->slope = (d->final - d->initial) / d->length ;
 80025fc:	edd4 7a07 	vldr	s15, [r4, #28]
 8002600:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002604:	edd4 7a05 	vldr	s15, [r4, #20]
 8002608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260c:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8002610:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 8002614:	bd10      	pop	{r4, pc}
 8002616:	bf00      	nop
 8002618:	46ac4400 	.word	0x46ac4400

0800261c <drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float drifter_nextSample(Drifter_t *d) //
{
 800261c:	b510      	push	{r4, lr}
 800261e:	4604      	mov	r4, r0
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002620:	ed90 7a02 	vldr	s14, [r0, #8]
 8002624:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
 8002628:	edd0 7a06 	vldr	s15, [r0, #24]
 800262c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002630:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002634:	edd0 6a07 	vldr	s13, [r0, #28]
 8002638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002640:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
	(d->n)++;
 8002644:	6983      	ldr	r3, [r0, #24]
 8002646:	3301      	adds	r3, #1
 8002648:	6183      	str	r3, [r0, #24]
	if (d->n >= d->length)
 800264a:	6942      	ldr	r2, [r0, #20]
 800264c:	4293      	cmp	r3, r2
 800264e:	d202      	bcs.n	8002656 <drifter_nextSample+0x3a>
		{
			drifter_newSegment(d);
		}
	return d->out;
}
 8002650:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8002654:	bd10      	pop	{r4, pc}
			drifter_newSegment(d);
 8002656:	f7ff ffaf 	bl	80025b8 <drifter_newSegment>
 800265a:	e7f9      	b.n	8002650 <drifter_nextSample+0x34>

0800265c <d1_drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float d1_drifter_nextSample(void) //
{
 800265c:	b508      	push	{r3, lr}
	return drifter_nextSample(&d1);
 800265e:	4802      	ldr	r0, [pc, #8]	; (8002668 <d1_drifter_nextSample+0xc>)
 8002660:	f7ff ffdc 	bl	800261c <drifter_nextSample>
}
 8002664:	bd08      	pop	{r3, pc}
 8002666:	bf00      	nop
 8002668:	20003d0c 	.word	0x20003d0c

0800266c <d2_drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float d2_drifter_nextSample(void) //
{
 800266c:	b508      	push	{r3, lr}
	return drifter_nextSample(&d2);
 800266e:	4802      	ldr	r0, [pc, #8]	; (8002678 <d2_drifter_nextSample+0xc>)
 8002670:	f7ff ffd4 	bl	800261c <drifter_nextSample>
}
 8002674:	bd08      	pop	{r3, pc}
 8002676:	bf00      	nop
 8002678:	20003ce0 	.word	0x20003ce0

0800267c <drifter_prepare>:
/*---------------------------------------------------------------------------------------------*/
void drifter_prepare(Drifter_t *d)
{
 800267c:	b508      	push	{r3, lr}
	d->final = 0;
 800267e:	2200      	movs	r2, #0
 8002680:	6202      	str	r2, [r0, #32]
	d->fmax = 4;
 8002682:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002686:	6002      	str	r2, [r0, #0]
	d->fmin = 2;
 8002688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800268c:	6042      	str	r2, [r0, #4]
	d->gain = .01f;
 800268e:	4a02      	ldr	r2, [pc, #8]	; (8002698 <drifter_prepare+0x1c>)
 8002690:	6082      	str	r2, [r0, #8]

	drifter_newSegment(d);
 8002692:	f7ff ff91 	bl	80025b8 <drifter_newSegment>
}
 8002696:	bd08      	pop	{r3, pc}
 8002698:	3c23d70a 	.word	0x3c23d70a

0800269c <drifter_init>:
/*---------------------------------------------------------------------------------------------*/
void drifter_init(void)
{
 800269c:	b510      	push	{r4, lr}
	drifter_prepare(&d1);
 800269e:	4c06      	ldr	r4, [pc, #24]	; (80026b8 <drifter_init+0x1c>)
 80026a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026a4:	f7ff ffea 	bl	800267c <drifter_prepare>
	drifter_prepare(&d2);
 80026a8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80026ac:	f7ff ffe6 	bl	800267c <drifter_prepare>
	drifter_prepare(&d3);
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff ffe3 	bl	800267c <drifter_prepare>
}
 80026b6:	bd10      	pop	{r4, pc}
 80026b8:	20003cb4 	.word	0x20003cb4

080026bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	2400      	movs	r4, #0
 80026c2:	9405      	str	r4, [sp, #20]
 80026c4:	9406      	str	r4, [sp, #24]
 80026c6:	9407      	str	r4, [sp, #28]
 80026c8:	9408      	str	r4, [sp, #32]
 80026ca:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026cc:	9401      	str	r4, [sp, #4]
 80026ce:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <MX_GPIO_Init+0xec>)
 80026d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
 80026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026da:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80026de:	9201      	str	r2, [sp, #4]
 80026e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	9402      	str	r4, [sp, #8]
 80026e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e6:	f042 0204 	orr.w	r2, r2, #4
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
 80026ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ee:	f002 0204 	and.w	r2, r2, #4
 80026f2:	9202      	str	r2, [sp, #8]
 80026f4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	9403      	str	r4, [sp, #12]
 80026f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002702:	f002 0201 	and.w	r2, r2, #1
 8002706:	9203      	str	r2, [sp, #12]
 8002708:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270a:	9404      	str	r4, [sp, #16]
 800270c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800270e:	f042 0202 	orr.w	r2, r2, #2
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	9304      	str	r3, [sp, #16]
 800271c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 800271e:	4d23      	ldr	r5, [pc, #140]	; (80027ac <MX_GPIO_Init+0xf0>)
 8002720:	4622      	mov	r2, r4
 8002722:	2114      	movs	r1, #20
 8002724:	4628      	mov	r0, r5
 8002726:	f002 fea2 	bl	800546e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800272a:	2314      	movs	r3, #20
 800272c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	2601      	movs	r6, #1
 8002730:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	eb0d 0103 	add.w	r1, sp, r3
 800273a:	4628      	mov	r0, r5
 800273c:	f002 fdac 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_BTN_Pin */
  GPIO_InitStruct.Pin = FIRE_BTN_Pin;
 8002740:	2320      	movs	r3, #32
 8002742:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002744:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(FIRE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002748:	a905      	add	r1, sp, #20
 800274a:	4628      	mov	r0, r5
 800274c:	f002 fda4 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pins : SND_SW1_Pin SND_SW2_Pin */
  GPIO_InitStruct.Pin = SND_SW1_Pin|SND_SW2_Pin;
 8002750:	23c0      	movs	r3, #192	; 0xc0
 8002752:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002754:	4f16      	ldr	r7, [pc, #88]	; (80027b0 <MX_GPIO_Init+0xf4>)
 8002756:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	a905      	add	r1, sp, #20
 800275c:	4628      	mov	r0, r5
 800275e:	f002 fd9b 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pins : SND_SW3_Pin SND_SW4_Pin */
  GPIO_InitStruct.Pin = SND_SW3_Pin|SND_SW4_Pin;
 8002762:	2330      	movs	r3, #48	; 0x30
 8002764:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002766:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276a:	a905      	add	r1, sp, #20
 800276c:	4811      	ldr	r0, [pc, #68]	; (80027b4 <MX_GPIO_Init+0xf8>)
 800276e:	f002 fd93 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pin : HOLD_SW_Pin */
  GPIO_InitStruct.Pin = HOLD_SW_Pin;
 8002772:	2304      	movs	r3, #4
 8002774:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002776:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002778:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(HOLD_SW_GPIO_Port, &GPIO_InitStruct);
 800277a:	a905      	add	r1, sp, #20
 800277c:	480e      	ldr	r0, [pc, #56]	; (80027b8 <MX_GPIO_Init+0xfc>)
 800277e:	f002 fd8b 	bl	8005298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002782:	4622      	mov	r2, r4
 8002784:	4621      	mov	r1, r4
 8002786:	200a      	movs	r0, #10
 8002788:	f002 fb28 	bl	8004ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800278c:	200a      	movs	r0, #10
 800278e:	f002 fb59 	bl	8004e44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002792:	4622      	mov	r2, r4
 8002794:	4621      	mov	r1, r4
 8002796:	2017      	movs	r0, #23
 8002798:	f002 fb20 	bl	8004ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800279c:	2017      	movs	r0, #23
 800279e:	f002 fb51 	bl	8004e44 <HAL_NVIC_EnableIRQ>

}
 80027a2:	b00b      	add	sp, #44	; 0x2c
 80027a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	10110000 	.word	0x10110000
 80027b4:	40020800 	.word	0x40020800
 80027b8:	40020400 	.word	0x40020400

080027bc <MX_DMA_Init>:
{
 80027bc:	b510      	push	{r4, lr}
 80027be:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027c0:	2400      	movs	r4, #0
 80027c2:	9400      	str	r4, [sp, #0]
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <MX_DMA_Init+0x54>)
 80027c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
 80027ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80027d4:	9200      	str	r2, [sp, #0]
 80027d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027d8:	9401      	str	r4, [sp, #4]
 80027da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027dc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80027ec:	4622      	mov	r2, r4
 80027ee:	4621      	mov	r1, r4
 80027f0:	200f      	movs	r0, #15
 80027f2:	f002 faf3 	bl	8004ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80027f6:	200f      	movs	r0, #15
 80027f8:	f002 fb24 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80027fc:	4622      	mov	r2, r4
 80027fe:	4621      	mov	r1, r4
 8002800:	2038      	movs	r0, #56	; 0x38
 8002802:	f002 faeb 	bl	8004ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002806:	2038      	movs	r0, #56	; 0x38
 8002808:	f002 fb1c 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 800280c:	b002      	add	sp, #8
 800280e:	bd10      	pop	{r4, pc}
 8002810:	40023800 	.word	0x40023800

08002814 <MX_ADC1_Init>:
{
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002818:	2500      	movs	r5, #0
 800281a:	9500      	str	r5, [sp, #0]
 800281c:	9501      	str	r5, [sp, #4]
 800281e:	9502      	str	r5, [sp, #8]
 8002820:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 8002822:	4c1c      	ldr	r4, [pc, #112]	; (8002894 <MX_ADC1_Init+0x80>)
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <MX_ADC1_Init+0x84>)
 8002826:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282c:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800282e:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002830:	2601      	movs	r6, #1
 8002832:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002834:	7626      	strb	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002836:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800283a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <MX_ADC1_Init+0x88>)
 800283e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002840:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002842:	2704      	movs	r7, #4
 8002844:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002846:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800284a:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800284c:	4620      	mov	r0, r4
 800284e:	f002 f8b3 	bl	80049b8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_10;
 8002852:	230a      	movs	r3, #10
 8002854:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8002856:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002858:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285a:	4669      	mov	r1, sp
 800285c:	4620      	mov	r0, r4
 800285e:	f002 f9e3 	bl	8004c28 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_11;
 8002862:	230b      	movs	r3, #11
 8002864:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8002866:	2302      	movs	r3, #2
 8002868:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800286a:	4669      	mov	r1, sp
 800286c:	4620      	mov	r0, r4
 800286e:	f002 f9db 	bl	8004c28 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_12;
 8002872:	230c      	movs	r3, #12
 8002874:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8002876:	2303      	movs	r3, #3
 8002878:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287a:	4669      	mov	r1, sp
 800287c:	4620      	mov	r0, r4
 800287e:	f002 f9d3 	bl	8004c28 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_13;
 8002882:	230d      	movs	r3, #13
 8002884:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8002886:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002888:	4669      	mov	r1, sp
 800288a:	4620      	mov	r0, r4
 800288c:	f002 f9cc 	bl	8004c28 <HAL_ADC_ConfigChannel>
}
 8002890:	b005      	add	sp, #20
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002894:	20013a38 	.word	0x20013a38
 8002898:	40012000 	.word	0x40012000
 800289c:	0f000001 	.word	0x0f000001

080028a0 <MX_I2C2_Init>:
{
 80028a0:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 80028a2:	4809      	ldr	r0, [pc, #36]	; (80028c8 <MX_I2C2_Init+0x28>)
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_I2C2_Init+0x2c>)
 80028a6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <MX_I2C2_Init+0x30>)
 80028aa:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028ac:	2300      	movs	r3, #0
 80028ae:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80028b0:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028b6:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b8:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80028ba:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028bc:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028be:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028c0:	f002 ff40 	bl	8005744 <HAL_I2C_Init>
}
 80028c4:	bd08      	pop	{r3, pc}
 80028c6:	bf00      	nop
 80028c8:	200139e4 	.word	0x200139e4
 80028cc:	40005800 	.word	0x40005800
 80028d0:	000186a0 	.word	0x000186a0

080028d4 <MX_I2S2_Init>:
{
 80028d4:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 80028d6:	480a      	ldr	r0, [pc, #40]	; (8002900 <MX_I2S2_Init+0x2c>)
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_I2S2_Init+0x30>)
 80028da:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80028dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e0:	6042      	str	r2, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80028e2:	2300      	movs	r3, #0
 80028e4:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80028e6:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80028e8:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80028ea:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80028ee:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80028f0:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80028f2:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80028f8:	f003 f8b8 	bl	8005a6c <HAL_I2S_Init>
}
 80028fc:	bd08      	pop	{r3, pc}
 80028fe:	bf00      	nop
 8002900:	20013b90 	.word	0x20013b90
 8002904:	40003800 	.word	0x40003800

08002908 <MX_USART1_UART_Init>:
{
 8002908:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800290a:	4808      	ldr	r0, [pc, #32]	; (800292c <MX_USART1_UART_Init+0x24>)
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_USART1_UART_Init+0x28>)
 800290e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002910:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002914:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	2300      	movs	r3, #0
 8002918:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800291a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800291c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800291e:	220c      	movs	r2, #12
 8002920:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002922:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002926:	f004 f959 	bl	8006bdc <HAL_UART_Init>
}
 800292a:	bd08      	pop	{r3, pc}
 800292c:	20013a80 	.word	0x20013a80
 8002930:	40011000 	.word	0x40011000

08002934 <MX_RNG_Init>:
{
 8002934:	b508      	push	{r3, lr}
  hrng.Instance = RNG;
 8002936:	4803      	ldr	r0, [pc, #12]	; (8002944 <MX_RNG_Init+0x10>)
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <MX_RNG_Init+0x14>)
 800293a:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800293c:	f004 f82a 	bl	8006994 <HAL_RNG_Init>
}
 8002940:	bd08      	pop	{r3, pc}
 8002942:	bf00      	nop
 8002944:	20013b20 	.word	0x20013b20
 8002948:	50060800 	.word	0x50060800

0800294c <SystemClock_Config>:
{
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002950:	2230      	movs	r2, #48	; 0x30
 8002952:	2100      	movs	r1, #0
 8002954:	eb0d 0002 	add.w	r0, sp, r2
 8002958:	f004 f9a8 	bl	8006cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800295c:	2400      	movs	r4, #0
 800295e:	9407      	str	r4, [sp, #28]
 8002960:	9408      	str	r4, [sp, #32]
 8002962:	9409      	str	r4, [sp, #36]	; 0x24
 8002964:	940a      	str	r4, [sp, #40]	; 0x28
 8002966:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002968:	9403      	str	r4, [sp, #12]
 800296a:	9404      	str	r4, [sp, #16]
 800296c:	9405      	str	r4, [sp, #20]
 800296e:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	9401      	str	r4, [sp, #4]
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <SystemClock_Config+0xac>)
 8002974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002976:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002986:	9402      	str	r4, [sp, #8]
 8002988:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <SystemClock_Config+0xb0>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002998:	9302      	str	r3, [sp, #8]
 800299a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800299c:	2601      	movs	r6, #1
 800299e:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029a6:	2502      	movs	r5, #2
 80029a8:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029ae:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80029b0:	2319      	movs	r3, #25
 80029b2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80029b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80029b8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029ba:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029bc:	2307      	movs	r3, #7
 80029be:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c0:	a80c      	add	r0, sp, #48	; 0x30
 80029c2:	f003 fbe3 	bl	800618c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c6:	230f      	movs	r3, #15
 80029c8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ca:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029cc:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029d2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029da:	2105      	movs	r1, #5
 80029dc:	a807      	add	r0, sp, #28
 80029de:	f003 fe1f 	bl	8006620 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80029e2:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 144;
 80029e4:	2390      	movs	r3, #144	; 0x90
 80029e6:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 80029e8:	2303      	movs	r3, #3
 80029ea:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ec:	a803      	add	r0, sp, #12
 80029ee:	f003 feed 	bl	80067cc <HAL_RCCEx_PeriphCLKConfig>
}
 80029f2:	b018      	add	sp, #96	; 0x60
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000

08002a00 <main>:
{
 8002a00:	b508      	push	{r3, lr}
  HAL_Init();
 8002a02:	f001 ff13 	bl	800482c <HAL_Init>
  SystemClock_Config();
 8002a06:	f7ff ffa1 	bl	800294c <SystemClock_Config>
  MX_GPIO_Init();
 8002a0a:	f7ff fe57 	bl	80026bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002a0e:	f7ff fed5 	bl	80027bc <MX_DMA_Init>
  MX_ADC1_Init();
 8002a12:	f7ff feff 	bl	8002814 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002a16:	f7ff ff43 	bl	80028a0 <MX_I2C2_Init>
  MX_I2S2_Init();
 8002a1a:	f7ff ff5b 	bl	80028d4 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8002a1e:	f7ff ff73 	bl	8002908 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8002a22:	f7ff ff87 	bl	8002934 <MX_RNG_Init>
  PS_Interface_Init();
 8002a26:	f7fe fb35 	bl	8001094 <PS_Interface_Init>
  Synth_Init();
 8002a2a:	f001 f911 	bl	8003c50 <Synth_Init>
  WM8731_Init();
 8002a2e:	f001 fe8b 	bl	8004748 <WM8731_Init>
    PS_Application();
 8002a32:	f7fe f9eb 	bl	8000e0c <PS_Application>
    PS_Interface_Loop();
 8002a36:	f7fe fadd 	bl	8000ff4 <PS_Interface_Loop>
 8002a3a:	e7fa      	b.n	8002a32 <main+0x32>

08002a3c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a3c:	4770      	bx	lr
	...

08002a40 <Lin2Exp>:
}
//------------------------------------------------------------------------------------
// input val in 0 ... 127
// output is an exponential between min and max
float	Lin2Exp(uint8_t val, float min, float max)
{
 8002a40:	b508      	push	{r3, lr}
 8002a42:	ed2d 8b02 	vpush	{d8}
 8002a46:	eeb0 8a40 	vmov.f32	s16, s0
	return min * powf(max / min, val / MIDI_MAX);
 8002a4a:	ee07 0a90 	vmov	s15, r0
 8002a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a52:	ee80 0a88 	vdiv.f32	s0, s1, s16
 8002a56:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002a6c <Lin2Exp+0x2c>
 8002a5a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8002a5e:	f004 fad1 	bl	8007004 <powf>
}
 8002a62:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002a66:	ecbd 8b02 	vpop	{d8}
 8002a6a:	bd08      	pop	{r3, pc}
 8002a6c:	42fe0000 	.word	0x42fe0000

08002a70 <tanhXdX>:
//------------------------------------------------------------------------------------

float tanhXdX(float x)
{
	float a = x*x;
 8002a70:	ee20 0a00 	vmul.f32	s0, s0, s0
	// IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)
	x = ((a + 105)*a + 945) / ((15*a + 420)*a + 945);
 8002a74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002aa8 <tanhXdX+0x38>
 8002a78:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002a7c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8002a80:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002aac <tanhXdX+0x3c>
 8002a84:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002a88:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002a8c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002a90:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8002ab0 <tanhXdX+0x40>
 8002a94:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002a98:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002a9c:	ee30 0a26 	vadd.f32	s0, s0, s13
	return x;
}
 8002aa0:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	42d20000 	.word	0x42d20000
 8002aac:	446c4000 	.word	0x446c4000
 8002ab0:	43d20000 	.word	0x43d20000

08002ab4 <fastTanh>:

//------------------------------------------------------------------------------------
float fastTanh(float var)
{
	if(var < -1.95f)     return -1.0f;
 8002ab4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002af8 <fastTanh+0x44>
 8002ab8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac0:	d413      	bmi.n	8002aea <fastTanh+0x36>
	else if(var > 1.95f) return  1.0f;
 8002ac2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8002afc <fastTanh+0x48>
 8002ac6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ace:	dc0f      	bgt.n	8002af0 <fastTanh+0x3c>
	else return  4.15f*var/(4.29f+var*var);
 8002ad0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b00 <fastTanh+0x4c>
 8002ad4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002ad8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002adc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002b04 <fastTanh+0x50>
 8002ae0:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002ae4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8002ae8:	4770      	bx	lr
	if(var < -1.95f)     return -1.0f;
 8002aea:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002aee:	4770      	bx	lr
	else if(var > 1.95f) return  1.0f;
 8002af0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	bff9999a 	.word	0xbff9999a
 8002afc:	3ff9999a 	.word	0x3ff9999a
 8002b00:	4084cccd 	.word	0x4084cccd
 8002b04:	408947ae 	.word	0x408947ae

08002b08 <softClipTwo>:
//------------------------------------------------------------------------------------
float 	softClipTwo(float in)
{
 8002b08:	b508      	push	{r3, lr}
 8002b0a:	ed2d 8b02 	vpush	{d8}
 8002b0e:	eeb0 8a40 	vmov.f32	s16, s0
	return in * tanhXdX(0.5*in);
 8002b12:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b16:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002b1a:	f7ff ffa9 	bl	8002a70 <tanhXdX>
}
 8002b1e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002b22:	ecbd 8b02 	vpop	{d8}
 8002b26:	bd08      	pop	{r3, pc}

08002b28 <fastTan>:
//------------------------------------------------------------------------------------
float 	fastTan(float x)
{
	float A = -15*x+x*x*x;
 8002b28:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002b2c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002b30:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002b34:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
	float B = 3*(-5+2*x*x);
 8002b3c:	ee70 7a00 	vadd.f32	s15, s0, s0
 8002b40:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002b44:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8002b48:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002b4c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8002b50:	ee20 0a27 	vmul.f32	s0, s0, s15
	return A/B;
}
 8002b54:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8002b58:	4770      	bx	lr

08002b5a <osc_init>:
/*===============================================================================================================*/

void
osc_init(Oscillator_t * op, float_t amp, float_t freq)
{
	op->amp = amp;
 8002b5a:	ed80 0a00 	vstr	s0, [r0]
	op->last_amp = amp;
 8002b5e:	ed80 0a01 	vstr	s0, [r0, #4]
	op->freq = freq;
 8002b62:	edc0 0a02 	vstr	s1, [r0, #8]
	op->phase = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60c3      	str	r3, [r0, #12]
	op->out = 0;
 8002b6a:	61c3      	str	r3, [r0, #28]
	op->modInd = 0;
 8002b6c:	6143      	str	r3, [r0, #20]
	op->mul = 1;
 8002b6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b72:	6183      	str	r3, [r0, #24]
}
 8002b74:	4770      	bx	lr

08002b76 <OpSetFreq>:
/*-------------------------------------------------------*/

void
OpSetFreq(Oscillator_t * op, float_t f)
{
	op->freq = f;
 8002b76:	ed80 0a02 	vstr	s0, [r0, #8]
}
 8002b7a:	4770      	bx	lr

08002b7c <FM_op_modInd_set>:
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
}
/*-------------------------------------------------------*/
void FM_op_modInd_set(Oscillator_t *op, uint8_t val)
{
	op->modInd = (1.4f * val / MIDI_MAX) * (1.4f * val / MIDI_MAX);
 8002b7c:	ee07 1a90 	vmov	s15, r1
 8002b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b84:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002ba0 <FM_op_modInd_set+0x24>
 8002b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b8c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002ba4 <FM_op_modInd_set+0x28>
 8002b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b98:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	3fb33333 	.word	0x3fb33333
 8002ba4:	42fe0000 	.word	0x42fe0000

08002ba8 <Osc_WT_SINE_SampleCompute>:
	op->phase += _2PI * Ts * op->freq; // increment phase
	return op->out;
}
/*-------------------------------------------------------*/
float_t Osc_WT_SINE_SampleCompute(Oscillator_t * op) // basic wave table sine
{
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	ed2d 8b02 	vpush	{d8}
 8002bae:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002bb0:	e005      	b.n	8002bbe <Osc_WT_SINE_SampleCompute+0x16>
		op->phase += _2PI;
 8002bb2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002c2c <Osc_WT_SINE_SampleCompute+0x84>
 8002bb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bba:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002bbe:	edd4 7a03 	vldr	s15, [r4, #12]
 8002bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bca:	d4f2      	bmi.n	8002bb2 <Osc_WT_SINE_SampleCompute+0xa>
 8002bcc:	e005      	b.n	8002bda <Osc_WT_SINE_SampleCompute+0x32>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 8002bce:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002c2c <Osc_WT_SINE_SampleCompute+0x84>
 8002bd2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002bd6:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase >= _2PI)
 8002bda:	edd4 7a03 	vldr	s15, [r4, #12]
 8002bde:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002c2c <Osc_WT_SINE_SampleCompute+0x84>
 8002be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bea:	daf0      	bge.n	8002bce <Osc_WT_SINE_SampleCompute+0x26>

	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002bec:	ed94 8a00 	vldr	s16, [r4]
 8002bf0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002c30 <Osc_WT_SINE_SampleCompute+0x88>
 8002bf4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002bf8:	f004 f95a 	bl	8006eb0 <lrintf>
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <Osc_WT_SINE_SampleCompute+0x8c>)
 8002bfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c02:	ed90 0a00 	vldr	s0, [r0]
 8002c06:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002c0a:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002c0e:	edd4 7a02 	vldr	s15, [r4, #8]
 8002c12:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002c38 <Osc_WT_SINE_SampleCompute+0x90>
 8002c16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c1a:	edd4 7a03 	vldr	s15, [r4, #12]
 8002c1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c22:	edc4 7a03 	vstr	s15, [r4, #12]

	return op->out;
}
 8002c26:	ecbd 8b02 	vpop	{d8}
 8002c2a:	bd10      	pop	{r4, pc}
 8002c2c:	40c90fdb 	.word	0x40c90fdb
 8002c30:	4322f983 	.word	0x4322f983
 8002c34:	080153b4 	.word	0x080153b4
 8002c38:	39156592 	.word	0x39156592

08002c3c <OpSampleCompute7bis>:
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
	return op->out;
}
/*-------------------------------------------------------*/
float_t OpSampleCompute7bis(Oscillator_t * op) // basic wave table positive sine : 0 < output < op.amp
{
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	ed2d 8b02 	vpush	{d8}
 8002c42:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002c44:	e005      	b.n	8002c52 <OpSampleCompute7bis+0x16>
		op->phase += _2PI;
 8002c46:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002cd0 <OpSampleCompute7bis+0x94>
 8002c4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c4e:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002c52:	edd4 7a03 	vldr	s15, [r4, #12]
 8002c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d4f2      	bmi.n	8002c46 <OpSampleCompute7bis+0xa>
 8002c60:	e005      	b.n	8002c6e <OpSampleCompute7bis+0x32>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 8002c62:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8002cd0 <OpSampleCompute7bis+0x94>
 8002c66:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002c6a:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase >= _2PI)
 8002c6e:	edd4 7a03 	vldr	s15, [r4, #12]
 8002c72:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002cd0 <OpSampleCompute7bis+0x94>
 8002c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	daf0      	bge.n	8002c62 <OpSampleCompute7bis+0x26>

	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8002c80:	ed94 0a00 	vldr	s0, [r4]
 8002c84:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8002c88:	ee20 8a08 	vmul.f32	s16, s0, s16
 8002c8c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002cd4 <OpSampleCompute7bis+0x98>
 8002c90:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c94:	f004 f90c 	bl	8006eb0 <lrintf>
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <OpSampleCompute7bis+0x9c>)
 8002c9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c9e:	ed90 0a00 	vldr	s0, [r0]
 8002ca2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002ca6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002caa:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002cae:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002cb2:	edd4 7a02 	vldr	s15, [r4, #8]
 8002cb6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002cdc <OpSampleCompute7bis+0xa0>
 8002cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cbe:	edd4 7a03 	vldr	s15, [r4, #12]
 8002cc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cc6:	edc4 7a03 	vstr	s15, [r4, #12]

	return op->out;
}
 8002cca:	ecbd 8b02 	vpop	{d8}
 8002cce:	bd10      	pop	{r4, pc}
 8002cd0:	40c90fdb 	.word	0x40c90fdb
 8002cd4:	4322f983 	.word	0x4322f983
 8002cd8:	080153b4 	.word	0x080153b4
 8002cdc:	39156592 	.word	0x39156592

08002ce0 <MorphingSaw_SampleCompute>:
	return op->out;
}
/*-------------------------------------------------------*/
float_t MorphingSaw_SampleCompute(Oscillator_t * op) // Morphing sawtooth, tends to a triangle at high freqs
{
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002ce0:	e005      	b.n	8002cee <MorphingSaw_SampleCompute+0xe>
		op->phase += _2PI;
 8002ce2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002dc0 <MorphingSaw_SampleCompute+0xe0>
 8002ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cea:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002cee:	edd0 7a03 	vldr	s15, [r0, #12]
 8002cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	d4f2      	bmi.n	8002ce2 <MorphingSaw_SampleCompute+0x2>
 8002cfc:	e005      	b.n	8002d0a <MorphingSaw_SampleCompute+0x2a>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 8002cfe:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002dc0 <MorphingSaw_SampleCompute+0xe0>
 8002d02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d06:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase >= _2PI)
 8002d0a:	edd0 7a03 	vldr	s15, [r0, #12]
 8002d0e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002dc0 <MorphingSaw_SampleCompute+0xe0>
 8002d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	daf0      	bge.n	8002cfe <MorphingSaw_SampleCompute+0x1e>

	if (op->freq < 8000) op->phi0 = _PI/8000*(op->freq); else op->phi0 = _PI;
 8002d1c:	ed90 7a02 	vldr	s14, [r0, #8]
 8002d20:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002dc4 <MorphingSaw_SampleCompute+0xe4>
 8002d24:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d534      	bpl.n	8002d98 <MorphingSaw_SampleCompute+0xb8>
 8002d2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002dc8 <MorphingSaw_SampleCompute+0xe8>
 8002d32:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002d36:	edc0 6a04 	vstr	s13, [r0, #16]
	if (op->phi0 <= .0001f) op->phi0 = .0001f;
 8002d3a:	ed90 6a04 	vldr	s12, [r0, #16]
 8002d3e:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002dcc <MorphingSaw_SampleCompute+0xec>
 8002d42:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4a:	d801      	bhi.n	8002d50 <MorphingSaw_SampleCompute+0x70>
 8002d4c:	edc0 6a04 	vstr	s13, [r0, #16]
	if (op->phase < op->phi0) op->out = op->amp * (-2/op->phi0 * op->phase + 1);
 8002d50:	edd0 6a04 	vldr	s13, [r0, #16]
 8002d54:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	d41f      	bmi.n	8002d9e <MorphingSaw_SampleCompute+0xbe>
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);
 8002d5e:	ed90 5a00 	vldr	s10, [r0]
 8002d62:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002d66:	eddf 5a16 	vldr	s11, [pc, #88]	; 8002dc0 <MorphingSaw_SampleCompute+0xe0>
 8002d6a:	ee36 6a65 	vsub.f32	s12, s12, s11
 8002d6e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002d72:	ee25 6a06 	vmul.f32	s12, s10, s12
 8002d76:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8002d7a:	eec6 5a26 	vdiv.f32	s11, s12, s13
 8002d7e:	edc0 5a07 	vstr	s11, [r0, #28]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002d82:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002dd0 <MorphingSaw_SampleCompute+0xf0>
 8002d86:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002d8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d8e:	edc0 7a03 	vstr	s15, [r0, #12]
	return op->out;
}
 8002d92:	ed90 0a07 	vldr	s0, [r0, #28]
 8002d96:	4770      	bx	lr
	if (op->freq < 8000) op->phi0 = _PI/8000*(op->freq); else op->phi0 = _PI;
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <MorphingSaw_SampleCompute+0xf4>)
 8002d9a:	6103      	str	r3, [r0, #16]
 8002d9c:	e7cd      	b.n	8002d3a <MorphingSaw_SampleCompute+0x5a>
	if (op->phase < op->phi0) op->out = op->amp * (-2/op->phi0 * op->phase + 1);
 8002d9e:	edd0 5a00 	vldr	s11, [r0]
 8002da2:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 8002da6:	ee85 6a26 	vdiv.f32	s12, s10, s13
 8002daa:	ee67 6a86 	vmul.f32	s13, s15, s12
 8002dae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002db2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002db6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002dba:	edc0 6a07 	vstr	s13, [r0, #28]
 8002dbe:	e7e0      	b.n	8002d82 <MorphingSaw_SampleCompute+0xa2>
 8002dc0:	40c90fdb 	.word	0x40c90fdb
 8002dc4:	45fa0000 	.word	0x45fa0000
 8002dc8:	39cde32e 	.word	0x39cde32e
 8002dcc:	38d1b717 	.word	0x38d1b717
 8002dd0:	39156592 	.word	0x39156592
 8002dd4:	40490fdb 	.word	0x40490fdb

08002dd8 <AdditiveGen_newWaveform>:
	op->phase += _2PI * Ts * op->freq; // increment phase
	return op->out;
}
/*-------------------------------------------------------*/
void AdditiveGen_newWaveform(void) //
{
 8002dd8:	b510      	push	{r4, lr}
	uint8_t k;

	a[0] = a[1] = 1;
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <AdditiveGen_newWaveform+0x64>)
 8002ddc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	ph[0] = ph[1] = 0;
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002dee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8002df2:	2402      	movs	r4, #2
 8002df4:	e015      	b.n	8002e22 <AdditiveGen_newWaveform+0x4a>
	{
		a[k] = frand_a_b(0.001f , 0.98f);
 8002df6:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002e40 <AdditiveGen_newWaveform+0x68>
 8002dfa:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002e44 <AdditiveGen_newWaveform+0x6c>
 8002dfe:	f000 fa6b 	bl	80032d8 <frand_a_b>
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <AdditiveGen_newWaveform+0x64>)
 8002e04:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8002e08:	ed82 0a20 	vstr	s0, [r2, #128]	; 0x80
		a[0] += a[k];
 8002e0c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002e10:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002e14:	ed83 0a20 	vstr	s0, [r3, #128]	; 0x80
		ph[k] = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8002e1e:	3401      	adds	r4, #1
 8002e20:	b2e4      	uxtb	r4, r4
 8002e22:	2c0a      	cmp	r4, #10
 8002e24:	d9e7      	bls.n	8002df6 <AdditiveGen_newWaveform+0x1e>
	}
	a[0] = 1.f / a[0];
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <AdditiveGen_newWaveform+0x64>)
 8002e28:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e34:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20003d38 	.word	0x20003d38
 8002e40:	3f7ae148 	.word	0x3f7ae148
 8002e44:	3a83126f 	.word	0x3a83126f

08002e48 <AdditiveGen_SampleCompute>:
/*-------------------------------------------------------*/
float_t AdditiveGen_SampleCompute(Oscillator_t * op) // additive sine generator
{
 8002e48:	b410      	push	{r4}
	uint8_t k = 1;
	float_t y = 0;
 8002e4a:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8002f08 <AdditiveGen_SampleCompute+0xc0>
	uint8_t k = 1;
 8002e4e:	2101      	movs	r1, #1

	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8002e50:	e039      	b.n	8002ec6 <AdditiveGen_SampleCompute+0x7e>
	{
		//while (ph[k] < 0) // keep phase in [0, 2pi]
		//	ph[k] += _2PI;
		while (ph[k] >= _2PI)
			ph[k] -= _2PI;
 8002e52:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <AdditiveGen_SampleCompute+0xc4>)
 8002e54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002e58:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002f10 <AdditiveGen_SampleCompute+0xc8>
 8002e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e60:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		while (ph[k] >= _2PI)
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <AdditiveGen_SampleCompute+0xc4>)
 8002e66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002e6a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8002e6e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002f10 <AdditiveGen_SampleCompute+0xc8>
 8002e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	daea      	bge.n	8002e52 <AdditiveGen_SampleCompute+0xa>
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <AdditiveGen_SampleCompute+0xc4>)
 8002e7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002e82:	ed92 6a20 	vldr	s12, [r2, #128]	; 0x80
 8002e86:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f14 <AdditiveGen_SampleCompute+0xcc>
 8002e8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e8e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002e92:	ee17 3a10 	vmov	r3, s14
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4c1f      	ldr	r4, [pc, #124]	; (8002f18 <AdditiveGen_SampleCompute+0xd0>)
 8002e9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002e9e:	ed93 7a00 	vldr	s14, [r3]
 8002ea2:	ee26 7a07 	vmul.f32	s14, s12, s14
 8002ea6:	ee75 5a87 	vadd.f32	s11, s11, s14
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 8002eaa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f1c <AdditiveGen_SampleCompute+0xd4>
 8002eae:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002eb2:	ed90 7a02 	vldr	s14, [r0, #8]
 8002eb6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ebe:	edc2 7a2b 	vstr	s15, [r2, #172]	; 0xac
		k++;
 8002ec2:	3101      	adds	r1, #1
 8002ec4:	b2c9      	uxtb	r1, r1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8002ec6:	290a      	cmp	r1, #10
 8002ec8:	d80f      	bhi.n	8002eea <AdditiveGen_SampleCompute+0xa2>
 8002eca:	460a      	mov	r2, r1
 8002ecc:	ee07 1a90 	vmov	s15, r1
 8002ed0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ed4:	edd0 7a02 	vldr	s15, [r0, #8]
 8002ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002edc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002f20 <AdditiveGen_SampleCompute+0xd8>
 8002ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	d4bc      	bmi.n	8002e64 <AdditiveGen_SampleCompute+0x1c>
	}
	y = a[0] * y;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <AdditiveGen_SampleCompute+0xc4>)
 8002eec:	ed93 0a20 	vldr	s0, [r3, #128]	; 0x80
 8002ef0:	ee60 5a25 	vmul.f32	s11, s0, s11

	op->out = op->amp * y;
 8002ef4:	ed90 0a00 	vldr	s0, [r0]
 8002ef8:	ee20 0a25 	vmul.f32	s0, s0, s11
 8002efc:	ed80 0a07 	vstr	s0, [r0, #28]

	return op->out;
}
 8002f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	20003d38 	.word	0x20003d38
 8002f10:	40c90fdb 	.word	0x40c90fdb
 8002f14:	4322f983 	.word	0x4322f983
 8002f18:	080153b4 	.word	0x080153b4
 8002f1c:	39156592 	.word	0x39156592
 8002f20:	46ac4400 	.word	0x46ac4400

08002f24 <waveCompute>:

/*-------------------------------------------------------------------------------------------------------------------*/

float waveCompute(uint8_t sound, float frq)
{
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	ed2d 8b02 	vpush	{d8}
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	eeb0 8a40 	vmov.f32	s16, s0
	float y;

	OpSetFreq(&op1, frq);
 8002f30:	4859      	ldr	r0, [pc, #356]	; (8003098 <waveCompute+0x174>)
 8002f32:	f7ff fe20 	bl	8002b76 <OpSetFreq>


	/* choose waveform generator */
	switch (sound)
 8002f36:	2c07      	cmp	r4, #7
 8002f38:	f200 80aa 	bhi.w	8003090 <waveCompute+0x16c>
 8002f3c:	e8df f004 	tbb	[pc, r4]
 8002f40:	1e0c0412 	.word	0x1e0c0412
 8002f44:	7a522a1a 	.word	0x7a522a1a

	// case ACC_SINE : 		y = 0.8 * OpSampleCompute0(&op1); 		break;

	// case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;

	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 8002f48:	4854      	ldr	r0, [pc, #336]	; (800309c <waveCompute+0x178>)
 8002f4a:	ed80 8a03 	vstr	s16, [r0, #12]
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;
 8002f4e:	f7fe fd1b 	bl	8001988 <VCO_bleptri_SampleCompute>
		y = 0;	break ;

	}

	return y;
}
 8002f52:	ecbd 8b02 	vpop	{d8}
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 8002f58:	4851      	ldr	r0, [pc, #324]	; (80030a0 <waveCompute+0x17c>)
 8002f5a:	ed80 8a03 	vstr	s16, [r0, #12]
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;
 8002f5e:	f7fe faf7 	bl	8001550 <VCO_bleprect_SampleCompute>
 8002f62:	e7f6      	b.n	8002f52 <waveCompute+0x2e>
	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 8002f64:	484c      	ldr	r0, [pc, #304]	; (8003098 <waveCompute+0x174>)
 8002f66:	f7ff fe1f 	bl	8002ba8 <Osc_WT_SINE_SampleCompute>
 8002f6a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80030a4 <waveCompute+0x180>
 8002f6e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002f72:	e7ee      	b.n	8002f52 <waveCompute+0x2e>
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 8002f74:	4848      	ldr	r0, [pc, #288]	; (8003098 <waveCompute+0x174>)
 8002f76:	f7ff ff67 	bl	8002e48 <AdditiveGen_SampleCompute>
 8002f7a:	e7ea      	b.n	8002f52 <waveCompute+0x2e>
	case NOISE : 			y = op1.amp * frand_a_b(-.8f , .8f);	break; // noise !
 8002f7c:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <waveCompute+0x184>)
 8002f7e:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8002f82:	eddf 0a48 	vldr	s1, [pc, #288]	; 80030a4 <waveCompute+0x180>
 8002f86:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80030ac <waveCompute+0x188>
 8002f8a:	f000 f9a5 	bl	80032d8 <frand_a_b>
 8002f8e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002f92:	e7de      	b.n	8002f52 <waveCompute+0x2e>
		OpSetFreq(&op2, frq * 1.26f);
 8002f94:	4c44      	ldr	r4, [pc, #272]	; (80030a8 <waveCompute+0x184>)
 8002f96:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8002f9a:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80030b0 <waveCompute+0x18c>
 8002f9e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f7ff fde7 	bl	8002b76 <OpSetFreq>
		OpSetFreq(&op3, frq * 1.5f);
 8002fa8:	f104 0520 	add.w	r5, r4, #32
 8002fac:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8002fb0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f7ff fdde 	bl	8002b76 <OpSetFreq>
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8002fba:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8002fbe:	f7ff fe8f 	bl	8002ce0 <MorphingSaw_SampleCompute>
 8002fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8002fc6:	4630      	mov	r0, r6
 8002fc8:	f7ff fe8a 	bl	8002ce0 <MorphingSaw_SampleCompute>
 8002fcc:	ee38 8a00 	vadd.f32	s16, s16, s0
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f7ff fe85 	bl	8002ce0 <MorphingSaw_SampleCompute>
 8002fd6:	ee38 0a00 	vadd.f32	s0, s16, s0
 8002fda:	eddf 7a36 	vldr	s15, [pc, #216]	; 80030b4 <waveCompute+0x190>
 8002fde:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 8002fe2:	e7b6      	b.n	8002f52 <waveCompute+0x2e>
		OpSetFreq(&op2, frq * 1.1892f);
 8002fe4:	4c30      	ldr	r4, [pc, #192]	; (80030a8 <waveCompute+0x184>)
 8002fe6:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8002fea:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80030b8 <waveCompute+0x194>
 8002fee:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f7ff fdbf 	bl	8002b76 <OpSetFreq>
		OpSetFreq(&op3, frq * 1.5f);
 8002ff8:	f104 0520 	add.w	r5, r4, #32
 8002ffc:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8003000:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003004:	4628      	mov	r0, r5
 8003006:	f7ff fdb6 	bl	8002b76 <OpSetFreq>
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800300a:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800300e:	f7ff fe67 	bl	8002ce0 <MorphingSaw_SampleCompute>
 8003012:	eeb0 8a40 	vmov.f32	s16, s0
 8003016:	4630      	mov	r0, r6
 8003018:	f7ff fe62 	bl	8002ce0 <MorphingSaw_SampleCompute>
 800301c:	ee38 8a00 	vadd.f32	s16, s16, s0
 8003020:	4628      	mov	r0, r5
 8003022:	f7ff fe5d 	bl	8002ce0 <MorphingSaw_SampleCompute>
 8003026:	ee38 0a00 	vadd.f32	s0, s16, s0
 800302a:	eddf 7a22 	vldr	s15, [pc, #136]	; 80030b4 <waveCompute+0x190>
 800302e:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 8003032:	e78e      	b.n	8002f52 <waveCompute+0x2e>
		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
 8003034:	f7ff fb12 	bl	800265c <d1_drifter_nextSample>
 8003038:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800303c:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003040:	4c19      	ldr	r4, [pc, #100]	; (80030a8 <waveCompute+0x184>)
 8003042:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8003046:	ee20 0a08 	vmul.f32	s0, s0, s16
 800304a:	4630      	mov	r0, r6
 800304c:	f7ff fd93 	bl	8002b76 <OpSetFreq>
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 8003050:	f7ff fb0c 	bl	800266c <d2_drifter_nextSample>
 8003054:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003058:	f104 0520 	add.w	r5, r4, #32
 800305c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003060:	4628      	mov	r0, r5
 8003062:	f7ff fd88 	bl	8002b76 <OpSetFreq>
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003066:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800306a:	f7ff fe39 	bl	8002ce0 <MorphingSaw_SampleCompute>
 800306e:	eeb0 8a40 	vmov.f32	s16, s0
 8003072:	4630      	mov	r0, r6
 8003074:	f7ff fe34 	bl	8002ce0 <MorphingSaw_SampleCompute>
 8003078:	ee38 8a00 	vadd.f32	s16, s16, s0
 800307c:	4628      	mov	r0, r5
 800307e:	f7ff fe2f 	bl	8002ce0 <MorphingSaw_SampleCompute>
 8003082:	ee38 0a00 	vadd.f32	s0, s16, s0
 8003086:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80030b4 <waveCompute+0x190>
 800308a:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 800308e:	e760      	b.n	8002f52 <waveCompute+0x2e>
		y = 0;	break ;
 8003090:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80030bc <waveCompute+0x198>
	return y;
 8003094:	e75d      	b.n	8002f52 <waveCompute+0x2e>
 8003096:	bf00      	nop
 8003098:	20003d98 	.word	0x20003d98
 800309c:	200000a4 	.word	0x200000a4
 80030a0:	200005fc 	.word	0x200005fc
 80030a4:	3f4ccccd 	.word	0x3f4ccccd
 80030a8:	20003d38 	.word	0x20003d38
 80030ac:	bf4ccccd 	.word	0xbf4ccccd
 80030b0:	3fa147ae 	.word	0x3fa147ae
 80030b4:	3ea8f5c3 	.word	0x3ea8f5c3
 80030b8:	3f9837b5 	.word	0x3f9837b5
 80030bc:	00000000 	.word	0x00000000

080030c0 <allpass>:
/*---------------------------------------------------------------------*/
static float allpass(float yin, int ind)
{
	float yout;

	yout = - yin * a1 + old[ind];
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <allpass+0x2c>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	ee20 7a67 	vnmul.f32	s14, s0, s15
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <allpass+0x30>)
 80030cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80030d0:	edd0 6a00 	vldr	s13, [r0]
 80030d4:	ee37 7a26 	vadd.f32	s14, s14, s13
	old[ind] = yout * a1 + yin;
 80030d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030dc:	ee77 7a80 	vadd.f32	s15, s15, s0
 80030e0:	edc0 7a00 	vstr	s15, [r0]
	return yout;
}
 80030e4:	eeb0 0a47 	vmov.f32	s0, s14
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	200129e0 	.word	0x200129e0
 80030f0:	200129f8 	.word	0x200129f8

080030f4 <PhaserInit>:
	fb = 0.7f;
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <PhaserInit+0x20>)
 80030f6:	4a08      	ldr	r2, [pc, #32]	; (8003118 <PhaserInit+0x24>)
 80030f8:	601a      	str	r2, [r3, #0]
	wet = 0.3f;
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <PhaserInit+0x28>)
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <PhaserInit+0x2c>)
 80030fe:	601a      	str	r2, [r3, #0]
	dmin = 2 * f_min / SAMPLERATE;
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <PhaserInit+0x30>)
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <PhaserInit+0x34>)
 8003104:	601a      	str	r2, [r3, #0]
	dmax = 2 * f_max / SAMPLERATE;
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <PhaserInit+0x38>)
 8003108:	4a09      	ldr	r2, [pc, #36]	; (8003130 <PhaserInit+0x3c>)
 800310a:	601a      	str	r2, [r3, #0]
	lfoInc = _2PI * swrate / SAMPLERATE;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <PhaserInit+0x40>)
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <PhaserInit+0x44>)
 8003110:	601a      	str	r2, [r3, #0]
}
 8003112:	4770      	bx	lr
 8003114:	200129ec 	.word	0x200129ec
 8003118:	3f333333 	.word	0x3f333333
 800311c:	20012a10 	.word	0x20012a10
 8003120:	3e99999a 	.word	0x3e99999a
 8003124:	200129e8 	.word	0x200129e8
 8003128:	3c149b93 	.word	0x3c149b93
 800312c:	200129e4 	.word	0x200129e4
 8003130:	3d9de54c 	.word	0x3d9de54c
 8003134:	200129f0 	.word	0x200129f0
 8003138:	376f08eb 	.word	0x376f08eb

0800313c <Phaser_Rate_set>:
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 800313c:	ee07 0a90 	vmov	s15, r0
 8003140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003144:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800316c <Phaser_Rate_set+0x30>
 8003148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800314c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003170 <Phaser_Rate_set+0x34>
 8003150:	ee77 7a87 	vadd.f32	s15, s15, s14
	lfoInc = _2PI * swrate / SAMPLERATE;
 8003154:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003174 <Phaser_Rate_set+0x38>
 8003158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800315c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003178 <Phaser_Rate_set+0x3c>
 8003160:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <Phaser_Rate_set+0x40>)
 8003166:	ed83 7a00 	vstr	s14, [r3]
}
 800316a:	4770      	bx	lr
 800316c:	3d611e66 	.word	0x3d611e66
 8003170:	3ca3d70a 	.word	0x3ca3d70a
 8003174:	40c90fdb 	.word	0x40c90fdb
 8003178:	472c4400 	.word	0x472c4400
 800317c:	200129f0 	.word	0x200129f0

08003180 <Phaser_Feedback_set>:
	fb = 0.999f * val / MIDI_MAX;
 8003180:	ee07 0a90 	vmov	s15, r0
 8003184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003188:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80031a0 <Phaser_Feedback_set+0x20>
 800318c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003190:	eddf 6a04 	vldr	s13, [pc, #16]	; 80031a4 <Phaser_Feedback_set+0x24>
 8003194:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <Phaser_Feedback_set+0x28>)
 800319a:	ed83 7a00 	vstr	s14, [r3]
}
 800319e:	4770      	bx	lr
 80031a0:	3f7fbe77 	.word	0x3f7fbe77
 80031a4:	42fe0000 	.word	0x42fe0000
 80031a8:	200129ec 	.word	0x200129ec

080031ac <Phaser_Wet_set>:
	wet = val / MIDI_MAX;
 80031ac:	ee07 0a90 	vmov	s15, r0
 80031b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031b4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80031c4 <Phaser_Wet_set+0x18>
 80031b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <Phaser_Wet_set+0x1c>)
 80031be:	edc3 7a00 	vstr	s15, [r3]
}
 80031c2:	4770      	bx	lr
 80031c4:	42fe0000 	.word	0x42fe0000
 80031c8:	20012a10 	.word	0x20012a10

080031cc <Phaser_compute>:

/*---------------------------------------------------------------------*/
float Phaser_compute(float xin)
{
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	ed2d 8b02 	vpush	{d8}
 80031d2:	eef0 8a40 	vmov.f32	s17, s0
	int i;
	float d;

	//calculate and update phaser sweep lfo...

	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80031d6:	4d35      	ldr	r5, [pc, #212]	; (80032ac <Phaser_compute+0xe0>)
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <Phaser_compute+0xe4>)
 80031da:	ed93 8a00 	vldr	s16, [r3]
 80031de:	edd5 7a00 	vldr	s15, [r5]
 80031e2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80031e6:	4c33      	ldr	r4, [pc, #204]	; (80032b4 <Phaser_compute+0xe8>)
 80031e8:	ed94 0a00 	vldr	s0, [r4]
 80031ec:	eddf 7a32 	vldr	s15, [pc, #200]	; 80032b8 <Phaser_compute+0xec>
 80031f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80031f4:	f003 fe5c 	bl	8006eb0 <lrintf>
 80031f8:	4b30      	ldr	r3, [pc, #192]	; (80032bc <Phaser_compute+0xf0>)
 80031fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80031fe:	edd0 7a00 	vldr	s15, [r0]
 8003202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800320a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800320e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003212:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003216:	ed95 7a00 	vldr	s14, [r5]
 800321a:	ee77 7a87 	vadd.f32	s15, s15, s14

	lfoPhase += lfoInc;
 800321e:	ed94 7a00 	vldr	s14, [r4]
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <Phaser_compute+0xf4>)
 8003224:	edd3 6a00 	vldr	s13, [r3]
 8003228:	ee37 7a26 	vadd.f32	s14, s14, s13
 800322c:	ed84 7a00 	vstr	s14, [r4]
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003230:	eddf 6a24 	vldr	s13, [pc, #144]	; 80032c4 <Phaser_compute+0xf8>
 8003234:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	db03      	blt.n	8003246 <Phaser_compute+0x7a>
 800323e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003242:	ed84 7a00 	vstr	s14, [r4]

	//update filter coeffs
	a1 = (1.f - d) / (1.f + d);
 8003246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800324a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800324e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <Phaser_compute+0xfc>)
 8003258:	ed83 7a00 	vstr	s14, [r3]

	//calculate output

	yout = allpass(xin + zm1 * fb, 0);
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <Phaser_compute+0x100>)
 800325e:	ed93 0a00 	vldr	s0, [r3]
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <Phaser_compute+0x104>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	ee20 0a27 	vmul.f32	s0, s0, s15
 800326c:	2000      	movs	r0, #0
 800326e:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003272:	f7ff ff25 	bl	80030c0 <allpass>

	for(i = 1; i < PH_STAGES; i++)
 8003276:	2401      	movs	r4, #1
 8003278:	e003      	b.n	8003282 <Phaser_compute+0xb6>
	{
		yout = allpass(yout, i);
 800327a:	4620      	mov	r0, r4
 800327c:	f7ff ff20 	bl	80030c0 <allpass>
	for(i = 1; i < PH_STAGES; i++)
 8003280:	3401      	adds	r4, #1
 8003282:	2c05      	cmp	r4, #5
 8003284:	ddf9      	ble.n	800327a <Phaser_compute+0xae>
	}
	zm1 = yout;
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <Phaser_compute+0x100>)
 8003288:	ed83 0a00 	vstr	s0, [r3]

	yout = (1 - wet) * xin + wet * yout;
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <Phaser_compute+0x108>)
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003296:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800329a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800329e:	ee27 0a00 	vmul.f32	s0, s14, s0

	return yout;
}
 80032a2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80032a6:	ecbd 8b02 	vpop	{d8}
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
 80032ac:	200129e8 	.word	0x200129e8
 80032b0:	200129e4 	.word	0x200129e4
 80032b4:	200129f4 	.word	0x200129f4
 80032b8:	4322f983 	.word	0x4322f983
 80032bc:	080153b4 	.word	0x080153b4
 80032c0:	200129f0 	.word	0x200129f0
 80032c4:	40c90fdb 	.word	0x40c90fdb
 80032c8:	200129e0 	.word	0x200129e0
 80032cc:	20012a14 	.word	0x20012a14
 80032d0:	200129ec 	.word	0x200129ec
 80032d4:	20012a10 	.word	0x20012a10

080032d8 <frand_a_b>:
//---------------------------------------------------------------------------
/**************
 * returns a random float between a and b
 *****************/
float_t frand_a_b(float_t a, float_t b)
{
 80032d8:	b508      	push	{r3, lr}
 80032da:	ed2d 8b02 	vpush	{d8}
 80032de:	eef0 8a40 	vmov.f32	s17, s0
 80032e2:	eeb0 8a60 	vmov.f32	s16, s1
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 80032e6:	f003 fce9 	bl	8006cbc <rand>
 80032ea:	ee07 0a90 	vmov	s15, r0
 80032ee:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80032f2:	eddf 7a06 	vldr	s15, [pc, #24]	; 800330c <frand_a_b+0x34>
 80032f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80032fa:	ee38 8a68 	vsub.f32	s16, s16, s17
 80032fe:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 8003302:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003306:	ecbd 8b02 	vpop	{d8}
 800330a:	bd08      	pop	{r3, pc}
 800330c:	30000000 	.word	0x30000000

08003310 <MIDIrandVal>:
/*-----------------------------------------------------------------------------*/
/**************
 * returns a random integer between 0 and MIDI_MAX
 *****************/
uint8_t MIDIrandVal(void)
{
 8003310:	b508      	push	{r3, lr}
	return (uint8_t)lrintf(frand_a_b(0 , MIDI_MAX));
 8003312:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003328 <MIDIrandVal+0x18>
 8003316:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800332c <MIDIrandVal+0x1c>
 800331a:	f7ff ffdd 	bl	80032d8 <frand_a_b>
 800331e:	f003 fdc7 	bl	8006eb0 <lrintf>
}
 8003322:	b2c0      	uxtb	r0, r0
 8003324:	bd08      	pop	{r3, pc}
 8003326:	bf00      	nop
 8003328:	42fe0000 	.word	0x42fe0000
 800332c:	00000000 	.word	0x00000000

08003330 <SVF_setReso>:

/****************************************************************************************************************/

void SVF_setReso(ResonantFilter* filter, float feedback)
{
	filter->q = 1-feedback;
 8003330:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003334:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003338:	ed80 0a03 	vstr	s0, [r0, #12]
	if(filter->q < 0.01f) filter->q = 0.01f;
 800333c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003350 <SVF_setReso+0x20>
 8003340:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	d501      	bpl.n	800334e <SVF_setReso+0x1e>
 800334a:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800334e:	4770      	bx	lr
 8003350:	3c23d70a 	.word	0x3c23d70a

08003354 <SVF_setDrive>:
{
#if USE_SHAPER_NONLINEARITY
	filter->drive = drive;
	setDistortionShape(&filter->shaper, filter->drive);
#else
	filter->drive =  /*  0.4f +  */ (drive/MIDI_MAX)*(drive/MIDI_MAX)*6; // the output can be muted (at 0)
 8003354:	ee07 1a90 	vmov	s15, r1
 8003358:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800335c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003378 <SVF_setDrive+0x24>
 8003360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003364:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003368:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800336c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003370:	edc0 7a06 	vstr	s15, [r0, #24]
#endif

}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	42fe0000 	.word	0x42fe0000
 800337c:	00000000 	.word	0x00000000

08003380 <SVF_directSetFilterValue>:
//------------------------------------------------------------------------------------
void SVF_directSetFilterValue(ResonantFilter* filter, float val) // 0 < val < 1
{
 8003380:	b510      	push	{r4, lr}
 8003382:	ed2d 8b02 	vpush	{d8}
 8003386:	4604      	mov	r4, r0
 8003388:	eeb0 8a40 	vmov.f32	s16, s0
	if (val > 0.95) val = 0.95f;
 800338c:	ee10 0a10 	vmov	r0, s0
 8003390:	f7fd f87e 	bl	8000490 <__aeabi_f2d>
 8003394:	a30e      	add	r3, pc, #56	; (adr r3, 80033d0 <SVF_directSetFilterValue+0x50>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f7fd fb61 	bl	8000a60 <__aeabi_dcmpgt>
 800339e:	b108      	cbz	r0, 80033a4 <SVF_directSetFilterValue+0x24>
 80033a0:	ed9f 8a09 	vldr	s16, [pc, #36]	; 80033c8 <SVF_directSetFilterValue+0x48>
	filter->f = val*0.5f;
 80033a4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80033a8:	ee28 8a00 	vmul.f32	s16, s16, s0
 80033ac:	ed84 8a01 	vstr	s16, [r4, #4]
	filter->g  = fastTan(_PI * filter->f );
 80033b0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80033cc <SVF_directSetFilterValue+0x4c>
 80033b4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80033b8:	f7ff fbb6 	bl	8002b28 <fastTan>
 80033bc:	ed84 0a02 	vstr	s0, [r4, #8]

}
 80033c0:	ecbd 8b02 	vpop	{d8}
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	bf00      	nop
 80033c8:	3f733333 	.word	0x3f733333
 80033cc:	40490fdb 	.word	0x40490fdb
 80033d0:	66666666 	.word	0x66666666
 80033d4:	3fee6666 	.word	0x3fee6666

080033d8 <SVF_initialize>:
{
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	4604      	mov	r4, r0
	filter->type = 1;
 80033dc:	2301      	movs	r3, #1
 80033de:	7003      	strb	r3, [r0, #0]
	filter->s1 = 0;
 80033e0:	2500      	movs	r5, #0
 80033e2:	6105      	str	r5, [r0, #16]
	filter->s2 = 0;
 80033e4:	6145      	str	r5, [r0, #20]
	filter->f = 0.20f;
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <SVF_initialize+0x28>)
 80033e8:	6043      	str	r3, [r0, #4]
	filter->q = 0.9f;
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <SVF_initialize+0x2c>)
 80033ec:	60c3      	str	r3, [r0, #12]
	filter->drive = 0.4f;
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <SVF_initialize+0x30>)
 80033f0:	6183      	str	r3, [r0, #24]
	SVF_directSetFilterValue(filter,0.25f);
 80033f2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80033f6:	f7ff ffc3 	bl	8003380 <SVF_directSetFilterValue>
	filter->zi = 0;	//input z^(-1)
 80033fa:	61e5      	str	r5, [r4, #28]
}
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
 80033fe:	bf00      	nop
 8003400:	3e4ccccd 	.word	0x3e4ccccd
 8003404:	3f666666 	.word	0x3f666666
 8003408:	3ecccccd 	.word	0x3ecccccd

0800340c <SVF_init>:
//=====================================================================================================
void SVF_init(void)
{
 800340c:	b510      	push	{r4, lr}
	SVF_initialize(&SVFilter);
 800340e:	4c04      	ldr	r4, [pc, #16]	; (8003420 <SVF_init+0x14>)
 8003410:	4620      	mov	r0, r4
 8003412:	f7ff ffe1 	bl	80033d8 <SVF_initialize>
	SVF_initialize(&SVFilter2);
 8003416:	f104 0020 	add.w	r0, r4, #32
 800341a:	f7ff ffdd 	bl	80033d8 <SVF_initialize>
}
 800341e:	bd10      	pop	{r4, pc}
 8003420:	20003e90 	.word	0x20003e90

08003424 <Filter1Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter1Freq_set(uint8_t val)
{
 8003424:	b508      	push	{r3, lr}
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003426:	eddf 0a08 	vldr	s1, [pc, #32]	; 8003448 <Filter1Freq_set+0x24>
 800342a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800344c <Filter1Freq_set+0x28>
 800342e:	f7ff fb07 	bl	8002a40 <Lin2Exp>
 8003432:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003450 <Filter1Freq_set+0x2c>
 8003436:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <Filter1Freq_set+0x30>)
 800343c:	ed83 0a00 	vstr	s0, [r3]
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003440:	4805      	ldr	r0, [pc, #20]	; (8003458 <Filter1Freq_set+0x34>)
 8003442:	f7ff ff9d 	bl	8003380 <SVF_directSetFilterValue>
}
 8003446:	bd08      	pop	{r3, pc}
 8003448:	45fa0000 	.word	0x45fa0000
 800344c:	42a00000 	.word	0x42a00000
 8003450:	472c4400 	.word	0x472c4400
 8003454:	20013bd8 	.word	0x20013bd8
 8003458:	20003e90 	.word	0x20003e90

0800345c <Filter1Res_set>:
//------------------------------------------------------------------------------------
void 	Filter1Res_set(uint8_t val)
{
 800345c:	b508      	push	{r3, lr}
	SVF_setReso(&SVFilter, val / MIDI_MAX);
 800345e:	ee07 0a90 	vmov	s15, r0
 8003462:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003466:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003478 <Filter1Res_set+0x1c>
 800346a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800346e:	4803      	ldr	r0, [pc, #12]	; (800347c <Filter1Res_set+0x20>)
 8003470:	f7ff ff5e 	bl	8003330 <SVF_setReso>
}
 8003474:	bd08      	pop	{r3, pc}
 8003476:	bf00      	nop
 8003478:	42fe0000 	.word	0x42fe0000
 800347c:	20003e90 	.word	0x20003e90

08003480 <Filter1Drive_set>:
//------------------------------------------------------------------------------------
void	Filter1Drive_set(uint8_t val)
{
 8003480:	b508      	push	{r3, lr}
	SVF_setDrive(&SVFilter, val);
 8003482:	4601      	mov	r1, r0
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <Filter1Drive_set+0xc>)
 8003486:	f7ff ff65 	bl	8003354 <SVF_setDrive>
}
 800348a:	bd08      	pop	{r3, pc}
 800348c:	20003e90 	.word	0x20003e90

08003490 <Filter1Type_set>:
//------------------------------------------------------------------------------------
void 	Filter1Type_set(uint8_t val)
{
 8003490:	b508      	push	{r3, lr}
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003492:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003496:	ee07 0a90 	vmov	s15, r0
 800349a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800349e:	eddf 7a04 	vldr	s15, [pc, #16]	; 80034b0 <Filter1Type_set+0x20>
 80034a2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80034a6:	f003 fd03 	bl	8006eb0 <lrintf>
 80034aa:	4b02      	ldr	r3, [pc, #8]	; (80034b4 <Filter1Type_set+0x24>)
 80034ac:	7018      	strb	r0, [r3, #0]
}
 80034ae:	bd08      	pop	{r3, pc}
 80034b0:	42fe0000 	.word	0x42fe0000
 80034b4:	20003e90 	.word	0x20003e90

080034b8 <Filter2Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter2Freq_set(uint8_t val)
{
 80034b8:	b508      	push	{r3, lr}
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 80034ba:	eddf 0a08 	vldr	s1, [pc, #32]	; 80034dc <Filter2Freq_set+0x24>
 80034be:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80034e0 <Filter2Freq_set+0x28>
 80034c2:	f7ff fabd 	bl	8002a40 <Lin2Exp>
 80034c6:	eddf 7a07 	vldr	s15, [pc, #28]	; 80034e4 <Filter2Freq_set+0x2c>
 80034ca:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <Filter2Freq_set+0x30>)
 80034d0:	ed83 0a00 	vstr	s0, [r3]
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 80034d4:	4805      	ldr	r0, [pc, #20]	; (80034ec <Filter2Freq_set+0x34>)
 80034d6:	f7ff ff53 	bl	8003380 <SVF_directSetFilterValue>
}
 80034da:	bd08      	pop	{r3, pc}
 80034dc:	45fa0000 	.word	0x45fa0000
 80034e0:	42a00000 	.word	0x42a00000
 80034e4:	472c4400 	.word	0x472c4400
 80034e8:	20013bdc 	.word	0x20013bdc
 80034ec:	20003eb0 	.word	0x20003eb0

080034f0 <Filter2Res_set>:
//------------------------------------------------------------------------------------
void 	Filter2Res_set(uint8_t val)
{
 80034f0:	b508      	push	{r3, lr}
	SVF_setReso(&SVFilter2, val / MIDI_MAX);
 80034f2:	ee07 0a90 	vmov	s15, r0
 80034f6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80034fa:	eddf 7a04 	vldr	s15, [pc, #16]	; 800350c <Filter2Res_set+0x1c>
 80034fe:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003502:	4803      	ldr	r0, [pc, #12]	; (8003510 <Filter2Res_set+0x20>)
 8003504:	f7ff ff14 	bl	8003330 <SVF_setReso>
}
 8003508:	bd08      	pop	{r3, pc}
 800350a:	bf00      	nop
 800350c:	42fe0000 	.word	0x42fe0000
 8003510:	20003eb0 	.word	0x20003eb0

08003514 <Filter2Drive_set>:
//------------------------------------------------------------------------------------
void	Filter2Drive_set(uint8_t val)
{
 8003514:	b508      	push	{r3, lr}
	SVF_setDrive(&SVFilter2, val);
 8003516:	4601      	mov	r1, r0
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <Filter2Drive_set+0xc>)
 800351a:	f7ff ff1b 	bl	8003354 <SVF_setDrive>
}
 800351e:	bd08      	pop	{r3, pc}
 8003520:	20003eb0 	.word	0x20003eb0

08003524 <Filter2Type_set>:
//------------------------------------------------------------------------------------
void 	Filter2Type_set(uint8_t val)
{
 8003524:	b508      	push	{r3, lr}
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800352a:	ee07 0a90 	vmov	s15, r0
 800352e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003532:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003548 <Filter2Type_set+0x24>
 8003536:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800353a:	f003 fcb9 	bl	8006eb0 <lrintf>
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <Filter2Type_set+0x28>)
 8003540:	f883 0020 	strb.w	r0, [r3, #32]
}
 8003544:	bd08      	pop	{r3, pc}
 8003546:	bf00      	nop
 8003548:	42fe0000 	.word	0x42fe0000
 800354c:	20003e90 	.word	0x20003e90

08003550 <SVF_calcSample>:

//------------------------------------------------------------------------------------

float SVF_calcSample(ResonantFilter* filter, float in)
{
 8003550:	b510      	push	{r4, lr}
 8003552:	ed2d 8b0c 	vpush	{d8-d13}
 8003556:	4604      	mov	r4, r0
 8003558:	eef0 aa40 	vmov.f32	s21, s0
	const float f 	= filter->g;
 800355c:	ed90 8a02 	vldr	s16, [r0, #8]
	//fix unstable filter for high f and r settings
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003560:	ed90 7a01 	vldr	s14, [r0, #4]
 8003564:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8003714 <SVF_calcSample+0x1c4>
 8003568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800356c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003570:	f280 8089 	bge.w	8003686 <SVF_calcSample+0x136>
 8003574:	ed90 ba03 	vldr	s22, [r0, #12]
	const float ff 	= f*f;
 8003578:	ee28 9a08 	vmul.f32	s18, s16, s16


#if USE_SHAPER_NONLINEARITY
	const float x = (buf[i]/((float)0x7fff));
#else
	const float x = softClipTwo( in * filter->drive);
 800357c:	ed94 0a06 	vldr	s0, [r4, #24]
 8003580:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8003584:	f7ff fac0 	bl	8002b08 <softClipTwo>
 8003588:	eef0 9a40 	vmov.f32	s19, s0
#endif

#if ENABLE_NONLINEAR_INTEGRATORS
	// input with half sample delay, for non-linearities
	float ih = 0.5f * (x + filter->zi);
 800358c:	ed94 0a07 	vldr	s0, [r4, #28]
 8003590:	ee30 0a29 	vadd.f32	s0, s0, s19
 8003594:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8003598:	ee20 0a2b 	vmul.f32	s0, s0, s23
	filter->zi = x;
 800359c:	edc4 9a07 	vstr	s19, [r4, #28]
		You can trivially remove any saturator by setting the corresponding gain t0,...,t1 to 1. Also, you can simply scale any saturator (i.e. change clipping threshold) to 1/a*tanh(a*x) by writing
		double t1 = tanhXdX(a*s[0]);
	 */
#if ENABLE_NONLINEAR_INTEGRATORS
	const float scale = 0.5f;
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 80035a0:	ee3b aa0b 	vadd.f32	s20, s22, s22
 80035a4:	edd4 7a04 	vldr	s15, [r4, #16]
 80035a8:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80035ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80035b0:	edd4 7a05 	vldr	s15, [r4, #20]
 80035b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80035b8:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80035bc:	f7ff fa58 	bl	8002a70 <tanhXdX>
 80035c0:	eef0 8a40 	vmov.f32	s17, s0
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 80035c4:	ed94 0a04 	vldr	s0, [r4, #16]
 80035c8:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80035cc:	f7ff fa50 	bl	8002a70 <tanhXdX>
 80035d0:	eef0 ba40 	vmov.f32	s23, s0
	const float t0 = 1;
	const float t1 = 1;
#endif

	// g# the denominators for solutions of individual stages
	const float g0 = 1.f / (1.f + f*t0*2*R);
 80035d4:	ee68 7a28 	vmul.f32	s15, s16, s17
 80035d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035dc:	ee27 7a8b 	vmul.f32	s14, s15, s22
 80035e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80035e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80035e8:	ee86 da07 	vdiv.f32	s26, s12, s14

	const float s1 = filter->s1;
 80035ec:	ed94 0a04 	vldr	s0, [r4, #16]
	const float s2 = filter->s2;
 80035f0:	edd4 6a05 	vldr	s13, [r4, #20]

	// solve feedback
	const float f1 = ff*g0*t0*t1;
 80035f4:	ee69 7a0d 	vmul.f32	s15, s18, s26
 80035f8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80035fc:	ee67 7aab 	vmul.f32	s15, s15, s23
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003600:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8003604:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003608:	ee68 6a0d 	vmul.f32	s13, s16, s26
 800360c:	ee66 6aab 	vmul.f32	s13, s13, s23
 8003610:	ee66 6a80 	vmul.f32	s13, s13, s0
 8003614:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003618:	ee77 7a86 	vadd.f32	s15, s15, s12
 800361c:	ee87 ca27 	vdiv.f32	s24, s14, s15


	// solve the remaining stages with nonlinear gain
	const float xx = t0*(x - y1);
 8003620:	ee39 9acc 	vsub.f32	s18, s19, s24
 8003624:	ee29 9a28 	vmul.f32	s18, s18, s17
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003628:	f7ff fa6e 	bl	8002b08 <softClipTwo>
 800362c:	ee68 ca09 	vmul.f32	s25, s16, s18
 8003630:	ee30 0a2c 	vadd.f32	s0, s0, s25
 8003634:	ee20 da0d 	vmul.f32	s26, s0, s26

	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003638:	ed94 0a04 	vldr	s0, [r4, #16]
 800363c:	f7ff fa64 	bl	8002b08 <softClipTwo>
 8003640:	ee38 8a08 	vadd.f32	s16, s16, s16
 8003644:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8003648:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800364c:	ee68 8a8d 	vmul.f32	s17, s17, s26
 8003650:	ee79 8a68 	vsub.f32	s17, s18, s17
 8003654:	ee68 8a28 	vmul.f32	s17, s16, s17
 8003658:	ee70 8a28 	vadd.f32	s17, s0, s17
 800365c:	edc4 8a04 	vstr	s17, [r4, #16]
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003660:	edd4 7a05 	vldr	s15, [r4, #20]
 8003664:	ee28 8a2b 	vmul.f32	s16, s16, s23
 8003668:	ee28 8a0d 	vmul.f32	s16, s16, s26
 800366c:	ee37 8a88 	vadd.f32	s16, s15, s16
 8003670:	ed84 8a05 	vstr	s16, [r4, #20]

	float out;


	switch(filter->type)
 8003674:	7823      	ldrb	r3, [r4, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	2b04      	cmp	r3, #4
 800367a:	d844      	bhi.n	8003706 <SVF_calcSample+0x1b6>
 800367c:	e8df f003 	tbb	[pc, r3]
 8003680:	2d281d06 	.word	0x2d281d06
 8003684:	36          	.byte	0x36
 8003685:	00          	.byte	0x00
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003686:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800368a:	e775      	b.n	8003578 <SVF_calcSample+0x28>
	case FILTER_LP:
#if USE_SHAPER_NONLINEARITY

		buf[i] = FILTER_GAIN * fastTanh( distortion_calcSampleFloat(&filter->shaper, y1));
#else
		out = fastTanh(y1) ;
 800368c:	eeb0 0a4c 	vmov.f32	s0, s24
 8003690:	f7ff fa10 	bl	8002ab4 <fastTanh>
	default:
		out = in ;
		break;
	}

	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 8003694:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003698:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800369c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a0:	dd01      	ble.n	80036a6 <SVF_calcSample+0x156>
 80036a2:	eeb0 0a67 	vmov.f32	s0, s15
	out = (out < -1.0f) ? -1.0f : out;
 80036a6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80036aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b2:	d42b      	bmi.n	800370c <SVF_calcSample+0x1bc>

	return out;

}
 80036b4:	ecbd 8b0c 	vpop	{d8-d13}
 80036b8:	bd10      	pop	{r4, pc}
		const float ugb = 2*R*y0;
 80036ba:	ee2a 0a0d 	vmul.f32	s0, s20, s26
		const float h = x - ugb - y1;
 80036be:	ee39 0ac0 	vsub.f32	s0, s19, s0
 80036c2:	ee30 0a4c 	vsub.f32	s0, s0, s24
		out = h * FILTER_GAIN_F;
 80036c6:	eddf aa14 	vldr	s21, [pc, #80]	; 8003718 <SVF_calcSample+0x1c8>
 80036ca:	ee20 0a2a 	vmul.f32	s0, s0, s21
	break;
 80036ce:	e7e1      	b.n	8003694 <SVF_calcSample+0x144>
		out = y0 * FILTER_GAIN_F;
 80036d0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003718 <SVF_calcSample+0x1c8>
 80036d4:	ee2d 0a00 	vmul.f32	s0, s26, s0
		break;
 80036d8:	e7dc      	b.n	8003694 <SVF_calcSample+0x144>
		const float ugb = 2*R*y0;
 80036da:	ee2a 0a0d 	vmul.f32	s0, s20, s26
		out = (x-ugb) * FILTER_GAIN_F;
 80036de:	ee79 9ac0 	vsub.f32	s19, s19, s0
 80036e2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003718 <SVF_calcSample+0x1c8>
 80036e6:	ee29 0a80 	vmul.f32	s0, s19, s0
	break;
 80036ea:	e7d3      	b.n	8003694 <SVF_calcSample+0x144>
		const float ugb = 2*R*y0;
 80036ec:	ee2a 0a0d 	vmul.f32	s0, s20, s26
		const float h = x - ugb - y1;
 80036f0:	ee39 0ac0 	vsub.f32	s0, s19, s0
 80036f4:	ee30 0a4c 	vsub.f32	s0, s0, s24
		out = (y1-h) * FILTER_GAIN_F;
 80036f8:	ee3c 0a40 	vsub.f32	s0, s24, s0
 80036fc:	eddf aa06 	vldr	s21, [pc, #24]	; 8003718 <SVF_calcSample+0x1c8>
 8003700:	ee20 0a2a 	vmul.f32	s0, s0, s21
	break;
 8003704:	e7c6      	b.n	8003694 <SVF_calcSample+0x144>
		out = in ;
 8003706:	eeb0 0a6a 	vmov.f32	s0, s21
 800370a:	e7c3      	b.n	8003694 <SVF_calcSample+0x144>
	out = (out < -1.0f) ? -1.0f : out;
 800370c:	eeb0 0a67 	vmov.f32	s0, s15
	return out;
 8003710:	e7d0      	b.n	80036b4 <SVF_calcSample+0x164>
 8003712:	bf00      	nop
 8003714:	3ee6594b 	.word	0x3ee6594b
 8003718:	3f6147ae 	.word	0x3f6147ae

0800371c <seq_tempo_set>:

Sequencer_t seq _CCM_;
NoteGenerator_t noteGen _CCM_;

/*--------------------------------------------------------------------------------------------*/
void seq_tempo_set(uint8_t val) {
 800371c:	b510      	push	{r4, lr}
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 800371e:	ee07 0a90 	vmov	s15, r0
 8003722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003726:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003754 <seq_tempo_set+0x38>
 800372a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800372e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003758 <seq_tempo_set+0x3c>
 8003732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003736:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800373a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800373e:	4c07      	ldr	r4, [pc, #28]	; (800375c <seq_tempo_set+0x40>)
 8003740:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003744:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003760 <seq_tempo_set+0x44>
 8003748:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800374c:	f003 fbb0 	bl	8006eb0 <lrintf>
 8003750:	6460      	str	r0, [r4, #68]	; 0x44
	//seq.smp_count = seq.steptime;
}
 8003752:	bd10      	pop	{r4, pc}
 8003754:	44480000 	.word	0x44480000
 8003758:	42fe0000 	.word	0x42fe0000
 800375c:	20003ed0 	.word	0x20003ed0
 8003760:	4a217fc0 	.word	0x4a217fc0

08003764 <seq_gateTime_set>:
/*-------------------------------------------------------*/
void seq_gateTime_set(uint8_t val) // val is a number of samples
{
	seq.gateTime = seq.steptime * ((0.9f - 0.1f) * val / MIDI_MAX + 0.1f); // from 10% to 90% of each step duration
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <seq_gateTime_set+0x38>)
 8003766:	ee07 0a90 	vmov	s15, r0
 800376a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80037a0 <seq_gateTime_set+0x3c>
 8003772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003776:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80037a4 <seq_gateTime_set+0x40>
 800377a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800377e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80037a8 <seq_gateTime_set+0x44>
 8003782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003786:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800378a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003796:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 800379a:	4770      	bx	lr
 800379c:	20003ed0 	.word	0x20003ed0
 80037a0:	3f4ccccc 	.word	0x3f4ccccc
 80037a4:	42fe0000 	.word	0x42fe0000
 80037a8:	3dcccccd 	.word	0x3dcccccd

080037ac <seq_chooseScale>:

/*-------------------------------------------------------*/
void seq_chooseScale(int16_t idx) {
	uint8_t *currentScale;

	switch (idx) {
 80037ac:	280e      	cmp	r0, #14
 80037ae:	d825      	bhi.n	80037fc <seq_chooseScale+0x50>
 80037b0:	e8df f000 	tbb	[pc, r0]
 80037b4:	0c0a2608 	.word	0x0c0a2608
 80037b8:	1412100e 	.word	0x1412100e
 80037bc:	1c1a1816 	.word	0x1c1a1816
 80037c0:	201e      	.short	0x201e
 80037c2:	22          	.byte	0x22
 80037c3:	00          	.byte	0x00
	case 0:
		currentScale = (uint8_t*) MIDIscale13;
 80037c4:	4a12      	ldr	r2, [pc, #72]	; (8003810 <seq_chooseScale+0x64>)
 80037c6:	e01c      	b.n	8003802 <seq_chooseScale+0x56>
		break;
	case 1:
		currentScale = (uint8_t*) MIDIscale14;
		break;
	case 2:
		currentScale = (uint8_t*) MIDIscale07;
 80037c8:	4a12      	ldr	r2, [pc, #72]	; (8003814 <seq_chooseScale+0x68>)
		break;
 80037ca:	e01a      	b.n	8003802 <seq_chooseScale+0x56>
	case 3:
		currentScale = (uint8_t*) MIDIscale08;
 80037cc:	4a12      	ldr	r2, [pc, #72]	; (8003818 <seq_chooseScale+0x6c>)
		break;
 80037ce:	e018      	b.n	8003802 <seq_chooseScale+0x56>
	case 4:
		currentScale = (uint8_t*) MIDIscale09;
 80037d0:	4a12      	ldr	r2, [pc, #72]	; (800381c <seq_chooseScale+0x70>)
		break;
 80037d2:	e016      	b.n	8003802 <seq_chooseScale+0x56>
	case 5:
		currentScale = (uint8_t*) MIDIscale10;
 80037d4:	4a12      	ldr	r2, [pc, #72]	; (8003820 <seq_chooseScale+0x74>)
		break;
 80037d6:	e014      	b.n	8003802 <seq_chooseScale+0x56>
	case 6:
		currentScale = (uint8_t*) MIDIscale04;
 80037d8:	4a12      	ldr	r2, [pc, #72]	; (8003824 <seq_chooseScale+0x78>)
		break;
 80037da:	e012      	b.n	8003802 <seq_chooseScale+0x56>
	case 7:
		currentScale = (uint8_t*) MIDIscale01;
 80037dc:	4a12      	ldr	r2, [pc, #72]	; (8003828 <seq_chooseScale+0x7c>)
		break;
 80037de:	e010      	b.n	8003802 <seq_chooseScale+0x56>
	case 8:
		currentScale = (uint8_t*) MIDIscale03;
 80037e0:	4a12      	ldr	r2, [pc, #72]	; (800382c <seq_chooseScale+0x80>)
		break;
 80037e2:	e00e      	b.n	8003802 <seq_chooseScale+0x56>
	case 9:
		currentScale = (uint8_t*) MIDIscale11;
 80037e4:	4a12      	ldr	r2, [pc, #72]	; (8003830 <seq_chooseScale+0x84>)
		break;
 80037e6:	e00c      	b.n	8003802 <seq_chooseScale+0x56>
	case 10:
		currentScale = (uint8_t*) MIDIscale02;
 80037e8:	4a12      	ldr	r2, [pc, #72]	; (8003834 <seq_chooseScale+0x88>)
		break;
 80037ea:	e00a      	b.n	8003802 <seq_chooseScale+0x56>
	case 11:
		currentScale = (uint8_t*) MIDIscale06;
 80037ec:	4a12      	ldr	r2, [pc, #72]	; (8003838 <seq_chooseScale+0x8c>)
		break;
 80037ee:	e008      	b.n	8003802 <seq_chooseScale+0x56>
	case 12:
		currentScale = (uint8_t*) MIDIscale05;
 80037f0:	4a12      	ldr	r2, [pc, #72]	; (800383c <seq_chooseScale+0x90>)
		break;
 80037f2:	e006      	b.n	8003802 <seq_chooseScale+0x56>
	case 13:
		currentScale = (uint8_t*) MIDIscale12;
 80037f4:	4a12      	ldr	r2, [pc, #72]	; (8003840 <seq_chooseScale+0x94>)
		break;
 80037f6:	e004      	b.n	8003802 <seq_chooseScale+0x56>
	case 14:
		currentScale = (uint8_t*) MIDIscale11;
 80037f8:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <seq_chooseScale+0x84>)
		break;
 80037fa:	e002      	b.n	8003802 <seq_chooseScale+0x56>
	default:
		currentScale = (uint8_t*) MIDIscale11;
 80037fc:	4a0c      	ldr	r2, [pc, #48]	; (8003830 <seq_chooseScale+0x84>)
		break;
 80037fe:	e000      	b.n	8003802 <seq_chooseScale+0x56>
		currentScale = (uint8_t*) MIDIscale14;
 8003800:	4a10      	ldr	r2, [pc, #64]	; (8003844 <seq_chooseScale+0x98>)
	}
	noteGen.currentScale = currentScale;
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <seq_chooseScale+0x9c>)
 8003804:	659a      	str	r2, [r3, #88]	; 0x58
	noteGen.chRequested = true;
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	08015200 	.word	0x08015200
 8003814:	080151d4 	.word	0x080151d4
 8003818:	080151d8 	.word	0x080151d8
 800381c:	080151dc 	.word	0x080151dc
 8003820:	080151e0 	.word	0x080151e0
 8003824:	080151bc 	.word	0x080151bc
 8003828:	080151a4 	.word	0x080151a4
 800382c:	080151b4 	.word	0x080151b4
 8003830:	080151e8 	.word	0x080151e8
 8003834:	080151ac 	.word	0x080151ac
 8003838:	080151cc 	.word	0x080151cc
 800383c:	080151c4 	.word	0x080151c4
 8003840:	080151f0 	.word	0x080151f0
 8003844:	08015204 	.word	0x08015204
 8003848:	20003ed0 	.word	0x20003ed0

0800384c <seq_scale_set>:
		noteGen.scaleIndex--;
		seq_chooseScale(noteGen.scaleIndex);
	}
}
/*-------------------------------------------------------*/
void seq_scale_set(uint8_t val) {
 800384c:	b500      	push	{lr}
 800384e:	b083      	sub	sp, #12
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 8003850:	ee07 0a90 	vmov	s15, r0
 8003854:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003858:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003880 <seq_scale_set+0x34>
 800385c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003860:	f003 fb72 	bl	8006f48 <rintf>
 8003864:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003868:	edcd 7a01 	vstr	s15, [sp, #4]
 800386c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <seq_scale_set+0x38>)
 8003872:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	seq_chooseScale(noteGen.scaleIndex);
 8003876:	f7ff ff99 	bl	80037ac <seq_chooseScale>
}
 800387a:	b003      	add	sp, #12
 800387c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003880:	3de1c387 	.word	0x3de1c387
 8003884:	20003ed0 	.word	0x20003ed0

08003888 <seq_switchMovingSeq>:
	else
		noteGen.automaticON = true;
}
/*-------------------------------------------------------*/
void seq_switchMovingSeq(uint8_t val) {
	if (val > 63)
 8003888:	283f      	cmp	r0, #63	; 0x3f
 800388a:	d804      	bhi.n	8003896 <seq_switchMovingSeq+0xe>
		noteGen.automaticON = true;
	else
		noteGen.automaticON = false;
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <seq_switchMovingSeq+0x18>)
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
}
 8003894:	4770      	bx	lr
		noteGen.automaticON = true;
 8003896:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <seq_switchMovingSeq+0x18>)
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800389e:	4770      	bx	lr
 80038a0:	20003ed0 	.word	0x20003ed0

080038a4 <seq_switchMute>:
	else
		noteGen.someNotesMuted = true;
}
/*-------------------------------------------------------*/
void seq_switchMute(uint8_t val) {
	switch (val) {
 80038a4:	b130      	cbz	r0, 80038b4 <seq_switchMute+0x10>
 80038a6:	287f      	cmp	r0, #127	; 0x7f
 80038a8:	d108      	bne.n	80038bc <seq_switchMute+0x18>
	case MIDI_MAXi:
		noteGen.someNotesMuted = true;
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <seq_switchMute+0x1c>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		break;
 80038b2:	4770      	bx	lr
	case 0:
		noteGen.someNotesMuted = false;
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <seq_switchMute+0x1c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		break;
	}
}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20003ed0 	.word	0x20003ed0

080038c4 <seq_freqMax_set>:
		noteGen.chRequested = true;
		//pitchGenChangePoints();
	}
}
/*-------------------------------------------------------*/
void seq_freqMax_set(uint8_t val) {
 80038c4:	b082      	sub	sp, #8
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 80038c6:	ee07 0a90 	vmov	s15, r0
 80038ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ce:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80038f4 <seq_freqMax_set+0x30>
 80038d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038da:	edcd 7a01 	vstr	s15, [sp, #4]
 80038de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80038e2:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <seq_freqMax_set+0x34>)
 80038e4:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
	noteGen.chRequested = true;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
}
 80038ee:	b002      	add	sp, #8
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	3d810204 	.word	0x3d810204
 80038f8:	20003ed0 	.word	0x20003ed0

080038fc <seq_sequence_new>:

/*--------------------------------------------------------------------------------------------*/
void seq_sequence_new(void) {
 80038fc:	b570      	push	{r4, r5, r6, lr}
	int16_t relativeNote;
	int16_t octaveShift;
	int16_t index;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 80038fe:	2400      	movs	r4, #0
 8003900:	e00d      	b.n	800391e <seq_sequence_new+0x22>
				frand_a_b(1, noteGen.currentScale[0]))];
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;

		while (index > MAX_NOTE_INDEX)
			index -= 12;
 8003902:	3b0c      	subs	r3, #12
 8003904:	b21b      	sxth	r3, r3
		while (index > MAX_NOTE_INDEX)
 8003906:	2b6a      	cmp	r3, #106	; 0x6a
 8003908:	dcfb      	bgt.n	8003902 <seq_sequence_new+0x6>
 800390a:	e001      	b.n	8003910 <seq_sequence_new+0x14>
		while (index < 0)
			index += 12;
 800390c:	330c      	adds	r3, #12
 800390e:	b21b      	sxth	r3, r3
		while (index < 0)
 8003910:	2b00      	cmp	r3, #0
 8003912:	dbfb      	blt.n	800390c <seq_sequence_new+0x10>
		seq.track1.note[i] = index; // note frequency is in notesFreq[index]
 8003914:	4a17      	ldr	r2, [pc, #92]	; (8003974 <seq_sequence_new+0x78>)
 8003916:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 800391a:	3401      	adds	r4, #1
 800391c:	b2e4      	uxtb	r4, r4
 800391e:	2c0f      	cmp	r4, #15
 8003920:	d826      	bhi.n	8003970 <seq_sequence_new+0x74>
		relativeNote = noteGen.currentScale[lrintf(
 8003922:	4d14      	ldr	r5, [pc, #80]	; (8003974 <seq_sequence_new+0x78>)
 8003924:	6dae      	ldr	r6, [r5, #88]	; 0x58
				frand_a_b(1, noteGen.currentScale[0]))];
 8003926:	7833      	ldrb	r3, [r6, #0]
 8003928:	ee00 3a90 	vmov	s1, r3
		relativeNote = noteGen.currentScale[lrintf(
 800392c:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8003930:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003934:	f7ff fcd0 	bl	80032d8 <frand_a_b>
 8003938:	f003 faba 	bl	8006eb0 <lrintf>
 800393c:	5c36      	ldrb	r6, [r6, r0]
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 800393e:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
 8003942:	ee00 3a90 	vmov	s1, r3
 8003946:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800394a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003978 <seq_sequence_new+0x7c>
 800394e:	f7ff fcc3 	bl	80032d8 <frand_a_b>
 8003952:	f003 faad 	bl	8006eb0 <lrintf>
 8003956:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800395a:	0083      	lsls	r3, r0, #2
 800395c:	b29b      	uxth	r3, r3
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 800395e:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 8003962:	4413      	add	r3, r2
 8003964:	fa16 f383 	uxtah	r3, r6, r3
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b15      	subs	r3, #21
 800396c:	b21b      	sxth	r3, r3
		while (index > MAX_NOTE_INDEX)
 800396e:	e7ca      	b.n	8003906 <seq_sequence_new+0xa>
	}
}
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	bf00      	nop
 8003974:	20003ed0 	.word	0x20003ed0
 8003978:	00000000 	.word	0x00000000

0800397c <seq_transpose>:
/*--------------------------------------------------------------------------------------------*/
void seq_transpose(void) {
	int16_t noteIndex;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 800397c:	2200      	movs	r2, #0
 800397e:	e00d      	b.n	800399c <seq_transpose+0x20>
		noteIndex = seq.track1.note[i] + noteGen.transpose;
		while (noteIndex > MAX_NOTE_INDEX)
			noteIndex -= 12;
 8003980:	3b0c      	subs	r3, #12
 8003982:	b21b      	sxth	r3, r3
		while (noteIndex > MAX_NOTE_INDEX)
 8003984:	2b6a      	cmp	r3, #106	; 0x6a
 8003986:	dcfb      	bgt.n	8003980 <seq_transpose+0x4>
 8003988:	e001      	b.n	800398e <seq_transpose+0x12>
		while (noteIndex < 0)
			noteIndex += 12;
 800398a:	330c      	adds	r3, #12
 800398c:	b21b      	sxth	r3, r3
		while (noteIndex < 0)
 800398e:	2b00      	cmp	r3, #0
 8003990:	dbfb      	blt.n	800398a <seq_transpose+0xe>
		seq.track1.note[i] = noteIndex;
 8003992:	490a      	ldr	r1, [pc, #40]	; (80039bc <seq_transpose+0x40>)
 8003994:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8003998:	3201      	adds	r2, #1
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	2a0f      	cmp	r2, #15
 800399e:	d808      	bhi.n	80039b2 <seq_transpose+0x36>
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 80039a0:	4610      	mov	r0, r2
 80039a2:	4906      	ldr	r1, [pc, #24]	; (80039bc <seq_transpose+0x40>)
 80039a4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80039a8:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
 80039ac:	440b      	add	r3, r1
 80039ae:	b21b      	sxth	r3, r3
		while (noteIndex > MAX_NOTE_INDEX)
 80039b0:	e7e8      	b.n	8003984 <seq_transpose+0x8>
	}
	noteGen.transpose = 0;
 80039b2:	4b02      	ldr	r3, [pc, #8]	; (80039bc <seq_transpose+0x40>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
}
 80039ba:	4770      	bx	lr
 80039bc:	20003ed0 	.word	0x20003ed0

080039c0 <sequencer_init>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_init(void) {
 80039c0:	b510      	push	{r4, lr}
	seq.tempo = INIT_TEMPO;
 80039c2:	4c13      	ldr	r4, [pc, #76]	; (8003a10 <sequencer_init+0x50>)
 80039c4:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <sequencer_init+0x54>)
 80039c6:	6423      	str	r3, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 80039c8:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003a18 <sequencer_init+0x58>
 80039cc:	f003 fa70 	bl	8006eb0 <lrintf>
 80039d0:	6460      	str	r0, [r4, #68]	; 0x44
	seq.smp_count = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	64a3      	str	r3, [r4, #72]	; 0x48
	seq.step_idx = 0;
 80039d6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	seq.gateTime = seq.steptime / 2;
 80039da:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80039de:	1040      	asrs	r0, r0, #1
 80039e0:	6520      	str	r0, [r4, #80]	; 0x50

	noteGen.transpose = 0;
 80039e2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	noteGen.automaticON = false;
 80039e6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	noteGen.glideON = false;
 80039ea:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	noteGen.chRequested = false;
 80039ee:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	noteGen.someNotesMuted = false;
 80039f2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	noteGen.scaleIndex = 0;
 80039f6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	noteGen.octaveSpread = 4;
 80039fa:	2304      	movs	r3, #4
 80039fc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	noteGen.rootNote = 36;
 8003a00:	2324      	movs	r3, #36	; 0x24
 8003a02:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <sequencer_init+0x5c>)
 8003a08:	65a3      	str	r3, [r4, #88]	; 0x58

	seq_sequence_new();
 8003a0a:	f7ff ff77 	bl	80038fc <seq_sequence_new>
}
 8003a0e:	bd10      	pop	{r4, pc}
 8003a10:	20003ed0 	.word	0x20003ed0
 8003a14:	43a00000 	.word	0x43a00000
 8003a18:	46013300 	.word	0x46013300
 8003a1c:	08015200 	.word	0x08015200

08003a20 <sequencer_process>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_process(void) // To be called at each sample treatment
{
 8003a20:	b508      	push	{r3, lr}
	/* If we have reached a new step ....  */
	if (seq.smp_count-- <= 0) {
 8003a22:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <sequencer_process+0x40>)
 8003a24:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003a26:	1e59      	subs	r1, r3, #1
 8003a28:	6491      	str	r1, [r2, #72]	; 0x48
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	dd00      	ble.n	8003a30 <sequencer_process+0x10>
		seq.step_idx++;
		if (seq.step_idx >= NUMBER_STEPS)
			seq.step_idx = 0;

	}
}
 8003a2e:	bd08      	pop	{r3, pc}
		if (seq.step_idx == 0) {
 8003a30:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
 8003a34:	b18b      	cbz	r3, 8003a5a <sequencer_process+0x3a>
		sequencer_newStep_action();
 8003a36:	f000 f9a9 	bl	8003d8c <sequencer_newStep_action>
		seq.smp_count = seq.steptime; // reload the counter
 8003a3a:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <sequencer_process+0x40>)
 8003a3c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003a3e:	6493      	str	r3, [r2, #72]	; 0x48
		seq.step_idx++;
 8003a40:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
 8003a44:	3301      	adds	r3, #1
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
		if (seq.step_idx >= NUMBER_STEPS)
 8003a4c:	2b0f      	cmp	r3, #15
 8003a4e:	ddee      	ble.n	8003a2e <sequencer_process+0xe>
			seq.step_idx = 0;
 8003a50:	4613      	mov	r3, r2
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8003a58:	e7e9      	b.n	8003a2e <sequencer_process+0xe>
			sequencer_newSequence_action();
 8003a5a:	f000 fa4f 	bl	8003efc <sequencer_newSequence_action>
 8003a5e:	e7ea      	b.n	8003a36 <sequencer_process+0x16>
 8003a60:	20003ed0 	.word	0x20003ed0

08003a64 <autoSound_set>:
static enum timbre sound _CCM_;

/*===============================================================================================================*/

void autoSound_set(int8_t val) {
	autoSound = val;
 8003a64:	4b01      	ldr	r3, [pc, #4]	; (8003a6c <autoSound_set+0x8>)
 8003a66:	7018      	strb	r0, [r3, #0]
}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20003f38 	.word	0x20003f38

08003a70 <soundNumber_get>:
	}
}
/*---------------------------------------------------------*/
uint8_t soundNumber_get(void) {
	return sound;
}
 8003a70:	4b01      	ldr	r3, [pc, #4]	; (8003a78 <soundNumber_get+0x8>)
 8003a72:	7858      	ldrb	r0, [r3, #1]
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20003f38 	.word	0x20003f38

08003a7c <AmpLFO_amp_set>:
	}
}

/*-------------------------------------------------------*/
void AmpLFO_amp_set(uint8_t val) {
	amp_lfo.amp = val / MIDI_MAX;
 8003a7c:	ee07 0a90 	vmov	s15, r0
 8003a80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a84:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003a94 <AmpLFO_amp_set+0x18>
 8003a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a8c:	4b02      	ldr	r3, [pc, #8]	; (8003a98 <AmpLFO_amp_set+0x1c>)
 8003a8e:	edc3 7a00 	vstr	s15, [r3]
}
 8003a92:	4770      	bx	lr
 8003a94:	42fe0000 	.word	0x42fe0000
 8003a98:	20003e10 	.word	0x20003e10

08003a9c <AmpLFO_freq_set>:
/*-------------------------------------------------------*/
void AmpLFO_freq_set(uint8_t val) {
	amp_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8003a9c:	ee07 0a90 	vmov	s15, r0
 8003aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003ab4 <AmpLFO_freq_set+0x18>
 8003aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aac:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <AmpLFO_freq_set+0x1c>)
 8003aae:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003ab2:	4770      	bx	lr
 8003ab4:	3dc18306 	.word	0x3dc18306
 8003ab8:	20003e10 	.word	0x20003e10

08003abc <Filt1LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt1LFO_amp_set(uint8_t val) {
	filt_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 8003abc:	ee07 0a90 	vmov	s15, r0
 8003ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003ad4 <Filt1LFO_amp_set+0x18>
 8003ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <Filt1LFO_amp_set+0x1c>)
 8003ace:	edc3 7a00 	vstr	s15, [r3]
}
 8003ad2:	4770      	bx	lr
 8003ad4:	3e810204 	.word	0x3e810204
 8003ad8:	20003e50 	.word	0x20003e50

08003adc <Filt1LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt1LFO_freq_set(uint8_t val) {
	filt_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8003adc:	ee07 0a90 	vmov	s15, r0
 8003ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003af4 <Filt1LFO_freq_set+0x18>
 8003ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <Filt1LFO_freq_set+0x1c>)
 8003aee:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003af2:	4770      	bx	lr
 8003af4:	3dc18306 	.word	0x3dc18306
 8003af8:	20003e50 	.word	0x20003e50

08003afc <Filt2LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt2LFO_amp_set(uint8_t val) {
	filt2_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 8003afc:	ee07 0a90 	vmov	s15, r0
 8003b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b04:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003b14 <Filt2LFO_amp_set+0x18>
 8003b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <Filt2LFO_amp_set+0x1c>)
 8003b0e:	edc3 7a00 	vstr	s15, [r3]
}
 8003b12:	4770      	bx	lr
 8003b14:	3e810204 	.word	0x3e810204
 8003b18:	20003e30 	.word	0x20003e30

08003b1c <Filt2LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt2LFO_freq_set(uint8_t val) {
	filt2_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8003b1c:	ee07 0a90 	vmov	s15, r0
 8003b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b24:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003b34 <Filt2LFO_freq_set+0x18>
 8003b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b2c:	4b02      	ldr	r3, [pc, #8]	; (8003b38 <Filt2LFO_freq_set+0x1c>)
 8003b2e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003b32:	4770      	bx	lr
 8003b34:	3dc18306 	.word	0x3dc18306
 8003b38:	20003e30 	.word	0x20003e30

08003b3c <VibratoAmp_set>:
	} else
		vibr_lfo.amp = vibr_lfo.last_amp;
}
/*-------------------------------------------------------*/
void VibratoAmp_set(uint8_t val) {
	vibr_lfo.amp = MAX_VIBRATO_AMP / MIDI_MAX * val;
 8003b3c:	ee07 0a90 	vmov	s15, r0
 8003b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b44:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003b54 <VibratoAmp_set+0x18>
 8003b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <VibratoAmp_set+0x1c>)
 8003b4e:	edc3 7a00 	vstr	s15, [r3]
}
 8003b52:	4770      	bx	lr
 8003b54:	3b810204 	.word	0x3b810204
 8003b58:	20003e70 	.word	0x20003e70

08003b5c <VibratoFreq_set>:
/*-------------------------------------------------------*/
void VibratoFreq_set(uint8_t val) {
	vibr_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8003b5c:	ee07 0a90 	vmov	s15, r0
 8003b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b64:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003b74 <VibratoFreq_set+0x18>
 8003b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b6c:	4b02      	ldr	r3, [pc, #8]	; (8003b78 <VibratoFreq_set+0x1c>)
 8003b6e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003b72:	4770      	bx	lr
 8003b74:	3dc18306 	.word	0x3dc18306
 8003b78:	20003e70 	.word	0x20003e70

08003b7c <Delay_switch>:
		Delay_clean();
	} else
		delayON = true;
}
/*-------------------------------------------------------*/
void Delay_switch(uint8_t val) {
 8003b7c:	b508      	push	{r3, lr}

	if (val > 63)
 8003b7e:	283f      	cmp	r0, #63	; 0x3f
 8003b80:	d903      	bls.n	8003b8a <Delay_switch+0xe>
		delayON = true;
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <Delay_switch+0x1c>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	709a      	strb	r2, [r3, #2]
	else {
		delayON = false;
		Delay_clean();
	}
}
 8003b88:	bd08      	pop	{r3, pc}
		delayON = false;
 8003b8a:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <Delay_switch+0x1c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	709a      	strb	r2, [r3, #2]
		Delay_clean();
 8003b90:	f7fe fc50 	bl	8002434 <Delay_clean>
}
 8003b94:	e7f8      	b.n	8003b88 <Delay_switch+0xc>
 8003b96:	bf00      	nop
 8003b98:	20003f38 	.word	0x20003f38

08003b9c <Filter_Random_switch>:
	else
		autoFilterON = true;
}
/*-------------------------------------------------------*/
void Filter_Random_switch(uint8_t val) {
	if (val > 63)
 8003b9c:	283f      	cmp	r0, #63	; 0x3f
 8003b9e:	d803      	bhi.n	8003ba8 <Filter_Random_switch+0xc>
		autoFilterON = true;
	else
		autoFilterON = false;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <Filter_Random_switch+0x14>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	70da      	strb	r2, [r3, #3]
}
 8003ba6:	4770      	bx	lr
		autoFilterON = true;
 8003ba8:	4b01      	ldr	r3, [pc, #4]	; (8003bb0 <Filter_Random_switch+0x14>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	70da      	strb	r2, [r3, #3]
 8003bae:	4770      	bx	lr
 8003bb0:	20003f38 	.word	0x20003f38

08003bb4 <Chorus_switch>:
		chorusON = true;
}
/*-------------------------------------------------------*/
void Chorus_switch(uint8_t val) {

	if (val > 63)
 8003bb4:	283f      	cmp	r0, #63	; 0x3f
 8003bb6:	d803      	bhi.n	8003bc0 <Chorus_switch+0xc>
		chorusON = true;
	else
		chorusON = false;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <Chorus_switch+0x14>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	711a      	strb	r2, [r3, #4]
}
 8003bbe:	4770      	bx	lr
		chorusON = true;
 8003bc0:	4b01      	ldr	r3, [pc, #4]	; (8003bc8 <Chorus_switch+0x14>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	711a      	strb	r2, [r3, #4]
 8003bc6:	4770      	bx	lr
 8003bc8:	20003f38 	.word	0x20003f38

08003bcc <Phaser_switch>:
/*-------------------------------------------------------*/
void Phaser_switch(uint8_t val) {

	if (val > 63)
 8003bcc:	283f      	cmp	r0, #63	; 0x3f
 8003bce:	d803      	bhi.n	8003bd8 <Phaser_switch+0xc>
		phaserON = true;
	else
		phaserON = false;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <Phaser_switch+0x14>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	715a      	strb	r2, [r3, #5]
}
 8003bd6:	4770      	bx	lr
		phaserON = true;
 8003bd8:	4b01      	ldr	r3, [pc, #4]	; (8003be0 <Phaser_switch+0x14>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	715a      	strb	r2, [r3, #5]
 8003bde:	4770      	bx	lr
 8003be0:	20003f38 	.word	0x20003f38

08003be4 <toggleSound>:
/*-------------------------------------------------------*/
void toggleSound(void) {
	if (sound < LAST_SOUND)
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <toggleSound+0x18>)
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b07      	cmp	r3, #7
 8003bea:	d903      	bls.n	8003bf4 <toggleSound+0x10>
		(sound)++;
	else
		sound = 0;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <toggleSound+0x18>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	705a      	strb	r2, [r3, #1]
}
 8003bf2:	4770      	bx	lr
		(sound)++;
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	4a01      	ldr	r2, [pc, #4]	; (8003bfc <toggleSound+0x18>)
 8003bf8:	7053      	strb	r3, [r2, #1]
 8003bfa:	4770      	bx	lr
 8003bfc:	20003f38 	.word	0x20003f38

08003c00 <Sound_set>:
		(sound)--;
	else
		sound = 0;
}
/*-------------------------------------------------------*/
void Sound_set(uint8_t val) {
 8003c00:	b500      	push	{lr}
 8003c02:	b083      	sub	sp, #12
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 8003c04:	ee07 0a90 	vmov	s15, r0
 8003c08:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003c0c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8003c38 <Sound_set+0x38>
 8003c10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003c14:	f003 f998 	bl	8006f48 <rintf>
 8003c18:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003c1c:	edcd 7a01 	vstr	s15, [sp, #4]
 8003c20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c24:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <Sound_set+0x3c>)
 8003c26:	7053      	strb	r3, [r2, #1]
	if (sound != ADDITIVE)
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d001      	beq.n	8003c30 <Sound_set+0x30>
		AdditiveGen_newWaveform();
 8003c2c:	f7ff f8d4 	bl	8002dd8 <AdditiveGen_newWaveform>
}
 8003c30:	b003      	add	sp, #12
 8003c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c36:	bf00      	nop
 8003c38:	3d61c387 	.word	0x3d61c387
 8003c3c:	20003f38 	.word	0x20003f38

08003c40 <FM_OP1_modInd_set>:

void FM_OP1_freq_set(uint8_t val) {
	FM_op_freq_set(&op1, val);
}
/*-------------------------------------------------------*/
void FM_OP1_modInd_set(uint8_t val) {
 8003c40:	b508      	push	{r3, lr}
	FM_op_modInd_set(&op1, val);
 8003c42:	4601      	mov	r1, r0
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <FM_OP1_modInd_set+0xc>)
 8003c46:	f7fe ff99 	bl	8002b7c <FM_op_modInd_set>
}
 8003c4a:	bd08      	pop	{r3, pc}
 8003c4c:	20003d98 	.word	0x20003d98

08003c50 <Synth_Init>:
	}
}

/*===============================================================================================================*/

void Synth_Init(void) {
 8003c50:	b508      	push	{r3, lr}
 8003c52:	ed2d 8b02 	vpush	{d8}

	vol = env = 1;
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <Synth_Init+0xf4>)
 8003c58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c5c:	609a      	str	r2, [r3, #8]
	sound = 0;
 8003c5e:	2200      	movs	r2, #0
 8003c60:	705a      	strb	r2, [r3, #1]
	autoFilterON = true;
 8003c62:	2101      	movs	r1, #1
 8003c64:	70d9      	strb	r1, [r3, #3]
	autoSound = 0;
 8003c66:	701a      	strb	r2, [r3, #0]
	chorusON = false;
 8003c68:	711a      	strb	r2, [r3, #4]
	delayON = true;
 8003c6a:	7099      	strb	r1, [r3, #2]
	phaserON = false;
 8003c6c:	715a      	strb	r2, [r3, #5]

	Delay_init();
 8003c6e:	f7fe fbcb 	bl	8002408 <Delay_init>
	drifter_init();
 8003c72:	f7fe fd13 	bl	800269c <drifter_init>
//	pitchGen_init();
	sequencer_init();
 8003c76:	f7ff fea3 	bl	80039c0 <sequencer_init>
	ADSR_init(&adsr);
 8003c7a:	4833      	ldr	r0, [pc, #204]	; (8003d48 <Synth_Init+0xf8>)
 8003c7c:	f7fd faa0 	bl	80011c0 <ADSR_init>
	Chorus_init();
 8003c80:	f7fe fa5e 	bl	8002140 <Chorus_init>
	PhaserInit();
 8003c84:	f7ff fa36 	bl	80030f4 <PhaserInit>
	SVF_init();
 8003c88:	f7ff fbc0 	bl	800340c <SVF_init>
	filterFreq = 0.25f;
 8003c8c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8003c90:	4a2e      	ldr	r2, [pc, #184]	; (8003d4c <Synth_Init+0xfc>)
 8003c92:	6013      	str	r3, [r2, #0]
	filterFreq2 = 0.25f;
 8003c94:	4a2e      	ldr	r2, [pc, #184]	; (8003d50 <Synth_Init+0x100>)
 8003c96:	6013      	str	r3, [r2, #0]
	osc_init(&op1, 0.8f, 587.f);
 8003c98:	eddf 8a2e 	vldr	s17, [pc, #184]	; 8003d54 <Synth_Init+0x104>
 8003c9c:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8003d58 <Synth_Init+0x108>
 8003ca0:	eef0 0a68 	vmov.f32	s1, s17
 8003ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8003ca8:	482c      	ldr	r0, [pc, #176]	; (8003d5c <Synth_Init+0x10c>)
 8003caa:	f7fe ff56 	bl	8002b5a <osc_init>
	osc_init(&op2, 0.8f, 587.f);
 8003cae:	eef0 0a68 	vmov.f32	s1, s17
 8003cb2:	eeb0 0a48 	vmov.f32	s0, s16
 8003cb6:	482a      	ldr	r0, [pc, #168]	; (8003d60 <Synth_Init+0x110>)
 8003cb8:	f7fe ff4f 	bl	8002b5a <osc_init>
	osc_init(&op3, 0.8f, 587.f);
 8003cbc:	eef0 0a68 	vmov.f32	s1, s17
 8003cc0:	eeb0 0a48 	vmov.f32	s0, s16
 8003cc4:	4827      	ldr	r0, [pc, #156]	; (8003d64 <Synth_Init+0x114>)
 8003cc6:	f7fe ff48 	bl	8002b5a <osc_init>
	osc_init(&op4, 0.8f, 587.f);
 8003cca:	eef0 0a68 	vmov.f32	s1, s17
 8003cce:	eeb0 0a48 	vmov.f32	s0, s16
 8003cd2:	4825      	ldr	r0, [pc, #148]	; (8003d68 <Synth_Init+0x118>)
 8003cd4:	f7fe ff41 	bl	8002b5a <osc_init>
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 8003cd8:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8003d6c <Synth_Init+0x11c>
 8003cdc:	eef1 0a06 	vmov.f32	s1, #22	; 0x40b00000  5.5
 8003ce0:	eeb0 0a48 	vmov.f32	s0, s16
 8003ce4:	4822      	ldr	r0, [pc, #136]	; (8003d70 <Synth_Init+0x120>)
 8003ce6:	f7fe ff38 	bl	8002b5a <osc_init>
	osc_init(&filt_lfo, 0, 0);
 8003cea:	eef0 0a48 	vmov.f32	s1, s16
 8003cee:	eeb0 0a48 	vmov.f32	s0, s16
 8003cf2:	4820      	ldr	r0, [pc, #128]	; (8003d74 <Synth_Init+0x124>)
 8003cf4:	f7fe ff31 	bl	8002b5a <osc_init>
	osc_init(&filt2_lfo, 0, 0);
 8003cf8:	eef0 0a48 	vmov.f32	s1, s16
 8003cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8003d00:	481d      	ldr	r0, [pc, #116]	; (8003d78 <Synth_Init+0x128>)
 8003d02:	f7fe ff2a 	bl	8002b5a <osc_init>
	osc_init(&amp_lfo, 0, 0);
 8003d06:	eef0 0a48 	vmov.f32	s1, s16
 8003d0a:	eeb0 0a48 	vmov.f32	s0, s16
 8003d0e:	481b      	ldr	r0, [pc, #108]	; (8003d7c <Synth_Init+0x12c>)
 8003d10:	f7fe ff23 	bl	8002b5a <osc_init>
	AdditiveGen_newWaveform();
 8003d14:	f7ff f860 	bl	8002dd8 <AdditiveGen_newWaveform>
	VCO_blepsaw_Init(&mbSawOsc);
 8003d18:	4819      	ldr	r0, [pc, #100]	; (8003d80 <Synth_Init+0x130>)
 8003d1a:	f7fd fbe7 	bl	80014ec <VCO_blepsaw_Init>
	VCO_bleprect_Init(&mbRectOsc);
 8003d1e:	4819      	ldr	r0, [pc, #100]	; (8003d84 <Synth_Init+0x134>)
 8003d20:	f7fd fbfc 	bl	800151c <VCO_bleprect_Init>
	VCO_bleptri_Init(&mbTriOsc);
 8003d24:	4818      	ldr	r0, [pc, #96]	; (8003d88 <Synth_Init+0x138>)
 8003d26:	f7fd fe15 	bl	8001954 <VCO_bleptri_Init>
	AttTime_set(MIDI_MAX);
 8003d2a:	207f      	movs	r0, #127	; 0x7f
 8003d2c:	f7fd fa9c 	bl	8001268 <AttTime_set>
	DecTime_set(MIDI_MAX);
 8003d30:	207f      	movs	r0, #127	; 0x7f
 8003d32:	f7fd fab1 	bl	8001298 <DecTime_set>
	RelTime_set(MIDI_MAX);
 8003d36:	207f      	movs	r0, #127	; 0x7f
 8003d38:	f7fd faea 	bl	8001310 <RelTime_set>
}
 8003d3c:	ecbd 8b02 	vpop	{d8}
 8003d40:	bd08      	pop	{r3, pc}
 8003d42:	bf00      	nop
 8003d44:	20003f38 	.word	0x20003f38
 8003d48:	2000007c 	.word	0x2000007c
 8003d4c:	20013bd8 	.word	0x20013bd8
 8003d50:	20013bdc 	.word	0x20013bdc
 8003d54:	4412c000 	.word	0x4412c000
 8003d58:	3f4ccccd 	.word	0x3f4ccccd
 8003d5c:	20003d98 	.word	0x20003d98
 8003d60:	20003d78 	.word	0x20003d78
 8003d64:	20003d58 	.word	0x20003d58
 8003d68:	20003d38 	.word	0x20003d38
 8003d6c:	00000000 	.word	0x00000000
 8003d70:	20003e70 	.word	0x20003e70
 8003d74:	20003e50 	.word	0x20003e50
 8003d78:	20003e30 	.word	0x20003e30
 8003d7c:	20003e10 	.word	0x20003e10
 8003d80:	20000b58 	.word	0x20000b58
 8003d84:	200005fc 	.word	0x200005fc
 8003d88:	200000a4 	.word	0x200000a4

08003d8c <sequencer_newStep_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newStep_action(void) // User callback function called by sequencer_process()
{
 8003d8c:	b510      	push	{r4, lr}
	if ((noteGen.automaticON || noteGen.chRequested)) {
 8003d8e:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <sequencer_newStep_action+0x144>)
 8003d90:	7b9b      	ldrb	r3, [r3, #14]
 8003d92:	b913      	cbnz	r3, 8003d9a <sequencer_newStep_action+0xe>
 8003d94:	4b4e      	ldr	r3, [pc, #312]	; (8003ed0 <sequencer_newStep_action+0x144>)
 8003d96:	7c1b      	ldrb	r3, [r3, #16]
 8003d98:	b133      	cbz	r3, 8003da8 <sequencer_newStep_action+0x1c>
		seq_sequence_new();
 8003d9a:	f7ff fdaf 	bl	80038fc <seq_sequence_new>
		noteGen.chRequested = false;
 8003d9e:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <sequencer_newStep_action+0x144>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	741a      	strb	r2, [r3, #16]
		AdditiveGen_newWaveform();
 8003da4:	f7ff f818 	bl	8002dd8 <AdditiveGen_newWaveform>
	}

	if ((noteGen.someNotesMuted) && (rintf(frand_a_b(0.4f, 1)) == 0))
 8003da8:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <sequencer_newStep_action+0x144>)
 8003daa:	7c5b      	ldrb	r3, [r3, #17]
 8003dac:	b163      	cbz	r3, 8003dc8 <sequencer_newStep_action+0x3c>
 8003dae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003db2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8003ed4 <sequencer_newStep_action+0x148>
 8003db6:	f7ff fa8f 	bl	80032d8 <frand_a_b>
 8003dba:	f003 f8c5 	bl	8006f48 <rintf>
 8003dbe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	d027      	beq.n	8003e18 <sequencer_newStep_action+0x8c>
		ADSR_keyOff(&adsr);
	else
		ADSR_keyOn(&adsr);
 8003dc8:	4843      	ldr	r0, [pc, #268]	; (8003ed8 <sequencer_newStep_action+0x14c>)
 8003dca:	f7fd fa0d 	bl	80011e8 <ADSR_keyOn>

	if (autoFilterON)
 8003dce:	4b43      	ldr	r3, [pc, #268]	; (8003edc <sequencer_newStep_action+0x150>)
 8003dd0:	78db      	ldrb	r3, [r3, #3]
 8003dd2:	bb2b      	cbnz	r3, 8003e20 <sequencer_newStep_action+0x94>
		SVF_directSetFilterValue(&SVFilter,
		Ts * 600.f * powf(5000.f / 600.f, frand_a_b(0, 1)));

	if (noteGen.transpose != 0) {
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <sequencer_newStep_action+0x144>)
 8003dd6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003dda:	bbab      	cbnz	r3, 8003e48 <sequencer_newStep_action+0xbc>
		noteGen.rootNote += noteGen.transpose;
		seq_transpose();
	}

	if (autoSound == 1) {
 8003ddc:	4b3f      	ldr	r3, [pc, #252]	; (8003edc <sequencer_newStep_action+0x150>)
 8003dde:	f993 3000 	ldrsb.w	r3, [r3]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d038      	beq.n	8003e58 <sequencer_newStep_action+0xcc>
		case 3:
			sound = VOICES3;
			break;
		}
	}
	if (autoSound == 2) {
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <sequencer_newStep_action+0x150>)
 8003de8:	f993 3000 	ldrsb.w	r3, [r3]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d054      	beq.n	8003e9a <sequencer_newStep_action+0x10e>
			sound = VOICES3;
		if (sound == ADDITIVE)
			AdditiveGen_newWaveform();
	}

	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 8003df0:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <sequencer_newStep_action+0x154>)
 8003df2:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 8003df6:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8003dfa:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <sequencer_newStep_action+0x158>)
 8003dfc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4c36      	ldr	r4, [pc, #216]	; (8003edc <sequencer_newStep_action+0x150>)
 8003e04:	60e3      	str	r3, [r4, #12]
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 8003e06:	eddf 0a38 	vldr	s1, [pc, #224]	; 8003ee8 <sequencer_newStep_action+0x15c>
 8003e0a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003ed4 <sequencer_newStep_action+0x148>
 8003e0e:	f7ff fa63 	bl	80032d8 <frand_a_b>
 8003e12:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8003e16:	bd10      	pop	{r4, pc}
		ADSR_keyOff(&adsr);
 8003e18:	482f      	ldr	r0, [pc, #188]	; (8003ed8 <sequencer_newStep_action+0x14c>)
 8003e1a:	f7fd f9ee 	bl	80011fa <ADSR_keyOff>
 8003e1e:	e7d6      	b.n	8003dce <sequencer_newStep_action+0x42>
		Ts * 600.f * powf(5000.f / 600.f, frand_a_b(0, 1)));
 8003e20:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e24:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003eec <sequencer_newStep_action+0x160>
 8003e28:	f7ff fa56 	bl	80032d8 <frand_a_b>
 8003e2c:	eef0 0a40 	vmov.f32	s1, s0
 8003e30:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003ef0 <sequencer_newStep_action+0x164>
 8003e34:	f003 f8e6 	bl	8007004 <powf>
		SVF_directSetFilterValue(&SVFilter,
 8003e38:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8003ef4 <sequencer_newStep_action+0x168>
 8003e3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003e40:	482d      	ldr	r0, [pc, #180]	; (8003ef8 <sequencer_newStep_action+0x16c>)
 8003e42:	f7ff fa9d 	bl	8003380 <SVF_directSetFilterValue>
 8003e46:	e7c5      	b.n	8003dd4 <sequencer_newStep_action+0x48>
		noteGen.rootNote += noteGen.transpose;
 8003e48:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <sequencer_newStep_action+0x144>)
 8003e4a:	8951      	ldrh	r1, [r2, #10]
 8003e4c:	fa11 f383 	uxtah	r3, r1, r3
 8003e50:	8153      	strh	r3, [r2, #10]
		seq_transpose();
 8003e52:	f7ff fd93 	bl	800397c <seq_transpose>
 8003e56:	e7c1      	b.n	8003ddc <sequencer_newStep_action+0x50>
		switch (rand() % 4) // 4 random timbers
 8003e58:	f002 ff30 	bl	8006cbc <rand>
 8003e5c:	4243      	negs	r3, r0
 8003e5e:	f000 0003 	and.w	r0, r0, #3
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	bf58      	it	pl
 8003e68:	4258      	negpl	r0, r3
 8003e6a:	2803      	cmp	r0, #3
 8003e6c:	d8bb      	bhi.n	8003de6 <sequencer_newStep_action+0x5a>
 8003e6e:	e8df f000 	tbb	[pc, r0]
 8003e72:	0602      	.short	0x0602
 8003e74:	100c      	.short	0x100c
			sound = CHORD135;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <sequencer_newStep_action+0x150>)
 8003e78:	2205      	movs	r2, #5
 8003e7a:	705a      	strb	r2, [r3, #1]
			break;
 8003e7c:	e7b3      	b.n	8003de6 <sequencer_newStep_action+0x5a>
			AdditiveGen_newWaveform();
 8003e7e:	f7fe ffab 	bl	8002dd8 <AdditiveGen_newWaveform>
			sound = ADDITIVE;
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <sequencer_newStep_action+0x150>)
 8003e84:	2204      	movs	r2, #4
 8003e86:	705a      	strb	r2, [r3, #1]
			break;
 8003e88:	e7ad      	b.n	8003de6 <sequencer_newStep_action+0x5a>
			sound = CHORD13min5;
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <sequencer_newStep_action+0x150>)
 8003e8c:	2206      	movs	r2, #6
 8003e8e:	705a      	strb	r2, [r3, #1]
			break;
 8003e90:	e7a9      	b.n	8003de6 <sequencer_newStep_action+0x5a>
			sound = VOICES3;
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <sequencer_newStep_action+0x150>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	705a      	strb	r2, [r3, #1]
			break;
 8003e98:	e7a5      	b.n	8003de6 <sequencer_newStep_action+0x5a>
		sound = rand() % LAST_SOUND;
 8003e9a:	f002 ff0f 	bl	8006cbc <rand>
 8003e9e:	4243      	negs	r3, r0
 8003ea0:	f000 0007 	and.w	r0, r0, #7
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	bf58      	it	pl
 8003eaa:	4258      	negpl	r0, r3
 8003eac:	b2c0      	uxtb	r0, r0
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <sequencer_newStep_action+0x150>)
 8003eb0:	7058      	strb	r0, [r3, #1]
		if ((sound == CHORD13min5) || (sound == CHORD135))
 8003eb2:	3805      	subs	r0, #5
 8003eb4:	b2c0      	uxtb	r0, r0
 8003eb6:	2801      	cmp	r0, #1
 8003eb8:	d906      	bls.n	8003ec8 <sequencer_newStep_action+0x13c>
		if (sound == ADDITIVE)
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <sequencer_newStep_action+0x150>)
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d196      	bne.n	8003df0 <sequencer_newStep_action+0x64>
			AdditiveGen_newWaveform();
 8003ec2:	f7fe ff89 	bl	8002dd8 <AdditiveGen_newWaveform>
 8003ec6:	e793      	b.n	8003df0 <sequencer_newStep_action+0x64>
			sound = VOICES3;
 8003ec8:	2207      	movs	r2, #7
 8003eca:	705a      	strb	r2, [r3, #1]
 8003ecc:	e7f5      	b.n	8003eba <sequencer_newStep_action+0x12e>
 8003ece:	bf00      	nop
 8003ed0:	20003f24 	.word	0x20003f24
 8003ed4:	3ecccccd 	.word	0x3ecccccd
 8003ed8:	2000007c 	.word	0x2000007c
 8003edc:	20003f38 	.word	0x20003f38
 8003ee0:	20003ed0 	.word	0x20003ed0
 8003ee4:	08015208 	.word	0x08015208
 8003ee8:	3f4ccccd 	.word	0x3f4ccccd
 8003eec:	00000000 	.word	0x00000000
 8003ef0:	41055555 	.word	0x41055555
 8003ef4:	3c5ee95c 	.word	0x3c5ee95c
 8003ef8:	20003e90 	.word	0x20003e90

08003efc <sequencer_newSequence_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newSequence_action(void) // User callback function called by sequencer_process()
{
 8003efc:	b508      	push	{r3, lr}
	/* A new sequence begins ... */
	if ((demoMode == true) && (freeze == false)) {
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <sequencer_newSequence_action+0x20>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	b113      	cbz	r3, 8003f0a <sequencer_newSequence_action+0xe>
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <sequencer_newSequence_action+0x24>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b103      	cbz	r3, 8003f0c <sequencer_newSequence_action+0x10>
		MagicPatch(MIDI_MAXi);
		MagicFX(MIDI_MAXi);
	}
}
 8003f0a:	bd08      	pop	{r3, pc}
		MagicPatch(MIDI_MAXi);
 8003f0c:	207f      	movs	r0, #127	; 0x7f
 8003f0e:	f7fc ffbf 	bl	8000e90 <MagicPatch>
		MagicFX(MIDI_MAXi);
 8003f12:	207f      	movs	r0, #127	; 0x7f
 8003f14:	f7fc ff7b 	bl	8000e0e <MagicFX>
}
 8003f18:	e7f7      	b.n	8003f0a <sequencer_newSequence_action+0xe>
 8003f1a:	bf00      	nop
 8003f1c:	200129dc 	.word	0x200129dc
 8003f20:	200129dd 	.word	0x200129dd

08003f24 <make_sound>:
/*===============================================================================================================*/

void make_sound(uint16_t *buf, uint16_t length) // To be used with the Sequencer
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	ed2d 8b04 	vpush	{d8-d9}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	460f      	mov	r7, r1
	float f1;
	uint16_t valueL, valueR;

	outp = buf;

	for (pos = 0; pos < length; pos++) {
 8003f30:	2400      	movs	r4, #0
 8003f32:	e073      	b.n	800401c <make_sound+0xf8>
		/*--- Sequencer actions and update ---*/
		//sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
		// GRA
		if (sequencerIsOn == true) {
			sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
 8003f34:	f7ff fd74 	bl	8003a20 <sequencer_process>
 8003f38:	e09c      	b.n	8004074 <make_sound+0x150>

		// GRA

		if (sequencerIsOn == true) {
			if (adsr.cnt_ >= seq.gateTime)
				ADSR_keyOff(&adsr);
 8003f3a:	4886      	ldr	r0, [pc, #536]	; (8004154 <make_sound+0x230>)
 8003f3c:	f7fd f95d 	bl	80011fa <ADSR_keyOff>
 8003f40:	e0c5      	b.n	80040ce <make_sound+0x1aa>
		/*--- Apply filter effect ---*/
		/* Update the filters cutoff frequencies */
		if ((!autoFilterON) && (filt_lfo.amp != 0))
			SVF_directSetFilterValue(&SVFilter,
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
		if (filt2_lfo.amp != 0)
 8003f42:	4b85      	ldr	r3, [pc, #532]	; (8004158 <make_sound+0x234>)
 8003f44:	edd3 7a00 	vldr	s15, [r3]
 8003f48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f50:	f040 80db 	bne.w	800410a <make_sound+0x1e6>
			SVF_directSetFilterValue(&SVFilter2,
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
		y =
				0.5f
						* (SVF_calcSample(&SVFilter, y)
 8003f54:	eeb0 0a48 	vmov.f32	s0, s16
 8003f58:	4880      	ldr	r0, [pc, #512]	; (800415c <make_sound+0x238>)
 8003f5a:	f7ff faf9 	bl	8003550 <SVF_calcSample>
 8003f5e:	eef0 8a40 	vmov.f32	s17, s0
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 8003f62:	eeb0 0a48 	vmov.f32	s0, s16
 8003f66:	487e      	ldr	r0, [pc, #504]	; (8004160 <make_sound+0x23c>)
 8003f68:	f7ff faf2 	bl	8003550 <SVF_calcSample>
 8003f6c:	ee38 0a80 	vadd.f32	s0, s17, s0
		y =
 8003f70:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003f74:	ee20 0a27 	vmul.f32	s0, s0, s15

		/*---  Apply delay effect ----*/
		if (delayON)
 8003f78:	4b7a      	ldr	r3, [pc, #488]	; (8004164 <make_sound+0x240>)
 8003f7a:	789b      	ldrb	r3, [r3, #2]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 80d4 	bne.w	800412a <make_sound+0x206>
			y = Delay_compute(y);

		/*---  Apply phaser effect ----*/
		if (phaserON)
 8003f82:	4b78      	ldr	r3, [pc, #480]	; (8004164 <make_sound+0x240>)
 8003f84:	795b      	ldrb	r3, [r3, #5]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 80d2 	bne.w	8004130 <make_sound+0x20c>
			y = Phaser_compute(y);

		/*--- Apply chorus/flanger effect ---*/
		if (chorusON)
 8003f8c:	4b75      	ldr	r3, [pc, #468]	; (8004164 <make_sound+0x240>)
 8003f8e:	791b      	ldrb	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 80d0 	bne.w	8004136 <make_sound+0x212>
			stereoChorus_compute(&yL, &yR, y);
		else
			yL = yR = y;
 8003f96:	ed8d 0a00 	vstr	s0, [sp]
 8003f9a:	ed8d 0a01 	vstr	s0, [sp, #4]

		/*--- clipping ---*/
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 8003f9e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003fa2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fae:	dd01      	ble.n	8003fb4 <make_sound+0x90>
 8003fb0:	eeb0 7a67 	vmov.f32	s14, s15
		yL = (yL < -1.0f) ? -1.0f : yL;
 8003fb4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc0:	f100 80be 	bmi.w	8004140 <make_sound+0x21c>
 8003fc4:	ed8d 7a01 	vstr	s14, [sp, #4]

		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 8003fc8:	eddd 7a00 	vldr	s15, [sp]
 8003fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	dd01      	ble.n	8003fde <make_sound+0xba>
 8003fda:	eef0 7a66 	vmov.f32	s15, s13
		yR = (yR < -1.0f) ? -1.0f : yR;
 8003fde:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8003fe2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	f100 80ac 	bmi.w	8004146 <make_sound+0x222>
 8003fee:	edcd 7a00 	vstr	s15, [sp]

		/****** let's hear the new sample *******/

		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 8003ff2:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004168 <make_sound+0x244>
 8003ff6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003ffa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 8003ffe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004002:	eefd 7ae7 	vcvt.s32.f32	s15, s15

		*outp++ = valueL; // left channel sample
 8004006:	4633      	mov	r3, r6
 8004008:	ee17 2a10 	vmov	r2, s14
 800400c:	f823 2b04 	strh.w	r2, [r3], #4
		*outp++ = valueR; // right channel sample
 8004010:	ee17 2a90 	vmov	r2, s15
 8004014:	8072      	strh	r2, [r6, #2]
	for (pos = 0; pos < length; pos++) {
 8004016:	3401      	adds	r4, #1
 8004018:	b2a4      	uxth	r4, r4
		*outp++ = valueR; // right channel sample
 800401a:	461e      	mov	r6, r3
	for (pos = 0; pos < length; pos++) {
 800401c:	42bc      	cmp	r4, r7
 800401e:	f080 8095 	bcs.w	800414c <make_sound+0x228>
		if (sequencerIsOn == true) {
 8004022:	4b52      	ldr	r3, [pc, #328]	; (800416c <make_sound+0x248>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d184      	bne.n	8003f34 <make_sound+0x10>
			 f0 = (notesFreq[currentNote] + currentFreq) / 2;
 800402a:	4b51      	ldr	r3, [pc, #324]	; (8004170 <make_sound+0x24c>)
 800402c:	f993 2000 	ldrsb.w	r2, [r3]
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <make_sound+0x250>)
 8004032:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004036:	ed93 7a00 	vldr	s14, [r3]
 800403a:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <make_sound+0x254>)
 800403c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004048:	ee77 7a87 	vadd.f32	s15, s15, s14
 800404c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <make_sound+0x240>)
 8004056:	edc3 7a03 	vstr	s15, [r3, #12]
			vol = (float) velocity / 127.0f;
 800405a:	4a48      	ldr	r2, [pc, #288]	; (800417c <make_sound+0x258>)
 800405c:	f992 2000 	ldrsb.w	r2, [r2]
 8004060:	ee07 2a90 	vmov	s15, r2
 8004064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004068:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004180 <make_sound+0x25c>
 800406c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004070:	ed83 7a02 	vstr	s14, [r3, #8]
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 8004074:	4843      	ldr	r0, [pc, #268]	; (8004184 <make_sound+0x260>)
 8004076:	f7fe fd97 	bl	8002ba8 <Osc_WT_SINE_SampleCompute>
 800407a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800407e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8004082:	4d38      	ldr	r5, [pc, #224]	; (8004164 <make_sound+0x240>)
 8004084:	edd5 7a03 	vldr	s15, [r5, #12]
		y = waveCompute(sound, f1);
 8004088:	ee20 0a27 	vmul.f32	s0, s0, s15
 800408c:	7868      	ldrb	r0, [r5, #1]
 800408e:	f7fe ff49 	bl	8002f24 <waveCompute>
 8004092:	eeb0 9a40 	vmov.f32	s18, s0
		env = ADSR_computeSample(&adsr)
 8004096:	482f      	ldr	r0, [pc, #188]	; (8004154 <make_sound+0x230>)
 8004098:	f7fd f956 	bl	8001348 <ADSR_computeSample>
 800409c:	eef0 8a40 	vmov.f32	s17, s0
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80040a0:	4839      	ldr	r0, [pc, #228]	; (8004188 <make_sound+0x264>)
 80040a2:	f7fe fd81 	bl	8002ba8 <Osc_WT_SINE_SampleCompute>
 80040a6:	ee30 8a08 	vadd.f32	s16, s0, s16
 80040aa:	ee28 8a88 	vmul.f32	s16, s17, s16
		y *= vol * env; // apply volume and envelop
 80040ae:	edd5 8a02 	vldr	s17, [r5, #8]
 80040b2:	ee28 8a28 	vmul.f32	s16, s16, s17
 80040b6:	ee28 8a09 	vmul.f32	s16, s16, s18
		if (sequencerIsOn == true) {
 80040ba:	4b2c      	ldr	r3, [pc, #176]	; (800416c <make_sound+0x248>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b133      	cbz	r3, 80040ce <make_sound+0x1aa>
			if (adsr.cnt_ >= seq.gateTime)
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <make_sound+0x230>)
 80040c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c4:	4b31      	ldr	r3, [pc, #196]	; (800418c <make_sound+0x268>)
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	429a      	cmp	r2, r3
 80040ca:	f4bf af36 	bcs.w	8003f3a <make_sound+0x16>
		if ((!autoFilterON) && (filt_lfo.amp != 0))
 80040ce:	4b25      	ldr	r3, [pc, #148]	; (8004164 <make_sound+0x240>)
 80040d0:	78db      	ldrb	r3, [r3, #3]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f47f af35 	bne.w	8003f42 <make_sound+0x1e>
 80040d8:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <make_sound+0x26c>)
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e6:	f43f af2c 	beq.w	8003f42 <make_sound+0x1e>
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fda6 	bl	8002c3c <OpSampleCompute7bis>
 80040f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80040f4:	ee30 0a27 	vadd.f32	s0, s0, s15
			SVF_directSetFilterValue(&SVFilter,
 80040f8:	4b26      	ldr	r3, [pc, #152]	; (8004194 <make_sound+0x270>)
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004102:	4816      	ldr	r0, [pc, #88]	; (800415c <make_sound+0x238>)
 8004104:	f7ff f93c 	bl	8003380 <SVF_directSetFilterValue>
 8004108:	e71b      	b.n	8003f42 <make_sound+0x1e>
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fd96 	bl	8002c3c <OpSampleCompute7bis>
 8004110:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004114:	ee30 0a27 	vadd.f32	s0, s0, s15
			SVF_directSetFilterValue(&SVFilter2,
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <make_sound+0x274>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004122:	480f      	ldr	r0, [pc, #60]	; (8004160 <make_sound+0x23c>)
 8004124:	f7ff f92c 	bl	8003380 <SVF_directSetFilterValue>
 8004128:	e714      	b.n	8003f54 <make_sound+0x30>
			y = Delay_compute(y);
 800412a:	f7fe f9e1 	bl	80024f0 <Delay_compute>
 800412e:	e728      	b.n	8003f82 <make_sound+0x5e>
			y = Phaser_compute(y);
 8004130:	f7ff f84c 	bl	80031cc <Phaser_compute>
 8004134:	e72a      	b.n	8003f8c <make_sound+0x68>
			stereoChorus_compute(&yL, &yR, y);
 8004136:	4669      	mov	r1, sp
 8004138:	a801      	add	r0, sp, #4
 800413a:	f7fe f945 	bl	80023c8 <stereoChorus_compute>
 800413e:	e72e      	b.n	8003f9e <make_sound+0x7a>
		yL = (yL < -1.0f) ? -1.0f : yL;
 8004140:	eeb0 7a67 	vmov.f32	s14, s15
 8004144:	e73e      	b.n	8003fc4 <make_sound+0xa0>
		yR = (yR < -1.0f) ? -1.0f : yR;
 8004146:	eef0 7a66 	vmov.f32	s15, s13
 800414a:	e750      	b.n	8003fee <make_sound+0xca>
	}

}
 800414c:	b003      	add	sp, #12
 800414e:	ecbd 8b04 	vpop	{d8-d9}
 8004152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004154:	2000007c 	.word	0x2000007c
 8004158:	20003e30 	.word	0x20003e30
 800415c:	20003e90 	.word	0x20003e90
 8004160:	20003eb0 	.word	0x20003eb0
 8004164:	20003f38 	.word	0x20003f38
 8004168:	46fffe00 	.word	0x46fffe00
 800416c:	200129de 	.word	0x200129de
 8004170:	20012a3a 	.word	0x20012a3a
 8004174:	08015208 	.word	0x08015208
 8004178:	20012a38 	.word	0x20012a38
 800417c:	20012a3b 	.word	0x20012a3b
 8004180:	42fe0000 	.word	0x42fe0000
 8004184:	20003e70 	.word	0x20003e70
 8004188:	20003e10 	.word	0x20003e10
 800418c:	20003ed0 	.word	0x20003ed0
 8004190:	20003e50 	.word	0x20003e50
 8004194:	20013bd8 	.word	0x20013bd8
 8004198:	20013bdc 	.word	0x20013bdc

0800419c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800419c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419e:	2100      	movs	r1, #0
 80041a0:	9100      	str	r1, [sp, #0]
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_MspInit+0x34>)
 80041a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44
 80041ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80041b2:	9200      	str	r2, [sp, #0]
 80041b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	9101      	str	r1, [sp, #4]
 80041b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041be:	641a      	str	r2, [r3, #64]	; 0x40
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ca:	b002      	add	sp, #8
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041d4:	b530      	push	{r4, r5, lr}
 80041d6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d8:	2300      	movs	r3, #0
 80041da:	9303      	str	r3, [sp, #12]
 80041dc:	9304      	str	r3, [sp, #16]
 80041de:	9305      	str	r3, [sp, #20]
 80041e0:	9306      	str	r3, [sp, #24]
 80041e2:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80041e4:	6802      	ldr	r2, [r0, #0]
 80041e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041ea:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d001      	beq.n	80041f6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80041f2:	b009      	add	sp, #36	; 0x24
 80041f4:	bd30      	pop	{r4, r5, pc}
 80041f6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041f8:	2500      	movs	r5, #0
 80041fa:	9501      	str	r5, [sp, #4]
 80041fc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004206:	645a      	str	r2, [r3, #68]	; 0x44
 8004208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800420e:	9201      	str	r2, [sp, #4]
 8004210:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004212:	9502      	str	r5, [sp, #8]
 8004214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004216:	f042 0204 	orr.w	r2, r2, #4
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004226:	230f      	movs	r3, #15
 8004228:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800422a:	2303      	movs	r3, #3
 800422c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800422e:	a903      	add	r1, sp, #12
 8004230:	4810      	ldr	r0, [pc, #64]	; (8004274 <HAL_ADC_MspInit+0xa0>)
 8004232:	f001 f831 	bl	8005298 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004236:	4810      	ldr	r0, [pc, #64]	; (8004278 <HAL_ADC_MspInit+0xa4>)
 8004238:	4b10      	ldr	r3, [pc, #64]	; (800427c <HAL_ADC_MspInit+0xa8>)
 800423a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800423c:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800423e:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004240:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004246:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800424c:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800424e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004252:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004258:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800425a:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800425c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800425e:	f000 fe91 	bl	8004f84 <HAL_DMA_Init>
 8004262:	b918      	cbnz	r0, 800426c <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <HAL_ADC_MspInit+0xa4>)
 8004266:	63a3      	str	r3, [r4, #56]	; 0x38
 8004268:	639c      	str	r4, [r3, #56]	; 0x38
}
 800426a:	e7c2      	b.n	80041f2 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800426c:	f7fe fbe6 	bl	8002a3c <Error_Handler>
 8004270:	e7f8      	b.n	8004264 <HAL_ADC_MspInit+0x90>
 8004272:	bf00      	nop
 8004274:	40020800 	.word	0x40020800
 8004278:	20013ac0 	.word	0x20013ac0
 800427c:	40026410 	.word	0x40026410

08004280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004280:	b530      	push	{r4, r5, lr}
 8004282:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	2300      	movs	r3, #0
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	9304      	str	r3, [sp, #16]
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	9306      	str	r3, [sp, #24]
 800428e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8004290:	6802      	ldr	r2, [r0, #0]
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_I2C_MspInit+0x68>)
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004298:	b009      	add	sp, #36	; 0x24
 800429a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800429c:	2500      	movs	r5, #0
 800429e:	9501      	str	r5, [sp, #4]
 80042a0:	4c12      	ldr	r4, [pc, #72]	; (80042ec <HAL_I2C_MspInit+0x6c>)
 80042a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	6323      	str	r3, [r4, #48]	; 0x30
 80042aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80042b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ba:	2312      	movs	r3, #18
 80042bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042be:	2301      	movs	r3, #1
 80042c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80042c6:	2304      	movs	r3, #4
 80042c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ca:	a903      	add	r1, sp, #12
 80042cc:	4808      	ldr	r0, [pc, #32]	; (80042f0 <HAL_I2C_MspInit+0x70>)
 80042ce:	f000 ffe3 	bl	8005298 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80042d2:	9502      	str	r5, [sp, #8]
 80042d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042da:	6423      	str	r3, [r4, #64]	; 0x40
 80042dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	9302      	str	r3, [sp, #8]
 80042e4:	9b02      	ldr	r3, [sp, #8]
}
 80042e6:	e7d7      	b.n	8004298 <HAL_I2C_MspInit+0x18>
 80042e8:	40005800 	.word	0x40005800
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40020400 	.word	0x40020400

080042f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80042f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fa:	2300      	movs	r3, #0
 80042fc:	9303      	str	r3, [sp, #12]
 80042fe:	9304      	str	r3, [sp, #16]
 8004300:	9305      	str	r3, [sp, #20]
 8004302:	9306      	str	r3, [sp, #24]
 8004304:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI2)
 8004306:	6802      	ldr	r2, [r0, #0]
 8004308:	4b38      	ldr	r3, [pc, #224]	; (80043ec <HAL_I2S_MspInit+0xf8>)
 800430a:	429a      	cmp	r2, r3
 800430c:	d002      	beq.n	8004314 <HAL_I2S_MspInit+0x20>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800430e:	b008      	add	sp, #32
 8004310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004314:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004316:	2500      	movs	r5, #0
 8004318:	9500      	str	r5, [sp, #0]
 800431a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800431e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
 8004326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004328:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800432c:	9200      	str	r2, [sp, #0]
 800432e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004330:	9501      	str	r5, [sp, #4]
 8004332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004334:	f042 0202 	orr.w	r2, r2, #2
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
 800433a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433c:	f002 0202 	and.w	r2, r2, #2
 8004340:	9201      	str	r2, [sp, #4]
 8004342:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004344:	9502      	str	r5, [sp, #8]
 8004346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004348:	f042 0204 	orr.w	r2, r2, #4
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	9302      	str	r3, [sp, #8]
 8004356:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8004358:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800435c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435e:	2602      	movs	r6, #2
 8004360:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004362:	f04f 0805 	mov.w	r8, #5
 8004366:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436a:	4f21      	ldr	r7, [pc, #132]	; (80043f0 <HAL_I2S_MspInit+0xfc>)
 800436c:	a903      	add	r1, sp, #12
 800436e:	4638      	mov	r0, r7
 8004370:	f000 ff92 	bl	8005298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004374:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004378:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004380:	2306      	movs	r3, #6
 8004382:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004384:	a903      	add	r1, sp, #12
 8004386:	4638      	mov	r0, r7
 8004388:	f000 ff86 	bl	8005298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800438c:	2740      	movs	r7, #64	; 0x40
 800438e:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004390:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004394:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004396:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800439a:	a903      	add	r1, sp, #12
 800439c:	4815      	ldr	r0, [pc, #84]	; (80043f4 <HAL_I2S_MspInit+0x100>)
 800439e:	f000 ff7b 	bl	8005298 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80043a2:	4815      	ldr	r0, [pc, #84]	; (80043f8 <HAL_I2S_MspInit+0x104>)
 80043a4:	4b15      	ldr	r3, [pc, #84]	; (80043fc <HAL_I2S_MspInit+0x108>)
 80043a6:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80043a8:	6045      	str	r5, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043aa:	6087      	str	r7, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ac:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b2:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043b8:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043be:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80043c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c4:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80043c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ca:	6203      	str	r3, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80043cc:	2304      	movs	r3, #4
 80043ce:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80043d0:	2303      	movs	r3, #3
 80043d2:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80043d4:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80043d6:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80043d8:	f000 fdd4 	bl	8004f84 <HAL_DMA_Init>
 80043dc:	b918      	cbnz	r0, 80043e6 <HAL_I2S_MspInit+0xf2>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_I2S_MspInit+0x104>)
 80043e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80043e2:	639c      	str	r4, [r3, #56]	; 0x38
}
 80043e4:	e793      	b.n	800430e <HAL_I2S_MspInit+0x1a>
      Error_Handler();
 80043e6:	f7fe fb29 	bl	8002a3c <Error_Handler>
 80043ea:	e7f8      	b.n	80043de <HAL_I2S_MspInit+0xea>
 80043ec:	40003800 	.word	0x40003800
 80043f0:	40020400 	.word	0x40020400
 80043f4:	40020800 	.word	0x40020800
 80043f8:	20013b30 	.word	0x20013b30
 80043fc:	40026070 	.word	0x40026070

08004400 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004400:	6802      	ldr	r2, [r0, #0]
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RNG_MspInit+0x28>)
 8004404:	429a      	cmp	r2, r3
 8004406:	d000      	beq.n	800440a <HAL_RNG_MspInit+0xa>
 8004408:	4770      	bx	lr
{
 800440a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800440c:	2300      	movs	r3, #0
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RNG_MspInit+0x2c>)
 8004412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004418:	635a      	str	r2, [r3, #52]	; 0x34
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004424:	b002      	add	sp, #8
 8004426:	4770      	bx	lr
 8004428:	50060800 	.word	0x50060800
 800442c:	40023800 	.word	0x40023800

08004430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004430:	b500      	push	{lr}
 8004432:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	2300      	movs	r3, #0
 8004436:	9303      	str	r3, [sp, #12]
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	9305      	str	r3, [sp, #20]
 800443c:	9306      	str	r3, [sp, #24]
 800443e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8004440:	6802      	ldr	r2, [r0, #0]
 8004442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004446:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800444a:	429a      	cmp	r2, r3
 800444c:	d002      	beq.n	8004454 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800444e:	b009      	add	sp, #36	; 0x24
 8004450:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8004454:	2100      	movs	r1, #0
 8004456:	9101      	str	r1, [sp, #4]
 8004458:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800445c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445e:	f042 0210 	orr.w	r2, r2, #16
 8004462:	645a      	str	r2, [r3, #68]	; 0x44
 8004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004466:	f002 0210 	and.w	r2, r2, #16
 800446a:	9201      	str	r2, [sp, #4]
 800446c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446e:	9102      	str	r1, [sp, #8]
 8004470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004472:	f042 0202 	orr.w	r2, r2, #2
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004482:	23c0      	movs	r3, #192	; 0xc0
 8004484:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004486:	2302      	movs	r3, #2
 8004488:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448a:	2303      	movs	r3, #3
 800448c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800448e:	2307      	movs	r3, #7
 8004490:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004492:	a903      	add	r1, sp, #12
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <HAL_UART_MspInit+0x6c>)
 8004496:	f000 feff 	bl	8005298 <HAL_GPIO_Init>
}
 800449a:	e7d8      	b.n	800444e <HAL_UART_MspInit+0x1e>
 800449c:	40020400 	.word	0x40020400

080044a0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044a0:	4770      	bx	lr

080044a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a2:	e7fe      	b.n	80044a2 <HardFault_Handler>

080044a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a4:	e7fe      	b.n	80044a4 <MemManage_Handler>

080044a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044a6:	e7fe      	b.n	80044a6 <BusFault_Handler>

080044a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044a8:	e7fe      	b.n	80044a8 <UsageFault_Handler>

080044aa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044aa:	4770      	bx	lr

080044ac <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044ac:	4770      	bx	lr

080044ae <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044ae:	4770      	bx	lr

080044b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044b2:	f000 f9d5 	bl	8004860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TimingDelay_Decrement();
 80044b6:	f000 f887 	bl	80045c8 <TimingDelay_Decrement>
  update_temporized_LED();
 80044ba:	f000 f8a9 	bl	8004610 <update_temporized_LED>
	DebounceFireButton();
 80044be:	f000 f8bf 	bl	8004640 <DebounceFireButton>
  DebounceHoldSwitch();
 80044c2:	f000 f8ed 	bl	80046a0 <DebounceHoldSwitch>
  /* USER CODE END SysTick_IRQn 1 */
}
 80044c6:	bd08      	pop	{r3, pc}

080044c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80044c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  // toggleSound();
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80044ca:	2010      	movs	r0, #16
 80044cc:	f000 ffd6 	bl	800547c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80044d0:	bd08      	pop	{r3, pc}
	...

080044d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80044d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80044d6:	4802      	ldr	r0, [pc, #8]	; (80044e0 <DMA1_Stream4_IRQHandler+0xc>)
 80044d8:	f000 fdf0 	bl	80050bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80044dc:	bd08      	pop	{r3, pc}
 80044de:	bf00      	nop
 80044e0:	20013b30 	.word	0x20013b30

080044e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80044e4:	b510      	push	{r4, lr}
  // if(__HAL_GPIO_EXTI_GET_FLAG(FIRE_BTN_Pin)) {
	//  Trigger();
  // }


  if(__HAL_GPIO_EXTI_GET_FLAG(SND_SW1_Pin) || __HAL_GPIO_EXTI_GET_FLAG(SND_SW2_Pin) || __HAL_GPIO_EXTI_GET_FLAG(SND_SW3_Pin) || __HAL_GPIO_EXTI_GET_FLAG(SND_SW4_Pin)) {
 80044e6:	4b19      	ldr	r3, [pc, #100]	; (800454c <EXTI9_5_IRQHandler+0x68>)
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044ee:	d10e      	bne.n	800450e <EXTI9_5_IRQHandler+0x2a>
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <EXTI9_5_IRQHandler+0x68>)
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044f8:	d109      	bne.n	800450e <EXTI9_5_IRQHandler+0x2a>
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <EXTI9_5_IRQHandler+0x68>)
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f013 0f10 	tst.w	r3, #16
 8004502:	d104      	bne.n	800450e <EXTI9_5_IRQHandler+0x2a>
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <EXTI9_5_IRQHandler+0x68>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f013 0f20 	tst.w	r3, #32
 800450c:	d014      	beq.n	8004538 <EXTI9_5_IRQHandler+0x54>
	  bool sound_switch_1 = HAL_GPIO_ReadPin(SND_SW1_GPIO_Port, SND_SW1_Pin);
 800450e:	4c10      	ldr	r4, [pc, #64]	; (8004550 <EXTI9_5_IRQHandler+0x6c>)
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	4620      	mov	r0, r4
 8004514:	f000 ffa4 	bl	8005460 <HAL_GPIO_ReadPin>
	  bool sound_switch_2 = HAL_GPIO_ReadPin(SND_SW2_GPIO_Port, SND_SW2_Pin);
 8004518:	2180      	movs	r1, #128	; 0x80
 800451a:	4620      	mov	r0, r4
 800451c:	f000 ffa0 	bl	8005460 <HAL_GPIO_ReadPin>
	  bool sound_switch_3 = HAL_GPIO_ReadPin(SND_SW3_GPIO_Port, SND_SW3_Pin);
 8004520:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004524:	2110      	movs	r1, #16
 8004526:	4620      	mov	r0, r4
 8004528:	f000 ff9a 	bl	8005460 <HAL_GPIO_ReadPin>
	  bool sound_switch_4 = HAL_GPIO_ReadPin(SND_SW4_GPIO_Port, SND_SW4_Pin);
 800452c:	2120      	movs	r1, #32
 800452e:	4620      	mov	r0, r4
 8004530:	f000 ff96 	bl	8005460 <HAL_GPIO_ReadPin>
	  bool bits[4] = {sound_switch_1, sound_switch_2, sound_switch_3, sound_switch_4};

    // uint8_t test6 = f(bits);
    // test5 = test6;
    toggleSound();
 8004534:	f7ff fb56 	bl	8003be4 <toggleSound>
	  //    calculate the values using osciliscope
	  //

  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004538:	2020      	movs	r0, #32
 800453a:	f000 ff9f 	bl	800547c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800453e:	2040      	movs	r0, #64	; 0x40
 8004540:	f000 ff9c 	bl	800547c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004544:	2080      	movs	r0, #128	; 0x80
 8004546:	f000 ff99 	bl	800547c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800454a:	bd10      	pop	{r4, pc}
 800454c:	40013c00 	.word	0x40013c00
 8004550:	40020000 	.word	0x40020000

08004554 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004554:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004556:	4802      	ldr	r0, [pc, #8]	; (8004560 <DMA2_Stream0_IRQHandler+0xc>)
 8004558:	f000 fdb0 	bl	80050bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800455c:	bd08      	pop	{r3, pc}
 800455e:	bf00      	nop
 8004560:	20013ac0 	.word	0x20013ac0

08004564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004564:	b510      	push	{r4, lr}
 8004566:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004568:	4a0c      	ldr	r2, [pc, #48]	; (800459c <_sbrk+0x38>)
 800456a:	490d      	ldr	r1, [pc, #52]	; (80045a0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800456c:	480d      	ldr	r0, [pc, #52]	; (80045a4 <_sbrk+0x40>)
 800456e:	6800      	ldr	r0, [r0, #0]
 8004570:	b140      	cbz	r0, 8004584 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004572:	480c      	ldr	r0, [pc, #48]	; (80045a4 <_sbrk+0x40>)
 8004574:	6800      	ldr	r0, [r0, #0]
 8004576:	4403      	add	r3, r0
 8004578:	1a52      	subs	r2, r2, r1
 800457a:	4293      	cmp	r3, r2
 800457c:	d806      	bhi.n	800458c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800457e:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <_sbrk+0x40>)
 8004580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004582:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004584:	4807      	ldr	r0, [pc, #28]	; (80045a4 <_sbrk+0x40>)
 8004586:	4c08      	ldr	r4, [pc, #32]	; (80045a8 <_sbrk+0x44>)
 8004588:	6004      	str	r4, [r0, #0]
 800458a:	e7f2      	b.n	8004572 <_sbrk+0xe>
    errno = ENOMEM;
 800458c:	f002 fb56 	bl	8006c3c <__errno>
 8004590:	230c      	movs	r3, #12
 8004592:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004598:	e7f3      	b.n	8004582 <_sbrk+0x1e>
 800459a:	bf00      	nop
 800459c:	20020000 	.word	0x20020000
 80045a0:	00000400 	.word	0x00000400
 80045a4:	20012a18 	.word	0x20012a18
 80045a8:	20013c08 	.word	0x20013c08

080045ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <SystemInit+0x18>)
 80045ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80045b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045be:	609a      	str	r2, [r3, #8]
#endif
}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <TimingDelay_Decrement>:
 * @param  None
 * @retval None
 */
void TimingDelay_Decrement(void)
{
	if (TimingDelay != 0)
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <TimingDelay_Decrement+0x1c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	b113      	cbz	r3, 80045d4 <TimingDelay_Decrement+0xc>
	{
		TimingDelay--;
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <TimingDelay_Decrement+0x1c>)
 80045d2:	6013      	str	r3, [r2, #0]
	}
	if (TimingDelay1 != 0)
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <TimingDelay_Decrement+0x20>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	b113      	cbz	r3, 80045e0 <TimingDelay_Decrement+0x18>
	{
		TimingDelay1--;
 80045da:	3b01      	subs	r3, #1
 80045dc:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <TimingDelay_Decrement+0x20>)
 80045de:	6013      	str	r3, [r2, #0]
	}
}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20012a20 	.word	0x20012a20
 80045e8:	20012a24 	.word	0x20012a24

080045ec <PS_StartBPMLED>:
 *     @arg LED5
 *     @arg LED6
 * @retval None
 */
void PS_StartBPMLED()
{
 80045ec:	b508      	push	{r3, lr}
	PS_LED_On();
 80045ee:	f7fc fd27 	bl	8001040 <PS_LED_On>
	LED_counter[0] = shift / 10;
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <PS_StartBPMLED+0x18>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a04      	ldr	r2, [pc, #16]	; (8004608 <PS_StartBPMLED+0x1c>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	08db      	lsrs	r3, r3, #3
 80045fe:	4a03      	ldr	r2, [pc, #12]	; (800460c <PS_StartBPMLED+0x20>)
 8004600:	6013      	str	r3, [r2, #0]
}
 8004602:	bd08      	pop	{r3, pc}
 8004604:	200139e0 	.word	0x200139e0
 8004608:	cccccccd 	.word	0xcccccccd
 800460c:	20013be0 	.word	0x20013be0

08004610 <update_temporized_LED>:
/*------------------------------------------------------------------------------------*/
/* Function called by SysTick_Handler()  */
void update_temporized_LED()
{
 8004610:	b508      	push	{r3, lr}
	LED_counter[0]--;
 8004612:	4a08      	ldr	r2, [pc, #32]	; (8004634 <update_temporized_LED+0x24>)
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	3b01      	subs	r3, #1
 8004618:	6013      	str	r3, [r2, #0]
	if (LED_counter[0] == 0) {
 800461a:	b103      	cbz	r3, 800461e <update_temporized_LED+0xe>
		PS_LED_Toggle();
		LED_counter[0] = shift / 10;
	}
}
 800461c:	bd08      	pop	{r3, pc}
		PS_LED_Toggle();
 800461e:	f7fc fd1d 	bl	800105c <PS_LED_Toggle>
		LED_counter[0] = shift / 10;
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <update_temporized_LED+0x28>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a05      	ldr	r2, [pc, #20]	; (800463c <update_temporized_LED+0x2c>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	4a01      	ldr	r2, [pc, #4]	; (8004634 <update_temporized_LED+0x24>)
 8004630:	6013      	str	r3, [r2, #0]
}
 8004632:	e7f3      	b.n	800461c <update_temporized_LED+0xc>
 8004634:	20013be0 	.word	0x20013be0
 8004638:	200139e0 	.word	0x200139e0
 800463c:	cccccccd 	.word	0xcccccccd

08004640 <DebounceFireButton>:
/***************************************************************************************************************************/
// Service routines called every CHECK_MSEC to
// debounce both edges

void DebounceFireButton(void) // Called by SysTick_Handler() in file stm32f4xx_it.c
{
 8004640:	b508      	push	{r3, lr}
	bool RawState;

	RawState = (bool) HAL_GPIO_ReadPin(FIRE_BTN_GPIO_Port, FIRE_BTN_Pin);
 8004642:	2120      	movs	r1, #32
 8004644:	4813      	ldr	r0, [pc, #76]	; (8004694 <DebounceFireButton+0x54>)
 8004646:	f000 ff0b 	bl	8005460 <HAL_GPIO_ReadPin>
 800464a:	3000      	adds	r0, #0
 800464c:	bf18      	it	ne
 800464e:	2001      	movne	r0, #1

	if (RawState == DebouncedKeyPress) {
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <DebounceFireButton+0x58>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	4283      	cmp	r3, r0
 8004656:	d00e      	beq.n	8004676 <DebounceFireButton+0x36>
		if (DebouncedKeyPress) FireCount = RELEASE_MSEC / CHECK_MSEC;
		else FireCount = PRESS_MSEC / CHECK_MSEC;

	} else {
		// Key has changed - wait for new state to become stable.
		if (--FireCount == 0) {
 8004658:	4a10      	ldr	r2, [pc, #64]	; (800469c <DebounceFireButton+0x5c>)
 800465a:	7813      	ldrb	r3, [r2, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	7013      	strb	r3, [r2, #0]
 8004662:	b93b      	cbnz	r3, 8004674 <DebounceFireButton+0x34>
			// Timer expired - accept the change.
			DebouncedKeyPress = RawState;
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <DebounceFireButton+0x58>)
 8004666:	7018      	strb	r0, [r3, #0]
			Key_changed = true;
			Key_pressed = DebouncedKeyPress;
			// And reset the timer.
			if (DebouncedKeyPress) // rising edge
 8004668:	b970      	cbnz	r0, 8004688 <DebounceFireButton+0x48>
				// ButtonPressed_action();
				Trigger();
			}
			else // falling edge
			{
				FireCount = PRESS_MSEC / CHECK_MSEC;
 800466a:	4b0c      	ldr	r3, [pc, #48]	; (800469c <DebounceFireButton+0x5c>)
 800466c:	220a      	movs	r2, #10
 800466e:	701a      	strb	r2, [r3, #0]
				// ButtonReleased_action();
				Trigger();
 8004670:	f7fc fcc2 	bl	8000ff8 <Trigger>
			}
		}
	}
}
 8004674:	bd08      	pop	{r3, pc}
		if (DebouncedKeyPress) FireCount = RELEASE_MSEC / CHECK_MSEC;
 8004676:	b11b      	cbz	r3, 8004680 <DebounceFireButton+0x40>
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <DebounceFireButton+0x5c>)
 800467a:	220a      	movs	r2, #10
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e7f9      	b.n	8004674 <DebounceFireButton+0x34>
		else FireCount = PRESS_MSEC / CHECK_MSEC;
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <DebounceFireButton+0x5c>)
 8004682:	220a      	movs	r2, #10
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	e7f5      	b.n	8004674 <DebounceFireButton+0x34>
				FireCount = RELEASE_MSEC / CHECK_MSEC;
 8004688:	4613      	mov	r3, r2
 800468a:	220a      	movs	r2, #10
 800468c:	701a      	strb	r2, [r3, #0]
				Trigger();
 800468e:	f7fc fcb3 	bl	8000ff8 <Trigger>
 8004692:	e7ef      	b.n	8004674 <DebounceFireButton+0x34>
 8004694:	40020000 	.word	0x40020000
 8004698:	20012a1c 	.word	0x20012a1c
 800469c:	2000000c 	.word	0x2000000c

080046a0 <DebounceHoldSwitch>:


void DebounceHoldSwitch(void) // Called by SysTick_Handler() in file stm32f4xx_it.c
{
 80046a0:	b508      	push	{r3, lr}
	bool RawState;

	RawState = (bool) HAL_GPIO_ReadPin(HOLD_SW_GPIO_Port, HOLD_SW_Pin);
 80046a2:	2104      	movs	r1, #4
 80046a4:	4813      	ldr	r0, [pc, #76]	; (80046f4 <DebounceHoldSwitch+0x54>)
 80046a6:	f000 fedb 	bl	8005460 <HAL_GPIO_ReadPin>
 80046aa:	3000      	adds	r0, #0
 80046ac:	bf18      	it	ne
 80046ae:	2001      	movne	r0, #1

	if (RawState == DebouncedSwitchState) {
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <DebounceHoldSwitch+0x58>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4283      	cmp	r3, r0
 80046b6:	d00e      	beq.n	80046d6 <DebounceHoldSwitch+0x36>
		if (DebouncedSwitchState) HoldCount = RELEASE_MSEC / CHECK_MSEC;
		else HoldCount = PRESS_MSEC / CHECK_MSEC;

	} else {
		// Key has changed - wait for new state to become stable.
		if (--HoldCount == 0) {
 80046b8:	4a10      	ldr	r2, [pc, #64]	; (80046fc <DebounceHoldSwitch+0x5c>)
 80046ba:	7813      	ldrb	r3, [r2, #0]
 80046bc:	3b01      	subs	r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	7013      	strb	r3, [r2, #0]
 80046c2:	b93b      	cbnz	r3, 80046d4 <DebounceHoldSwitch+0x34>
			// Timer expired - accept the change.
			DebouncedSwitchState = RawState;
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <DebounceHoldSwitch+0x58>)
 80046c6:	7018      	strb	r0, [r3, #0]
			Switch_changed = true;
			Switch_pressed = DebouncedSwitchState;
			// And reset the timer.
			if (DebouncedSwitchState) // rising edge
 80046c8:	b970      	cbnz	r0, 80046e8 <DebounceHoldSwitch+0x48>
				// ButtonPressed_action();
				Trigger();
			}
			else // falling edge
			{
				HoldCount = PRESS_MSEC / CHECK_MSEC;
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <DebounceHoldSwitch+0x5c>)
 80046cc:	220a      	movs	r2, #10
 80046ce:	701a      	strb	r2, [r3, #0]
				// ButtonReleased_action();
				Trigger();
 80046d0:	f7fc fc92 	bl	8000ff8 <Trigger>
			}
		}
	}
}
 80046d4:	bd08      	pop	{r3, pc}
		if (DebouncedSwitchState) HoldCount = RELEASE_MSEC / CHECK_MSEC;
 80046d6:	b11b      	cbz	r3, 80046e0 <DebounceHoldSwitch+0x40>
 80046d8:	4b08      	ldr	r3, [pc, #32]	; (80046fc <DebounceHoldSwitch+0x5c>)
 80046da:	220a      	movs	r2, #10
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e7f9      	b.n	80046d4 <DebounceHoldSwitch+0x34>
		else HoldCount = PRESS_MSEC / CHECK_MSEC;
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <DebounceHoldSwitch+0x5c>)
 80046e2:	220a      	movs	r2, #10
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e7f5      	b.n	80046d4 <DebounceHoldSwitch+0x34>
				HoldCount = RELEASE_MSEC / CHECK_MSEC;
 80046e8:	4613      	mov	r3, r2
 80046ea:	220a      	movs	r2, #10
 80046ec:	701a      	strb	r2, [r3, #0]
				Trigger();
 80046ee:	f7fc fc83 	bl	8000ff8 <Trigger>
 80046f2:	e7ef      	b.n	80046d4 <DebounceHoldSwitch+0x34>
 80046f4:	40020400 	.word	0x40020400
 80046f8:	20012a1d 	.word	0x20012a1d
 80046fc:	2000000d 	.word	0x2000000d

08004700 <WM8731_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t WM8731_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 8004700:	b510      	push	{r4, lr}
 8004702:	b084      	sub	sp, #16
    HAL_StatusTypeDef status = HAL_OK;

    uint8_t data[2];

    /* Assemble 2-byte data in WM8731 format */
    data[0] = ((RegisterAddr << 1) & 0xFE) | ((RegisterValue >> 8) & 0x01); // 0x0C in your example
 8004704:	f3c1 2300 	ubfx	r3, r1, #8, #1
 8004708:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
 800470c:	f88d 000c 	strb.w	r0, [sp, #12]
    data[1] = RegisterValue & 0xFF;                                         // MSB byte of 16bit data
 8004710:	f88d 100d 	strb.w	r1, [sp, #13]

    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 8004714:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2302      	movs	r3, #2
 800471c:	aa03      	add	r2, sp, #12
 800471e:	2134      	movs	r1, #52	; 0x34
 8004720:	4807      	ldr	r0, [pc, #28]	; (8004740 <WM8731_WriteRegister+0x40>)
 8004722:	f001 f8e9 	bl	80058f8 <HAL_I2C_Master_Transmit>
    /* Check the communication status */
    if (status != HAL_OK)
 8004726:	4604      	mov	r4, r0
 8004728:	b910      	cbnz	r0, 8004730 <WM8731_WriteRegister+0x30>
    }

    // data is the start pointer of our array
    /* Return the verifying value: 0 (Passed) or 1 (Failed) */
    return status;
 800472a:	4620      	mov	r0, r4
 800472c:	b004      	add	sp, #16
 800472e:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8004730:	2201      	movs	r2, #1
 8004732:	2110      	movs	r1, #16
 8004734:	4803      	ldr	r0, [pc, #12]	; (8004744 <WM8731_WriteRegister+0x44>)
 8004736:	f000 fe9a 	bl	800546e <HAL_GPIO_WritePin>
        Error_Handler();
 800473a:	f7fe f97f 	bl	8002a3c <Error_Handler>
 800473e:	e7f4      	b.n	800472a <WM8731_WriteRegister+0x2a>
 8004740:	200139e4 	.word	0x200139e4
 8004744:	40020000 	.word	0x40020000

08004748 <WM8731_Init>:
{
 8004748:	b510      	push	{r4, lr}
    HAL_I2S_MspInit(&hi2s2);
 800474a:	480d      	ldr	r0, [pc, #52]	; (8004780 <WM8731_Init+0x38>)
 800474c:	f7ff fdd2 	bl	80042f4 <HAL_I2S_MspInit>
    WM8731_WriteRegister(0x0f, 0);
 8004750:	2100      	movs	r1, #0
 8004752:	200f      	movs	r0, #15
 8004754:	f7ff ffd4 	bl	8004700 <WM8731_WriteRegister>
    for (i = 0; i < W8731_NUM_REGS; i++)
 8004758:	2400      	movs	r4, #0
 800475a:	e007      	b.n	800476c <WM8731_Init+0x24>
        WM8731_WriteRegister(i, w8731_init_data[i]);
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <WM8731_Init+0x3c>)
 800475e:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8004762:	4620      	mov	r0, r4
 8004764:	f7ff ffcc 	bl	8004700 <WM8731_WriteRegister>
    for (i = 0; i < W8731_NUM_REGS; i++)
 8004768:	3401      	adds	r4, #1
 800476a:	b2e4      	uxtb	r4, r4
 800476c:	2c09      	cmp	r4, #9
 800476e:	d9f5      	bls.n	800475c <WM8731_Init+0x14>
    HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)&audiobuff[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
 8004770:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004774:	4904      	ldr	r1, [pc, #16]	; (8004788 <WM8731_Init+0x40>)
 8004776:	4802      	ldr	r0, [pc, #8]	; (8004780 <WM8731_Init+0x38>)
 8004778:	f001 fa46 	bl	8005c08 <HAL_I2S_Transmit_DMA>
}
 800477c:	bd10      	pop	{r4, pc}
 800477e:	bf00      	nop
 8004780:	20013b90 	.word	0x20013b90
 8004784:	080163d0 	.word	0x080163d0
 8004788:	20012a3c 	.word	0x20012a3c

0800478c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800478c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004790:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004792:	e003      	b.n	800479c <LoopCopyDataInit>

08004794 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004796:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004798:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800479a:	3104      	adds	r1, #4

0800479c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800479c:	480b      	ldr	r0, [pc, #44]	; (80047cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047a4:	d3f6      	bcc.n	8004794 <CopyDataInit>
  ldr  r2, =_sbss
 80047a6:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047a8:	e002      	b.n	80047b0 <LoopFillZerobss>

080047aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047ac:	f842 3b04 	str.w	r3, [r2], #4

080047b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047b4:	d3f9      	bcc.n	80047aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80047b6:	f7ff fef9 	bl	80045ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047ba:	f002 fa45 	bl	8006c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047be:	f7fe f91f 	bl	8002a00 <main>
  bx  lr    
 80047c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80047c8:	08016414 	.word	0x08016414
  ldr  r0, =_sdata
 80047cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80047d0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80047d4:	20003f48 	.word	0x20003f48
  ldr  r3, = _ebss
 80047d8:	20013c04 	.word	0x20013c04

080047dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047dc:	e7fe      	b.n	80047dc <ADC_IRQHandler>
	...

080047e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <HAL_InitTick+0x40>)
 80047e6:	7818      	ldrb	r0, [r3, #0]
 80047e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80047f0:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <HAL_InitTick+0x44>)
 80047f2:	6810      	ldr	r0, [r2, #0]
 80047f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80047f8:	f000 fb32 	bl	8004e60 <HAL_SYSTICK_Config>
 80047fc:	b968      	cbnz	r0, 800481a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047fe:	2c0f      	cmp	r4, #15
 8004800:	d901      	bls.n	8004806 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004802:	2001      	movs	r0, #1
 8004804:	e00a      	b.n	800481c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004806:	2200      	movs	r2, #0
 8004808:	4621      	mov	r1, r4
 800480a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800480e:	f000 fae5 	bl	8004ddc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_InitTick+0x48>)
 8004814:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004816:	2000      	movs	r0, #0
 8004818:	e000      	b.n	800481c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800481a:	2001      	movs	r0, #1
}
 800481c:	bd10      	pop	{r4, pc}
 800481e:	bf00      	nop
 8004820:	2000000e 	.word	0x2000000e
 8004824:	20000008 	.word	0x20000008
 8004828:	20000010 	.word	0x20000010

0800482c <HAL_Init>:
{
 800482c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_Init+0x30>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004836:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800483e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004846:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004848:	2003      	movs	r0, #3
 800484a:	f000 fab5 	bl	8004db8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800484e:	2000      	movs	r0, #0
 8004850:	f7ff ffc6 	bl	80047e0 <HAL_InitTick>
  HAL_MspInit();
 8004854:	f7ff fca2 	bl	800419c <HAL_MspInit>
}
 8004858:	2000      	movs	r0, #0
 800485a:	bd08      	pop	{r3, pc}
 800485c:	40023c00 	.word	0x40023c00

08004860 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004860:	4a03      	ldr	r2, [pc, #12]	; (8004870 <HAL_IncTick+0x10>)
 8004862:	6811      	ldr	r1, [r2, #0]
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_IncTick+0x14>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	440b      	add	r3, r1
 800486a:	6013      	str	r3, [r2, #0]
}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20013bf0 	.word	0x20013bf0
 8004874:	2000000e 	.word	0x2000000e

08004878 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004878:	4b01      	ldr	r3, [pc, #4]	; (8004880 <HAL_GetTick+0x8>)
 800487a:	6818      	ldr	r0, [r3, #0]
}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20013bf0 	.word	0x20013bf0

08004884 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004884:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <ADC_Init+0x12c>)
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800488c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	6841      	ldr	r1, [r0, #4]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004896:	6802      	ldr	r2, [r0, #0]
 8004898:	6853      	ldr	r3, [r2, #4]
 800489a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048a0:	6802      	ldr	r2, [r0, #0]
 80048a2:	6853      	ldr	r3, [r2, #4]
 80048a4:	6901      	ldr	r1, [r0, #16]
 80048a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80048aa:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048ac:	6802      	ldr	r2, [r0, #0]
 80048ae:	6853      	ldr	r3, [r2, #4]
 80048b0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80048b4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048b6:	6802      	ldr	r2, [r0, #0]
 80048b8:	6853      	ldr	r3, [r2, #4]
 80048ba:	6881      	ldr	r1, [r0, #8]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048c0:	6802      	ldr	r2, [r0, #0]
 80048c2:	6893      	ldr	r3, [r2, #8]
 80048c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048ca:	6802      	ldr	r2, [r0, #0]
 80048cc:	6893      	ldr	r3, [r2, #8]
 80048ce:	68c1      	ldr	r1, [r0, #12]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80048d6:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <ADC_Init+0x130>)
 80048d8:	429a      	cmp	r2, r3
 80048da:	d04b      	beq.n	8004974 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048dc:	6802      	ldr	r2, [r0, #0]
 80048de:	6893      	ldr	r3, [r2, #8]
 80048e0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80048e4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048e6:	6802      	ldr	r2, [r0, #0]
 80048e8:	6893      	ldr	r3, [r2, #8]
 80048ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048f0:	6802      	ldr	r2, [r0, #0]
 80048f2:	6893      	ldr	r3, [r2, #8]
 80048f4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80048f8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048fa:	6802      	ldr	r2, [r0, #0]
 80048fc:	6893      	ldr	r3, [r2, #8]
 80048fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004900:	430b      	orrs	r3, r1
 8004902:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004904:	6802      	ldr	r2, [r0, #0]
 8004906:	6893      	ldr	r3, [r2, #8]
 8004908:	f023 0302 	bic.w	r3, r3, #2
 800490c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800490e:	6802      	ldr	r2, [r0, #0]
 8004910:	6893      	ldr	r3, [r2, #8]
 8004912:	7e01      	ldrb	r1, [r0, #24]
 8004914:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004918:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800491a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d133      	bne.n	800498a <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004922:	6802      	ldr	r2, [r0, #0]
 8004924:	6853      	ldr	r3, [r2, #4]
 8004926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800492a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800492c:	6802      	ldr	r2, [r0, #0]
 800492e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004930:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004934:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004936:	6801      	ldr	r1, [r0, #0]
 8004938:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800493a:	69c2      	ldr	r2, [r0, #28]
 800493c:	3a01      	subs	r2, #1
 800493e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004942:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004944:	6802      	ldr	r2, [r0, #0]
 8004946:	6893      	ldr	r3, [r2, #8]
 8004948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800494c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800494e:	6802      	ldr	r2, [r0, #0]
 8004950:	6893      	ldr	r3, [r2, #8]
 8004952:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8004956:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800495a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800495c:	6802      	ldr	r2, [r0, #0]
 800495e:	6893      	ldr	r3, [r2, #8]
 8004960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004964:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004966:	6802      	ldr	r2, [r0, #0]
 8004968:	6893      	ldr	r3, [r2, #8]
 800496a:	6941      	ldr	r1, [r0, #20]
 800496c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004970:	6093      	str	r3, [r2, #8]
}
 8004972:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004974:	6802      	ldr	r2, [r0, #0]
 8004976:	6893      	ldr	r3, [r2, #8]
 8004978:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800497c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800497e:	6802      	ldr	r2, [r0, #0]
 8004980:	6893      	ldr	r3, [r2, #8]
 8004982:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004986:	6093      	str	r3, [r2, #8]
 8004988:	e7bc      	b.n	8004904 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800498a:	6802      	ldr	r2, [r0, #0]
 800498c:	6853      	ldr	r3, [r2, #4]
 800498e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004992:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004994:	6802      	ldr	r2, [r0, #0]
 8004996:	6853      	ldr	r3, [r2, #4]
 8004998:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800499c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800499e:	6801      	ldr	r1, [r0, #0]
 80049a0:	684b      	ldr	r3, [r1, #4]
 80049a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80049a4:	3a01      	subs	r2, #1
 80049a6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80049aa:	604b      	str	r3, [r1, #4]
 80049ac:	e7be      	b.n	800492c <ADC_Init+0xa8>
 80049ae:	bf00      	nop
 80049b0:	40012300 	.word	0x40012300
 80049b4:	0f000001 	.word	0x0f000001

080049b8 <HAL_ADC_Init>:
  if(hadc == NULL)
 80049b8:	b338      	cbz	r0, 8004a0a <HAL_ADC_Init+0x52>
{
 80049ba:	b510      	push	{r4, lr}
 80049bc:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80049be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80049c0:	b143      	cbz	r3, 80049d4 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049c4:	f013 0f10 	tst.w	r3, #16
 80049c8:	d00b      	beq.n	80049e2 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80049ca:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80049cc:	2300      	movs	r3, #0
 80049ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80049d2:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80049d4:	f7ff fbfe 	bl	80041d4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80049d8:	2300      	movs	r3, #0
 80049da:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80049dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80049e0:	e7ef      	b.n	80049c2 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80049e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049e8:	f023 0302 	bic.w	r3, r3, #2
 80049ec:	f043 0302 	orr.w	r3, r3, #2
 80049f0:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80049f2:	4620      	mov	r0, r4
 80049f4:	f7ff ff46 	bl	8004884 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80049f8:	2000      	movs	r0, #0
 80049fa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80049fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6423      	str	r3, [r4, #64]	; 0x40
 8004a08:	e7e0      	b.n	80049cc <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8004a0a:	2001      	movs	r0, #1
}
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_ADC_Start_DMA>:
{
 8004a10:	b530      	push	{r4, r5, lr}
 8004a12:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004a18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	f000 809b 	beq.w	8004b58 <HAL_ADC_Start_DMA+0x148>
 8004a22:	2301      	movs	r3, #1
 8004a24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a28:	6804      	ldr	r4, [r0, #0]
 8004a2a:	68a3      	ldr	r3, [r4, #8]
 8004a2c:	f013 0f01 	tst.w	r3, #1
 8004a30:	d113      	bne.n	8004a5a <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 8004a32:	68a3      	ldr	r3, [r4, #8]
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a3a:	4b4d      	ldr	r3, [pc, #308]	; (8004b70 <HAL_ADC_Start_DMA+0x160>)
 8004a3c:	681c      	ldr	r4, [r3, #0]
 8004a3e:	4b4d      	ldr	r3, [pc, #308]	; (8004b74 <HAL_ADC_Start_DMA+0x164>)
 8004a40:	fba3 3404 	umull	r3, r4, r3, r4
 8004a44:	0ca4      	lsrs	r4, r4, #18
 8004a46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004a4a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8004a4c:	e002      	b.n	8004a54 <HAL_ADC_Start_DMA+0x44>
      counter--;
 8004a4e:	9c01      	ldr	r4, [sp, #4]
 8004a50:	3c01      	subs	r4, #1
 8004a52:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8004a54:	9c01      	ldr	r4, [sp, #4]
 8004a56:	2c00      	cmp	r4, #0
 8004a58:	d1f9      	bne.n	8004a4e <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a5a:	6803      	ldr	r3, [r0, #0]
 8004a5c:	689c      	ldr	r4, [r3, #8]
 8004a5e:	f014 0f01 	tst.w	r4, #1
 8004a62:	d07b      	beq.n	8004b5c <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 8004a64:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004a66:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8004a6a:	f024 0401 	bic.w	r4, r4, #1
 8004a6e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8004a72:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004a7a:	d005      	beq.n	8004a88 <HAL_ADC_Start_DMA+0x78>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a86:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a8a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004a8e:	d038      	beq.n	8004b02 <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a92:	f023 0306 	bic.w	r3, r3, #6
 8004a96:	6443      	str	r3, [r0, #68]	; 0x44
 8004a98:	4613      	mov	r3, r2
 8004a9a:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004aa2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004aa4:	4834      	ldr	r0, [pc, #208]	; (8004b78 <HAL_ADC_Start_DMA+0x168>)
 8004aa6:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004aa8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004aaa:	4834      	ldr	r0, [pc, #208]	; (8004b7c <HAL_ADC_Start_DMA+0x16c>)
 8004aac:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004aae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ab0:	4833      	ldr	r0, [pc, #204]	; (8004b80 <HAL_ADC_Start_DMA+0x170>)
 8004ab2:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8004aba:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004abc:	6825      	ldr	r5, [r4, #0]
 8004abe:	6868      	ldr	r0, [r5, #4]
 8004ac0:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8004ac4:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	68a8      	ldr	r0, [r5, #8]
 8004aca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004ace:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ad0:	6820      	ldr	r0, [r4, #0]
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8004ad8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ada:	f000 fab9 	bl	8005050 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ade:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <HAL_ADC_Start_DMA+0x174>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f013 0f1f 	tst.w	r3, #31
 8004ae6:	d127      	bne.n	8004b38 <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <HAL_ADC_Start_DMA+0x178>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d019      	beq.n	8004b24 <HAL_ADC_Start_DMA+0x114>
 8004af0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004af8:	4a24      	ldr	r2, [pc, #144]	; (8004b8c <HAL_ADC_Start_DMA+0x17c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00b      	beq.n	8004b16 <HAL_ADC_Start_DMA+0x106>
  return HAL_OK;
 8004afe:	2000      	movs	r0, #0
 8004b00:	e02d      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14e>
      ADC_CLEAR_ERRORCODE(hadc);
 8004b02:	2300      	movs	r3, #0
 8004b04:	6443      	str	r3, [r0, #68]	; 0x44
 8004b06:	e7c7      	b.n	8004a98 <HAL_ADC_Start_DMA+0x88>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004b08:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8004b0c:	6852      	ldr	r2, [r2, #4]
 8004b0e:	f012 0f1f 	tst.w	r2, #31
 8004b12:	d007      	beq.n	8004b24 <HAL_ADC_Start_DMA+0x114>
 8004b14:	e7f0      	b.n	8004af8 <HAL_ADC_Start_DMA+0xe8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b16:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004b1a:	6852      	ldr	r2, [r2, #4]
 8004b1c:	f002 021f 	and.w	r2, r2, #31
 8004b20:	2a0f      	cmp	r2, #15
 8004b22:	d81e      	bhi.n	8004b62 <HAL_ADC_Start_DMA+0x152>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004b2a:	d11c      	bne.n	8004b66 <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b34:	2000      	movs	r0, #0
 8004b36:	e012      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <HAL_ADC_Start_DMA+0x178>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d001      	beq.n	8004b44 <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 8004b40:	2000      	movs	r0, #0
 8004b42:	e00c      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004b4a:	d10e      	bne.n	8004b6a <HAL_ADC_Start_DMA+0x15a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b54:	2000      	movs	r0, #0
 8004b56:	e002      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14e>
  __HAL_LOCK(hadc);
 8004b58:	2002      	movs	r0, #2
 8004b5a:	e000      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14e>
  return HAL_OK;
 8004b5c:	2000      	movs	r0, #0
}
 8004b5e:	b003      	add	sp, #12
 8004b60:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8004b62:	2000      	movs	r0, #0
 8004b64:	e7fb      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14e>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e7f9      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14e>
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e7f7      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14e>
 8004b6e:	bf00      	nop
 8004b70:	20000008 	.word	0x20000008
 8004b74:	431bde83 	.word	0x431bde83
 8004b78:	08004bb5 	.word	0x08004bb5
 8004b7c:	08004b93 	.word	0x08004b93
 8004b80:	08004b9f 	.word	0x08004b9f
 8004b84:	40012300 	.word	0x40012300
 8004b88:	40012000 	.word	0x40012000
 8004b8c:	40012200 	.word	0x40012200

08004b90 <HAL_ADC_ConvHalfCpltCallback>:
}
 8004b90:	4770      	bx	lr

08004b92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b92:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b94:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004b96:	f7ff fffb 	bl	8004b90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b9a:	bd08      	pop	{r3, pc}

08004b9c <HAL_ADC_ErrorCallback>:
}
 8004b9c:	4770      	bx	lr

08004b9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b9e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ba0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ba6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bae:	f7ff fff5 	bl	8004b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bb2:	bd08      	pop	{r3, pc}

08004bb4 <ADC_DMAConvCplt>:
{
 8004bb4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bba:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004bbe:	d126      	bne.n	8004c0e <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	6891      	ldr	r1, [r2, #8]
 8004bcc:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8004bd0:	d119      	bne.n	8004c06 <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bd2:	7e19      	ldrb	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bd4:	b9b9      	cbnz	r1, 8004c06 <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004bd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bd8:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8004bdc:	d003      	beq.n	8004be6 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004bde:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004be0:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8004be4:	d10f      	bne.n	8004c06 <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004be6:	6851      	ldr	r1, [r2, #4]
 8004be8:	f021 0120 	bic.w	r1, r1, #32
 8004bec:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8004bfc:	d103      	bne.n	8004c06 <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fc fa60 	bl	80010cc <HAL_ADC_ConvCpltCallback>
}
 8004c0c:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c10:	f012 0f10 	tst.w	r2, #16
 8004c14:	d103      	bne.n	8004c1e <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	4798      	blx	r3
}
 8004c1c:	e7f6      	b.n	8004c0c <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ffbc 	bl	8004b9c <HAL_ADC_ErrorCallback>
 8004c24:	e7f2      	b.n	8004c0c <ADC_DMAConvCplt+0x58>
	...

08004c28 <HAL_ADC_ConfigChannel>:
{
 8004c28:	b430      	push	{r4, r5}
 8004c2a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004c30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	f000 80b7 	beq.w	8004da8 <HAL_ADC_ConfigChannel+0x180>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c40:	680b      	ldr	r3, [r1, #0]
 8004c42:	2b09      	cmp	r3, #9
 8004c44:	d93e      	bls.n	8004cc4 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c46:	6805      	ldr	r5, [r0, #0]
 8004c48:	68ea      	ldr	r2, [r5, #12]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c50:	3b1e      	subs	r3, #30
 8004c52:	2407      	movs	r4, #7
 8004c54:	fa04 f303 	lsl.w	r3, r4, r3
 8004c58:	ea22 0303 	bic.w	r3, r2, r3
 8004c5c:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c5e:	6805      	ldr	r5, [r0, #0]
 8004c60:	68ea      	ldr	r2, [r5, #12]
 8004c62:	688c      	ldr	r4, [r1, #8]
 8004c64:	880b      	ldrh	r3, [r1, #0]
 8004c66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c6a:	3b1e      	subs	r3, #30
 8004c6c:	fa04 f303 	lsl.w	r3, r4, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8004c74:	684b      	ldr	r3, [r1, #4]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d83a      	bhi.n	8004cf0 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c7a:	6805      	ldr	r5, [r0, #0]
 8004c7c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004c7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c82:	3b05      	subs	r3, #5
 8004c84:	241f      	movs	r4, #31
 8004c86:	fa04 f303 	lsl.w	r3, r4, r3
 8004c8a:	ea22 0303 	bic.w	r3, r2, r3
 8004c8e:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c90:	6805      	ldr	r5, [r0, #0]
 8004c92:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004c94:	684b      	ldr	r3, [r1, #4]
 8004c96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c9a:	3b05      	subs	r3, #5
 8004c9c:	880c      	ldrh	r4, [r1, #0]
 8004c9e:	fa04 f303 	lsl.w	r3, r4, r3
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ca6:	6802      	ldr	r2, [r0, #0]
 8004ca8:	4b40      	ldr	r3, [pc, #256]	; (8004dac <HAL_ADC_ConfigChannel+0x184>)
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d050      	beq.n	8004d50 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004cae:	6802      	ldr	r2, [r0, #0]
 8004cb0:	4b3e      	ldr	r3, [pc, #248]	; (8004dac <HAL_ADC_ConfigChannel+0x184>)
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d055      	beq.n	8004d62 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004cbc:	4618      	mov	r0, r3
}
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bc30      	pop	{r4, r5}
 8004cc2:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cc4:	6805      	ldr	r5, [r0, #0]
 8004cc6:	692a      	ldr	r2, [r5, #16]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004cce:	2407      	movs	r4, #7
 8004cd0:	fa04 f303 	lsl.w	r3, r4, r3
 8004cd4:	ea22 0303 	bic.w	r3, r2, r3
 8004cd8:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cda:	6805      	ldr	r5, [r0, #0]
 8004cdc:	692a      	ldr	r2, [r5, #16]
 8004cde:	688c      	ldr	r4, [r1, #8]
 8004ce0:	880b      	ldrh	r3, [r1, #0]
 8004ce2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004ce6:	fa04 f303 	lsl.w	r3, r4, r3
 8004cea:	4313      	orrs	r3, r2
 8004cec:	612b      	str	r3, [r5, #16]
 8004cee:	e7c1      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d816      	bhi.n	8004d22 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004cf4:	6805      	ldr	r5, [r0, #0]
 8004cf6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004cfc:	3b23      	subs	r3, #35	; 0x23
 8004cfe:	241f      	movs	r4, #31
 8004d00:	fa04 f303 	lsl.w	r3, r4, r3
 8004d04:	ea22 0303 	bic.w	r3, r2, r3
 8004d08:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d0a:	6805      	ldr	r5, [r0, #0]
 8004d0c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004d0e:	684b      	ldr	r3, [r1, #4]
 8004d10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d14:	3b23      	subs	r3, #35	; 0x23
 8004d16:	880c      	ldrh	r4, [r1, #0]
 8004d18:	fa04 f303 	lsl.w	r3, r4, r3
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	632b      	str	r3, [r5, #48]	; 0x30
 8004d20:	e7c1      	b.n	8004ca6 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d22:	6805      	ldr	r5, [r0, #0]
 8004d24:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004d26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d2a:	3b41      	subs	r3, #65	; 0x41
 8004d2c:	241f      	movs	r4, #31
 8004d2e:	fa04 f303 	lsl.w	r3, r4, r3
 8004d32:	ea22 0303 	bic.w	r3, r2, r3
 8004d36:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d38:	6805      	ldr	r5, [r0, #0]
 8004d3a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004d3c:	684b      	ldr	r3, [r1, #4]
 8004d3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d42:	3b41      	subs	r3, #65	; 0x41
 8004d44:	880c      	ldrh	r4, [r1, #0]
 8004d46:	fa04 f303 	lsl.w	r3, r4, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d4e:	e7aa      	b.n	8004ca6 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d50:	680b      	ldr	r3, [r1, #0]
 8004d52:	2b12      	cmp	r3, #18
 8004d54:	d1ab      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <HAL_ADC_ConfigChannel+0x188>)
 8004d58:	6853      	ldr	r3, [r2, #4]
 8004d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d5e:	6053      	str	r3, [r2, #4]
 8004d60:	e7a5      	b.n	8004cae <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d62:	680b      	ldr	r3, [r1, #0]
 8004d64:	3b10      	subs	r3, #16
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d8a5      	bhi.n	8004cb6 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d6a:	4a11      	ldr	r2, [pc, #68]	; (8004db0 <HAL_ADC_ConfigChannel+0x188>)
 8004d6c:	6853      	ldr	r3, [r2, #4]
 8004d6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d72:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004d74:	680b      	ldr	r3, [r1, #0]
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d19d      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <HAL_ADC_ConfigChannel+0x18c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8004d82:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8004d86:	f202 3283 	addw	r2, r2, #899	; 0x383
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	0c9b      	lsrs	r3, r3, #18
 8004d90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d94:	005a      	lsls	r2, r3, #1
 8004d96:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8004d98:	e002      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8004d9a:	9b01      	ldr	r3, [sp, #4]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004da0:	9b01      	ldr	r3, [sp, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f9      	bne.n	8004d9a <HAL_ADC_ConfigChannel+0x172>
 8004da6:	e786      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8004da8:	2002      	movs	r0, #2
 8004daa:	e788      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x96>
 8004dac:	40012000 	.word	0x40012000
 8004db0:	40012300 	.word	0x40012300
 8004db4:	20000008 	.word	0x20000008

08004db8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004dba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dc4:	0200      	lsls	r0, r0, #8
 8004dc6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dca:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8004dcc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8004dd0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004dd4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004dd6:	4770      	bx	lr
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ddc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <HAL_NVIC_SetPriority+0x60>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004de6:	f1c3 0407 	rsb	r4, r3, #7
 8004dea:	2c04      	cmp	r4, #4
 8004dec:	bf28      	it	cs
 8004dee:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004df0:	1d1d      	adds	r5, r3, #4
 8004df2:	2d06      	cmp	r5, #6
 8004df4:	d918      	bls.n	8004e28 <HAL_NVIC_SetPriority+0x4c>
 8004df6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004df8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004dfc:	fa05 f404 	lsl.w	r4, r5, r4
 8004e00:	ea21 0104 	bic.w	r1, r1, r4
 8004e04:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e06:	fa05 f303 	lsl.w	r3, r5, r3
 8004e0a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e0e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004e10:	2800      	cmp	r0, #0
 8004e12:	db0b      	blt.n	8004e2c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e14:	0109      	lsls	r1, r1, #4
 8004e16:	b2c9      	uxtb	r1, r1
 8004e18:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004e1c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004e20:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004e24:	bc30      	pop	{r4, r5}
 8004e26:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e7e5      	b.n	8004df8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2c:	f000 000f 	and.w	r0, r0, #15
 8004e30:	0109      	lsls	r1, r1, #4
 8004e32:	b2c9      	uxtb	r1, r1
 8004e34:	4b02      	ldr	r3, [pc, #8]	; (8004e40 <HAL_NVIC_SetPriority+0x64>)
 8004e36:	5419      	strb	r1, [r3, r0]
 8004e38:	e7f4      	b.n	8004e24 <HAL_NVIC_SetPriority+0x48>
 8004e3a:	bf00      	nop
 8004e3c:	e000ed00 	.word	0xe000ed00
 8004e40:	e000ed14 	.word	0xe000ed14

08004e44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004e44:	2800      	cmp	r0, #0
 8004e46:	db07      	blt.n	8004e58 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e48:	f000 021f 	and.w	r2, r0, #31
 8004e4c:	0940      	lsrs	r0, r0, #5
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4093      	lsls	r3, r2
 8004e52:	4a02      	ldr	r2, [pc, #8]	; (8004e5c <HAL_NVIC_EnableIRQ+0x18>)
 8004e54:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000e100 	.word	0xe000e100

08004e60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e60:	3801      	subs	r0, #1
 8004e62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004e66:	d20a      	bcs.n	8004e7e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_SYSTICK_Config+0x24>)
 8004e6a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6c:	4a06      	ldr	r2, [pc, #24]	; (8004e88 <HAL_SYSTICK_Config+0x28>)
 8004e6e:	21f0      	movs	r1, #240	; 0xf0
 8004e70:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e74:	2000      	movs	r0, #0
 8004e76:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e78:	2207      	movs	r2, #7
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004e7e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	e000e010 	.word	0xe000e010
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e8c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e8e:	6805      	ldr	r5, [r0, #0]
 8004e90:	682c      	ldr	r4, [r5, #0]
 8004e92:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8004e96:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e98:	6804      	ldr	r4, [r0, #0]
 8004e9a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e9c:	6883      	ldr	r3, [r0, #8]
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d005      	beq.n	8004eae <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004ea2:	6803      	ldr	r3, [r0, #0]
 8004ea4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004ea6:	6803      	ldr	r3, [r0, #0]
 8004ea8:	60da      	str	r2, [r3, #12]
  }
}
 8004eaa:	bc30      	pop	{r4, r5}
 8004eac:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8004eae:	6803      	ldr	r3, [r0, #0]
 8004eb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004eb2:	6803      	ldr	r3, [r0, #0]
 8004eb4:	60d9      	str	r1, [r3, #12]
 8004eb6:	e7f8      	b.n	8004eaa <DMA_SetConfig+0x1e>

08004eb8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004eb8:	6802      	ldr	r2, [r0, #0]
 8004eba:	b2d3      	uxtb	r3, r2
 8004ebc:	3b10      	subs	r3, #16
 8004ebe:	490b      	ldr	r1, [pc, #44]	; (8004eec <DMA_CalcBaseAndBitshift+0x34>)
 8004ec0:	fba1 1303 	umull	r1, r3, r1, r3
 8004ec4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ec6:	490a      	ldr	r1, [pc, #40]	; (8004ef0 <DMA_CalcBaseAndBitshift+0x38>)
 8004ec8:	5cc9      	ldrb	r1, [r1, r3]
 8004eca:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d806      	bhi.n	8004ede <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ed0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004ed4:	f022 0203 	bic.w	r2, r2, #3
 8004ed8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8004eda:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004edc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ede:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004ee2:	f022 0203 	bic.w	r2, r2, #3
 8004ee6:	3204      	adds	r2, #4
 8004ee8:	6582      	str	r2, [r0, #88]	; 0x58
 8004eea:	e7f6      	b.n	8004eda <DMA_CalcBaseAndBitshift+0x22>
 8004eec:	aaaaaaab 	.word	0xaaaaaaab
 8004ef0:	080163e4 	.word	0x080163e4

08004ef4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ef4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ef6:	6982      	ldr	r2, [r0, #24]
 8004ef8:	b992      	cbnz	r2, 8004f20 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d00a      	beq.n	8004f14 <DMA_CheckFifoParam+0x20>
 8004efe:	b11b      	cbz	r3, 8004f08 <DMA_CheckFifoParam+0x14>
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d001      	beq.n	8004f08 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2000      	movs	r0, #0
 8004f06:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f0a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004f0e:	d12c      	bne.n	8004f6a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8004f10:	2000      	movs	r0, #0
 8004f12:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f1a:	d028      	beq.n	8004f6e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f20:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004f24:	d005      	beq.n	8004f32 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d929      	bls.n	8004f7e <DMA_CheckFifoParam+0x8a>
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d015      	beq.n	8004f5a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2000      	movs	r0, #0
 8004f30:	4770      	bx	lr
    switch (tmp)
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d803      	bhi.n	8004f3e <DMA_CheckFifoParam+0x4a>
 8004f36:	e8df f003 	tbb	[pc, r3]
 8004f3a:	041c      	.short	0x041c
 8004f3c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2000      	movs	r0, #0
 8004f40:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004f48:	d115      	bne.n	8004f76 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f54:	d011      	beq.n	8004f7a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2000      	movs	r0, #0
 8004f58:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f5c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004f60:	d001      	beq.n	8004f66 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8004f62:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8004f64:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2000      	movs	r0, #0
 8004f68:	4770      	bx	lr
        status = HAL_ERROR;
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	4770      	bx	lr
        status = HAL_ERROR;
 8004f6e:	2001      	movs	r0, #1
 8004f70:	4770      	bx	lr
      status = HAL_ERROR;
 8004f72:	2001      	movs	r0, #1
 8004f74:	4770      	bx	lr
        status = HAL_ERROR;
 8004f76:	2001      	movs	r0, #1
 8004f78:	4770      	bx	lr
        status = HAL_ERROR;
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	4770      	bx	lr
      status = HAL_ERROR;
 8004f7e:	2001      	movs	r0, #1
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_DMA_Init>:
{
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004f88:	f7ff fc76 	bl	8004878 <HAL_GetTick>
  if(hdma == NULL)
 8004f8c:	2c00      	cmp	r4, #0
 8004f8e:	d05b      	beq.n	8005048 <HAL_DMA_Init+0xc4>
 8004f90:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8004f92:	2300      	movs	r3, #0
 8004f94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	6813      	ldr	r3, [r2, #0]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f012 0f01 	tst.w	r2, #1
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fb2:	f7ff fc61 	bl	8004878 <HAL_GetTick>
 8004fb6:	1b40      	subs	r0, r0, r5
 8004fb8:	2805      	cmp	r0, #5
 8004fba:	d9f5      	bls.n	8004fa8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fc0:	2003      	movs	r0, #3
 8004fc2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8004fc8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fca:	4820      	ldr	r0, [pc, #128]	; (800504c <HAL_DMA_Init+0xc8>)
 8004fcc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fce:	6861      	ldr	r1, [r4, #4]
 8004fd0:	68a2      	ldr	r2, [r4, #8]
 8004fd2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fd6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd8:	6921      	ldr	r1, [r4, #16]
 8004fda:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fdc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fde:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fe0:	69a1      	ldr	r1, [r4, #24]
 8004fe2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fe4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fe6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fe8:	6a21      	ldr	r1, [r4, #32]
 8004fea:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fec:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ff0:	2904      	cmp	r1, #4
 8004ff2:	d01e      	beq.n	8005032 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8004ff4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004ff6:	6826      	ldr	r6, [r4, #0]
 8004ff8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ffa:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8004ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005000:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005002:	2b04      	cmp	r3, #4
 8005004:	d107      	bne.n	8005016 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8005006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005008:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800500a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800500c:	b11b      	cbz	r3, 8005016 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800500e:	4620      	mov	r0, r4
 8005010:	f7ff ff70 	bl	8004ef4 <DMA_CheckFifoParam>
 8005014:	b990      	cbnz	r0, 800503c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8005016:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff ff4d 	bl	8004eb8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800501e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005020:	233f      	movs	r3, #63	; 0x3f
 8005022:	4093      	lsls	r3, r2
 8005024:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005026:	2000      	movs	r0, #0
 8005028:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800502a:	2301      	movs	r3, #1
 800502c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005030:	e7c9      	b.n	8004fc6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005032:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005034:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005036:	4301      	orrs	r1, r0
 8005038:	430a      	orrs	r2, r1
 800503a:	e7db      	b.n	8004ff4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005040:	2001      	movs	r0, #1
 8005042:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005046:	e7be      	b.n	8004fc6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8005048:	2001      	movs	r0, #1
 800504a:	e7bc      	b.n	8004fc6 <HAL_DMA_Init+0x42>
 800504c:	f010803f 	.word	0xf010803f

08005050 <HAL_DMA_Start_IT>:
{
 8005050:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005052:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005054:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005058:	2c01      	cmp	r4, #1
 800505a:	d02c      	beq.n	80050b6 <HAL_DMA_Start_IT+0x66>
 800505c:	2401      	movs	r4, #1
 800505e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005062:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005066:	b2e4      	uxtb	r4, r4
 8005068:	2c01      	cmp	r4, #1
 800506a:	d004      	beq.n	8005076 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800506c:	2300      	movs	r3, #0
 800506e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8005072:	2002      	movs	r0, #2
}
 8005074:	bd38      	pop	{r3, r4, r5, pc}
 8005076:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005078:	2002      	movs	r0, #2
 800507a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800507e:	2000      	movs	r0, #0
 8005080:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005082:	4620      	mov	r0, r4
 8005084:	f7ff ff02 	bl	8004e8c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005088:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800508a:	233f      	movs	r3, #63	; 0x3f
 800508c:	4093      	lsls	r3, r2
 800508e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	f043 0316 	orr.w	r3, r3, #22
 8005098:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800509a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800509c:	b123      	cbz	r3, 80050a8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	6813      	ldr	r3, [r2, #0]
 80050a2:	f043 0308 	orr.w	r3, r3, #8
 80050a6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	6813      	ldr	r3, [r2, #0]
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2000      	movs	r0, #0
 80050b4:	e7de      	b.n	8005074 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80050b6:	2002      	movs	r0, #2
 80050b8:	e7dc      	b.n	8005074 <HAL_DMA_Start_IT+0x24>
	...

080050bc <HAL_DMA_IRQHandler>:
{
 80050bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050be:	b083      	sub	sp, #12
 80050c0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050c6:	4b72      	ldr	r3, [pc, #456]	; (8005290 <HAL_DMA_IRQHandler+0x1d4>)
 80050c8:	681d      	ldr	r5, [r3, #0]
 80050ca:	4b72      	ldr	r3, [pc, #456]	; (8005294 <HAL_DMA_IRQHandler+0x1d8>)
 80050cc:	fba3 3505 	umull	r3, r5, r3, r5
 80050d0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050d2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80050d4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80050d8:	2308      	movs	r3, #8
 80050da:	4093      	lsls	r3, r2
 80050dc:	4233      	tst	r3, r6
 80050de:	d010      	beq.n	8005102 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050e0:	6803      	ldr	r3, [r0, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	f012 0f04 	tst.w	r2, #4
 80050e8:	d00b      	beq.n	8005102 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	f022 0204 	bic.w	r2, r2, #4
 80050f0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050f2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80050f4:	2308      	movs	r3, #8
 80050f6:	4093      	lsls	r3, r2
 80050f8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005102:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005104:	2301      	movs	r3, #1
 8005106:	4093      	lsls	r3, r2
 8005108:	4233      	tst	r3, r6
 800510a:	d009      	beq.n	8005120 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800510c:	6822      	ldr	r2, [r4, #0]
 800510e:	6952      	ldr	r2, [r2, #20]
 8005110:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005114:	d004      	beq.n	8005120 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005116:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005118:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800511a:	f043 0302 	orr.w	r3, r3, #2
 800511e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005120:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005122:	2304      	movs	r3, #4
 8005124:	4093      	lsls	r3, r2
 8005126:	4233      	tst	r3, r6
 8005128:	d009      	beq.n	800513e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	f012 0f02 	tst.w	r2, #2
 8005132:	d004      	beq.n	800513e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005134:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005136:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800513e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005140:	2310      	movs	r3, #16
 8005142:	4093      	lsls	r3, r2
 8005144:	4233      	tst	r3, r6
 8005146:	d024      	beq.n	8005192 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	f012 0f08 	tst.w	r2, #8
 8005150:	d01f      	beq.n	8005192 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005152:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800515c:	d00d      	beq.n	800517a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005164:	d104      	bne.n	8005170 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8005166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005168:	b19b      	cbz	r3, 8005192 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800516a:	4620      	mov	r0, r4
 800516c:	4798      	blx	r3
 800516e:	e010      	b.n	8005192 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005170:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005172:	b173      	cbz	r3, 8005192 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8005174:	4620      	mov	r0, r4
 8005176:	4798      	blx	r3
 8005178:	e00b      	b.n	8005192 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005180:	d103      	bne.n	800518a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	f022 0208 	bic.w	r2, r2, #8
 8005188:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800518a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800518c:	b10b      	cbz	r3, 8005192 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800518e:	4620      	mov	r0, r4
 8005190:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005192:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005194:	2320      	movs	r3, #32
 8005196:	4093      	lsls	r3, r2
 8005198:	4233      	tst	r3, r6
 800519a:	d055      	beq.n	8005248 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	f012 0f10 	tst.w	r2, #16
 80051a4:	d050      	beq.n	8005248 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051a6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051a8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d00e      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80051ba:	d033      	beq.n	8005224 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80051c2:	d12a      	bne.n	800521a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80051c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d03e      	beq.n	8005248 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80051ca:	4620      	mov	r0, r4
 80051cc:	4798      	blx	r3
 80051ce:	e03b      	b.n	8005248 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051d0:	6822      	ldr	r2, [r4, #0]
 80051d2:	6813      	ldr	r3, [r2, #0]
 80051d4:	f023 0316 	bic.w	r3, r3, #22
 80051d8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	6953      	ldr	r3, [r2, #20]
 80051de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051e6:	b1a3      	cbz	r3, 8005212 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	f023 0308 	bic.w	r3, r3, #8
 80051f0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80051f4:	233f      	movs	r3, #63	; 0x3f
 80051f6:	4093      	lsls	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80051fa:	2300      	movs	r3, #0
 80051fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005200:	2301      	movs	r3, #1
 8005202:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005206:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005208:	2b00      	cmp	r3, #0
 800520a:	d03f      	beq.n	800528c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800520c:	4620      	mov	r0, r4
 800520e:	4798      	blx	r3
 8005210:	e03c      	b.n	800528c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005212:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e7      	bne.n	80051e8 <HAL_DMA_IRQHandler+0x12c>
 8005218:	e7eb      	b.n	80051f2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800521a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800521c:	b1a3      	cbz	r3, 8005248 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800521e:	4620      	mov	r0, r4
 8005220:	4798      	blx	r3
 8005222:	e011      	b.n	8005248 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f412 7f80 	tst.w	r2, #256	; 0x100
 800522a:	d109      	bne.n	8005240 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	f022 0210 	bic.w	r2, r2, #16
 8005232:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005234:	2300      	movs	r3, #0
 8005236:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800523a:	2301      	movs	r3, #1
 800523c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005242:	b10b      	cbz	r3, 8005248 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005244:	4620      	mov	r0, r4
 8005246:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005248:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800524a:	b1fb      	cbz	r3, 800528c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800524c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800524e:	f013 0f01 	tst.w	r3, #1
 8005252:	d017      	beq.n	8005284 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005254:	2305      	movs	r3, #5
 8005256:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	6813      	ldr	r3, [r2, #0]
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005264:	9b01      	ldr	r3, [sp, #4]
 8005266:	3301      	adds	r3, #1
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	42ab      	cmp	r3, r5
 800526c:	d804      	bhi.n	8005278 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f013 0f01 	tst.w	r3, #1
 8005276:	d1f5      	bne.n	8005264 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005278:	2300      	movs	r3, #0
 800527a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800527e:	2301      	movs	r3, #1
 8005280:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005284:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005286:	b10b      	cbz	r3, 800528c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005288:	4620      	mov	r0, r4
 800528a:	4798      	blx	r3
}
 800528c:	b003      	add	sp, #12
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005290:	20000008 	.word	0x20000008
 8005294:	1b4e81b5 	.word	0x1b4e81b5

08005298 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005298:	2300      	movs	r3, #0
 800529a:	2b0f      	cmp	r3, #15
 800529c:	f200 80d7 	bhi.w	800544e <HAL_GPIO_Init+0x1b6>
{
 80052a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a2:	b083      	sub	sp, #12
 80052a4:	e039      	b.n	800531a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052a6:	2207      	movs	r2, #7
 80052a8:	e000      	b.n	80052ac <HAL_GPIO_Init+0x14>
 80052aa:	2200      	movs	r2, #0
 80052ac:	40aa      	lsls	r2, r5
 80052ae:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052b0:	3402      	adds	r4, #2
 80052b2:	4d67      	ldr	r5, [pc, #412]	; (8005450 <HAL_GPIO_Init+0x1b8>)
 80052b4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052b8:	4a66      	ldr	r2, [pc, #408]	; (8005454 <HAL_GPIO_Init+0x1bc>)
 80052ba:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80052bc:	43f2      	mvns	r2, r6
 80052be:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052c2:	684f      	ldr	r7, [r1, #4]
 80052c4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80052c8:	d001      	beq.n	80052ce <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80052ca:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 80052ce:	4c61      	ldr	r4, [pc, #388]	; (8005454 <HAL_GPIO_Init+0x1bc>)
 80052d0:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80052d2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80052d4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052d8:	684f      	ldr	r7, [r1, #4]
 80052da:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80052de:	d001      	beq.n	80052e4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80052e0:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 80052e4:	4c5b      	ldr	r4, [pc, #364]	; (8005454 <HAL_GPIO_Init+0x1bc>)
 80052e6:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052e8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80052ea:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052ee:	684f      	ldr	r7, [r1, #4]
 80052f0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80052f4:	d001      	beq.n	80052fa <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80052f6:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 80052fa:	4c56      	ldr	r4, [pc, #344]	; (8005454 <HAL_GPIO_Init+0x1bc>)
 80052fc:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80052fe:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005300:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005302:	684d      	ldr	r5, [r1, #4]
 8005304:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8005308:	d001      	beq.n	800530e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800530a:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 800530e:	4c51      	ldr	r4, [pc, #324]	; (8005454 <HAL_GPIO_Init+0x1bc>)
 8005310:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005312:	3301      	adds	r3, #1
 8005314:	2b0f      	cmp	r3, #15
 8005316:	f200 8098 	bhi.w	800544a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 800531a:	2201      	movs	r2, #1
 800531c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800531e:	680c      	ldr	r4, [r1, #0]
 8005320:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8005324:	42b2      	cmp	r2, r6
 8005326:	d1f4      	bne.n	8005312 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005328:	684c      	ldr	r4, [r1, #4]
 800532a:	1e65      	subs	r5, r4, #1
 800532c:	2d01      	cmp	r5, #1
 800532e:	d903      	bls.n	8005338 <HAL_GPIO_Init+0xa0>
 8005330:	2c11      	cmp	r4, #17
 8005332:	d001      	beq.n	8005338 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005334:	2c12      	cmp	r4, #18
 8005336:	d112      	bne.n	800535e <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8005338:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800533a:	005f      	lsls	r7, r3, #1
 800533c:	2403      	movs	r4, #3
 800533e:	40bc      	lsls	r4, r7
 8005340:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005344:	68cc      	ldr	r4, [r1, #12]
 8005346:	40bc      	lsls	r4, r7
 8005348:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800534a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800534c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800534e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005352:	684c      	ldr	r4, [r1, #4]
 8005354:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005358:	409a      	lsls	r2, r3
 800535a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800535c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800535e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005360:	005f      	lsls	r7, r3, #1
 8005362:	2203      	movs	r2, #3
 8005364:	40ba      	lsls	r2, r7
 8005366:	43d2      	mvns	r2, r2
 8005368:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800536a:	688d      	ldr	r5, [r1, #8]
 800536c:	40bd      	lsls	r5, r7
 800536e:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8005370:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005372:	684c      	ldr	r4, [r1, #4]
 8005374:	2c02      	cmp	r4, #2
 8005376:	d001      	beq.n	800537c <HAL_GPIO_Init+0xe4>
 8005378:	2c12      	cmp	r4, #18
 800537a:	d113      	bne.n	80053a4 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 800537c:	08dd      	lsrs	r5, r3, #3
 800537e:	3508      	adds	r5, #8
 8005380:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005384:	f003 0407 	and.w	r4, r3, #7
 8005388:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800538c:	240f      	movs	r4, #15
 800538e:	fa04 f40c 	lsl.w	r4, r4, ip
 8005392:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005396:	690c      	ldr	r4, [r1, #16]
 8005398:	fa04 f40c 	lsl.w	r4, r4, ip
 800539c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80053a0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80053a4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053a6:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053a8:	684c      	ldr	r4, [r1, #4]
 80053aa:	f004 0403 	and.w	r4, r4, #3
 80053ae:	40bc      	lsls	r4, r7
 80053b0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80053b2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053b4:	684a      	ldr	r2, [r1, #4]
 80053b6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80053ba:	d0aa      	beq.n	8005312 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053bc:	2200      	movs	r2, #0
 80053be:	9201      	str	r2, [sp, #4]
 80053c0:	4a25      	ldr	r2, [pc, #148]	; (8005458 <HAL_GPIO_Init+0x1c0>)
 80053c2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80053c4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80053c8:	6454      	str	r4, [r2, #68]	; 0x44
 80053ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053cc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80053d0:	9201      	str	r2, [sp, #4]
 80053d2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80053d4:	089c      	lsrs	r4, r3, #2
 80053d6:	1ca5      	adds	r5, r4, #2
 80053d8:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <HAL_GPIO_Init+0x1b8>)
 80053da:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053de:	f003 0203 	and.w	r2, r3, #3
 80053e2:	0095      	lsls	r5, r2, #2
 80053e4:	220f      	movs	r2, #15
 80053e6:	40aa      	lsls	r2, r5
 80053e8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_GPIO_Init+0x1c4>)
 80053ee:	4290      	cmp	r0, r2
 80053f0:	f43f af5b 	beq.w	80052aa <HAL_GPIO_Init+0x12>
 80053f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053f8:	4290      	cmp	r0, r2
 80053fa:	d01a      	beq.n	8005432 <HAL_GPIO_Init+0x19a>
 80053fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005400:	4290      	cmp	r0, r2
 8005402:	d018      	beq.n	8005436 <HAL_GPIO_Init+0x19e>
 8005404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005408:	4290      	cmp	r0, r2
 800540a:	d016      	beq.n	800543a <HAL_GPIO_Init+0x1a2>
 800540c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005410:	4290      	cmp	r0, r2
 8005412:	d014      	beq.n	800543e <HAL_GPIO_Init+0x1a6>
 8005414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005418:	4290      	cmp	r0, r2
 800541a:	d012      	beq.n	8005442 <HAL_GPIO_Init+0x1aa>
 800541c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005420:	4290      	cmp	r0, r2
 8005422:	d010      	beq.n	8005446 <HAL_GPIO_Init+0x1ae>
 8005424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005428:	4290      	cmp	r0, r2
 800542a:	f43f af3c 	beq.w	80052a6 <HAL_GPIO_Init+0xe>
 800542e:	2208      	movs	r2, #8
 8005430:	e73c      	b.n	80052ac <HAL_GPIO_Init+0x14>
 8005432:	2201      	movs	r2, #1
 8005434:	e73a      	b.n	80052ac <HAL_GPIO_Init+0x14>
 8005436:	2202      	movs	r2, #2
 8005438:	e738      	b.n	80052ac <HAL_GPIO_Init+0x14>
 800543a:	2203      	movs	r2, #3
 800543c:	e736      	b.n	80052ac <HAL_GPIO_Init+0x14>
 800543e:	2204      	movs	r2, #4
 8005440:	e734      	b.n	80052ac <HAL_GPIO_Init+0x14>
 8005442:	2205      	movs	r2, #5
 8005444:	e732      	b.n	80052ac <HAL_GPIO_Init+0x14>
 8005446:	2206      	movs	r2, #6
 8005448:	e730      	b.n	80052ac <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800544a:	b003      	add	sp, #12
 800544c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544e:	4770      	bx	lr
 8005450:	40013800 	.word	0x40013800
 8005454:	40013c00 	.word	0x40013c00
 8005458:	40023800 	.word	0x40023800
 800545c:	40020000 	.word	0x40020000

08005460 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005460:	6903      	ldr	r3, [r0, #16]
 8005462:	4219      	tst	r1, r3
 8005464:	d101      	bne.n	800546a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005466:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005468:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800546a:	2001      	movs	r0, #1
 800546c:	4770      	bx	lr

0800546e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800546e:	b912      	cbnz	r2, 8005476 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005470:	0409      	lsls	r1, r1, #16
 8005472:	6181      	str	r1, [r0, #24]
  }
}
 8005474:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8005476:	6181      	str	r1, [r0, #24]
 8005478:	4770      	bx	lr

0800547a <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800547a:	4770      	bx	lr

0800547c <HAL_GPIO_EXTI_IRQHandler>:
{
 800547c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	4203      	tst	r3, r0
 8005484:	d100      	bne.n	8005488 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8005486:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800548a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800548c:	f7ff fff5 	bl	800547a <HAL_GPIO_EXTI_Callback>
}
 8005490:	e7f9      	b.n	8005486 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005492:	bf00      	nop
 8005494:	40013c00 	.word	0x40013c00

08005498 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005498:	6803      	ldr	r3, [r0, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80054a0:	d011      	beq.n	80054c6 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054ac:	2220      	movs	r2, #32
 80054ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80054b8:	f042 0204 	orr.w	r2, r2, #4
 80054bc:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80054c2:	2001      	movs	r0, #1
 80054c4:	4770      	bx	lr
  }
  return HAL_OK;
 80054c6:	2000      	movs	r0, #0
}
 80054c8:	4770      	bx	lr

080054ca <I2C_WaitOnFlagUntilTimeout>:
{
 80054ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054cc:	4606      	mov	r6, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	4617      	mov	r7, r2
 80054d2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054d4:	e022      	b.n	800551c <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d6:	f7ff f9cf 	bl	8004878 <HAL_GetTick>
 80054da:	9b06      	ldr	r3, [sp, #24]
 80054dc:	1ac0      	subs	r0, r0, r3
 80054de:	42a8      	cmp	r0, r5
 80054e0:	d800      	bhi.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x1a>
 80054e2:	b9dd      	cbnz	r5, 800551c <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054e8:	2220      	movs	r2, #32
 80054ea:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ee:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054f2:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80054f4:	f042 0220 	orr.w	r2, r2, #32
 80054f8:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80054fa:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80054fe:	2001      	movs	r0, #1
 8005500:	e01a      	b.n	8005538 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005502:	6833      	ldr	r3, [r6, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	ea24 0303 	bic.w	r3, r4, r3
 800550a:	b29b      	uxth	r3, r3
 800550c:	fab3 f383 	clz	r3, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	429f      	cmp	r7, r3
 8005514:	d10f      	bne.n	8005536 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005516:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800551a:	d1dc      	bne.n	80054d6 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800551c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8005520:	2b01      	cmp	r3, #1
 8005522:	d0ee      	beq.n	8005502 <I2C_WaitOnFlagUntilTimeout+0x38>
 8005524:	6833      	ldr	r3, [r6, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	ea24 0303 	bic.w	r3, r4, r3
 800552c:	b29b      	uxth	r3, r3
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	e7ed      	b.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8005536:	2000      	movs	r0, #0
}
 8005538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800553a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	4616      	mov	r6, r2
 8005542:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005544:	e03c      	b.n	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005554:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005556:	2300      	movs	r3, #0
 8005558:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800555a:	2220      	movs	r2, #32
 800555c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005560:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005564:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005566:	f042 0204 	orr.w	r2, r2, #4
 800556a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800556c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005570:	2001      	movs	r0, #1
 8005572:	e033      	b.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005574:	f7ff f980 	bl	8004878 <HAL_GetTick>
 8005578:	1bc0      	subs	r0, r0, r7
 800557a:	42b0      	cmp	r0, r6
 800557c:	d800      	bhi.n	8005580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 800557e:	b9fe      	cbnz	r6, 80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005580:	2300      	movs	r3, #0
 8005582:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005584:	2220      	movs	r2, #32
 8005586:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005590:	f042 0220 	orr.w	r2, r2, #32
 8005594:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005596:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800559a:	2001      	movs	r0, #1
 800559c:	e01e      	b.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	ea25 0303 	bic.w	r3, r5, r3
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3300      	adds	r3, #0
 80055aa:	bf18      	it	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	b1a3      	cbz	r3, 80055da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80055b8:	d1c5      	bne.n	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80055be:	d1d9      	bne.n	8005574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055c0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d0ea      	beq.n	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	ea25 0303 	bic.w	r3, r5, r3
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3300      	adds	r3, #0
 80055d4:	bf18      	it	ne
 80055d6:	2301      	movne	r3, #1
 80055d8:	e7e9      	b.n	80055ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80055da:	2000      	movs	r0, #0
}
 80055dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055e0 <I2C_MasterRequestWrite>:
{
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	b083      	sub	sp, #12
 80055e4:	4604      	mov	r4, r0
 80055e6:	460f      	mov	r7, r1
 80055e8:	4615      	mov	r5, r2
 80055ea:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d00d      	beq.n	800560e <I2C_MasterRequestWrite+0x2e>
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d00b      	beq.n	800560e <I2C_MasterRequestWrite+0x2e>
 80055f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055fa:	d008      	beq.n	800560e <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80055fe:	2b12      	cmp	r3, #18
 8005600:	d10a      	bne.n	8005618 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005602:	6802      	ldr	r2, [r0, #0]
 8005604:	6813      	ldr	r3, [r2, #0]
 8005606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	e004      	b.n	8005618 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	6813      	ldr	r3, [r2, #0]
 8005612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005616:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005618:	9600      	str	r6, [sp, #0]
 800561a:	462b      	mov	r3, r5
 800561c:	2200      	movs	r2, #0
 800561e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005622:	4620      	mov	r0, r4
 8005624:	f7ff ff51 	bl	80054ca <I2C_WaitOnFlagUntilTimeout>
 8005628:	b158      	cbz	r0, 8005642 <I2C_MasterRequestWrite+0x62>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005632:	d02b      	beq.n	800568c <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005638:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
}
 800563c:	4618      	mov	r0, r3
 800563e:	b003      	add	sp, #12
 8005640:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005648:	d10e      	bne.n	8005668 <I2C_MasterRequestWrite+0x88>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8005650:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005652:	4633      	mov	r3, r6
 8005654:	462a      	mov	r2, r5
 8005656:	490f      	ldr	r1, [pc, #60]	; (8005694 <I2C_MasterRequestWrite+0xb4>)
 8005658:	4620      	mov	r0, r4
 800565a:	f7ff ff6e 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2800      	cmp	r0, #0
 8005662:	d0eb      	beq.n	800563c <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e7e9      	b.n	800563c <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005668:	11fb      	asrs	r3, r7, #7
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	f003 0306 	and.w	r3, r3, #6
 8005670:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005674:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005676:	4633      	mov	r3, r6
 8005678:	462a      	mov	r2, r5
 800567a:	4907      	ldr	r1, [pc, #28]	; (8005698 <I2C_MasterRequestWrite+0xb8>)
 800567c:	4620      	mov	r0, r4
 800567e:	f7ff ff5c 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005682:	b928      	cbnz	r0, 8005690 <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	b2ff      	uxtb	r7, r7
 8005688:	611f      	str	r7, [r3, #16]
 800568a:	e7e2      	b.n	8005652 <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e7d5      	b.n	800563c <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e7d3      	b.n	800563c <I2C_MasterRequestWrite+0x5c>
 8005694:	00010002 	.word	0x00010002
 8005698:	00010008 	.word	0x00010008

0800569c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	4604      	mov	r4, r0
 80056a0:	460d      	mov	r5, r1
 80056a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80056ac:	d11c      	bne.n	80056e8 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ae:	4620      	mov	r0, r4
 80056b0:	f7ff fef2 	bl	8005498 <I2C_IsAcknowledgeFailed>
 80056b4:	b9d0      	cbnz	r0, 80056ec <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80056b6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80056ba:	d0f3      	beq.n	80056a4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056bc:	f7ff f8dc 	bl	8004878 <HAL_GetTick>
 80056c0:	1b80      	subs	r0, r0, r6
 80056c2:	42a8      	cmp	r0, r5
 80056c4:	d801      	bhi.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	d1ec      	bne.n	80056a4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ce:	2220      	movs	r2, #32
 80056d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80056da:	f042 0220 	orr.w	r2, r2, #32
 80056de:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80056e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80056e4:	2001      	movs	r0, #1
 80056e6:	e000      	b.n	80056ea <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80056e8:	2000      	movs	r0, #0
}
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80056ec:	2001      	movs	r0, #1
 80056ee:	e7fc      	b.n	80056ea <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080056f0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	4604      	mov	r4, r0
 80056f4:	460d      	mov	r5, r1
 80056f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f013 0f04 	tst.w	r3, #4
 8005700:	d11c      	bne.n	800573c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005702:	4620      	mov	r0, r4
 8005704:	f7ff fec8 	bl	8005498 <I2C_IsAcknowledgeFailed>
 8005708:	b9d0      	cbnz	r0, 8005740 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800570a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800570e:	d0f3      	beq.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005710:	f7ff f8b2 	bl	8004878 <HAL_GetTick>
 8005714:	1b80      	subs	r0, r0, r6
 8005716:	42a8      	cmp	r0, r5
 8005718:	d801      	bhi.n	800571e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800571a:	2d00      	cmp	r5, #0
 800571c:	d1ec      	bne.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800571e:	2300      	movs	r3, #0
 8005720:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005722:	2220      	movs	r2, #32
 8005724:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005728:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800572e:	f042 0220 	orr.w	r2, r2, #32
 8005732:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005734:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005738:	2001      	movs	r0, #1
 800573a:	e000      	b.n	800573e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 800573c:	2000      	movs	r0, #0
}
 800573e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005740:	2001      	movs	r0, #1
 8005742:	e7fc      	b.n	800573e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08005744 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005744:	2800      	cmp	r0, #0
 8005746:	f000 80c8 	beq.w	80058da <HAL_I2C_Init+0x196>
{
 800574a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800574e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005752:	2b00      	cmp	r3, #0
 8005754:	d075      	beq.n	8005842 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005756:	2324      	movs	r3, #36	; 0x24
 8005758:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	6813      	ldr	r3, [r2, #0]
 800576a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005778:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800577a:	f001 f807 	bl	800678c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	4b58      	ldr	r3, [pc, #352]	; (80058e4 <HAL_I2C_Init+0x1a0>)
 8005782:	429a      	cmp	r2, r3
 8005784:	d862      	bhi.n	800584c <HAL_I2C_Init+0x108>
 8005786:	4b58      	ldr	r3, [pc, #352]	; (80058e8 <HAL_I2C_Init+0x1a4>)
 8005788:	4298      	cmp	r0, r3
 800578a:	bf8c      	ite	hi
 800578c:	2300      	movhi	r3, #0
 800578e:	2301      	movls	r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 80a4 	bne.w	80058de <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8005796:	4b55      	ldr	r3, [pc, #340]	; (80058ec <HAL_I2C_Init+0x1a8>)
 8005798:	fba3 2300 	umull	r2, r3, r3, r0
 800579c:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800579e:	6821      	ldr	r1, [r4, #0]
 80057a0:	684a      	ldr	r2, [r1, #4]
 80057a2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80057a6:	431a      	orrs	r2, r3
 80057a8:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057aa:	6825      	ldr	r5, [r4, #0]
 80057ac:	6a2a      	ldr	r2, [r5, #32]
 80057ae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80057b2:	6866      	ldr	r6, [r4, #4]
 80057b4:	494b      	ldr	r1, [pc, #300]	; (80058e4 <HAL_I2C_Init+0x1a0>)
 80057b6:	428e      	cmp	r6, r1
 80057b8:	d84e      	bhi.n	8005858 <HAL_I2C_Init+0x114>
 80057ba:	3301      	adds	r3, #1
 80057bc:	4313      	orrs	r3, r2
 80057be:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057c0:	6825      	ldr	r5, [r4, #0]
 80057c2:	69e9      	ldr	r1, [r5, #28]
 80057c4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80057c8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80057cc:	6863      	ldr	r3, [r4, #4]
 80057ce:	4a45      	ldr	r2, [pc, #276]	; (80058e4 <HAL_I2C_Init+0x1a0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d84b      	bhi.n	800586c <HAL_I2C_Init+0x128>
 80057d4:	3801      	subs	r0, #1
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80057dc:	3301      	adds	r3, #1
 80057de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	bf38      	it	cc
 80057e6:	2304      	movcc	r3, #4
 80057e8:	430b      	orrs	r3, r1
 80057ea:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057ec:	6821      	ldr	r1, [r4, #0]
 80057ee:	680b      	ldr	r3, [r1, #0]
 80057f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057f4:	69e2      	ldr	r2, [r4, #28]
 80057f6:	6a20      	ldr	r0, [r4, #32]
 80057f8:	4302      	orrs	r2, r0
 80057fa:	4313      	orrs	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057fe:	6821      	ldr	r1, [r4, #0]
 8005800:	688b      	ldr	r3, [r1, #8]
 8005802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800580a:	6922      	ldr	r2, [r4, #16]
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	4302      	orrs	r2, r0
 8005810:	4313      	orrs	r3, r2
 8005812:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005814:	6821      	ldr	r1, [r4, #0]
 8005816:	68cb      	ldr	r3, [r1, #12]
 8005818:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800581c:	6962      	ldr	r2, [r4, #20]
 800581e:	69a0      	ldr	r0, [r4, #24]
 8005820:	4302      	orrs	r2, r0
 8005822:	4313      	orrs	r3, r2
 8005824:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	6813      	ldr	r3, [r2, #0]
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005830:	2000      	movs	r0, #0
 8005832:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005834:	2320      	movs	r3, #32
 8005836:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800583a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800583c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8005840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005842:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005846:	f7fe fd1b 	bl	8004280 <HAL_I2C_MspInit>
 800584a:	e784      	b.n	8005756 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800584c:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <HAL_I2C_Init+0x1ac>)
 800584e:	4298      	cmp	r0, r3
 8005850:	bf8c      	ite	hi
 8005852:	2300      	movhi	r3, #0
 8005854:	2301      	movls	r3, #1
 8005856:	e79b      	b.n	8005790 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005858:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4924      	ldr	r1, [pc, #144]	; (80058f4 <HAL_I2C_Init+0x1b0>)
 8005862:	fba1 1303 	umull	r1, r3, r1, r3
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	3301      	adds	r3, #1
 800586a:	e7a7      	b.n	80057bc <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800586c:	68a2      	ldr	r2, [r4, #8]
 800586e:	b9ba      	cbnz	r2, 80058a0 <HAL_I2C_Init+0x15c>
 8005870:	1e46      	subs	r6, r0, #1
 8005872:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8005876:	fbb6 f6f7 	udiv	r6, r6, r7
 800587a:	3601      	adds	r6, #1
 800587c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8005880:	fab6 f686 	clz	r6, r6
 8005884:	0976      	lsrs	r6, r6, #5
 8005886:	bb36      	cbnz	r6, 80058d6 <HAL_I2C_Init+0x192>
 8005888:	b9c2      	cbnz	r2, 80058bc <HAL_I2C_Init+0x178>
 800588a:	3801      	subs	r0, #1
 800588c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005890:	fbb0 f3f3 	udiv	r3, r0, r3
 8005894:	3301      	adds	r3, #1
 8005896:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800589a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800589e:	e7a3      	b.n	80057e8 <HAL_I2C_Init+0xa4>
 80058a0:	1e46      	subs	r6, r0, #1
 80058a2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80058a6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80058aa:	fbb6 f6f7 	udiv	r6, r6, r7
 80058ae:	3601      	adds	r6, #1
 80058b0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80058b4:	fab6 f686 	clz	r6, r6
 80058b8:	0976      	lsrs	r6, r6, #5
 80058ba:	e7e4      	b.n	8005886 <HAL_I2C_Init+0x142>
 80058bc:	3801      	subs	r0, #1
 80058be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058c6:	fbb0 f2f3 	udiv	r2, r0, r3
 80058ca:	3201      	adds	r2, #1
 80058cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80058d0:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80058d4:	e788      	b.n	80057e8 <HAL_I2C_Init+0xa4>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e786      	b.n	80057e8 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 80058da:	2001      	movs	r0, #1
}
 80058dc:	4770      	bx	lr
    return HAL_ERROR;
 80058de:	2001      	movs	r0, #1
 80058e0:	e7ae      	b.n	8005840 <HAL_I2C_Init+0xfc>
 80058e2:	bf00      	nop
 80058e4:	000186a0 	.word	0x000186a0
 80058e8:	001e847f 	.word	0x001e847f
 80058ec:	431bde83 	.word	0x431bde83
 80058f0:	003d08ff 	.word	0x003d08ff
 80058f4:	10624dd3 	.word	0x10624dd3

080058f8 <HAL_I2C_Master_Transmit>:
{
 80058f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	4604      	mov	r4, r0
 8005900:	460e      	mov	r6, r1
 8005902:	4690      	mov	r8, r2
 8005904:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005906:	f7fe ffb7 	bl	8004878 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800590a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b20      	cmp	r3, #32
 8005912:	d004      	beq.n	800591e <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8005914:	2602      	movs	r6, #2
}
 8005916:	4630      	mov	r0, r6
 8005918:	b004      	add	sp, #16
 800591a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800591e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005920:	9000      	str	r0, [sp, #0]
 8005922:	2319      	movs	r3, #25
 8005924:	2201      	movs	r2, #1
 8005926:	494f      	ldr	r1, [pc, #316]	; (8005a64 <HAL_I2C_Master_Transmit+0x16c>)
 8005928:	4620      	mov	r0, r4
 800592a:	f7ff fdce 	bl	80054ca <I2C_WaitOnFlagUntilTimeout>
 800592e:	2800      	cmp	r0, #0
 8005930:	f040 8091 	bne.w	8005a56 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8005934:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	f000 808e 	beq.w	8005a5a <HAL_I2C_Master_Transmit+0x162>
 800593e:	2301      	movs	r3, #1
 8005940:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	f012 0f01 	tst.w	r2, #1
 800594c:	d103      	bne.n	8005956 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	6813      	ldr	r3, [r2, #0]
 800595a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800595e:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005960:	2321      	movs	r3, #33	; 0x21
 8005962:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005966:	2310      	movs	r3, #16
 8005968:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800596c:	2300      	movs	r3, #0
 800596e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005970:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005974:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005976:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005978:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800597a:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <HAL_I2C_Master_Transmit+0x170>)
 800597c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800597e:	462b      	mov	r3, r5
 8005980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005982:	4631      	mov	r1, r6
 8005984:	4620      	mov	r0, r4
 8005986:	f7ff fe2b 	bl	80055e0 <I2C_MasterRequestWrite>
 800598a:	4606      	mov	r6, r0
 800598c:	2800      	cmp	r0, #0
 800598e:	d166      	bne.n	8005a5e <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005990:	2300      	movs	r3, #0
 8005992:	9303      	str	r3, [sp, #12]
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	695a      	ldr	r2, [r3, #20]
 8005998:	9203      	str	r2, [sp, #12]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	9303      	str	r3, [sp, #12]
 800599e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80059a0:	e012      	b.n	80059c8 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80059a8:	2601      	movs	r6, #1
 80059aa:	e7b4      	b.n	8005916 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059b4:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80059b6:	2601      	movs	r6, #1
 80059b8:	e7ad      	b.n	8005916 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ba:	462a      	mov	r2, r5
 80059bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff fe96 	bl	80056f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d12c      	bne.n	8005a22 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80059c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d035      	beq.n	8005a3a <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ce:	462a      	mov	r2, r5
 80059d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7ff fe62 	bl	800569c <I2C_WaitOnTXEFlagUntilTimeout>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d1e2      	bne.n	80059a2 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80059e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059e6:	1c4b      	adds	r3, r1, #1
 80059e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80059ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80059f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059fa:	6822      	ldr	r2, [r4, #0]
 80059fc:	6950      	ldr	r0, [r2, #20]
 80059fe:	f010 0f04 	tst.w	r0, #4
 8005a02:	d0da      	beq.n	80059ba <HAL_I2C_Master_Transmit+0xc2>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0d8      	beq.n	80059ba <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a08:	784b      	ldrb	r3, [r1, #1]
 8005a0a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8005a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a0e:	3301      	adds	r3, #1
 8005a10:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005a12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005a1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	8523      	strh	r3, [r4, #40]	; 0x28
 8005a20:	e7cb      	b.n	80059ba <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d001      	beq.n	8005a2c <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8005a28:	2601      	movs	r6, #1
 8005a2a:	e774      	b.n	8005916 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a34:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8005a36:	2601      	movs	r6, #1
 8005a38:	e76d      	b.n	8005916 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	6813      	ldr	r3, [r2, #0]
 8005a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a42:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a44:	2320      	movs	r3, #32
 8005a46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005a50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005a54:	e75f      	b.n	8005916 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8005a56:	2602      	movs	r6, #2
 8005a58:	e75d      	b.n	8005916 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8005a5a:	2602      	movs	r6, #2
 8005a5c:	e75b      	b.n	8005916 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8005a5e:	2601      	movs	r6, #1
 8005a60:	e759      	b.n	8005916 <HAL_I2C_Master_Transmit+0x1e>
 8005a62:	bf00      	nop
 8005a64:	00100002 	.word	0x00100002
 8005a68:	ffff0000 	.word	0xffff0000

08005a6c <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	f000 80bf 	beq.w	8005bf0 <HAL_I2S_Init+0x184>
{
 8005a72:	b570      	push	{r4, r5, r6, lr}
 8005a74:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a76:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d051      	beq.n	8005b22 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a84:	6821      	ldr	r1, [r4, #0]
 8005a86:	69cb      	ldr	r3, [r1, #28]
 8005a88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a8c:	f023 030f 	bic.w	r3, r3, #15
 8005a90:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a96:	6963      	ldr	r3, [r4, #20]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d063      	beq.n	8005b64 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a9c:	68e3      	ldr	r3, [r4, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d146      	bne.n	8005b30 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005aa2:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005aa4:	68a3      	ldr	r3, [r4, #8]
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d800      	bhi.n	8005aac <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005aaa:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005aac:	2001      	movs	r0, #1
 8005aae:	f000 ff37 	bl	8006920 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab8:	d03c      	beq.n	8005b34 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005aba:	fbb0 f0f5 	udiv	r0, r0, r5
 8005abe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ac2:	0043      	lsls	r3, r0, #1
 8005ac4:	6962      	ldr	r2, [r4, #20]
 8005ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aca:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005acc:	4a49      	ldr	r2, [pc, #292]	; (8005bf4 <HAL_I2S_Init+0x188>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005ad4:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005adc:	0212      	lsls	r2, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005ade:	1e99      	subs	r1, r3, #2
 8005ae0:	29fd      	cmp	r1, #253	; 0xfd
 8005ae2:	d841      	bhi.n	8005b68 <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ae4:	6921      	ldr	r1, [r4, #16]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	6821      	ldr	r1, [r4, #0]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005aee:	6821      	ldr	r1, [r4, #0]
 8005af0:	69cb      	ldr	r3, [r1, #28]
 8005af2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005af6:	f023 030f 	bic.w	r3, r3, #15
 8005afa:	6862      	ldr	r2, [r4, #4]
 8005afc:	68a0      	ldr	r0, [r4, #8]
 8005afe:	4302      	orrs	r2, r0
 8005b00:	68e0      	ldr	r0, [r4, #12]
 8005b02:	4302      	orrs	r2, r0
 8005b04:	69a0      	ldr	r0, [r4, #24]
 8005b06:	4302      	orrs	r2, r0
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b0e:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b10:	6a23      	ldr	r3, [r4, #32]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d02e      	beq.n	8005b74 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b16:	2000      	movs	r0, #0
 8005b18:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8005b22:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b26:	4b34      	ldr	r3, [pc, #208]	; (8005bf8 <HAL_I2S_Init+0x18c>)
 8005b28:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8005b2a:	f7fe fbe3 	bl	80042f4 <HAL_I2S_MspInit>
 8005b2e:	e7a6      	b.n	8005a7e <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8005b30:	2520      	movs	r5, #32
 8005b32:	e7b7      	b.n	8005aa4 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005b34:	68e3      	ldr	r3, [r4, #12]
 8005b36:	b153      	cbz	r3, 8005b4e <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b38:	00ad      	lsls	r5, r5, #2
 8005b3a:	fbb0 f0f5 	udiv	r0, r0, r5
 8005b3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b42:	0043      	lsls	r3, r0, #1
 8005b44:	6962      	ldr	r2, [r4, #20]
 8005b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4a:	3305      	adds	r3, #5
 8005b4c:	e7be      	b.n	8005acc <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b4e:	00ed      	lsls	r5, r5, #3
 8005b50:	fbb0 f0f5 	udiv	r0, r0, r5
 8005b54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b58:	0043      	lsls	r3, r0, #1
 8005b5a:	6962      	ldr	r2, [r4, #20]
 8005b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b60:	3305      	adds	r3, #5
 8005b62:	e7b3      	b.n	8005acc <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8005b64:	2200      	movs	r2, #0
 8005b66:	e7ba      	b.n	8005ade <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b6a:	f043 0310 	orr.w	r3, r3, #16
 8005b6e:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8005b70:	2001      	movs	r0, #1
 8005b72:	e7d5      	b.n	8005b20 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005b74:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <HAL_I2S_Init+0x190>)
 8005b76:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <HAL_I2S_Init+0x194>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d01f      	beq.n	8005bc0 <HAL_I2S_Init+0x154>
 8005b80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005b84:	69d3      	ldr	r3, [r2, #28]
 8005b86:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b8a:	f023 030f 	bic.w	r3, r3, #15
 8005b8e:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <HAL_I2S_Init+0x194>)
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d015      	beq.n	8005bc4 <HAL_I2S_Init+0x158>
 8005b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <HAL_I2S_Init+0x194>)
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d010      	beq.n	8005bca <HAL_I2S_Init+0x15e>
 8005ba8:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8005bac:	69ca      	ldr	r2, [r1, #28]
 8005bae:	b292      	uxth	r2, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005bb0:	6863      	ldr	r3, [r4, #4]
 8005bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb6:	d00a      	beq.n	8005bce <HAL_I2S_Init+0x162>
 8005bb8:	b9c3      	cbnz	r3, 8005bec <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 8005bba:	f44f 7680 	mov.w	r6, #256	; 0x100
 8005bbe:	e008      	b.n	8005bd2 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005bc0:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <HAL_I2S_Init+0x198>)
 8005bc2:	e7df      	b.n	8005b84 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005bc4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005bc8:	e7e8      	b.n	8005b9c <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005bca:	490e      	ldr	r1, [pc, #56]	; (8005c04 <HAL_I2S_Init+0x198>)
 8005bcc:	e7ee      	b.n	8005bac <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8005bce:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005bd2:	68a0      	ldr	r0, [r4, #8]
 8005bd4:	68e5      	ldr	r5, [r4, #12]
                                    (uint16_t)hi2s->Init.CPOL))));
 8005bd6:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005bd8:	432b      	orrs	r3, r5
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4303      	orrs	r3, r0
 8005bde:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005be0:	4333      	orrs	r3, r6
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005be8:	61cb      	str	r3, [r1, #28]
 8005bea:	e794      	b.n	8005b16 <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8005bec:	2600      	movs	r6, #0
 8005bee:	e7f0      	b.n	8005bd2 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8005bf0:	2001      	movs	r0, #1
}
 8005bf2:	4770      	bx	lr
 8005bf4:	cccccccd 	.word	0xcccccccd
 8005bf8:	08005d83 	.word	0x08005d83
 8005bfc:	08005fb5 	.word	0x08005fb5
 8005c00:	40003800 	.word	0x40003800
 8005c04:	40003400 	.word	0x40003400

08005c08 <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	d05d      	beq.n	8005cc8 <HAL_I2S_Transmit_DMA+0xc0>
{
 8005c0c:	b510      	push	{r4, lr}
  if ((pData == NULL) || (Size == 0U))
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	d05d      	beq.n	8005cce <HAL_I2S_Transmit_DMA+0xc6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c12:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d05b      	beq.n	8005cd4 <HAL_I2S_Transmit_DMA+0xcc>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005c22:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d110      	bne.n	8005c4e <HAL_I2S_Transmit_DMA+0x46>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	6443      	str	r3, [r0, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005c36:	6241      	str	r1, [r0, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005c38:	6803      	ldr	r3, [r0, #0]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d009      	beq.n	8005c58 <HAL_I2S_Transmit_DMA+0x50>
 8005c44:	2b05      	cmp	r3, #5
 8005c46:	d007      	beq.n	8005c58 <HAL_I2S_Transmit_DMA+0x50>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005c48:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005c4a:	8542      	strh	r2, [r0, #42]	; 0x2a
 8005c4c:	e008      	b.n	8005c60 <HAL_I2S_Transmit_DMA+0x58>
    __HAL_UNLOCK(hi2s);
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
 8005c56:	e03b      	b.n	8005cd0 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 8005c58:	0052      	lsls	r2, r2, #1
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005c5e:	8542      	strh	r2, [r0, #42]	; 0x2a
 8005c60:	4604      	mov	r4, r0
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005c62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c64:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <HAL_I2S_Transmit_DMA+0xd0>)
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005c68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c6a:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <HAL_I2S_Transmit_DMA+0xd4>)
 8005c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005c6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c70:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <HAL_I2S_Transmit_DMA+0xd8>)
 8005c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
 8005c74:	6802      	ldr	r2, [r0, #0]
                                 hi2s->TxXferSize))
 8005c76:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c78:	320c      	adds	r2, #12
 8005c7a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005c7c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005c7e:	f7ff f9e7 	bl	8005050 <HAL_DMA_Start_IT>
 8005c82:	4603      	mov	r3, r0
 8005c84:	b9a8      	cbnz	r0, 8005cb2 <HAL_I2S_Transmit_DMA+0xaa>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	69d1      	ldr	r1, [r2, #28]
 8005c8a:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8005c8e:	d103      	bne.n	8005c98 <HAL_I2S_Transmit_DMA+0x90>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005c90:	69d1      	ldr	r1, [r2, #28]
 8005c92:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8005c96:	61d1      	str	r1, [r2, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	6851      	ldr	r1, [r2, #4]
 8005c9c:	f011 0f02 	tst.w	r1, #2
 8005ca0:	d103      	bne.n	8005caa <HAL_I2S_Transmit_DMA+0xa2>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ca2:	6851      	ldr	r1, [r2, #4]
 8005ca4:	f041 0102 	orr.w	r1, r1, #2
 8005ca8:	6051      	str	r1, [r2, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005caa:	2200      	movs	r2, #0
 8005cac:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  return HAL_OK;
 8005cb0:	e00e      	b.n	8005cd0 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005cb4:	f043 0308 	orr.w	r3, r3, #8
 8005cb8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_ERROR;
 8005cc6:	e003      	b.n	8005cd0 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	4770      	bx	lr
    return  HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hi2s);
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e7fb      	b.n	8005cd0 <HAL_I2S_Transmit_DMA+0xc8>
 8005cd8:	08005ce5 	.word	0x08005ce5
 8005cdc:	08005d25 	.word	0x08005d25
 8005ce0:	08005e53 	.word	0x08005e53

08005ce4 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005ce6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005ce8:	f7fb f974 	bl	8000fd4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005cec:	bd08      	pop	{r3, pc}

08005cee <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005cee:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005cf0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005cf2:	6803      	ldr	r3, [r0, #0]
 8005cf4:	8812      	ldrh	r2, [r2, #0]
 8005cf6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005cf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 8005cfe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d06:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	b103      	cbz	r3, 8005d0e <I2S_Transmit_IT+0x20>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d0c:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d0e:	6802      	ldr	r2, [r0, #0]
 8005d10:	6853      	ldr	r3, [r2, #4]
 8005d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d16:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8005d1e:	f7fb f949 	bl	8000fb4 <HAL_I2S_TxCpltCallback>
}
 8005d22:	e7f3      	b.n	8005d0c <I2S_Transmit_IT+0x1e>

08005d24 <I2S_DMATxCplt>:
{
 8005d24:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8005d28:	69c2      	ldr	r2, [r0, #28]
 8005d2a:	b94a      	cbnz	r2, 8005d40 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	684a      	ldr	r2, [r1, #4]
 8005d30:	f022 0202 	bic.w	r2, r2, #2
 8005d34:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 8005d36:	2200      	movs	r2, #0
 8005d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fb f937 	bl	8000fb4 <HAL_I2S_TxCpltCallback>
}
 8005d46:	bd08      	pop	{r3, pc}

08005d48 <HAL_I2S_RxCpltCallback>:
}
 8005d48:	4770      	bx	lr

08005d4a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d4a:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d4c:	6803      	ldr	r3, [r0, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005d52:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005d56:	3302      	adds	r3, #2
 8005d58:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005d5a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d62:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	b103      	cbz	r3, 8005d6a <I2S_Receive_IT+0x20>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d68:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d6a:	6802      	ldr	r2, [r0, #0]
 8005d6c:	6853      	ldr	r3, [r2, #4]
 8005d6e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d72:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8005d7a:	f7ff ffe5 	bl	8005d48 <HAL_I2S_RxCpltCallback>
}
 8005d7e:	e7f3      	b.n	8005d68 <I2S_Receive_IT+0x1e>

08005d80 <HAL_I2S_ErrorCallback>:
}
 8005d80:	4770      	bx	lr

08005d82 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d82:	b510      	push	{r4, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d88:	6802      	ldr	r2, [r0, #0]
 8005d8a:	6893      	ldr	r3, [r2, #8]
 8005d8c:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d006      	beq.n	8005da6 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d98:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d02c      	beq.n	8005dfc <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005da2:	b004      	add	sp, #16
 8005da4:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	f013 0f01 	tst.w	r3, #1
 8005dac:	d003      	beq.n	8005db6 <I2S_IRQHandler+0x34>
 8005dae:	6853      	ldr	r3, [r2, #4]
 8005db0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005db4:	d11f      	bne.n	8005df6 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dbc:	d0ec      	beq.n	8005d98 <I2S_IRQHandler+0x16>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	f012 0f20 	tst.w	r2, #32
 8005dc6:	d0e7      	beq.n	8005d98 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dce:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	9201      	str	r2, [sp, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005de6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005de8:	f043 0302 	orr.w	r3, r3, #2
 8005dec:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7ff ffc6 	bl	8005d80 <HAL_I2S_ErrorCallback>
 8005df4:	e7d0      	b.n	8005d98 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8005df6:	f7ff ffa8 	bl	8005d4a <I2S_Receive_IT>
 8005dfa:	e7dc      	b.n	8005db6 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	f013 0f02 	tst.w	r3, #2
 8005e02:	d004      	beq.n	8005e0e <I2S_IRQHandler+0x8c>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e0c:	d11d      	bne.n	8005e4a <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e0e:	9b03      	ldr	r3, [sp, #12]
 8005e10:	f013 0f08 	tst.w	r3, #8
 8005e14:	d0c5      	beq.n	8005da2 <I2S_IRQHandler+0x20>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	f012 0f20 	tst.w	r2, #32
 8005e1e:	d0c0      	beq.n	8005da2 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e26:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9302      	str	r3, [sp, #8]
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	9302      	str	r3, [sp, #8]
 8005e32:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e3c:	f043 0304 	orr.w	r3, r3, #4
 8005e40:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005e42:	4620      	mov	r0, r4
 8005e44:	f7ff ff9c 	bl	8005d80 <HAL_I2S_ErrorCallback>
}
 8005e48:	e7ab      	b.n	8005da2 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f7ff ff4f 	bl	8005cee <I2S_Transmit_IT>
 8005e50:	e7dd      	b.n	8005e0e <I2S_IRQHandler+0x8c>

08005e52 <I2S_DMAError>:
{
 8005e52:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e54:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005e56:	6802      	ldr	r2, [r0, #0]
 8005e58:	6853      	ldr	r3, [r2, #4]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005e64:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005e6e:	f043 0308 	orr.w	r3, r3, #8
 8005e72:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8005e74:	f7ff ff84 	bl	8005d80 <HAL_I2S_ErrorCallback>
}
 8005e78:	bd08      	pop	{r3, pc}

08005e7a <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005e7a:	4770      	bx	lr

08005e7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e7c:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e80:	1c9a      	adds	r2, r3, #2
 8005e82:	6242      	str	r2, [r0, #36]	; 0x24
 8005e84:	6802      	ldr	r2, [r0, #0]
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8005e8a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e92:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b93b      	cbnz	r3, 8005ea8 <I2SEx_TxISR_I2S+0x2c>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e98:	6802      	ldr	r2, [r0, #0]
 8005e9a:	6853      	ldr	r3, [r2, #4]
 8005e9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ea0:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8005ea2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b103      	cbz	r3, 8005eaa <I2SEx_TxISR_I2S+0x2e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ea8:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005eb0:	f7ff ffe3 	bl	8005e7a <HAL_I2SEx_TxRxCpltCallback>
}
 8005eb4:	e7f8      	b.n	8005ea8 <I2SEx_TxISR_I2S+0x2c>
	...

08005eb8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005eb8:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005eba:	6802      	ldr	r2, [r0, #0]
 8005ebc:	4b14      	ldr	r3, [pc, #80]	; (8005f10 <I2SEx_RxISR_I2SExt+0x58>)
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d01b      	beq.n	8005efa <I2SEx_RxISR_I2SExt+0x42>
 8005ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005eca:	1c99      	adds	r1, r3, #2
 8005ecc:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005ece:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ed0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ed8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	b963      	cbnz	r3, 8005ef8 <I2SEx_RxISR_I2SExt+0x40>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ede:	6802      	ldr	r2, [r0, #0]
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <I2SEx_RxISR_I2SExt+0x58>)
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d00c      	beq.n	8005f00 <I2SEx_RxISR_I2SExt+0x48>
 8005ee6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005eea:	6853      	ldr	r3, [r2, #4]
 8005eec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005ef0:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8005ef2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	b12b      	cbz	r3, 8005f04 <I2SEx_RxISR_I2SExt+0x4c>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ef8:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005efa:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005efe:	e7e2      	b.n	8005ec6 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f00:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <I2SEx_RxISR_I2SExt+0x5c>)
 8005f02:	e7f2      	b.n	8005eea <I2SEx_RxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f0a:	f7ff ffb6 	bl	8005e7a <HAL_I2SEx_TxRxCpltCallback>
}
 8005f0e:	e7f3      	b.n	8005ef8 <I2SEx_RxISR_I2SExt+0x40>
 8005f10:	40003800 	.word	0x40003800
 8005f14:	40003400 	.word	0x40003400

08005f18 <I2SEx_TxISR_I2SExt>:
{
 8005f18:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005f1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	6242      	str	r2, [r0, #36]	; 0x24
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	6801      	ldr	r1, [r0, #0]
 8005f24:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <I2SEx_TxISR_I2SExt+0x58>)
 8005f26:	4299      	cmp	r1, r3
 8005f28:	d017      	beq.n	8005f5a <I2SEx_TxISR_I2SExt+0x42>
 8005f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f2e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f30:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005f38:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	b963      	cbnz	r3, 8005f58 <I2SEx_TxISR_I2SExt+0x40>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f3e:	6802      	ldr	r2, [r0, #0]
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <I2SEx_TxISR_I2SExt+0x58>)
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d00c      	beq.n	8005f60 <I2SEx_TxISR_I2SExt+0x48>
 8005f46:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005f4a:	6853      	ldr	r3, [r2, #4]
 8005f4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f50:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8005f52:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	b12b      	cbz	r3, 8005f64 <I2SEx_TxISR_I2SExt+0x4c>
}
 8005f58:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005f5a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005f5e:	e7e6      	b.n	8005f2e <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f60:	4a04      	ldr	r2, [pc, #16]	; (8005f74 <I2SEx_TxISR_I2SExt+0x5c>)
 8005f62:	e7f2      	b.n	8005f4a <I2SEx_TxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f6a:	f7ff ff86 	bl	8005e7a <HAL_I2SEx_TxRxCpltCallback>
}
 8005f6e:	e7f3      	b.n	8005f58 <I2SEx_TxISR_I2SExt+0x40>
 8005f70:	40003800 	.word	0x40003800
 8005f74:	40003400 	.word	0x40003400

08005f78 <I2SEx_RxISR_I2S>:
{
 8005f78:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f7a:	6803      	ldr	r3, [r0, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005f80:	1c99      	adds	r1, r3, #2
 8005f82:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005f84:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f86:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8005f8e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	b93b      	cbnz	r3, 8005fa4 <I2SEx_RxISR_I2S+0x2c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f94:	6802      	ldr	r2, [r0, #0]
 8005f96:	6853      	ldr	r3, [r2, #4]
 8005f98:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005f9c:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8005f9e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	b103      	cbz	r3, 8005fa6 <I2SEx_RxISR_I2S+0x2e>
}
 8005fa4:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fac:	f7ff ff65 	bl	8005e7a <HAL_I2SEx_TxRxCpltCallback>
}
 8005fb0:	e7f8      	b.n	8005fa4 <I2SEx_RxISR_I2S+0x2c>
	...

08005fb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005fba:	6803      	ldr	r3, [r0, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005fc0:	4a70      	ldr	r2, [pc, #448]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d06f      	beq.n	80060a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8005fc6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005fca:	6891      	ldr	r1, [r2, #8]
 8005fcc:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005fd2:	6853      	ldr	r3, [r2, #4]
 8005fd4:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fdc:	d001      	beq.n	8005fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d170      	bne.n	80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005fe2:	9b05      	ldr	r3, [sp, #20]
 8005fe4:	f013 0f02 	tst.w	r3, #2
 8005fe8:	d003      	beq.n	8005ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ff0:	d15c      	bne.n	80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	f013 0f01 	tst.w	r3, #1
 8005ff8:	d003      	beq.n	8006002 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8005ffa:	9b02      	ldr	r3, [sp, #8]
 8005ffc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006000:	d158      	bne.n	80060b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006002:	9b04      	ldr	r3, [sp, #16]
 8006004:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006008:	d024      	beq.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 800600a:	9b02      	ldr	r3, [sp, #8]
 800600c:	f013 0f20 	tst.w	r3, #32
 8006010:	d020      	beq.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	4b5b      	ldr	r3, [pc, #364]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8006016:	429a      	cmp	r2, r3
 8006018:	d050      	beq.n	80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 800601a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800601e:	6853      	ldr	r3, [r2, #4]
 8006020:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006024:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006026:	6822      	ldr	r2, [r4, #0]
 8006028:	6853      	ldr	r3, [r2, #4]
 800602a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800602e:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006030:	2300      	movs	r3, #0
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	9200      	str	r2, [sp, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8006040:	2301      	movs	r3, #1
 8006042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006046:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006048:	f043 0302 	orr.w	r3, r3, #2
 800604c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800604e:	4620      	mov	r0, r4
 8006050:	f7ff fe96 	bl	8005d80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006054:	9b05      	ldr	r3, [sp, #20]
 8006056:	f013 0f08 	tst.w	r3, #8
 800605a:	d022      	beq.n	80060a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	f013 0f20 	tst.w	r3, #32
 8006062:	d01e      	beq.n	80060a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006064:	6822      	ldr	r2, [r4, #0]
 8006066:	6853      	ldr	r3, [r2, #4]
 8006068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800606c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	4b44      	ldr	r3, [pc, #272]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8006072:	429a      	cmp	r2, r3
 8006074:	d024      	beq.n	80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006076:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800607a:	6853      	ldr	r3, [r2, #4]
 800607c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006080:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006082:	2300      	movs	r3, #0
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800608e:	2301      	movs	r3, #1
 8006090:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006094:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006096:	f043 0304 	orr.w	r3, r3, #4
 800609a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800609c:	4620      	mov	r0, r4
 800609e:	f7ff fe6f 	bl	8005d80 <HAL_I2S_ErrorCallback>
}
 80060a2:	b006      	add	sp, #24
 80060a4:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80060a6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80060aa:	e78e      	b.n	8005fca <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 80060ac:	4620      	mov	r0, r4
 80060ae:	f7ff fee5 	bl	8005e7c <I2SEx_TxISR_I2S>
 80060b2:	e79e      	b.n	8005ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff feff 	bl	8005eb8 <I2SEx_RxISR_I2SExt>
 80060ba:	e7a2      	b.n	8006002 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060bc:	4a32      	ldr	r2, [pc, #200]	; (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80060be:	e7ae      	b.n	800601e <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060c0:	4a31      	ldr	r2, [pc, #196]	; (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80060c2:	e7da      	b.n	800607a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80060c4:	9b04      	ldr	r3, [sp, #16]
 80060c6:	f013 0f02 	tst.w	r3, #2
 80060ca:	d003      	beq.n	80060d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 80060cc:	9b02      	ldr	r3, [sp, #8]
 80060ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060d2:	d14a      	bne.n	800616a <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80060d4:	9b05      	ldr	r3, [sp, #20]
 80060d6:	f013 0f01 	tst.w	r3, #1
 80060da:	d003      	beq.n	80060e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80060dc:	9b03      	ldr	r3, [sp, #12]
 80060de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060e2:	d146      	bne.n	8006172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060e4:	9b05      	ldr	r3, [sp, #20]
 80060e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060ea:	d01c      	beq.n	8006126 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	f013 0f20 	tst.w	r3, #32
 80060f2:	d018      	beq.n	8006126 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	6853      	ldr	r3, [r2, #4]
 80060f8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80060fc:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	4b20      	ldr	r3, [pc, #128]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8006102:	429a      	cmp	r2, r3
 8006104:	d039      	beq.n	800617a <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8006106:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800610a:	6853      	ldr	r3, [r2, #4]
 800610c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006110:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006112:	2301      	movs	r3, #1
 8006114:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006118:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800611a:	f043 0302 	orr.w	r3, r3, #2
 800611e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff fe2d 	bl	8005d80 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	f013 0f08 	tst.w	r3, #8
 800612c:	d0b9      	beq.n	80060a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 800612e:	9b02      	ldr	r3, [sp, #8]
 8006130:	f013 0f20 	tst.w	r3, #32
 8006134:	d0b5      	beq.n	80060a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	4b12      	ldr	r3, [pc, #72]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800613a:	429a      	cmp	r2, r3
 800613c:	d01f      	beq.n	800617e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 800613e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006142:	6853      	ldr	r3, [r2, #4]
 8006144:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006148:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	6853      	ldr	r3, [r2, #4]
 800614e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006152:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006154:	2301      	movs	r3, #1
 8006156:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800615a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff fe0c 	bl	8005d80 <HAL_I2S_ErrorCallback>
}
 8006168:	e79b      	b.n	80060a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 800616a:	4620      	mov	r0, r4
 800616c:	f7ff fed4 	bl	8005f18 <I2SEx_TxISR_I2SExt>
 8006170:	e7b0      	b.n	80060d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8006172:	4620      	mov	r0, r4
 8006174:	f7ff ff00 	bl	8005f78 <I2SEx_RxISR_I2S>
 8006178:	e7b4      	b.n	80060e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800617a:	4a03      	ldr	r2, [pc, #12]	; (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800617c:	e7c5      	b.n	800610a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800617e:	4a02      	ldr	r2, [pc, #8]	; (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8006180:	e7df      	b.n	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8006182:	bf00      	nop
 8006184:	40003800 	.word	0x40003800
 8006188:	40003400 	.word	0x40003400

0800618c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800618c:	2800      	cmp	r0, #0
 800618e:	f000 81e4 	beq.w	800655a <HAL_RCC_OscConfig+0x3ce>
{
 8006192:	b570      	push	{r4, r5, r6, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006198:	6803      	ldr	r3, [r0, #0]
 800619a:	f013 0f01 	tst.w	r3, #1
 800619e:	d03b      	beq.n	8006218 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061a0:	4ba7      	ldr	r3, [pc, #668]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d02c      	beq.n	8006206 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ac:	4ba4      	ldr	r3, [pc, #656]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d021      	beq.n	80061fc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061be:	d04f      	beq.n	8006260 <HAL_RCC_OscConfig+0xd4>
 80061c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061c4:	d052      	beq.n	800626c <HAL_RCC_OscConfig+0xe0>
 80061c6:	4b9e      	ldr	r3, [pc, #632]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061d8:	6863      	ldr	r3, [r4, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d050      	beq.n	8006280 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061de:	f7fe fb4b 	bl	8004878 <HAL_GetTick>
 80061e2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e4:	4b96      	ldr	r3, [pc, #600]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80061ec:	d114      	bne.n	8006218 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061ee:	f7fe fb43 	bl	8004878 <HAL_GetTick>
 80061f2:	1b40      	subs	r0, r0, r5
 80061f4:	2864      	cmp	r0, #100	; 0x64
 80061f6:	d9f5      	bls.n	80061e4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80061f8:	2003      	movs	r0, #3
 80061fa:	e1b3      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fc:	4b90      	ldr	r3, [pc, #576]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006204:	d0d8      	beq.n	80061b8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006206:	4b8e      	ldr	r3, [pc, #568]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800620e:	d003      	beq.n	8006218 <HAL_RCC_OscConfig+0x8c>
 8006210:	6863      	ldr	r3, [r4, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 81a3 	beq.w	800655e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	f013 0f02 	tst.w	r3, #2
 800621e:	d055      	beq.n	80062cc <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006220:	4b87      	ldr	r3, [pc, #540]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f013 0f0c 	tst.w	r3, #12
 8006228:	d03e      	beq.n	80062a8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800622a:	4b85      	ldr	r3, [pc, #532]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006232:	2b08      	cmp	r3, #8
 8006234:	d033      	beq.n	800629e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d068      	beq.n	800630e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800623c:	4b81      	ldr	r3, [pc, #516]	; (8006444 <HAL_RCC_OscConfig+0x2b8>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006242:	f7fe fb19 	bl	8004878 <HAL_GetTick>
 8006246:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006248:	4b7d      	ldr	r3, [pc, #500]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f013 0f02 	tst.w	r3, #2
 8006250:	d154      	bne.n	80062fc <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006252:	f7fe fb11 	bl	8004878 <HAL_GetTick>
 8006256:	1b40      	subs	r0, r0, r5
 8006258:	2802      	cmp	r0, #2
 800625a:	d9f5      	bls.n	8006248 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800625c:	2003      	movs	r0, #3
 800625e:	e181      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006260:	4a77      	ldr	r2, [pc, #476]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e7b5      	b.n	80061d8 <HAL_RCC_OscConfig+0x4c>
 800626c:	4b74      	ldr	r3, [pc, #464]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e7ab      	b.n	80061d8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006280:	f7fe fafa 	bl	8004878 <HAL_GetTick>
 8006284:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006286:	4b6e      	ldr	r3, [pc, #440]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800628e:	d0c3      	beq.n	8006218 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006290:	f7fe faf2 	bl	8004878 <HAL_GetTick>
 8006294:	1b40      	subs	r0, r0, r5
 8006296:	2864      	cmp	r0, #100	; 0x64
 8006298:	d9f5      	bls.n	8006286 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800629a:	2003      	movs	r0, #3
 800629c:	e162      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800629e:	4b68      	ldr	r3, [pc, #416]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80062a6:	d1c6      	bne.n	8006236 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062a8:	4b65      	ldr	r3, [pc, #404]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f013 0f02 	tst.w	r3, #2
 80062b0:	d004      	beq.n	80062bc <HAL_RCC_OscConfig+0x130>
 80062b2:	68e3      	ldr	r3, [r4, #12]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80062b8:	2001      	movs	r0, #1
 80062ba:	e153      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062bc:	4a60      	ldr	r2, [pc, #384]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80062be:	6813      	ldr	r3, [r2, #0]
 80062c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062c4:	6921      	ldr	r1, [r4, #16]
 80062c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80062ca:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	f013 0f08 	tst.w	r3, #8
 80062d2:	d040      	beq.n	8006356 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062d4:	6963      	ldr	r3, [r4, #20]
 80062d6:	b363      	cbz	r3, 8006332 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062d8:	4b5b      	ldr	r3, [pc, #364]	; (8006448 <HAL_RCC_OscConfig+0x2bc>)
 80062da:	2201      	movs	r2, #1
 80062dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062de:	f7fe facb 	bl	8004878 <HAL_GetTick>
 80062e2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e4:	4b56      	ldr	r3, [pc, #344]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80062e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e8:	f013 0f02 	tst.w	r3, #2
 80062ec:	d133      	bne.n	8006356 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ee:	f7fe fac3 	bl	8004878 <HAL_GetTick>
 80062f2:	1b40      	subs	r0, r0, r5
 80062f4:	2802      	cmp	r0, #2
 80062f6:	d9f5      	bls.n	80062e4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80062f8:	2003      	movs	r0, #3
 80062fa:	e133      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fc:	4a50      	ldr	r2, [pc, #320]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80062fe:	6813      	ldr	r3, [r2, #0]
 8006300:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006304:	6921      	ldr	r1, [r4, #16]
 8006306:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e7de      	b.n	80062cc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800630e:	4b4d      	ldr	r3, [pc, #308]	; (8006444 <HAL_RCC_OscConfig+0x2b8>)
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006314:	f7fe fab0 	bl	8004878 <HAL_GetTick>
 8006318:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800631a:	4b49      	ldr	r3, [pc, #292]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f013 0f02 	tst.w	r3, #2
 8006322:	d0d3      	beq.n	80062cc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006324:	f7fe faa8 	bl	8004878 <HAL_GetTick>
 8006328:	1b40      	subs	r0, r0, r5
 800632a:	2802      	cmp	r0, #2
 800632c:	d9f5      	bls.n	800631a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800632e:	2003      	movs	r0, #3
 8006330:	e118      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006332:	4b45      	ldr	r3, [pc, #276]	; (8006448 <HAL_RCC_OscConfig+0x2bc>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006338:	f7fe fa9e 	bl	8004878 <HAL_GetTick>
 800633c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800633e:	4b40      	ldr	r3, [pc, #256]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006342:	f013 0f02 	tst.w	r3, #2
 8006346:	d006      	beq.n	8006356 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006348:	f7fe fa96 	bl	8004878 <HAL_GetTick>
 800634c:	1b40      	subs	r0, r0, r5
 800634e:	2802      	cmp	r0, #2
 8006350:	d9f5      	bls.n	800633e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8006352:	2003      	movs	r0, #3
 8006354:	e106      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	f013 0f04 	tst.w	r3, #4
 800635c:	d079      	beq.n	8006452 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800635e:	4b38      	ldr	r3, [pc, #224]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006366:	d133      	bne.n	80063d0 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006368:	2300      	movs	r3, #0
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	4b34      	ldr	r3, [pc, #208]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 800636e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006380:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006382:	4b32      	ldr	r3, [pc, #200]	; (800644c <HAL_RCC_OscConfig+0x2c0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f413 7f80 	tst.w	r3, #256	; 0x100
 800638a:	d023      	beq.n	80063d4 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800638c:	68a3      	ldr	r3, [r4, #8]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d034      	beq.n	80063fc <HAL_RCC_OscConfig+0x270>
 8006392:	2b05      	cmp	r3, #5
 8006394:	d038      	beq.n	8006408 <HAL_RCC_OscConfig+0x27c>
 8006396:	4b2a      	ldr	r3, [pc, #168]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	671a      	str	r2, [r3, #112]	; 0x70
 80063a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063a2:	f022 0204 	bic.w	r2, r2, #4
 80063a6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063a8:	68a3      	ldr	r3, [r4, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d036      	beq.n	800641c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ae:	f7fe fa63 	bl	8004878 <HAL_GetTick>
 80063b2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b4:	4b22      	ldr	r3, [pc, #136]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80063b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b8:	f013 0f02 	tst.w	r3, #2
 80063bc:	d148      	bne.n	8006450 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063be:	f7fe fa5b 	bl	8004878 <HAL_GetTick>
 80063c2:	1b80      	subs	r0, r0, r6
 80063c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80063c8:	4298      	cmp	r0, r3
 80063ca:	d9f3      	bls.n	80063b4 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80063cc:	2003      	movs	r0, #3
 80063ce:	e0c9      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 80063d0:	2500      	movs	r5, #0
 80063d2:	e7d6      	b.n	8006382 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063d4:	4a1d      	ldr	r2, [pc, #116]	; (800644c <HAL_RCC_OscConfig+0x2c0>)
 80063d6:	6813      	ldr	r3, [r2, #0]
 80063d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80063de:	f7fe fa4b 	bl	8004878 <HAL_GetTick>
 80063e2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e4:	4b19      	ldr	r3, [pc, #100]	; (800644c <HAL_RCC_OscConfig+0x2c0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80063ec:	d1ce      	bne.n	800638c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ee:	f7fe fa43 	bl	8004878 <HAL_GetTick>
 80063f2:	1b80      	subs	r0, r0, r6
 80063f4:	2802      	cmp	r0, #2
 80063f6:	d9f5      	bls.n	80063e4 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80063f8:	2003      	movs	r0, #3
 80063fa:	e0b3      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063fc:	4a10      	ldr	r2, [pc, #64]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80063fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	6713      	str	r3, [r2, #112]	; 0x70
 8006406:	e7cf      	b.n	80063a8 <HAL_RCC_OscConfig+0x21c>
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 800640a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800640c:	f042 0204 	orr.w	r2, r2, #4
 8006410:	671a      	str	r2, [r3, #112]	; 0x70
 8006412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	671a      	str	r2, [r3, #112]	; 0x70
 800641a:	e7c5      	b.n	80063a8 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800641c:	f7fe fa2c 	bl	8004878 <HAL_GetTick>
 8006420:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006422:	4b07      	ldr	r3, [pc, #28]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	f013 0f02 	tst.w	r3, #2
 800642a:	d011      	beq.n	8006450 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800642c:	f7fe fa24 	bl	8004878 <HAL_GetTick>
 8006430:	1b80      	subs	r0, r0, r6
 8006432:	f241 3388 	movw	r3, #5000	; 0x1388
 8006436:	4298      	cmp	r0, r3
 8006438:	d9f3      	bls.n	8006422 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800643a:	2003      	movs	r0, #3
 800643c:	e092      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
 800643e:	bf00      	nop
 8006440:	40023800 	.word	0x40023800
 8006444:	42470000 	.word	0x42470000
 8006448:	42470e80 	.word	0x42470e80
 800644c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006450:	b9ed      	cbnz	r5, 800648e <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006452:	69a3      	ldr	r3, [r4, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8084 	beq.w	8006562 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800645a:	4a45      	ldr	r2, [pc, #276]	; (8006570 <HAL_RCC_OscConfig+0x3e4>)
 800645c:	6892      	ldr	r2, [r2, #8]
 800645e:	f002 020c 	and.w	r2, r2, #12
 8006462:	2a08      	cmp	r2, #8
 8006464:	d051      	beq.n	800650a <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006466:	2b02      	cmp	r3, #2
 8006468:	d017      	beq.n	800649a <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646a:	4b42      	ldr	r3, [pc, #264]	; (8006574 <HAL_RCC_OscConfig+0x3e8>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006470:	f7fe fa02 	bl	8004878 <HAL_GetTick>
 8006474:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006476:	4b3e      	ldr	r3, [pc, #248]	; (8006570 <HAL_RCC_OscConfig+0x3e4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800647e:	d042      	beq.n	8006506 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006480:	f7fe f9fa 	bl	8004878 <HAL_GetTick>
 8006484:	1b00      	subs	r0, r0, r4
 8006486:	2802      	cmp	r0, #2
 8006488:	d9f5      	bls.n	8006476 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800648a:	2003      	movs	r0, #3
 800648c:	e06a      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800648e:	4a38      	ldr	r2, [pc, #224]	; (8006570 <HAL_RCC_OscConfig+0x3e4>)
 8006490:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006496:	6413      	str	r3, [r2, #64]	; 0x40
 8006498:	e7db      	b.n	8006452 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 800649a:	4b36      	ldr	r3, [pc, #216]	; (8006574 <HAL_RCC_OscConfig+0x3e8>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064a0:	f7fe f9ea 	bl	8004878 <HAL_GetTick>
 80064a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a6:	4b32      	ldr	r3, [pc, #200]	; (8006570 <HAL_RCC_OscConfig+0x3e4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80064ae:	d006      	beq.n	80064be <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b0:	f7fe f9e2 	bl	8004878 <HAL_GetTick>
 80064b4:	1b40      	subs	r0, r0, r5
 80064b6:	2802      	cmp	r0, #2
 80064b8:	d9f5      	bls.n	80064a6 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80064ba:	2003      	movs	r0, #3
 80064bc:	e052      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064be:	69e3      	ldr	r3, [r4, #28]
 80064c0:	6a22      	ldr	r2, [r4, #32]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80064c6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80064ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80064cc:	0852      	lsrs	r2, r2, #1
 80064ce:	3a01      	subs	r2, #1
 80064d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80064da:	4a25      	ldr	r2, [pc, #148]	; (8006570 <HAL_RCC_OscConfig+0x3e4>)
 80064dc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80064de:	4b25      	ldr	r3, [pc, #148]	; (8006574 <HAL_RCC_OscConfig+0x3e8>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064e4:	f7fe f9c8 	bl	8004878 <HAL_GetTick>
 80064e8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ea:	4b21      	ldr	r3, [pc, #132]	; (8006570 <HAL_RCC_OscConfig+0x3e4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80064f2:	d106      	bne.n	8006502 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fe f9c0 	bl	8004878 <HAL_GetTick>
 80064f8:	1b00      	subs	r0, r0, r4
 80064fa:	2802      	cmp	r0, #2
 80064fc:	d9f5      	bls.n	80064ea <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80064fe:	2003      	movs	r0, #3
 8006500:	e030      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006502:	2000      	movs	r0, #0
 8006504:	e02e      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
 8006506:	2000      	movs	r0, #0
 8006508:	e02c      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800650a:	2b01      	cmp	r3, #1
 800650c:	d02c      	beq.n	8006568 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 800650e:	4b18      	ldr	r3, [pc, #96]	; (8006570 <HAL_RCC_OscConfig+0x3e4>)
 8006510:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006512:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8006516:	69e2      	ldr	r2, [r4, #28]
 8006518:	4291      	cmp	r1, r2
 800651a:	d001      	beq.n	8006520 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 800651c:	2001      	movs	r0, #1
 800651e:	e021      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006520:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006524:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006526:	428a      	cmp	r2, r1
 8006528:	d001      	beq.n	800652e <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 800652a:	2001      	movs	r0, #1
 800652c:	e01a      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800652e:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006530:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006534:	401a      	ands	r2, r3
 8006536:	428a      	cmp	r2, r1
 8006538:	d001      	beq.n	800653e <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 800653a:	2001      	movs	r0, #1
 800653c:	e012      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800653e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006542:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006544:	428a      	cmp	r2, r1
 8006546:	d001      	beq.n	800654c <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8006548:	2001      	movs	r0, #1
 800654a:	e00b      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800654c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006550:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006552:	4293      	cmp	r3, r2
 8006554:	d00a      	beq.n	800656c <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8006556:	2001      	movs	r0, #1
 8006558:	e004      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 800655a:	2001      	movs	r0, #1
}
 800655c:	4770      	bx	lr
        return HAL_ERROR;
 800655e:	2001      	movs	r0, #1
 8006560:	e000      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8006562:	2000      	movs	r0, #0
}
 8006564:	b002      	add	sp, #8
 8006566:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006568:	2001      	movs	r0, #1
 800656a:	e7fb      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 800656c:	2000      	movs	r0, #0
 800656e:	e7f9      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
 8006570:	40023800 	.word	0x40023800
 8006574:	42470060 	.word	0x42470060

08006578 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006578:	4b26      	ldr	r3, [pc, #152]	; (8006614 <HAL_RCC_GetSysClockFreq+0x9c>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b04      	cmp	r3, #4
 8006582:	d044      	beq.n	800660e <HAL_RCC_GetSysClockFreq+0x96>
 8006584:	2b08      	cmp	r3, #8
 8006586:	d001      	beq.n	800658c <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006588:	4823      	ldr	r0, [pc, #140]	; (8006618 <HAL_RCC_GetSysClockFreq+0xa0>)
 800658a:	4770      	bx	lr
{
 800658c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006590:	4b20      	ldr	r3, [pc, #128]	; (8006614 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800659e:	d013      	beq.n	80065c8 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a0:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <HAL_RCC_GetSysClockFreq+0x9c>)
 80065a2:	6859      	ldr	r1, [r3, #4]
 80065a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80065a8:	2300      	movs	r3, #0
 80065aa:	481c      	ldr	r0, [pc, #112]	; (800661c <HAL_RCC_GetSysClockFreq+0xa4>)
 80065ac:	fba1 0100 	umull	r0, r1, r1, r0
 80065b0:	f7fa fab0 	bl	8000b14 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065b4:	4b17      	ldr	r3, [pc, #92]	; (8006614 <HAL_RCC_GetSysClockFreq+0x9c>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80065bc:	3301      	adds	r3, #1
 80065be:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80065c0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80065c4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065c8:	4b12      	ldr	r3, [pc, #72]	; (8006614 <HAL_RCC_GetSysClockFreq+0x9c>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80065d0:	461e      	mov	r6, r3
 80065d2:	2700      	movs	r7, #0
 80065d4:	015c      	lsls	r4, r3, #5
 80065d6:	2500      	movs	r5, #0
 80065d8:	1ae4      	subs	r4, r4, r3
 80065da:	eb65 0507 	sbc.w	r5, r5, r7
 80065de:	01a9      	lsls	r1, r5, #6
 80065e0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80065e4:	01a0      	lsls	r0, r4, #6
 80065e6:	1b00      	subs	r0, r0, r4
 80065e8:	eb61 0105 	sbc.w	r1, r1, r5
 80065ec:	00cb      	lsls	r3, r1, #3
 80065ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80065f2:	00c4      	lsls	r4, r0, #3
 80065f4:	19a0      	adds	r0, r4, r6
 80065f6:	eb43 0107 	adc.w	r1, r3, r7
 80065fa:	028b      	lsls	r3, r1, #10
 80065fc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8006600:	0284      	lsls	r4, r0, #10
 8006602:	4620      	mov	r0, r4
 8006604:	4619      	mov	r1, r3
 8006606:	2300      	movs	r3, #0
 8006608:	f7fa fa84 	bl	8000b14 <__aeabi_uldivmod>
 800660c:	e7d2      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800660e:	4803      	ldr	r0, [pc, #12]	; (800661c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40023800 	.word	0x40023800
 8006618:	00f42400 	.word	0x00f42400
 800661c:	017d7840 	.word	0x017d7840

08006620 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006620:	2800      	cmp	r0, #0
 8006622:	f000 809e 	beq.w	8006762 <HAL_RCC_ClockConfig+0x142>
{
 8006626:	b570      	push	{r4, r5, r6, lr}
 8006628:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800662a:	4b50      	ldr	r3, [pc, #320]	; (800676c <HAL_RCC_ClockConfig+0x14c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	428b      	cmp	r3, r1
 8006634:	d209      	bcs.n	800664a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	b2cb      	uxtb	r3, r1
 8006638:	4a4c      	ldr	r2, [pc, #304]	; (800676c <HAL_RCC_ClockConfig+0x14c>)
 800663a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800663c:	6813      	ldr	r3, [r2, #0]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	428b      	cmp	r3, r1
 8006644:	d001      	beq.n	800664a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8006646:	2001      	movs	r0, #1
}
 8006648:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	f013 0f02 	tst.w	r3, #2
 8006650:	d017      	beq.n	8006682 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006652:	f013 0f04 	tst.w	r3, #4
 8006656:	d004      	beq.n	8006662 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006658:	4a45      	ldr	r2, [pc, #276]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 800665a:	6893      	ldr	r3, [r2, #8]
 800665c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006660:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	f013 0f08 	tst.w	r3, #8
 8006668:	d004      	beq.n	8006674 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800666a:	4a41      	ldr	r2, [pc, #260]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 800666c:	6893      	ldr	r3, [r2, #8]
 800666e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006672:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006674:	4a3e      	ldr	r2, [pc, #248]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 8006676:	6893      	ldr	r3, [r2, #8]
 8006678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800667c:	68a0      	ldr	r0, [r4, #8]
 800667e:	4303      	orrs	r3, r0
 8006680:	6093      	str	r3, [r2, #8]
 8006682:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	f013 0f01 	tst.w	r3, #1
 800668a:	d032      	beq.n	80066f2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d021      	beq.n	80066d6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006692:	1e9a      	subs	r2, r3, #2
 8006694:	2a01      	cmp	r2, #1
 8006696:	d925      	bls.n	80066e4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006698:	4a35      	ldr	r2, [pc, #212]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	f012 0f02 	tst.w	r2, #2
 80066a0:	d061      	beq.n	8006766 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066a2:	4933      	ldr	r1, [pc, #204]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 80066a4:	688a      	ldr	r2, [r1, #8]
 80066a6:	f022 0203 	bic.w	r2, r2, #3
 80066aa:	4313      	orrs	r3, r2
 80066ac:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80066ae:	f7fe f8e3 	bl	8004878 <HAL_GetTick>
 80066b2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b4:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 030c 	and.w	r3, r3, #12
 80066bc:	6862      	ldr	r2, [r4, #4]
 80066be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80066c2:	d016      	beq.n	80066f2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c4:	f7fe f8d8 	bl	8004878 <HAL_GetTick>
 80066c8:	1b80      	subs	r0, r0, r6
 80066ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80066ce:	4298      	cmp	r0, r3
 80066d0:	d9f0      	bls.n	80066b4 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80066d2:	2003      	movs	r0, #3
 80066d4:	e7b8      	b.n	8006648 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d6:	4a26      	ldr	r2, [pc, #152]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 80066d8:	6812      	ldr	r2, [r2, #0]
 80066da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80066de:	d1e0      	bne.n	80066a2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80066e0:	2001      	movs	r0, #1
 80066e2:	e7b1      	b.n	8006648 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e4:	4a22      	ldr	r2, [pc, #136]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 80066e6:	6812      	ldr	r2, [r2, #0]
 80066e8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80066ec:	d1d9      	bne.n	80066a2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80066ee:	2001      	movs	r0, #1
 80066f0:	e7aa      	b.n	8006648 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066f2:	4b1e      	ldr	r3, [pc, #120]	; (800676c <HAL_RCC_ClockConfig+0x14c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	42ab      	cmp	r3, r5
 80066fc:	d909      	bls.n	8006712 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fe:	b2ea      	uxtb	r2, r5
 8006700:	4b1a      	ldr	r3, [pc, #104]	; (800676c <HAL_RCC_ClockConfig+0x14c>)
 8006702:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	42ab      	cmp	r3, r5
 800670c:	d001      	beq.n	8006712 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800670e:	2001      	movs	r0, #1
 8006710:	e79a      	b.n	8006648 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f013 0f04 	tst.w	r3, #4
 8006718:	d006      	beq.n	8006728 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800671a:	4a15      	ldr	r2, [pc, #84]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 800671c:	6893      	ldr	r3, [r2, #8]
 800671e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006722:	68e1      	ldr	r1, [r4, #12]
 8006724:	430b      	orrs	r3, r1
 8006726:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	f013 0f08 	tst.w	r3, #8
 800672e:	d007      	beq.n	8006740 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006730:	4a0f      	ldr	r2, [pc, #60]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 8006732:	6893      	ldr	r3, [r2, #8]
 8006734:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006738:	6921      	ldr	r1, [r4, #16]
 800673a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800673e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006740:	f7ff ff1a 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 8006744:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <HAL_RCC_ClockConfig+0x150>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800674c:	4a09      	ldr	r2, [pc, #36]	; (8006774 <HAL_RCC_ClockConfig+0x154>)
 800674e:	5cd3      	ldrb	r3, [r2, r3]
 8006750:	40d8      	lsrs	r0, r3
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <HAL_RCC_ClockConfig+0x158>)
 8006754:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006756:	4b09      	ldr	r3, [pc, #36]	; (800677c <HAL_RCC_ClockConfig+0x15c>)
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f7fe f841 	bl	80047e0 <HAL_InitTick>
  return HAL_OK;
 800675e:	2000      	movs	r0, #0
 8006760:	e772      	b.n	8006648 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006762:	2001      	movs	r0, #1
}
 8006764:	4770      	bx	lr
        return HAL_ERROR;
 8006766:	2001      	movs	r0, #1
 8006768:	e76e      	b.n	8006648 <HAL_RCC_ClockConfig+0x28>
 800676a:	bf00      	nop
 800676c:	40023c00 	.word	0x40023c00
 8006770:	40023800 	.word	0x40023800
 8006774:	080163b8 	.word	0x080163b8
 8006778:	20000008 	.word	0x20000008
 800677c:	20000010 	.word	0x20000010

08006780 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006780:	4b01      	ldr	r3, [pc, #4]	; (8006788 <HAL_RCC_GetHCLKFreq+0x8>)
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000008 	.word	0x20000008

0800678c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800678c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800678e:	f7ff fff7 	bl	8006780 <HAL_RCC_GetHCLKFreq>
 8006792:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800679a:	4a03      	ldr	r2, [pc, #12]	; (80067a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800679c:	5cd3      	ldrb	r3, [r2, r3]
}
 800679e:	40d8      	lsrs	r0, r3
 80067a0:	bd08      	pop	{r3, pc}
 80067a2:	bf00      	nop
 80067a4:	40023800 	.word	0x40023800
 80067a8:	080163c8 	.word	0x080163c8

080067ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067ae:	f7ff ffe7 	bl	8006780 <HAL_RCC_GetHCLKFreq>
 80067b2:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80067ba:	4a03      	ldr	r2, [pc, #12]	; (80067c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80067bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80067be:	40d8      	lsrs	r0, r3
 80067c0:	bd08      	pop	{r3, pc}
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	080163c8 	.word	0x080163c8

080067cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067cc:	b530      	push	{r4, r5, lr}
 80067ce:	b083      	sub	sp, #12
 80067d0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067d2:	6803      	ldr	r3, [r0, #0]
 80067d4:	f013 0f05 	tst.w	r3, #5
 80067d8:	d106      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f013 0f02 	tst.w	r3, #2
 80067e0:	d12e      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80067e2:	2000      	movs	r0, #0
}
 80067e4:	b003      	add	sp, #12
 80067e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80067e8:	4b49      	ldr	r3, [pc, #292]	; (8006910 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80067ee:	f7fe f843 	bl	8004878 <HAL_GetTick>
 80067f2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067f4:	4b47      	ldr	r3, [pc, #284]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80067fc:	d006      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067fe:	f7fe f83b 	bl	8004878 <HAL_GetTick>
 8006802:	1b40      	subs	r0, r0, r5
 8006804:	2802      	cmp	r0, #2
 8006806:	d9f5      	bls.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8006808:	2003      	movs	r0, #3
 800680a:	e7eb      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800680c:	6862      	ldr	r2, [r4, #4]
 800680e:	68a3      	ldr	r3, [r4, #8]
 8006810:	071b      	lsls	r3, r3, #28
 8006812:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006816:	4a3f      	ldr	r2, [pc, #252]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8006818:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800681c:	4b3c      	ldr	r3, [pc, #240]	; (8006910 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006822:	f7fe f829 	bl	8004878 <HAL_GetTick>
 8006826:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006828:	4b3a      	ldr	r3, [pc, #232]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006830:	d1d3      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006832:	f7fe f821 	bl	8004878 <HAL_GetTick>
 8006836:	1b40      	subs	r0, r0, r5
 8006838:	2802      	cmp	r0, #2
 800683a:	d9f5      	bls.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 800683c:	2003      	movs	r0, #3
 800683e:	e7d1      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006840:	2300      	movs	r3, #0
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	4b33      	ldr	r3, [pc, #204]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8006846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006848:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006858:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006860:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006862:	f7fe f809 	bl	8004878 <HAL_GetTick>
 8006866:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006868:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006870:	d106      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006872:	f7fe f801 	bl	8004878 <HAL_GetTick>
 8006876:	1b40      	subs	r0, r0, r5
 8006878:	2802      	cmp	r0, #2
 800687a:	d9f5      	bls.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 800687c:	2003      	movs	r0, #3
 800687e:	e7b1      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006880:	4b24      	ldr	r3, [pc, #144]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006884:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006888:	d012      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800688a:	68e2      	ldr	r2, [r4, #12]
 800688c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006890:	429a      	cmp	r2, r3
 8006892:	d00d      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006894:	4b1f      	ldr	r3, [pc, #124]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8006896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006898:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800689c:	491f      	ldr	r1, [pc, #124]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800689e:	2001      	movs	r0, #1
 80068a0:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068a2:	2000      	movs	r0, #0
 80068a4:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 80068a6:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	f013 0f01 	tst.w	r3, #1
 80068ae:	d113      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068b0:	68e3      	ldr	r3, [r4, #12]
 80068b2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80068b6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80068ba:	d01e      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80068bc:	4a15      	ldr	r2, [pc, #84]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80068be:	6893      	ldr	r3, [r2, #8]
 80068c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068c4:	6093      	str	r3, [r2, #8]
 80068c6:	4913      	ldr	r1, [pc, #76]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80068c8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80068ca:	68e2      	ldr	r2, [r4, #12]
 80068cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80068d0:	4313      	orrs	r3, r2
 80068d2:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 80068d4:	2000      	movs	r0, #0
 80068d6:	e785      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80068d8:	f7fd ffce 	bl	8004878 <HAL_GetTick>
 80068dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068de:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	f013 0f02 	tst.w	r3, #2
 80068e6:	d1e3      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068e8:	f7fd ffc6 	bl	8004878 <HAL_GetTick>
 80068ec:	1b40      	subs	r0, r0, r5
 80068ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80068f2:	4298      	cmp	r0, r3
 80068f4:	d9f3      	bls.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 80068f6:	2003      	movs	r0, #3
 80068f8:	e774      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068fa:	4906      	ldr	r1, [pc, #24]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80068fc:	688a      	ldr	r2, [r1, #8]
 80068fe:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006902:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690a:	4313      	orrs	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
 800690e:	e7da      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006910:	42470068 	.word	0x42470068
 8006914:	40023800 	.word	0x40023800
 8006918:	40007000 	.word	0x40007000
 800691c:	42470e40 	.word	0x42470e40

08006920 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8006920:	2801      	cmp	r0, #1
 8006922:	d12a      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8006926:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8006928:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 800692c:	d003      	beq.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 800692e:	2b01      	cmp	r3, #1
 8006930:	d125      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006932:	4815      	ldr	r0, [pc, #84]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8006934:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006936:	4b13      	ldr	r3, [pc, #76]	; (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800693e:	d014      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006940:	4b10      	ldr	r3, [pc, #64]	; (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006948:	4810      	ldr	r0, [pc, #64]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 800694a:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800694e:	4a0d      	ldr	r2, [pc, #52]	; (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8006950:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8006954:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006958:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800695c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8006960:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8006964:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8006968:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006972:	4807      	ldr	r0, [pc, #28]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8006974:	fbb0 f0f3 	udiv	r0, r0, r3
 8006978:	e7e9      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t frequency = 0U;
 800697a:	2000      	movs	r0, #0
 800697c:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800697e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40023800 	.word	0x40023800
 8006988:	00bb8000 	.word	0x00bb8000
 800698c:	017d7840 	.word	0x017d7840
 8006990:	00f42400 	.word	0x00f42400

08006994 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006994:	b198      	cbz	r0, 80069be <HAL_RNG_Init+0x2a>
{
 8006996:	b510      	push	{r4, lr}
 8006998:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800699a:	7943      	ldrb	r3, [r0, #5]
 800699c:	b15b      	cbz	r3, 80069b6 <HAL_RNG_Init+0x22>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800699e:	2302      	movs	r3, #2
 80069a0:	7163      	strb	r3, [r4, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	6813      	ldr	r3, [r2, #0]
 80069a6:	f043 0304 	orr.w	r3, r3, #4
 80069aa:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80069ac:	2301      	movs	r3, #1
 80069ae:	7163      	strb	r3, [r4, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80069b0:	2000      	movs	r0, #0
 80069b2:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 80069b4:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 80069b6:	7103      	strb	r3, [r0, #4]
    HAL_RNG_MspInit(hrng);
 80069b8:	f7fd fd22 	bl	8004400 <HAL_RNG_MspInit>
 80069bc:	e7ef      	b.n	800699e <HAL_RNG_Init+0xa>
    return HAL_ERROR;
 80069be:	2001      	movs	r0, #1
}
 80069c0:	4770      	bx	lr
	...

080069c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80069c8:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ca:	6802      	ldr	r2, [r0, #0]
 80069cc:	6913      	ldr	r3, [r2, #16]
 80069ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069d2:	68c1      	ldr	r1, [r0, #12]
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069d8:	6883      	ldr	r3, [r0, #8]
 80069da:	6902      	ldr	r2, [r0, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	6942      	ldr	r2, [r0, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	69c2      	ldr	r2, [r0, #28]
 80069e4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80069e6:	6801      	ldr	r1, [r0, #0]
 80069e8:	68cb      	ldr	r3, [r1, #12]
 80069ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80069ee:	f023 030c 	bic.w	r3, r3, #12
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069f6:	6802      	ldr	r2, [r0, #0]
 80069f8:	6953      	ldr	r3, [r2, #20]
 80069fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069fe:	6981      	ldr	r1, [r0, #24]
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a04:	69c3      	ldr	r3, [r0, #28]
 8006a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0a:	d03b      	beq.n	8006a84 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a0c:	6803      	ldr	r3, [r0, #0]
 8006a0e:	4a71      	ldr	r2, [pc, #452]	; (8006bd4 <UART_SetConfig+0x210>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	f000 80ab 	beq.w	8006b6c <UART_SetConfig+0x1a8>
 8006a16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	f000 80a6 	beq.w	8006b6c <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7ff feb4 	bl	800678c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a24:	f04f 0900 	mov.w	r9, #0
 8006a28:	1806      	adds	r6, r0, r0
 8006a2a:	eb49 0709 	adc.w	r7, r9, r9
 8006a2e:	eb16 0b00 	adds.w	fp, r6, r0
 8006a32:	eb47 0c09 	adc.w	ip, r7, r9
 8006a36:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8006a3a:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8006a3e:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8006a42:	4693      	mov	fp, r2
 8006a44:	469c      	mov	ip, r3
 8006a46:	6863      	ldr	r3, [r4, #4]
 8006a48:	009a      	lsls	r2, r3, #2
 8006a4a:	0f9b      	lsrs	r3, r3, #30
 8006a4c:	eb10 000b 	adds.w	r0, r0, fp
 8006a50:	eb49 010c 	adc.w	r1, r9, ip
 8006a54:	f7fa f85e 	bl	8000b14 <__aeabi_uldivmod>
 8006a58:	4d5f      	ldr	r5, [pc, #380]	; (8006bd8 <UART_SetConfig+0x214>)
 8006a5a:	fba5 3200 	umull	r3, r2, r5, r0
 8006a5e:	0951      	lsrs	r1, r2, #5
 8006a60:	2264      	movs	r2, #100	; 0x64
 8006a62:	fb02 0211 	mls	r2, r2, r1, r0
 8006a66:	0113      	lsls	r3, r2, #4
 8006a68:	3332      	adds	r3, #50	; 0x32
 8006a6a:	fba5 2303 	umull	r2, r3, r5, r3
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a74:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	6821      	ldr	r1, [r4, #0]
 8006a7e:	4413      	add	r3, r2
 8006a80:	608b      	str	r3, [r1, #8]
    }
  }
}
 8006a82:	e0a4      	b.n	8006bce <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a84:	6803      	ldr	r3, [r0, #0]
 8006a86:	4a53      	ldr	r2, [pc, #332]	; (8006bd4 <UART_SetConfig+0x210>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d039      	beq.n	8006b00 <UART_SetConfig+0x13c>
 8006a8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d035      	beq.n	8006b00 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a94:	f7ff fe7a 	bl	800678c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a98:	4683      	mov	fp, r0
 8006a9a:	f04f 0c00 	mov.w	ip, #0
 8006a9e:	1806      	adds	r6, r0, r0
 8006aa0:	eb4c 070c 	adc.w	r7, ip, ip
 8006aa4:	eb16 0800 	adds.w	r8, r6, r0
 8006aa8:	eb47 090c 	adc.w	r9, r7, ip
 8006aac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ab0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ab4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ab8:	4690      	mov	r8, r2
 8006aba:	4699      	mov	r9, r3
 8006abc:	6862      	ldr	r2, [r4, #4]
 8006abe:	2100      	movs	r1, #0
 8006ac0:	1892      	adds	r2, r2, r2
 8006ac2:	eb41 0301 	adc.w	r3, r1, r1
 8006ac6:	eb1b 0008 	adds.w	r0, fp, r8
 8006aca:	eb4c 0109 	adc.w	r1, ip, r9
 8006ace:	f7fa f821 	bl	8000b14 <__aeabi_uldivmod>
 8006ad2:	4d41      	ldr	r5, [pc, #260]	; (8006bd8 <UART_SetConfig+0x214>)
 8006ad4:	fba5 3200 	umull	r3, r2, r5, r0
 8006ad8:	0951      	lsrs	r1, r2, #5
 8006ada:	2264      	movs	r2, #100	; 0x64
 8006adc:	fb02 0211 	mls	r2, r2, r1, r0
 8006ae0:	00d3      	lsls	r3, r2, #3
 8006ae2:	3332      	adds	r3, #50	; 0x32
 8006ae4:	fba5 2303 	umull	r2, r3, r5, r3
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	005a      	lsls	r2, r3, #1
 8006aec:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006af0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	6821      	ldr	r1, [r4, #0]
 8006afa:	4413      	add	r3, r2
 8006afc:	608b      	str	r3, [r1, #8]
 8006afe:	e066      	b.n	8006bce <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b00:	f7ff fe54 	bl	80067ac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b04:	4680      	mov	r8, r0
 8006b06:	f04f 0900 	mov.w	r9, #0
 8006b0a:	1806      	adds	r6, r0, r0
 8006b0c:	eb49 0709 	adc.w	r7, r9, r9
 8006b10:	eb16 0b00 	adds.w	fp, r6, r0
 8006b14:	eb47 0c09 	adc.w	ip, r7, r9
 8006b18:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8006b1c:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8006b20:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8006b24:	4693      	mov	fp, r2
 8006b26:	469c      	mov	ip, r3
 8006b28:	6862      	ldr	r2, [r4, #4]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	1892      	adds	r2, r2, r2
 8006b2e:	eb41 0301 	adc.w	r3, r1, r1
 8006b32:	eb18 000b 	adds.w	r0, r8, fp
 8006b36:	eb49 010c 	adc.w	r1, r9, ip
 8006b3a:	f7f9 ffeb 	bl	8000b14 <__aeabi_uldivmod>
 8006b3e:	4d26      	ldr	r5, [pc, #152]	; (8006bd8 <UART_SetConfig+0x214>)
 8006b40:	fba5 3200 	umull	r3, r2, r5, r0
 8006b44:	0951      	lsrs	r1, r2, #5
 8006b46:	2264      	movs	r2, #100	; 0x64
 8006b48:	fb02 0211 	mls	r2, r2, r1, r0
 8006b4c:	00d3      	lsls	r3, r2, #3
 8006b4e:	3332      	adds	r3, #50	; 0x32
 8006b50:	fba5 2303 	umull	r2, r3, r5, r3
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	005a      	lsls	r2, r3, #1
 8006b58:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006b5c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	6821      	ldr	r1, [r4, #0]
 8006b66:	4413      	add	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
 8006b6a:	e030      	b.n	8006bce <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b6c:	f7ff fe1e 	bl	80067ac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b70:	f04f 0900 	mov.w	r9, #0
 8006b74:	1806      	adds	r6, r0, r0
 8006b76:	eb49 0709 	adc.w	r7, r9, r9
 8006b7a:	eb16 0b00 	adds.w	fp, r6, r0
 8006b7e:	eb47 0c09 	adc.w	ip, r7, r9
 8006b82:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8006b86:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8006b8a:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8006b8e:	4693      	mov	fp, r2
 8006b90:	469c      	mov	ip, r3
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	009a      	lsls	r2, r3, #2
 8006b96:	0f9b      	lsrs	r3, r3, #30
 8006b98:	eb10 000b 	adds.w	r0, r0, fp
 8006b9c:	eb49 010c 	adc.w	r1, r9, ip
 8006ba0:	f7f9 ffb8 	bl	8000b14 <__aeabi_uldivmod>
 8006ba4:	4d0c      	ldr	r5, [pc, #48]	; (8006bd8 <UART_SetConfig+0x214>)
 8006ba6:	fba5 3200 	umull	r3, r2, r5, r0
 8006baa:	0951      	lsrs	r1, r2, #5
 8006bac:	2264      	movs	r2, #100	; 0x64
 8006bae:	fb02 0211 	mls	r2, r2, r1, r0
 8006bb2:	0113      	lsls	r3, r2, #4
 8006bb4:	3332      	adds	r3, #50	; 0x32
 8006bb6:	fba5 2303 	umull	r2, r3, r5, r3
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bc0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	6821      	ldr	r1, [r4, #0]
 8006bca:	4413      	add	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
}
 8006bce:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40011000 	.word	0x40011000
 8006bd8:	51eb851f 	.word	0x51eb851f

08006bdc <HAL_UART_Init>:
  if (huart == NULL)
 8006bdc:	b358      	cbz	r0, 8006c36 <HAL_UART_Init+0x5a>
{
 8006bde:	b510      	push	{r4, lr}
 8006be0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006be2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006be6:	b30b      	cbz	r3, 8006c2c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006be8:	2324      	movs	r3, #36	; 0x24
 8006bea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	68d3      	ldr	r3, [r2, #12]
 8006bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f7ff fee3 	bl	80069c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	6913      	ldr	r3, [r2, #16]
 8006c02:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006c06:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	6953      	ldr	r3, [r2, #20]
 8006c0c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006c10:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	68d3      	ldr	r3, [r2, #12]
 8006c16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c1a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	2320      	movs	r3, #32
 8006c22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006c26:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006c2a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006c2c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006c30:	f7fd fbfe 	bl	8004430 <HAL_UART_MspInit>
 8006c34:	e7d8      	b.n	8006be8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006c36:	2001      	movs	r0, #1
}
 8006c38:	4770      	bx	lr
	...

08006c3c <__errno>:
 8006c3c:	4b01      	ldr	r3, [pc, #4]	; (8006c44 <__errno+0x8>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000014 	.word	0x20000014

08006c48 <__libc_init_array>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	4d0d      	ldr	r5, [pc, #52]	; (8006c80 <__libc_init_array+0x38>)
 8006c4c:	4c0d      	ldr	r4, [pc, #52]	; (8006c84 <__libc_init_array+0x3c>)
 8006c4e:	1b64      	subs	r4, r4, r5
 8006c50:	10a4      	asrs	r4, r4, #2
 8006c52:	2600      	movs	r6, #0
 8006c54:	42a6      	cmp	r6, r4
 8006c56:	d109      	bne.n	8006c6c <__libc_init_array+0x24>
 8006c58:	4d0b      	ldr	r5, [pc, #44]	; (8006c88 <__libc_init_array+0x40>)
 8006c5a:	4c0c      	ldr	r4, [pc, #48]	; (8006c8c <__libc_init_array+0x44>)
 8006c5c:	f000 ff10 	bl	8007a80 <_init>
 8006c60:	1b64      	subs	r4, r4, r5
 8006c62:	10a4      	asrs	r4, r4, #2
 8006c64:	2600      	movs	r6, #0
 8006c66:	42a6      	cmp	r6, r4
 8006c68:	d105      	bne.n	8006c76 <__libc_init_array+0x2e>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c70:	4798      	blx	r3
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7ee      	b.n	8006c54 <__libc_init_array+0xc>
 8006c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7a:	4798      	blx	r3
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	e7f2      	b.n	8006c66 <__libc_init_array+0x1e>
 8006c80:	0801640c 	.word	0x0801640c
 8006c84:	0801640c 	.word	0x0801640c
 8006c88:	0801640c 	.word	0x0801640c
 8006c8c:	08016410 	.word	0x08016410

08006c90 <memcpy>:
 8006c90:	440a      	add	r2, r1
 8006c92:	4291      	cmp	r1, r2
 8006c94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c98:	d100      	bne.n	8006c9c <memcpy+0xc>
 8006c9a:	4770      	bx	lr
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca6:	4291      	cmp	r1, r2
 8006ca8:	d1f9      	bne.n	8006c9e <memcpy+0xe>
 8006caa:	bd10      	pop	{r4, pc}

08006cac <memset>:
 8006cac:	4402      	add	r2, r0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d100      	bne.n	8006cb6 <memset+0xa>
 8006cb4:	4770      	bx	lr
 8006cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cba:	e7f9      	b.n	8006cb0 <memset+0x4>

08006cbc <rand>:
 8006cbc:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <rand+0x50>)
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	681c      	ldr	r4, [r3, #0]
 8006cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006cc4:	b97b      	cbnz	r3, 8006ce6 <rand+0x2a>
 8006cc6:	2018      	movs	r0, #24
 8006cc8:	f000 f82c 	bl	8006d24 <malloc>
 8006ccc:	4a10      	ldr	r2, [pc, #64]	; (8006d10 <rand+0x54>)
 8006cce:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <rand+0x58>)
 8006cd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8006cd2:	e9c0 2300 	strd	r2, r3, [r0]
 8006cd6:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <rand+0x5c>)
 8006cd8:	6083      	str	r3, [r0, #8]
 8006cda:	230b      	movs	r3, #11
 8006cdc:	8183      	strh	r3, [r0, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006ce6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ce8:	480c      	ldr	r0, [pc, #48]	; (8006d1c <rand+0x60>)
 8006cea:	690a      	ldr	r2, [r1, #16]
 8006cec:	694b      	ldr	r3, [r1, #20]
 8006cee:	4c0c      	ldr	r4, [pc, #48]	; (8006d20 <rand+0x64>)
 8006cf0:	4350      	muls	r0, r2
 8006cf2:	fb04 0003 	mla	r0, r4, r3, r0
 8006cf6:	fba2 3404 	umull	r3, r4, r2, r4
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	4404      	add	r4, r0
 8006cfe:	f144 0000 	adc.w	r0, r4, #0
 8006d02:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8006d06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006d0a:	bd10      	pop	{r4, pc}
 8006d0c:	20000014 	.word	0x20000014
 8006d10:	abcd330e 	.word	0xabcd330e
 8006d14:	e66d1234 	.word	0xe66d1234
 8006d18:	0005deec 	.word	0x0005deec
 8006d1c:	5851f42d 	.word	0x5851f42d
 8006d20:	4c957f2d 	.word	0x4c957f2d

08006d24 <malloc>:
 8006d24:	4b02      	ldr	r3, [pc, #8]	; (8006d30 <malloc+0xc>)
 8006d26:	4601      	mov	r1, r0
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	f000 b803 	b.w	8006d34 <_malloc_r>
 8006d2e:	bf00      	nop
 8006d30:	20000014 	.word	0x20000014

08006d34 <_malloc_r>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	1ccd      	adds	r5, r1, #3
 8006d38:	f025 0503 	bic.w	r5, r5, #3
 8006d3c:	3508      	adds	r5, #8
 8006d3e:	2d0c      	cmp	r5, #12
 8006d40:	bf38      	it	cc
 8006d42:	250c      	movcc	r5, #12
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	4606      	mov	r6, r0
 8006d48:	db01      	blt.n	8006d4e <_malloc_r+0x1a>
 8006d4a:	42a9      	cmp	r1, r5
 8006d4c:	d903      	bls.n	8006d56 <_malloc_r+0x22>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	6033      	str	r3, [r6, #0]
 8006d52:	2000      	movs	r0, #0
 8006d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d56:	f000 f857 	bl	8006e08 <__malloc_lock>
 8006d5a:	4921      	ldr	r1, [pc, #132]	; (8006de0 <_malloc_r+0xac>)
 8006d5c:	680a      	ldr	r2, [r1, #0]
 8006d5e:	4614      	mov	r4, r2
 8006d60:	b99c      	cbnz	r4, 8006d8a <_malloc_r+0x56>
 8006d62:	4f20      	ldr	r7, [pc, #128]	; (8006de4 <_malloc_r+0xb0>)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	b923      	cbnz	r3, 8006d72 <_malloc_r+0x3e>
 8006d68:	4621      	mov	r1, r4
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 f83c 	bl	8006de8 <_sbrk_r>
 8006d70:	6038      	str	r0, [r7, #0]
 8006d72:	4629      	mov	r1, r5
 8006d74:	4630      	mov	r0, r6
 8006d76:	f000 f837 	bl	8006de8 <_sbrk_r>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d123      	bne.n	8006dc6 <_malloc_r+0x92>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	4630      	mov	r0, r6
 8006d84:	f000 f846 	bl	8006e14 <__malloc_unlock>
 8006d88:	e7e3      	b.n	8006d52 <_malloc_r+0x1e>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	1b5b      	subs	r3, r3, r5
 8006d8e:	d417      	bmi.n	8006dc0 <_malloc_r+0x8c>
 8006d90:	2b0b      	cmp	r3, #11
 8006d92:	d903      	bls.n	8006d9c <_malloc_r+0x68>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	441c      	add	r4, r3
 8006d98:	6025      	str	r5, [r4, #0]
 8006d9a:	e004      	b.n	8006da6 <_malloc_r+0x72>
 8006d9c:	6863      	ldr	r3, [r4, #4]
 8006d9e:	42a2      	cmp	r2, r4
 8006da0:	bf0c      	ite	eq
 8006da2:	600b      	streq	r3, [r1, #0]
 8006da4:	6053      	strne	r3, [r2, #4]
 8006da6:	4630      	mov	r0, r6
 8006da8:	f000 f834 	bl	8006e14 <__malloc_unlock>
 8006dac:	f104 000b 	add.w	r0, r4, #11
 8006db0:	1d23      	adds	r3, r4, #4
 8006db2:	f020 0007 	bic.w	r0, r0, #7
 8006db6:	1ac2      	subs	r2, r0, r3
 8006db8:	d0cc      	beq.n	8006d54 <_malloc_r+0x20>
 8006dba:	1a1b      	subs	r3, r3, r0
 8006dbc:	50a3      	str	r3, [r4, r2]
 8006dbe:	e7c9      	b.n	8006d54 <_malloc_r+0x20>
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	6864      	ldr	r4, [r4, #4]
 8006dc4:	e7cc      	b.n	8006d60 <_malloc_r+0x2c>
 8006dc6:	1cc4      	adds	r4, r0, #3
 8006dc8:	f024 0403 	bic.w	r4, r4, #3
 8006dcc:	42a0      	cmp	r0, r4
 8006dce:	d0e3      	beq.n	8006d98 <_malloc_r+0x64>
 8006dd0:	1a21      	subs	r1, r4, r0
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f000 f808 	bl	8006de8 <_sbrk_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d1dd      	bne.n	8006d98 <_malloc_r+0x64>
 8006ddc:	e7cf      	b.n	8006d7e <_malloc_r+0x4a>
 8006dde:	bf00      	nop
 8006de0:	20012a28 	.word	0x20012a28
 8006de4:	20012a2c 	.word	0x20012a2c

08006de8 <_sbrk_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4d06      	ldr	r5, [pc, #24]	; (8006e04 <_sbrk_r+0x1c>)
 8006dec:	2300      	movs	r3, #0
 8006dee:	4604      	mov	r4, r0
 8006df0:	4608      	mov	r0, r1
 8006df2:	602b      	str	r3, [r5, #0]
 8006df4:	f7fd fbb6 	bl	8004564 <_sbrk>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_sbrk_r+0x1a>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_sbrk_r+0x1a>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	20013bf4 	.word	0x20013bf4

08006e08 <__malloc_lock>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__malloc_lock+0x8>)
 8006e0a:	f000 b809 	b.w	8006e20 <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20013bfc 	.word	0x20013bfc

08006e14 <__malloc_unlock>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__malloc_unlock+0x8>)
 8006e16:	f000 b804 	b.w	8006e22 <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20013bfc 	.word	0x20013bfc

08006e20 <__retarget_lock_acquire_recursive>:
 8006e20:	4770      	bx	lr

08006e22 <__retarget_lock_release_recursive>:
 8006e22:	4770      	bx	lr

08006e24 <floorf>:
 8006e24:	ee10 2a10 	vmov	r2, s0
 8006e28:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8006e2c:	3b7f      	subs	r3, #127	; 0x7f
 8006e2e:	2b16      	cmp	r3, #22
 8006e30:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006e34:	dc1a      	bgt.n	8006e6c <floorf+0x48>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	db1e      	blt.n	8006e78 <floorf+0x54>
 8006e3a:	491a      	ldr	r1, [pc, #104]	; (8006ea4 <floorf+0x80>)
 8006e3c:	4119      	asrs	r1, r3
 8006e3e:	420a      	tst	r2, r1
 8006e40:	d027      	beq.n	8006e92 <floorf+0x6e>
 8006e42:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006ea8 <floorf+0x84>
 8006e46:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e52:	dd1e      	ble.n	8006e92 <floorf+0x6e>
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	da04      	bge.n	8006e62 <floorf+0x3e>
 8006e58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006e5c:	fa40 f303 	asr.w	r3, r0, r3
 8006e60:	441a      	add	r2, r3
 8006e62:	ea22 0301 	bic.w	r3, r2, r1
 8006e66:	ee00 3a10 	vmov	s0, r3
 8006e6a:	4770      	bx	lr
 8006e6c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006e70:	d30f      	bcc.n	8006e92 <floorf+0x6e>
 8006e72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006e76:	4770      	bx	lr
 8006e78:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006ea8 <floorf+0x84>
 8006e7c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e88:	dd03      	ble.n	8006e92 <floorf+0x6e>
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	db02      	blt.n	8006e94 <floorf+0x70>
 8006e8e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006eac <floorf+0x88>
 8006e92:	4770      	bx	lr
 8006e94:	2900      	cmp	r1, #0
 8006e96:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8006e9a:	bf18      	it	ne
 8006e9c:	eeb0 0a67 	vmovne.f32	s0, s15
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	007fffff 	.word	0x007fffff
 8006ea8:	7149f2ca 	.word	0x7149f2ca
 8006eac:	00000000 	.word	0x00000000

08006eb0 <lrintf>:
 8006eb0:	b410      	push	{r4}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 8006ebe:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 8006ec2:	2a1e      	cmp	r2, #30
 8006ec4:	dc2a      	bgt.n	8006f1c <lrintf+0x6c>
 8006ec6:	1c50      	adds	r0, r2, #1
 8006ec8:	db23      	blt.n	8006f12 <lrintf+0x62>
 8006eca:	2a16      	cmp	r2, #22
 8006ecc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8006ed0:	dd0b      	ble.n	8006eea <lrintf+0x3a>
 8006ed2:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006ed6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006eda:	3996      	subs	r1, #150	; 0x96
 8006edc:	4088      	lsls	r0, r1
 8006ede:	b104      	cbz	r4, 8006ee2 <lrintf+0x32>
 8006ee0:	4240      	negs	r0, r0
 8006ee2:	b005      	add	sp, #20
 8006ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <lrintf+0x94>)
 8006eec:	eddd 7a01 	vldr	s15, [sp, #4]
 8006ef0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006ef4:	ed93 7a00 	vldr	s14, [r3]
 8006ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006efc:	edcd 7a03 	vstr	s15, [sp, #12]
 8006f00:	eddd 7a03 	vldr	s15, [sp, #12]
 8006f04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f08:	ee17 3a90 	vmov	r3, s15
 8006f0c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006f10:	d10e      	bne.n	8006f30 <lrintf+0x80>
 8006f12:	2000      	movs	r0, #0
 8006f14:	b005      	add	sp, #20
 8006f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	eddd 7a01 	vldr	s15, [sp, #4]
 8006f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f24:	ee17 0a90 	vmov	r0, s15
 8006f28:	b005      	add	sp, #20
 8006f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006f34:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006f3c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006f40:	40d8      	lsrs	r0, r3
 8006f42:	e7cc      	b.n	8006ede <lrintf+0x2e>
 8006f44:	080163ec 	.word	0x080163ec

08006f48 <rintf>:
 8006f48:	ee10 1a10 	vmov	r1, s0
 8006f4c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8006f50:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8006f54:	2a16      	cmp	r2, #22
 8006f56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f5a:	dc28      	bgt.n	8006fae <rintf+0x66>
 8006f5c:	b333      	cbz	r3, 8006fac <rintf+0x64>
 8006f5e:	b410      	push	{r4}
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	b083      	sub	sp, #12
 8006f64:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8006f68:	db27      	blt.n	8006fba <rintf+0x72>
 8006f6a:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <rintf+0xb4>)
 8006f6c:	4113      	asrs	r3, r2
 8006f6e:	4219      	tst	r1, r3
 8006f70:	d018      	beq.n	8006fa4 <rintf+0x5c>
 8006f72:	085c      	lsrs	r4, r3, #1
 8006f74:	ea11 0353 	ands.w	r3, r1, r3, lsr #1
 8006f78:	d007      	beq.n	8006f8a <rintf+0x42>
 8006f7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f7e:	ea21 0104 	bic.w	r1, r1, r4
 8006f82:	4113      	asrs	r3, r2
 8006f84:	430b      	orrs	r3, r1
 8006f86:	ee00 3a10 	vmov	s0, r3
 8006f8a:	4b1d      	ldr	r3, [pc, #116]	; (8007000 <rintf+0xb8>)
 8006f8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f90:	edd0 7a00 	vldr	s15, [r0]
 8006f94:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006f98:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006f9c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006fa0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006fa4:	b003      	add	sp, #12
 8006fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	4770      	bx	lr
 8006fae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fb2:	d3fb      	bcc.n	8006fac <rintf+0x64>
 8006fb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006fb8:	4770      	bx	lr
 8006fba:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8006fbe:	425b      	negs	r3, r3
 8006fc0:	4a0f      	ldr	r2, [pc, #60]	; (8007000 <rintf+0xb8>)
 8006fc2:	0a5b      	lsrs	r3, r3, #9
 8006fc4:	0d09      	lsrs	r1, r1, #20
 8006fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fca:	0509      	lsls	r1, r1, #20
 8006fcc:	4319      	orrs	r1, r3
 8006fce:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006fd2:	edd2 6a00 	vldr	s13, [r2]
 8006fd6:	ee07 1a90 	vmov	s15, r1
 8006fda:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006fde:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006fe2:	eddd 7a01 	vldr	s15, [sp, #4]
 8006fe6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fea:	ee17 3a90 	vmov	r3, s15
 8006fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ff2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006ff6:	ee00 3a10 	vmov	s0, r3
 8006ffa:	e7d3      	b.n	8006fa4 <rintf+0x5c>
 8006ffc:	007fffff 	.word	0x007fffff
 8007000:	080163f4 	.word	0x080163f4

08007004 <powf>:
 8007004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007006:	ed2d 8b04 	vpush	{d8-d9}
 800700a:	4db8      	ldr	r5, [pc, #736]	; (80072ec <powf+0x2e8>)
 800700c:	b08b      	sub	sp, #44	; 0x2c
 800700e:	eef0 8a40 	vmov.f32	s17, s0
 8007012:	eeb0 8a60 	vmov.f32	s16, s1
 8007016:	f000 f99f 	bl	8007358 <__ieee754_powf>
 800701a:	f995 4000 	ldrsb.w	r4, [r5]
 800701e:	1c63      	adds	r3, r4, #1
 8007020:	eeb0 9a40 	vmov.f32	s18, s0
 8007024:	d033      	beq.n	800708e <powf+0x8a>
 8007026:	eeb4 8a48 	vcmp.f32	s16, s16
 800702a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702e:	d62e      	bvs.n	800708e <powf+0x8a>
 8007030:	eef4 8a68 	vcmp.f32	s17, s17
 8007034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007038:	f180 809c 	bvs.w	8007174 <powf+0x170>
 800703c:	eddf 9aac 	vldr	s19, [pc, #688]	; 80072f0 <powf+0x2ec>
 8007040:	eef4 8a69 	vcmp.f32	s17, s19
 8007044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007048:	d127      	bne.n	800709a <powf+0x96>
 800704a:	eeb4 8a69 	vcmp.f32	s16, s19
 800704e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007052:	d15f      	bne.n	8007114 <powf+0x110>
 8007054:	2301      	movs	r3, #1
 8007056:	4aa7      	ldr	r2, [pc, #668]	; (80072f4 <powf+0x2f0>)
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	ee18 0a90 	vmov	r0, s17
 800705e:	2300      	movs	r3, #0
 8007060:	9201      	str	r2, [sp, #4]
 8007062:	9308      	str	r3, [sp, #32]
 8007064:	f7f9 fa14 	bl	8000490 <__aeabi_f2d>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	ee18 0a10 	vmov	r0, s16
 8007070:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007074:	f7f9 fa0c 	bl	8000490 <__aeabi_f2d>
 8007078:	2200      	movs	r2, #0
 800707a:	2300      	movs	r3, #0
 800707c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007080:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007084:	2c00      	cmp	r4, #0
 8007086:	f000 8095 	beq.w	80071b4 <powf+0x1b0>
 800708a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800708e:	eeb0 0a49 	vmov.f32	s0, s18
 8007092:	b00b      	add	sp, #44	; 0x2c
 8007094:	ecbd 8b04 	vpop	{d8-d9}
 8007098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800709a:	f000 fc6b 	bl	8007974 <finitef>
 800709e:	4604      	mov	r4, r0
 80070a0:	2800      	cmp	r0, #0
 80070a2:	f000 809e 	beq.w	80071e2 <powf+0x1de>
 80070a6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80070aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ae:	d1ee      	bne.n	800708e <powf+0x8a>
 80070b0:	eeb0 0a68 	vmov.f32	s0, s17
 80070b4:	f000 fc5e 	bl	8007974 <finitef>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d0e8      	beq.n	800708e <powf+0x8a>
 80070bc:	eeb0 0a48 	vmov.f32	s0, s16
 80070c0:	f000 fc58 	bl	8007974 <finitef>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d0e2      	beq.n	800708e <powf+0x8a>
 80070c8:	2304      	movs	r3, #4
 80070ca:	4a8a      	ldr	r2, [pc, #552]	; (80072f4 <powf+0x2f0>)
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	ee18 0a90 	vmov	r0, s17
 80070d2:	2300      	movs	r3, #0
 80070d4:	9201      	str	r2, [sp, #4]
 80070d6:	9308      	str	r3, [sp, #32]
 80070d8:	f7f9 f9da 	bl	8000490 <__aeabi_f2d>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	ee18 0a10 	vmov	r0, s16
 80070e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070e8:	f7f9 f9d2 	bl	8000490 <__aeabi_f2d>
 80070ec:	f995 3000 	ldrsb.w	r3, [r5]
 80070f0:	2600      	movs	r6, #0
 80070f2:	2700      	movs	r7, #0
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80070fe:	d004      	beq.n	800710a <powf+0x106>
 8007100:	4668      	mov	r0, sp
 8007102:	f000 fc2d 	bl	8007960 <matherr>
 8007106:	2800      	cmp	r0, #0
 8007108:	d159      	bne.n	80071be <powf+0x1ba>
 800710a:	f7ff fd97 	bl	8006c3c <__errno>
 800710e:	2322      	movs	r3, #34	; 0x22
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	e054      	b.n	80071be <powf+0x1ba>
 8007114:	eeb0 0a48 	vmov.f32	s0, s16
 8007118:	f000 fc2c 	bl	8007974 <finitef>
 800711c:	2800      	cmp	r0, #0
 800711e:	d0b6      	beq.n	800708e <powf+0x8a>
 8007120:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	d5b1      	bpl.n	800708e <powf+0x8a>
 800712a:	2301      	movs	r3, #1
 800712c:	4a71      	ldr	r2, [pc, #452]	; (80072f4 <powf+0x2f0>)
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	ee18 0a90 	vmov	r0, s17
 8007134:	2300      	movs	r3, #0
 8007136:	9201      	str	r2, [sp, #4]
 8007138:	9308      	str	r3, [sp, #32]
 800713a:	f7f9 f9a9 	bl	8000490 <__aeabi_f2d>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	ee18 0a10 	vmov	r0, s16
 8007146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800714a:	f7f9 f9a1 	bl	8000490 <__aeabi_f2d>
 800714e:	f995 3000 	ldrsb.w	r3, [r5]
 8007152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 8081 	bne.w	800725e <powf+0x25a>
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007164:	4668      	mov	r0, sp
 8007166:	f000 fbfb 	bl	8007960 <matherr>
 800716a:	2800      	cmp	r0, #0
 800716c:	d07e      	beq.n	800726c <powf+0x268>
 800716e:	9b08      	ldr	r3, [sp, #32]
 8007170:	b35b      	cbz	r3, 80071ca <powf+0x1c6>
 8007172:	e026      	b.n	80071c2 <powf+0x1be>
 8007174:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717c:	d187      	bne.n	800708e <powf+0x8a>
 800717e:	2301      	movs	r3, #1
 8007180:	4a5c      	ldr	r2, [pc, #368]	; (80072f4 <powf+0x2f0>)
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	ee18 0a90 	vmov	r0, s17
 8007188:	2300      	movs	r3, #0
 800718a:	9201      	str	r2, [sp, #4]
 800718c:	9308      	str	r3, [sp, #32]
 800718e:	f7f9 f97f 	bl	8000490 <__aeabi_f2d>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	ee18 0a10 	vmov	r0, s16
 800719a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800719e:	f7f9 f977 	bl	8000490 <__aeabi_f2d>
 80071a2:	4b55      	ldr	r3, [pc, #340]	; (80072f8 <powf+0x2f4>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	2c02      	cmp	r4, #2
 80071a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80071b0:	f43f af6b 	beq.w	800708a <powf+0x86>
 80071b4:	4668      	mov	r0, sp
 80071b6:	f000 fbd3 	bl	8007960 <matherr>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d05b      	beq.n	8007276 <powf+0x272>
 80071be:	9b08      	ldr	r3, [sp, #32]
 80071c0:	b11b      	cbz	r3, 80071ca <powf+0x1c6>
 80071c2:	f7ff fd3b 	bl	8006c3c <__errno>
 80071c6:	9b08      	ldr	r3, [sp, #32]
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ce:	f7f9 fc51 	bl	8000a74 <__aeabi_d2f>
 80071d2:	ee09 0a10 	vmov	s18, r0
 80071d6:	eeb0 0a49 	vmov.f32	s0, s18
 80071da:	b00b      	add	sp, #44	; 0x2c
 80071dc:	ecbd 8b04 	vpop	{d8-d9}
 80071e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e2:	eeb0 0a68 	vmov.f32	s0, s17
 80071e6:	f000 fbc5 	bl	8007974 <finitef>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f43f af5b 	beq.w	80070a6 <powf+0xa2>
 80071f0:	eeb0 0a48 	vmov.f32	s0, s16
 80071f4:	f000 fbbe 	bl	8007974 <finitef>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f43f af54 	beq.w	80070a6 <powf+0xa2>
 80071fe:	eeb4 9a49 	vcmp.f32	s18, s18
 8007202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007206:	f180 8081 	bvs.w	800730c <powf+0x308>
 800720a:	4b3a      	ldr	r3, [pc, #232]	; (80072f4 <powf+0x2f0>)
 800720c:	9408      	str	r4, [sp, #32]
 800720e:	2203      	movs	r2, #3
 8007210:	ee18 0a90 	vmov	r0, s17
 8007214:	e9cd 2300 	strd	r2, r3, [sp]
 8007218:	f7f9 f93a 	bl	8000490 <__aeabi_f2d>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	ee18 0a10 	vmov	r0, s16
 8007224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007228:	f7f9 f932 	bl	8000490 <__aeabi_f2d>
 800722c:	f995 3000 	ldrsb.w	r3, [r5]
 8007230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007234:	bb23      	cbnz	r3, 8007280 <powf+0x27c>
 8007236:	4b31      	ldr	r3, [pc, #196]	; (80072fc <powf+0x2f8>)
 8007238:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800723c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007244:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007248:	d426      	bmi.n	8007298 <powf+0x294>
 800724a:	4668      	mov	r0, sp
 800724c:	f000 fb88 	bl	8007960 <matherr>
 8007250:	2800      	cmp	r0, #0
 8007252:	d18c      	bne.n	800716e <powf+0x16a>
 8007254:	f7ff fcf2 	bl	8006c3c <__errno>
 8007258:	2322      	movs	r3, #34	; 0x22
 800725a:	6003      	str	r3, [r0, #0]
 800725c:	e787      	b.n	800716e <powf+0x16a>
 800725e:	4928      	ldr	r1, [pc, #160]	; (8007300 <powf+0x2fc>)
 8007260:	2000      	movs	r0, #0
 8007262:	2b02      	cmp	r3, #2
 8007264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007268:	f47f af7c 	bne.w	8007164 <powf+0x160>
 800726c:	f7ff fce6 	bl	8006c3c <__errno>
 8007270:	2321      	movs	r3, #33	; 0x21
 8007272:	6003      	str	r3, [r0, #0]
 8007274:	e77b      	b.n	800716e <powf+0x16a>
 8007276:	f7ff fce1 	bl	8006c3c <__errno>
 800727a:	2321      	movs	r3, #33	; 0x21
 800727c:	6003      	str	r3, [r0, #0]
 800727e:	e79e      	b.n	80071be <powf+0x1ba>
 8007280:	4920      	ldr	r1, [pc, #128]	; (8007304 <powf+0x300>)
 8007282:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007286:	2000      	movs	r0, #0
 8007288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007290:	d417      	bmi.n	80072c2 <powf+0x2be>
 8007292:	2b02      	cmp	r3, #2
 8007294:	d0de      	beq.n	8007254 <powf+0x250>
 8007296:	e7d8      	b.n	800724a <powf+0x246>
 8007298:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800729c:	ee28 8a27 	vmul.f32	s16, s16, s15
 80072a0:	eeb0 0a48 	vmov.f32	s0, s16
 80072a4:	f7ff fe50 	bl	8006f48 <rintf>
 80072a8:	eeb4 0a48 	vcmp.f32	s0, s16
 80072ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b0:	d018      	beq.n	80072e4 <powf+0x2e0>
 80072b2:	4915      	ldr	r1, [pc, #84]	; (8007308 <powf+0x304>)
 80072b4:	f995 3000 	ldrsb.w	r3, [r5]
 80072b8:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 80072bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072c0:	e7e7      	b.n	8007292 <powf+0x28e>
 80072c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80072c6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80072ca:	eeb0 0a48 	vmov.f32	s0, s16
 80072ce:	f7ff fe3b 	bl	8006f48 <rintf>
 80072d2:	eeb4 0a48 	vcmp.f32	s0, s16
 80072d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072da:	d003      	beq.n	80072e4 <powf+0x2e0>
 80072dc:	4b08      	ldr	r3, [pc, #32]	; (8007300 <powf+0x2fc>)
 80072de:	2200      	movs	r2, #0
 80072e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072e4:	f995 3000 	ldrsb.w	r3, [r5]
 80072e8:	e7d3      	b.n	8007292 <powf+0x28e>
 80072ea:	bf00      	nop
 80072ec:	20000078 	.word	0x20000078
 80072f0:	00000000 	.word	0x00000000
 80072f4:	080163fc 	.word	0x080163fc
 80072f8:	3ff00000 	.word	0x3ff00000
 80072fc:	47efffff 	.word	0x47efffff
 8007300:	fff00000 	.word	0xfff00000
 8007304:	7ff00000 	.word	0x7ff00000
 8007308:	c7efffff 	.word	0xc7efffff
 800730c:	4b11      	ldr	r3, [pc, #68]	; (8007354 <powf+0x350>)
 800730e:	9408      	str	r4, [sp, #32]
 8007310:	2201      	movs	r2, #1
 8007312:	ee18 0a90 	vmov	r0, s17
 8007316:	e9cd 2300 	strd	r2, r3, [sp]
 800731a:	f7f9 f8b9 	bl	8000490 <__aeabi_f2d>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	ee18 0a10 	vmov	r0, s16
 8007326:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800732a:	f7f9 f8b1 	bl	8000490 <__aeabi_f2d>
 800732e:	f995 4000 	ldrsb.w	r4, [r5]
 8007332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007336:	2c00      	cmp	r4, #0
 8007338:	f43f af10 	beq.w	800715c <powf+0x158>
 800733c:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8007340:	ee17 0a90 	vmov	r0, s15
 8007344:	f7f9 f8a4 	bl	8000490 <__aeabi_f2d>
 8007348:	2c02      	cmp	r4, #2
 800734a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800734e:	d08d      	beq.n	800726c <powf+0x268>
 8007350:	e708      	b.n	8007164 <powf+0x160>
 8007352:	bf00      	nop
 8007354:	080163fc 	.word	0x080163fc

08007358 <__ieee754_powf>:
 8007358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	ee10 4a90 	vmov	r4, s1
 8007360:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8007364:	ed2d 8b02 	vpush	{d8}
 8007368:	d015      	beq.n	8007396 <__ieee754_powf+0x3e>
 800736a:	ee10 5a10 	vmov	r5, s0
 800736e:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007372:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007376:	ee10 9a10 	vmov	r9, s0
 800737a:	dd06      	ble.n	800738a <__ieee754_powf+0x32>
 800737c:	ecbd 8b02 	vpop	{d8}
 8007380:	48ba      	ldr	r0, [pc, #744]	; (800766c <__ieee754_powf+0x314>)
 8007382:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007386:	f000 bb03 	b.w	8007990 <nanf>
 800738a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800738e:	dd08      	ble.n	80073a2 <__ieee754_powf+0x4a>
 8007390:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007394:	d1f2      	bne.n	800737c <__ieee754_powf+0x24>
 8007396:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800739a:	ecbd 8b02 	vpop	{d8}
 800739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	ee10 6a90 	vmov	r6, s1
 80073a8:	f2c0 80f6 	blt.w	8007598 <__ieee754_powf+0x240>
 80073ac:	f04f 0a00 	mov.w	sl, #0
 80073b0:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80073b4:	f000 8104 	beq.w	80075c0 <__ieee754_powf+0x268>
 80073b8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80073bc:	f000 812a 	beq.w	8007614 <__ieee754_powf+0x2bc>
 80073c0:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80073c4:	f000 813f 	beq.w	8007646 <__ieee754_powf+0x2ee>
 80073c8:	f1b6 5f7c 	cmp.w	r6, #1056964608	; 0x3f000000
 80073cc:	ee00 5a10 	vmov	s0, r5
 80073d0:	f040 8103 	bne.w	80075da <__ieee754_powf+0x282>
 80073d4:	f1b9 0f00 	cmp.w	r9, #0
 80073d8:	f280 813a 	bge.w	8007650 <__ieee754_powf+0x2f8>
 80073dc:	f000 fac2 	bl	8007964 <fabsf>
 80073e0:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80073e4:	f000 810b 	beq.w	80075fe <__ieee754_powf+0x2a6>
 80073e8:	2f00      	cmp	r7, #0
 80073ea:	f000 8104 	beq.w	80075f6 <__ieee754_powf+0x29e>
 80073ee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80073f2:	f000 80fa 	beq.w	80075ea <__ieee754_powf+0x292>
 80073f6:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 80073fa:	3a01      	subs	r2, #1
 80073fc:	ea5a 0302 	orrs.w	r3, sl, r2
 8007400:	f000 812c 	beq.w	800765c <__ieee754_powf+0x304>
 8007404:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8007408:	f340 8152 	ble.w	80076b0 <__ieee754_powf+0x358>
 800740c:	4b98      	ldr	r3, [pc, #608]	; (8007670 <__ieee754_powf+0x318>)
 800740e:	429f      	cmp	r7, r3
 8007410:	f340 825f 	ble.w	80078d2 <__ieee754_powf+0x57a>
 8007414:	4b97      	ldr	r3, [pc, #604]	; (8007674 <__ieee754_powf+0x31c>)
 8007416:	429f      	cmp	r7, r3
 8007418:	f300 8101 	bgt.w	800761e <__ieee754_powf+0x2c6>
 800741c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007420:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007424:	eddf 6a94 	vldr	s13, [pc, #592]	; 8007678 <__ieee754_powf+0x320>
 8007428:	eddf 7a94 	vldr	s15, [pc, #592]	; 800767c <__ieee754_powf+0x324>
 800742c:	eddf 5a94 	vldr	s11, [pc, #592]	; 8007680 <__ieee754_powf+0x328>
 8007430:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8007684 <__ieee754_powf+0x32c>
 8007434:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007438:	eee0 6a47 	vfms.f32	s13, s0, s14
 800743c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007440:	eea6 7ac0 	vfms.f32	s14, s13, s0
 8007444:	eef0 6a47 	vmov.f32	s13, s14
 8007448:	ee20 7a00 	vmul.f32	s14, s0, s0
 800744c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007450:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007454:	eee0 7a25 	vfma.f32	s15, s0, s11
 8007458:	eef0 6a67 	vmov.f32	s13, s15
 800745c:	eee0 6a06 	vfma.f32	s13, s0, s12
 8007460:	ee16 3a90 	vmov	r3, s13
 8007464:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007468:	f023 030f 	bic.w	r3, r3, #15
 800746c:	ee07 3a10 	vmov	s14, r3
 8007470:	eea0 7a46 	vfms.f32	s14, s0, s12
 8007474:	ee06 3a90 	vmov	s13, r3
 8007478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800747c:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
 8007480:	f026 060f 	bic.w	r6, r6, #15
 8007484:	ee07 4a10 	vmov	s14, r4
 8007488:	ee06 6a10 	vmov	s12, r6
 800748c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007490:	ee37 6a46 	vsub.f32	s12, s14, s12
 8007494:	ee07 6a10 	vmov	s14, r6
 8007498:	eee6 7a26 	vfma.f32	s15, s12, s13
 800749c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80074a0:	ea5a 0302 	orrs.w	r3, sl, r2
 80074a4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80074a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074ac:	ee77 6a87 	vadd.f32	s13, s15, s14
 80074b0:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 80074b4:	ee16 3a90 	vmov	r3, s13
 80074b8:	bf0c      	ite	eq
 80074ba:	eeb0 8a46 	vmoveq.f32	s16, s12
 80074be:	eeb0 8a40 	vmovne.f32	s16, s0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80074c8:	f340 81b9 	ble.w	800783e <__ieee754_powf+0x4e6>
 80074cc:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
 80074d0:	f300 81f8 	bgt.w	80078c4 <__ieee754_powf+0x56c>
 80074d4:	f000 81eb 	beq.w	80078ae <__ieee754_powf+0x556>
 80074d8:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80074dc:	f300 81bb 	bgt.w	8007856 <__ieee754_powf+0x4fe>
 80074e0:	2200      	movs	r2, #0
 80074e2:	4610      	mov	r0, r2
 80074e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80074e8:	f023 030f 	bic.w	r3, r3, #15
 80074ec:	ee06 3a10 	vmov	s12, r3
 80074f0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8007688 <__ieee754_powf+0x330>
 80074f4:	eddf 5a65 	vldr	s11, [pc, #404]	; 800768c <__ieee754_powf+0x334>
 80074f8:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8007690 <__ieee754_powf+0x338>
 80074fc:	eddf 3a65 	vldr	s7, [pc, #404]	; 8007694 <__ieee754_powf+0x33c>
 8007500:	ed9f 2a65 	vldr	s4, [pc, #404]	; 8007698 <__ieee754_powf+0x340>
 8007504:	ed9f 4a65 	vldr	s8, [pc, #404]	; 800769c <__ieee754_powf+0x344>
 8007508:	eddf 4a65 	vldr	s9, [pc, #404]	; 80076a0 <__ieee754_powf+0x348>
 800750c:	ed9f 5a65 	vldr	s10, [pc, #404]	; 80076a4 <__ieee754_powf+0x34c>
 8007510:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007514:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 8007518:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800751c:	ee26 7a26 	vmul.f32	s14, s12, s13
 8007520:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007524:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007528:	eef0 7a47 	vmov.f32	s15, s14
 800752c:	eea6 7a03 	vfma.f32	s14, s12, s6
 8007530:	ee67 6a07 	vmul.f32	s13, s14, s14
 8007534:	eef0 1a47 	vmov.f32	s3, s14
 8007538:	eee6 1a43 	vfms.f32	s3, s12, s6
 800753c:	eeb0 6a63 	vmov.f32	s12, s7
 8007540:	eea6 6a82 	vfma.f32	s12, s13, s4
 8007544:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8007548:	eea6 4a26 	vfma.f32	s8, s12, s13
 800754c:	eee7 7a27 	vfma.f32	s15, s14, s15
 8007550:	eee4 4a26 	vfma.f32	s9, s8, s13
 8007554:	eea4 5aa6 	vfma.f32	s10, s9, s13
 8007558:	eeb0 6a45 	vmov.f32	s12, s10
 800755c:	eeb0 5a47 	vmov.f32	s10, s14
 8007560:	eea6 5a66 	vfms.f32	s10, s12, s13
 8007564:	eef0 6a45 	vmov.f32	s13, s10
 8007568:	ee36 6ae2 	vsub.f32	s12, s13, s5
 800756c:	ee27 5a05 	vmul.f32	s10, s14, s10
 8007570:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007574:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007578:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800757c:	ee35 0ac7 	vsub.f32	s0, s11, s14
 8007580:	ee10 3a10 	vmov	r3, s0
 8007584:	4413      	add	r3, r2
 8007586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800758a:	f2c0 81ba 	blt.w	8007902 <__ieee754_powf+0x5aa>
 800758e:	ee00 3a10 	vmov	s0, r3
 8007592:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007596:	e700      	b.n	800739a <__ieee754_powf+0x42>
 8007598:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800759c:	da1a      	bge.n	80075d4 <__ieee754_powf+0x27c>
 800759e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80075a2:	db0a      	blt.n	80075ba <__ieee754_powf+0x262>
 80075a4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80075a8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80075ac:	fa48 f203 	asr.w	r2, r8, r3
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	4543      	cmp	r3, r8
 80075b6:	f000 813d 	beq.w	8007834 <__ieee754_powf+0x4dc>
 80075ba:	f04f 0a00 	mov.w	sl, #0
 80075be:	e6fb      	b.n	80073b8 <__ieee754_powf+0x60>
 80075c0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80075c4:	f43f aee7 	beq.w	8007396 <__ieee754_powf+0x3e>
 80075c8:	dd2f      	ble.n	800762a <__ieee754_powf+0x2d2>
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	db2a      	blt.n	8007624 <__ieee754_powf+0x2cc>
 80075ce:	ee00 4a10 	vmov	s0, r4
 80075d2:	e6e2      	b.n	800739a <__ieee754_powf+0x42>
 80075d4:	f04f 0a02 	mov.w	sl, #2
 80075d8:	e6ea      	b.n	80073b0 <__ieee754_powf+0x58>
 80075da:	f000 f9c3 	bl	8007964 <fabsf>
 80075de:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80075e2:	d002      	beq.n	80075ea <__ieee754_powf+0x292>
 80075e4:	2f00      	cmp	r7, #0
 80075e6:	f47f af02 	bne.w	80073ee <__ieee754_powf+0x96>
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	bfbc      	itt	lt
 80075ee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80075f2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80075f6:	f1b9 0f00 	cmp.w	r9, #0
 80075fa:	f6bf aece 	bge.w	800739a <__ieee754_powf+0x42>
 80075fe:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 8007602:	ea57 030a 	orrs.w	r3, r7, sl
 8007606:	f040 810e 	bne.w	8007826 <__ieee754_powf+0x4ce>
 800760a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800760e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007612:	e6c2      	b.n	800739a <__ieee754_powf+0x42>
 8007614:	2e00      	cmp	r6, #0
 8007616:	db0f      	blt.n	8007638 <__ieee754_powf+0x2e0>
 8007618:	ee00 5a10 	vmov	s0, r5
 800761c:	e6bd      	b.n	800739a <__ieee754_powf+0x42>
 800761e:	2e00      	cmp	r6, #0
 8007620:	f300 815a 	bgt.w	80078d8 <__ieee754_powf+0x580>
 8007624:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80076a8 <__ieee754_powf+0x350>
 8007628:	e6b7      	b.n	800739a <__ieee754_powf+0x42>
 800762a:	2e00      	cmp	r6, #0
 800762c:	dafa      	bge.n	8007624 <__ieee754_powf+0x2cc>
 800762e:	ee07 4a90 	vmov	s15, r4
 8007632:	eeb1 0a67 	vneg.f32	s0, s15
 8007636:	e6b0      	b.n	800739a <__ieee754_powf+0x42>
 8007638:	ee07 5a10 	vmov	s14, r5
 800763c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007640:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007644:	e6a9      	b.n	800739a <__ieee754_powf+0x42>
 8007646:	ee07 5a90 	vmov	s15, r5
 800764a:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800764e:	e6a4      	b.n	800739a <__ieee754_powf+0x42>
 8007650:	ecbd 8b02 	vpop	{d8}
 8007654:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	f000 b97e 	b.w	8007958 <__ieee754_sqrtf>
 800765c:	ee07 5a90 	vmov	s15, r5
 8007660:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8007664:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007668:	e697      	b.n	800739a <__ieee754_powf+0x42>
 800766a:	bf00      	nop
 800766c:	08016400 	.word	0x08016400
 8007670:	3f7ffff7 	.word	0x3f7ffff7
 8007674:	3f800007 	.word	0x3f800007
 8007678:	3eaaaaab 	.word	0x3eaaaaab
 800767c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007680:	36eca570 	.word	0x36eca570
 8007684:	3fb8aa00 	.word	0x3fb8aa00
 8007688:	35bfbe8c 	.word	0x35bfbe8c
 800768c:	3f317218 	.word	0x3f317218
 8007690:	3f317200 	.word	0x3f317200
 8007694:	b5ddea0e 	.word	0xb5ddea0e
 8007698:	3331bb4c 	.word	0x3331bb4c
 800769c:	388ab355 	.word	0x388ab355
 80076a0:	bb360b61 	.word	0xbb360b61
 80076a4:	3e2aaaab 	.word	0x3e2aaaab
 80076a8:	00000000 	.word	0x00000000
 80076ac:	4b800000 	.word	0x4b800000
 80076b0:	f019 4fff 	tst.w	r9, #2139095040	; 0x7f800000
 80076b4:	f040 80f9 	bne.w	80078aa <__ieee754_powf+0x552>
 80076b8:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 80076ac <__ieee754_powf+0x354>
 80076bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80076c0:	f06f 0117 	mvn.w	r1, #23
 80076c4:	ee17 7a90 	vmov	r7, s15
 80076c8:	488f      	ldr	r0, [pc, #572]	; (8007908 <__ieee754_powf+0x5b0>)
 80076ca:	15fb      	asrs	r3, r7, #23
 80076cc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80076d0:	3b7f      	subs	r3, #127	; 0x7f
 80076d2:	4287      	cmp	r7, r0
 80076d4:	440b      	add	r3, r1
 80076d6:	f047 517e 	orr.w	r1, r7, #1065353216	; 0x3f800000
 80076da:	f340 80de 	ble.w	800789a <__ieee754_powf+0x542>
 80076de:	488b      	ldr	r0, [pc, #556]	; (800790c <__ieee754_powf+0x5b4>)
 80076e0:	4287      	cmp	r7, r0
 80076e2:	f340 80fe 	ble.w	80078e2 <__ieee754_powf+0x58a>
 80076e6:	eddf 4a8a 	vldr	s9, [pc, #552]	; 8007910 <__ieee754_powf+0x5b8>
 80076ea:	3301      	adds	r3, #1
 80076ec:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80076f0:	eef0 3a64 	vmov.f32	s7, s9
 80076f4:	2000      	movs	r0, #0
 80076f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80076fa:	ee06 1a90 	vmov	s13, r1
 80076fe:	ee76 7a86 	vadd.f32	s15, s13, s12
 8007702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007706:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800770a:	1049      	asrs	r1, r1, #1
 800770c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007710:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007714:	4401      	add	r1, r0
 8007716:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800771a:	ee07 1a90 	vmov	s15, r1
 800771e:	ee27 2a08 	vmul.f32	s4, s14, s16
 8007722:	ee77 5ac6 	vsub.f32	s11, s15, s12
 8007726:	ed9f 4a7b 	vldr	s8, [pc, #492]	; 8007914 <__ieee754_powf+0x5bc>
 800772a:	497b      	ldr	r1, [pc, #492]	; (8007918 <__ieee754_powf+0x5c0>)
 800772c:	eddf 8a7b 	vldr	s17, [pc, #492]	; 800791c <__ieee754_powf+0x5c4>
 8007730:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8007920 <__ieee754_powf+0x5c8>
 8007734:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8007924 <__ieee754_powf+0x5cc>
 8007738:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8007928 <__ieee754_powf+0x5d0>
 800773c:	eddf 1a7b 	vldr	s3, [pc, #492]	; 800792c <__ieee754_powf+0x5d4>
 8007740:	eddf 2a7b 	vldr	s5, [pc, #492]	; 8007930 <__ieee754_powf+0x5d8>
 8007744:	ed9f 3a7b 	vldr	s6, [pc, #492]	; 8007934 <__ieee754_powf+0x5dc>
 8007748:	ed9f 5a7b 	vldr	s10, [pc, #492]	; 8007938 <__ieee754_powf+0x5e0>
 800774c:	ee22 6a02 	vmul.f32	s12, s4, s4
 8007750:	ee12 0a10 	vmov	r0, s4
 8007754:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8007758:	eef0 5a44 	vmov.f32	s11, s8
 800775c:	eee6 5a28 	vfma.f32	s11, s12, s17
 8007760:	4008      	ands	r0, r1
 8007762:	ee04 0a10 	vmov	s8, r0
 8007766:	eea4 7a67 	vfms.f32	s14, s8, s15
 800776a:	eef0 7a40 	vmov.f32	s15, s0
 800776e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007772:	eea4 7a66 	vfms.f32	s14, s8, s13
 8007776:	eee7 0a86 	vfma.f32	s1, s15, s12
 800777a:	ee67 6a08 	vmul.f32	s13, s14, s16
 800777e:	eeb0 7a41 	vmov.f32	s14, s2
 8007782:	eea0 7a86 	vfma.f32	s14, s1, s12
 8007786:	ee72 7a04 	vadd.f32	s15, s4, s8
 800778a:	eee7 1a06 	vfma.f32	s3, s14, s12
 800778e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007792:	ee26 6a06 	vmul.f32	s12, s12, s12
 8007796:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800779a:	eee6 7a21 	vfma.f32	s15, s12, s3
 800779e:	eeb0 6a65 	vmov.f32	s12, s11
 80077a2:	eea4 6a04 	vfma.f32	s12, s8, s8
 80077a6:	ee07 3a10 	vmov	s14, r3
 80077aa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80077ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80077b2:	ee16 3a10 	vmov	r3, s12
 80077b6:	400b      	ands	r3, r1
 80077b8:	ee06 3a10 	vmov	s12, r3
 80077bc:	ee76 5a65 	vsub.f32	s11, s12, s11
 80077c0:	eee4 5a44 	vfms.f32	s11, s8, s8
 80077c4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80077c8:	ee67 7a82 	vmul.f32	s15, s15, s4
 80077cc:	eee6 7a86 	vfma.f32	s15, s13, s12
 80077d0:	eef0 5a67 	vmov.f32	s11, s15
 80077d4:	eee4 5a06 	vfma.f32	s11, s8, s12
 80077d8:	ee15 3a90 	vmov	r3, s11
 80077dc:	400b      	ands	r3, r1
 80077de:	ee06 3a90 	vmov	s13, r3
 80077e2:	eee4 6a46 	vfms.f32	s13, s8, s12
 80077e6:	ee05 3a90 	vmov	s11, r3
 80077ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077ee:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80077f2:	eee5 7a83 	vfma.f32	s15, s11, s6
 80077f6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80077fa:	eef0 6a67 	vmov.f32	s13, s15
 80077fe:	eee5 6a85 	vfma.f32	s13, s11, s10
 8007802:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007806:	ee76 6a87 	vadd.f32	s13, s13, s14
 800780a:	ee16 3a90 	vmov	r3, s13
 800780e:	400b      	ands	r3, r1
 8007810:	ee06 3a90 	vmov	s13, r3
 8007814:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007818:	ee37 7a64 	vsub.f32	s14, s14, s9
 800781c:	eea5 7ac5 	vfms.f32	s14, s11, s10
 8007820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007824:	e62a      	b.n	800747c <__ieee754_powf+0x124>
 8007826:	f1ba 0f01 	cmp.w	sl, #1
 800782a:	f47f adb6 	bne.w	800739a <__ieee754_powf+0x42>
 800782e:	eeb1 0a40 	vneg.f32	s0, s0
 8007832:	e5b2      	b.n	800739a <__ieee754_powf+0x42>
 8007834:	f002 0201 	and.w	r2, r2, #1
 8007838:	f1c2 0a02 	rsb	sl, r2, #2
 800783c:	e5bc      	b.n	80073b8 <__ieee754_powf+0x60>
 800783e:	493f      	ldr	r1, [pc, #252]	; (800793c <__ieee754_powf+0x5e4>)
 8007840:	428a      	cmp	r2, r1
 8007842:	dc57      	bgt.n	80078f4 <__ieee754_powf+0x59c>
 8007844:	f47f ae48 	bne.w	80074d8 <__ieee754_powf+0x180>
 8007848:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800784c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007854:	da4e      	bge.n	80078f4 <__ieee754_powf+0x59c>
 8007856:	15d2      	asrs	r2, r2, #23
 8007858:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800785c:	3a7e      	subs	r2, #126	; 0x7e
 800785e:	fa41 f202 	asr.w	r2, r1, r2
 8007862:	441a      	add	r2, r3
 8007864:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007868:	4c35      	ldr	r4, [pc, #212]	; (8007940 <__ieee754_powf+0x5e8>)
 800786a:	397f      	subs	r1, #127	; 0x7f
 800786c:	410c      	asrs	r4, r1
 800786e:	f3c2 0016 	ubfx	r0, r2, #0, #23
 8007872:	ea22 0204 	bic.w	r2, r2, r4
 8007876:	ee06 2a90 	vmov	s13, r2
 800787a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800787e:	f1c1 0117 	rsb	r1, r1, #23
 8007882:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007886:	4108      	asrs	r0, r1
 8007888:	2b00      	cmp	r3, #0
 800788a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800788e:	bfb8      	it	lt
 8007890:	4240      	neglt	r0, r0
 8007892:	ee16 3a90 	vmov	r3, s13
 8007896:	05c2      	lsls	r2, r0, #23
 8007898:	e624      	b.n	80074e4 <__ieee754_powf+0x18c>
 800789a:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8007910 <__ieee754_powf+0x5b8>
 800789e:	2000      	movs	r0, #0
 80078a0:	eef0 3a64 	vmov.f32	s7, s9
 80078a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80078a8:	e727      	b.n	80076fa <__ieee754_powf+0x3a2>
 80078aa:	2100      	movs	r1, #0
 80078ac:	e70c      	b.n	80076c8 <__ieee754_powf+0x370>
 80078ae:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8007944 <__ieee754_powf+0x5ec>
 80078b2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80078b6:	ee37 6a86 	vadd.f32	s12, s15, s12
 80078ba:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80078be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c2:	ddc8      	ble.n	8007856 <__ieee754_powf+0x4fe>
 80078c4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007948 <__ieee754_powf+0x5f0>
 80078c8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80078cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80078d0:	e563      	b.n	800739a <__ieee754_powf+0x42>
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	f6bf aea6 	bge.w	8007624 <__ieee754_powf+0x2cc>
 80078d8:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8007948 <__ieee754_powf+0x5f0>
 80078dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80078e0:	e55b      	b.n	800739a <__ieee754_powf+0x42>
 80078e2:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800794c <__ieee754_powf+0x5f4>
 80078e6:	eddf 3a1a 	vldr	s7, [pc, #104]	; 8007950 <__ieee754_powf+0x5f8>
 80078ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80078ee:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80078f2:	e702      	b.n	80076fa <__ieee754_powf+0x3a2>
 80078f4:	eddf 7a17 	vldr	s15, [pc, #92]	; 8007954 <__ieee754_powf+0x5fc>
 80078f8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80078fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007900:	e54b      	b.n	800739a <__ieee754_powf+0x42>
 8007902:	f000 f84b 	bl	800799c <scalbnf>
 8007906:	e644      	b.n	8007592 <__ieee754_powf+0x23a>
 8007908:	001cc471 	.word	0x001cc471
 800790c:	005db3d6 	.word	0x005db3d6
 8007910:	00000000 	.word	0x00000000
 8007914:	3e6c3255 	.word	0x3e6c3255
 8007918:	fffff000 	.word	0xfffff000
 800791c:	3e53f142 	.word	0x3e53f142
 8007920:	3e8ba305 	.word	0x3e8ba305
 8007924:	3eaaaaab 	.word	0x3eaaaaab
 8007928:	3edb6db7 	.word	0x3edb6db7
 800792c:	3f19999a 	.word	0x3f19999a
 8007930:	3f76384f 	.word	0x3f76384f
 8007934:	369dc3a0 	.word	0x369dc3a0
 8007938:	3f763800 	.word	0x3f763800
 800793c:	43160000 	.word	0x43160000
 8007940:	007fffff 	.word	0x007fffff
 8007944:	3338aa3c 	.word	0x3338aa3c
 8007948:	7149f2ca 	.word	0x7149f2ca
 800794c:	3f15c000 	.word	0x3f15c000
 8007950:	35d1cfdc 	.word	0x35d1cfdc
 8007954:	0da24260 	.word	0x0da24260

08007958 <__ieee754_sqrtf>:
 8007958:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop

08007960 <matherr>:
 8007960:	2000      	movs	r0, #0
 8007962:	4770      	bx	lr

08007964 <fabsf>:
 8007964:	ee10 3a10 	vmov	r3, s0
 8007968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800796c:	ee00 3a10 	vmov	s0, r3
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop

08007974 <finitef>:
 8007974:	b082      	sub	sp, #8
 8007976:	ed8d 0a01 	vstr	s0, [sp, #4]
 800797a:	9801      	ldr	r0, [sp, #4]
 800797c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007980:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007984:	bfac      	ite	ge
 8007986:	2000      	movge	r0, #0
 8007988:	2001      	movlt	r0, #1
 800798a:	b002      	add	sp, #8
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <nanf>:
 8007990:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007998 <nanf+0x8>
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	7fc00000 	.word	0x7fc00000

0800799c <scalbnf>:
 800799c:	b082      	sub	sp, #8
 800799e:	ed8d 0a01 	vstr	s0, [sp, #4]
 80079a2:	9b01      	ldr	r3, [sp, #4]
 80079a4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80079a8:	d02a      	beq.n	8007a00 <scalbnf+0x64>
 80079aa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80079ae:	d223      	bcs.n	80079f8 <scalbnf+0x5c>
 80079b0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80079b4:	d128      	bne.n	8007a08 <scalbnf+0x6c>
 80079b6:	ed9d 7a01 	vldr	s14, [sp, #4]
 80079ba:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8007a64 <scalbnf+0xc8>
 80079be:	4b2a      	ldr	r3, [pc, #168]	; (8007a68 <scalbnf+0xcc>)
 80079c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c4:	4298      	cmp	r0, r3
 80079c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80079ca:	db37      	blt.n	8007a3c <scalbnf+0xa0>
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80079d2:	3a19      	subs	r2, #25
 80079d4:	4402      	add	r2, r0
 80079d6:	2afe      	cmp	r2, #254	; 0xfe
 80079d8:	dd1a      	ble.n	8007a10 <scalbnf+0x74>
 80079da:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8007a6c <scalbnf+0xd0>
 80079de:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8007a70 <scalbnf+0xd4>
 80079e2:	9b01      	ldr	r3, [sp, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	eef0 7a40 	vmov.f32	s15, s0
 80079ea:	bfb8      	it	lt
 80079ec:	eeb0 0a47 	vmovlt.f32	s0, s14
 80079f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80079f4:	b002      	add	sp, #8
 80079f6:	4770      	bx	lr
 80079f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80079fc:	b002      	add	sp, #8
 80079fe:	4770      	bx	lr
 8007a00:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007a04:	b002      	add	sp, #8
 8007a06:	4770      	bx	lr
 8007a08:	0dd2      	lsrs	r2, r2, #23
 8007a0a:	4402      	add	r2, r0
 8007a0c:	2afe      	cmp	r2, #254	; 0xfe
 8007a0e:	dce4      	bgt.n	80079da <scalbnf+0x3e>
 8007a10:	2a00      	cmp	r2, #0
 8007a12:	dc0b      	bgt.n	8007a2c <scalbnf+0x90>
 8007a14:	f112 0f16 	cmn.w	r2, #22
 8007a18:	da17      	bge.n	8007a4a <scalbnf+0xae>
 8007a1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	dcdb      	bgt.n	80079da <scalbnf+0x3e>
 8007a22:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8007a74 <scalbnf+0xd8>
 8007a26:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007a78 <scalbnf+0xdc>
 8007a2a:	e7da      	b.n	80079e2 <scalbnf+0x46>
 8007a2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a30:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007a34:	ee00 3a10 	vmov	s0, r3
 8007a38:	b002      	add	sp, #8
 8007a3a:	4770      	bx	lr
 8007a3c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007a74 <scalbnf+0xd8>
 8007a40:	eddd 7a01 	vldr	s15, [sp, #4]
 8007a44:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007a48:	e7d8      	b.n	80079fc <scalbnf+0x60>
 8007a4a:	3219      	adds	r2, #25
 8007a4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a50:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007a54:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007a7c <scalbnf+0xe0>
 8007a58:	ee07 3a10 	vmov	s14, r3
 8007a5c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007a60:	e7cc      	b.n	80079fc <scalbnf+0x60>
 8007a62:	bf00      	nop
 8007a64:	4c000000 	.word	0x4c000000
 8007a68:	ffff3cb0 	.word	0xffff3cb0
 8007a6c:	7149f2ca 	.word	0x7149f2ca
 8007a70:	f149f2ca 	.word	0xf149f2ca
 8007a74:	0da24260 	.word	0x0da24260
 8007a78:	8da24260 	.word	0x8da24260
 8007a7c:	33000000 	.word	0x33000000

08007a80 <_init>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr

08007a8c <_fini>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	bf00      	nop
 8007a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a92:	bc08      	pop	{r3}
 8007a94:	469e      	mov	lr, r3
 8007a96:	4770      	bx	lr
