
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d0c  08004d0c  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d14  08004d14  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  200000e8  08004e08  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012c0  08004e08  000212c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a282  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052ad  00000000  00000000  0004a39a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000de71  00000000  00000000  0004f647  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000011b0  00000000  00000000  0005d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016c0  00000000  00000000  0005e668  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002719f  00000000  00000000  0005fd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014c3d  00000000  00000000  00086ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000cd39f  00000000  00000000  0009bb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00168ea3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a54  00000000  00000000  00168f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e8 	.word	0x200000e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004140 	.word	0x08004140

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	08004140 	.word	0x08004140

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN10AudioCodec8Read_RegEh>:
}

uint16_t AudioCodec::Read_Reg(uint8_t reg)
{
    return WM8978_REGVAL[reg];
}
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <_ZN10AudioCodec8Read_RegEh+0x8>)
 80004ca:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80004ce:	4770      	bx	lr
 80004d0:	20000000 	.word	0x20000000

080004d4 <_ZN10AudioCodec9Write_RegEht>:

uint8_t AudioCodec::Write_Reg(uint8_t reg, uint16_t val)
{
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	460d      	mov	r5, r1
 80004da:	4614      	mov	r4, r2
    uint8_t res;
    uint8_t RegAddr;
    uint8_t RegValue;
    RegAddr = (reg << 1) | ((uint8_t)((val >> 8) & 0x01)); //reg address + data highest bit
 80004dc:	f3c2 2300 	ubfx	r3, r2, #8, #1
 80004e0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

    HAL_StatusTypeDef status = HAL_OK;
    uint8_t data[2];

    //     /* Assemble 2-byte data in WM8731 format */
    data[0] = RegAddr;  // 0x0C in your example
 80004e4:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = RegValue; // MSB byte of 16bit data
 80004e8:	f88d 200d 	strb.w	r2, [sp, #13]

    status = HAL_I2C_Master_Transmit(i2c, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 80004ec:	6840      	ldr	r0, [r0, #4]
 80004ee:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2302      	movs	r3, #2
 80004f6:	aa03      	add	r2, sp, #12
 80004f8:	2134      	movs	r1, #52	; 0x34
 80004fa:	f001 fcd1 	bl	8001ea0 <HAL_I2C_Master_Transmit>
                                                                                       //     /* Check the communication status */
    if (status != HAL_OK)
 80004fe:	b928      	cbnz	r0, 800050c <_ZN10AudioCodec9Write_RegEht+0x38>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
        // Error handling, for example re-initialization of the I2C peripheral
        // Error_Handler();
    }

    WM8978_REGVAL[reg] = val;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <_ZN10AudioCodec9Write_RegEht+0x48>)
 8000502:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
    return res;
}
 8000506:	2000      	movs	r0, #0
 8000508:	b005      	add	sp, #20
 800050a:	bd30      	pop	{r4, r5, pc}
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <_ZN10AudioCodec9Write_RegEht+0x4c>)
 8000514:	f001 fb34 	bl	8001b80 <HAL_GPIO_WritePin>
 8000518:	e7f2      	b.n	8000500 <_ZN10AudioCodec9Write_RegEht+0x2c>
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	40020800 	.word	0x40020800

08000524 <_ZN10AudioCodec8ADDA_CfgEhh>:
    HAL_I2S_Transmit_DMA(i2s, (uint16_t *)&audiobuff[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
    return 0;
}

void AudioCodec::ADDA_Cfg(uint8_t dacen, uint8_t adcen)
{
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	4604      	mov	r4, r0
 8000528:	460e      	mov	r6, r1
 800052a:	4615      	mov	r5, r2
    uint16_t regval;
    regval = Read_Reg(3); //read R3
 800052c:	2103      	movs	r1, #3
 800052e:	f7ff ffcb 	bl	80004c8 <_ZN10AudioCodec8Read_RegEh>
    if (dacen)
 8000532:	b19e      	cbz	r6, 800055c <_ZN10AudioCodec8ADDA_CfgEhh+0x38>
        regval |= 3 << 0; //R3 set lowest 2 bits to 1,enable DACR&DACL
 8000534:	f040 0203 	orr.w	r2, r0, #3
 8000538:	b292      	uxth	r2, r2
    else
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
    Write_Reg(3, regval);
 800053a:	2103      	movs	r1, #3
 800053c:	4620      	mov	r0, r4
 800053e:	f7ff ffc9 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(2); //read R2
 8000542:	2102      	movs	r1, #2
 8000544:	4620      	mov	r0, r4
 8000546:	f7ff ffbf 	bl	80004c8 <_ZN10AudioCodec8Read_RegEh>
    if (adcen)
 800054a:	b95d      	cbnz	r5, 8000564 <_ZN10AudioCodec8ADDA_CfgEhh+0x40>
        regval |= 3 << 0; //R2 set lowest bits to 1, enable ADCR&ADCL
    else
        regval &= ~(3 << 0); //R2 set lowest bits to 0, disable ADCR&ADCL.
 800054c:	f020 0203 	bic.w	r2, r0, #3
 8000550:	b292      	uxth	r2, r2
    Write_Reg(2, regval);    //R2
 8000552:	2102      	movs	r1, #2
 8000554:	4620      	mov	r0, r4
 8000556:	f7ff ffbd 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
}
 800055a:	bd70      	pop	{r4, r5, r6, pc}
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
 800055c:	f020 0203 	bic.w	r2, r0, #3
 8000560:	b292      	uxth	r2, r2
 8000562:	e7ea      	b.n	800053a <_ZN10AudioCodec8ADDA_CfgEhh+0x16>
        regval |= 3 << 0; //R2 set lowest bits to 1, enable ADCR&ADCL
 8000564:	f040 0203 	orr.w	r2, r0, #3
 8000568:	b292      	uxth	r2, r2
 800056a:	e7f2      	b.n	8000552 <_ZN10AudioCodec8ADDA_CfgEhh+0x2e>

0800056c <_ZN10AudioCodec11LINEIN_GainEh>:
}

//WM8978 L2/R2(Line In)db config(L2/R2-->ADC input db)
//gain:0~7,0 means channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void AudioCodec::LINEIN_Gain(uint8_t gain)
{
 800056c:	b538      	push	{r3, r4, r5, lr}
 800056e:	4605      	mov	r5, r0
    uint16_t regval;
    gain &= 0X07;
 8000570:	f001 0407 	and.w	r4, r1, #7
    regval = Read_Reg(47);
 8000574:	212f      	movs	r1, #47	; 0x2f
 8000576:	f7ff ffa7 	bl	80004c8 <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 4); //reset old config
 800057a:	f020 0270 	bic.w	r2, r0, #112	; 0x70
 800057e:	b292      	uxth	r2, r2
    Write_Reg(47, regval | gain << 4);
 8000580:	0124      	lsls	r4, r4, #4
 8000582:	4322      	orrs	r2, r4
 8000584:	212f      	movs	r1, #47	; 0x2f
 8000586:	4628      	mov	r0, r5
 8000588:	f7ff ffa4 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(48);
 800058c:	2130      	movs	r1, #48	; 0x30
 800058e:	4628      	mov	r0, r5
 8000590:	f7ff ff9a 	bl	80004c8 <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 4); //reset old config
 8000594:	f020 0270 	bic.w	r2, r0, #112	; 0x70
 8000598:	b292      	uxth	r2, r2
    Write_Reg(48, regval | gain << 4);
 800059a:	4322      	orrs	r2, r4
 800059c:	2130      	movs	r1, #48	; 0x30
 800059e:	4628      	mov	r0, r5
 80005a0:	f7ff ff98 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
}
 80005a4:	bd38      	pop	{r3, r4, r5, pc}

080005a6 <_ZN10AudioCodec8AUX_GainEh>:
//WM8978 AUXR,AUXL(PWM audio config)db config(AUXR/L-->ADC input db)
//gain:0~7,0 channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void AudioCodec::AUX_Gain(uint8_t gain)
{
 80005a6:	b538      	push	{r3, r4, r5, lr}
 80005a8:	4605      	mov	r5, r0
    uint16_t regval;
    gain &= 0X07;
 80005aa:	f001 0407 	and.w	r4, r1, #7
    regval = Read_Reg(47);
 80005ae:	212f      	movs	r1, #47	; 0x2f
 80005b0:	f7ff ff8a 	bl	80004c8 <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 0); //reset old config
 80005b4:	f020 0207 	bic.w	r2, r0, #7
 80005b8:	b292      	uxth	r2, r2
    Write_Reg(47, regval | gain << 0);
 80005ba:	b2a4      	uxth	r4, r4
 80005bc:	4322      	orrs	r2, r4
 80005be:	212f      	movs	r1, #47	; 0x2f
 80005c0:	4628      	mov	r0, r5
 80005c2:	f7ff ff87 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(48);
 80005c6:	2130      	movs	r1, #48	; 0x30
 80005c8:	4628      	mov	r0, r5
 80005ca:	f7ff ff7d 	bl	80004c8 <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 0); //reset old config
 80005ce:	f020 0207 	bic.w	r2, r0, #7
 80005d2:	b292      	uxth	r2, r2
    Write_Reg(48, regval | gain << 0);
 80005d4:	4322      	orrs	r2, r4
 80005d6:	2130      	movs	r1, #48	; 0x30
 80005d8:	4628      	mov	r0, r5
 80005da:	f7ff ff7b 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
}
 80005de:	bd38      	pop	{r3, r4, r5, pc}

080005e0 <_ZN10AudioCodec9Input_CfgEhhh>:
{
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	4604      	mov	r4, r0
 80005e4:	460f      	mov	r7, r1
 80005e6:	4616      	mov	r6, r2
 80005e8:	461d      	mov	r5, r3
    regval = Read_Reg(2);
 80005ea:	2102      	movs	r1, #2
 80005ec:	f7ff ff6c 	bl	80004c8 <_ZN10AudioCodec8Read_RegEh>
    if (micen)
 80005f0:	b1ef      	cbz	r7, 800062e <_ZN10AudioCodec9Input_CfgEhhh+0x4e>
        regval |= 3 << 2; //open INPPGAENR,INPPGAENL(MIC��PGA�Ŵ�)
 80005f2:	f040 020c 	orr.w	r2, r0, #12
 80005f6:	b292      	uxth	r2, r2
    Write_Reg(2, regval);
 80005f8:	2102      	movs	r1, #2
 80005fa:	4620      	mov	r0, r4
 80005fc:	f7ff ff6a 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(44);
 8000600:	212c      	movs	r1, #44	; 0x2c
 8000602:	4620      	mov	r0, r4
 8000604:	f7ff ff60 	bl	80004c8 <_ZN10AudioCodec8Read_RegEh>
    if (micen)
 8000608:	b1af      	cbz	r7, 8000636 <_ZN10AudioCodec9Input_CfgEhhh+0x56>
        regval |= 3 << 4 | 3 << 0; //enable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 800060a:	f040 0233 	orr.w	r2, r0, #51	; 0x33
 800060e:	b292      	uxth	r2, r2
    Write_Reg(44, regval);
 8000610:	212c      	movs	r1, #44	; 0x2c
 8000612:	4620      	mov	r0, r4
 8000614:	f7ff ff5e 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    if (lineinen)
 8000618:	b18e      	cbz	r6, 800063e <_ZN10AudioCodec9Input_CfgEhhh+0x5e>
        LINEIN_Gain(5); //LINE IN 0dB
 800061a:	2105      	movs	r1, #5
 800061c:	4620      	mov	r0, r4
 800061e:	f7ff ffa5 	bl	800056c <_ZN10AudioCodec11LINEIN_GainEh>
    if (auxen)
 8000622:	b98d      	cbnz	r5, 8000648 <_ZN10AudioCodec9Input_CfgEhhh+0x68>
        AUX_Gain(0); //disable AUX input
 8000624:	2100      	movs	r1, #0
 8000626:	4620      	mov	r0, r4
 8000628:	f7ff ffbd 	bl	80005a6 <_ZN10AudioCodec8AUX_GainEh>
}
 800062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        regval &= ~(3 << 2); //close INPPGAENR,INPPGAENL.
 800062e:	f020 020c 	bic.w	r2, r0, #12
 8000632:	b292      	uxth	r2, r2
 8000634:	e7e0      	b.n	80005f8 <_ZN10AudioCodec9Input_CfgEhhh+0x18>
        regval &= ~(3 << 4 | 3 << 0); //disable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 8000636:	f020 0233 	bic.w	r2, r0, #51	; 0x33
 800063a:	b292      	uxth	r2, r2
 800063c:	e7e8      	b.n	8000610 <_ZN10AudioCodec9Input_CfgEhhh+0x30>
        LINEIN_Gain(0); //disable LINE IN
 800063e:	2100      	movs	r1, #0
 8000640:	4620      	mov	r0, r4
 8000642:	f7ff ff93 	bl	800056c <_ZN10AudioCodec11LINEIN_GainEh>
 8000646:	e7ec      	b.n	8000622 <_ZN10AudioCodec9Input_CfgEhhh+0x42>
        AUX_Gain(7); //AUX 6dB
 8000648:	2107      	movs	r1, #7
 800064a:	4620      	mov	r0, r4
 800064c:	f7ff ffab 	bl	80005a6 <_ZN10AudioCodec8AUX_GainEh>
 8000650:	e7ec      	b.n	800062c <_ZN10AudioCodec9Input_CfgEhhh+0x4c>

08000652 <_ZN10AudioCodec10Output_CfgEhh>:

//WM8978 output setting
//dacen:DAC output enabled(1)/disabled(0)
//bpsen:Bypass output(record,include MIC,LINE IN,AUX��) enabled(1)/disabled(0)
void AudioCodec::Output_Cfg(uint8_t dacen, uint8_t bpsen)
{
 8000652:	b538      	push	{r3, r4, r5, lr}
 8000654:	4605      	mov	r5, r0
    uint16_t regval = 0;
    if (dacen)
 8000656:	b971      	cbnz	r1, 8000676 <_ZN10AudioCodec10Output_CfgEhh+0x24>
    uint16_t regval = 0;
 8000658:	2400      	movs	r4, #0
        regval |= 1 << 0; //DAC output enabled
    if (bpsen)
 800065a:	b10a      	cbz	r2, 8000660 <_ZN10AudioCodec10Output_CfgEhh+0xe>
    {
        regval |= 1 << 1; //BYPASS enabled
        regval |= 5 << 2; //0dB
 800065c:	f044 0416 	orr.w	r4, r4, #22
    }
    Write_Reg(50, regval);
 8000660:	4622      	mov	r2, r4
 8000662:	2132      	movs	r1, #50	; 0x32
 8000664:	4628      	mov	r0, r5
 8000666:	f7ff ff35 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(51, regval);
 800066a:	4622      	mov	r2, r4
 800066c:	2133      	movs	r1, #51	; 0x33
 800066e:	4628      	mov	r0, r5
 8000670:	f7ff ff30 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
}
 8000674:	bd38      	pop	{r3, r4, r5, pc}
        regval |= 1 << 0; //DAC output enabled
 8000676:	2401      	movs	r4, #1
 8000678:	e7ef      	b.n	800065a <_ZN10AudioCodec10Output_CfgEhh+0x8>

0800067a <_ZN10AudioCodec9HPvol_SetEhh>:

//Headphone volume
void AudioCodec::HPvol_Set(uint8_t voll, uint8_t volr)
{
 800067a:	b538      	push	{r3, r4, r5, lr}
 800067c:	4605      	mov	r5, r0
    HP_Volume = voll;
 800067e:	7001      	strb	r1, [r0, #0]

    voll &= 0X3F;
    volr &= 0X3F;
 8000680:	f002 043f 	and.w	r4, r2, #63	; 0x3f
    if (voll == 0)
 8000684:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
 8000688:	d101      	bne.n	800068e <_ZN10AudioCodec9HPvol_SetEhh+0x14>
        voll |= 1 << 6; //volume is 0, mute on
 800068a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    if (volr == 0)
 800068e:	b90c      	cbnz	r4, 8000694 <_ZN10AudioCodec9HPvol_SetEhh+0x1a>
        volr |= 1 << 6;             //volume is 0, mute on
 8000690:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    Write_Reg(52, voll);            //R52, left channel volume
 8000694:	2134      	movs	r1, #52	; 0x34
 8000696:	4628      	mov	r0, r5
 8000698:	f7ff ff1c 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(53, volr | (1 << 8)); //R53, right channel volume
 800069c:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 80006a0:	2135      	movs	r1, #53	; 0x35
 80006a2:	4628      	mov	r0, r5
 80006a4:	f7ff ff16 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
}
 80006a8:	bd38      	pop	{r3, r4, r5, pc}

080006aa <_ZN10AudioCodec10SPKvol_SetEh>:

//speaker volume
//voll:left channel volume(0~63)
void AudioCodec::SPKvol_Set(uint8_t volx)
{
 80006aa:	b538      	push	{r3, r4, r5, lr}
 80006ac:	4605      	mov	r5, r0
    SPK_Volume = volx;
 80006ae:	7041      	strb	r1, [r0, #1]
    volx &= 0X3F;
    if (volx == 0)
 80006b0:	f011 043f 	ands.w	r4, r1, #63	; 0x3f
 80006b4:	d101      	bne.n	80006ba <_ZN10AudioCodec10SPKvol_SetEh+0x10>
        volx |= 1 << 6;             //volume is 0, mute on
 80006b6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    Write_Reg(54, volx);            //R54, left channel audio volume
 80006ba:	4622      	mov	r2, r4
 80006bc:	2136      	movs	r1, #54	; 0x36
 80006be:	4628      	mov	r0, r5
 80006c0:	f7ff ff08 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(55, volx | (1 << 8)); //R55, right channel audio volume
 80006c4:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 80006c8:	2137      	movs	r1, #55	; 0x37
 80006ca:	4628      	mov	r0, r5
 80006cc:	f7ff ff02 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
}
 80006d0:	bd38      	pop	{r3, r4, r5, pc}

080006d2 <_ZN10AudioCodec7I2S_CfgEhh>:

//I2S working mode
//fmt:0,LSB;1,MSB;2,I2S;3,PCM/DSP;
//len:0,16bist;1,20bits;2,24bits;3,32bits;
void AudioCodec::I2S_Cfg(uint8_t fmt, uint8_t len)
{
 80006d2:	b508      	push	{r3, lr}
    fmt &= 0x02;
 80006d4:	f001 0102 	and.w	r1, r1, #2
    len &= 0x03;
 80006d8:	f002 0203 	and.w	r2, r2, #3
    Write_Reg(4, (fmt << 3) | (len << 5)); //R4,WM8978 working mode
 80006dc:	0152      	lsls	r2, r2, #5
 80006de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80006e2:	2104      	movs	r1, #4
 80006e4:	f7ff fef6 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
}
 80006e8:	bd08      	pop	{r3, pc}
	...

080006ec <_ZN10AudioCodec4InitEv>:
{
 80006ec:	b538      	push	{r3, r4, r5, lr}
 80006ee:	4604      	mov	r4, r0
    Res = Write_Reg(0, 0); //soft reset WM8978
 80006f0:	2200      	movs	r2, #0
 80006f2:	4611      	mov	r1, r2
 80006f4:	f7ff feee 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    if (Res)
 80006f8:	b110      	cbz	r0, 8000700 <_ZN10AudioCodec4InitEv+0x14>
        return 1; //reset failed, WM8978 exception
 80006fa:	2501      	movs	r5, #1
}
 80006fc:	4628      	mov	r0, r5
 80006fe:	bd38      	pop	{r3, r4, r5, pc}
 8000700:	4605      	mov	r5, r0
    Write_Reg(1, 0X1B);  //R1,MICEN 1(MIC enabled),BIASEN 1(emu on),VMIDSEL[1:0]:11(5K) R1,MICEN设置为1(MIC使能)，BIASEN设置为1(模拟工作，VMIDSEL[1:0]设置为：11（5）)
 8000702:	221b      	movs	r2, #27
 8000704:	2101      	movs	r1, #1
 8000706:	4620      	mov	r0, r4
 8000708:	f7ff fee4 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(2, 0X1B0); //R2, ROUT1,LOUT1 output enabled(headphone),BOOSTENR,BOOSTENL enabled.
 800070c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000710:	2102      	movs	r1, #2
 8000712:	4620      	mov	r0, r4
 8000714:	f7ff fede 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(3, 0X6C);  //R3, LOUT2,ROUT2 output enabled(speaker on),RMIX,LMIX enabled
 8000718:	226c      	movs	r2, #108	; 0x6c
 800071a:	2103      	movs	r1, #3
 800071c:	4620      	mov	r0, r4
 800071e:	f7ff fed9 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(6, 0); //R6, MCLK from out
 8000722:	2200      	movs	r2, #0
 8000724:	2106      	movs	r1, #6
 8000726:	4620      	mov	r0, r4
 8000728:	f7ff fed4 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(43, 1 << 4); //R43,INVROUT2 inverted, drive speaker
 800072c:	2210      	movs	r2, #16
 800072e:	212b      	movs	r1, #43	; 0x2b
 8000730:	4620      	mov	r0, r4
 8000732:	f7ff fecf 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(47, 1 << 8); //R47,PGABOOSTL,left MIC got 20 db
 8000736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073a:	212f      	movs	r1, #47	; 0x2f
 800073c:	4620      	mov	r0, r4
 800073e:	f7ff fec9 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(48, 1 << 8); //R48,PGABOOSTR, right MIC got 20 db
 8000742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000746:	2130      	movs	r1, #48	; 0x30
 8000748:	4620      	mov	r0, r4
 800074a:	f7ff fec3 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(49, 1 << 1); //R49,TSDEN, open hot protecting
 800074e:	2202      	movs	r2, #2
 8000750:	2131      	movs	r1, #49	; 0x31
 8000752:	4620      	mov	r0, r4
 8000754:	f7ff febe 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(10, 1 << 3); //R10,SOFTMUTE closed,128x sample rate, best SNR
 8000758:	2208      	movs	r2, #8
 800075a:	210a      	movs	r1, #10
 800075c:	4620      	mov	r0, r4
 800075e:	f7ff feb9 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(14, 1 << 3); //R14,ADC 128x sample rate
 8000762:	2208      	movs	r2, #8
 8000764:	210e      	movs	r1, #14
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff feb4 	bl	80004d4 <_ZN10AudioCodec9Write_RegEht>
    ADDA_Cfg(1, 1);     //open DAC
 800076c:	2201      	movs	r2, #1
 800076e:	4611      	mov	r1, r2
 8000770:	4620      	mov	r0, r4
 8000772:	f7ff fed7 	bl	8000524 <_ZN10AudioCodec8ADDA_CfgEhh>
    Input_Cfg(1, 0, 0); //close input channel
 8000776:	2300      	movs	r3, #0
 8000778:	461a      	mov	r2, r3
 800077a:	2101      	movs	r1, #1
 800077c:	4620      	mov	r0, r4
 800077e:	f7ff ff2f 	bl	80005e0 <_ZN10AudioCodec9Input_CfgEhhh>
    Output_Cfg(1, 0);   //open DAC output
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	4620      	mov	r0, r4
 8000788:	f7ff ff63 	bl	8000652 <_ZN10AudioCodec10Output_CfgEhh>
    I2S_Cfg(2, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2102      	movs	r1, #2
 8000790:	4620      	mov	r0, r4
 8000792:	f7ff ff9e 	bl	80006d2 <_ZN10AudioCodec7I2S_CfgEhh>
    HPvol_Set(HP_Volume, HP_Volume);
 8000796:	7821      	ldrb	r1, [r4, #0]
 8000798:	460a      	mov	r2, r1
 800079a:	4620      	mov	r0, r4
 800079c:	f7ff ff6d 	bl	800067a <_ZN10AudioCodec9HPvol_SetEhh>
    SPKvol_Set(SPK_Volume);
 80007a0:	7861      	ldrb	r1, [r4, #1]
 80007a2:	4620      	mov	r0, r4
 80007a4:	f7ff ff81 	bl	80006aa <_ZN10AudioCodec10SPKvol_SetEh>
    HAL_I2S_Transmit_DMA(i2s, (uint16_t *)&audiobuff[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
 80007a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007ac:	4902      	ldr	r1, [pc, #8]	; (80007b8 <_ZN10AudioCodec4InitEv+0xcc>)
 80007ae:	68a0      	ldr	r0, [r4, #8]
 80007b0:	f001 fce2 	bl	8002178 <HAL_I2S_Transmit_DMA>
    return 0;
 80007b4:	e7a2      	b.n	80006fc <_ZN10AudioCodec4InitEv+0x10>
 80007b6:	bf00      	nop
 80007b8:	20000104 	.word	0x20000104

080007bc <_ZN10AudioCodecC1EP17I2C_HandleTypeDefP19__I2S_HandleTypeDef>:
AudioCodec::AudioCodec(I2C_HandleTypeDef *hi2c, I2S_HandleTypeDef *hi2s)
 80007bc:	b510      	push	{r4, lr}
 80007be:	4604      	mov	r4, r0
    i2c = hi2c;
 80007c0:	6041      	str	r1, [r0, #4]
    i2s = hi2s;
 80007c2:	6082      	str	r2, [r0, #8]
    Init();
 80007c4:	f7ff ff92 	bl	80006ec <_ZN10AudioCodec4InitEv>
}
 80007c8:	4620      	mov	r0, r4
 80007ca:	bd10      	pop	{r4, pc}

080007cc <_ZN3LCD10invertTextEb>:
        write(LCD_DISPLAY_NORMAL, LCD_COMMAND);
    }
}
void LCD::invertText(bool mode)
{
    display.inverttext = mode;
 80007cc:	f880 11fc 	strb.w	r1, [r0, #508]	; 0x1fc
}
 80007d0:	4770      	bx	lr

080007d2 <_ZN3LCD7setFontEPKh>:
    setDigitMinWd(4);
}

void LCD::setFont(const uint8_t *f)
{
    font = f;
 80007d2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    xSize = font[0];
 80007d6:	780b      	ldrb	r3, [r1, #0]
 80007d8:	f880 3206 	strb.w	r3, [r0, #518]	; 0x206
    ySize = font[1];
 80007dc:	784b      	ldrb	r3, [r1, #1]
 80007de:	f880 3207 	strb.w	r3, [r0, #519]	; 0x207
    // firstCh = font[2];
    // lastCh = font[3];
    ySize8 = (ySize + 7) / 8;
 80007e2:	3307      	adds	r3, #7
 80007e4:	10db      	asrs	r3, r3, #3
 80007e6:	f880 3208 	strb.w	r3, [r0, #520]	; 0x208
    minCharWd = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
    minDigitWd = 0;
 80007f0:	f880 3205 	strb.w	r3, [r0, #517]	; 0x205
    // cr = 0;
    // invertCh = 0;
    // invertMask = 0xff;
}
 80007f4:	4770      	bx	lr

080007f6 <_ZN3LCD4sendEh>:

void LCD::send(uint8_t val)
{
 80007f6:	b510      	push	{r4, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	ac02      	add	r4, sp, #8
 80007fc:	f804 1d01 	strb.w	r1, [r4, #-1]!
    HAL_SPI_Transmit(gpio->SPICH, &val, 0x01, 1000);
 8000800:	6800      	ldr	r0, [r0, #0]
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	2201      	movs	r2, #1
 8000808:	4621      	mov	r1, r4
 800080a:	6980      	ldr	r0, [r0, #24]
 800080c:	f002 faef 	bl	8002dee <HAL_SPI_Transmit>
};
 8000810:	b002      	add	sp, #8
 8000812:	bd10      	pop	{r4, pc}

08000814 <_ZN3LCD5writeEhh>:
void LCD::write(uint8_t data, uint8_t mode)
{
 8000814:	b538      	push	{r3, r4, r5, lr}
 8000816:	4604      	mov	r4, r0
 8000818:	460d      	mov	r5, r1
    if (mode == LCD_COMMAND)
 800081a:	b1b2      	cbz	r2, 800084a <_ZN3LCD5writeEhh+0x36>
        send(data);
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
    }
    else
    {
        HAL_GPIO_WritePin(gpio->DCPORT, gpio->DCPIN, GPIO_PIN_SET);
 800081c:	6803      	ldr	r3, [r0, #0]
 800081e:	2201      	movs	r2, #1
 8000820:	8999      	ldrh	r1, [r3, #12]
 8000822:	6898      	ldr	r0, [r3, #8]
 8000824:	f001 f9ac 	bl	8001b80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_RESET);
 8000828:	6823      	ldr	r3, [r4, #0]
 800082a:	2200      	movs	r2, #0
 800082c:	8899      	ldrh	r1, [r3, #4]
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	f001 f9a6 	bl	8001b80 <HAL_GPIO_WritePin>
        send(data);
 8000834:	4629      	mov	r1, r5
 8000836:	4620      	mov	r0, r4
 8000838:	f7ff ffdd 	bl	80007f6 <_ZN3LCD4sendEh>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	2201      	movs	r2, #1
 8000840:	8899      	ldrh	r1, [r3, #4]
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	f001 f99c 	bl	8001b80 <HAL_GPIO_WritePin>
    }
}
 8000848:	bd38      	pop	{r3, r4, r5, pc}
        HAL_GPIO_WritePin(gpio->DCPORT, gpio->DCPIN, GPIO_PIN_RESET);
 800084a:	6803      	ldr	r3, [r0, #0]
 800084c:	8999      	ldrh	r1, [r3, #12]
 800084e:	6898      	ldr	r0, [r3, #8]
 8000850:	f001 f996 	bl	8001b80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_RESET);
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	8899      	ldrh	r1, [r3, #4]
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	f001 f990 	bl	8001b80 <HAL_GPIO_WritePin>
        send(data);
 8000860:	4629      	mov	r1, r5
 8000862:	4620      	mov	r0, r4
 8000864:	f7ff ffc7 	bl	80007f6 <_ZN3LCD4sendEh>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	2201      	movs	r2, #1
 800086c:	8899      	ldrh	r1, [r3, #4]
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	f001 f986 	bl	8001b80 <HAL_GPIO_WritePin>
 8000874:	e7e8      	b.n	8000848 <_ZN3LCD5writeEhh+0x34>

08000876 <_ZN3LCD6clrScrEv>:
{
 8000876:	b538      	push	{r3, r4, r5, lr}
 8000878:	4605      	mov	r5, r0
    for (int i = 0; i < 504; i++)
 800087a:	2400      	movs	r4, #0
 800087c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8000880:	da09      	bge.n	8000896 <_ZN3LCD6clrScrEv+0x20>
        write(0x00, LCD_DATA);
 8000882:	2201      	movs	r2, #1
 8000884:	2100      	movs	r1, #0
 8000886:	4628      	mov	r0, r5
 8000888:	f7ff ffc4 	bl	8000814 <_ZN3LCD5writeEhh>
        display.buffer[i] = 0;
 800088c:	192b      	adds	r3, r5, r4
 800088e:	2200      	movs	r2, #0
 8000890:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 504; i++)
 8000892:	3401      	adds	r4, #1
 8000894:	e7f2      	b.n	800087c <_ZN3LCD6clrScrEv+0x6>
}
 8000896:	bd38      	pop	{r3, r4, r5, pc}

08000898 <_ZN3LCD4goXYEhh>:
{
 8000898:	b538      	push	{r3, r4, r5, lr}
 800089a:	4604      	mov	r4, r0
 800089c:	4615      	mov	r5, r2
    write(0x80 | x, LCD_COMMAND); //Column.
 800089e:	2200      	movs	r2, #0
 80008a0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80008a4:	f7ff ffb6 	bl	8000814 <_ZN3LCD5writeEhh>
    write(0x40 | y, LCD_COMMAND); //Row.
 80008a8:	2200      	movs	r2, #0
 80008aa:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80008ae:	4620      	mov	r0, r4
 80008b0:	f7ff ffb0 	bl	8000814 <_ZN3LCD5writeEhh>
};
 80008b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080008b8 <_ZN3LCD7putCharEc>:
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4605      	mov	r5, r0
 80008bc:	460e      	mov	r6, r1
    for (int i = 0; i < 6; i++)
 80008be:	2400      	movs	r4, #0
 80008c0:	e00a      	b.n	80008d8 <_ZN3LCD7putCharEc+0x20>
            write(~(Tiny3x7PL[c - 0x20]), LCD_DATA);
 80008c2:	f1a6 0320 	sub.w	r3, r6, #32
 80008c6:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <_ZN3LCD7putCharEc+0x40>)
 80008c8:	5cd1      	ldrb	r1, [r2, r3]
 80008ca:	43c9      	mvns	r1, r1
 80008cc:	2201      	movs	r2, #1
 80008ce:	b2c9      	uxtb	r1, r1
 80008d0:	4628      	mov	r0, r5
 80008d2:	f7ff ff9f 	bl	8000814 <_ZN3LCD5writeEhh>
    for (int i = 0; i < 6; i++)
 80008d6:	3401      	adds	r4, #1
 80008d8:	2c05      	cmp	r4, #5
 80008da:	dc0c      	bgt.n	80008f6 <_ZN3LCD7putCharEc+0x3e>
        if (display.inverttext != true)
 80008dc:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1ee      	bne.n	80008c2 <_ZN3LCD7putCharEc+0xa>
            write(Tiny3x7PL[c - 0x20], LCD_DATA);
 80008e4:	f1a6 0320 	sub.w	r3, r6, #32
 80008e8:	2201      	movs	r2, #1
 80008ea:	4903      	ldr	r1, [pc, #12]	; (80008f8 <_ZN3LCD7putCharEc+0x40>)
 80008ec:	5cc9      	ldrb	r1, [r1, r3]
 80008ee:	4628      	mov	r0, r5
 80008f0:	f7ff ff90 	bl	8000814 <_ZN3LCD5writeEhh>
 80008f4:	e7ef      	b.n	80008d6 <_ZN3LCD7putCharEc+0x1e>
}
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	08004404 	.word	0x08004404

080008fc <_ZN3LCD5printEPchh>:
{
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4605      	mov	r5, r0
 8000900:	460c      	mov	r4, r1
 8000902:	4611      	mov	r1, r2
    goXY(x, y);
 8000904:	461a      	mov	r2, r3
 8000906:	f7ff ffc7 	bl	8000898 <_ZN3LCD4goXYEhh>
    while (*str)
 800090a:	7821      	ldrb	r1, [r4, #0]
 800090c:	b121      	cbz	r1, 8000918 <_ZN3LCD5printEPchh+0x1c>
        putChar(*str++);
 800090e:	3401      	adds	r4, #1
 8000910:	4628      	mov	r0, r5
 8000912:	f7ff ffd1 	bl	80008b8 <_ZN3LCD7putCharEc>
    while (*str)
 8000916:	e7f8      	b.n	800090a <_ZN3LCD5printEPchh+0xe>
};
 8000918:	bd38      	pop	{r3, r4, r5, pc}
	...

0800091c <_ZN3LCD4initEv>:
{
 800091c:	b510      	push	{r4, lr}
 800091e:	4604      	mov	r4, r0
    write(0x21, LCD_COMMAND);               //LCD extended commands.
 8000920:	2200      	movs	r2, #0
 8000922:	2121      	movs	r1, #33	; 0x21
 8000924:	f7ff ff76 	bl	8000814 <_ZN3LCD5writeEhh>
    write(0xBE, LCD_COMMAND);               //set LCD Vop(Contrast).
 8000928:	2200      	movs	r2, #0
 800092a:	21be      	movs	r1, #190	; 0xbe
 800092c:	4620      	mov	r0, r4
 800092e:	f7ff ff71 	bl	8000814 <_ZN3LCD5writeEhh>
    write(0x04, LCD_COMMAND);               //set temp coefficent.
 8000932:	2200      	movs	r2, #0
 8000934:	2104      	movs	r1, #4
 8000936:	4620      	mov	r0, r4
 8000938:	f7ff ff6c 	bl	8000814 <_ZN3LCD5writeEhh>
    write(0x14, LCD_COMMAND);               //LCD bias mode 1:40.
 800093c:	2200      	movs	r2, #0
 800093e:	2114      	movs	r1, #20
 8000940:	4620      	mov	r0, r4
 8000942:	f7ff ff67 	bl	8000814 <_ZN3LCD5writeEhh>
    write(0x20, LCD_COMMAND);               //LCD basic commands.
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	4620      	mov	r0, r4
 800094c:	f7ff ff62 	bl	8000814 <_ZN3LCD5writeEhh>
    write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000950:	2200      	movs	r2, #0
 8000952:	210c      	movs	r1, #12
 8000954:	4620      	mov	r0, r4
 8000956:	f7ff ff5d 	bl	8000814 <_ZN3LCD5writeEhh>
    clrScr();
 800095a:	4620      	mov	r0, r4
 800095c:	f7ff ff8b 	bl	8000876 <_ZN3LCD6clrScrEv>
    display.inverttext = false;
 8000960:	2300      	movs	r3, #0
 8000962:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
    font = NULL;
 8000966:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    setFont(Small5x7PLBold);
 800096a:	4904      	ldr	r1, [pc, #16]	; (800097c <_ZN3LCD4initEv+0x60>)
 800096c:	4620      	mov	r0, r4
 800096e:	f7ff ff30 	bl	80007d2 <_ZN3LCD7setFontEPKh>
		void drawVLine(int x, int y, int l);
		void drawLine(int x1, int y1, int x2, int y2);
		void drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2);
		void refreshScr();
		void setFont(const uint8_t *f);
 		void setDigitMinWd(uint8_t wd) { minDigitWd = wd; }
 8000972:	2304      	movs	r3, #4
 8000974:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
}
 8000978:	bd10      	pop	{r4, pc}
 800097a:	bf00      	nop
 800097c:	08004158 	.word	0x08004158

08000980 <_ZN3LCDC1EP8LCD_GPIO>:
LCD::LCD(LCD_GPIO *hgpio)
 8000980:	b510      	push	{r4, lr}
 8000982:	4604      	mov	r4, r0
 8000984:	460b      	mov	r3, r1
    gpio = hgpio;
 8000986:	6021      	str	r1, [r4, #0]
    HAL_GPIO_WritePin(gpio->BLPORT, gpio->BLPIN, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	8a89      	ldrh	r1, [r1, #20]
 800098c:	6918      	ldr	r0, [r3, #16]
 800098e:	f001 f8f7 	bl	8001b80 <HAL_GPIO_WritePin>
    init();
 8000992:	4620      	mov	r0, r4
 8000994:	f7ff ffc2 	bl	800091c <_ZN3LCD4initEv>
}
 8000998:	4620      	mov	r0, r4
 800099a:	bd10      	pop	{r4, pc}

0800099c <_ZN3LCD10refreshScrEv>:
void LCD::refreshScr()
{
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	4605      	mov	r5, r0
    goXY(LCD_SETXADDR, LCD_SETYADDR);
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	f7ff ff78 	bl	8000898 <_ZN3LCD4goXYEhh>
    for (int i = 0; i < 6; i++)
 80009a8:	2600      	movs	r6, #0
 80009aa:	e000      	b.n	80009ae <_ZN3LCD10refreshScrEv+0x12>
 80009ac:	3601      	adds	r6, #1
 80009ae:	2e05      	cmp	r6, #5
 80009b0:	dc0d      	bgt.n	80009ce <_ZN3LCD10refreshScrEv+0x32>
    {
        for (int j = 0; j < LCD_WIDTH; j++)
 80009b2:	2400      	movs	r4, #0
 80009b4:	2c53      	cmp	r4, #83	; 0x53
 80009b6:	dcf9      	bgt.n	80009ac <_ZN3LCD10refreshScrEv+0x10>
        {
            write(display.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 80009b8:	2354      	movs	r3, #84	; 0x54
 80009ba:	fb03 4306 	mla	r3, r3, r6, r4
 80009be:	442b      	add	r3, r5
 80009c0:	2201      	movs	r2, #1
 80009c2:	7919      	ldrb	r1, [r3, #4]
 80009c4:	4628      	mov	r0, r5
 80009c6:	f7ff ff25 	bl	8000814 <_ZN3LCD5writeEhh>
        for (int j = 0; j < LCD_WIDTH; j++)
 80009ca:	3401      	adds	r4, #1
 80009cc:	e7f2      	b.n	80009b4 <_ZN3LCD10refreshScrEv+0x18>
        }
    }
};
 80009ce:	bd70      	pop	{r4, r5, r6, pc}

080009d0 <_ZN3LCD9drawHLineEiii>:

void LCD::drawHLine(int x, int y, int l)
{
    int by, bi;

    if ((x >= 0) && (x < LCD_WIDTH) && (y >= 0) && (y < LCD_HEIGHT))
 80009d0:	2953      	cmp	r1, #83	; 0x53
 80009d2:	d823      	bhi.n	8000a1c <_ZN3LCD9drawHLineEiii+0x4c>
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	db21      	blt.n	8000a1c <_ZN3LCD9drawHLineEiii+0x4c>
 80009d8:	2a2f      	cmp	r2, #47	; 0x2f
 80009da:	dc1f      	bgt.n	8000a1c <_ZN3LCD9drawHLineEiii+0x4c>
{
 80009dc:	b4f0      	push	{r4, r5, r6, r7}
    {
        for (int cx = 0; cx < l; cx++)
 80009de:	2500      	movs	r5, #0
 80009e0:	e013      	b.n	8000a0a <_ZN3LCD9drawHLineEiii+0x3a>
        {
            by = ((y / 8) * 84) + x;
 80009e2:	10e4      	asrs	r4, r4, #3
 80009e4:	2654      	movs	r6, #84	; 0x54
 80009e6:	fb06 1404 	mla	r4, r6, r4, r1
            bi = y % 8;
 80009ea:	4256      	negs	r6, r2
 80009ec:	f002 0707 	and.w	r7, r2, #7
 80009f0:	f006 0607 	and.w	r6, r6, #7
 80009f4:	bf58      	it	pl
 80009f6:	4277      	negpl	r7, r6
            display.buffer[by + cx] |= (1 << bi);
 80009f8:	442c      	add	r4, r5
 80009fa:	2601      	movs	r6, #1
 80009fc:	fa06 f707 	lsl.w	r7, r6, r7
 8000a00:	4404      	add	r4, r0
 8000a02:	7926      	ldrb	r6, [r4, #4]
 8000a04:	433e      	orrs	r6, r7
 8000a06:	7126      	strb	r6, [r4, #4]
        for (int cx = 0; cx < l; cx++)
 8000a08:	3501      	adds	r5, #1
 8000a0a:	429d      	cmp	r5, r3
 8000a0c:	da04      	bge.n	8000a18 <_ZN3LCD9drawHLineEiii+0x48>
            by = ((y / 8) * 84) + x;
 8000a0e:	4614      	mov	r4, r2
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	dae6      	bge.n	80009e2 <_ZN3LCD9drawHLineEiii+0x12>
 8000a14:	1dd4      	adds	r4, r2, #7
 8000a16:	e7e4      	b.n	80009e2 <_ZN3LCD9drawHLineEiii+0x12>
        }
    }
};
 8000a18:	bcf0      	pop	{r4, r5, r6, r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	4770      	bx	lr
	...

08000a20 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a20:	2801      	cmp	r0, #1
 8000a22:	d000      	beq.n	8000a26 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8000a24:	4770      	bx	lr
 8000a26:	b508      	push	{r3, lr}
 8000a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d000      	beq.n	8000a32 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8000a30:	bd08      	pop	{r3, pc}
Synth *synth = Synth::getInstance();
 8000a32:	f002 fcbf 	bl	80033b4 <_ZN5Synth11getInstanceEv>
 8000a36:	4b01      	ldr	r3, [pc, #4]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 8000a38:	6018      	str	r0, [r3, #0]
 8000a3a:	e7f9      	b.n	8000a30 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8000a3c:	200010ac 	.word	0x200010ac

08000a40 <maincpp>:
{
 8000a40:	b500      	push	{lr}
 8000a42:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8000a46:	4605      	mov	r5, r0
  LCD lcd(lcdGpio);
 8000a48:	4611      	mov	r1, r2
 8000a4a:	a805      	add	r0, sp, #20
 8000a4c:	f7ff ff98 	bl	8000980 <_ZN3LCDC1EP8LCD_GPIO>
  MenuSystem m(&lcd);
 8000a50:	ae04      	add	r6, sp, #16
 8000a52:	a905      	add	r1, sp, #20
 8000a54:	4630      	mov	r0, r6
 8000a56:	f000 f888 	bl	8000b6a <_ZN10MenuSystemC1EP3LCD>
  menu = &m;
 8000a5a:	4c05      	ldr	r4, [pc, #20]	; (8000a70 <maincpp+0x30>)
 8000a5c:	6026      	str	r6, [r4, #0]
  AudioCodec audio(comms->i2c, comms->i2s);
 8000a5e:	686a      	ldr	r2, [r5, #4]
 8000a60:	6829      	ldr	r1, [r5, #0]
 8000a62:	4668      	mov	r0, sp
 8000a64:	f7ff feaa 	bl	80007bc <_ZN10AudioCodecC1EP17I2C_HandleTypeDefP19__I2S_HandleTypeDef>
  menu->MainMenu();
 8000a68:	6820      	ldr	r0, [r4, #0]
 8000a6a:	f000 f881 	bl	8000b70 <_ZN10MenuSystem8MainMenuEv>
 8000a6e:	e7fe      	b.n	8000a6e <maincpp+0x2e>
 8000a70:	200010a4 	.word	0x200010a4

08000a74 <HAL_I2S_TxCpltCallback>:
{
 8000a74:	b508      	push	{r3, lr}
  if (hi2s->Instance == SPI2)
 8000a76:	6802      	ldr	r2, [r0, #0]
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_I2S_TxCpltCallback+0x1c>)
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d000      	beq.n	8000a80 <HAL_I2S_TxCpltCallback+0xc>
}
 8000a7e:	bd08      	pop	{r3, pc}
    synth->make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
 8000a80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a84:	4903      	ldr	r1, [pc, #12]	; (8000a94 <HAL_I2S_TxCpltCallback+0x20>)
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <HAL_I2S_TxCpltCallback+0x24>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	f002 fca7 	bl	80033dc <_ZN5Synth10make_soundEPtt>
}
 8000a8e:	e7f6      	b.n	8000a7e <HAL_I2S_TxCpltCallback+0xa>
 8000a90:	40003800 	.word	0x40003800
 8000a94:	200008d4 	.word	0x200008d4
 8000a98:	200010ac 	.word	0x200010ac

08000a9c <HAL_I2S_TxHalfCpltCallback>:
{
 8000a9c:	b508      	push	{r3, lr}
  if (hi2s->Instance == SPI2)
 8000a9e:	6802      	ldr	r2, [r0, #0]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d000      	beq.n	8000aa8 <HAL_I2S_TxHalfCpltCallback+0xc>
}
 8000aa6:	bd08      	pop	{r3, pc}
    synth->make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
 8000aa8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000aac:	4903      	ldr	r1, [pc, #12]	; (8000abc <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	f002 fc93 	bl	80033dc <_ZN5Synth10make_soundEPtt>
}
 8000ab6:	e7f6      	b.n	8000aa6 <HAL_I2S_TxHalfCpltCallback+0xa>
 8000ab8:	40003800 	.word	0x40003800
 8000abc:	20000104 	.word	0x20000104
 8000ac0:	200010ac 	.word	0x200010ac

08000ac4 <EXTI15_10_IRQHandler>:
{
 8000ac4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <EXTI15_10_IRQHandler+0x84>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000ace:	d008      	beq.n	8000ae2 <EXTI15_10_IRQHandler+0x1e>
    if (sw1bon)
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <EXTI15_10_IRQHandler+0x88>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b353      	cbz	r3, 8000b2c <EXTI15_10_IRQHandler+0x68>
      sw1dir = true;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <EXTI15_10_IRQHandler+0x8c>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
      sw1bon = false;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <EXTI15_10_IRQHandler+0x88>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <EXTI15_10_IRQHandler+0x84>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000aea:	d00d      	beq.n	8000b08 <EXTI15_10_IRQHandler+0x44>
    if (sw1aon)
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <EXTI15_10_IRQHandler+0x90>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b303      	cbz	r3, 8000b34 <EXTI15_10_IRQHandler+0x70>
      sw1dir = false;
 8000af2:	2300      	movs	r3, #0
 8000af4:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <EXTI15_10_IRQHandler+0x8c>)
 8000af6:	7013      	strb	r3, [r2, #0]
      sw1aon = false;
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <EXTI15_10_IRQHandler+0x90>)
 8000afa:	7013      	strb	r3, [r2, #0]
    menu->TriggerEncoder(sw1dir);
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <EXTI15_10_IRQHandler+0x8c>)
 8000afe:	7819      	ldrb	r1, [r3, #0]
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <EXTI15_10_IRQHandler+0x94>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	f000 f91e 	bl	8000d44 <_ZN10MenuSystem14TriggerEncoderEb>
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <EXTI15_10_IRQHandler+0x84>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000b10:	d114      	bne.n	8000b3c <EXTI15_10_IRQHandler+0x78>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b12:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b16:	f001 f839 	bl	8001b8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000b1a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b1e:	f001 f835 	bl	8001b8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000b22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b26:	f001 f831 	bl	8001b8c <HAL_GPIO_EXTI_IRQHandler>
 8000b2a:	bd08      	pop	{r3, pc}
      sw1aon = true;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <EXTI15_10_IRQHandler+0x90>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e7d6      	b.n	8000ae2 <EXTI15_10_IRQHandler+0x1e>
      sw1bon = true;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <EXTI15_10_IRQHandler+0x88>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e7df      	b.n	8000afc <EXTI15_10_IRQHandler+0x38>
    menu->TriggerPushEncoder();
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <EXTI15_10_IRQHandler+0x94>)
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	f000 f922 	bl	8000d88 <_ZN10MenuSystem18TriggerPushEncoderEv>
 8000b44:	e7e5      	b.n	8000b12 <EXTI15_10_IRQHandler+0x4e>
 8000b46:	bf00      	nop
 8000b48:	40013c00 	.word	0x40013c00
 8000b4c:	200010a9 	.word	0x200010a9
 8000b50:	200010aa 	.word	0x200010aa
 8000b54:	200010a8 	.word	0x200010a8
 8000b58:	200010a4 	.word	0x200010a4

08000b5c <_GLOBAL__sub_I_audiobuff>:
 8000b5c:	b508      	push	{r3, lr}
 8000b5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff ff5c 	bl	8000a20 <_Z41__static_initialization_and_destruction_0ii>
 8000b68:	bd08      	pop	{r3, pc}

08000b6a <_ZN10MenuSystemC1EP3LCD>:

extern uint8_t WM8978_SPK_Volume;

MenuSystem::MenuSystem(LCD *hlcd)
{
    lcd = hlcd;
 8000b6a:	6001      	str	r1, [r0, #0]
}
 8000b6c:	4770      	bx	lr
	...

08000b70 <_ZN10MenuSystem8MainMenuEv>:
/**
  * @brief Main Menu
  */
void MenuSystem::MainMenu()
{
 8000b70:	b510      	push	{r4, lr}
 8000b72:	4604      	mov	r4, r0
    if (submenu)
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <_ZN10MenuSystem8MainMenuEv+0x11c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b1b3      	cbz	r3, 8000ba8 <_ZN10MenuSystem8MainMenuEv+0x38>
    {
        switch (activeItem)
 8000b7a:	4b45      	ldr	r3, [pc, #276]	; (8000c90 <_ZN10MenuSystem8MainMenuEv+0x120>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	b103      	cbz	r3, 8000b82 <_ZN10MenuSystem8MainMenuEv+0x12>
    }
    else
    {
        lcd->print("<  >     MIXER", 0, 5);
    }
}
 8000b80:	bd10      	pop	{r4, pc}
            lcd->clrScr();
 8000b82:	6800      	ldr	r0, [r0, #0]
 8000b84:	f7ff fe77 	bl	8000876 <_ZN3LCD6clrScrEv>
            lcd->print("SINE", 0, 0);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4941      	ldr	r1, [pc, #260]	; (8000c94 <_ZN10MenuSystem8MainMenuEv+0x124>)
 8000b8e:	6820      	ldr	r0, [r4, #0]
 8000b90:	f7ff feb4 	bl	80008fc <_ZN3LCD5printEPchh>
            lcd->print("SINE2", 0, 1);
 8000b94:	2301      	movs	r3, #1
 8000b96:	2200      	movs	r2, #0
 8000b98:	493f      	ldr	r1, [pc, #252]	; (8000c98 <_ZN10MenuSystem8MainMenuEv+0x128>)
 8000b9a:	6820      	ldr	r0, [r4, #0]
 8000b9c:	f7ff feae 	bl	80008fc <_ZN3LCD5printEPchh>
            lcd->refreshScr();
 8000ba0:	6820      	ldr	r0, [r4, #0]
 8000ba2:	f7ff fefb 	bl	800099c <_ZN3LCD10refreshScrEv>
            break;
 8000ba6:	e7eb      	b.n	8000b80 <_ZN10MenuSystem8MainMenuEv+0x10>
    lcd->drawHLine(0, 8, 83);
 8000ba8:	2353      	movs	r3, #83	; 0x53
 8000baa:	2208      	movs	r2, #8
 8000bac:	2100      	movs	r1, #0
 8000bae:	6800      	ldr	r0, [r0, #0]
 8000bb0:	f7ff ff0e 	bl	80009d0 <_ZN3LCD9drawHLineEiii>
    lcd->refreshScr();
 8000bb4:	6820      	ldr	r0, [r4, #0]
 8000bb6:	f7ff fef1 	bl	800099c <_ZN3LCD10refreshScrEv>
    if (activeItem == 0)
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <_ZN10MenuSystem8MainMenuEv+0x120>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d132      	bne.n	8000c28 <_ZN10MenuSystem8MainMenuEv+0xb8>
        lcd->invertText(true);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	f7ff fe01 	bl	80007cc <_ZN3LCD10invertTextEb>
        lcd->print("SINE", 0, 0);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4931      	ldr	r1, [pc, #196]	; (8000c94 <_ZN10MenuSystem8MainMenuEv+0x124>)
 8000bd0:	6820      	ldr	r0, [r4, #0]
 8000bd2:	f7ff fe93 	bl	80008fc <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	6820      	ldr	r0, [r4, #0]
 8000bda:	f7ff fdf7 	bl	80007cc <_ZN3LCD10invertTextEb>
    lcd->print("Freq       440", 0, 1);
 8000bde:	2301      	movs	r3, #1
 8000be0:	2200      	movs	r2, #0
 8000be2:	492e      	ldr	r1, [pc, #184]	; (8000c9c <_ZN10MenuSystem8MainMenuEv+0x12c>)
 8000be4:	6820      	ldr	r0, [r4, #0]
 8000be6:	f7ff fe89 	bl	80008fc <_ZN3LCD5printEPchh>
    lcd->print("Mod        100", 0, 2);
 8000bea:	2302      	movs	r3, #2
 8000bec:	2200      	movs	r2, #0
 8000bee:	492c      	ldr	r1, [pc, #176]	; (8000ca0 <_ZN10MenuSystem8MainMenuEv+0x130>)
 8000bf0:	6820      	ldr	r0, [r4, #0]
 8000bf2:	f7ff fe83 	bl	80008fc <_ZN3LCD5printEPchh>
    lcd->print("Rate      1200", 0, 3);
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	492a      	ldr	r1, [pc, #168]	; (8000ca4 <_ZN10MenuSystem8MainMenuEv+0x134>)
 8000bfc:	6820      	ldr	r0, [r4, #0]
 8000bfe:	f7ff fe7d 	bl	80008fc <_ZN3LCD5printEPchh>
    lcd->print("- - - -       ", 0, 4);
 8000c02:	2304      	movs	r3, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	4928      	ldr	r1, [pc, #160]	; (8000ca8 <_ZN10MenuSystem8MainMenuEv+0x138>)
 8000c08:	6820      	ldr	r0, [r4, #0]
 8000c0a:	f7ff fe77 	bl	80008fc <_ZN3LCD5printEPchh>
    if (activeItem == 1)
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <_ZN10MenuSystem8MainMenuEv+0x120>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d00f      	beq.n	8000c36 <_ZN10MenuSystem8MainMenuEv+0xc6>
    else if (activeItem == 2)
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d022      	beq.n	8000c60 <_ZN10MenuSystem8MainMenuEv+0xf0>
        lcd->print("<  >     MIXER", 0, 5);
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4923      	ldr	r1, [pc, #140]	; (8000cac <_ZN10MenuSystem8MainMenuEv+0x13c>)
 8000c20:	6820      	ldr	r0, [r4, #0]
 8000c22:	f7ff fe6b 	bl	80008fc <_ZN3LCD5printEPchh>
 8000c26:	e7ab      	b.n	8000b80 <_ZN10MenuSystem8MainMenuEv+0x10>
        lcd->print("SINE", 0, 0);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4919      	ldr	r1, [pc, #100]	; (8000c94 <_ZN10MenuSystem8MainMenuEv+0x124>)
 8000c2e:	6820      	ldr	r0, [r4, #0]
 8000c30:	f7ff fe64 	bl	80008fc <_ZN3LCD5printEPchh>
 8000c34:	e7d3      	b.n	8000bde <_ZN10MenuSystem8MainMenuEv+0x6e>
        lcd->print("         MIXER", 0, 5);
 8000c36:	2305      	movs	r3, #5
 8000c38:	2200      	movs	r2, #0
 8000c3a:	491d      	ldr	r1, [pc, #116]	; (8000cb0 <_ZN10MenuSystem8MainMenuEv+0x140>)
 8000c3c:	6820      	ldr	r0, [r4, #0]
 8000c3e:	f7ff fe5d 	bl	80008fc <_ZN3LCD5printEPchh>
        lcd->invertText(true);
 8000c42:	2101      	movs	r1, #1
 8000c44:	6820      	ldr	r0, [r4, #0]
 8000c46:	f7ff fdc1 	bl	80007cc <_ZN3LCD10invertTextEb>
        lcd->print("<  >", 0, 5);
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4919      	ldr	r1, [pc, #100]	; (8000cb4 <_ZN10MenuSystem8MainMenuEv+0x144>)
 8000c50:	6820      	ldr	r0, [r4, #0]
 8000c52:	f7ff fe53 	bl	80008fc <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 8000c56:	2100      	movs	r1, #0
 8000c58:	6820      	ldr	r0, [r4, #0]
 8000c5a:	f7ff fdb7 	bl	80007cc <_ZN3LCD10invertTextEb>
 8000c5e:	e78f      	b.n	8000b80 <_ZN10MenuSystem8MainMenuEv+0x10>
        lcd->print("<  >", 0, 5);
 8000c60:	2305      	movs	r3, #5
 8000c62:	2200      	movs	r2, #0
 8000c64:	4913      	ldr	r1, [pc, #76]	; (8000cb4 <_ZN10MenuSystem8MainMenuEv+0x144>)
 8000c66:	6820      	ldr	r0, [r4, #0]
 8000c68:	f7ff fe48 	bl	80008fc <_ZN3LCD5printEPchh>
        lcd->invertText(true);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f7ff fdac 	bl	80007cc <_ZN3LCD10invertTextEb>
        lcd->print("MIXER", 54, 5);
 8000c74:	2305      	movs	r3, #5
 8000c76:	2236      	movs	r2, #54	; 0x36
 8000c78:	490f      	ldr	r1, [pc, #60]	; (8000cb8 <_ZN10MenuSystem8MainMenuEv+0x148>)
 8000c7a:	6820      	ldr	r0, [r4, #0]
 8000c7c:	f7ff fe3e 	bl	80008fc <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 8000c80:	2100      	movs	r1, #0
 8000c82:	6820      	ldr	r0, [r4, #0]
 8000c84:	f7ff fda2 	bl	80007cc <_ZN3LCD10invertTextEb>
 8000c88:	e77a      	b.n	8000b80 <_ZN10MenuSystem8MainMenuEv+0x10>
 8000c8a:	bf00      	nop
 8000c8c:	200010b8 	.word	0x200010b8
 8000c90:	200010b0 	.word	0x200010b0
 8000c94:	080046b0 	.word	0x080046b0
 8000c98:	080046b8 	.word	0x080046b8
 8000c9c:	080046c0 	.word	0x080046c0
 8000ca0:	080046d0 	.word	0x080046d0
 8000ca4:	080046e0 	.word	0x080046e0
 8000ca8:	080046f0 	.word	0x080046f0
 8000cac:	08004720 	.word	0x08004720
 8000cb0:	08004700 	.word	0x08004700
 8000cb4:	08004710 	.word	0x08004710
 8000cb8:	08004718 	.word	0x08004718

08000cbc <_ZN10MenuSystem9MixerMenuEv>:

/**
  * @brief Main Menu
  */
void MenuSystem::MixerMenu()
{
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	4604      	mov	r4, r0
    // char spk[4];

    // sprintf(spk, "%d", WM8978_SPK_Volume);
    // spk[4] = '\0';

    lcd->drawHLine(0, 8, 83);
 8000cc0:	2353      	movs	r3, #83	; 0x53
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	6800      	ldr	r0, [r0, #0]
 8000cc8:	f7ff fe82 	bl	80009d0 <_ZN3LCD9drawHLineEiii>
    lcd->refreshScr();
 8000ccc:	6820      	ldr	r0, [r4, #0]
 8000cce:	f7ff fe65 	bl	800099c <_ZN3LCD10refreshScrEv>
    lcd->print("MIXER        X", 0, 0);
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <_ZN10MenuSystem9MixerMenuEv+0x54>)
 8000cd8:	6820      	ldr	r0, [r4, #0]
 8000cda:	f7ff fe0f 	bl	80008fc <_ZN3LCD5printEPchh>
    //  lcd->goXY(0,20);
    // lcd->print(spk, 0, 1);
    lcd->print("Headphones 100", 0, 2);
 8000cde:	2302      	movs	r3, #2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	490c      	ldr	r1, [pc, #48]	; (8000d14 <_ZN10MenuSystem9MixerMenuEv+0x58>)
 8000ce4:	6820      	ldr	r0, [r4, #0]
 8000ce6:	f7ff fe09 	bl	80008fc <_ZN3LCD5printEPchh>
    lcd->print("LineIn      --", 0, 3);
 8000cea:	2303      	movs	r3, #3
 8000cec:	2200      	movs	r2, #0
 8000cee:	490a      	ldr	r1, [pc, #40]	; (8000d18 <_ZN10MenuSystem9MixerMenuEv+0x5c>)
 8000cf0:	6820      	ldr	r0, [r4, #0]
 8000cf2:	f7ff fe03 	bl	80008fc <_ZN3LCD5printEPchh>
    lcd->print("Microphone  --", 0, 4);
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <_ZN10MenuSystem9MixerMenuEv+0x60>)
 8000cfc:	6820      	ldr	r0, [r4, #0]
 8000cfe:	f7ff fdfd 	bl	80008fc <_ZN3LCD5printEPchh>
    lcd->print("<  >     MIXER", 0, 5);
 8000d02:	2305      	movs	r3, #5
 8000d04:	2200      	movs	r2, #0
 8000d06:	4906      	ldr	r1, [pc, #24]	; (8000d20 <_ZN10MenuSystem9MixerMenuEv+0x64>)
 8000d08:	6820      	ldr	r0, [r4, #0]
 8000d0a:	f7ff fdf7 	bl	80008fc <_ZN3LCD5printEPchh>
}
 8000d0e:	bd10      	pop	{r4, pc}
 8000d10:	08004730 	.word	0x08004730
 8000d14:	08004740 	.word	0x08004740
 8000d18:	08004750 	.word	0x08004750
 8000d1c:	08004760 	.word	0x08004760
 8000d20:	08004720 	.word	0x08004720

08000d24 <_ZN10MenuSystem10MenuSelectEv>:
{
 8000d24:	b508      	push	{r3, lr}
    switch (currentMenu)
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <_ZN10MenuSystem10MenuSelectEv+0x1c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	b113      	cbz	r3, 8000d32 <_ZN10MenuSystem10MenuSelectEv+0xe>
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d003      	beq.n	8000d38 <_ZN10MenuSystem10MenuSelectEv+0x14>
}
 8000d30:	bd08      	pop	{r3, pc}
        MainMenu();
 8000d32:	f7ff ff1d 	bl	8000b70 <_ZN10MenuSystem8MainMenuEv>
        break;
 8000d36:	e7fb      	b.n	8000d30 <_ZN10MenuSystem10MenuSelectEv+0xc>
        MixerMenu();
 8000d38:	f7ff ffc0 	bl	8000cbc <_ZN10MenuSystem9MixerMenuEv>
}
 8000d3c:	e7f8      	b.n	8000d30 <_ZN10MenuSystem10MenuSelectEv+0xc>
 8000d3e:	bf00      	nop
 8000d40:	200010b4 	.word	0x200010b4

08000d44 <_ZN10MenuSystem14TriggerEncoderEb>:

/**
  * @brief Go to next/prev menu page.
  */
void MenuSystem::TriggerEncoder(bool direction)
{
 8000d44:	b508      	push	{r3, lr}

    if (direction)
 8000d46:	b161      	cbz	r1, 8000d62 <_ZN10MenuSystem14TriggerEncoderEb+0x1e>
    {
        activeItem++;
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <_ZN10MenuSystem14TriggerEncoderEb+0x3c>)
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]
        if (activeItem > activeItemCount - 1)
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <_ZN10MenuSystem14TriggerEncoderEb+0x40>)
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	3a01      	subs	r2, #1
 8000d56:	4293      	cmp	r3, r2
 8000d58:	dd09      	ble.n	8000d6e <_ZN10MenuSystem14TriggerEncoderEb+0x2a>
        {
            activeItem = 0;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <_ZN10MenuSystem14TriggerEncoderEb+0x3c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e005      	b.n	8000d6e <_ZN10MenuSystem14TriggerEncoderEb+0x2a>
        }
    }
    else
    {
        activeItem--;
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <_ZN10MenuSystem14TriggerEncoderEb+0x3c>)
 8000d64:	6813      	ldr	r3, [r2, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6013      	str	r3, [r2, #0]
        if (activeItem < 0)
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db02      	blt.n	8000d74 <_ZN10MenuSystem14TriggerEncoderEb+0x30>
        {
            activeItem = activeItemCount - 1;
        }
    }

    MenuSelect();
 8000d6e:	f7ff ffd9 	bl	8000d24 <_ZN10MenuSystem10MenuSelectEv>
}
 8000d72:	bd08      	pop	{r3, pc}
            activeItem = activeItemCount - 1;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <_ZN10MenuSystem14TriggerEncoderEb+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	e7f7      	b.n	8000d6e <_ZN10MenuSystem14TriggerEncoderEb+0x2a>
 8000d7e:	bf00      	nop
 8000d80:	200010b0 	.word	0x200010b0
 8000d84:	20000074 	.word	0x20000074

08000d88 <_ZN10MenuSystem18TriggerPushEncoderEv>:

void MenuSystem::TriggerPushEncoder()
{
 8000d88:	b508      	push	{r3, lr}
    submenu = !submenu;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <_ZN10MenuSystem18TriggerPushEncoderEv+0x14>)
 8000d8c:	7813      	ldrb	r3, [r2, #0]
 8000d8e:	f083 0301 	eor.w	r3, r3, #1
 8000d92:	7013      	strb	r3, [r2, #0]
    MenuSelect();
 8000d94:	f7ff ffc6 	bl	8000d24 <_ZN10MenuSystem10MenuSelectEv>
}
 8000d98:	bd08      	pop	{r3, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200010b8 	.word	0x200010b8

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	2410      	movs	r4, #16
{
 8000da4:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	4622      	mov	r2, r4
 8000da8:	2100      	movs	r1, #0
 8000daa:	a80e      	add	r0, sp, #56	; 0x38
 8000dac:	f003 f910 	bl	8003fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	2214      	movs	r2, #20
 8000db2:	2100      	movs	r1, #0
 8000db4:	a807      	add	r0, sp, #28
 8000db6:	f003 f90b 	bl	8003fd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dba:	4622      	mov	r2, r4
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	a803      	add	r0, sp, #12
 8000dc0:	f003 f906 	bl	8003fd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <SystemClock_Config+0xac>)
 8000dc8:	9401      	str	r4, [sp, #4]
 8000dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <SystemClock_Config+0xb0>)
 8000dde:	9402      	str	r4, [sp, #8]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df2:	2601      	movs	r6, #1
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df8:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfa:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e02:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e04:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e0c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e12:	2307      	movs	r3, #7
 8000e14:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e16:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f001 fbd8 	bl	80025cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e1c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e2e:	a807      	add	r0, sp, #28
 8000e30:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e34:	f001 fd9e 	bl	8002974 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 144;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	2090      	movs	r0, #144	; 0x90
 8000e3c:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e42:	9603      	str	r6, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e44:	f001 fe50 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000e48:	b018      	add	sp, #96	; 0x60
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <main>:
{
 8000e54:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000e58:	b097      	sub	sp, #92	; 0x5c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2400      	movs	r4, #0
 8000e5c:	4e9a      	ldr	r6, [pc, #616]	; (80010c8 <main+0x274>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8000e5e:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8001100 <main+0x2ac>
  hi2c2.Instance = I2C2;
 8000e62:	4f9a      	ldr	r7, [pc, #616]	; (80010cc <main+0x278>)
  huart1.Instance = USART1;
 8000e64:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8001104 <main+0x2b0>
  HAL_Init();
 8000e68:	f000 fb88 	bl	800157c <HAL_Init>
  SystemClock_Config();
 8000e6c:	f7ff ff98 	bl	8000da0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	2214      	movs	r2, #20
 8000e72:	2100      	movs	r1, #0
 8000e74:	a80d      	add	r0, sp, #52	; 0x34
 8000e76:	f003 f8ab 	bl	8003fd0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	9405      	str	r4, [sp, #20]
 8000e7c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6333      	str	r3, [r6, #48]	; 0x30
 8000e84:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	9305      	str	r3, [sp, #20]
 8000e8c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	9406      	str	r4, [sp, #24]
 8000e90:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	6333      	str	r3, [r6, #48]	; 0x30
 8000e98:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9e:	9306      	str	r3, [sp, #24]
 8000ea0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	9407      	str	r4, [sp, #28]
 8000ea4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6333      	str	r3, [r6, #48]	; 0x30
 8000eac:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	9307      	str	r3, [sp, #28]
 8000eb4:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	9408      	str	r4, [sp, #32]
 8000eb8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	6333      	str	r3, [r6, #48]	; 0x30
 8000ec0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8000ec8:	4622      	mov	r2, r4
 8000eca:	210c      	movs	r1, #12
 8000ecc:	4658      	mov	r0, fp
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8000ed0:	f000 fe56 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000ed4:	4b7e      	ldr	r3, [pc, #504]	; (80010d0 <main+0x27c>)
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	4622      	mov	r2, r4
 8000edc:	2102      	movs	r1, #2
 8000ede:	f000 fe4f 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, GPIO_PIN_RESET);
 8000ee2:	4622      	mov	r2, r4
 8000ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee8:	487a      	ldr	r0, [pc, #488]	; (80010d4 <main+0x280>)
 8000eea:	f000 fe49 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_A_Pin SW1_B_Pin */
  GPIO_InitStruct.Pin = SW1_A_Pin | SW1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eee:	4a7a      	ldr	r2, [pc, #488]	; (80010d8 <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	4878      	ldr	r0, [pc, #480]	; (80010d4 <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f00:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f000 fd5c 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_BTN_Pin FIRE_BTN_Pin */
  GPIO_InitStruct.Pin = SW1_BTN_Pin | FIRE_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f08:	4a74      	ldr	r2, [pc, #464]	; (80010dc <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	4872      	ldr	r0, [pc, #456]	; (80010d4 <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f10:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f14:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	a90d      	add	r1, sp, #52	; 0x34
 8000f1a:	f000 fd51 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_DC_Pin;
 8000f1e:	250c      	movs	r5, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	a90d      	add	r1, sp, #52	; 0x34
 8000f22:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	e9cd 590d 	strd	r5, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f000 fd48 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000f30:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	e9cd 390d 	strd	r3, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000f36:	9b01      	ldr	r3, [sp, #4]
 8000f38:	a90d      	add	r1, sp, #52	; 0x34
 8000f3a:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f000 fd3e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_LED_Pin */
  GPIO_InitStruct.Pin = FIRE_LED_Pin;
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8000f48:	a90d      	add	r1, sp, #52	; 0x34
 8000f4a:	4862      	ldr	r0, [pc, #392]	; (80010d4 <main+0x280>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	e9cd 290d 	strd	r2, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f000 fd34 	bl	80019c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f58:	4622      	mov	r2, r4
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	2017      	movs	r0, #23
 8000f5e:	f000 fb4b 	bl	80015f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f62:	2017      	movs	r0, #23
 8000f64:	f000 fb7c 	bl	8001660 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f68:	4622      	mov	r2, r4
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	2028      	movs	r0, #40	; 0x28
 8000f6e:	f000 fb43 	bl	80015f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f72:	2028      	movs	r0, #40	; 0x28
 8000f74:	f000 fb74 	bl	8001660 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f78:	9404      	str	r4, [sp, #16]
 8000f7a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8000f7c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000f80:	6332      	str	r2, [r6, #48]	; 0x30
 8000f82:	6b32      	ldr	r2, [r6, #48]	; 0x30
  hi2s2.Instance = SPI2;
 8000f84:	4e56      	ldr	r6, [pc, #344]	; (80010e0 <main+0x28c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000f8a:	9204      	str	r2, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f8c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8e:	9a04      	ldr	r2, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f90:	200f      	movs	r0, #15
 8000f92:	4622      	mov	r2, r4
 8000f94:	f000 fb30 	bl	80015f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f000 fb61 	bl	8001660 <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 100000;
 8000f9e:	4851      	ldr	r0, [pc, #324]	; (80010e4 <main+0x290>)
 8000fa0:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <main+0x294>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa2:	623c      	str	r4, [r7, #32]
  hi2c2.Init.ClockSpeed = 100000;
 8000fa4:	e9c7 0200 	strd	r0, r2, [r7]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fac:	4638      	mov	r0, r7
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fae:	e9c7 2404 	strd	r2, r4, [r7, #16]
  hi2c2.Init.OwnAddress1 = 0;
 8000fb2:	e9c7 4402 	strd	r4, r4, [r7, #8]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb6:	e9c7 4406 	strd	r4, r4, [r7, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fba:	f000 fec5 	bl	8001d48 <HAL_I2C_Init>
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <main+0x298>)
 8000fc0:	f44f 7a00 	mov.w	sl, #512	; 0x200
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000fc4:	f64b 3180 	movw	r1, #48000	; 0xbb80
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000fc8:	4630      	mov	r0, r6
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000fca:	e9c6 2a00 	strd	r2, sl, [r6]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fce:	f8c6 a010 	str.w	sl, [r6, #16]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000fd2:	e9c6 1405 	strd	r1, r4, [r6, #20]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fd6:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000fda:	e9c6 4907 	strd	r4, r9, [r6, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000fde:	f001 f833 	bl	8002048 <HAL_I2S_Init>
  huart1.Init.BaudRate = 115200;
 8000fe2:	f8df c124 	ldr.w	ip, [pc, #292]	; 8001108 <main+0x2b4>
 8000fe6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fea:	4640      	mov	r0, r8
  huart1.Init.BaudRate = 115200;
 8000fec:	e9c8 c100 	strd	ip, r1, [r8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	e9c8 4504 	strd	r4, r5, [r8, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	e9c8 4402 	strd	r4, r4, [r8, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	e9c8 4406 	strd	r4, r4, [r8, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ffc:	f002 f926 	bl	800324c <HAL_UART_Init>
  hrng.Instance = RNG;
 8001000:	483b      	ldr	r0, [pc, #236]	; (80010f0 <main+0x29c>)
 8001002:	493c      	ldr	r1, [pc, #240]	; (80010f4 <main+0x2a0>)
  hspi3.Instance = SPI3;
 8001004:	4d3c      	ldr	r5, [pc, #240]	; (80010f8 <main+0x2a4>)
  hrng.Instance = RNG;
 8001006:	6001      	str	r1, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001008:	f001 fe34 	bl	8002c74 <HAL_RNG_Init>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800100c:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 800110c <main+0x2b8>
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001010:	f8c5 a018 	str.w	sl, [r5, #24]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001014:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001018:	e9c5 e100 	strd	lr, r1, [r5]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800101c:	f04f 0a18 	mov.w	sl, #24
  hspi3.Init.CRCPolynomial = 10;
 8001020:	210a      	movs	r1, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001022:	4628      	mov	r0, r5
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001024:	e9c5 a407 	strd	sl, r4, [r5, #28]
  hspi3.Init.CRCPolynomial = 10;
 8001028:	62e9      	str	r1, [r5, #44]	; 0x2c
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800102a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102e:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001032:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001036:	f001 fe9d 	bl	8002d74 <HAL_SPI_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800103a:	4652      	mov	r2, sl
 800103c:	4621      	mov	r1, r4
 800103e:	a810      	add	r0, sp, #64	; 0x40
 8001040:	f002 ffc6 	bl	8003fd0 <memset>
  htim1.Instance = TIM1;
 8001044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001110 <main+0x2bc>
 8001048:	492c      	ldr	r1, [pc, #176]	; (80010fc <main+0x2a8>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	f8ca 4008 	str.w	r4, [sl, #8]
  htim1.Init.Prescaler = 0;
 800104e:	e9ca 1400 	strd	r1, r4, [sl]
  htim1.Init.Period = 65535;
 8001052:	f64f 71ff 	movw	r1, #65535	; 0xffff
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001056:	2302      	movs	r3, #2
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	e9ca 1403 	strd	r1, r4, [sl, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800105c:	2103      	movs	r1, #3
 800105e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001062:	4650      	mov	r0, sl
 8001064:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001066:	e9cd 3912 	strd	r3, r9, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	e9ca 4405 	strd	r4, r4, [sl, #20]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001072:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001076:	f001 ffeb 	bl	8003050 <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800107a:	a909      	add	r1, sp, #36	; 0x24
 800107c:	4650      	mov	r0, sl
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001082:	f002 f831 	bl	80030e8 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001086:	213c      	movs	r1, #60	; 0x3c
 8001088:	4650      	mov	r0, sl
 800108a:	f001 ff58 	bl	8002f3e <HAL_TIM_Encoder_Start>
  lcd.CEPIN = LCD_CS_Pin;
 800108e:	2204      	movs	r2, #4
  lcd.BLPORT = LCD_BL_GPIO_Port;
 8001090:	9b01      	ldr	r3, [sp, #4]
  lcd.CEPIN = LCD_CS_Pin;
 8001092:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  lcd.DCPIN = LCD_DC_Pin;
 8001096:	2208      	movs	r2, #8
 8001098:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  lcd.BLPORT = LCD_BL_GPIO_Port;
 800109c:	9311      	str	r3, [sp, #68]	; 0x44
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 800109e:	aa0d      	add	r2, sp, #52	; 0x34
  lcd.BLPIN = LCD_BL_Pin;
 80010a0:	f04f 0302 	mov.w	r3, #2
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 80010a4:	a903      	add	r1, sp, #12
 80010a6:	a809      	add	r0, sp, #36	; 0x24
  comms.i2s = &hi2s2;
 80010a8:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
  comms.uart = &huart1;
 80010ac:	e9cd 580b 	strd	r5, r8, [sp, #44]	; 0x2c
  enc.tim1 = &htim1;
 80010b0:	f8cd a00c 	str.w	sl, [sp, #12]
  lcd.CEPORT = LCD_CS_GPIO_Port;
 80010b4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  lcd.DCPORT = LCD_DC_GPIO_Port;
 80010b8:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  lcd.BLPIN = LCD_BL_Pin;
 80010bc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  lcd.SPICH = &hspi3;
 80010c0:	9513      	str	r5, [sp, #76]	; 0x4c
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 80010c2:	f7ff fcbd 	bl	8000a40 <maincpp>
 80010c6:	e7fe      	b.n	80010c6 <main+0x272>
 80010c8:	40023800 	.word	0x40023800
 80010cc:	200010d4 	.word	0x200010d4
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	10110000 	.word	0x10110000
 80010dc:	10310000 	.word	0x10310000
 80010e0:	20001270 	.word	0x20001270
 80010e4:	40005800 	.word	0x40005800
 80010e8:	000186a0 	.word	0x000186a0
 80010ec:	40003800 	.word	0x40003800
 80010f0:	20001200 	.word	0x20001200
 80010f4:	50060800 	.word	0x50060800
 80010f8:	20001128 	.word	0x20001128
 80010fc:	40010000 	.word	0x40010000
 8001100:	40020000 	.word	0x40020000
 8001104:	20001180 	.word	0x20001180
 8001108:	40011000 	.word	0x40011000
 800110c:	40003c00 	.word	0x40003c00
 8001110:	200011c0 	.word	0x200011c0

08001114 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001114:	4770      	bx	lr
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_MspInit+0x34>)
 800111c:	2100      	movs	r1, #0
 800111e:	9100      	str	r1, [sp, #0]
 8001120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001126:	645a      	str	r2, [r3, #68]	; 0x44
 8001128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800112a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800112e:	9200      	str	r2, [sp, #0]
 8001130:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	9101      	str	r1, [sp, #4]
 8001134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001136:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	b002      	add	sp, #8
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001150:	b530      	push	{r4, r5, lr}
 8001152:	4604      	mov	r4, r0
 8001154:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	2214      	movs	r2, #20
 8001158:	2100      	movs	r1, #0
 800115a:	a803      	add	r0, sp, #12
 800115c:	f002 ff38 	bl	8003fd0 <memset>
  if(hi2c->Instance==I2C2)
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_I2C_MspInit+0x68>)
 8001164:	429a      	cmp	r2, r3
 8001166:	d124      	bne.n	80011b2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4c14      	ldr	r4, [pc, #80]	; (80011bc <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	2500      	movs	r5, #0
 800116e:	9501      	str	r5, [sp, #4]
 8001170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	6323      	str	r3, [r4, #48]	; 0x30
 8001178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001182:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001186:	2312      	movs	r3, #18
 8001188:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2101      	movs	r1, #1
 800118e:	2303      	movs	r3, #3
 8001190:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001194:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001198:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f000 fc11 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800119e:	9502      	str	r5, [sp, #8]
 80011a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a6:	6423      	str	r3, [r4, #64]	; 0x40
 80011a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011b2:	b009      	add	sp, #36	; 0x24
 80011b4:	bd30      	pop	{r4, r5, pc}
 80011b6:	bf00      	nop
 80011b8:	40005800 	.word	0x40005800
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c8:	4606      	mov	r6, r0
 80011ca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	2214      	movs	r2, #20
 80011ce:	2100      	movs	r1, #0
 80011d0:	a803      	add	r0, sp, #12
 80011d2:	f002 fefd 	bl	8003fd0 <memset>
  if(hi2s->Instance==SPI2)
 80011d6:	6832      	ldr	r2, [r6, #0]
 80011d8:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <HAL_I2S_MspInit+0xf0>)
 80011da:	429a      	cmp	r2, r3
 80011dc:	d167      	bne.n	80012ae <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011de:	2500      	movs	r5, #0
 80011e0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011e4:	9500      	str	r5, [sp, #0]
 80011e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	4833      	ldr	r0, [pc, #204]	; (80012b8 <HAL_I2S_MspInit+0xf4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
 80011f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	9501      	str	r5, [sp, #4]
 80011fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011fe:	f042 0202 	orr.w	r2, r2, #2
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
 8001204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001206:	f002 0202 	and.w	r2, r2, #2
 800120a:	9201      	str	r2, [sp, #4]
 800120c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	9502      	str	r5, [sp, #8]
 8001210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001212:	f042 0204 	orr.w	r2, r2, #4
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001224:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001232:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f000 fbc3 	bl	80019c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800123a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001244:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	481c      	ldr	r0, [pc, #112]	; (80012b8 <HAL_I2S_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001248:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124a:	2740      	movs	r7, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f000 fbb6 	bl	80019c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	a903      	add	r1, sp, #12
 8001256:	4819      	ldr	r0, [pc, #100]	; (80012bc <HAL_I2S_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001258:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	e9cd 5505 	strd	r5, r5, [sp, #20]

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001264:	4c16      	ldr	r4, [pc, #88]	; (80012c0 <HAL_I2S_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f000 fbab 	bl	80019c0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_I2S_MspInit+0x100>)
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800126c:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800126e:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800127a:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001282:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001286:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800128a:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800128e:	2304      	movs	r3, #4
 8001290:	e9c4 0308 	strd	r0, r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001294:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001296:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	e9c4 7502 	strd	r7, r5, [r4, #8]
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800129c:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80012a0:	f000 fa18 	bl	80016d4 <HAL_DMA_Init>
 80012a4:	b108      	cbz	r0, 80012aa <HAL_I2S_MspInit+0xe6>
    {
      Error_Handler();
 80012a6:	f7ff ff35 	bl	8001114 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80012aa:	63b4      	str	r4, [r6, #56]	; 0x38
 80012ac:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012ae:	b008      	add	sp, #32
 80012b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b4:	40003800 	.word	0x40003800
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	20001210 	.word	0x20001210
 80012c4:	40026070 	.word	0x40026070

080012c8 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80012c8:	6802      	ldr	r2, [r0, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_RNG_MspInit+0x28>)
 80012cc:	429a      	cmp	r2, r3
{
 80012ce:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 80012d0:	d10b      	bne.n	80012ea <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_RNG_MspInit+0x2c>)
 80012d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012de:	635a      	str	r2, [r3, #52]	; 0x34
 80012e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80012ea:	b002      	add	sp, #8
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	50060800 	.word	0x50060800
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b510      	push	{r4, lr}
 80012fa:	4604      	mov	r4, r0
 80012fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	2214      	movs	r2, #20
 8001300:	2100      	movs	r1, #0
 8001302:	a803      	add	r0, sp, #12
 8001304:	f002 fe64 	bl	8003fd0 <memset>
  if(hspi->Instance==SPI3)
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_SPI_MspInit+0x64>)
 800130c:	429a      	cmp	r2, r3
 800130e:	d123      	bne.n	8001358 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001310:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001314:	2100      	movs	r1, #0
 8001316:	9101      	str	r1, [sp, #4]
 8001318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800131c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
 8001322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001324:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001328:	9201      	str	r2, [sp, #4]
 800132a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132c:	9102      	str	r1, [sp, #8]
 800132e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001330:	f042 0204 	orr.w	r2, r2, #4
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001344:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001346:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800134c:	2306      	movs	r3, #6
 800134e:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	a903      	add	r1, sp, #12
 8001354:	f000 fb34 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001358:	b008      	add	sp, #32
 800135a:	bd10      	pop	{r4, pc}
 800135c:	40003c00 	.word	0x40003c00
 8001360:	40020800 	.word	0x40020800

08001364 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001364:	b510      	push	{r4, lr}
 8001366:	4604      	mov	r4, r0
 8001368:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	2214      	movs	r2, #20
 800136c:	2100      	movs	r1, #0
 800136e:	a803      	add	r0, sp, #12
 8001370:	f002 fe2e 	bl	8003fd0 <memset>
  if(htim_encoder->Instance==TIM1)
 8001374:	6822      	ldr	r2, [r4, #0]
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_TIM_Encoder_MspInit+0x64>)
 8001378:	429a      	cmp	r2, r3
 800137a:	d122      	bne.n	80013c2 <HAL_TIM_Encoder_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800137c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001380:	2100      	movs	r1, #0
 8001382:	9101      	str	r1, [sp, #4]
 8001384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
 800138e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001390:	f002 0201 	and.w	r2, r2, #1
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	9102      	str	r1, [sp, #8]
 800139a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139c:	f042 0201 	orr.w	r2, r2, #1
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013b0:	2302      	movs	r3, #2
 80013b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f000 faff 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013c2:	b008      	add	sp, #32
 80013c4:	bd10      	pop	{r4, pc}
 80013c6:	bf00      	nop
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	2214      	movs	r2, #20
 80013d8:	2100      	movs	r1, #0
 80013da:	a803      	add	r0, sp, #12
 80013dc:	f002 fdf8 	bl	8003fd0 <memset>
  if(huart->Instance==USART1)
 80013e0:	6822      	ldr	r2, [r4, #0]
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_UART_MspInit+0x64>)
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d122      	bne.n	800142e <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80013ec:	2100      	movs	r1, #0
 80013ee:	9101      	str	r1, [sp, #4]
 80013f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f4:	f042 0210 	orr.w	r2, r2, #16
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
 80013fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013fc:	f002 0210 	and.w	r2, r2, #16
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	9102      	str	r1, [sp, #8]
 8001406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001408:	f042 0202 	orr.w	r2, r2, #2
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	22c0      	movs	r2, #192	; 0xc0
 800141a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800141c:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001422:	2307      	movs	r3, #7
 8001424:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	a903      	add	r1, sp, #12
 800142a:	f000 fac9 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800142e:	b008      	add	sp, #32
 8001430:	bd10      	pop	{r4, pc}
 8001432:	bf00      	nop
 8001434:	40011000 	.word	0x40011000
 8001438:	40020400 	.word	0x40020400

0800143c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800143c:	4770      	bx	lr

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	e7fe      	b.n	800143e <HardFault_Handler>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler>

08001446 <SVC_Handler>:
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 b8b0 	b.w	80015b0 <HAL_IncTick>

08001450 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001450:	4801      	ldr	r0, [pc, #4]	; (8001458 <DMA1_Stream4_IRQHandler+0x8>)
 8001452:	f000 b9f7 	b.w	8001844 <HAL_DMA_IRQHandler>
 8001456:	bf00      	nop
 8001458:	20001210 	.word	0x20001210

0800145c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  // TriggerSound();
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800145c:	2080      	movs	r0, #128	; 0x80
 800145e:	f000 bb95 	b.w	8001b8c <HAL_GPIO_EXTI_IRQHandler>

08001462 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001462:	2001      	movs	r0, #1
 8001464:	4770      	bx	lr

08001466 <_kill>:

int _kill(int pid, int sig)
{
 8001466:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001468:	f002 fd80 	bl	8003f6c <__errno>
 800146c:	2316      	movs	r3, #22
 800146e:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001474:	bd08      	pop	{r3, pc}

08001476 <_exit>:

void _exit (int status)
{
 8001476:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001478:	f002 fd78 	bl	8003f6c <__errno>
 800147c:	2316      	movs	r3, #22
 800147e:	6003      	str	r3, [r0, #0]
 8001480:	e7fe      	b.n	8001480 <_exit+0xa>
	...

08001484 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <_sbrk+0x30>)
 8001486:	6819      	ldr	r1, [r3, #0]
{
 8001488:	b510      	push	{r4, lr}
 800148a:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 800148c:	b909      	cbnz	r1, 8001492 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800148e:	490a      	ldr	r1, [pc, #40]	; (80014b8 <_sbrk+0x34>)
 8001490:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	4909      	ldr	r1, [pc, #36]	; (80014bc <_sbrk+0x38>)
 8001496:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <_sbrk+0x3c>)
 8001498:	4402      	add	r2, r0
 800149a:	1b09      	subs	r1, r1, r4
 800149c:	428a      	cmp	r2, r1
 800149e:	d906      	bls.n	80014ae <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80014a0:	f002 fd64 	bl	8003f6c <__errno>
 80014a4:	230c      	movs	r3, #12
 80014a6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80014ac:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80014ae:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80014b0:	e7fc      	b.n	80014ac <_sbrk+0x28>
 80014b2:	bf00      	nop
 80014b4:	200010bc 	.word	0x200010bc
 80014b8:	200012c0 	.word	0x200012c0
 80014bc:	20020000 	.word	0x20020000
 80014c0:	00000400 	.word	0x00000400

080014c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SystemInit+0x18>)
 80014c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014ca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80014ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d6:	609a      	str	r2, [r3, #8]
#endif
}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014e6:	e003      	b.n	80014f0 <LoopCopyDataInit>

080014e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ee:	3104      	adds	r1, #4

080014f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014f0:	480b      	ldr	r0, [pc, #44]	; (8001520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014f8:	d3f6      	bcc.n	80014e8 <CopyDataInit>
  ldr  r2, =_sbss
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014fc:	e002      	b.n	8001504 <LoopFillZerobss>

080014fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001500:	f842 3b04 	str.w	r3, [r2], #4

08001504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001508:	d3f9      	bcc.n	80014fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800150a:	f7ff ffdb 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150e:	f002 fd33 	bl	8003f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff fc9f 	bl	8000e54 <main>
  bx  lr    
 8001516:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001518:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800151c:	08004d20 	.word	0x08004d20
  ldr  r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001524:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 8001528:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 800152c:	200012c0 	.word	0x200012c0

08001530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>
	...

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_InitTick+0x3c>)
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_InitTick+0x40>)
{
 800153a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153c:	7818      	ldrb	r0, [r3, #0]
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	fbb3 f3f0 	udiv	r3, r3, r0
 8001546:	6810      	ldr	r0, [r2, #0]
 8001548:	fbb0 f0f3 	udiv	r0, r0, r3
 800154c:	f000 f896 	bl	800167c <HAL_SYSTICK_Config>
 8001550:	4604      	mov	r4, r0
 8001552:	b958      	cbnz	r0, 800156c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001554:	2d0f      	cmp	r5, #15
 8001556:	d809      	bhi.n	800156c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	4602      	mov	r2, r0
 800155a:	4629      	mov	r1, r5
 800155c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001560:	f000 f84a 	bl	80015f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <HAL_InitTick+0x44>)
 8001566:	4620      	mov	r0, r4
 8001568:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800156a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	e7fc      	b.n	800156a <HAL_InitTick+0x36>
 8001570:	20000078 	.word	0x20000078
 8001574:	2000007c 	.word	0x2000007c
 8001578:	20000080 	.word	0x20000080

0800157c <HAL_Init>:
{
 800157c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_Init+0x30>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001586:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800158e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001596:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f81b 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ffc8 	bl	8001534 <HAL_InitTick>
  HAL_MspInit();
 80015a4:	f7ff fdb8 	bl	8001118 <HAL_MspInit>
}
 80015a8:	2000      	movs	r0, #0
 80015aa:	bd08      	pop	{r3, pc}
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <HAL_IncTick+0x10>)
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <HAL_IncTick+0x14>)
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	440b      	add	r3, r1
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200012b8 	.word	0x200012b8
 80015c4:	2000007c 	.word	0x2000007c

080015c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015c8:	4b01      	ldr	r3, [pc, #4]	; (80015d0 <HAL_GetTick+0x8>)
 80015ca:	6818      	ldr	r0, [r3, #0]
}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200012b8 	.word	0x200012b8

080015d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015dc:	041b      	lsls	r3, r3, #16
 80015de:	0c1b      	lsrs	r3, r3, #16
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	0200      	lsls	r0, r0, #8
 80015e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80015ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80015f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fa:	b570      	push	{r4, r5, r6, lr}
 80015fc:	68dc      	ldr	r4, [r3, #12]
 80015fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001602:	f1c4 0507 	rsb	r5, r4, #7
 8001606:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001608:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	bf28      	it	cs
 800160e:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001614:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001616:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	bf8c      	ite	hi
 800161c:	3c03      	subhi	r4, #3
 800161e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	ea21 0303 	bic.w	r3, r1, r3
 8001624:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001626:	fa06 f404 	lsl.w	r4, r6, r4
 800162a:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800162e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	bfa8      	it	ge
 8001636:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800163a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	bfbc      	itt	lt
 8001640:	f000 000f 	andlt.w	r0, r0, #15
 8001644:	4a05      	ldrlt	r2, [pc, #20]	; (800165c <HAL_NVIC_SetPriority+0x64>)
 8001646:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	bfaa      	itet	ge
 800164a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001654:	bd70      	pop	{r4, r5, r6, pc}
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	e000ed14 	.word	0xe000ed14

08001660 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001660:	2800      	cmp	r0, #0
 8001662:	db08      	blt.n	8001676 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001664:	0942      	lsrs	r2, r0, #5
 8001666:	2301      	movs	r3, #1
 8001668:	f000 001f 	and.w	r0, r0, #31
 800166c:	fa03 f000 	lsl.w	r0, r3, r0
 8001670:	4b01      	ldr	r3, [pc, #4]	; (8001678 <HAL_NVIC_EnableIRQ+0x18>)
 8001672:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100

0800167c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	3801      	subs	r0, #1
 800167e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001682:	d20a      	bcs.n	800169a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001688:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	21f0      	movs	r1, #240	; 0xf0
 800168c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016a8:	6803      	ldr	r3, [r0, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	2118      	movs	r1, #24
 80016b6:	3a10      	subs	r2, #16
 80016b8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80016be:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016c0:	bf88      	it	hi
 80016c2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016c6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80016ca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	08004934 	.word	0x08004934

080016d4 <HAL_DMA_Init>:
{
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ff76 	bl	80015c8 <HAL_GetTick>
 80016dc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80016de:	2c00      	cmp	r4, #0
 80016e0:	d071      	beq.n	80017c6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80016e2:	2300      	movs	r3, #0
 80016e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80016e8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ea:	2302      	movs	r3, #2
 80016ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f8:	6821      	ldr	r1, [r4, #0]
 80016fa:	680b      	ldr	r3, [r1, #0]
 80016fc:	07d8      	lsls	r0, r3, #31
 80016fe:	d43c      	bmi.n	800177a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001700:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001702:	4d32      	ldr	r5, [pc, #200]	; (80017cc <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001704:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001706:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001708:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	68e2      	ldr	r2, [r4, #12]
 8001710:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001712:	6922      	ldr	r2, [r4, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	6962      	ldr	r2, [r4, #20]
 8001718:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171a:	69e2      	ldr	r2, [r4, #28]
 800171c:	4303      	orrs	r3, r0
 800171e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001720:	6a22      	ldr	r2, [r4, #32]
 8001722:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001724:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001726:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001728:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800172c:	bf02      	ittt	eq
 800172e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001732:	4335      	orreq	r5, r6
 8001734:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001736:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001738:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800173c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001740:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001744:	d10b      	bne.n	800175e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001746:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001748:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800174a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800174c:	b13d      	cbz	r5, 800175e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800174e:	b9f8      	cbnz	r0, 8001790 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001750:	2a01      	cmp	r2, #1
 8001752:	d02d      	beq.n	80017b0 <HAL_DMA_Init+0xdc>
 8001754:	d301      	bcc.n	800175a <HAL_DMA_Init+0x86>
 8001756:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001758:	d101      	bne.n	800175e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800175a:	01ea      	lsls	r2, r5, #7
 800175c:	d42b      	bmi.n	80017b6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800175e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff ffa1 	bl	80016a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001766:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001768:	233f      	movs	r3, #63	; 0x3f
 800176a:	4093      	lsls	r3, r2
 800176c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001770:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001772:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001774:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001778:	e009      	b.n	800178e <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177a:	f7ff ff25 	bl	80015c8 <HAL_GetTick>
 800177e:	1b40      	subs	r0, r0, r5
 8001780:	2805      	cmp	r0, #5
 8001782:	d9b9      	bls.n	80016f8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001784:	2320      	movs	r3, #32
 8001786:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001788:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800178a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800178e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001790:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001794:	d113      	bne.n	80017be <HAL_DMA_Init+0xea>
    switch (tmp)
 8001796:	2a03      	cmp	r2, #3
 8001798:	d8e1      	bhi.n	800175e <HAL_DMA_Init+0x8a>
 800179a:	a001      	add	r0, pc, #4	; (adr r0, 80017a0 <HAL_DMA_Init+0xcc>)
 800179c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80017a0:	080017b7 	.word	0x080017b7
 80017a4:	0800175b 	.word	0x0800175b
 80017a8:	080017b7 	.word	0x080017b7
 80017ac:	080017b1 	.word	0x080017b1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80017b4:	d1d3      	bne.n	800175e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b6:	2340      	movs	r3, #64	; 0x40
 80017b8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	2001      	movs	r0, #1
 80017bc:	e7e5      	b.n	800178a <HAL_DMA_Init+0xb6>
    switch (tmp)
 80017be:	2a02      	cmp	r2, #2
 80017c0:	d9f9      	bls.n	80017b6 <HAL_DMA_Init+0xe2>
 80017c2:	2a03      	cmp	r2, #3
 80017c4:	e7c8      	b.n	8001758 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80017c6:	2001      	movs	r0, #1
 80017c8:	e7e1      	b.n	800178e <HAL_DMA_Init+0xba>
 80017ca:	bf00      	nop
 80017cc:	f010803f 	.word	0xf010803f

080017d0 <HAL_DMA_Start_IT>:
{
 80017d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80017d2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80017d6:	2c01      	cmp	r4, #1
 80017d8:	d032      	beq.n	8001840 <HAL_DMA_Start_IT+0x70>
 80017da:	2401      	movs	r4, #1
 80017dc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80017e0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80017e6:	2c01      	cmp	r4, #1
 80017e8:	f04f 0500 	mov.w	r5, #0
 80017ec:	f04f 0402 	mov.w	r4, #2
 80017f0:	d124      	bne.n	800183c <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80017f2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017f6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017fa:	6825      	ldr	r5, [r4, #0]
 80017fc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001800:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001802:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001804:	6883      	ldr	r3, [r0, #8]
 8001806:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001808:	bf0e      	itee	eq
 800180a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800180c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800180e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001810:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001812:	bf08      	it	eq
 8001814:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001816:	233f      	movs	r3, #63	; 0x3f
 8001818:	4093      	lsls	r3, r2
 800181a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f043 0316 	orr.w	r3, r3, #22
 8001822:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001824:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001826:	b11b      	cbz	r3, 8001830 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001838:	2000      	movs	r0, #0
}
 800183a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 800183c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001840:	2002      	movs	r0, #2
 8001842:	e7fa      	b.n	800183a <HAL_DMA_Start_IT+0x6a>

08001844 <HAL_DMA_IRQHandler>:
{
 8001844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800184a:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800184e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001850:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001852:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001854:	2208      	movs	r2, #8
 8001856:	409a      	lsls	r2, r3
 8001858:	4232      	tst	r2, r6
{
 800185a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800185c:	d00c      	beq.n	8001878 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800185e:	6801      	ldr	r1, [r0, #0]
 8001860:	6808      	ldr	r0, [r1, #0]
 8001862:	0740      	lsls	r0, r0, #29
 8001864:	d508      	bpl.n	8001878 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001866:	6808      	ldr	r0, [r1, #0]
 8001868:	f020 0004 	bic.w	r0, r0, #4
 800186c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800186e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001870:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001878:	2201      	movs	r2, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	4232      	tst	r2, r6
 800187e:	d008      	beq.n	8001892 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001880:	6821      	ldr	r1, [r4, #0]
 8001882:	6949      	ldr	r1, [r1, #20]
 8001884:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001886:	bf41      	itttt	mi
 8001888:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800188a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800188c:	f042 0202 	orrmi.w	r2, r2, #2
 8001890:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001892:	2204      	movs	r2, #4
 8001894:	409a      	lsls	r2, r3
 8001896:	4232      	tst	r2, r6
 8001898:	d008      	beq.n	80018ac <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800189a:	6821      	ldr	r1, [r4, #0]
 800189c:	6809      	ldr	r1, [r1, #0]
 800189e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018a0:	bf41      	itttt	mi
 80018a2:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018a4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80018a6:	f042 0204 	orrmi.w	r2, r2, #4
 80018aa:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018ac:	2210      	movs	r2, #16
 80018ae:	409a      	lsls	r2, r3
 80018b0:	4232      	tst	r2, r6
 80018b2:	d010      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	0709      	lsls	r1, r1, #28
 80018ba:	d50c      	bpl.n	80018d6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018bc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	0350      	lsls	r0, r2, #13
 80018c2:	d537      	bpl.n	8001934 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0319      	lsls	r1, r3, #12
 80018c8:	d401      	bmi.n	80018ce <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80018ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018cc:	e000      	b.n	80018d0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	b10b      	cbz	r3, 80018d6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80018d2:	4620      	mov	r0, r4
 80018d4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80018d8:	2220      	movs	r2, #32
 80018da:	408a      	lsls	r2, r1
 80018dc:	4232      	tst	r2, r6
 80018de:	d03a      	beq.n	8001956 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	06c6      	lsls	r6, r0, #27
 80018e6:	d536      	bpl.n	8001956 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018e8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ea:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80018ee:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018f2:	d127      	bne.n	8001944 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f4:	f022 0216 	bic.w	r2, r2, #22
 80018f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001900:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001902:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001904:	b90a      	cbnz	r2, 800190a <HAL_DMA_IRQHandler+0xc6>
 8001906:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001908:	b11a      	cbz	r2, 8001912 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f022 0208 	bic.w	r2, r2, #8
 8001910:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001912:	233f      	movs	r3, #63	; 0x3f
 8001914:	408b      	lsls	r3, r1
 8001916:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001918:	2300      	movs	r3, #0
 800191a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800191e:	2301      	movs	r3, #1
 8001920:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001924:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001926:	2b00      	cmp	r3, #0
 8001928:	d045      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800192a:	4620      	mov	r0, r4
}
 800192c:	b003      	add	sp, #12
 800192e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001932:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001938:	bf5e      	ittt	pl
 800193a:	681a      	ldrpl	r2, [r3, #0]
 800193c:	f022 0208 	bicpl.w	r2, r2, #8
 8001940:	601a      	strpl	r2, [r3, #0]
 8001942:	e7c2      	b.n	80018ca <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001944:	0350      	lsls	r0, r2, #13
 8001946:	d527      	bpl.n	8001998 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0319      	lsls	r1, r3, #12
 800194c:	d431      	bmi.n	80019b2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800194e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001950:	b10b      	cbz	r3, 8001956 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001952:	4620      	mov	r0, r4
 8001954:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001956:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001958:	b36b      	cbz	r3, 80019b6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800195a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800195c:	07da      	lsls	r2, r3, #31
 800195e:	d519      	bpl.n	8001994 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001960:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001962:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001964:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001970:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001974:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001978:	9b01      	ldr	r3, [sp, #4]
 800197a:	3301      	adds	r3, #1
 800197c:	42bb      	cmp	r3, r7
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	d802      	bhi.n	8001988 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	07db      	lsls	r3, r3, #31
 8001986:	d4f7      	bmi.n	8001978 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8001988:	2300      	movs	r3, #0
 800198a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800198e:	2301      	movs	r3, #1
 8001990:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001994:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001996:	e7c6      	b.n	8001926 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800199e:	d108      	bne.n	80019b2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	f021 0110 	bic.w	r1, r1, #16
 80019a6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80019a8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80019aa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80019ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80019b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019b4:	e7cc      	b.n	8001950 <HAL_DMA_IRQHandler+0x10c>
}
 80019b6:	b003      	add	sp, #12
 80019b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000078 	.word	0x20000078

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001b78 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019cc:	4a68      	ldr	r2, [pc, #416]	; (8001b70 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001b7c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80019d6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d8:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80019da:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019dc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80019de:	42ac      	cmp	r4, r5
 80019e0:	f040 80b0 	bne.w	8001b44 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e4:	684c      	ldr	r4, [r1, #4]
 80019e6:	f024 0c10 	bic.w	ip, r4, #16
 80019ea:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80019ee:	2603      	movs	r6, #3
 80019f0:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 80019f4:	fa06 f60e 	lsl.w	r6, r6, lr
 80019f8:	2f01      	cmp	r7, #1
 80019fa:	ea6f 0606 	mvn.w	r6, r6
 80019fe:	d811      	bhi.n	8001a24 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8001a00:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a02:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	68cf      	ldr	r7, [r1, #12]
 8001a08:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a0c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001a10:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a12:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a14:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a18:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001a1c:	409f      	lsls	r7, r3
 8001a1e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8001a22:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a24:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a26:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2a:	688f      	ldr	r7, [r1, #8]
 8001a2c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a30:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a34:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001a38:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3a:	d116      	bne.n	8001a6a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8001a3c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001a40:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a44:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001a48:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a4c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001a50:	f04f 0c0f 	mov.w	ip, #15
 8001a54:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001a58:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a5c:	690f      	ldr	r7, [r1, #16]
 8001a5e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001a62:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001a66:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001a6a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6e:	f004 0703 	and.w	r7, r4, #3
 8001a72:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001a76:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8001a7a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7c:	00e6      	lsls	r6, r4, #3
 8001a7e:	d561      	bpl.n	8001b44 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a80:	f04f 0b00 	mov.w	fp, #0
 8001a84:	f8cd b00c 	str.w	fp, [sp, #12]
 8001a88:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8c:	4e39      	ldr	r6, [pc, #228]	; (8001b74 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001a92:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001a96:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001a9a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001a9e:	9703      	str	r7, [sp, #12]
 8001aa0:	9f03      	ldr	r7, [sp, #12]
 8001aa2:	f023 0703 	bic.w	r7, r3, #3
 8001aa6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001aaa:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aae:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001aba:	f04f 0c0f 	mov.w	ip, #15
 8001abe:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac4:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac8:	d043      	beq.n	8001b52 <HAL_GPIO_Init+0x192>
 8001aca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ace:	42b0      	cmp	r0, r6
 8001ad0:	d041      	beq.n	8001b56 <HAL_GPIO_Init+0x196>
 8001ad2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ad6:	42b0      	cmp	r0, r6
 8001ad8:	d03f      	beq.n	8001b5a <HAL_GPIO_Init+0x19a>
 8001ada:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ade:	42b0      	cmp	r0, r6
 8001ae0:	d03d      	beq.n	8001b5e <HAL_GPIO_Init+0x19e>
 8001ae2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ae6:	42b0      	cmp	r0, r6
 8001ae8:	d03b      	beq.n	8001b62 <HAL_GPIO_Init+0x1a2>
 8001aea:	4548      	cmp	r0, r9
 8001aec:	d03b      	beq.n	8001b66 <HAL_GPIO_Init+0x1a6>
 8001aee:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001af2:	42b0      	cmp	r0, r6
 8001af4:	d039      	beq.n	8001b6a <HAL_GPIO_Init+0x1aa>
 8001af6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001afa:	42b0      	cmp	r0, r6
 8001afc:	bf14      	ite	ne
 8001afe:	2608      	movne	r6, #8
 8001b00:	2607      	moveq	r6, #7
 8001b02:	fa06 f60e 	lsl.w	r6, r6, lr
 8001b06:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b0a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001b0c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b10:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b14:	bf0c      	ite	eq
 8001b16:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001b18:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001b1a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001b1c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b22:	bf0c      	ite	eq
 8001b24:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001b26:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001b28:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b30:	bf0c      	ite	eq
 8001b32:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001b34:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8001b36:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	bf54      	ite	pl
 8001b3e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001b40:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8001b42:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b44:	3301      	adds	r3, #1
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	f47f af45 	bne.w	80019d6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001b4c:	b005      	add	sp, #20
 8001b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b52:	465e      	mov	r6, fp
 8001b54:	e7d5      	b.n	8001b02 <HAL_GPIO_Init+0x142>
 8001b56:	2601      	movs	r6, #1
 8001b58:	e7d3      	b.n	8001b02 <HAL_GPIO_Init+0x142>
 8001b5a:	2602      	movs	r6, #2
 8001b5c:	e7d1      	b.n	8001b02 <HAL_GPIO_Init+0x142>
 8001b5e:	2603      	movs	r6, #3
 8001b60:	e7cf      	b.n	8001b02 <HAL_GPIO_Init+0x142>
 8001b62:	2604      	movs	r6, #4
 8001b64:	e7cd      	b.n	8001b02 <HAL_GPIO_Init+0x142>
 8001b66:	2605      	movs	r6, #5
 8001b68:	e7cb      	b.n	8001b02 <HAL_GPIO_Init+0x142>
 8001b6a:	2606      	movs	r6, #6
 8001b6c:	e7c9      	b.n	8001b02 <HAL_GPIO_Init+0x142>
 8001b6e:	bf00      	nop
 8001b70:	40013c00 	.word	0x40013c00
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40021400 	.word	0x40021400

08001b80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b80:	b10a      	cbz	r2, 8001b86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b82:	6181      	str	r1, [r0, #24]
  }
}
 8001b84:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b86:	0409      	lsls	r1, r1, #16
 8001b88:	e7fb      	b.n	8001b82 <HAL_GPIO_WritePin+0x2>

08001b8a <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b8c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001b90:	6959      	ldr	r1, [r3, #20]
 8001b92:	4201      	tst	r1, r0
 8001b94:	d002      	beq.n	8001b9c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b96:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b98:	f7ff fff7 	bl	8001b8a <HAL_GPIO_EXTI_Callback>
}
 8001b9c:	bd08      	pop	{r3, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ba4:	6801      	ldr	r1, [r0, #0]
 8001ba6:	694b      	ldr	r3, [r1, #20]
 8001ba8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	d010      	beq.n	8001bd4 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001bb6:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bb8:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bbc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bc4:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	4770      	bx	lr
  }
  return HAL_OK;
 8001bd4:	4618      	mov	r0, r3
}
 8001bd6:	4770      	bx	lr

08001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4616      	mov	r6, r2
 8001be0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be2:	b28f      	uxth	r7, r1
 8001be4:	6825      	ldr	r5, [r4, #0]
 8001be6:	6968      	ldr	r0, [r5, #20]
 8001be8:	ea37 0000 	bics.w	r0, r7, r0
 8001bec:	d017      	beq.n	8001c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bee:	696b      	ldr	r3, [r5, #20]
 8001bf0:	055a      	lsls	r2, r3, #21
 8001bf2:	d516      	bpl.n	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfa:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bfc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001c00:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c02:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c12:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c16:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001c18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001c1c:	2001      	movs	r0, #1
}
 8001c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c22:	1c73      	adds	r3, r6, #1
 8001c24:	d0df      	beq.n	8001be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c26:	f7ff fccf 	bl	80015c8 <HAL_GetTick>
 8001c2a:	eba0 0008 	sub.w	r0, r0, r8
 8001c2e:	42b0      	cmp	r0, r6
 8001c30:	d801      	bhi.n	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8001c32:	2e00      	cmp	r6, #0
 8001c34:	d1d6      	bne.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c36:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c38:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c3a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	e7e4      	b.n	8001c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08001c4c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	4604      	mov	r4, r0
 8001c50:	460d      	mov	r5, r1
 8001c52:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	075b      	lsls	r3, r3, #29
 8001c5a:	d501      	bpl.n	8001c60 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c5c:	2000      	movs	r0, #0
}
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff ff9f 	bl	8001ba4 <I2C_IsAcknowledgeFailed>
 8001c66:	b9a8      	cbnz	r0, 8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001c68:	1c6a      	adds	r2, r5, #1
 8001c6a:	d0f3      	beq.n	8001c54 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6c:	f7ff fcac 	bl	80015c8 <HAL_GetTick>
 8001c70:	1b80      	subs	r0, r0, r6
 8001c72:	42a8      	cmp	r0, r5
 8001c74:	d801      	bhi.n	8001c7a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001c76:	2d00      	cmp	r5, #0
 8001c78:	d1ec      	bne.n	8001c54 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c7a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c7c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c7e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c88:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001c8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c8e:	f042 0220 	orr.w	r2, r2, #32
 8001c92:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c94:	2001      	movs	r0, #1
 8001c96:	e7e2      	b.n	8001c5e <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08001c98 <I2C_WaitOnFlagUntilTimeout>:
{
 8001c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c9c:	9e08      	ldr	r6, [sp, #32]
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4690      	mov	r8, r2
 8001ca2:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca4:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8001ca8:	b28d      	uxth	r5, r1
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	f1b9 0f01 	cmp.w	r9, #1
 8001cb0:	bf0c      	ite	eq
 8001cb2:	694b      	ldreq	r3, [r1, #20]
 8001cb4:	698b      	ldrne	r3, [r1, #24]
 8001cb6:	ea35 0303 	bics.w	r3, r5, r3
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	4598      	cmp	r8, r3
 8001cc2:	d001      	beq.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	e016      	b.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001cc8:	1c7b      	adds	r3, r7, #1
 8001cca:	d0ef      	beq.n	8001cac <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ccc:	f7ff fc7c 	bl	80015c8 <HAL_GetTick>
 8001cd0:	1b80      	subs	r0, r0, r6
 8001cd2:	42b8      	cmp	r0, r7
 8001cd4:	d801      	bhi.n	8001cda <I2C_WaitOnFlagUntilTimeout+0x42>
 8001cd6:	2f00      	cmp	r7, #0
 8001cd8:	d1e7      	bne.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cda:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001cdc:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cde:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ce0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ce4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ce8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001cea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cee:	f042 0220 	orr.w	r2, r2, #32
 8001cf2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001cf4:	2001      	movs	r0, #1
}
 8001cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001cfa <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001cfa:	b570      	push	{r4, r5, r6, lr}
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	460d      	mov	r5, r1
 8001d00:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	061b      	lsls	r3, r3, #24
 8001d08:	d501      	bpl.n	8001d0e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001d0a:	2000      	movs	r0, #0
}
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff ff48 	bl	8001ba4 <I2C_IsAcknowledgeFailed>
 8001d14:	b9a8      	cbnz	r0, 8001d42 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001d16:	1c6a      	adds	r2, r5, #1
 8001d18:	d0f3      	beq.n	8001d02 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1a:	f7ff fc55 	bl	80015c8 <HAL_GetTick>
 8001d1e:	1b80      	subs	r0, r0, r6
 8001d20:	42a8      	cmp	r0, r5
 8001d22:	d801      	bhi.n	8001d28 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	d1ec      	bne.n	8001d02 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d28:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d2a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d2c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d36:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001d42:	2001      	movs	r0, #1
 8001d44:	e7e2      	b.n	8001d0c <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08001d48 <HAL_I2C_Init>:
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	b908      	cbnz	r0, 8001d52 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1
}
 8001d50:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d5a:	b91b      	cbnz	r3, 8001d64 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001d5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001d60:	f7ff f9f6 	bl	8001150 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	2324      	movs	r3, #36	; 0x24
 8001d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d82:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d84:	f000 fe90 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	4a41      	ldr	r2, [pc, #260]	; (8001e90 <HAL_I2C_Init+0x148>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d84d      	bhi.n	8001e2c <HAL_I2C_Init+0xe4>
 8001d90:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <HAL_I2C_Init+0x14c>)
 8001d92:	4290      	cmp	r0, r2
 8001d94:	d9db      	bls.n	8001d4e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d96:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001d98:	493f      	ldr	r1, [pc, #252]	; (8001e98 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d9a:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001d9c:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001da0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001da4:	430d      	orrs	r5, r1
 8001da6:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da8:	6a15      	ldr	r5, [r2, #32]
 8001daa:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001dae:	3101      	adds	r1, #1
 8001db0:	4329      	orrs	r1, r5
 8001db2:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001db4:	69d1      	ldr	r1, [r2, #28]
 8001db6:	4d36      	ldr	r5, [pc, #216]	; (8001e90 <HAL_I2C_Init+0x148>)
 8001db8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001dbc:	42ab      	cmp	r3, r5
 8001dbe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001dc2:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8001dc6:	d848      	bhi.n	8001e5a <HAL_I2C_Init+0x112>
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dce:	1c43      	adds	r3, r0, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	bf38      	it	cc
 8001dd8:	2304      	movcc	r3, #4
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dde:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001de2:	6811      	ldr	r1, [r2, #0]
 8001de4:	4303      	orrs	r3, r0
 8001de6:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001dea:	430b      	orrs	r3, r1
 8001dec:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dee:	6891      	ldr	r1, [r2, #8]
 8001df0:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001df4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001df8:	4303      	orrs	r3, r0
 8001dfa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e02:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001e06:	68d1      	ldr	r1, [r2, #12]
 8001e08:	4303      	orrs	r3, r0
 8001e0a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001e0e:	430b      	orrs	r3, r1
 8001e10:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e24:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001e2a:	e791      	b.n	8001d50 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_I2C_Init+0x154>)
 8001e2e:	4290      	cmp	r0, r2
 8001e30:	d98d      	bls.n	8001d4e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e32:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001e34:	4e18      	ldr	r6, [pc, #96]	; (8001e98 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e36:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001e38:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e3c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001e40:	4335      	orrs	r5, r6
 8001e42:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e44:	6a15      	ldr	r5, [r2, #32]
 8001e46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e4a:	4371      	muls	r1, r6
 8001e4c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001e50:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001e54:	fbb1 f1f6 	udiv	r1, r1, r6
 8001e58:	e7a9      	b.n	8001dae <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e5a:	68a5      	ldr	r5, [r4, #8]
 8001e5c:	b955      	cbnz	r5, 8001e74 <HAL_I2C_Init+0x12c>
 8001e5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e66:	1c43      	adds	r3, r0, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	b16b      	cbz	r3, 8001e8a <HAL_I2C_Init+0x142>
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e72:	e7b2      	b.n	8001dda <HAL_I2C_Init+0x92>
 8001e74:	2519      	movs	r5, #25
 8001e76:	436b      	muls	r3, r5
 8001e78:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	b113      	cbz	r3, 8001e8a <HAL_I2C_Init+0x142>
 8001e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e88:	e7a7      	b.n	8001dda <HAL_I2C_Init+0x92>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e7a5      	b.n	8001dda <HAL_I2C_Init+0x92>
 8001e8e:	bf00      	nop
 8001e90:	000186a0 	.word	0x000186a0
 8001e94:	001e847f 	.word	0x001e847f
 8001e98:	000f4240 	.word	0x000f4240
 8001e9c:	003d08ff 	.word	0x003d08ff

08001ea0 <HAL_I2C_Master_Transmit>:
{
 8001ea0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	461f      	mov	r7, r3
 8001ea8:	460d      	mov	r5, r1
 8001eaa:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff fb8c 	bl	80015c8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001eb4:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001eb6:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb8:	d004      	beq.n	8001ec4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001eba:	2502      	movs	r5, #2
}
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	b004      	add	sp, #16
 8001ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec4:	9000      	str	r0, [sp, #0]
 8001ec6:	2319      	movs	r3, #25
 8001ec8:	2201      	movs	r2, #1
 8001eca:	495b      	ldr	r1, [pc, #364]	; (8002038 <HAL_I2C_Master_Transmit+0x198>)
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff fee3 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d1f1      	bne.n	8001eba <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001ed6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d0ed      	beq.n	8001eba <HAL_I2C_Master_Transmit+0x1a>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001eea:	bf5e      	ittt	pl
 8001eec:	681a      	ldrpl	r2, [r3, #0]
 8001eee:	f042 0201 	orrpl.w	r2, r2, #1
 8001ef2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001efc:	2221      	movs	r2, #33	; 0x21
 8001efe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f02:	2210      	movs	r2, #16
 8001f04:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001f0c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f0e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f10:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f12:	4a4a      	ldr	r2, [pc, #296]	; (800203c <HAL_I2C_Master_Transmit+0x19c>)
 8001f14:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001f18:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f1c:	2a08      	cmp	r2, #8
 8001f1e:	d004      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x8a>
 8001f20:	2a01      	cmp	r2, #1
 8001f22:	d002      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x8a>
 8001f24:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f28:	d104      	bne.n	8001f34 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e002      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f36:	2a12      	cmp	r2, #18
 8001f38:	d0f7      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	9600      	str	r6, [sp, #0]
 8001f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff fea7 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001f4a:	6822      	ldr	r2, [r4, #0]
 8001f4c:	b138      	cbz	r0, 8001f5e <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f4e:	6813      	ldr	r3, [r2, #0]
 8001f50:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f52:	bf44      	itt	mi
 8001f54:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8001f58:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001f5a:	2501      	movs	r5, #1
 8001f5c:	e7ae      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f5e:	6923      	ldr	r3, [r4, #16]
 8001f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f64:	d121      	bne.n	8001faa <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f66:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001f6a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f6c:	4633      	mov	r3, r6
 8001f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001f70:	4933      	ldr	r1, [pc, #204]	; (8002040 <HAL_I2C_Master_Transmit+0x1a0>)
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7ff fe30 	bl	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f78:	4605      	mov	r5, r0
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d1ed      	bne.n	8001f5a <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	9003      	str	r0, [sp, #12]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	9203      	str	r2, [sp, #12]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	9303      	str	r3, [sp, #12]
 8001f8a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001f8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f8e:	b9f3      	cbnz	r3, 8001fce <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	6821      	ldr	r1, [r4, #0]
 8001f92:	680a      	ldr	r2, [r1, #0]
 8001f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f98:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001fa0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001fa8:	e788      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001faa:	11eb      	asrs	r3, r5, #7
 8001fac:	f003 0306 	and.w	r3, r3, #6
 8001fb0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001fb4:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fb6:	4923      	ldr	r1, [pc, #140]	; (8002044 <HAL_I2C_Master_Transmit+0x1a4>)
 8001fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fba:	4633      	mov	r3, r6
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff fe0b 	bl	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d1c9      	bne.n	8001f5a <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	b2ed      	uxtb	r5, r5
 8001fca:	611d      	str	r5, [r3, #16]
 8001fcc:	e7ce      	b.n	8001f6c <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fce:	4632      	mov	r2, r6
 8001fd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7ff fe91 	bl	8001cfa <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd8:	b140      	cbz	r0, 8001fec <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d1bc      	bne.n	8001f5a <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	6822      	ldr	r2, [r4, #0]
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e7b6      	b.n	8001f5a <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fee:	6820      	ldr	r0, [r4, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001ff6:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001ff8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ffa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ffc:	3a01      	subs	r2, #1
 8001ffe:	b292      	uxth	r2, r2
 8002000:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002002:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002004:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8002006:	1e51      	subs	r1, r2, #1
 8002008:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800200a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 800200c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800200e:	d50a      	bpl.n	8002026 <HAL_I2C_Master_Transmit+0x186>
 8002010:	b149      	cbz	r1, 8002026 <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002012:	7859      	ldrb	r1, [r3, #1]
 8002014:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002016:	3302      	adds	r3, #2
 8002018:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800201a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800201c:	3b01      	subs	r3, #1
 800201e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002020:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002022:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002024:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002026:	4632      	mov	r2, r6
 8002028:	990a      	ldr	r1, [sp, #40]	; 0x28
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff fe0e 	bl	8001c4c <I2C_WaitOnBTFFlagUntilTimeout>
 8002030:	2800      	cmp	r0, #0
 8002032:	d0ab      	beq.n	8001f8c <HAL_I2C_Master_Transmit+0xec>
 8002034:	e7d1      	b.n	8001fda <HAL_I2C_Master_Transmit+0x13a>
 8002036:	bf00      	nop
 8002038:	00100002 	.word	0x00100002
 800203c:	ffff0000 	.word	0xffff0000
 8002040:	00010002 	.word	0x00010002
 8002044:	00010008 	.word	0x00010008

08002048 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800204a:	4604      	mov	r4, r0
 800204c:	2800      	cmp	r0, #0
 800204e:	d041      	beq.n	80020d4 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002050:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002054:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002058:	b92b      	cbnz	r3, 8002066 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800205a:	4b42      	ldr	r3, [pc, #264]	; (8002164 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 800205c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002060:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002062:	f7ff f8af 	bl	80011c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002066:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002068:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 800206a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800206e:	69d3      	ldr	r3, [r2, #28]
 8002070:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002074:	f023 030f 	bic.w	r3, r3, #15
 8002078:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800207a:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 800207c:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800207e:	428b      	cmp	r3, r1
 8002080:	d031      	beq.n	80020e6 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002082:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002084:	2b00      	cmp	r3, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002086:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8002088:	bf14      	ite	ne
 800208a:	2520      	movne	r5, #32
 800208c:	2510      	moveq	r5, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800208e:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002090:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002092:	bf98      	it	ls
 8002094:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002096:	f000 fdbf 	bl	8002c18 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800209a:	6923      	ldr	r3, [r4, #16]
 800209c:	6961      	ldr	r1, [r4, #20]
 800209e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a2:	d11b      	bne.n	80020dc <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80020a4:	68e3      	ldr	r3, [r4, #12]
 80020a6:	220a      	movs	r2, #10
 80020a8:	b1b3      	cbz	r3, 80020d8 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020aa:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b0:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80020b2:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b8:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80020ba:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80020be:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80020c2:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80020c4:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80020c6:	1e99      	subs	r1, r3, #2
 80020c8:	29fd      	cmp	r1, #253	; 0xfd
 80020ca:	d90e      	bls.n	80020ea <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80020cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020ce:	f043 0310 	orr.w	r3, r3, #16
 80020d2:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80020d4:	2001      	movs	r0, #1
 80020d6:	e044      	b.n	8002162 <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020d8:	00eb      	lsls	r3, r5, #3
 80020da:	e7e7      	b.n	80020ac <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020dc:	230a      	movs	r3, #10
 80020de:	fbb0 f0f5 	udiv	r0, r0, r5
 80020e2:	4343      	muls	r3, r0
 80020e4:	e7e5      	b.n	80020b2 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 80020e6:	2200      	movs	r2, #0
 80020e8:	e7ed      	b.n	80020c6 <HAL_I2S_Init+0x7e>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80020ea:	4313      	orrs	r3, r2
 80020ec:	6922      	ldr	r2, [r4, #16]
 80020ee:	6821      	ldr	r1, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80020f0:	68e5      	ldr	r5, [r4, #12]
 80020f2:	69a0      	ldr	r0, [r4, #24]
 80020f4:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8002174 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80020f8:	4313      	orrs	r3, r2
 80020fa:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80020fc:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8002100:	ea46 0203 	orr.w	r2, r6, r3
 8002104:	69cf      	ldr	r7, [r1, #28]
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	432a      	orrs	r2, r5
 800210c:	4302      	orrs	r2, r0
 800210e:	ea07 070c 	and.w	r7, r7, ip
 8002112:	433a      	orrs	r2, r7
 8002114:	61ca      	str	r2, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002116:	6a22      	ldr	r2, [r4, #32]
 8002118:	2a01      	cmp	r2, #1
 800211a:	d11d      	bne.n	8002158 <HAL_I2S_Init+0x110>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_I2S_Init+0x120>)
 800211e:	6362      	str	r2, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002120:	4f12      	ldr	r7, [pc, #72]	; (800216c <HAL_I2S_Init+0x124>)
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_I2S_Init+0x128>)
 8002124:	42b9      	cmp	r1, r7
 8002126:	bf18      	it	ne
 8002128:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800212c:	432b      	orrs	r3, r5
 800212e:	69d1      	ldr	r1, [r2, #28]
 8002130:	ea01 010c 	and.w	r1, r1, ip
 8002134:	61d1      	str	r1, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002136:	2102      	movs	r1, #2
 8002138:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800213a:	69d7      	ldr	r7, [r2, #28]
 800213c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002140:	4303      	orrs	r3, r0

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002142:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8002146:	ea43 0307 	orr.w	r3, r3, r7
 800214a:	bf14      	ite	ne
 800214c:	2100      	movne	r1, #0
 800214e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8002152:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002154:	430b      	orrs	r3, r1
 8002156:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002158:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 800215a:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800215c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800215e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8002162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002164:	08002261 	.word	0x08002261
 8002168:	08002385 	.word	0x08002385
 800216c:	40003800 	.word	0x40003800
 8002170:	40003400 	.word	0x40003400
 8002174:	fffff040 	.word	0xfffff040

08002178 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	4604      	mov	r4, r0
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800217c:	2900      	cmp	r1, #0
 800217e:	d04e      	beq.n	800221e <HAL_I2S_Transmit_DMA+0xa6>
 8002180:	2a00      	cmp	r2, #0
 8002182:	d04c      	beq.n	800221e <HAL_I2S_Transmit_DMA+0xa6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002184:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002188:	2b01      	cmp	r3, #1
 800218a:	d00a      	beq.n	80021a2 <HAL_I2S_Transmit_DMA+0x2a>
 800218c:	2301      	movs	r3, #1
 800218e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002192:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002196:	2b01      	cmp	r3, #1
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    __HAL_UNLOCK(hi2s);
 800219e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 80021a2:	2002      	movs	r0, #2
 80021a4:	e027      	b.n	80021f6 <HAL_I2S_Transmit_DMA+0x7e>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80021a6:	2003      	movs	r0, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80021a8:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80021aa:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80021ae:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80021b0:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 80021b2:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80021b4:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80021b8:	4283      	cmp	r3, r0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2S_Transmit_DMA+0x48>
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d11b      	bne.n	80021f8 <HAL_I2S_Transmit_DMA+0x80>
  {
    hi2s->TxXferSize = (Size << 1U);
 80021c0:	0053      	lsls	r3, r2, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80021c6:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->TxXferSize = Size;
    hi2s->TxXferCount = Size;
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80021c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_I2S_Transmit_DMA+0xac>)
 80021cc:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_I2S_Transmit_DMA+0xb0>)
 80021d0:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_I2S_Transmit_DMA+0xb4>)
 80021d4:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80021d6:	f105 020c 	add.w	r2, r5, #12
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 80021da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80021dc:	f7ff faf8 	bl	80017d0 <HAL_DMA_Start_IT>
 80021e0:	b168      	cbz	r0, 80021fe <HAL_I2S_Transmit_DMA+0x86>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80021e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80021e4:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80021ec:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
  }

  __HAL_UNLOCK(hi2s);
 80021f0:	2300      	movs	r3, #0
 80021f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 80021f6:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = Size;
 80021f8:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80021fa:	8562      	strh	r2, [r4, #42]	; 0x2a
 80021fc:	e7e4      	b.n	80021c8 <HAL_I2S_Transmit_DMA+0x50>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8002204:	bf5e      	ittt	pl
 8002206:	69da      	ldrpl	r2, [r3, #28]
 8002208:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 800220c:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002212:	bf5e      	ittt	pl
 8002214:	685a      	ldrpl	r2, [r3, #4]
 8002216:	f042 0202 	orrpl.w	r2, r2, #2
 800221a:	605a      	strpl	r2, [r3, #4]
 800221c:	e7e8      	b.n	80021f0 <HAL_I2S_Transmit_DMA+0x78>
    return  HAL_ERROR;
 800221e:	2001      	movs	r0, #1
 8002220:	e7e9      	b.n	80021f6 <HAL_I2S_Transmit_DMA+0x7e>
 8002222:	bf00      	nop
 8002224:	08002231 	.word	0x08002231
 8002228:	0800223b 	.word	0x0800223b
 800222c:	0800235b 	.word	0x0800235b

08002230 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002230:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002232:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002234:	f7fe fc32 	bl	8000a9c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002238:	bd08      	pop	{r3, pc}

0800223a <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 800223a:	69c1      	ldr	r1, [r0, #28]
{
 800223c:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800223e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002240:	b941      	cbnz	r1, 8002254 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	6842      	ldr	r2, [r0, #4]
 8002246:	f022 0202 	bic.w	r2, r2, #2
 800224a:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800224c:	2201      	movs	r2, #1
    hi2s->TxXferCount = 0U;
 800224e:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fc0d 	bl	8000a74 <HAL_I2S_TxCpltCallback>
}
 800225a:	bd08      	pop	{r3, pc}

0800225c <HAL_I2S_RxCpltCallback>:
 800225c:	4770      	bx	lr

0800225e <HAL_I2S_ErrorCallback>:
 800225e:	4770      	bx	lr

08002260 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002262:	6803      	ldr	r3, [r0, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002268:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800226c:	2a04      	cmp	r2, #4
{
 800226e:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002270:	d136      	bne.n	80022e0 <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002272:	9a01      	ldr	r2, [sp, #4]
 8002274:	07d1      	lsls	r1, r2, #31
 8002276:	d517      	bpl.n	80022a8 <I2S_IRQHandler+0x48>
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	0652      	lsls	r2, r2, #25
 800227c:	d514      	bpl.n	80022a8 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800227e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002280:	68d9      	ldr	r1, [r3, #12]
 8002282:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8002286:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002288:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800228a:	3a01      	subs	r2, #1
 800228c:	b292      	uxth	r2, r2
 800228e:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002290:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002292:	b292      	uxth	r2, r2
 8002294:	b942      	cbnz	r2, 80022a8 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800229c:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800229e:	2301      	movs	r3, #1
 80022a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80022a4:	f7ff ffda 	bl	800225c <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80022a8:	9b01      	ldr	r3, [sp, #4]
 80022aa:	0659      	lsls	r1, r3, #25
 80022ac:	d518      	bpl.n	80022e0 <I2S_IRQHandler+0x80>
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	0692      	lsls	r2, r2, #26
 80022b4:	d514      	bpl.n	80022e0 <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022bc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022be:	2200      	movs	r2, #0
 80022c0:	9202      	str	r2, [sp, #8]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	9202      	str	r2, [sp, #8]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff ffbf 	bl	800225e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80022e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d136      	bne.n	8002356 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80022e8:	9b01      	ldr	r3, [sp, #4]
 80022ea:	079b      	lsls	r3, r3, #30
 80022ec:	d519      	bpl.n	8002322 <I2S_IRQHandler+0xc2>
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	6853      	ldr	r3, [r2, #4]
 80022f2:	0618      	lsls	r0, r3, #24
 80022f4:	d515      	bpl.n	8002322 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80022f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022f8:	f833 1b02 	ldrh.w	r1, [r3], #2
 80022fc:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 80022fe:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8002300:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002302:	3b01      	subs	r3, #1
 8002304:	b29b      	uxth	r3, r3
 8002306:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002308:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	b94b      	cbnz	r3, 8002322 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800230e:	6853      	ldr	r3, [r2, #4]
 8002310:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002314:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002316:	2301      	movs	r3, #1
 8002318:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800231c:	4620      	mov	r0, r4
 800231e:	f7fe fba9 	bl	8000a74 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	0719      	lsls	r1, r3, #28
 8002326:	d516      	bpl.n	8002356 <I2S_IRQHandler+0xf6>
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	0692      	lsls	r2, r2, #26
 800232e:	d512      	bpl.n	8002356 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002336:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002338:	2200      	movs	r2, #0
 800233a:	9203      	str	r2, [sp, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	9303      	str	r3, [sp, #12]
 8002340:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002342:	2301      	movs	r3, #1
 8002344:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002348:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff ff84 	bl	800225e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002356:	b004      	add	sp, #16
 8002358:	bd10      	pop	{r4, pc}

0800235a <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800235a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800235c:	6802      	ldr	r2, [r0, #0]
{
 800235e:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002360:	6853      	ldr	r3, [r2, #4]
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800236c:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 800236e:	2301      	movs	r3, #1
 8002370:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002374:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 800237c:	f7ff ff6f 	bl	800225e <HAL_I2S_ErrorCallback>
}
 8002380:	bd08      	pop	{r3, pc}

08002382 <HAL_I2SEx_TxRxCpltCallback>:
 8002382:	4770      	bx	lr

08002384 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002384:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002386:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002388:	498e      	ldr	r1, [pc, #568]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800238a:	6893      	ldr	r3, [r2, #8]
{
 800238c:	b086      	sub	sp, #24
 800238e:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002390:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002392:	4b8d      	ldr	r3, [pc, #564]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002394:	428a      	cmp	r2, r1
 8002396:	bf18      	it	ne
 8002398:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80023a0:	6851      	ldr	r1, [r2, #4]
 80023a2:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023a8:	6841      	ldr	r1, [r0, #4]
 80023aa:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 80023ae:	f040 8093 	bne.w	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80023b2:	9b00      	ldr	r3, [sp, #0]
 80023b4:	0799      	lsls	r1, r3, #30
 80023b6:	d51a      	bpl.n	80023ee <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 80023b8:	9b02      	ldr	r3, [sp, #8]
 80023ba:	061b      	lsls	r3, r3, #24
 80023bc:	d517      	bpl.n	80023ee <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80023be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023c0:	1c99      	adds	r1, r3, #2
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	6241      	str	r1, [r0, #36]	; 0x24
 80023c6:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80023c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b95b      	cbnz	r3, 80023ee <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023d6:	6853      	ldr	r3, [r2, #4]
 80023d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023dc:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80023de:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b923      	cbnz	r3, 80023ee <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023ea:	f7ff ffca 	bl	8002382 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80023ee:	9b01      	ldr	r3, [sp, #4]
 80023f0:	07d8      	lsls	r0, r3, #31
 80023f2:	d522      	bpl.n	800243a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 80023f4:	9b03      	ldr	r3, [sp, #12]
 80023f6:	0659      	lsls	r1, r3, #25
 80023f8:	d51f      	bpl.n	800243a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80023fa:	6821      	ldr	r1, [r4, #0]
 80023fc:	4a71      	ldr	r2, [pc, #452]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80023fe:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002400:	4291      	cmp	r1, r2
 8002402:	bf18      	it	ne
 8002404:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002408:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800240a:	68d9      	ldr	r1, [r3, #12]
 800240c:	1c90      	adds	r0, r2, #2
 800240e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002410:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8002412:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002414:	3a01      	subs	r2, #1
 8002416:	b292      	uxth	r2, r2
 8002418:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800241a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800241c:	b292      	uxth	r2, r2
 800241e:	b962      	cbnz	r2, 800243a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002426:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002428:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	b92b      	cbnz	r3, 800243a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800242e:	2301      	movs	r3, #1
 8002430:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff ffa4 	bl	8002382 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	065a      	lsls	r2, r3, #25
 800243e:	d522      	bpl.n	8002486 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8002440:	9b03      	ldr	r3, [sp, #12]
 8002442:	069b      	lsls	r3, r3, #26
 8002444:	d51f      	bpl.n	8002486 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	495e      	ldr	r1, [pc, #376]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800244a:	4a5f      	ldr	r2, [pc, #380]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800244c:	428b      	cmp	r3, r1
 800244e:	bf18      	it	ne
 8002450:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002454:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002456:	6851      	ldr	r1, [r2, #4]
 8002458:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800245c:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002464:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002466:	2200      	movs	r2, #0
 8002468:	9204      	str	r2, [sp, #16]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	9204      	str	r2, [sp, #16]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	9304      	str	r3, [sp, #16]
 8002472:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8002474:	2301      	movs	r3, #1
 8002476:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800247a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002482:	f7ff feec 	bl	800225e <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002486:	9b00      	ldr	r3, [sp, #0]
 8002488:	0718      	lsls	r0, r3, #28
 800248a:	f140 8098 	bpl.w	80025be <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 800248e:	9b02      	ldr	r3, [sp, #8]
 8002490:	0699      	lsls	r1, r3, #26
 8002492:	f140 8094 	bpl.w	80025be <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002496:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002498:	494a      	ldr	r1, [pc, #296]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024a0:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024a2:	4a49      	ldr	r2, [pc, #292]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80024a4:	428b      	cmp	r3, r1
 80024a6:	bf18      	it	ne
 80024a8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80024ac:	6851      	ldr	r1, [r2, #4]
 80024ae:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80024b2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80024b4:	2200      	movs	r2, #0
 80024b6:	9205      	str	r2, [sp, #20]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	9305      	str	r3, [sp, #20]
 80024bc:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80024be:	2301      	movs	r3, #1
 80024c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80024c6:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6463      	str	r3, [r4, #68]	; 0x44
}
 80024ce:	b006      	add	sp, #24
 80024d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 80024d4:	f7ff bec3 	b.w	800225e <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80024d8:	9a01      	ldr	r2, [sp, #4]
 80024da:	0792      	lsls	r2, r2, #30
 80024dc:	d51a      	bpl.n	8002514 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 80024de:	9a03      	ldr	r2, [sp, #12]
 80024e0:	0611      	lsls	r1, r2, #24
 80024e2:	d517      	bpl.n	8002514 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80024e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024e6:	1c91      	adds	r1, r2, #2
 80024e8:	8812      	ldrh	r2, [r2, #0]
 80024ea:	6241      	str	r1, [r0, #36]	; 0x24
 80024ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80024ee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024f0:	3a01      	subs	r2, #1
 80024f2:	b292      	uxth	r2, r2
 80024f4:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80024f6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024f8:	b292      	uxth	r2, r2
 80024fa:	b95a      	cbnz	r2, 8002514 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002502:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8002504:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002506:	b29b      	uxth	r3, r3
 8002508:	b923      	cbnz	r3, 8002514 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 800250a:	2301      	movs	r3, #1
 800250c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002510:	f7ff ff37 	bl	8002382 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002514:	9b00      	ldr	r3, [sp, #0]
 8002516:	07da      	lsls	r2, r3, #31
 8002518:	d51c      	bpl.n	8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 800251a:	9b02      	ldr	r3, [sp, #8]
 800251c:	065b      	lsls	r3, r3, #25
 800251e:	d519      	bpl.n	8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002520:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	1c98      	adds	r0, r3, #2
 8002526:	68d1      	ldr	r1, [r2, #12]
 8002528:	62e0      	str	r0, [r4, #44]	; 0x2c
 800252a:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 800252c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800252e:	3b01      	subs	r3, #1
 8002530:	b29b      	uxth	r3, r3
 8002532:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002534:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002536:	b29b      	uxth	r3, r3
 8002538:	b963      	cbnz	r3, 8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800253a:	6853      	ldr	r3, [r2, #4]
 800253c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002540:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8002542:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	b92b      	cbnz	r3, 8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8002548:	2301      	movs	r3, #1
 800254a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800254e:	4620      	mov	r0, r4
 8002550:	f7ff ff17 	bl	8002382 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002554:	9b00      	ldr	r3, [sp, #0]
 8002556:	0658      	lsls	r0, r3, #25
 8002558:	d51b      	bpl.n	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 800255a:	9b02      	ldr	r3, [sp, #8]
 800255c:	0699      	lsls	r1, r3, #26
 800255e:	d518      	bpl.n	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002560:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002562:	4918      	ldr	r1, [pc, #96]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002564:	6853      	ldr	r3, [r2, #4]
 8002566:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800256a:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800256e:	428a      	cmp	r2, r1
 8002570:	bf18      	it	ne
 8002572:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002576:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800257e:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002580:	2301      	movs	r3, #1
 8002582:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002586:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800258e:	f7ff fe66 	bl	800225e <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002592:	9b01      	ldr	r3, [sp, #4]
 8002594:	071a      	lsls	r2, r3, #28
 8002596:	d512      	bpl.n	80025be <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8002598:	9b03      	ldr	r3, [sp, #12]
 800259a:	069b      	lsls	r3, r3, #26
 800259c:	d50f      	bpl.n	80025be <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800259e:	6822      	ldr	r2, [r4, #0]
 80025a0:	4908      	ldr	r1, [pc, #32]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80025a4:	428a      	cmp	r2, r1
 80025a6:	bf18      	it	ne
 80025a8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80025b2:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025b4:	6853      	ldr	r3, [r2, #4]
 80025b6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80025ba:	6053      	str	r3, [r2, #4]
 80025bc:	e77f      	b.n	80024be <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 80025be:	b006      	add	sp, #24
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	bf00      	nop
 80025c4:	40003800 	.word	0x40003800
 80025c8:	40003400 	.word	0x40003400

080025cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d0:	4604      	mov	r4, r0
 80025d2:	b908      	cbnz	r0, 80025d8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e03f      	b.n	8002658 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d8:	6803      	ldr	r3, [r0, #0]
 80025da:	07dd      	lsls	r5, r3, #31
 80025dc:	d410      	bmi.n	8002600 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	0798      	lsls	r0, r3, #30
 80025e2:	d45a      	bmi.n	800269a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	071a      	lsls	r2, r3, #28
 80025e8:	f100 809c 	bmi.w	8002724 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	075b      	lsls	r3, r3, #29
 80025f0:	f100 80ba 	bmi.w	8002768 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f4:	69a0      	ldr	r0, [r4, #24]
 80025f6:	2800      	cmp	r0, #0
 80025f8:	f040 811b 	bne.w	8002832 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80025fc:	2000      	movs	r0, #0
 80025fe:	e02b      	b.n	8002658 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002600:	4ba7      	ldr	r3, [pc, #668]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	f002 020c 	and.w	r2, r2, #12
 8002608:	2a04      	cmp	r2, #4
 800260a:	d007      	beq.n	800261c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002612:	2a08      	cmp	r2, #8
 8002614:	d10a      	bne.n	800262c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0259      	lsls	r1, r3, #9
 800261a:	d507      	bpl.n	800262c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	4ba0      	ldr	r3, [pc, #640]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	039a      	lsls	r2, r3, #14
 8002622:	d5dc      	bpl.n	80025de <HAL_RCC_OscConfig+0x12>
 8002624:	6863      	ldr	r3, [r4, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1d9      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
 800262a:	e7d3      	b.n	80025d4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262c:	6863      	ldr	r3, [r4, #4]
 800262e:	4d9c      	ldr	r5, [pc, #624]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d113      	bne.n	800265e <HAL_RCC_OscConfig+0x92>
 8002636:	682b      	ldr	r3, [r5, #0]
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800263e:	f7fe ffc3 	bl	80015c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4d97      	ldr	r5, [pc, #604]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002644:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	682b      	ldr	r3, [r5, #0]
 8002648:	039b      	lsls	r3, r3, #14
 800264a:	d4c8      	bmi.n	80025de <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe ffbc 	bl	80015c8 <HAL_GetTick>
 8002650:	1b80      	subs	r0, r0, r6
 8002652:	2864      	cmp	r0, #100	; 0x64
 8002654:	d9f7      	bls.n	8002646 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8002656:	2003      	movs	r0, #3
}
 8002658:	b002      	add	sp, #8
 800265a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002662:	d104      	bne.n	800266e <HAL_RCC_OscConfig+0xa2>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266a:	602b      	str	r3, [r5, #0]
 800266c:	e7e3      	b.n	8002636 <HAL_RCC_OscConfig+0x6a>
 800266e:	682a      	ldr	r2, [r5, #0]
 8002670:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002674:	602a      	str	r2, [r5, #0]
 8002676:	682a      	ldr	r2, [r5, #0]
 8002678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1dd      	bne.n	800263e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8002682:	f7fe ffa1 	bl	80015c8 <HAL_GetTick>
 8002686:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	039f      	lsls	r7, r3, #14
 800268c:	d5a7      	bpl.n	80025de <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268e:	f7fe ff9b 	bl	80015c8 <HAL_GetTick>
 8002692:	1b80      	subs	r0, r0, r6
 8002694:	2864      	cmp	r0, #100	; 0x64
 8002696:	d9f7      	bls.n	8002688 <HAL_RCC_OscConfig+0xbc>
 8002698:	e7dd      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269a:	4b81      	ldr	r3, [pc, #516]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	f012 0f0c 	tst.w	r2, #12
 80026a2:	d007      	beq.n	80026b4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026aa:	2a08      	cmp	r2, #8
 80026ac:	d111      	bne.n	80026d2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	025e      	lsls	r6, r3, #9
 80026b2:	d40e      	bmi.n	80026d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b4:	4b7a      	ldr	r3, [pc, #488]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	0795      	lsls	r5, r2, #30
 80026ba:	d502      	bpl.n	80026c2 <HAL_RCC_OscConfig+0xf6>
 80026bc:	68e2      	ldr	r2, [r4, #12]
 80026be:	2a01      	cmp	r2, #1
 80026c0:	d188      	bne.n	80025d4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	6921      	ldr	r1, [r4, #16]
 80026c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80026ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80026ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d0:	e788      	b.n	80025e4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d2:	68e2      	ldr	r2, [r4, #12]
 80026d4:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x2d8>)
 80026d6:	b1b2      	cbz	r2, 8002706 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff74 	bl	80015c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	4d6f      	ldr	r5, [pc, #444]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80026e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	0798      	lsls	r0, r3, #30
 80026e8:	d507      	bpl.n	80026fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	6922      	ldr	r2, [r4, #16]
 80026ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026f6:	602b      	str	r3, [r5, #0]
 80026f8:	e774      	b.n	80025e4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe ff65 	bl	80015c8 <HAL_GetTick>
 80026fe:	1b80      	subs	r0, r0, r6
 8002700:	2802      	cmp	r0, #2
 8002702:	d9ef      	bls.n	80026e4 <HAL_RCC_OscConfig+0x118>
 8002704:	e7a7      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8002706:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002708:	f7fe ff5e 	bl	80015c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270c:	4d64      	ldr	r5, [pc, #400]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800270e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	0799      	lsls	r1, r3, #30
 8002714:	f57f af66 	bpl.w	80025e4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7fe ff56 	bl	80015c8 <HAL_GetTick>
 800271c:	1b80      	subs	r0, r0, r6
 800271e:	2802      	cmp	r0, #2
 8002720:	d9f6      	bls.n	8002710 <HAL_RCC_OscConfig+0x144>
 8002722:	e798      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002724:	6962      	ldr	r2, [r4, #20]
 8002726:	4b60      	ldr	r3, [pc, #384]	; (80028a8 <HAL_RCC_OscConfig+0x2dc>)
 8002728:	b17a      	cbz	r2, 800274a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800272e:	f7fe ff4b 	bl	80015c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4d5b      	ldr	r5, [pc, #364]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002734:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002738:	079f      	lsls	r7, r3, #30
 800273a:	f53f af57 	bmi.w	80025ec <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273e:	f7fe ff43 	bl	80015c8 <HAL_GetTick>
 8002742:	1b80      	subs	r0, r0, r6
 8002744:	2802      	cmp	r0, #2
 8002746:	d9f6      	bls.n	8002736 <HAL_RCC_OscConfig+0x16a>
 8002748:	e785      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800274a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800274c:	f7fe ff3c 	bl	80015c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4d53      	ldr	r5, [pc, #332]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002752:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002756:	0798      	lsls	r0, r3, #30
 8002758:	f57f af48 	bpl.w	80025ec <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275c:	f7fe ff34 	bl	80015c8 <HAL_GetTick>
 8002760:	1b80      	subs	r0, r0, r6
 8002762:	2802      	cmp	r0, #2
 8002764:	d9f6      	bls.n	8002754 <HAL_RCC_OscConfig+0x188>
 8002766:	e776      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002768:	4b4d      	ldr	r3, [pc, #308]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 800276a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002770:	d128      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	9201      	str	r2, [sp, #4]
 8002774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002776:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002786:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4d48      	ldr	r5, [pc, #288]	; (80028ac <HAL_RCC_OscConfig+0x2e0>)
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	05d9      	lsls	r1, r3, #23
 800278e:	d51b      	bpl.n	80027c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002790:	68a3      	ldr	r3, [r4, #8]
 8002792:	4d43      	ldr	r5, [pc, #268]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 8002794:	2b01      	cmp	r3, #1
 8002796:	d127      	bne.n	80027e8 <HAL_RCC_OscConfig+0x21c>
 8002798:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80027a0:	f7fe ff12 	bl	80015c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4d3e      	ldr	r5, [pc, #248]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80027a6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027ae:	079b      	lsls	r3, r3, #30
 80027b0:	d539      	bpl.n	8002826 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80027b2:	2e00      	cmp	r6, #0
 80027b4:	f43f af1e 	beq.w	80025f4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4a39      	ldr	r2, [pc, #228]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 80027ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	e717      	b.n	80025f4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80027c4:	2600      	movs	r6, #0
 80027c6:	e7df      	b.n	8002788 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c8:	682b      	ldr	r3, [r5, #0]
 80027ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80027d0:	f7fe fefa 	bl	80015c8 <HAL_GetTick>
 80027d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	682b      	ldr	r3, [r5, #0]
 80027d8:	05da      	lsls	r2, r3, #23
 80027da:	d4d9      	bmi.n	8002790 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027dc:	f7fe fef4 	bl	80015c8 <HAL_GetTick>
 80027e0:	1bc0      	subs	r0, r0, r7
 80027e2:	2802      	cmp	r0, #2
 80027e4:	d9f7      	bls.n	80027d6 <HAL_RCC_OscConfig+0x20a>
 80027e6:	e736      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d104      	bne.n	80027f6 <HAL_RCC_OscConfig+0x22a>
 80027ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	672b      	str	r3, [r5, #112]	; 0x70
 80027f4:	e7d0      	b.n	8002798 <HAL_RCC_OscConfig+0x1cc>
 80027f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	672a      	str	r2, [r5, #112]	; 0x70
 80027fe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002800:	f022 0204 	bic.w	r2, r2, #4
 8002804:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ca      	bne.n	80027a0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800280a:	f7fe fedd 	bl	80015c8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002812:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002816:	0798      	lsls	r0, r3, #30
 8002818:	d5cb      	bpl.n	80027b2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fed5 	bl	80015c8 <HAL_GetTick>
 800281e:	1bc0      	subs	r0, r0, r7
 8002820:	4540      	cmp	r0, r8
 8002822:	d9f7      	bls.n	8002814 <HAL_RCC_OscConfig+0x248>
 8002824:	e717      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fecf 	bl	80015c8 <HAL_GetTick>
 800282a:	1bc0      	subs	r0, r0, r7
 800282c:	4540      	cmp	r0, r8
 800282e:	d9bd      	bls.n	80027ac <HAL_RCC_OscConfig+0x1e0>
 8002830:	e711      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002832:	4d1b      	ldr	r5, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
 8002834:	68ab      	ldr	r3, [r5, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	d047      	beq.n	80028ce <HAL_RCC_OscConfig+0x302>
 800283e:	4e1c      	ldr	r6, [pc, #112]	; (80028b0 <HAL_RCC_OscConfig+0x2e4>)
 8002840:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002844:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002846:	d135      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002848:	f7fe febe 	bl	80015c8 <HAL_GetTick>
 800284c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	682b      	ldr	r3, [r5, #0]
 8002850:	0199      	lsls	r1, r3, #6
 8002852:	d41e      	bmi.n	8002892 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002854:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002858:	4313      	orrs	r3, r2
 800285a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800285c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002860:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002862:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002866:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	4c0d      	ldr	r4, [pc, #52]	; (80028a0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286a:	0852      	lsrs	r2, r2, #1
 800286c:	3a01      	subs	r2, #1
 800286e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002872:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002874:	2301      	movs	r3, #1
 8002876:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002878:	f7fe fea6 	bl	80015c8 <HAL_GetTick>
 800287c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	019a      	lsls	r2, r3, #6
 8002882:	f53f aebb 	bmi.w	80025fc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fe9f 	bl	80015c8 <HAL_GetTick>
 800288a:	1b40      	subs	r0, r0, r5
 800288c:	2802      	cmp	r0, #2
 800288e:	d9f6      	bls.n	800287e <HAL_RCC_OscConfig+0x2b2>
 8002890:	e6e1      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe fe99 	bl	80015c8 <HAL_GetTick>
 8002896:	1bc0      	subs	r0, r0, r7
 8002898:	2802      	cmp	r0, #2
 800289a:	d9d8      	bls.n	800284e <HAL_RCC_OscConfig+0x282>
 800289c:	e6db      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	42470000 	.word	0x42470000
 80028a8:	42470e80 	.word	0x42470e80
 80028ac:	40007000 	.word	0x40007000
 80028b0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80028b4:	f7fe fe88 	bl	80015c8 <HAL_GetTick>
 80028b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	682b      	ldr	r3, [r5, #0]
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	f57f ae9d 	bpl.w	80025fc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fe81 	bl	80015c8 <HAL_GetTick>
 80028c6:	1b00      	subs	r0, r0, r4
 80028c8:	2802      	cmp	r0, #2
 80028ca:	d9f6      	bls.n	80028ba <HAL_RCC_OscConfig+0x2ee>
 80028cc:	e6c3      	b.n	8002656 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ce:	2801      	cmp	r0, #1
 80028d0:	f43f aec2 	beq.w	8002658 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 80028d4:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	69e3      	ldr	r3, [r4, #28]
 80028d8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80028dc:	429a      	cmp	r2, r3
 80028de:	f47f ae79 	bne.w	80025d4 <HAL_RCC_OscConfig+0x8>
 80028e2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e8:	4293      	cmp	r3, r2
 80028ea:	f47f ae73 	bne.w	80025d4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f4:	4003      	ands	r3, r0
 80028f6:	4293      	cmp	r3, r2
 80028f8:	f47f ae6c 	bne.w	80025d4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028fe:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002902:	4293      	cmp	r3, r2
 8002904:	f47f ae66 	bne.w	80025d4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800290a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 800290e:	1ac0      	subs	r0, r0, r3
 8002910:	bf18      	it	ne
 8002912:	2001      	movne	r0, #1
 8002914:	e6a0      	b.n	8002658 <HAL_RCC_OscConfig+0x8c>
 8002916:	bf00      	nop

08002918 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002918:	4913      	ldr	r1, [pc, #76]	; (8002968 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800291a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291c:	688b      	ldr	r3, [r1, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b04      	cmp	r3, #4
 8002924:	d003      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x16>
 8002926:	2b08      	cmp	r3, #8
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800292a:	4810      	ldr	r0, [pc, #64]	; (800296c <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800292c:	e000      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8002930:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002932:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002934:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002936:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002938:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293c:	bf14      	ite	ne
 800293e:	480c      	ldrne	r0, [pc, #48]	; (8002970 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002940:	480a      	ldreq	r0, [pc, #40]	; (800296c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002946:	bf18      	it	ne
 8002948:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	fba1 0100 	umull	r0, r1, r1, r0
 8002952:	f7fd fc39 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_RCC_GetSysClockFreq+0x50>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002962:	fbb0 f0f3 	udiv	r0, r0, r3
 8002966:	e7e3      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x18>
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400
 8002970:	017d7840 	.word	0x017d7840

08002974 <HAL_RCC_ClockConfig>:
{
 8002974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002978:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800297a:	4604      	mov	r4, r0
 800297c:	b910      	cbnz	r0, 8002984 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800297e:	2001      	movs	r0, #1
}
 8002980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_RCC_ClockConfig+0x120>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	f002 020f 	and.w	r2, r2, #15
 800298c:	428a      	cmp	r2, r1
 800298e:	d328      	bcc.n	80029e2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	6821      	ldr	r1, [r4, #0]
 8002992:	078f      	lsls	r7, r1, #30
 8002994:	d42d      	bmi.n	80029f2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	07c8      	lsls	r0, r1, #31
 8002998:	d440      	bmi.n	8002a1c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800299a:	4b3e      	ldr	r3, [pc, #248]	; (8002a94 <HAL_RCC_ClockConfig+0x120>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	f002 020f 	and.w	r2, r2, #15
 80029a2:	42aa      	cmp	r2, r5
 80029a4:	d865      	bhi.n	8002a72 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	0751      	lsls	r1, r2, #29
 80029aa:	d46b      	bmi.n	8002a84 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	0713      	lsls	r3, r2, #28
 80029ae:	d507      	bpl.n	80029c0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b0:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <HAL_RCC_ClockConfig+0x124>)
 80029b2:	6921      	ldr	r1, [r4, #16]
 80029b4:	6893      	ldr	r3, [r2, #8]
 80029b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029c0:	f7ff ffaa 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80029c4:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_ClockConfig+0x124>)
 80029c6:	4a35      	ldr	r2, [pc, #212]	; (8002a9c <HAL_RCC_ClockConfig+0x128>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	40d8      	lsrs	r0, r3
 80029d2:	4b33      	ldr	r3, [pc, #204]	; (8002aa0 <HAL_RCC_ClockConfig+0x12c>)
 80029d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80029d6:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <HAL_RCC_ClockConfig+0x130>)
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	f7fe fdab 	bl	8001534 <HAL_InitTick>
  return HAL_OK;
 80029de:	2000      	movs	r0, #0
 80029e0:	e7ce      	b.n	8002980 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	b2ca      	uxtb	r2, r1
 80029e4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d1c6      	bne.n	800297e <HAL_RCC_ClockConfig+0xa>
 80029f0:	e7ce      	b.n	8002990 <HAL_RCC_ClockConfig+0x1c>
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	bf1e      	ittt	ne
 80029fa:	689a      	ldrne	r2, [r3, #8]
 80029fc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002a00:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a02:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	bf42      	ittt	mi
 8002a06:	689a      	ldrmi	r2, [r3, #8]
 8002a08:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002a0c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	68a0      	ldr	r0, [r4, #8]
 8002a12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a16:	4302      	orrs	r2, r0
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	e7bc      	b.n	8002996 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1c:	6862      	ldr	r2, [r4, #4]
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_ClockConfig+0x124>)
 8002a20:	2a01      	cmp	r2, #1
 8002a22:	d11c      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	d0a8      	beq.n	800297e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2c:	4e1a      	ldr	r6, [pc, #104]	; (8002a98 <HAL_RCC_ClockConfig+0x124>)
 8002a2e:	68b3      	ldr	r3, [r6, #8]
 8002a30:	f023 0303 	bic.w	r3, r3, #3
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a38:	f7fe fdc6 	bl	80015c8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	68b3      	ldr	r3, [r6, #8]
 8002a44:	6862      	ldr	r2, [r4, #4]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a4e:	d0a4      	beq.n	800299a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fdba 	bl	80015c8 <HAL_GetTick>
 8002a54:	1bc0      	subs	r0, r0, r7
 8002a56:	4540      	cmp	r0, r8
 8002a58:	d9f3      	bls.n	8002a42 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	e790      	b.n	8002980 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5e:	1e91      	subs	r1, r2, #2
 8002a60:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a62:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a64:	d802      	bhi.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a6a:	e7de      	b.n	8002a2a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	f013 0f02 	tst.w	r3, #2
 8002a70:	e7db      	b.n	8002a2a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	b2ea      	uxtb	r2, r5
 8002a74:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	42ab      	cmp	r3, r5
 8002a7e:	f47f af7e 	bne.w	800297e <HAL_RCC_ClockConfig+0xa>
 8002a82:	e790      	b.n	80029a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4904      	ldr	r1, [pc, #16]	; (8002a98 <HAL_RCC_ClockConfig+0x124>)
 8002a86:	68e0      	ldr	r0, [r4, #12]
 8002a88:	688b      	ldr	r3, [r1, #8]
 8002a8a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002a8e:	4303      	orrs	r3, r0
 8002a90:	608b      	str	r3, [r1, #8]
 8002a92:	e78b      	b.n	80029ac <HAL_RCC_ClockConfig+0x38>
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	0800491c 	.word	0x0800491c
 8002aa0:	20000078 	.word	0x20000078
 8002aa4:	20000080 	.word	0x20000080

08002aa8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x14>)
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	4a03      	ldr	r2, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ab6:	6810      	ldr	r0, [r2, #0]
}
 8002ab8:	40d8      	lsrs	r0, r3
 8002aba:	4770      	bx	lr
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	0800492c 	.word	0x0800492c
 8002ac4:	20000078 	.word	0x20000078

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x14>)
 8002aca:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ad6:	6810      	ldr	r0, [r2, #0]
}
 8002ad8:	40d8      	lsrs	r0, r3
 8002ada:	4770      	bx	lr
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	0800492c 	.word	0x0800492c
 8002ae4:	20000078 	.word	0x20000078

08002ae8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ae8:	6803      	ldr	r3, [r0, #0]
 8002aea:	f013 0f05 	tst.w	r3, #5
{
 8002aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002af0:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002af2:	d105      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002af4:	6828      	ldr	r0, [r5, #0]
 8002af6:	f010 0002 	ands.w	r0, r0, #2
 8002afa:	d128      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002afc:	b003      	add	sp, #12
 8002afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002b00:	4c41      	ldr	r4, [pc, #260]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b02:	4e42      	ldr	r6, [pc, #264]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002b08:	f7fe fd5e 	bl	80015c8 <HAL_GetTick>
 8002b0c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b0e:	6833      	ldr	r3, [r6, #0]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	d415      	bmi.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002b14:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8002b18:	071b      	lsls	r3, r3, #28
 8002b1a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b1e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002b22:	2301      	movs	r3, #1
 8002b24:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002b26:	f7fe fd4f 	bl	80015c8 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b2a:	4c38      	ldr	r4, [pc, #224]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8002b2c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	0118      	lsls	r0, r3, #4
 8002b32:	d4df      	bmi.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b34:	f7fe fd48 	bl	80015c8 <HAL_GetTick>
 8002b38:	1b80      	subs	r0, r0, r6
 8002b3a:	2802      	cmp	r0, #2
 8002b3c:	d9f7      	bls.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002b3e:	e004      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b40:	f7fe fd42 	bl	80015c8 <HAL_GetTick>
 8002b44:	1bc0      	subs	r0, r0, r7
 8002b46:	2802      	cmp	r0, #2
 8002b48:	d9e1      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	e7d6      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002b54:	4c2e      	ldr	r4, [pc, #184]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002b70:	f7fe fd2a 	bl	80015c8 <HAL_GetTick>
 8002b74:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	05d9      	lsls	r1, r3, #23
 8002b7a:	d51b      	bpl.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7c:	4c23      	ldr	r4, [pc, #140]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002b7e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b80:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b84:	d11c      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b86:	68eb      	ldr	r3, [r5, #12]
 8002b88:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002b8c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002b92:	d134      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002b94:	6891      	ldr	r1, [r2, #8]
 8002b96:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002b9a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002b9e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002ba2:	4301      	orrs	r1, r0
 8002ba4:	6091      	str	r1, [r2, #8]
 8002ba6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	e7a3      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bb4:	f7fe fd08 	bl	80015c8 <HAL_GetTick>
 8002bb8:	1b80      	subs	r0, r0, r6
 8002bba:	2802      	cmp	r0, #2
 8002bbc:	d9db      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002bbe:	e7c4      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc0:	68ea      	ldr	r2, [r5, #12]
 8002bc2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d0dd      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bca:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002bda:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bdc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002bde:	07da      	lsls	r2, r3, #31
 8002be0:	d5d1      	bpl.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8002be2:	f7fe fcf1 	bl	80015c8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002bea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002bee:	079b      	lsls	r3, r3, #30
 8002bf0:	d4c9      	bmi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe fce9 	bl	80015c8 <HAL_GetTick>
 8002bf6:	1b80      	subs	r0, r0, r6
 8002bf8:	42b8      	cmp	r0, r7
 8002bfa:	d9f7      	bls.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002bfc:	e7a5      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfe:	6891      	ldr	r1, [r2, #8]
 8002c00:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002c04:	e7ce      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002c06:	bf00      	nop
 8002c08:	42470068 	.word	0x42470068
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40007000 	.word	0x40007000
 8002c14:	42470e40 	.word	0x42470e40

08002c18 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002c18:	2801      	cmp	r0, #1
 8002c1a:	d120      	bne.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8002c1e:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002c20:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002c24:	d004      	beq.n	8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002c26:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002c28:	480f      	ldr	r0, [pc, #60]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002c2a:	bf18      	it	ne
 8002c2c:	2000      	movne	r0, #0
 8002c2e:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c30:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c32:	490c      	ldr	r1, [pc, #48]	; (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c34:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c36:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c38:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c3c:	bf4c      	ite	mi
 8002c3e:	4b0b      	ldrmi	r3, [pc, #44]	; (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c40:	4b0b      	ldrpl	r3, [pc, #44]	; (8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c42:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c46:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002c4a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c4e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002c52:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002c54:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8002c58:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8002c5c:	4770      	bx	lr
          frequency = 0U;
 8002c5e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	00bb8000 	.word	0x00bb8000
 8002c6c:	017d7840 	.word	0x017d7840
 8002c70:	00f42400 	.word	0x00f42400

08002c74 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002c74:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002c76:	4604      	mov	r4, r0
 8002c78:	b190      	cbz	r0, 8002ca0 <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002c7a:	7943      	ldrb	r3, [r0, #5]
 8002c7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c80:	b913      	cbnz	r3, 8002c88 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002c82:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002c84:	f7fe fb20 	bl	80012c8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c88:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002c8a:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c8c:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c96:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c9c:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 8002c9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	e7fc      	b.n	8002c9e <HAL_RNG_Init+0x2a>

08002ca4 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	460e      	mov	r6, r1
 8002caa:	4615      	mov	r5, r2
 8002cac:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cae:	6821      	ldr	r1, [r4, #0]
 8002cb0:	688a      	ldr	r2, [r1, #8]
 8002cb2:	ea36 0302 	bics.w	r3, r6, r2
 8002cb6:	d001      	beq.n	8002cbc <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e02d      	b.n	8002d18 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002cbc:	1c6b      	adds	r3, r5, #1
 8002cbe:	d0f7      	beq.n	8002cb0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cc0:	f7fe fc82 	bl	80015c8 <HAL_GetTick>
 8002cc4:	1bc0      	subs	r0, r0, r7
 8002cc6:	4285      	cmp	r5, r0
 8002cc8:	d8f1      	bhi.n	8002cae <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cd2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd4:	6862      	ldr	r2, [r4, #4]
 8002cd6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002cda:	d10a      	bne.n	8002cf2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 8002cdc:	68a2      	ldr	r2, [r4, #8]
 8002cde:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ce2:	d002      	beq.n	8002cea <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ce4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ce8:	d103      	bne.n	8002cf2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cf2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002cf4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002cf8:	d107      	bne.n	8002d0a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d08:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002d10:	2300      	movs	r3, #0
 8002d12:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002d16:	2003      	movs	r0, #3
}
 8002d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d1e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d20:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <SPI_EndRxTxTransaction+0x50>)
 8002d22:	4e13      	ldr	r6, [pc, #76]	; (8002d70 <SPI_EndRxTxTransaction+0x54>)
 8002d24:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d26:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d28:	fbb5 f6f6 	udiv	r6, r5, r6
 8002d2c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002d30:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d32:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8002d36:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d38:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3a:	d10b      	bne.n	8002d54 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	f7ff ffb0 	bl	8002ca4 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8002d44:	b178      	cbz	r0, 8002d66 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d48:	f043 0320 	orr.w	r3, r3, #32
 8002d4c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d4e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8002d50:	b002      	add	sp, #8
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8002d54:	9b01      	ldr	r3, [sp, #4]
 8002d56:	b133      	cbz	r3, 8002d66 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8002d58:	9b01      	ldr	r3, [sp, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	d4f6      	bmi.n	8002d54 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8002d66:	2000      	movs	r0, #0
 8002d68:	e7f2      	b.n	8002d50 <SPI_EndRxTxTransaction+0x34>
 8002d6a:	bf00      	nop
 8002d6c:	20000078 	.word	0x20000078
 8002d70:	016e3600 	.word	0x016e3600

08002d74 <HAL_SPI_Init>:
{
 8002d74:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002d76:	4604      	mov	r4, r0
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d036      	beq.n	8002dea <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d80:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002d84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d88:	b91b      	cbnz	r3, 8002d92 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002d8a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002d8e:	f7fe fab3 	bl	80012f8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002d92:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d94:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d96:	2302      	movs	r3, #2
 8002d98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002d9c:	680b      	ldr	r3, [r1, #0]
 8002d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002da4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8002da8:	4303      	orrs	r3, r0
 8002daa:	68e0      	ldr	r0, [r4, #12]
 8002dac:	4303      	orrs	r3, r0
 8002dae:	6920      	ldr	r0, [r4, #16]
 8002db0:	4303      	orrs	r3, r0
 8002db2:	6960      	ldr	r0, [r4, #20]
 8002db4:	4303      	orrs	r3, r0
 8002db6:	69e0      	ldr	r0, [r4, #28]
 8002db8:	4303      	orrs	r3, r0
 8002dba:	6a20      	ldr	r0, [r4, #32]
 8002dbc:	4303      	orrs	r3, r0
 8002dbe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002dc6:	4303      	orrs	r3, r0
 8002dc8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002dca:	0c12      	lsrs	r2, r2, #16
 8002dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dce:	f002 0204 	and.w	r2, r2, #4
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dd6:	69cb      	ldr	r3, [r1, #28]
 8002dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ddc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dde:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002de0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002de4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002de8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002dea:	2001      	movs	r0, #1
 8002dec:	e7fc      	b.n	8002de8 <HAL_SPI_Init+0x74>

08002dee <HAL_SPI_Transmit>:
{
 8002dee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002df2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002df4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002df8:	2b01      	cmp	r3, #1
{
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002e00:	f000 809b 	beq.w	8002f3a <HAL_SPI_Transmit+0x14c>
 8002e04:	2301      	movs	r3, #1
 8002e06:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002e0a:	f7fe fbdd 	bl	80015c8 <HAL_GetTick>
 8002e0e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e10:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002e14:	b2c0      	uxtb	r0, r0
 8002e16:	2801      	cmp	r0, #1
 8002e18:	f040 808d 	bne.w	8002f36 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8002e1c:	2d00      	cmp	r5, #0
 8002e1e:	d05d      	beq.n	8002edc <HAL_SPI_Transmit+0xee>
 8002e20:	f1b8 0f00 	cmp.w	r8, #0
 8002e24:	d05a      	beq.n	8002edc <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e26:	2303      	movs	r3, #3
 8002e28:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e2c:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2e:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e30:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e32:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e34:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002e38:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e3a:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002e3c:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8002e40:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e42:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002e48:	bf08      	it	eq
 8002e4a:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8002e4c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002e50:	bf04      	itt	eq
 8002e52:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002e56:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e58:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e5a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e5c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002e5e:	bf5e      	ittt	pl
 8002e60:	6803      	ldrpl	r3, [r0, #0]
 8002e62:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002e66:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e68:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002e6c:	6863      	ldr	r3, [r4, #4]
 8002e6e:	d13e      	bne.n	8002eee <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e70:	b113      	cbz	r3, 8002e78 <HAL_SPI_Transmit+0x8a>
 8002e72:	f1b8 0f01 	cmp.w	r8, #1
 8002e76:	d107      	bne.n	8002e88 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e78:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002e7c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002e80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002e88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b9a3      	cbnz	r3, 8002eb8 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e8e:	463a      	mov	r2, r7
 8002e90:	4631      	mov	r1, r6
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7ff ff42 	bl	8002d1c <SPI_EndRxTxTransaction>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d149      	bne.n	8002f30 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e9c:	68a3      	ldr	r3, [r4, #8]
 8002e9e:	b933      	cbnz	r3, 8002eae <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	9201      	str	r2, [sp, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002eb0:	3000      	adds	r0, #0
 8002eb2:	bf18      	it	ne
 8002eb4:	2001      	movne	r0, #1
error:
 8002eb6:	e011      	b.n	8002edc <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	6893      	ldr	r3, [r2, #8]
 8002ebc:	0798      	lsls	r0, r3, #30
 8002ebe:	d505      	bpl.n	8002ecc <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ec2:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002ec6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec8:	6323      	str	r3, [r4, #48]	; 0x30
 8002eca:	e7d9      	b.n	8002e80 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ecc:	f7fe fb7c 	bl	80015c8 <HAL_GetTick>
 8002ed0:	1bc0      	subs	r0, r0, r7
 8002ed2:	42b0      	cmp	r0, r6
 8002ed4:	d3d8      	bcc.n	8002e88 <HAL_SPI_Transmit+0x9a>
 8002ed6:	1c71      	adds	r1, r6, #1
 8002ed8:	d0d6      	beq.n	8002e88 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8002eda:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002ee8:	b002      	add	sp, #8
 8002eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eee:	b113      	cbz	r3, 8002ef6 <HAL_SPI_Transmit+0x108>
 8002ef0:	f1b8 0f01 	cmp.w	r8, #1
 8002ef4:	d108      	bne.n	8002f08 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef6:	782b      	ldrb	r3, [r5, #0]
 8002ef8:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002efa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002efc:	3301      	adds	r3, #1
 8002efe:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002f00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002f08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0be      	beq.n	8002e8e <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	0792      	lsls	r2, r2, #30
 8002f16:	d503      	bpl.n	8002f20 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f1a:	7812      	ldrb	r2, [r2, #0]
 8002f1c:	731a      	strb	r2, [r3, #12]
 8002f1e:	e7ec      	b.n	8002efa <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f20:	f7fe fb52 	bl	80015c8 <HAL_GetTick>
 8002f24:	1bc0      	subs	r0, r0, r7
 8002f26:	42b0      	cmp	r0, r6
 8002f28:	d3ee      	bcc.n	8002f08 <HAL_SPI_Transmit+0x11a>
 8002f2a:	1c73      	adds	r3, r6, #1
 8002f2c:	d0ec      	beq.n	8002f08 <HAL_SPI_Transmit+0x11a>
 8002f2e:	e7d4      	b.n	8002eda <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f30:	2320      	movs	r3, #32
 8002f32:	6563      	str	r3, [r4, #84]	; 0x54
 8002f34:	e7b2      	b.n	8002e9c <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002f36:	2002      	movs	r0, #2
 8002f38:	e7d0      	b.n	8002edc <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002f3a:	2002      	movs	r0, #2
 8002f3c:	e7d4      	b.n	8002ee8 <HAL_SPI_Transmit+0xfa>

08002f3e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f3e:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f40:	b189      	cbz	r1, 8002f66 <HAL_TIM_Encoder_Start+0x28>
 8002f42:	2904      	cmp	r1, #4
 8002f44:	d007      	beq.n	8002f56 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f46:	6a1a      	ldr	r2, [r3, #32]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	f042 0210 	orr.w	r2, r2, #16
 8002f64:	e006      	b.n	8002f74 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	2000      	movs	r0, #0
 8002f80:	4770      	bx	lr
	...

08002f84 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f84:	4a30      	ldr	r2, [pc, #192]	; (8003048 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002f86:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f88:	4290      	cmp	r0, r2
 8002f8a:	d012      	beq.n	8002fb2 <TIM_Base_SetConfig+0x2e>
 8002f8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f90:	d00f      	beq.n	8002fb2 <TIM_Base_SetConfig+0x2e>
 8002f92:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f96:	4290      	cmp	r0, r2
 8002f98:	d00b      	beq.n	8002fb2 <TIM_Base_SetConfig+0x2e>
 8002f9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f9e:	4290      	cmp	r0, r2
 8002fa0:	d007      	beq.n	8002fb2 <TIM_Base_SetConfig+0x2e>
 8002fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa6:	4290      	cmp	r0, r2
 8002fa8:	d003      	beq.n	8002fb2 <TIM_Base_SetConfig+0x2e>
 8002faa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fae:	4290      	cmp	r0, r2
 8002fb0:	d119      	bne.n	8002fe6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8002fb2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fb8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fba:	4a23      	ldr	r2, [pc, #140]	; (8003048 <TIM_Base_SetConfig+0xc4>)
 8002fbc:	4290      	cmp	r0, r2
 8002fbe:	d029      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002fc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fc4:	d026      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002fc6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002fca:	4290      	cmp	r0, r2
 8002fcc:	d022      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fd2:	4290      	cmp	r0, r2
 8002fd4:	d01e      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fda:	4290      	cmp	r0, r2
 8002fdc:	d01a      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002fde:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fe2:	4290      	cmp	r0, r2
 8002fe4:	d016      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <TIM_Base_SetConfig+0xc8>)
 8002fe8:	4290      	cmp	r0, r2
 8002fea:	d013      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002fec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ff0:	4290      	cmp	r0, r2
 8002ff2:	d00f      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002ff4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ff8:	4290      	cmp	r0, r2
 8002ffa:	d00b      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8002ffc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003000:	4290      	cmp	r0, r2
 8003002:	d007      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 8003004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003008:	4290      	cmp	r0, r2
 800300a:	d003      	beq.n	8003014 <TIM_Base_SetConfig+0x90>
 800300c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003010:	4290      	cmp	r0, r2
 8003012:	d103      	bne.n	800301c <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003014:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301c:	694a      	ldr	r2, [r1, #20]
 800301e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003022:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003024:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003026:	688b      	ldr	r3, [r1, #8]
 8003028:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800302a:	680b      	ldr	r3, [r1, #0]
 800302c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <TIM_Base_SetConfig+0xc4>)
 8003030:	4298      	cmp	r0, r3
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0xb8>
 8003034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003038:	4298      	cmp	r0, r3
 800303a:	d101      	bne.n	8003040 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800303c:	690b      	ldr	r3, [r1, #16]
 800303e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003040:	2301      	movs	r3, #1
 8003042:	6143      	str	r3, [r0, #20]
}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIM_Encoder_Init>:
{
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	460c      	mov	r4, r1
  if (htim == NULL)
 8003054:	4605      	mov	r5, r0
 8003056:	2800      	cmp	r0, #0
 8003058:	d043      	beq.n	80030e2 <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800305e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003062:	b91b      	cbnz	r3, 800306c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8003064:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003068:	f7fe f97c 	bl	8001364 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800306c:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 800306e:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003070:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003078:	6883      	ldr	r3, [r0, #8]
 800307a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800307e:	f023 0307 	bic.w	r3, r3, #7
 8003082:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003084:	f7ff ff7e 	bl	8002f84 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003088:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800308a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800308c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800308e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003090:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8003092:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003094:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003096:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003098:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800309c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030a0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80030a4:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030a6:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80030aa:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80030ac:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030b4:	68e1      	ldr	r1, [r4, #12]
 80030b6:	430b      	orrs	r3, r1
 80030b8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030ba:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80030be:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80030c2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030c4:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80030c6:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030ca:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80030cc:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030ce:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80030d2:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030d4:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 80030d6:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80030d8:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 80030da:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80030de:	2000      	movs	r0, #0
}
 80030e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80030e2:	2001      	movs	r0, #1
 80030e4:	e7fc      	b.n	80030e0 <HAL_TIM_Encoder_Init+0x90>
	...

080030e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
{
 80030ee:	b530      	push	{r4, r5, lr}
 80030f0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80030f4:	d035      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030fa:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030fc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80030fe:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003100:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8003104:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003106:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8003108:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800310c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800310e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003110:	4c15      	ldr	r4, [pc, #84]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8003112:	42a3      	cmp	r3, r4
 8003114:	d01a      	beq.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d017      	beq.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800311c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8003120:	42a3      	cmp	r3, r4
 8003122:	d013      	beq.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003124:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003128:	42a3      	cmp	r3, r4
 800312a:	d00f      	beq.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800312c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003130:	42a3      	cmp	r3, r4
 8003132:	d00b      	beq.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003134:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003138:	42a3      	cmp	r3, r4
 800313a:	d007      	beq.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800313c:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003140:	42a3      	cmp	r3, r4
 8003142:	d003      	beq.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003144:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003148:	42a3      	cmp	r3, r4
 800314a:	d104      	bne.n	8003156 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800314e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003152:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003156:	2301      	movs	r3, #1
 8003158:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800315c:	2300      	movs	r3, #0
 800315e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003162:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003164:	bd30      	pop	{r4, r5, pc}
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000

0800316c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316c:	6803      	ldr	r3, [r0, #0]
 800316e:	68c1      	ldr	r1, [r0, #12]
 8003170:	691a      	ldr	r2, [r3, #16]
{
 8003172:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003174:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8003178:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317a:	430a      	orrs	r2, r1
 800317c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800317e:	6925      	ldr	r5, [r4, #16]
 8003180:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003182:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003184:	69c0      	ldr	r0, [r0, #28]
 8003186:	432a      	orrs	r2, r5
 8003188:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800318a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8003190:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003194:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003196:	430a      	orrs	r2, r1
 8003198:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	69a1      	ldr	r1, [r4, #24]
 800319e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031a2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031a8:	615a      	str	r2, [r3, #20]
 80031aa:	4a26      	ldr	r2, [pc, #152]	; (8003244 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ac:	d129      	bne.n	8003202 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <UART_SetConfig+0x4e>
 80031b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d120      	bne.n	80031fc <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031ba:	f7ff fc85 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031be:	6862      	ldr	r2, [r4, #4]
 80031c0:	2600      	movs	r6, #0
 80031c2:	1892      	adds	r2, r2, r2
 80031c4:	f04f 0119 	mov.w	r1, #25
 80031c8:	eb46 0306 	adc.w	r3, r6, r6
 80031cc:	fba0 0101 	umull	r0, r1, r0, r1
 80031d0:	f7fc fffa 	bl	80001c8 <__aeabi_uldivmod>
 80031d4:	2164      	movs	r1, #100	; 0x64
 80031d6:	fbb0 f5f1 	udiv	r5, r0, r1
 80031da:	fb01 0315 	mls	r3, r1, r5, r0
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	3332      	adds	r3, #50	; 0x32
 80031e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031e6:	f003 0207 	and.w	r2, r3, #7
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	6821      	ldr	r1, [r4, #0]
 80031ee:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80031f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031f6:	4413      	add	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80031fc:	f7ff fc54 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8003200:	e7dd      	b.n	80031be <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003202:	4293      	cmp	r3, r2
 8003204:	d002      	beq.n	800320c <UART_SetConfig+0xa0>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <UART_SetConfig+0xdc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d117      	bne.n	800323c <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 800320c:	f7ff fc5c 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003210:	6863      	ldr	r3, [r4, #4]
 8003212:	2119      	movs	r1, #25
 8003214:	009a      	lsls	r2, r3, #2
 8003216:	fba0 0101 	umull	r0, r1, r0, r1
 800321a:	0f9b      	lsrs	r3, r3, #30
 800321c:	f7fc ffd4 	bl	80001c8 <__aeabi_uldivmod>
 8003220:	2264      	movs	r2, #100	; 0x64
 8003222:	fbb0 f1f2 	udiv	r1, r0, r2
 8003226:	fb02 0311 	mls	r3, r2, r1, r0
 800322a:	6824      	ldr	r4, [r4, #0]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	3332      	adds	r3, #50	; 0x32
 8003230:	fbb3 f3f2 	udiv	r3, r3, r2
 8003234:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003238:	60a3      	str	r3, [r4, #8]
}
 800323a:	e7de      	b.n	80031fa <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 800323c:	f7ff fc34 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8003240:	e7e6      	b.n	8003210 <UART_SetConfig+0xa4>
 8003242:	bf00      	nop
 8003244:	40011000 	.word	0x40011000
 8003248:	40011400 	.word	0x40011400

0800324c <HAL_UART_Init>:
{
 800324c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800324e:	4604      	mov	r4, r0
 8003250:	b340      	cbz	r0, 80032a4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003252:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800325a:	b91b      	cbnz	r3, 8003264 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800325c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003260:	f7fe f8b6 	bl	80013d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003264:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003266:	2324      	movs	r3, #36	; 0x24
 8003268:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800326c:	68d3      	ldr	r3, [r2, #12]
 800326e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003272:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003274:	4620      	mov	r0, r4
 8003276:	f7ff ff79 	bl	800316c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003282:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800328a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003292:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003296:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800329a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800329e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80032a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80032a4:	2001      	movs	r0, #1
 80032a6:	e7fc      	b.n	80032a2 <HAL_UART_Init+0x56>

080032a8 <_ZN10OscillatorC1Eff>:
#include "oscillator.h"

Oscillator::Oscillator(float_t a, float_t f)
{
    amp = a;
 80032a8:	ed80 0a00 	vstr	s0, [r0]
    last_amp = a;
 80032ac:	ed80 0a01 	vstr	s0, [r0, #4]
    freq = f;
 80032b0:	edc0 0a02 	vstr	s1, [r0, #8]
    Init();
};

void Oscillator::Init()
{
    phase = 0;
 80032b4:	2200      	movs	r2, #0
 80032b6:	60c2      	str	r2, [r0, #12]
    out = 0;
 80032b8:	61c2      	str	r2, [r0, #28]
    modInd = 0;
 80032ba:	6142      	str	r2, [r0, #20]
    mul = 1;
 80032bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80032c0:	6182      	str	r2, [r0, #24]
};
 80032c2:	4770      	bx	lr

080032c4 <_ZN14SoundGenerator4SineEP10Oscillator>:

SoundGenerator::SoundGenerator() {

}

float SoundGenerator::Sine(Oscillator *osc) {
 80032c4:	b510      	push	{r4, lr}
 80032c6:	ed2d 8b02 	vpush	{d8}
 80032ca:	4604      	mov	r4, r0
	float_t z;

	while (osc->phase < 0) // keep phase in [0, 2pi]
 80032cc:	edd0 7a03 	vldr	s15, [r0, #12]
 80032d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	d50a      	bpl.n	80032f0 <_ZN14SoundGenerator4SineEP10Oscillator+0x2c>
		osc->phase += _2PI;
 80032da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003350 <_ZN14SoundGenerator4SineEP10Oscillator+0x8c>
 80032de:	ee77 7a87 	vadd.f32	s15, s15, s14
	while (osc->phase < 0) // keep phase in [0, 2pi]
 80032e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	d4f8      	bmi.n	80032de <_ZN14SoundGenerator4SineEP10Oscillator+0x1a>
 80032ec:	edc4 7a03 	vstr	s15, [r4, #12]
	while (osc->phase >= _2PI)
 80032f0:	ed94 8a03 	vldr	s16, [r4, #12]
 80032f4:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003350 <_ZN14SoundGenerator4SineEP10Oscillator+0x8c>
 80032f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80032fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003300:	db06      	blt.n	8003310 <_ZN14SoundGenerator4SineEP10Oscillator+0x4c>
		osc->phase -= _2PI;
 8003302:	ee38 8a67 	vsub.f32	s16, s16, s15
	while (osc->phase >= _2PI)
 8003306:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	daf8      	bge.n	8003302 <_ZN14SoundGenerator4SineEP10Oscillator+0x3e>

	z = sinf(osc->phase);
 8003310:	eeb0 0a48 	vmov.f32	s0, s16
 8003314:	f000 f8d6 	bl	80034c4 <sinf>
	osc->out = osc->amp*z*z*z*z*z;
 8003318:	edd4 7a00 	vldr	s15, [r4]
 800331c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003320:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003324:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003328:	ee67 7a80 	vmul.f32	s15, s15, s0
 800332c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003330:	ed84 0a07 	vstr	s0, [r4, #28]

	osc->phase += _2PI * Ts * osc->freq; // increment phase
 8003334:	edd4 7a02 	vldr	s15, [r4, #8]
 8003338:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003354 <_ZN14SoundGenerator4SineEP10Oscillator+0x90>
 800333c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003340:	ee37 8a88 	vadd.f32	s16, s15, s16
 8003344:	ed84 8a03 	vstr	s16, [r4, #12]
	return osc->out;
}
 8003348:	ecbd 8b02 	vpop	{d8}
 800334c:	bd10      	pop	{r4, pc}
 800334e:	bf00      	nop
 8003350:	40c90fdb 	.word	0x40c90fdb
 8003354:	39156592 	.word	0x39156592

08003358 <_ZN5SynthC1Ev>:
        inst_ = new Synth();
    }
    return (inst_);
}

Synth::Synth()
 8003358:	b510      	push	{r4, lr}
 800335a:	ed2d 8b02 	vpush	{d8}
 800335e:	b088      	sub	sp, #32
 8003360:	4604      	mov	r4, r0
 8003362:	ed9f 8a13 	vldr	s16, [pc, #76]	; 80033b0 <_ZN5SynthC1Ev+0x58>
 8003366:	eef0 0a48 	vmov.f32	s1, s16
 800336a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800336e:	3020      	adds	r0, #32
 8003370:	f7ff ff9a 	bl	80032a8 <_ZN10OscillatorC1Eff>
{
    static float f0 _CCM_;
    vol = env = 1;
 8003374:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003378:	ed84 0a04 	vstr	s0, [r4, #16]
 800337c:	ed84 0a03 	vstr	s0, [r4, #12]
    sound = WT_SINE;
 8003380:	2303      	movs	r3, #3
 8003382:	7723      	strb	r3, [r4, #28]
    autoFilterON = false;
 8003384:	2300      	movs	r3, #0
 8003386:	7023      	strb	r3, [r4, #0]
    autoSound = 0;
 8003388:	7123      	strb	r3, [r4, #4]
    chorusON = false;
 800338a:	70e3      	strb	r3, [r4, #3]
    delayON = false;
 800338c:	7063      	strb	r3, [r4, #1]
    phaserON = true;
 800338e:	2301      	movs	r3, #1
 8003390:	70a3      	strb	r3, [r4, #2]
    currentNote = 50;
 8003392:	2332      	movs	r3, #50	; 0x32
 8003394:	6163      	str	r3, [r4, #20]
    velocity = 127;
 8003396:	237f      	movs	r3, #127	; 0x7f
 8003398:	61a3      	str	r3, [r4, #24]
    Oscillator osc1;
 800339a:	eef0 0a48 	vmov.f32	s1, s16
 800339e:	4668      	mov	r0, sp
 80033a0:	f7ff ff82 	bl	80032a8 <_ZN10OscillatorC1Eff>
}
 80033a4:	4620      	mov	r0, r4
 80033a6:	b008      	add	sp, #32
 80033a8:	ecbd 8b02 	vpop	{d8}
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	bf00      	nop
 80033b0:	43fa0000 	.word	0x43fa0000

080033b4 <_ZN5Synth11getInstanceEv>:
    if (inst_ == NULL)
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <_ZN5Synth11getInstanceEv+0x24>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b113      	cbz	r3, 80033c0 <_ZN5Synth11getInstanceEv+0xc>
}
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <_ZN5Synth11getInstanceEv+0x24>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	4770      	bx	lr
{
 80033c0:	b510      	push	{r4, lr}
        inst_ = new Synth();
 80033c2:	2040      	movs	r0, #64	; 0x40
 80033c4:	f000 f864 	bl	8003490 <_Znwj>
 80033c8:	4604      	mov	r4, r0
 80033ca:	f7ff ffc5 	bl	8003358 <_ZN5SynthC1Ev>
 80033ce:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <_ZN5Synth11getInstanceEv+0x24>)
 80033d0:	601c      	str	r4, [r3, #0]
}
 80033d2:	4b01      	ldr	r3, [pc, #4]	; (80033d8 <_ZN5Synth11getInstanceEv+0x24>)
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	bd10      	pop	{r4, pc}
 80033d8:	200010c0 	.word	0x200010c0

080033dc <_ZN5Synth10make_soundEPtt>:
    float f1;
    uint16_t valueL, valueR;

    outp = buf;

    for (pos = 0; pos < length; pos++)
 80033dc:	2a00      	cmp	r2, #0
 80033de:	d04e      	beq.n	800347e <_ZN5Synth10make_soundEPtt+0xa2>
{
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	ed2d 8b02 	vpush	{d8}
 80033e6:	4604      	mov	r4, r0
 80033e8:	1d0d      	adds	r5, r1, #4
 80033ea:	1e53      	subs	r3, r2, #1
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80033f2:	3608      	adds	r6, #8
        //sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
        // GRA
        // if (sequencerIsOn == true) {
        // 	sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
        // } else {
        f0 = notesFreq[currentNote];
 80033f4:	4f22      	ldr	r7, [pc, #136]	; (8003480 <_ZN5Synth10make_soundEPtt+0xa4>)
        vol = (float)velocity / 127.0f;
 80033f6:	eddf 8a23 	vldr	s17, [pc, #140]	; 8003484 <_ZN5Synth10make_soundEPtt+0xa8>
        yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
        yR = (yR < -1.0f) ? -1.0f : yR;

        /****** let's hear the new sample *******/

        valueL = (uint16_t)((int16_t)((32767.0f) * yL)); // conversion float -> int
 80033fa:	ed9f 8a23 	vldr	s16, [pc, #140]	; 8003488 <_ZN5Synth10make_soundEPtt+0xac>
 80033fe:	e016      	b.n	800342e <_ZN5Synth10make_soundEPtt+0x52>
        yL = (yL < -1.0f) ? -1.0f : yL;
 8003400:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003404:	eef4 7a47 	vcmp.f32	s15, s14
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	bf48      	it	mi
 800340e:	eef0 7a47 	vmovmi.f32	s15, s14
        valueL = (uint16_t)((int16_t)((32767.0f) * yL)); // conversion float -> int
 8003412:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341a:	ee17 3a90 	vmov	r3, s15
 800341e:	b29b      	uxth	r3, r3
        valueR = (uint16_t)((int16_t)((32767.0f) * yR));

        *outp++ = valueL; // left channel sample
 8003420:	f825 3c04 	strh.w	r3, [r5, #-4]
        *outp++ = valueR; // right channel sample
 8003424:	f825 3c02 	strh.w	r3, [r5, #-2]
 8003428:	3504      	adds	r5, #4
    for (pos = 0; pos < length; pos++)
 800342a:	42b5      	cmp	r5, r6
 800342c:	d024      	beq.n	8003478 <_ZN5Synth10make_soundEPtt+0x9c>
        f0 = notesFreq[currentNote];
 800342e:	6963      	ldr	r3, [r4, #20]
 8003430:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60a3      	str	r3, [r4, #8]
        vol = (float)velocity / 127.0f;
 8003438:	edd4 7a06 	vldr	s15, [r4, #24]
 800343c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003440:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8003444:	ed84 7a03 	vstr	s14, [r4, #12]
float Synth::generate_waveform(float freq)
{
    float y;

    // Set osc1 frequency
    osc1.freq = freq;
 8003448:	62a3      	str	r3, [r4, #40]	; 0x28

    y = SoundGenerator::Sine(&osc1);
 800344a:	f104 0020 	add.w	r0, r4, #32
 800344e:	f7ff ff39 	bl	80032c4 <_ZN14SoundGenerator4SineEP10Oscillator>
    // default:
    //     y = 0;
    //     break;
    // }

    return osc1.out;
 8003452:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
        globaly = y;
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <_ZN5Synth10make_soundEPtt+0xb0>)
 8003458:	edc3 7a00 	vstr	s15, [r3]
        y *= vol; // apply volume and envelop
 800345c:	ed94 7a03 	vldr	s14, [r4, #12]
 8003460:	ee67 7a87 	vmul.f32	s15, s15, s14
        yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 8003464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003470:	ddc6      	ble.n	8003400 <_ZN5Synth10make_soundEPtt+0x24>
 8003472:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003476:	e7cc      	b.n	8003412 <_ZN5Synth10make_soundEPtt+0x36>
}
 8003478:	ecbd 8b02 	vpop	{d8}
 800347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800347e:	4770      	bx	lr
 8003480:	08004770 	.word	0x08004770
 8003484:	42fe0000 	.word	0x42fe0000
 8003488:	46fffe00 	.word	0x46fffe00
 800348c:	200010c4 	.word	0x200010c4

08003490 <_Znwj>:
 8003490:	b510      	push	{r4, lr}
 8003492:	2800      	cmp	r0, #0
 8003494:	bf14      	ite	ne
 8003496:	4604      	movne	r4, r0
 8003498:	2401      	moveq	r4, #1
 800349a:	4620      	mov	r0, r4
 800349c:	f000 fd90 	bl	8003fc0 <malloc>
 80034a0:	b930      	cbnz	r0, 80034b0 <_Znwj+0x20>
 80034a2:	f000 f807 	bl	80034b4 <_ZSt15get_new_handlerv>
 80034a6:	b908      	cbnz	r0, 80034ac <_Znwj+0x1c>
 80034a8:	f000 fd58 	bl	8003f5c <abort>
 80034ac:	4780      	blx	r0
 80034ae:	e7f4      	b.n	800349a <_Znwj+0xa>
 80034b0:	bd10      	pop	{r4, pc}
	...

080034b4 <_ZSt15get_new_handlerv>:
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <_ZSt15get_new_handlerv+0xc>)
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	f3bf 8f5b 	dmb	ish
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	200010c8 	.word	0x200010c8

080034c4 <sinf>:
 80034c4:	ee10 3a10 	vmov	r3, s0
 80034c8:	b507      	push	{r0, r1, r2, lr}
 80034ca:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <sinf+0x7c>)
 80034cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034d0:	4293      	cmp	r3, r2
 80034d2:	dc05      	bgt.n	80034e0 <sinf+0x1c>
 80034d4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003544 <sinf+0x80>
 80034d8:	2000      	movs	r0, #0
 80034da:	f000 fc41 	bl	8003d60 <__kernel_sinf>
 80034de:	e004      	b.n	80034ea <sinf+0x26>
 80034e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80034e4:	db04      	blt.n	80034f0 <sinf+0x2c>
 80034e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80034ea:	b003      	add	sp, #12
 80034ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80034f0:	4668      	mov	r0, sp
 80034f2:	f000 f829 	bl	8003548 <__ieee754_rem_pio2f>
 80034f6:	f000 0003 	and.w	r0, r0, #3
 80034fa:	2801      	cmp	r0, #1
 80034fc:	d008      	beq.n	8003510 <sinf+0x4c>
 80034fe:	2802      	cmp	r0, #2
 8003500:	d00d      	beq.n	800351e <sinf+0x5a>
 8003502:	b9b0      	cbnz	r0, 8003532 <sinf+0x6e>
 8003504:	2001      	movs	r0, #1
 8003506:	eddd 0a01 	vldr	s1, [sp, #4]
 800350a:	ed9d 0a00 	vldr	s0, [sp]
 800350e:	e7e4      	b.n	80034da <sinf+0x16>
 8003510:	eddd 0a01 	vldr	s1, [sp, #4]
 8003514:	ed9d 0a00 	vldr	s0, [sp]
 8003518:	f000 f942 	bl	80037a0 <__kernel_cosf>
 800351c:	e7e5      	b.n	80034ea <sinf+0x26>
 800351e:	2001      	movs	r0, #1
 8003520:	eddd 0a01 	vldr	s1, [sp, #4]
 8003524:	ed9d 0a00 	vldr	s0, [sp]
 8003528:	f000 fc1a 	bl	8003d60 <__kernel_sinf>
 800352c:	eeb1 0a40 	vneg.f32	s0, s0
 8003530:	e7db      	b.n	80034ea <sinf+0x26>
 8003532:	eddd 0a01 	vldr	s1, [sp, #4]
 8003536:	ed9d 0a00 	vldr	s0, [sp]
 800353a:	f000 f931 	bl	80037a0 <__kernel_cosf>
 800353e:	e7f5      	b.n	800352c <sinf+0x68>
 8003540:	3f490fd8 	.word	0x3f490fd8
 8003544:	00000000 	.word	0x00000000

08003548 <__ieee754_rem_pio2f>:
 8003548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354a:	ee10 6a10 	vmov	r6, s0
 800354e:	4b86      	ldr	r3, [pc, #536]	; (8003768 <__ieee754_rem_pio2f+0x220>)
 8003550:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8003554:	429c      	cmp	r4, r3
 8003556:	b087      	sub	sp, #28
 8003558:	4605      	mov	r5, r0
 800355a:	dc05      	bgt.n	8003568 <__ieee754_rem_pio2f+0x20>
 800355c:	2300      	movs	r3, #0
 800355e:	ed85 0a00 	vstr	s0, [r5]
 8003562:	6043      	str	r3, [r0, #4]
 8003564:	2000      	movs	r0, #0
 8003566:	e020      	b.n	80035aa <__ieee754_rem_pio2f+0x62>
 8003568:	4b80      	ldr	r3, [pc, #512]	; (800376c <__ieee754_rem_pio2f+0x224>)
 800356a:	429c      	cmp	r4, r3
 800356c:	dc38      	bgt.n	80035e0 <__ieee754_rem_pio2f+0x98>
 800356e:	2e00      	cmp	r6, #0
 8003570:	f024 040f 	bic.w	r4, r4, #15
 8003574:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003770 <__ieee754_rem_pio2f+0x228>
 8003578:	4b7e      	ldr	r3, [pc, #504]	; (8003774 <__ieee754_rem_pio2f+0x22c>)
 800357a:	dd18      	ble.n	80035ae <__ieee754_rem_pio2f+0x66>
 800357c:	429c      	cmp	r4, r3
 800357e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003582:	bf09      	itett	eq
 8003584:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8003778 <__ieee754_rem_pio2f+0x230>
 8003588:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800377c <__ieee754_rem_pio2f+0x234>
 800358c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003590:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8003780 <__ieee754_rem_pio2f+0x238>
 8003594:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003598:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800359c:	edc0 6a00 	vstr	s13, [r0]
 80035a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80035a8:	2001      	movs	r0, #1
 80035aa:	b007      	add	sp, #28
 80035ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ae:	429c      	cmp	r4, r3
 80035b0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80035b4:	bf09      	itett	eq
 80035b6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8003778 <__ieee754_rem_pio2f+0x230>
 80035ba:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800377c <__ieee754_rem_pio2f+0x234>
 80035be:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80035c2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8003780 <__ieee754_rem_pio2f+0x238>
 80035c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80035ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80035ce:	edc0 6a00 	vstr	s13, [r0]
 80035d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035d6:	edc0 7a01 	vstr	s15, [r0, #4]
 80035da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035de:	e7e4      	b.n	80035aa <__ieee754_rem_pio2f+0x62>
 80035e0:	4b68      	ldr	r3, [pc, #416]	; (8003784 <__ieee754_rem_pio2f+0x23c>)
 80035e2:	429c      	cmp	r4, r3
 80035e4:	dc71      	bgt.n	80036ca <__ieee754_rem_pio2f+0x182>
 80035e6:	f000 fc03 	bl	8003df0 <fabsf>
 80035ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003788 <__ieee754_rem_pio2f+0x240>
 80035ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80035f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80035f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035fa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80035fe:	ee17 0a90 	vmov	r0, s15
 8003602:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003770 <__ieee754_rem_pio2f+0x228>
 8003606:	eeb1 7a46 	vneg.f32	s14, s12
 800360a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800360e:	281f      	cmp	r0, #31
 8003610:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800377c <__ieee754_rem_pio2f+0x234>
 8003614:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003618:	ee70 6a67 	vsub.f32	s13, s0, s15
 800361c:	ee16 3a90 	vmov	r3, s13
 8003620:	dc1c      	bgt.n	800365c <__ieee754_rem_pio2f+0x114>
 8003622:	1e47      	subs	r7, r0, #1
 8003624:	4959      	ldr	r1, [pc, #356]	; (800378c <__ieee754_rem_pio2f+0x244>)
 8003626:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800362a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800362e:	428a      	cmp	r2, r1
 8003630:	d014      	beq.n	800365c <__ieee754_rem_pio2f+0x114>
 8003632:	602b      	str	r3, [r5, #0]
 8003634:	ed95 7a00 	vldr	s14, [r5]
 8003638:	ee30 0a47 	vsub.f32	s0, s0, s14
 800363c:	2e00      	cmp	r6, #0
 800363e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003642:	ed85 0a01 	vstr	s0, [r5, #4]
 8003646:	dab0      	bge.n	80035aa <__ieee754_rem_pio2f+0x62>
 8003648:	eeb1 7a47 	vneg.f32	s14, s14
 800364c:	eeb1 0a40 	vneg.f32	s0, s0
 8003650:	ed85 7a00 	vstr	s14, [r5]
 8003654:	ed85 0a01 	vstr	s0, [r5, #4]
 8003658:	4240      	negs	r0, r0
 800365a:	e7a6      	b.n	80035aa <__ieee754_rem_pio2f+0x62>
 800365c:	15e4      	asrs	r4, r4, #23
 800365e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003662:	1aa2      	subs	r2, r4, r2
 8003664:	2a08      	cmp	r2, #8
 8003666:	dde4      	ble.n	8003632 <__ieee754_rem_pio2f+0xea>
 8003668:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003778 <__ieee754_rem_pio2f+0x230>
 800366c:	eef0 6a40 	vmov.f32	s13, s0
 8003670:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003674:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003678:	eea7 0a27 	vfma.f32	s0, s14, s15
 800367c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003780 <__ieee754_rem_pio2f+0x238>
 8003680:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8003684:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8003688:	eef0 7a40 	vmov.f32	s15, s0
 800368c:	ee15 3a90 	vmov	r3, s11
 8003690:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003694:	1aa4      	subs	r4, r4, r2
 8003696:	2c19      	cmp	r4, #25
 8003698:	dc04      	bgt.n	80036a4 <__ieee754_rem_pio2f+0x15c>
 800369a:	edc5 5a00 	vstr	s11, [r5]
 800369e:	eeb0 0a66 	vmov.f32	s0, s13
 80036a2:	e7c7      	b.n	8003634 <__ieee754_rem_pio2f+0xec>
 80036a4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003790 <__ieee754_rem_pio2f+0x248>
 80036a8:	eeb0 0a66 	vmov.f32	s0, s13
 80036ac:	eea7 0a25 	vfma.f32	s0, s14, s11
 80036b0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80036b4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80036b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003794 <__ieee754_rem_pio2f+0x24c>
 80036bc:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80036c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80036c4:	ed85 7a00 	vstr	s14, [r5]
 80036c8:	e7b4      	b.n	8003634 <__ieee754_rem_pio2f+0xec>
 80036ca:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80036ce:	db06      	blt.n	80036de <__ieee754_rem_pio2f+0x196>
 80036d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80036d4:	edc0 7a01 	vstr	s15, [r0, #4]
 80036d8:	edc0 7a00 	vstr	s15, [r0]
 80036dc:	e742      	b.n	8003564 <__ieee754_rem_pio2f+0x1c>
 80036de:	15e2      	asrs	r2, r4, #23
 80036e0:	3a86      	subs	r2, #134	; 0x86
 80036e2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80036ee:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003798 <__ieee754_rem_pio2f+0x250>
 80036f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036fa:	ed8d 7a03 	vstr	s14, [sp, #12]
 80036fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003702:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003706:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800370a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800370e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003712:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003716:	eef5 7a40 	vcmp.f32	s15, #0.0
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	edcd 7a05 	vstr	s15, [sp, #20]
 8003722:	d11e      	bne.n	8003762 <__ieee754_rem_pio2f+0x21a>
 8003724:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2302      	movne	r3, #2
 8003732:	491a      	ldr	r1, [pc, #104]	; (800379c <__ieee754_rem_pio2f+0x254>)
 8003734:	9101      	str	r1, [sp, #4]
 8003736:	2102      	movs	r1, #2
 8003738:	9100      	str	r1, [sp, #0]
 800373a:	a803      	add	r0, sp, #12
 800373c:	4629      	mov	r1, r5
 800373e:	f000 f88d 	bl	800385c <__kernel_rem_pio2f>
 8003742:	2e00      	cmp	r6, #0
 8003744:	f6bf af31 	bge.w	80035aa <__ieee754_rem_pio2f+0x62>
 8003748:	edd5 7a00 	vldr	s15, [r5]
 800374c:	eef1 7a67 	vneg.f32	s15, s15
 8003750:	edc5 7a00 	vstr	s15, [r5]
 8003754:	edd5 7a01 	vldr	s15, [r5, #4]
 8003758:	eef1 7a67 	vneg.f32	s15, s15
 800375c:	edc5 7a01 	vstr	s15, [r5, #4]
 8003760:	e77a      	b.n	8003658 <__ieee754_rem_pio2f+0x110>
 8003762:	2303      	movs	r3, #3
 8003764:	e7e5      	b.n	8003732 <__ieee754_rem_pio2f+0x1ea>
 8003766:	bf00      	nop
 8003768:	3f490fd8 	.word	0x3f490fd8
 800376c:	4016cbe3 	.word	0x4016cbe3
 8003770:	3fc90f80 	.word	0x3fc90f80
 8003774:	3fc90fd0 	.word	0x3fc90fd0
 8003778:	37354400 	.word	0x37354400
 800377c:	37354443 	.word	0x37354443
 8003780:	2e85a308 	.word	0x2e85a308
 8003784:	43490f80 	.word	0x43490f80
 8003788:	3f22f984 	.word	0x3f22f984
 800378c:	0800493c 	.word	0x0800493c
 8003790:	2e85a300 	.word	0x2e85a300
 8003794:	248d3132 	.word	0x248d3132
 8003798:	43800000 	.word	0x43800000
 800379c:	080049bc 	.word	0x080049bc

080037a0 <__kernel_cosf>:
 80037a0:	ee10 3a10 	vmov	r3, s0
 80037a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80037ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b0:	da05      	bge.n	80037be <__kernel_cosf+0x1e>
 80037b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80037b6:	ee17 2a90 	vmov	r2, s15
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	d03b      	beq.n	8003836 <__kernel_cosf+0x96>
 80037be:	ee20 6a00 	vmul.f32	s12, s0, s0
 80037c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800383c <__kernel_cosf+0x9c>
 80037ca:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <__kernel_cosf+0xa0>)
 80037cc:	ee66 7a07 	vmul.f32	s15, s12, s14
 80037d0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003844 <__kernel_cosf+0xa4>
 80037d4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80037d8:	4293      	cmp	r3, r2
 80037da:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8003848 <__kernel_cosf+0xa8>
 80037de:	eee7 5a06 	vfma.f32	s11, s14, s12
 80037e2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800384c <__kernel_cosf+0xac>
 80037e6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80037ea:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003850 <__kernel_cosf+0xb0>
 80037ee:	eee7 5a06 	vfma.f32	s11, s14, s12
 80037f2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003854 <__kernel_cosf+0xb4>
 80037f6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80037fa:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80037fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003802:	eee6 0a07 	vfma.f32	s1, s12, s14
 8003806:	dc04      	bgt.n	8003812 <__kernel_cosf+0x72>
 8003808:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800380c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8003810:	4770      	bx	lr
 8003812:	4a11      	ldr	r2, [pc, #68]	; (8003858 <__kernel_cosf+0xb8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bfda      	itte	le
 8003818:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800381c:	ee07 3a10 	vmovle	s14, r3
 8003820:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8003824:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003828:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800382c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003830:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003834:	4770      	bx	lr
 8003836:	eeb0 0a66 	vmov.f32	s0, s13
 800383a:	4770      	bx	lr
 800383c:	ad47d74e 	.word	0xad47d74e
 8003840:	3e999999 	.word	0x3e999999
 8003844:	310f74f6 	.word	0x310f74f6
 8003848:	b493f27c 	.word	0xb493f27c
 800384c:	37d00d01 	.word	0x37d00d01
 8003850:	bab60b61 	.word	0xbab60b61
 8003854:	3d2aaaab 	.word	0x3d2aaaab
 8003858:	3f480000 	.word	0x3f480000

0800385c <__kernel_rem_pio2f>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	ed2d 8b04 	vpush	{d8-d9}
 8003864:	b0d7      	sub	sp, #348	; 0x15c
 8003866:	469b      	mov	fp, r3
 8003868:	460e      	mov	r6, r1
 800386a:	4bbe      	ldr	r3, [pc, #760]	; (8003b64 <__kernel_rem_pio2f+0x308>)
 800386c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800386e:	9002      	str	r0, [sp, #8]
 8003870:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8003874:	9865      	ldr	r0, [sp, #404]	; 0x194
 8003876:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003b74 <__kernel_rem_pio2f+0x318>
 800387a:	1ed1      	subs	r1, r2, #3
 800387c:	2308      	movs	r3, #8
 800387e:	fb91 f1f3 	sdiv	r1, r1, r3
 8003882:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8003886:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800388a:	1c4c      	adds	r4, r1, #1
 800388c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8003890:	eba1 050a 	sub.w	r5, r1, sl
 8003894:	aa1a      	add	r2, sp, #104	; 0x68
 8003896:	eb09 070a 	add.w	r7, r9, sl
 800389a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800389e:	4696      	mov	lr, r2
 80038a0:	2300      	movs	r3, #0
 80038a2:	42bb      	cmp	r3, r7
 80038a4:	dd0f      	ble.n	80038c6 <__kernel_rem_pio2f+0x6a>
 80038a6:	af42      	add	r7, sp, #264	; 0x108
 80038a8:	2200      	movs	r2, #0
 80038aa:	454a      	cmp	r2, r9
 80038ac:	dc27      	bgt.n	80038fe <__kernel_rem_pio2f+0xa2>
 80038ae:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80038b2:	eb0b 0302 	add.w	r3, fp, r2
 80038b6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80038ba:	9d02      	ldr	r5, [sp, #8]
 80038bc:	eddf 7aad 	vldr	s15, [pc, #692]	; 8003b74 <__kernel_rem_pio2f+0x318>
 80038c0:	f04f 0c00 	mov.w	ip, #0
 80038c4:	e015      	b.n	80038f2 <__kernel_rem_pio2f+0x96>
 80038c6:	42dd      	cmn	r5, r3
 80038c8:	bf5d      	ittte	pl
 80038ca:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80038ce:	ee07 2a90 	vmovpl	s15, r2
 80038d2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80038d6:	eef0 7a47 	vmovmi.f32	s15, s14
 80038da:	ecee 7a01 	vstmia	lr!, {s15}
 80038de:	3301      	adds	r3, #1
 80038e0:	e7df      	b.n	80038a2 <__kernel_rem_pio2f+0x46>
 80038e2:	ecf5 6a01 	vldmia	r5!, {s13}
 80038e6:	ed33 7a01 	vldmdb	r3!, {s14}
 80038ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80038ee:	f10c 0c01 	add.w	ip, ip, #1
 80038f2:	45d4      	cmp	ip, sl
 80038f4:	ddf5      	ble.n	80038e2 <__kernel_rem_pio2f+0x86>
 80038f6:	ece7 7a01 	vstmia	r7!, {s15}
 80038fa:	3201      	adds	r2, #1
 80038fc:	e7d5      	b.n	80038aa <__kernel_rem_pio2f+0x4e>
 80038fe:	ab06      	add	r3, sp, #24
 8003900:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8003904:	9304      	str	r3, [sp, #16]
 8003906:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8003b70 <__kernel_rem_pio2f+0x314>
 800390a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8003b6c <__kernel_rem_pio2f+0x310>
 800390e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8003912:	9303      	str	r3, [sp, #12]
 8003914:	464d      	mov	r5, r9
 8003916:	ab56      	add	r3, sp, #344	; 0x158
 8003918:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800391c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8003920:	3f01      	subs	r7, #1
 8003922:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8003926:	00bf      	lsls	r7, r7, #2
 8003928:	ab56      	add	r3, sp, #344	; 0x158
 800392a:	19da      	adds	r2, r3, r7
 800392c:	3a4c      	subs	r2, #76	; 0x4c
 800392e:	2300      	movs	r3, #0
 8003930:	1ae9      	subs	r1, r5, r3
 8003932:	2900      	cmp	r1, #0
 8003934:	dc4c      	bgt.n	80039d0 <__kernel_rem_pio2f+0x174>
 8003936:	4620      	mov	r0, r4
 8003938:	f000 faa4 	bl	8003e84 <scalbnf>
 800393c:	eeb0 8a40 	vmov.f32	s16, s0
 8003940:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003944:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003948:	f000 fa5a 	bl	8003e00 <floorf>
 800394c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003950:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003954:	2c00      	cmp	r4, #0
 8003956:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800395a:	edcd 7a01 	vstr	s15, [sp, #4]
 800395e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003962:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003966:	dd48      	ble.n	80039fa <__kernel_rem_pio2f+0x19e>
 8003968:	1e69      	subs	r1, r5, #1
 800396a:	ab06      	add	r3, sp, #24
 800396c:	f1c4 0008 	rsb	r0, r4, #8
 8003970:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8003974:	9a01      	ldr	r2, [sp, #4]
 8003976:	fa4c f300 	asr.w	r3, ip, r0
 800397a:	441a      	add	r2, r3
 800397c:	4083      	lsls	r3, r0
 800397e:	9201      	str	r2, [sp, #4]
 8003980:	ebac 0203 	sub.w	r2, ip, r3
 8003984:	ab06      	add	r3, sp, #24
 8003986:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800398a:	f1c4 0307 	rsb	r3, r4, #7
 800398e:	fa42 f803 	asr.w	r8, r2, r3
 8003992:	f1b8 0f00 	cmp.w	r8, #0
 8003996:	dd41      	ble.n	8003a1c <__kernel_rem_pio2f+0x1c0>
 8003998:	9b01      	ldr	r3, [sp, #4]
 800399a:	2000      	movs	r0, #0
 800399c:	3301      	adds	r3, #1
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	4601      	mov	r1, r0
 80039a2:	4285      	cmp	r5, r0
 80039a4:	dc6d      	bgt.n	8003a82 <__kernel_rem_pio2f+0x226>
 80039a6:	2c00      	cmp	r4, #0
 80039a8:	dd04      	ble.n	80039b4 <__kernel_rem_pio2f+0x158>
 80039aa:	2c01      	cmp	r4, #1
 80039ac:	d07e      	beq.n	8003aac <__kernel_rem_pio2f+0x250>
 80039ae:	2c02      	cmp	r4, #2
 80039b0:	f000 8086 	beq.w	8003ac0 <__kernel_rem_pio2f+0x264>
 80039b4:	f1b8 0f02 	cmp.w	r8, #2
 80039b8:	d130      	bne.n	8003a1c <__kernel_rem_pio2f+0x1c0>
 80039ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039be:	ee30 8a48 	vsub.f32	s16, s0, s16
 80039c2:	b359      	cbz	r1, 8003a1c <__kernel_rem_pio2f+0x1c0>
 80039c4:	4620      	mov	r0, r4
 80039c6:	f000 fa5d 	bl	8003e84 <scalbnf>
 80039ca:	ee38 8a40 	vsub.f32	s16, s16, s0
 80039ce:	e025      	b.n	8003a1c <__kernel_rem_pio2f+0x1c0>
 80039d0:	ee60 7a28 	vmul.f32	s15, s0, s17
 80039d4:	a806      	add	r0, sp, #24
 80039d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039de:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80039e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80039e6:	ee10 1a10 	vmov	r1, s0
 80039ea:	ed32 0a01 	vldmdb	r2!, {s0}
 80039ee:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80039f2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80039f6:	3301      	adds	r3, #1
 80039f8:	e79a      	b.n	8003930 <__kernel_rem_pio2f+0xd4>
 80039fa:	d106      	bne.n	8003a0a <__kernel_rem_pio2f+0x1ae>
 80039fc:	1e6b      	subs	r3, r5, #1
 80039fe:	aa06      	add	r2, sp, #24
 8003a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a04:	ea4f 2822 	mov.w	r8, r2, asr #8
 8003a08:	e7c3      	b.n	8003992 <__kernel_rem_pio2f+0x136>
 8003a0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003a0e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a16:	da31      	bge.n	8003a7c <__kernel_rem_pio2f+0x220>
 8003a18:	f04f 0800 	mov.w	r8, #0
 8003a1c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	f040 80a8 	bne.w	8003b78 <__kernel_rem_pio2f+0x31c>
 8003a28:	1e6b      	subs	r3, r5, #1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4548      	cmp	r0, r9
 8003a30:	da4d      	bge.n	8003ace <__kernel_rem_pio2f+0x272>
 8003a32:	2a00      	cmp	r2, #0
 8003a34:	f000 8087 	beq.w	8003b46 <__kernel_rem_pio2f+0x2ea>
 8003a38:	aa06      	add	r2, sp, #24
 8003a3a:	3c08      	subs	r4, #8
 8003a3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a40:	2900      	cmp	r1, #0
 8003a42:	f000 808d 	beq.w	8003b60 <__kernel_rem_pio2f+0x304>
 8003a46:	4620      	mov	r0, r4
 8003a48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a4c:	9302      	str	r3, [sp, #8]
 8003a4e:	f000 fa19 	bl	8003e84 <scalbnf>
 8003a52:	9b02      	ldr	r3, [sp, #8]
 8003a54:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003b70 <__kernel_rem_pio2f+0x314>
 8003a58:	0099      	lsls	r1, r3, #2
 8003a5a:	aa42      	add	r2, sp, #264	; 0x108
 8003a5c:	1850      	adds	r0, r2, r1
 8003a5e:	1d05      	adds	r5, r0, #4
 8003a60:	461c      	mov	r4, r3
 8003a62:	2c00      	cmp	r4, #0
 8003a64:	f280 80b8 	bge.w	8003bd8 <__kernel_rem_pio2f+0x37c>
 8003a68:	2500      	movs	r5, #0
 8003a6a:	1b5c      	subs	r4, r3, r5
 8003a6c:	2c00      	cmp	r4, #0
 8003a6e:	f2c0 80d8 	blt.w	8003c22 <__kernel_rem_pio2f+0x3c6>
 8003a72:	4f3d      	ldr	r7, [pc, #244]	; (8003b68 <__kernel_rem_pio2f+0x30c>)
 8003a74:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8003b74 <__kernel_rem_pio2f+0x318>
 8003a78:	2400      	movs	r4, #0
 8003a7a:	e0c6      	b.n	8003c0a <__kernel_rem_pio2f+0x3ae>
 8003a7c:	f04f 0802 	mov.w	r8, #2
 8003a80:	e78a      	b.n	8003998 <__kernel_rem_pio2f+0x13c>
 8003a82:	ab06      	add	r3, sp, #24
 8003a84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003a88:	b949      	cbnz	r1, 8003a9e <__kernel_rem_pio2f+0x242>
 8003a8a:	b12b      	cbz	r3, 8003a98 <__kernel_rem_pio2f+0x23c>
 8003a8c:	aa06      	add	r2, sp, #24
 8003a8e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003a92:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003a96:	2301      	movs	r3, #1
 8003a98:	3001      	adds	r0, #1
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	e781      	b.n	80039a2 <__kernel_rem_pio2f+0x146>
 8003a9e:	aa06      	add	r2, sp, #24
 8003aa0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003aa4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	e7f5      	b.n	8003a98 <__kernel_rem_pio2f+0x23c>
 8003aac:	1e68      	subs	r0, r5, #1
 8003aae:	ab06      	add	r3, sp, #24
 8003ab0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab8:	aa06      	add	r2, sp, #24
 8003aba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003abe:	e779      	b.n	80039b4 <__kernel_rem_pio2f+0x158>
 8003ac0:	1e68      	subs	r0, r5, #1
 8003ac2:	ab06      	add	r3, sp, #24
 8003ac4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003acc:	e7f4      	b.n	8003ab8 <__kernel_rem_pio2f+0x25c>
 8003ace:	a906      	add	r1, sp, #24
 8003ad0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003ad4:	3801      	subs	r0, #1
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	e7a9      	b.n	8003a2e <__kernel_rem_pio2f+0x1d2>
 8003ada:	f10c 0c01 	add.w	ip, ip, #1
 8003ade:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	d0f9      	beq.n	8003ada <__kernel_rem_pio2f+0x27e>
 8003ae6:	eb0b 0305 	add.w	r3, fp, r5
 8003aea:	aa1a      	add	r2, sp, #104	; 0x68
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	1898      	adds	r0, r3, r2
 8003af0:	3004      	adds	r0, #4
 8003af2:	1c69      	adds	r1, r5, #1
 8003af4:	3704      	adds	r7, #4
 8003af6:	2200      	movs	r2, #0
 8003af8:	4465      	add	r5, ip
 8003afa:	9005      	str	r0, [sp, #20]
 8003afc:	428d      	cmp	r5, r1
 8003afe:	f6ff af0a 	blt.w	8003916 <__kernel_rem_pio2f+0xba>
 8003b02:	a81a      	add	r0, sp, #104	; 0x68
 8003b04:	eb02 0c03 	add.w	ip, r2, r3
 8003b08:	4484      	add	ip, r0
 8003b0a:	9803      	ldr	r0, [sp, #12]
 8003b0c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8003b10:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8003b14:	9001      	str	r0, [sp, #4]
 8003b16:	ee07 0a90 	vmov	s15, r0
 8003b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b1e:	9805      	ldr	r0, [sp, #20]
 8003b20:	edcc 7a00 	vstr	s15, [ip]
 8003b24:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003b74 <__kernel_rem_pio2f+0x318>
 8003b28:	eb00 0802 	add.w	r8, r0, r2
 8003b2c:	f04f 0c00 	mov.w	ip, #0
 8003b30:	45d4      	cmp	ip, sl
 8003b32:	dd0c      	ble.n	8003b4e <__kernel_rem_pio2f+0x2f2>
 8003b34:	eb02 0c07 	add.w	ip, r2, r7
 8003b38:	a842      	add	r0, sp, #264	; 0x108
 8003b3a:	4484      	add	ip, r0
 8003b3c:	edcc 7a01 	vstr	s15, [ip, #4]
 8003b40:	3101      	adds	r1, #1
 8003b42:	3204      	adds	r2, #4
 8003b44:	e7da      	b.n	8003afc <__kernel_rem_pio2f+0x2a0>
 8003b46:	9b04      	ldr	r3, [sp, #16]
 8003b48:	f04f 0c01 	mov.w	ip, #1
 8003b4c:	e7c7      	b.n	8003ade <__kernel_rem_pio2f+0x282>
 8003b4e:	ecfe 6a01 	vldmia	lr!, {s13}
 8003b52:	ed38 7a01 	vldmdb	r8!, {s14}
 8003b56:	f10c 0c01 	add.w	ip, ip, #1
 8003b5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003b5e:	e7e7      	b.n	8003b30 <__kernel_rem_pio2f+0x2d4>
 8003b60:	3b01      	subs	r3, #1
 8003b62:	e769      	b.n	8003a38 <__kernel_rem_pio2f+0x1dc>
 8003b64:	08004d00 	.word	0x08004d00
 8003b68:	08004cd4 	.word	0x08004cd4
 8003b6c:	43800000 	.word	0x43800000
 8003b70:	3b800000 	.word	0x3b800000
 8003b74:	00000000 	.word	0x00000000
 8003b78:	4260      	negs	r0, r4
 8003b7a:	eeb0 0a48 	vmov.f32	s0, s16
 8003b7e:	f000 f981 	bl	8003e84 <scalbnf>
 8003b82:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8003b6c <__kernel_rem_pio2f+0x310>
 8003b86:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8e:	db1a      	blt.n	8003bc6 <__kernel_rem_pio2f+0x36a>
 8003b90:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003b70 <__kernel_rem_pio2f+0x314>
 8003b94:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003b98:	aa06      	add	r2, sp, #24
 8003b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b9e:	a906      	add	r1, sp, #24
 8003ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba4:	3408      	adds	r4, #8
 8003ba6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003bb2:	ee10 3a10 	vmov	r3, s0
 8003bb6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8003bba:	1c6b      	adds	r3, r5, #1
 8003bbc:	ee17 2a90 	vmov	r2, s15
 8003bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003bc4:	e73f      	b.n	8003a46 <__kernel_rem_pio2f+0x1ea>
 8003bc6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003bca:	aa06      	add	r2, sp, #24
 8003bcc:	ee10 3a10 	vmov	r3, s0
 8003bd0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	e736      	b.n	8003a46 <__kernel_rem_pio2f+0x1ea>
 8003bd8:	aa06      	add	r2, sp, #24
 8003bda:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003bde:	9202      	str	r2, [sp, #8]
 8003be0:	ee07 2a90 	vmov	s15, r2
 8003be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be8:	3c01      	subs	r4, #1
 8003bea:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003bee:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003bf2:	ed65 7a01 	vstmdb	r5!, {s15}
 8003bf6:	e734      	b.n	8003a62 <__kernel_rem_pio2f+0x206>
 8003bf8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8003bfc:	ecf7 6a01 	vldmia	r7!, {s13}
 8003c00:	ed9c 7a00 	vldr	s14, [ip]
 8003c04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003c08:	3401      	adds	r4, #1
 8003c0a:	454c      	cmp	r4, r9
 8003c0c:	dc01      	bgt.n	8003c12 <__kernel_rem_pio2f+0x3b6>
 8003c0e:	42a5      	cmp	r5, r4
 8003c10:	daf2      	bge.n	8003bf8 <__kernel_rem_pio2f+0x39c>
 8003c12:	aa56      	add	r2, sp, #344	; 0x158
 8003c14:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8003c18:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	3804      	subs	r0, #4
 8003c20:	e723      	b.n	8003a6a <__kernel_rem_pio2f+0x20e>
 8003c22:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003c24:	2a03      	cmp	r2, #3
 8003c26:	d84d      	bhi.n	8003cc4 <__kernel_rem_pio2f+0x468>
 8003c28:	e8df f002 	tbb	[pc, r2]
 8003c2c:	021f1f3e 	.word	0x021f1f3e
 8003c30:	aa56      	add	r2, sp, #344	; 0x158
 8003c32:	4411      	add	r1, r2
 8003c34:	399c      	subs	r1, #156	; 0x9c
 8003c36:	4608      	mov	r0, r1
 8003c38:	461c      	mov	r4, r3
 8003c3a:	2c00      	cmp	r4, #0
 8003c3c:	dc5f      	bgt.n	8003cfe <__kernel_rem_pio2f+0x4a2>
 8003c3e:	4608      	mov	r0, r1
 8003c40:	461c      	mov	r4, r3
 8003c42:	2c01      	cmp	r4, #1
 8003c44:	dc6b      	bgt.n	8003d1e <__kernel_rem_pio2f+0x4c2>
 8003c46:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8003b74 <__kernel_rem_pio2f+0x318>
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	dc77      	bgt.n	8003d3e <__kernel_rem_pio2f+0x4e2>
 8003c4e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8003c52:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8003c56:	f1b8 0f00 	cmp.w	r8, #0
 8003c5a:	d176      	bne.n	8003d4a <__kernel_rem_pio2f+0x4ee>
 8003c5c:	edc6 6a00 	vstr	s13, [r6]
 8003c60:	ed86 7a01 	vstr	s14, [r6, #4]
 8003c64:	edc6 7a02 	vstr	s15, [r6, #8]
 8003c68:	e02c      	b.n	8003cc4 <__kernel_rem_pio2f+0x468>
 8003c6a:	aa56      	add	r2, sp, #344	; 0x158
 8003c6c:	4411      	add	r1, r2
 8003c6e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8003b74 <__kernel_rem_pio2f+0x318>
 8003c72:	399c      	subs	r1, #156	; 0x9c
 8003c74:	4618      	mov	r0, r3
 8003c76:	2800      	cmp	r0, #0
 8003c78:	da32      	bge.n	8003ce0 <__kernel_rem_pio2f+0x484>
 8003c7a:	f1b8 0f00 	cmp.w	r8, #0
 8003c7e:	d035      	beq.n	8003cec <__kernel_rem_pio2f+0x490>
 8003c80:	eef1 7a47 	vneg.f32	s15, s14
 8003c84:	edc6 7a00 	vstr	s15, [r6]
 8003c88:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8003c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c90:	a82f      	add	r0, sp, #188	; 0xbc
 8003c92:	2101      	movs	r1, #1
 8003c94:	428b      	cmp	r3, r1
 8003c96:	da2c      	bge.n	8003cf2 <__kernel_rem_pio2f+0x496>
 8003c98:	f1b8 0f00 	cmp.w	r8, #0
 8003c9c:	d001      	beq.n	8003ca2 <__kernel_rem_pio2f+0x446>
 8003c9e:	eef1 7a67 	vneg.f32	s15, s15
 8003ca2:	edc6 7a01 	vstr	s15, [r6, #4]
 8003ca6:	e00d      	b.n	8003cc4 <__kernel_rem_pio2f+0x468>
 8003ca8:	aa56      	add	r2, sp, #344	; 0x158
 8003caa:	4411      	add	r1, r2
 8003cac:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8003b74 <__kernel_rem_pio2f+0x318>
 8003cb0:	399c      	subs	r1, #156	; 0x9c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da0e      	bge.n	8003cd4 <__kernel_rem_pio2f+0x478>
 8003cb6:	f1b8 0f00 	cmp.w	r8, #0
 8003cba:	d001      	beq.n	8003cc0 <__kernel_rem_pio2f+0x464>
 8003cbc:	eef1 7a67 	vneg.f32	s15, s15
 8003cc0:	edc6 7a00 	vstr	s15, [r6]
 8003cc4:	9b01      	ldr	r3, [sp, #4]
 8003cc6:	f003 0007 	and.w	r0, r3, #7
 8003cca:	b057      	add	sp, #348	; 0x15c
 8003ccc:	ecbd 8b04 	vpop	{d8-d9}
 8003cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd4:	ed31 7a01 	vldmdb	r1!, {s14}
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cde:	e7e8      	b.n	8003cb2 <__kernel_rem_pio2f+0x456>
 8003ce0:	ed71 7a01 	vldmdb	r1!, {s15}
 8003ce4:	3801      	subs	r0, #1
 8003ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cea:	e7c4      	b.n	8003c76 <__kernel_rem_pio2f+0x41a>
 8003cec:	eef0 7a47 	vmov.f32	s15, s14
 8003cf0:	e7c8      	b.n	8003c84 <__kernel_rem_pio2f+0x428>
 8003cf2:	ecb0 7a01 	vldmia	r0!, {s14}
 8003cf6:	3101      	adds	r1, #1
 8003cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cfc:	e7ca      	b.n	8003c94 <__kernel_rem_pio2f+0x438>
 8003cfe:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003d02:	ed70 6a01 	vldmdb	r0!, {s13}
 8003d06:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003d0a:	3c01      	subs	r4, #1
 8003d0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d10:	ed00 7a01 	vstr	s14, [r0, #-4]
 8003d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d18:	edc0 7a00 	vstr	s15, [r0]
 8003d1c:	e78d      	b.n	8003c3a <__kernel_rem_pio2f+0x3de>
 8003d1e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003d22:	ed70 6a01 	vldmdb	r0!, {s13}
 8003d26:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003d2a:	3c01      	subs	r4, #1
 8003d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d30:	ed00 7a01 	vstr	s14, [r0, #-4]
 8003d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d38:	edc0 7a00 	vstr	s15, [r0]
 8003d3c:	e781      	b.n	8003c42 <__kernel_rem_pio2f+0x3e6>
 8003d3e:	ed31 7a01 	vldmdb	r1!, {s14}
 8003d42:	3b01      	subs	r3, #1
 8003d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d48:	e77f      	b.n	8003c4a <__kernel_rem_pio2f+0x3ee>
 8003d4a:	eef1 6a66 	vneg.f32	s13, s13
 8003d4e:	eeb1 7a47 	vneg.f32	s14, s14
 8003d52:	edc6 6a00 	vstr	s13, [r6]
 8003d56:	ed86 7a01 	vstr	s14, [r6, #4]
 8003d5a:	eef1 7a67 	vneg.f32	s15, s15
 8003d5e:	e781      	b.n	8003c64 <__kernel_rem_pio2f+0x408>

08003d60 <__kernel_sinf>:
 8003d60:	ee10 3a10 	vmov	r3, s0
 8003d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d68:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003d6c:	da04      	bge.n	8003d78 <__kernel_sinf+0x18>
 8003d6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003d72:	ee17 3a90 	vmov	r3, s15
 8003d76:	b35b      	cbz	r3, 8003dd0 <__kernel_sinf+0x70>
 8003d78:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003d7c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003dd4 <__kernel_sinf+0x74>
 8003d80:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003dd8 <__kernel_sinf+0x78>
 8003d84:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003d88:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003ddc <__kernel_sinf+0x7c>
 8003d8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003d90:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003de0 <__kernel_sinf+0x80>
 8003d94:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003d98:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003de4 <__kernel_sinf+0x84>
 8003d9c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003da0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003da4:	b930      	cbnz	r0, 8003db4 <__kernel_sinf+0x54>
 8003da6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003de8 <__kernel_sinf+0x88>
 8003daa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003dae:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003db2:	4770      	bx	lr
 8003db4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003db8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003dbc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003dc0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003dc4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003dec <__kernel_sinf+0x8c>
 8003dc8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003dcc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	2f2ec9d3 	.word	0x2f2ec9d3
 8003dd8:	b2d72f34 	.word	0xb2d72f34
 8003ddc:	3638ef1b 	.word	0x3638ef1b
 8003de0:	b9500d01 	.word	0xb9500d01
 8003de4:	3c088889 	.word	0x3c088889
 8003de8:	be2aaaab 	.word	0xbe2aaaab
 8003dec:	3e2aaaab 	.word	0x3e2aaaab

08003df0 <fabsf>:
 8003df0:	ee10 3a10 	vmov	r3, s0
 8003df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df8:	ee00 3a10 	vmov	s0, r3
 8003dfc:	4770      	bx	lr
	...

08003e00 <floorf>:
 8003e00:	ee10 3a10 	vmov	r3, s0
 8003e04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e08:	0dca      	lsrs	r2, r1, #23
 8003e0a:	3a7f      	subs	r2, #127	; 0x7f
 8003e0c:	2a16      	cmp	r2, #22
 8003e0e:	dc2a      	bgt.n	8003e66 <floorf+0x66>
 8003e10:	2a00      	cmp	r2, #0
 8003e12:	da11      	bge.n	8003e38 <floorf+0x38>
 8003e14:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003e78 <floorf+0x78>
 8003e18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003e1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	dd05      	ble.n	8003e32 <floorf+0x32>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	da23      	bge.n	8003e72 <floorf+0x72>
 8003e2a:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <floorf+0x7c>)
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	bf18      	it	ne
 8003e30:	4613      	movne	r3, r2
 8003e32:	ee00 3a10 	vmov	s0, r3
 8003e36:	4770      	bx	lr
 8003e38:	4911      	ldr	r1, [pc, #68]	; (8003e80 <floorf+0x80>)
 8003e3a:	4111      	asrs	r1, r2
 8003e3c:	420b      	tst	r3, r1
 8003e3e:	d0fa      	beq.n	8003e36 <floorf+0x36>
 8003e40:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003e78 <floorf+0x78>
 8003e44:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003e48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e50:	ddef      	ble.n	8003e32 <floorf+0x32>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bfbe      	ittt	lt
 8003e56:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003e5a:	fa40 f202 	asrlt.w	r2, r0, r2
 8003e5e:	189b      	addlt	r3, r3, r2
 8003e60:	ea23 0301 	bic.w	r3, r3, r1
 8003e64:	e7e5      	b.n	8003e32 <floorf+0x32>
 8003e66:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003e6a:	d3e4      	bcc.n	8003e36 <floorf+0x36>
 8003e6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003e70:	4770      	bx	lr
 8003e72:	2300      	movs	r3, #0
 8003e74:	e7dd      	b.n	8003e32 <floorf+0x32>
 8003e76:	bf00      	nop
 8003e78:	7149f2ca 	.word	0x7149f2ca
 8003e7c:	bf800000 	.word	0xbf800000
 8003e80:	007fffff 	.word	0x007fffff

08003e84 <scalbnf>:
 8003e84:	b508      	push	{r3, lr}
 8003e86:	ee10 2a10 	vmov	r2, s0
 8003e8a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8003e8e:	ed2d 8b02 	vpush	{d8}
 8003e92:	eef0 0a40 	vmov.f32	s1, s0
 8003e96:	d004      	beq.n	8003ea2 <scalbnf+0x1e>
 8003e98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003e9c:	d306      	bcc.n	8003eac <scalbnf+0x28>
 8003e9e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8003ea2:	ecbd 8b02 	vpop	{d8}
 8003ea6:	eeb0 0a60 	vmov.f32	s0, s1
 8003eaa:	bd08      	pop	{r3, pc}
 8003eac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eb0:	d21c      	bcs.n	8003eec <scalbnf+0x68>
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <scalbnf+0xac>)
 8003eb4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003f34 <scalbnf+0xb0>
 8003eb8:	4298      	cmp	r0, r3
 8003eba:	ee60 0a27 	vmul.f32	s1, s0, s15
 8003ebe:	db10      	blt.n	8003ee2 <scalbnf+0x5e>
 8003ec0:	ee10 2a90 	vmov	r2, s1
 8003ec4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003ec8:	3b19      	subs	r3, #25
 8003eca:	4403      	add	r3, r0
 8003ecc:	2bfe      	cmp	r3, #254	; 0xfe
 8003ece:	dd0f      	ble.n	8003ef0 <scalbnf+0x6c>
 8003ed0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8003f38 <scalbnf+0xb4>
 8003ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8003ed8:	f000 f834 	bl	8003f44 <copysignf>
 8003edc:	ee60 0a08 	vmul.f32	s1, s0, s16
 8003ee0:	e7df      	b.n	8003ea2 <scalbnf+0x1e>
 8003ee2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003f3c <scalbnf+0xb8>
 8003ee6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003eea:	e7da      	b.n	8003ea2 <scalbnf+0x1e>
 8003eec:	0ddb      	lsrs	r3, r3, #23
 8003eee:	e7ec      	b.n	8003eca <scalbnf+0x46>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	dd06      	ble.n	8003f02 <scalbnf+0x7e>
 8003ef4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003ef8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003efc:	ee00 3a90 	vmov	s1, r3
 8003f00:	e7cf      	b.n	8003ea2 <scalbnf+0x1e>
 8003f02:	f113 0f16 	cmn.w	r3, #22
 8003f06:	da06      	bge.n	8003f16 <scalbnf+0x92>
 8003f08:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003f0c:	4298      	cmp	r0, r3
 8003f0e:	dcdf      	bgt.n	8003ed0 <scalbnf+0x4c>
 8003f10:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003f3c <scalbnf+0xb8>
 8003f14:	e7de      	b.n	8003ed4 <scalbnf+0x50>
 8003f16:	3319      	adds	r3, #25
 8003f18:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003f1c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003f20:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003f40 <scalbnf+0xbc>
 8003f24:	ee07 3a10 	vmov	s14, r3
 8003f28:	ee67 0a27 	vmul.f32	s1, s14, s15
 8003f2c:	e7b9      	b.n	8003ea2 <scalbnf+0x1e>
 8003f2e:	bf00      	nop
 8003f30:	ffff3cb0 	.word	0xffff3cb0
 8003f34:	4c000000 	.word	0x4c000000
 8003f38:	7149f2ca 	.word	0x7149f2ca
 8003f3c:	0da24260 	.word	0x0da24260
 8003f40:	33000000 	.word	0x33000000

08003f44 <copysignf>:
 8003f44:	ee10 3a10 	vmov	r3, s0
 8003f48:	ee10 2a90 	vmov	r2, s1
 8003f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f54:	4313      	orrs	r3, r2
 8003f56:	ee00 3a10 	vmov	s0, r3
 8003f5a:	4770      	bx	lr

08003f5c <abort>:
 8003f5c:	b508      	push	{r3, lr}
 8003f5e:	2006      	movs	r0, #6
 8003f60:	f000 f8d0 	bl	8004104 <raise>
 8003f64:	2001      	movs	r0, #1
 8003f66:	f7fd fa86 	bl	8001476 <_exit>
	...

08003f6c <__errno>:
 8003f6c:	4b01      	ldr	r3, [pc, #4]	; (8003f74 <__errno+0x8>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000084 	.word	0x20000084

08003f78 <__libc_init_array>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	4e0d      	ldr	r6, [pc, #52]	; (8003fb0 <__libc_init_array+0x38>)
 8003f7c:	4c0d      	ldr	r4, [pc, #52]	; (8003fb4 <__libc_init_array+0x3c>)
 8003f7e:	1ba4      	subs	r4, r4, r6
 8003f80:	10a4      	asrs	r4, r4, #2
 8003f82:	2500      	movs	r5, #0
 8003f84:	42a5      	cmp	r5, r4
 8003f86:	d109      	bne.n	8003f9c <__libc_init_array+0x24>
 8003f88:	4e0b      	ldr	r6, [pc, #44]	; (8003fb8 <__libc_init_array+0x40>)
 8003f8a:	4c0c      	ldr	r4, [pc, #48]	; (8003fbc <__libc_init_array+0x44>)
 8003f8c:	f000 f8d8 	bl	8004140 <_init>
 8003f90:	1ba4      	subs	r4, r4, r6
 8003f92:	10a4      	asrs	r4, r4, #2
 8003f94:	2500      	movs	r5, #0
 8003f96:	42a5      	cmp	r5, r4
 8003f98:	d105      	bne.n	8003fa6 <__libc_init_array+0x2e>
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fa0:	4798      	blx	r3
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	e7ee      	b.n	8003f84 <__libc_init_array+0xc>
 8003fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003faa:	4798      	blx	r3
 8003fac:	3501      	adds	r5, #1
 8003fae:	e7f2      	b.n	8003f96 <__libc_init_array+0x1e>
 8003fb0:	08004d14 	.word	0x08004d14
 8003fb4:	08004d14 	.word	0x08004d14
 8003fb8:	08004d14 	.word	0x08004d14
 8003fbc:	08004d1c 	.word	0x08004d1c

08003fc0 <malloc>:
 8003fc0:	4b02      	ldr	r3, [pc, #8]	; (8003fcc <malloc+0xc>)
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	f000 b80b 	b.w	8003fe0 <_malloc_r>
 8003fca:	bf00      	nop
 8003fcc:	20000084 	.word	0x20000084

08003fd0 <memset>:
 8003fd0:	4402      	add	r2, r0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d100      	bne.n	8003fda <memset+0xa>
 8003fd8:	4770      	bx	lr
 8003fda:	f803 1b01 	strb.w	r1, [r3], #1
 8003fde:	e7f9      	b.n	8003fd4 <memset+0x4>

08003fe0 <_malloc_r>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	1ccd      	adds	r5, r1, #3
 8003fe4:	f025 0503 	bic.w	r5, r5, #3
 8003fe8:	3508      	adds	r5, #8
 8003fea:	2d0c      	cmp	r5, #12
 8003fec:	bf38      	it	cc
 8003fee:	250c      	movcc	r5, #12
 8003ff0:	2d00      	cmp	r5, #0
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	db01      	blt.n	8003ffa <_malloc_r+0x1a>
 8003ff6:	42a9      	cmp	r1, r5
 8003ff8:	d903      	bls.n	8004002 <_malloc_r+0x22>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	6033      	str	r3, [r6, #0]
 8003ffe:	2000      	movs	r0, #0
 8004000:	bd70      	pop	{r4, r5, r6, pc}
 8004002:	f000 f89b 	bl	800413c <__malloc_lock>
 8004006:	4a21      	ldr	r2, [pc, #132]	; (800408c <_malloc_r+0xac>)
 8004008:	6814      	ldr	r4, [r2, #0]
 800400a:	4621      	mov	r1, r4
 800400c:	b991      	cbnz	r1, 8004034 <_malloc_r+0x54>
 800400e:	4c20      	ldr	r4, [pc, #128]	; (8004090 <_malloc_r+0xb0>)
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	b91b      	cbnz	r3, 800401c <_malloc_r+0x3c>
 8004014:	4630      	mov	r0, r6
 8004016:	f000 f83d 	bl	8004094 <_sbrk_r>
 800401a:	6020      	str	r0, [r4, #0]
 800401c:	4629      	mov	r1, r5
 800401e:	4630      	mov	r0, r6
 8004020:	f000 f838 	bl	8004094 <_sbrk_r>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d124      	bne.n	8004072 <_malloc_r+0x92>
 8004028:	230c      	movs	r3, #12
 800402a:	6033      	str	r3, [r6, #0]
 800402c:	4630      	mov	r0, r6
 800402e:	f000 f886 	bl	800413e <__malloc_unlock>
 8004032:	e7e4      	b.n	8003ffe <_malloc_r+0x1e>
 8004034:	680b      	ldr	r3, [r1, #0]
 8004036:	1b5b      	subs	r3, r3, r5
 8004038:	d418      	bmi.n	800406c <_malloc_r+0x8c>
 800403a:	2b0b      	cmp	r3, #11
 800403c:	d90f      	bls.n	800405e <_malloc_r+0x7e>
 800403e:	600b      	str	r3, [r1, #0]
 8004040:	50cd      	str	r5, [r1, r3]
 8004042:	18cc      	adds	r4, r1, r3
 8004044:	4630      	mov	r0, r6
 8004046:	f000 f87a 	bl	800413e <__malloc_unlock>
 800404a:	f104 000b 	add.w	r0, r4, #11
 800404e:	1d23      	adds	r3, r4, #4
 8004050:	f020 0007 	bic.w	r0, r0, #7
 8004054:	1ac3      	subs	r3, r0, r3
 8004056:	d0d3      	beq.n	8004000 <_malloc_r+0x20>
 8004058:	425a      	negs	r2, r3
 800405a:	50e2      	str	r2, [r4, r3]
 800405c:	e7d0      	b.n	8004000 <_malloc_r+0x20>
 800405e:	428c      	cmp	r4, r1
 8004060:	684b      	ldr	r3, [r1, #4]
 8004062:	bf16      	itet	ne
 8004064:	6063      	strne	r3, [r4, #4]
 8004066:	6013      	streq	r3, [r2, #0]
 8004068:	460c      	movne	r4, r1
 800406a:	e7eb      	b.n	8004044 <_malloc_r+0x64>
 800406c:	460c      	mov	r4, r1
 800406e:	6849      	ldr	r1, [r1, #4]
 8004070:	e7cc      	b.n	800400c <_malloc_r+0x2c>
 8004072:	1cc4      	adds	r4, r0, #3
 8004074:	f024 0403 	bic.w	r4, r4, #3
 8004078:	42a0      	cmp	r0, r4
 800407a:	d005      	beq.n	8004088 <_malloc_r+0xa8>
 800407c:	1a21      	subs	r1, r4, r0
 800407e:	4630      	mov	r0, r6
 8004080:	f000 f808 	bl	8004094 <_sbrk_r>
 8004084:	3001      	adds	r0, #1
 8004086:	d0cf      	beq.n	8004028 <_malloc_r+0x48>
 8004088:	6025      	str	r5, [r4, #0]
 800408a:	e7db      	b.n	8004044 <_malloc_r+0x64>
 800408c:	200010cc 	.word	0x200010cc
 8004090:	200010d0 	.word	0x200010d0

08004094 <_sbrk_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4c06      	ldr	r4, [pc, #24]	; (80040b0 <_sbrk_r+0x1c>)
 8004098:	2300      	movs	r3, #0
 800409a:	4605      	mov	r5, r0
 800409c:	4608      	mov	r0, r1
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	f7fd f9f0 	bl	8001484 <_sbrk>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_sbrk_r+0x1a>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_sbrk_r+0x1a>
 80040ac:	602b      	str	r3, [r5, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	200012bc 	.word	0x200012bc

080040b4 <_raise_r>:
 80040b4:	291f      	cmp	r1, #31
 80040b6:	b538      	push	{r3, r4, r5, lr}
 80040b8:	4604      	mov	r4, r0
 80040ba:	460d      	mov	r5, r1
 80040bc:	d904      	bls.n	80040c8 <_raise_r+0x14>
 80040be:	2316      	movs	r3, #22
 80040c0:	6003      	str	r3, [r0, #0]
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040ca:	b112      	cbz	r2, 80040d2 <_raise_r+0x1e>
 80040cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80040d0:	b94b      	cbnz	r3, 80040e6 <_raise_r+0x32>
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 f830 	bl	8004138 <_getpid_r>
 80040d8:	462a      	mov	r2, r5
 80040da:	4601      	mov	r1, r0
 80040dc:	4620      	mov	r0, r4
 80040de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e2:	f000 b817 	b.w	8004114 <_kill_r>
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d00a      	beq.n	8004100 <_raise_r+0x4c>
 80040ea:	1c59      	adds	r1, r3, #1
 80040ec:	d103      	bne.n	80040f6 <_raise_r+0x42>
 80040ee:	2316      	movs	r3, #22
 80040f0:	6003      	str	r3, [r0, #0]
 80040f2:	2001      	movs	r0, #1
 80040f4:	e7e7      	b.n	80040c6 <_raise_r+0x12>
 80040f6:	2400      	movs	r4, #0
 80040f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80040fc:	4628      	mov	r0, r5
 80040fe:	4798      	blx	r3
 8004100:	2000      	movs	r0, #0
 8004102:	e7e0      	b.n	80040c6 <_raise_r+0x12>

08004104 <raise>:
 8004104:	4b02      	ldr	r3, [pc, #8]	; (8004110 <raise+0xc>)
 8004106:	4601      	mov	r1, r0
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	f7ff bfd3 	b.w	80040b4 <_raise_r>
 800410e:	bf00      	nop
 8004110:	20000084 	.word	0x20000084

08004114 <_kill_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4c07      	ldr	r4, [pc, #28]	; (8004134 <_kill_r+0x20>)
 8004118:	2300      	movs	r3, #0
 800411a:	4605      	mov	r5, r0
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	f7fd f9a0 	bl	8001466 <_kill>
 8004126:	1c43      	adds	r3, r0, #1
 8004128:	d102      	bne.n	8004130 <_kill_r+0x1c>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	b103      	cbz	r3, 8004130 <_kill_r+0x1c>
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	bd38      	pop	{r3, r4, r5, pc}
 8004132:	bf00      	nop
 8004134:	200012bc 	.word	0x200012bc

08004138 <_getpid_r>:
 8004138:	f7fd b993 	b.w	8001462 <_getpid>

0800413c <__malloc_lock>:
 800413c:	4770      	bx	lr

0800413e <__malloc_unlock>:
 800413e:	4770      	bx	lr

08004140 <_init>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr

0800414c <_fini>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr
