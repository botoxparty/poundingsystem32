
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008060  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f024  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801720c  0801720c  00033fc8  2**0
                  CONTENTS
  4 .ARM          00000008  0801720c  0801720c  0002720c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017214  08017214  00033fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017214  08017214  00027214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017218  08017218  00027218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0801721c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00003ecc  200000fc  08017318  000300fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000fc8c  20003fc8  0801b1e4  00033fc8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013c54  0801b1e4  00043c54  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f71e  00000000  00000000  00033ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00006cb6  00000000  00000000  00063716  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00010674  00000000  00000000  0006a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001898  00000000  00000000  0007aa40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002008  00000000  00000000  0007c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00029235  00000000  00000000  0007e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001aef7  00000000  00000000  000a7515  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000cd83d  00000000  00000000  000c240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0018fc49  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004e44  00000000  00000000  0018fcc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20003fc8 	.word	0x20003fc8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081d0 	.word	0x080081d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20003fcc 	.word	0x20003fcc
 80001c4:	080081d0 	.word	0x080081d0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <_ZN3LCD10invertTextEb>:
        write(LCD_DISPLAY_NORMAL, LCD_COMMAND);
    }
}
void LCD::invertText(bool mode)
{
    display.inverttext = mode;
 8000e14:	f880 11fc 	strb.w	r1, [r0, #508]	; 0x1fc
}
 8000e18:	4770      	bx	lr

08000e1a <_ZN3LCD4sendEh>:
    write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
    clrScr();
    display.inverttext = false;
}
void LCD::send(uint8_t val)
{
 8000e1a:	b510      	push	{r4, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	ac02      	add	r4, sp, #8
 8000e20:	f804 1d01 	strb.w	r1, [r4, #-1]!
    HAL_SPI_Transmit(gpio->SPICH, &val, 0x01, 1000);
 8000e24:	6800      	ldr	r0, [r0, #0]
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	6980      	ldr	r0, [r0, #24]
 8000e30:	f005 fc6b 	bl	800670a <HAL_SPI_Transmit>
};
 8000e34:	b002      	add	sp, #8
 8000e36:	bd10      	pop	{r4, pc}

08000e38 <_ZN3LCD5writeEhh>:
void LCD::write(uint8_t data, uint8_t mode)
{
 8000e38:	b538      	push	{r3, r4, r5, lr}
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	460d      	mov	r5, r1
    if (mode == LCD_COMMAND)
 8000e3e:	b1b2      	cbz	r2, 8000e6e <_ZN3LCD5writeEhh+0x36>
        send(data);
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
    }
    else
    {
        HAL_GPIO_WritePin(gpio->DCPORT, gpio->DCPIN, GPIO_PIN_SET);
 8000e40:	6803      	ldr	r3, [r0, #0]
 8000e42:	2201      	movs	r2, #1
 8000e44:	8999      	ldrh	r1, [r3, #12]
 8000e46:	6898      	ldr	r0, [r3, #8]
 8000e48:	f004 fb28 	bl	800549c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_RESET);
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	8899      	ldrh	r1, [r3, #4]
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	f004 fb22 	bl	800549c <HAL_GPIO_WritePin>
        send(data);
 8000e58:	4629      	mov	r1, r5
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff ffdd 	bl	8000e1a <_ZN3LCD4sendEh>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	8899      	ldrh	r1, [r3, #4]
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	f004 fb18 	bl	800549c <HAL_GPIO_WritePin>
    }
}
 8000e6c:	bd38      	pop	{r3, r4, r5, pc}
        HAL_GPIO_WritePin(gpio->DCPORT, gpio->DCPIN, GPIO_PIN_RESET);
 8000e6e:	6803      	ldr	r3, [r0, #0]
 8000e70:	8999      	ldrh	r1, [r3, #12]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	f004 fb12 	bl	800549c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_RESET);
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	8899      	ldrh	r1, [r3, #4]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	f004 fb0c 	bl	800549c <HAL_GPIO_WritePin>
        send(data);
 8000e84:	4629      	mov	r1, r5
 8000e86:	4620      	mov	r0, r4
 8000e88:	f7ff ffc7 	bl	8000e1a <_ZN3LCD4sendEh>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	8899      	ldrh	r1, [r3, #4]
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	f004 fb02 	bl	800549c <HAL_GPIO_WritePin>
 8000e98:	e7e8      	b.n	8000e6c <_ZN3LCD5writeEhh+0x34>

08000e9a <_ZN3LCD6clrScrEv>:
{
 8000e9a:	b538      	push	{r3, r4, r5, lr}
 8000e9c:	4605      	mov	r5, r0
    for (int i = 0; i < 504; i++)
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8000ea4:	da09      	bge.n	8000eba <_ZN3LCD6clrScrEv+0x20>
        write(0x00, LCD_DATA);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4628      	mov	r0, r5
 8000eac:	f7ff ffc4 	bl	8000e38 <_ZN3LCD5writeEhh>
        display.buffer[i] = 0;
 8000eb0:	192b      	adds	r3, r5, r4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 504; i++)
 8000eb6:	3401      	adds	r4, #1
 8000eb8:	e7f2      	b.n	8000ea0 <_ZN3LCD6clrScrEv+0x6>
}
 8000eba:	bd38      	pop	{r3, r4, r5, pc}

08000ebc <_ZN3LCD4goXYEhh>:
{
 8000ebc:	b538      	push	{r3, r4, r5, lr}
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4615      	mov	r5, r2
    write(0x80 | x, LCD_COMMAND); //Column.
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000ec8:	f7ff ffb6 	bl	8000e38 <_ZN3LCD5writeEhh>
    write(0x40 | y, LCD_COMMAND); //Row.
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f7ff ffb0 	bl	8000e38 <_ZN3LCD5writeEhh>
};
 8000ed8:	bd38      	pop	{r3, r4, r5, pc}
	...

08000edc <_ZN3LCD7putCharEc>:
{
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	4605      	mov	r5, r0
 8000ee0:	460e      	mov	r6, r1
    for (int i = 0; i < 6; i++)
 8000ee2:	2400      	movs	r4, #0
 8000ee4:	e00e      	b.n	8000f04 <_ZN3LCD7putCharEc+0x28>
            write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8000ee6:	f1a6 0320 	sub.w	r3, r6, #32
 8000eea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000eee:	005a      	lsls	r2, r3, #1
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <_ZN3LCD7putCharEc+0x50>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	5d19      	ldrb	r1, [r3, r4]
 8000ef6:	43c9      	mvns	r1, r1
 8000ef8:	2201      	movs	r2, #1
 8000efa:	b2c9      	uxtb	r1, r1
 8000efc:	4628      	mov	r0, r5
 8000efe:	f7ff ff9b 	bl	8000e38 <_ZN3LCD5writeEhh>
    for (int i = 0; i < 6; i++)
 8000f02:	3401      	adds	r4, #1
 8000f04:	2c05      	cmp	r4, #5
 8000f06:	dc10      	bgt.n	8000f2a <_ZN3LCD7putCharEc+0x4e>
        if (display.inverttext != true)
 8000f08:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ea      	bne.n	8000ee6 <_ZN3LCD7putCharEc+0xa>
            write(ASCII[c - 0x20][i], LCD_DATA);
 8000f10:	f1a6 0320 	sub.w	r3, r6, #32
 8000f14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f18:	005a      	lsls	r2, r3, #1
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <_ZN3LCD7putCharEc+0x50>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	2201      	movs	r2, #1
 8000f20:	5d19      	ldrb	r1, [r3, r4]
 8000f22:	4628      	mov	r0, r5
 8000f24:	f7ff ff88 	bl	8000e38 <_ZN3LCD5writeEhh>
 8000f28:	e7eb      	b.n	8000f02 <_ZN3LCD7putCharEc+0x26>
}
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	080081e8 	.word	0x080081e8

08000f30 <_ZN3LCD5printEPchh>:
{
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4605      	mov	r5, r0
 8000f34:	460c      	mov	r4, r1
 8000f36:	4611      	mov	r1, r2
    goXY(x, y);
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f7ff ffbf 	bl	8000ebc <_ZN3LCD4goXYEhh>
    while (*str)
 8000f3e:	7821      	ldrb	r1, [r4, #0]
 8000f40:	b121      	cbz	r1, 8000f4c <_ZN3LCD5printEPchh+0x1c>
        putChar(*str++);
 8000f42:	3401      	adds	r4, #1
 8000f44:	4628      	mov	r0, r5
 8000f46:	f7ff ffc9 	bl	8000edc <_ZN3LCD7putCharEc>
    while (*str)
 8000f4a:	e7f8      	b.n	8000f3e <_ZN3LCD5printEPchh+0xe>
};
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}

08000f4e <_ZN3LCD4initEv>:
{
 8000f4e:	b510      	push	{r4, lr}
 8000f50:	4604      	mov	r4, r0
    write(0x21, LCD_COMMAND);               //LCD extended commands.
 8000f52:	2200      	movs	r2, #0
 8000f54:	2121      	movs	r1, #33	; 0x21
 8000f56:	f7ff ff6f 	bl	8000e38 <_ZN3LCD5writeEhh>
    write(0xBE, LCD_COMMAND);               //set LCD Vop(Contrast).
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	21be      	movs	r1, #190	; 0xbe
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f7ff ff6a 	bl	8000e38 <_ZN3LCD5writeEhh>
    write(0x04, LCD_COMMAND);               //set temp coefficent.
 8000f64:	2200      	movs	r2, #0
 8000f66:	2104      	movs	r1, #4
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f7ff ff65 	bl	8000e38 <_ZN3LCD5writeEhh>
    write(0x14, LCD_COMMAND);               //LCD bias mode 1:40.
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2114      	movs	r1, #20
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff ff60 	bl	8000e38 <_ZN3LCD5writeEhh>
    write(0x20, LCD_COMMAND);               //LCD basic commands.
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f7ff ff5b 	bl	8000e38 <_ZN3LCD5writeEhh>
    write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000f82:	2200      	movs	r2, #0
 8000f84:	210c      	movs	r1, #12
 8000f86:	4620      	mov	r0, r4
 8000f88:	f7ff ff56 	bl	8000e38 <_ZN3LCD5writeEhh>
    clrScr();
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff ff84 	bl	8000e9a <_ZN3LCD6clrScrEv>
    display.inverttext = false;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8000f98:	bd10      	pop	{r4, pc}

08000f9a <_ZN3LCDC1EP8LCD_GPIO>:
LCD::LCD(LCD_GPIO* hgpio)
 8000f9a:	b510      	push	{r4, lr}
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	460b      	mov	r3, r1
    gpio = hgpio;
 8000fa0:	6021      	str	r1, [r4, #0]
    HAL_GPIO_WritePin(gpio->BLPORT, gpio->BLPIN, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	8a89      	ldrh	r1, [r1, #20]
 8000fa6:	6918      	ldr	r0, [r3, #16]
 8000fa8:	f004 fa78 	bl	800549c <HAL_GPIO_WritePin>
    init();
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff ffce 	bl	8000f4e <_ZN3LCD4initEv>
}
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	bd10      	pop	{r4, pc}

08000fb6 <_ZN3LCD10refreshScrEv>:
void LCD::refreshScr()
{
 8000fb6:	b570      	push	{r4, r5, r6, lr}
 8000fb8:	4605      	mov	r5, r0
    goXY(LCD_SETXADDR, LCD_SETYADDR);
 8000fba:	2240      	movs	r2, #64	; 0x40
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	f7ff ff7d 	bl	8000ebc <_ZN3LCD4goXYEhh>
    for (int i = 0; i < 6; i++)
 8000fc2:	2600      	movs	r6, #0
 8000fc4:	e000      	b.n	8000fc8 <_ZN3LCD10refreshScrEv+0x12>
 8000fc6:	3601      	adds	r6, #1
 8000fc8:	2e05      	cmp	r6, #5
 8000fca:	dc0d      	bgt.n	8000fe8 <_ZN3LCD10refreshScrEv+0x32>
    {
        for (int j = 0; j < LCD_WIDTH; j++)
 8000fcc:	2400      	movs	r4, #0
 8000fce:	2c53      	cmp	r4, #83	; 0x53
 8000fd0:	dcf9      	bgt.n	8000fc6 <_ZN3LCD10refreshScrEv+0x10>
        {
            write(display.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8000fd2:	2354      	movs	r3, #84	; 0x54
 8000fd4:	fb03 4306 	mla	r3, r3, r6, r4
 8000fd8:	442b      	add	r3, r5
 8000fda:	2201      	movs	r2, #1
 8000fdc:	7919      	ldrb	r1, [r3, #4]
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f7ff ff2a 	bl	8000e38 <_ZN3LCD5writeEhh>
        for (int j = 0; j < LCD_WIDTH; j++)
 8000fe4:	3401      	adds	r4, #1
 8000fe6:	e7f2      	b.n	8000fce <_ZN3LCD10refreshScrEv+0x18>
        }
    }
};
 8000fe8:	bd70      	pop	{r4, r5, r6, pc}

08000fea <_ZN3LCD9drawHLineEiii>:

void LCD::drawHLine(int x, int y, int l)
{
    int by, bi;

    if ((x >= 0) && (x < LCD_WIDTH) && (y >= 0) && (y < LCD_HEIGHT))
 8000fea:	2953      	cmp	r1, #83	; 0x53
 8000fec:	d823      	bhi.n	8001036 <_ZN3LCD9drawHLineEiii+0x4c>
 8000fee:	2a00      	cmp	r2, #0
 8000ff0:	db21      	blt.n	8001036 <_ZN3LCD9drawHLineEiii+0x4c>
 8000ff2:	2a2f      	cmp	r2, #47	; 0x2f
 8000ff4:	dc1f      	bgt.n	8001036 <_ZN3LCD9drawHLineEiii+0x4c>
{
 8000ff6:	b4f0      	push	{r4, r5, r6, r7}
    {
        for (int cx = 0; cx < l; cx++)
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	e013      	b.n	8001024 <_ZN3LCD9drawHLineEiii+0x3a>
        {
            by = ((y / 8) * 84) + x;
 8000ffc:	10e4      	asrs	r4, r4, #3
 8000ffe:	2654      	movs	r6, #84	; 0x54
 8001000:	fb06 1404 	mla	r4, r6, r4, r1
            bi = y % 8;
 8001004:	4256      	negs	r6, r2
 8001006:	f002 0707 	and.w	r7, r2, #7
 800100a:	f006 0607 	and.w	r6, r6, #7
 800100e:	bf58      	it	pl
 8001010:	4277      	negpl	r7, r6
            display.buffer[by + cx] |= (1 << bi);
 8001012:	442c      	add	r4, r5
 8001014:	2601      	movs	r6, #1
 8001016:	fa06 f707 	lsl.w	r7, r6, r7
 800101a:	4404      	add	r4, r0
 800101c:	7926      	ldrb	r6, [r4, #4]
 800101e:	433e      	orrs	r6, r7
 8001020:	7126      	strb	r6, [r4, #4]
        for (int cx = 0; cx < l; cx++)
 8001022:	3501      	adds	r5, #1
 8001024:	429d      	cmp	r5, r3
 8001026:	da04      	bge.n	8001032 <_ZN3LCD9drawHLineEiii+0x48>
            by = ((y / 8) * 84) + x;
 8001028:	4614      	mov	r4, r2
 800102a:	2a00      	cmp	r2, #0
 800102c:	dae6      	bge.n	8000ffc <_ZN3LCD9drawHLineEiii+0x12>
 800102e:	1dd4      	adds	r4, r2, #7
 8001030:	e7e4      	b.n	8000ffc <_ZN3LCD9drawHLineEiii+0x12>
        }
    }
};
 8001032:	bcf0      	pop	{r4, r5, r6, r7}
 8001034:	4770      	bx	lr
 8001036:	4770      	bx	lr

08001038 <maincpp>:
//         i2c.DR
//     }
// };

int maincpp(PS_Communication_Interface* comms, PS_Encoder_Timers* enc, LCD_GPIO* lcdGpio)
{
 8001038:	b500      	push	{lr}
 800103a:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
    LCD lcd (lcdGpio);
 800103e:	4611      	mov	r1, r2
 8001040:	a802      	add	r0, sp, #8
 8001042:	f7ff ffaa 	bl	8000f9a <_ZN3LCDC1EP8LCD_GPIO>

    MenuSystem menu(&lcd);
 8001046:	a902      	add	r1, sp, #8
 8001048:	a801      	add	r0, sp, #4
 800104a:	f000 f804 	bl	8001056 <_ZN10MenuSystemC1EP3LCD>
    menu.MainMenu();
 800104e:	a801      	add	r0, sp, #4
 8001050:	f000 f804 	bl	800105c <_ZN10MenuSystem8MainMenuEv>
 8001054:	e7fe      	b.n	8001054 <maincpp+0x1c>

08001056 <_ZN10MenuSystemC1EP3LCD>:

extern uint8_t WM8978_SPK_Volume;

MenuSystem::MenuSystem(LCD *hlcd)
{
    lcd = hlcd;
 8001056:	6001      	str	r1, [r0, #0]
}
 8001058:	4770      	bx	lr
	...

0800105c <_ZN10MenuSystem8MainMenuEv>:
/**
  * @brief Main Menu
  */
void MenuSystem::MainMenu()
{
 800105c:	b510      	push	{r4, lr}
 800105e:	4604      	mov	r4, r0
    lcd->drawHLine(0, 8, 83);
 8001060:	2353      	movs	r3, #83	; 0x53
 8001062:	2208      	movs	r2, #8
 8001064:	2100      	movs	r1, #0
 8001066:	6800      	ldr	r0, [r0, #0]
 8001068:	f7ff ffbf 	bl	8000fea <_ZN3LCD9drawHLineEiii>
    lcd->refreshScr();
 800106c:	6820      	ldr	r0, [r4, #0]
 800106e:	f7ff ffa2 	bl	8000fb6 <_ZN3LCD10refreshScrEv>
    if (activeItem == 0)
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <_ZN10MenuSystem8MainMenuEv+0xe8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d132      	bne.n	80010e0 <_ZN10MenuSystem8MainMenuEv+0x84>
    {
        lcd->invertText(true);
 800107a:	2101      	movs	r1, #1
 800107c:	6820      	ldr	r0, [r4, #0]
 800107e:	f7ff fec9 	bl	8000e14 <_ZN3LCD10invertTextEb>
        lcd->print("SINE", 0, 0);
 8001082:	2300      	movs	r3, #0
 8001084:	461a      	mov	r2, r3
 8001086:	4930      	ldr	r1, [pc, #192]	; (8001148 <_ZN10MenuSystem8MainMenuEv+0xec>)
 8001088:	6820      	ldr	r0, [r4, #0]
 800108a:	f7ff ff51 	bl	8000f30 <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 800108e:	2100      	movs	r1, #0
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	f7ff febf 	bl	8000e14 <_ZN3LCD10invertTextEb>
    else
    {
        lcd->print("SINE", 0, 0);
    }
    //  lcd->goXY(0,20);
    lcd->print("Freq       440", 0, 1);
 8001096:	2301      	movs	r3, #1
 8001098:	2200      	movs	r2, #0
 800109a:	492c      	ldr	r1, [pc, #176]	; (800114c <_ZN10MenuSystem8MainMenuEv+0xf0>)
 800109c:	6820      	ldr	r0, [r4, #0]
 800109e:	f7ff ff47 	bl	8000f30 <_ZN3LCD5printEPchh>
    lcd->print("Mod        100", 0, 2);
 80010a2:	2302      	movs	r3, #2
 80010a4:	2200      	movs	r2, #0
 80010a6:	492a      	ldr	r1, [pc, #168]	; (8001150 <_ZN10MenuSystem8MainMenuEv+0xf4>)
 80010a8:	6820      	ldr	r0, [r4, #0]
 80010aa:	f7ff ff41 	bl	8000f30 <_ZN3LCD5printEPchh>
    lcd->print("Rate      1200", 0, 3);
 80010ae:	2303      	movs	r3, #3
 80010b0:	2200      	movs	r2, #0
 80010b2:	4928      	ldr	r1, [pc, #160]	; (8001154 <_ZN10MenuSystem8MainMenuEv+0xf8>)
 80010b4:	6820      	ldr	r0, [r4, #0]
 80010b6:	f7ff ff3b 	bl	8000f30 <_ZN3LCD5printEPchh>
    lcd->print("- - - -       ", 0, 4);
 80010ba:	2304      	movs	r3, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	4926      	ldr	r1, [pc, #152]	; (8001158 <_ZN10MenuSystem8MainMenuEv+0xfc>)
 80010c0:	6820      	ldr	r0, [r4, #0]
 80010c2:	f7ff ff35 	bl	8000f30 <_ZN3LCD5printEPchh>

    if (activeItem == 1)
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <_ZN10MenuSystem8MainMenuEv+0xe8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d00f      	beq.n	80010ee <_ZN10MenuSystem8MainMenuEv+0x92>
        lcd->print("         MIXER", 0, 5);
        lcd->invertText(true);
        lcd->print("<  >", 0, 5);
        lcd->invertText(false);
    }
    else if (activeItem == 2)
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d022      	beq.n	8001118 <_ZN10MenuSystem8MainMenuEv+0xbc>
        lcd->print("MIXER", 54, 5);
        lcd->invertText(false);
    }
    else
    {
        lcd->print("<  >     MIXER", 0, 5);
 80010d2:	2305      	movs	r3, #5
 80010d4:	2200      	movs	r2, #0
 80010d6:	4921      	ldr	r1, [pc, #132]	; (800115c <_ZN10MenuSystem8MainMenuEv+0x100>)
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	f7ff ff29 	bl	8000f30 <_ZN3LCD5printEPchh>
    }
}
 80010de:	bd10      	pop	{r4, pc}
        lcd->print("SINE", 0, 0);
 80010e0:	2300      	movs	r3, #0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4918      	ldr	r1, [pc, #96]	; (8001148 <_ZN10MenuSystem8MainMenuEv+0xec>)
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	f7ff ff22 	bl	8000f30 <_ZN3LCD5printEPchh>
 80010ec:	e7d3      	b.n	8001096 <_ZN10MenuSystem8MainMenuEv+0x3a>
        lcd->print("         MIXER", 0, 5);
 80010ee:	2305      	movs	r3, #5
 80010f0:	2200      	movs	r2, #0
 80010f2:	491b      	ldr	r1, [pc, #108]	; (8001160 <_ZN10MenuSystem8MainMenuEv+0x104>)
 80010f4:	6820      	ldr	r0, [r4, #0]
 80010f6:	f7ff ff1b 	bl	8000f30 <_ZN3LCD5printEPchh>
        lcd->invertText(true);
 80010fa:	2101      	movs	r1, #1
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	f7ff fe89 	bl	8000e14 <_ZN3LCD10invertTextEb>
        lcd->print("<  >", 0, 5);
 8001102:	2305      	movs	r3, #5
 8001104:	2200      	movs	r2, #0
 8001106:	4917      	ldr	r1, [pc, #92]	; (8001164 <_ZN10MenuSystem8MainMenuEv+0x108>)
 8001108:	6820      	ldr	r0, [r4, #0]
 800110a:	f7ff ff11 	bl	8000f30 <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 800110e:	2100      	movs	r1, #0
 8001110:	6820      	ldr	r0, [r4, #0]
 8001112:	f7ff fe7f 	bl	8000e14 <_ZN3LCD10invertTextEb>
 8001116:	e7e2      	b.n	80010de <_ZN10MenuSystem8MainMenuEv+0x82>
        lcd->print("<  >", 0, 5);
 8001118:	2305      	movs	r3, #5
 800111a:	2200      	movs	r2, #0
 800111c:	4911      	ldr	r1, [pc, #68]	; (8001164 <_ZN10MenuSystem8MainMenuEv+0x108>)
 800111e:	6820      	ldr	r0, [r4, #0]
 8001120:	f7ff ff06 	bl	8000f30 <_ZN3LCD5printEPchh>
        lcd->invertText(true);
 8001124:	2101      	movs	r1, #1
 8001126:	6820      	ldr	r0, [r4, #0]
 8001128:	f7ff fe74 	bl	8000e14 <_ZN3LCD10invertTextEb>
        lcd->print("MIXER", 54, 5);
 800112c:	2305      	movs	r3, #5
 800112e:	2236      	movs	r2, #54	; 0x36
 8001130:	490d      	ldr	r1, [pc, #52]	; (8001168 <_ZN10MenuSystem8MainMenuEv+0x10c>)
 8001132:	6820      	ldr	r0, [r4, #0]
 8001134:	f7ff fefc 	bl	8000f30 <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 8001138:	2100      	movs	r1, #0
 800113a:	6820      	ldr	r0, [r4, #0]
 800113c:	f7ff fe6a 	bl	8000e14 <_ZN3LCD10invertTextEb>
 8001140:	e7cd      	b.n	80010de <_ZN10MenuSystem8MainMenuEv+0x82>
 8001142:	bf00      	nop
 8001144:	20003fe4 	.word	0x20003fe4
 8001148:	08008428 	.word	0x08008428
 800114c:	08008430 	.word	0x08008430
 8001150:	08008440 	.word	0x08008440
 8001154:	08008450 	.word	0x08008450
 8001158:	08008460 	.word	0x08008460
 800115c:	08008490 	.word	0x08008490
 8001160:	08008470 	.word	0x08008470
 8001164:	08008480 	.word	0x08008480
 8001168:	08008488 	.word	0x08008488

0800116c <TriggerSound>:
 * @brief  Trigger the sound on
 * @param  None
 * @retval none
 */
void TriggerSound(void)
{
 800116c:	b510      	push	{r4, lr}
	if(triggered) {
 800116e:	4c0d      	ldr	r4, [pc, #52]	; (80011a4 <TriggerSound+0x38>)
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <TriggerSound+0x3c>)
 8001172:	7822      	ldrb	r2, [r4, #0]
 8001174:	b17a      	cbz	r2, 8001196 <TriggerSound+0x2a>
		velocity = 0;
 8001176:	2200      	movs	r2, #0
		ADSR_keyOff(&adsr);
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <TriggerSound+0x40>)
		velocity = 0;
 800117a:	701a      	strb	r2, [r3, #0]
		ADSR_keyOff(&adsr);
 800117c:	f000 f95b 	bl	8001436 <ADSR_keyOff>
	} else {
		velocity = 127;
		ADSR_keyOn(&adsr);
	}

	triggered = !triggered;
 8001180:	7822      	ldrb	r2, [r4, #0]
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <TriggerSound+0x44>)
	triggered = !triggered;
 8001184:	f082 0201 	eor.w	r2, r2, #1
 8001188:	7022      	strb	r2, [r4, #0]
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 800118a:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 800118e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 8001192:	f004 b983 	b.w	800549c <HAL_GPIO_WritePin>
		velocity = 127;
 8001196:	227f      	movs	r2, #127	; 0x7f
		ADSR_keyOn(&adsr);
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <TriggerSound+0x40>)
		velocity = 127;
 800119a:	701a      	strb	r2, [r3, #0]
		ADSR_keyOn(&adsr);
 800119c:	f000 f942 	bl	8001424 <ADSR_keyOn>
 80011a0:	e7ee      	b.n	8001180 <TriggerSound+0x14>
 80011a2:	bf00      	nop
 80011a4:	20003fe8 	.word	0x20003fe8
 80011a8:	20012ab4 	.word	0x20012ab4
 80011ac:	200000fc 	.word	0x200000fc
 80011b0:	40020800 	.word	0x40020800

080011b4 <MagicFX>:
//}

/*-----------------------------------------------------------------------------*/
void MagicFX(uint8_t val) /* random effects parameters */
{
	if (val == MIDI_MAXi)
 80011b4:	287f      	cmp	r0, #127	; 0x7f
{
 80011b6:	b510      	push	{r4, lr}
 80011b8:	4604      	mov	r4, r0
	if (val == MIDI_MAXi)
 80011ba:	d13d      	bne.n	8001238 <MagicFX+0x84>
	{
		Delay_switch(MIDI_MAXi);
 80011bc:	f002 ffd4 	bl	8004168 <Delay_switch>
		Delay_time_set(MIDIrandVal());
 80011c0:	f002 fbfc 	bl	80039bc <MIDIrandVal>
 80011c4:	f001 fa30 	bl	8002628 <Delay_time_set>
		DelayWet_set(MIDIrandVal());
 80011c8:	f002 fbf8 	bl	80039bc <MIDIrandVal>
 80011cc:	f001 fa66 	bl	800269c <DelayWet_set>
		DelayFeedback_set(MIDIrandVal());
 80011d0:	f002 fbf4 	bl	80039bc <MIDIrandVal>
 80011d4:	f001 fa52 	bl	800267c <DelayFeedback_set>

		Chorus_switch(MIDI_MAXi);
 80011d8:	4620      	mov	r0, r4
 80011da:	f002 ffdb 	bl	8004194 <Chorus_switch>
		ChorusRate_set(MIDIrandVal());
 80011de:	f002 fbed 	bl	80039bc <MIDIrandVal>
 80011e2:	f001 f847 	bl	8002274 <ChorusRate_set>
		ChorusSecondRate_set(MIDIrandVal());
 80011e6:	f002 fbe9 	bl	80039bc <MIDIrandVal>
 80011ea:	f001 f861 	bl	80022b0 <ChorusSecondRate_set>
		ChorusDelay_set(MIDIrandVal());
 80011ee:	f002 fbe5 	bl	80039bc <MIDIrandVal>
 80011f2:	f001 f87b 	bl	80022ec <ChorusDelay_set>
		ChorusSweep_set(MIDIrandVal());
 80011f6:	f002 fbe1 	bl	80039bc <MIDIrandVal>
 80011fa:	f001 f8a9 	bl	8002350 <ChorusSweep_set>
		ChorusFeedback_set(MIDIrandVal());
 80011fe:	f002 fbdd 	bl	80039bc <MIDIrandVal>
 8001202:	f001 f889 	bl	8002318 <ChorusFeedback_set>
		ChorusMode_switch(MIDIrandVal());
 8001206:	f002 fbd9 	bl	80039bc <MIDIrandVal>
 800120a:	f001 f8b3 	bl	8002374 <ChorusMode_switch>
		ChorusFDBsign_switch(MIDIrandVal());
 800120e:	f002 fbd5 	bl	80039bc <MIDIrandVal>
 8001212:	f001 f8c3 	bl	800239c <ChorusFDBsign_switch>

		Phaser_switch(MIDI_MAXi);
 8001216:	4620      	mov	r0, r4
 8001218:	f002 ffc6 	bl	80041a8 <Phaser_switch>
		Phaser_Rate_set(MIDIrandVal());
 800121c:	f002 fbce 	bl	80039bc <MIDIrandVal>
 8001220:	f002 fae8 	bl	80037f4 <Phaser_Rate_set>
		Phaser_Feedback_set(MIDIrandVal());
 8001224:	f002 fbca 	bl	80039bc <MIDIrandVal>
 8001228:	f002 fb04 	bl	8003834 <Phaser_Feedback_set>
		Phaser_Wet_set(MIDIrandVal());
 800122c:	f002 fbc6 	bl	80039bc <MIDIrandVal>
	}
}
 8001230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Phaser_Wet_set(MIDIrandVal());
 8001234:	f002 bb14 	b.w	8003860 <Phaser_Wet_set>
}
 8001238:	bd10      	pop	{r4, pc}
	...

0800123c <MagicPatch>:
/*-----------------------------------------------------------------------------*/
void MagicPatch(uint8_t val) /* random sound parameters */
{
	if (val == MIDI_MAXi)
 800123c:	287f      	cmp	r0, #127	; 0x7f
{
 800123e:	b508      	push	{r3, lr}
	if (val == MIDI_MAXi)
 8001240:	f040 80bb 	bne.w	80013ba <MagicPatch+0x17e>
	{
		seq_tempo_set(MIDIrandVal());
 8001244:	f002 fbba 	bl	80039bc <MIDIrandVal>
 8001248:	f002 fdac 	bl	8003da4 <seq_tempo_set>
		seq_freqMax_set(MIDIrandVal());
 800124c:	f002 fbb6 	bl	80039bc <MIDIrandVal>
 8001250:	f002 fe3a 	bl	8003ec8 <seq_freqMax_set>
		seq_scale_set(MIDIrandVal());
 8001254:	f002 fbb2 	bl	80039bc <MIDIrandVal>
 8001258:	f002 fe00 	bl	8003e5c <seq_scale_set>
		seq_switchMovingSeq(MIDIrandVal());
 800125c:	f002 fbae 	bl	80039bc <MIDIrandVal>
 8001260:	f002 fe1a 	bl	8003e98 <seq_switchMovingSeq>
		seq_switchMute(MIDIrandVal());
 8001264:	f002 fbaa 	bl	80039bc <MIDIrandVal>
 8001268:	f002 fe20 	bl	8003eac <seq_switchMute>
		seq_gateTime_set(MIDIrandVal());
 800126c:	f002 fba6 	bl	80039bc <MIDIrandVal>
 8001270:	f002 fdbc 	bl	8003dec <seq_gateTime_set>
		autoSound_set(rand() % 3);
 8001274:	f006 ff04 	bl	8008080 <rand>
 8001278:	2303      	movs	r3, #3
 800127a:	fb90 f3f3 	sdiv	r3, r0, r3
 800127e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001282:	1ac0      	subs	r0, r0, r3
 8001284:	b240      	sxtb	r0, r0
 8001286:	f002 fee3 	bl	8004050 <autoSound_set>
		Sound_set(MIDIrandVal());
 800128a:	f002 fb97 	bl	80039bc <MIDIrandVal>
 800128e:	f002 ff95 	bl	80041bc <Sound_set>
		uint8_t snd = soundNumber_get();
 8001292:	f002 fee3 	bl	800405c <soundNumber_get>

		if (snd == FM2)
 8001296:	280e      	cmp	r0, #14
 8001298:	d17c      	bne.n	8001394 <MagicPatch+0x158>
		{
			FM_OP1_freq_set(MIDIrandVal());
 800129a:	f002 fb8f 	bl	80039bc <MIDIrandVal>
 800129e:	f002 ffaf 	bl	8004200 <FM_OP1_freq_set>
			FM_OP1_modInd_set(MIDIrandVal());
 80012a2:	f002 fb8b 	bl	80039bc <MIDIrandVal>
 80012a6:	f002 ffb1 	bl	800420c <FM_OP1_modInd_set>
			FM_OP2_freq_set(MIDIrandVal());
 80012aa:	f002 fb87 	bl	80039bc <MIDIrandVal>
 80012ae:	f002 ffb3 	bl	8004218 <FM_OP2_freq_set>
			FM_OP2_modInd_set(MIDIrandVal());
 80012b2:	f002 fb83 	bl	80039bc <MIDIrandVal>
 80012b6:	f002 ffc1 	bl	800423c <FM_OP2_modInd_set>
			FM_OP3_freq_set(MIDIrandVal());
 80012ba:	f002 fb7f 	bl	80039bc <MIDIrandVal>
 80012be:	f002 ffc3 	bl	8004248 <FM_OP3_freq_set>
			FM_OP3_modInd_set(MIDIrandVal());
 80012c2:	f002 fb7b 	bl	80039bc <MIDIrandVal>
 80012c6:	f002 ffd1 	bl	800426c <FM_OP3_modInd_set>
			FM_OP4_freq_set(MIDIrandVal());
 80012ca:	f002 fb77 	bl	80039bc <MIDIrandVal>
 80012ce:	f002 ffd3 	bl	8004278 <FM_OP4_freq_set>
			FM_OP4_modInd_set(MIDIrandVal());
 80012d2:	f002 fb73 	bl	80039bc <MIDIrandVal>
 80012d6:	f002 ffe1 	bl	800429c <FM_OP4_modInd_set>
			Drifter_minFreq_set(MIDIrandVal());
			Drifter_maxFreq_set(MIDIrandVal());
			Drifter_centralFreq_set(MIDIrandVal());
		}

		Filter1Freq_set(MIDIrandVal());
 80012da:	f002 fb6f 	bl	80039bc <MIDIrandVal>
 80012de:	f002 fbfb 	bl	8003ad8 <Filter1Freq_set>
		Filter1Res_set(MIDIrandVal());
 80012e2:	f002 fb6b 	bl	80039bc <MIDIrandVal>
 80012e6:	f002 fc15 	bl	8003b14 <Filter1Res_set>
		Filter1Drive_set(MIDIrandVal());
 80012ea:	f002 fb67 	bl	80039bc <MIDIrandVal>
 80012ee:	f002 fc21 	bl	8003b34 <Filter1Drive_set>
		Filter1Type_set(MIDIrandVal());
 80012f2:	f002 fb63 	bl	80039bc <MIDIrandVal>
 80012f6:	f002 fc23 	bl	8003b40 <Filter1Type_set>
		Filt1LFO_amp_set(MIDIrandVal());
 80012fa:	f002 fb5f 	bl	80039bc <MIDIrandVal>
 80012fe:	f002 fed3 	bl	80040a8 <Filt1LFO_amp_set>
		Filt1LFO_freq_set(MIDIrandVal());
 8001302:	f002 fb5b 	bl	80039bc <MIDIrandVal>
 8001306:	f002 fedf 	bl	80040c8 <Filt1LFO_freq_set>

		Filter2Freq_set(MIDIrandVal());
 800130a:	f002 fb57 	bl	80039bc <MIDIrandVal>
 800130e:	f002 fc2b 	bl	8003b68 <Filter2Freq_set>
		Filter2Res_set(MIDIrandVal());
 8001312:	f002 fb53 	bl	80039bc <MIDIrandVal>
 8001316:	f002 fc45 	bl	8003ba4 <Filter2Res_set>
		Filter2Drive_set(MIDIrandVal());
 800131a:	f002 fb4f 	bl	80039bc <MIDIrandVal>
 800131e:	f002 fc51 	bl	8003bc4 <Filter2Drive_set>
		Filter2Type_set(MIDIrandVal());
 8001322:	f002 fb4b 	bl	80039bc <MIDIrandVal>
 8001326:	f002 fc53 	bl	8003bd0 <Filter2Type_set>
		Filt2LFO_amp_set(MIDIrandVal());
 800132a:	f002 fb47 	bl	80039bc <MIDIrandVal>
 800132e:	f002 fedb 	bl	80040e8 <Filt2LFO_amp_set>
		Filt2LFO_freq_set(MIDIrandVal());
 8001332:	f002 fb43 	bl	80039bc <MIDIrandVal>
 8001336:	f002 fee7 	bl	8004108 <Filt2LFO_freq_set>

		Filter_Random_switch(MIDIrandVal());
 800133a:	f002 fb3f 	bl	80039bc <MIDIrandVal>
 800133e:	f002 ff1f 	bl	8004180 <Filter_Random_switch>

		AttTime_set((uint8_t)lrintf(frand_a_b(0, MIDI_MAX / 10)));
 8001342:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80013bc <MagicPatch+0x180>
 8001346:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80013c0 <MagicPatch+0x184>
 800134a:	f002 fb21 	bl	8003990 <frand_a_b>
 800134e:	f005 fc7b 	bl	8006c48 <lrintf>
 8001352:	b2c0      	uxtb	r0, r0
 8001354:	f000 f878 	bl	8001448 <AttTime_set>
		DecTime_set(MIDIrandVal());
 8001358:	f002 fb30 	bl	80039bc <MIDIrandVal>
 800135c:	f000 f894 	bl	8001488 <DecTime_set>
		SustLevel_set(MIDIrandVal());
 8001360:	f002 fb2c 	bl	80039bc <MIDIrandVal>
 8001364:	f000 f8c4 	bl	80014f0 <SustLevel_set>
		RelTime_set(MIDIrandVal());
 8001368:	f002 fb28 	bl	80039bc <MIDIrandVal>
 800136c:	f000 f8d0 	bl	8001510 <RelTime_set>

		VibratoAmp_set(MIDIrandVal());
 8001370:	f002 fb24 	bl	80039bc <MIDIrandVal>
 8001374:	f002 fed8 	bl	8004128 <VibratoAmp_set>
		VibratoFreq_set(MIDIrandVal());
 8001378:	f002 fb20 	bl	80039bc <MIDIrandVal>
 800137c:	f002 fee4 	bl	8004148 <VibratoFreq_set>

		AmpLFO_amp_set(MIDIrandVal());
 8001380:	f002 fb1c 	bl	80039bc <MIDIrandVal>
 8001384:	f002 fe70 	bl	8004068 <AmpLFO_amp_set>
		AmpLFO_freq_set(MIDIrandVal());
 8001388:	f002 fb18 	bl	80039bc <MIDIrandVal>
	}
}
 800138c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		AmpLFO_freq_set(MIDIrandVal());
 8001390:	f002 be7a 	b.w	8004088 <AmpLFO_freq_set>
		else if (snd == DRIFTERS)
 8001394:	280d      	cmp	r0, #13
 8001396:	d1a0      	bne.n	80012da <MagicPatch+0x9e>
			Drifter_amp_set(MIDIrandVal());
 8001398:	f002 fb10 	bl	80039bc <MIDIrandVal>
 800139c:	f001 f9ea 	bl	8002774 <Drifter_amp_set>
			Drifter_minFreq_set(MIDIrandVal());
 80013a0:	f002 fb0c 	bl	80039bc <MIDIrandVal>
 80013a4:	f001 f9fc 	bl	80027a0 <Drifter_minFreq_set>
			Drifter_maxFreq_set(MIDIrandVal());
 80013a8:	f002 fb08 	bl	80039bc <MIDIrandVal>
 80013ac:	f001 fa14 	bl	80027d8 <Drifter_maxFreq_set>
			Drifter_centralFreq_set(MIDIrandVal());
 80013b0:	f002 fb04 	bl	80039bc <MIDIrandVal>
 80013b4:	f001 fd0a 	bl	8002dcc <Drifter_centralFreq_set>
 80013b8:	e78f      	b.n	80012da <MagicPatch+0x9e>
}
 80013ba:	bd08      	pop	{r3, pc}
 80013bc:	414b3333 	.word	0x414b3333
 80013c0:	00000000 	.word	0x00000000

080013c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2)
 80013c4:	6802      	ldr	r2, [r0, #0]
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <HAL_I2S_TxCpltCallback+0x14>)
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d104      	bne.n	80013d6 <HAL_I2S_TxCpltCallback+0x12>
  {
    /* Call the user function which will manage directly transfer complete */
	  make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
 80013cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <HAL_I2S_TxCpltCallback+0x18>)
 80013d2:	f003 b8b5 	b.w	8004540 <make_sound>
  }
}
 80013d6:	4770      	bx	lr
 80013d8:	40003800 	.word	0x40003800
 80013dc:	20013286 	.word	0x20013286

080013e0 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2)
 80013e0:	6802      	ldr	r2, [r0, #0]
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_I2S_TxHalfCpltCallback+0x14>)
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d104      	bne.n	80013f2 <HAL_I2S_TxHalfCpltCallback+0x12>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  	make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
 80013e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <HAL_I2S_TxHalfCpltCallback+0x18>)
 80013ee:	f003 b8a7 	b.w	8004540 <make_sound>
  }
}
 80013f2:	4770      	bx	lr
 80013f4:	40003800 	.word	0x40003800
 80013f8:	20012ab6 	.word	0x20012ab6

080013fc <ADSR_init>:

/*---------------------------------------------------------------------------*/

void ADSR_init(ADSR_t *env)
{
  env->target_ = 0.0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	6183      	str	r3, [r0, #24]
  env->value_ = 0.0;
 8001400:	6103      	str	r3, [r0, #16]
  env->attackRate_ = 0.001;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <ADSR_init+0x20>)
 8001404:	6003      	str	r3, [r0, #0]
  env->decayRate_ = 0.001;
 8001406:	6043      	str	r3, [r0, #4]
  env->sustainLevel_ = 0.5;
 8001408:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800140c:	6083      	str	r3, [r0, #8]
  env->releaseRate_ = 0.01;
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <ADSR_init+0x24>)
 8001410:	60c3      	str	r3, [r0, #12]
  env->state_ = ATTACK;
 8001412:	2300      	movs	r3, #0
  env->cnt_ = 0;
 8001414:	e9c0 3308 	strd	r3, r3, [r0, #32]
  //env->gateTime_ = 10000;
}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	3a83126f 	.word	0x3a83126f
 8001420:	3c23d70a 	.word	0x3c23d70a

08001424 <ADSR_keyOn>:

void ADSR_keyOn(ADSR_t *env)
{
	env->cnt_ = 0;
	env->target_ = 1.0f;
 8001424:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	env->cnt_ = 0;
 8001428:	2300      	movs	r3, #0
	env->target_ = 1.0f;
 800142a:	6182      	str	r2, [r0, #24]
	env->rate_ = 	env->attackRate_;
 800142c:	6802      	ldr	r2, [r0, #0]
	env->cnt_ = 0;
 800142e:	6243      	str	r3, [r0, #36]	; 0x24
	env->rate_ = 	env->attackRate_;
 8001430:	61c2      	str	r2, [r0, #28]
	env->state_ = ATTACK;
 8001432:	6203      	str	r3, [r0, #32]
}
 8001434:	4770      	bx	lr

08001436 <ADSR_keyOff>:

void ADSR_keyOff(ADSR_t *env)
{
	env->cnt_ = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	6243      	str	r3, [r0, #36]	; 0x24
	env->target_ = 0.0;
 800143a:	2300      	movs	r3, #0
 800143c:	6183      	str	r3, [r0, #24]
	env->rate_ = 	env->releaseRate_;
 800143e:	68c3      	ldr	r3, [r0, #12]
 8001440:	61c3      	str	r3, [r0, #28]
	env->state_ = RELEASE;
 8001442:	2303      	movs	r3, #3
 8001444:	6203      	str	r3, [r0, #32]
}
 8001446:	4770      	bx	lr

08001448 <AttTime_set>:
  return env->state_;
}

void AttTime_set(uint8_t val)
{
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 8001448:	ee07 0a90 	vmov	s15, r0
 800144c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001478 <AttTime_set+0x30>
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <AttTime_set+0x34>)
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 8001452:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800145a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001480 <AttTime_set+0x38>
 800145e:	ee77 7a87 	vadd.f32	s15, s15, s14
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 8001462:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001484 <AttTime_set+0x3c>
 8001466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800146e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001472:	ed83 7a00 	vstr	s14, [r3]
}
 8001476:	4770      	bx	lr
 8001478:	42fe0000 	.word	0x42fe0000
 800147c:	200000fc 	.word	0x200000fc
 8001480:	38d1b717 	.word	0x38d1b717
 8001484:	472c4400 	.word	0x472c4400

08001488 <DecTime_set>:
void DecTime_set(uint8_t val)
{
 8001488:	b508      	push	{r3, lr}
	ADSR_setDecayTime(&adsr, .2*val/MIDI_MAX + 0.0001f);
 800148a:	f7fe ffef 	bl	800046c <__aeabi_i2d>
 800148e:	a312      	add	r3, pc, #72	; (adr r3, 80014d8 <DecTime_set+0x50>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f854 	bl	8000540 <__aeabi_dmul>
 8001498:	a311      	add	r3, pc, #68	; (adr r3, 80014e0 <DecTime_set+0x58>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f979 	bl	8000794 <__aeabi_ddiv>
 80014a2:	a311      	add	r3, pc, #68	; (adr r3, 80014e8 <DecTime_set+0x60>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7fe fe94 	bl	80001d4 <__adddf3>
 80014ac:	f7ff fae2 	bl	8000a74 <__aeabi_d2f>
	env->decayRate_ = 1.0 / ( time * SAMPLERATE );
 80014b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80014d0 <DecTime_set+0x48>
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <DecTime_set+0x4c>)
 80014b6:	ee07 0a10 	vmov	s14, r0
 80014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014c6:	ed83 7a01 	vstr	s14, [r3, #4]
}
 80014ca:	bd08      	pop	{r3, pc}
 80014cc:	f3af 8000 	nop.w
 80014d0:	472c4400 	.word	0x472c4400
 80014d4:	200000fc 	.word	0x200000fc
 80014d8:	9999999a 	.word	0x9999999a
 80014dc:	3fc99999 	.word	0x3fc99999
 80014e0:	00000000 	.word	0x00000000
 80014e4:	405fc000 	.word	0x405fc000
 80014e8:	e0000000 	.word	0xe0000000
 80014ec:	3f1a36e2 	.word	0x3f1a36e2

080014f0 <SustLevel_set>:
void SustLevel_set(uint8_t val)
{
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 80014f0:	ee07 0a90 	vmov	s15, r0
 80014f4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001508 <SustLevel_set+0x18>
	env->sustainLevel_ = level;
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <SustLevel_set+0x1c>)
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 80014fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
	env->sustainLevel_ = level;
 8001502:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001506:	4770      	bx	lr
 8001508:	42fe0000 	.word	0x42fe0000
 800150c:	200000fc 	.word	0x200000fc

08001510 <RelTime_set>:
void RelTime_set(uint8_t val)
{
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 8001510:	ee06 0a90 	vmov	s13, r0
 8001514:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001540 <RelTime_set+0x30>
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <RelTime_set+0x34>)
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 800151a:	eefa 6aef 	vcvt.f32.s32	s13, s13, #1
 800151e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001522:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001548 <RelTime_set+0x38>
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 8001526:	edd3 6a02 	vldr	s13, [r3, #8]
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 800152a:	ee77 7a87 	vadd.f32	s15, s15, s14
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 800152e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800154c <RelTime_set+0x3c>
 8001532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800153a:	ed83 7a03 	vstr	s14, [r3, #12]
}
 800153e:	4770      	bx	lr
 8001540:	42fe0000 	.word	0x42fe0000
 8001544:	200000fc 	.word	0x200000fc
 8001548:	38d1b717 	.word	0x38d1b717
 800154c:	472c4400 	.word	0x472c4400

08001550 <ADSR_computeSample>:
/*--------------------------------------------------------------------------------------*/
float ADSR_computeSample(ADSR_t *env)
{
	(env->cnt_)++;
 8001550:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001552:	edd0 7a04 	vldr	s15, [r0, #16]
 8001556:	3301      	adds	r3, #1
 8001558:	6243      	str	r3, [r0, #36]	; 0x24

	switch (env->state_) {
 800155a:	6a03      	ldr	r3, [r0, #32]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d018      	beq.n	8001592 <ADSR_computeSample+0x42>
 8001560:	2b03      	cmp	r3, #3
 8001562:	d029      	beq.n	80015b8 <ADSR_computeSample+0x68>
 8001564:	bb9b      	cbnz	r3, 80015ce <ADSR_computeSample+0x7e>

  case ATTACK:
	  env->value_ += env->rate_;
 8001566:	ed90 7a07 	vldr	s14, [r0, #28]
 800156a:	ee77 7a87 	vadd.f32	s15, s15, s14
    if (env->value_ >= env->target_)
 800156e:	ed90 7a06 	vldr	s14, [r0, #24]
	  env->value_ += env->rate_;
 8001572:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ >= env->target_)
 8001576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	db26      	blt.n	80015ce <ADSR_computeSample+0x7e>
    {
    	env->value_ = env->target_;
    	env->rate_ = env->decayRate_;
 8001580:	6843      	ldr	r3, [r0, #4]
 8001582:	61c3      	str	r3, [r0, #28]
    	env->target_ = env->sustainLevel_;
 8001584:	6883      	ldr	r3, [r0, #8]
 8001586:	6183      	str	r3, [r0, #24]
    	env->value_ = env->target_;
 8001588:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->state_ = DECAY;
 800158c:	2301      	movs	r3, #1
  case RELEASE:
	  env->value_ -= env->releaseRate_;
    if (env->value_ <= 0.0f)
    {
    	env->value_ =  0.0f;
    	env->state_ = DONE;
 800158e:	6203      	str	r3, [r0, #32]
 8001590:	e01d      	b.n	80015ce <ADSR_computeSample+0x7e>
	  env->value_ -= env->decayRate_;
 8001592:	ed90 7a01 	vldr	s14, [r0, #4]
 8001596:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (env->value_ <= env->sustainLevel_)
 800159a:	ed90 7a02 	vldr	s14, [r0, #8]
	  env->value_ -= env->decayRate_;
 800159e:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ <= env->sustainLevel_)
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	d810      	bhi.n	80015ce <ADSR_computeSample+0x7e>
    	env->rate_ = 0.0f;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61c3      	str	r3, [r0, #28]
    	env->value_ = env->sustainLevel_;
 80015b0:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->state_ = SUSTAIN;
 80015b4:	2302      	movs	r3, #2
 80015b6:	e7ea      	b.n	800158e <ADSR_computeSample+0x3e>
	  env->value_ -= env->releaseRate_;
 80015b8:	ed90 7a03 	vldr	s14, [r0, #12]
 80015bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (env->value_ <= 0.0f)
 80015c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d906      	bls.n	80015d8 <ADSR_computeSample+0x88>
	  env->value_ -= env->releaseRate_;
 80015ca:	edc0 7a04 	vstr	s15, [r0, #16]
    }
  }

  env->lastOutput_ = env->value_;
 80015ce:	ed90 0a04 	vldr	s0, [r0, #16]
 80015d2:	ed80 0a05 	vstr	s0, [r0, #20]
  return env->value_;
}
 80015d6:	4770      	bx	lr
    	env->value_ =  0.0f;
 80015d8:	2300      	movs	r3, #0
 80015da:	6103      	str	r3, [r0, #16]
    	env->state_ = DONE;
 80015dc:	2304      	movs	r3, #4
 80015de:	e7d6      	b.n	800158e <ADSR_computeSample+0x3e>

080015e0 <place_step_dd>:

/**======================================================================================================**/


void place_step_dd(float *buffer, int index, float phase, float w, float scale)
{
 80015e0:	b538      	push	{r3, r4, r5, lr}
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 80015e2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800164c <place_step_dd+0x6c>
 80015e6:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80015ea:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
 80015ee:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
 80015f2:	4604      	mov	r4, r0
 80015f4:	460d      	mov	r5, r1
	i = lrintf(r - 0.5f);
 80015f6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80015fa:	ee38 0a40 	vsub.f32	s0, s16, s0
{
 80015fe:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
 8001602:	f005 fb21 	bl	8006c48 <lrintf>
	r -= (float)i;
 8001606:	ee07 0a90 	vmov	s15, r0
 800160a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <place_step_dd+0x70>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8001610:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8001614:	ee38 8a60 	vsub.f32	s16, s16, s1
 8001618:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800161c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	 *    index++;
	 *  }
	 */

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 8001620:	edd3 6a00 	vldr	s13, [r3]
 8001624:	ed13 7a01 	vldr	s14, [r3, #-4]
 8001628:	edd1 7a00 	vldr	s15, [r1]
 800162c:	eea6 7a88 	vfma.f32	s14, s13, s16
		i += MINBLEP_PHASES;
 8001630:	3040      	adds	r0, #64	; 0x40
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 8001632:	f5b0 5f90 	cmp.w	r0, #4608	; 0x1200
 8001636:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 800163a:	eee7 7a28 	vfma.f32	s15, s14, s17
 800163e:	ece1 7a01 	vstmia	r1!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 8001642:	dbed      	blt.n	8001620 <place_step_dd+0x40>
		index++;
	}
}
 8001644:	ecbd 8b02 	vpop	{d8}
 8001648:	bd38      	pop	{r3, r4, r5, pc}
 800164a:	bf00      	nop
 800164c:	42800000 	.word	0x42800000
 8001650:	0800cba8 	.word	0x0800cba8

08001654 <place_slope_dd>:
//----------------------------------------------------------------------------------------------------------

void place_slope_dd(float *buffer, int index, float phase, float w, float slope_delta)
{
 8001654:	b538      	push	{r3, r4, r5, lr}
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 8001656:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80016cc <place_slope_dd+0x78>
 800165a:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 800165e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
 8001662:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
 8001666:	4604      	mov	r4, r0
 8001668:	460d      	mov	r5, r1
	i = lrintf(r - 0.5f);
 800166a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800166e:	ee38 0ac0 	vsub.f32	s0, s17, s0
{
 8001672:	eeb0 8a60 	vmov.f32	s16, s1
 8001676:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
 800167a:	f005 fae5 	bl	8006c48 <lrintf>
	r -= (float)i;
 800167e:	ee07 0a90 	vmov	s15, r0
 8001682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <place_slope_dd+0x7c>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8001688:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 800168c:	ee78 8ae7 	vsub.f32	s17, s17, s15

	slope_delta *= w;
 8001690:	ee28 8a09 	vmul.f32	s16, s16, s18
 8001694:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8001698:	eb03 0380 	add.w	r3, r3, r0, lsl #2

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80016a4:	ed91 7a00 	vldr	s14, [r1]
 80016a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
		i += MINBLEP_PHASES;
 80016ac:	3040      	adds	r0, #64	; 0x40
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80016ae:	eee6 7aa8 	vfma.f32	s15, s13, s17
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 80016b2:	f5b0 5f8e 	cmp.w	r0, #4544	; 0x11c0
 80016b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80016ba:	eea7 7a88 	vfma.f32	s14, s15, s16
 80016be:	eca1 7a01 	vstmia	r1!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 80016c2:	dbeb      	blt.n	800169c <place_slope_dd+0x48>
		index++;
	}
}
 80016c4:	ecbd 8b04 	vpop	{d8-d9}
 80016c8:	bd38      	pop	{r3, r4, r5, pc}
 80016ca:	bf00      	nop
 80016cc:	42800000 	.word	0x42800000
 80016d0:	080084a0 	.word	0x080084a0

080016d4 <VCO_blepsaw_Init>:

/* ==== hard-sync-capable sawtooth oscillator ==== */

void VCO_blepsaw_Init(VCO_blepsaw_t *vco)
{
	vco->_init = true;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f880 3548 	strb.w	r3, [r0, #1352]	; 0x548
	vco->amp = 1.0f;
 80016da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016de:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <VCO_blepsaw_Init+0x28>)
 80016e2:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 80016e4:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 80016e6:	2300      	movs	r3, #0
 80016e8:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 80016ea:	6203      	str	r3, [r0, #32]
	vco->_j = 0;
 80016ec:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 80016f0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80016f4:	3024      	adds	r0, #36	; 0x24
 80016f6:	f006 bcba 	b.w	800806e <memset>
 80016fa:	bf00      	nop
 80016fc:	43dc0000 	.word	0x43dc0000

08001700 <VCO_blepsaw_SampleCompute>:
}

//----------------------------------------------------------------------------------------------------------

float VCO_blepsaw_SampleCompute(VCO_blepsaw_t *vco)
{
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	ed90 7a03 	vldr	s14, [r0, #12]
 8001706:	eddf 7a6a 	vldr	s15, [pc, #424]	; 80018b0 <VCO_blepsaw_SampleCompute+0x1b0>
	freq = vco->freq;

	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 800170a:	f8d0 5544 	ldr.w	r5, [r0, #1348]	; 0x544
{
 800170e:	ed2d 8b06 	vpush	{d8-d10}
 8001712:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8001716:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001718:	edd0 aa04 	vldr	s21, [r0, #16]
	z = vco->_z;  /* low pass filter state */
 800171c:	edd0 9a08 	vldr	s19, [r0, #32]
 8001720:	ee19 0a10 	vmov	r0, s18
 8001724:	f7fe feb4 	bl	8000490 <__aeabi_f2d>

	if (vco->_init) {
 8001728:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
 800172c:	4606      	mov	r6, r0
 800172e:	460f      	mov	r7, r1
 8001730:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001734:	2b00      	cmp	r3, #0
 8001736:	d17f      	bne.n	8001838 <VCO_blepsaw_SampleCompute+0x138>
	p = vco->_p;  /* phase [0, 1) */
 8001738:	ed94 8a06 	vldr	s16, [r4, #24]
	w = vco->_w;  /* phase increment */
 800173c:	edd4 8a07 	vldr	s17, [r4, #28]

	//a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8001740:	a359      	add	r3, pc, #356	; (adr r3, 80018a8 <VCO_blepsaw_SampleCompute+0x1a8>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	4630      	mov	r0, r6
 8001748:	4639      	mov	r1, r7
 800174a:	f7ff f96b 	bl	8000a24 <__aeabi_dcmplt>
 800174e:	2800      	cmp	r0, #0
 8001750:	f040 808a 	bne.w	8001868 <VCO_blepsaw_SampleCompute+0x168>
	if (t > 0.5) t = 0.5;
 8001754:	eeb4 9a4a 	vcmp.f32	s18, s20
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001760:	bfc8      	it	gt
 8001762:	eeb0 9a67 	vmovgt.f32	s18, s15
	dw = (t - w); // n= 1
 8001766:	ee39 9a68 	vsub.f32	s18, s18, s17
	w += dw;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 800176a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80018b4 <VCO_blepsaw_SampleCompute+0x1b4>
	w += dw;
 800176e:	ee78 8a89 	vadd.f32	s17, s17, s18
	if (syncin >= 1e-20f) {  /* sync to master */
 8001772:	eef4 aae7 	vcmpe.f32	s21, s15
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	p += w;
 800177a:	ee38 8a28 	vadd.f32	s16, s16, s17
 800177e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	if (syncin >= 1e-20f) {  /* sync to master */
 8001782:	db74      	blt.n	800186e <VCO_blepsaw_SampleCompute+0x16e>

		float eof_offset = (syncin - 1e-20f) * w;
 8001784:	ee3a 9ae7 	vsub.f32	s18, s21, s15
 8001788:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800178c:	ee29 9a28 	vmul.f32	s18, s18, s17
		float p_at_reset = p - eof_offset;
 8001790:	ee38 8a49 	vsub.f32	s16, s16, s18
		p = eof_offset;

		/* place any DD that may have occurred in subsample before reset */
		if (p_at_reset >= 1.0f) {
 8001794:	eeb4 8ac1 	vcmpe.f32	s16, s2
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	db09      	blt.n	80017b2 <VCO_blepsaw_SampleCompute+0xb2>
			p_at_reset -= 1.0f;
 800179e:	ee38 8a41 	vsub.f32	s16, s16, s2
			place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 80017a2:	eef0 0a68 	vmov.f32	s1, s17
 80017a6:	ee39 0a08 	vadd.f32	s0, s18, s16
 80017aa:	4629      	mov	r1, r5
 80017ac:	4630      	mov	r0, r6
 80017ae:	f7ff ff17 	bl	80015e0 <place_step_dd>
		}

		/* now place reset DD */
		place_step_dd(vco->_f, j, p, w, p_at_reset);
 80017b2:	eeb0 1a48 	vmov.f32	s2, s16
 80017b6:	eef0 0a68 	vmov.f32	s1, s17
 80017ba:	eeb0 0a49 	vmov.f32	s0, s18
 80017be:	4629      	mov	r1, r5
 80017c0:	4630      	mov	r0, r6
 80017c2:	f7ff ff0d 	bl	80015e0 <place_step_dd>

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 80017c6:	edc4 aa05 	vstr	s21, [r4, #20]
 80017ca:	eb04 0385 	add.w	r3, r4, r5, lsl #2

	} else {

		vco->syncout = 0.0f;
	}
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 80017ce:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80017d2:	ee3a 7a49 	vsub.f32	s14, s20, s18

	z += a * (vco->_f[j] - z); // LP filtering
	vco->out = vco->amp * z;

	if (++j == FILLEN)
 80017d6:	3501      	adds	r5, #1
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 80017d8:	ee77 7a87 	vadd.f32	s15, s15, s14
	if (++j == FILLEN)
 80017dc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 80017e0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	z += a * (vco->_f[j] - z); // LP filtering
 80017e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	vco->out = vco->amp * z;
 80017e8:	ed94 8a01 	vldr	s16, [r4, #4]
	z += a * (vco->_f[j] - z); // LP filtering
 80017ec:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80017f0:	eee7 9a8a 	vfma.f32	s19, s15, s20
	vco->out = vco->amp * z;
 80017f4:	ee29 8a88 	vmul.f32	s16, s19, s16
 80017f8:	ed84 8a00 	vstr	s16, [r4]
	if (++j == FILLEN)
 80017fc:	d10f      	bne.n	800181e <VCO_blepsaw_SampleCompute+0x11e>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 80017fe:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001802:	f204 4124 	addw	r1, r4, #1060	; 0x424
 8001806:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800180a:	f006 fc25 	bl	8008058 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 800180e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001812:	2100      	movs	r1, #0
 8001814:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8001818:	f006 fc29 	bl	800806e <memset>
		j = 0;
 800181c:	2500      	movs	r5, #0
	vco->_w = w;
	vco->_z = z;
	vco->_j = j;

	return vco->out;
}
 800181e:	eeb0 0a48 	vmov.f32	s0, s16
	vco->_p = p;
 8001822:	ed84 9a06 	vstr	s18, [r4, #24]
	vco->_w = w;
 8001826:	edc4 8a07 	vstr	s17, [r4, #28]
	vco->_z = z;
 800182a:	edc4 9a08 	vstr	s19, [r4, #32]
}
 800182e:	ecbd 8b06 	vpop	{d8-d10}
	vco->_j = j;
 8001832:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
}
 8001836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (w < 1e-5) w = 1e-5;
 8001838:	a31b      	add	r3, pc, #108	; (adr r3, 80018a8 <VCO_blepsaw_SampleCompute+0x1a8>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7ff f8f1 	bl	8000a24 <__aeabi_dcmplt>
 8001842:	b970      	cbnz	r0, 8001862 <VCO_blepsaw_SampleCompute+0x162>
		if (w > 0.5) w = 0.5;
 8001844:	eeb4 9aca 	vcmpe.f32	s18, s20
 8001848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		w = freq / SAMPLERATE;
 800184c:	bfd4      	ite	le
 800184e:	eef0 8a49 	vmovle.f32	s17, s18
 8001852:	eef0 8a4a 	vmovgt.f32	s17, s20
		vco->_init = false;
 8001856:	2300      	movs	r3, #0
 8001858:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		p = 0.5f;
 800185c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001860:	e76e      	b.n	8001740 <VCO_blepsaw_SampleCompute+0x40>
		if (w < 1e-5) w = 1e-5;
 8001862:	eddf 8a15 	vldr	s17, [pc, #84]	; 80018b8 <VCO_blepsaw_SampleCompute+0x1b8>
 8001866:	e7f6      	b.n	8001856 <VCO_blepsaw_SampleCompute+0x156>
	if (t < 1e-5) t = 1e-5;
 8001868:	ed9f 9a13 	vldr	s18, [pc, #76]	; 80018b8 <VCO_blepsaw_SampleCompute+0x1b8>
 800186c:	e77b      	b.n	8001766 <VCO_blepsaw_SampleCompute+0x66>
	} else if (p >= 1.0f) {  /* normal phase reset */
 800186e:	eeb4 8ac1 	vcmpe.f32	s16, s2
 8001872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001876:	db11      	blt.n	800189c <VCO_blepsaw_SampleCompute+0x19c>
		p -= 1.0f;
 8001878:	ee38 9a41 	vsub.f32	s18, s16, s2
		place_step_dd(vco->_f, j, p, w, 1.0f);
 800187c:	eef0 0a68 	vmov.f32	s1, s17
		vco->syncout = p / w + 1e-20f;
 8001880:	ee89 7a28 	vdiv.f32	s14, s18, s17
		place_step_dd(vco->_f, j, p, w, 1.0f);
 8001884:	4629      	mov	r1, r5
 8001886:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800188a:	eeb0 0a49 	vmov.f32	s0, s18
		vco->syncout = p / w + 1e-20f;
 800188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001892:	edc4 7a05 	vstr	s15, [r4, #20]
		place_step_dd(vco->_f, j, p, w, 1.0f);
 8001896:	f7ff fea3 	bl	80015e0 <place_step_dd>
 800189a:	e796      	b.n	80017ca <VCO_blepsaw_SampleCompute+0xca>
		vco->syncout = 0.0f;
 800189c:	2300      	movs	r3, #0
 800189e:	6163      	str	r3, [r4, #20]
	p += w;
 80018a0:	eeb0 9a48 	vmov.f32	s18, s16
 80018a4:	e791      	b.n	80017ca <VCO_blepsaw_SampleCompute+0xca>
 80018a6:	bf00      	nop
 80018a8:	88e368f1 	.word	0x88e368f1
 80018ac:	3ee4f8b5 	.word	0x3ee4f8b5
 80018b0:	472c4400 	.word	0x472c4400
 80018b4:	1e3ce508 	.word	0x1e3ce508
 80018b8:	3727c5ac 	.word	0x3727c5ac

080018bc <VCO_bleprect_Init>:
//----------------------------------------------------------------------------------------------------------
/* ==== variable-width, hard-sync-capable rectangular oscillator ==== */

void VCO_bleprect_Init(VCO_bleprect_t *vco)
{
	vco->_init = true;
 80018bc:	2301      	movs	r3, #1
 80018be:	f880 3558 	strb.w	r3, [r0, #1368]	; 0x558
	vco->amp = 1.0f;
 80018c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018c6:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <VCO_bleprect_Init+0x28>)
 80018ca:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 80018cc:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 80018ce:	2300      	movs	r3, #0
 80018d0:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 80018d2:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 80018d4:	62c3      	str	r3, [r0, #44]	; 0x2c
	vco->_j = 0;
 80018d6:	f8c0 1550 	str.w	r1, [r0, #1360]	; 0x550
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 80018da:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80018de:	3030      	adds	r0, #48	; 0x30
 80018e0:	f006 bbc5 	b.w	800806e <memset>
 80018e4:	43dc0000 	.word	0x43dc0000

080018e8 <VCO_bleprect_SampleCompute>:
}
////----------------------------------------------------------------------------------------------------------

float VCO_bleprect_SampleCompute(VCO_bleprect_t *vco)
{
 80018e8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80018ec:	ed90 7a03 	vldr	s14, [r0, #12]
 80018f0:	eddf 7ae7 	vldr	s15, [pc, #924]	; 8001c90 <VCO_bleprect_SampleCompute+0x3a8>
	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	b = vco->_b;  /* duty cycle (0, 1) */
	x = vco->_x;  /* temporary output variable */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 80018f4:	f8d0 5550 	ldr.w	r5, [r0, #1360]	; 0x550
{
 80018f8:	ed2d 8b0a 	vpush	{d8-d12}
 80018fc:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8001900:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001902:	ed90 ca05 	vldr	s24, [r0, #20]
	z = vco->_z;  /* low pass filter state */
 8001906:	ed90 ba0b 	vldr	s22, [r0, #44]	; 0x2c
 800190a:	ee19 0a90 	vmov	r0, s19
 800190e:	f7fe fdbf 	bl	8000490 <__aeabi_f2d>
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
	//
	if (vco->_init) {
 8001912:	f894 3558 	ldrb.w	r3, [r4, #1368]	; 0x558
 8001916:	4680      	mov	r8, r0
 8001918:	4689      	mov	r9, r1
 800191a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 800191e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80d5 	bne.w	8001ad2 <VCO_bleprect_SampleCompute+0x1ea>
	p = vco->_p;  /* phase [0, 1) */
 8001928:	ed94 8a07 	vldr	s16, [r4, #28]
	w = vco->_w;  /* phase increment */
 800192c:	edd4 8a08 	vldr	s17, [r4, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001930:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
	x = vco->_x;  /* temporary output variable */
 8001934:	ed94 aa0a 	vldr	s20, [r4, #40]	; 0x28
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8001938:	f8d4 6554 	ldr.w	r6, [r4, #1364]	; 0x554
	//
	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 800193c:	a3d2      	add	r3, pc, #840	; (adr r3, 8001c88 <VCO_bleprect_SampleCompute+0x3a0>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	4640      	mov	r0, r8
 8001944:	4649      	mov	r1, r9
 8001946:	f7ff f86d 	bl	8000a24 <__aeabi_dcmplt>
 800194a:	2800      	cmp	r0, #0
 800194c:	f040 80fb 	bne.w	8001b46 <VCO_bleprect_SampleCompute+0x25e>
	if (t > 0.5) t = 0.5;
 8001950:	eef4 9a6b 	vcmp.f32	s19, s23
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800195c:	bfc8      	it	gt
 800195e:	eef0 9a67 	vmovgt.f32	s19, s15
	dw = (t - w) ;
	t = 0.5 * (1.0 + vco->waveform );
 8001962:	6920      	ldr	r0, [r4, #16]
 8001964:	f7fe fd94 	bl	8000490 <__aeabi_f2d>
 8001968:	2200      	movs	r2, #0
 800196a:	4bca      	ldr	r3, [pc, #808]	; (8001c94 <VCO_bleprect_SampleCompute+0x3ac>)
 800196c:	f7fe fc32 	bl	80001d4 <__adddf3>
 8001970:	2200      	movs	r2, #0
 8001972:	4bc9      	ldr	r3, [pc, #804]	; (8001c98 <VCO_bleprect_SampleCompute+0x3b0>)
 8001974:	f7fe fde4 	bl	8000540 <__aeabi_dmul>
 8001978:	f7ff f87c 	bl	8000a74 <__aeabi_d2f>
 800197c:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 8001980:	eef4 8a47 	vcmp.f32	s17, s14
 8001984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (t > 1.0f - w) t = 1.0f - w;
 8001988:	ee7a 7ae8 	vsub.f32	s15, s21, s17
	if (t < w) t = w;
 800198c:	bfc8      	it	gt
 800198e:	eeb0 7a68 	vmovgt.f32	s14, s17
	dw = (t - w) ;
 8001992:	ee79 9ae8 	vsub.f32	s19, s19, s17
	if (t > 1.0f - w) t = 1.0f - w;
 8001996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	db = (t - b) ;

	w += dw;
 800199e:	ee78 8aa9 	vadd.f32	s17, s17, s19
	b += db;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 80019a2:	eddf 9abe 	vldr	s19, [pc, #760]	; 8001c9c <VCO_bleprect_SampleCompute+0x3b4>
	if (t > 1.0f - w) t = 1.0f - w;
 80019a6:	bf58      	it	pl
 80019a8:	eef0 7a47 	vmovpl.f32	s15, s14
	db = (t - b) ;
 80019ac:	ee77 7ac9 	vsub.f32	s15, s15, s18
	if (syncin >= 1e-20f) {  /* sync to master */
 80019b0:	eeb4 cae9 	vcmpe.f32	s24, s19
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	b += db;
 80019b8:	ee39 9a27 	vadd.f32	s18, s18, s15
	p += w;
 80019bc:	ee38 8a28 	vadd.f32	s16, s16, s17
 80019c0:	eef0 ca69 	vmov.f32	s25, s19
	if (syncin >= 1e-20f) {  /* sync to master */
 80019c4:	f2c0 80f0 	blt.w	8001ba8 <VCO_bleprect_SampleCompute+0x2c0>
		//
		float eof_offset = (syncin - 1e-20f) * w;
 80019c8:	ee7c 9a69 	vsub.f32	s19, s24, s19
 80019cc:	ee69 9aa8 	vmul.f32	s19, s19, s17
		float p_at_reset = p - eof_offset;
 80019d0:	ee38 8a69 	vsub.f32	s16, s16, s19
		p = eof_offset;

		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 80019d4:	2e00      	cmp	r6, #0
 80019d6:	f040 80b9 	bne.w	8001b4c <VCO_bleprect_SampleCompute+0x264>
			if (p_at_reset >= b) {
 80019da:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	f200 8149 	bhi.w	8001c78 <VCO_bleprect_SampleCompute+0x390>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 80019e6:	ee38 0a49 	vsub.f32	s0, s16, s18
 80019ea:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80019ee:	eef0 0a68 	vmov.f32	s1, s17
 80019f2:	ee30 0a29 	vadd.f32	s0, s0, s19
 80019f6:	4629      	mov	r1, r5
 80019f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80019fc:	f7ff fdf0 	bl	80015e0 <place_step_dd>
				k = 1;
				x = -0.5f;
			}
			if (p_at_reset >= 1.0f) {
 8001a00:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	f2c0 80c5 	blt.w	8001b96 <VCO_bleprect_SampleCompute+0x2ae>
				p_at_reset -= 1.0f;
 8001a0c:	ee38 8a6a 	vsub.f32	s16, s16, s21
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001a10:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a14:	ee38 0a29 	vadd.f32	s0, s16, s19
 8001a18:	eef0 0a68 	vmov.f32	s1, s17
			}
		}

		/* now place reset DD */
		if (k) {
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001a22:	f7ff fddd 	bl	80015e0 <place_step_dd>
 8001a26:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
			k = 0;
			x = 0.5f;
		}
		if (p >= b) {
 8001a2a:	eeb4 9ae9 	vcmpe.f32	s18, s19
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	f200 80b7 	bhi.w	8001ba4 <VCO_bleprect_SampleCompute+0x2bc>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001a36:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001a3a:	eef0 0a68 	vmov.f32	s1, s17
 8001a3e:	ee39 0ac9 	vsub.f32	s0, s19, s18
 8001a42:	4629      	mov	r1, r5
 8001a44:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001a48:	f7ff fdca 	bl	80015e0 <place_step_dd>
			k = 1;
			x = -0.5f;
 8001a4c:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 8001a50:	2601      	movs	r6, #1
		}

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001a52:	ed84 ca06 	vstr	s24, [r4, #24]
		p = eof_offset;
 8001a56:	eeb0 8a69 	vmov.f32	s16, s19
 8001a5a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
			k = 1;
			x = -0.5f;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001a5e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001a62:	ee77 7a8a 	vadd.f32	s15, s15, s20

	z += a * (vco->_f[j] - z);
	vco->out = vco->amp * z;

	if (++j == FILLEN)
 8001a66:	3501      	adds	r5, #1
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001a68:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	z += a * (vco->_f[j] - z);
 8001a6c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
	vco->out = vco->amp * z;
 8001a70:	edd4 9a01 	vldr	s19, [r4, #4]
	z += a * (vco->_f[j] - z);
 8001a74:	ee77 7acb 	vsub.f32	s15, s15, s22
	if (++j == FILLEN)
 8001a78:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	z += a * (vco->_f[j] - z);
 8001a7c:	eea7 baab 	vfma.f32	s22, s15, s23
	vco->out = vco->amp * z;
 8001a80:	ee6b 9a29 	vmul.f32	s19, s22, s19
 8001a84:	edc4 9a00 	vstr	s19, [r4]
	if (++j == FILLEN)
 8001a88:	d10f      	bne.n	8001aaa <VCO_bleprect_SampleCompute+0x1c2>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001a8a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001a8e:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8001a92:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001a96:	f006 fadf 	bl	8008058 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001aa4:	f006 fae3 	bl	800806e <memset>
		j = 0;
 8001aa8:	2500      	movs	r5, #0
	vco->_j = j;
	vco->_k = k;

	return vco->out;

}
 8001aaa:	eeb0 0a69 	vmov.f32	s0, s19
	vco->_p = p;
 8001aae:	ed84 8a07 	vstr	s16, [r4, #28]
	vco->_w = w;
 8001ab2:	edc4 8a08 	vstr	s17, [r4, #32]
	vco->_b = b;
 8001ab6:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
	vco->_x = x;
 8001aba:	ed84 aa0a 	vstr	s20, [r4, #40]	; 0x28
	vco->_z = z;
 8001abe:	ed84 ba0b 	vstr	s22, [r4, #44]	; 0x2c
}
 8001ac2:	ecbd 8b0a 	vpop	{d8-d12}
	vco->_j = j;
 8001ac6:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
	vco->_k = k;
 8001aca:	f8c4 6554 	str.w	r6, [r4, #1364]	; 0x554
}
 8001ace:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		if (w < 1e-5) w = 1e-5;
 8001ad2:	a36d      	add	r3, pc, #436	; (adr r3, 8001c88 <VCO_bleprect_SampleCompute+0x3a0>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe ffa4 	bl	8000a24 <__aeabi_dcmplt>
 8001adc:	bb80      	cbnz	r0, 8001b40 <VCO_bleprect_SampleCompute+0x258>
		w = freq / SAMPLERATE;
 8001ade:	eef4 9aeb 	vcmpe.f32	s19, s23
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	bfd4      	ite	le
 8001ae8:	eef0 8a69 	vmovle.f32	s17, s19
 8001aec:	eef0 8a6b 	vmovgt.f32	s17, s23
		b = 0.5 * (1.0 + vco->waveform );
 8001af0:	6920      	ldr	r0, [r4, #16]
		p = 0.0f;
 8001af2:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 8001ca0 <VCO_bleprect_SampleCompute+0x3b8>
		b = 0.5 * (1.0 + vco->waveform );
 8001af6:	f7fe fccb 	bl	8000490 <__aeabi_f2d>
 8001afa:	2200      	movs	r2, #0
 8001afc:	4b65      	ldr	r3, [pc, #404]	; (8001c94 <VCO_bleprect_SampleCompute+0x3ac>)
 8001afe:	f7fe fb69 	bl	80001d4 <__adddf3>
 8001b02:	2200      	movs	r2, #0
 8001b04:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <VCO_bleprect_SampleCompute+0x3b0>)
 8001b06:	f7fe fd1b 	bl	8000540 <__aeabi_dmul>
 8001b0a:	f7fe ffb3 	bl	8000a74 <__aeabi_d2f>
 8001b0e:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8001b12:	eef4 8a67 	vcmp.f32	s17, s15
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (b > 1.0f - w) b = 1.0f - w;
 8001b1a:	ee3a 9ae8 	vsub.f32	s18, s21, s17
		if (b < w) b = w;
 8001b1e:	bfc8      	it	gt
 8001b20:	eef0 7a68 	vmovgt.f32	s15, s17
		if (b > 1.0f - w) b = 1.0f - w;
 8001b24:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		vco->_init = false;
 8001b2c:	f04f 0600 	mov.w	r6, #0
		if (b > 1.0f - w) b = 1.0f - w;
 8001b30:	bf58      	it	pl
 8001b32:	eeb0 9a67 	vmovpl.f32	s18, s15
		vco->_init = false;
 8001b36:	f884 6558 	strb.w	r6, [r4, #1368]	; 0x558
		x = 0.5f;
 8001b3a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001b3e:	e6fd      	b.n	800193c <VCO_bleprect_SampleCompute+0x54>
		if (w < 1e-5) w = 1e-5;
 8001b40:	eddf 8a58 	vldr	s17, [pc, #352]	; 8001ca4 <VCO_bleprect_SampleCompute+0x3bc>
 8001b44:	e7d4      	b.n	8001af0 <VCO_bleprect_SampleCompute+0x208>
	if (t < 1e-5) t = 1e-5;
 8001b46:	eddf 9a57 	vldr	s19, [pc, #348]	; 8001ca4 <VCO_bleprect_SampleCompute+0x3bc>
 8001b4a:	e70a      	b.n	8001962 <VCO_bleprect_SampleCompute+0x7a>
			if (p_at_reset >= 1.0f) {
 8001b4c:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	db1f      	blt.n	8001b96 <VCO_bleprect_SampleCompute+0x2ae>
				p_at_reset -= 1.0f;
 8001b56:	ee38 8a6a 	vsub.f32	s16, s16, s21
 8001b5a:	f104 0630 	add.w	r6, r4, #48	; 0x30
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001b5e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001b62:	eef0 0a68 	vmov.f32	s1, s17
 8001b66:	ee39 0a88 	vadd.f32	s0, s19, s16
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	f7ff fd37 	bl	80015e0 <place_step_dd>
			if (!k && p_at_reset >= b) {
 8001b72:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	f63f af54 	bhi.w	8001a26 <VCO_bleprect_SampleCompute+0x13e>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 8001b7e:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001b82:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001b86:	eef0 0a68 	vmov.f32	s1, s17
 8001b8a:	ee38 0a29 	vadd.f32	s0, s16, s19
 8001b8e:	4629      	mov	r1, r5
 8001b90:	4630      	mov	r0, r6
 8001b92:	f7ff fd25 	bl	80015e0 <place_step_dd>
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001b96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001b9a:	eef0 0a68 	vmov.f32	s1, s17
 8001b9e:	eeb0 0a69 	vmov.f32	s0, s19
 8001ba2:	e73b      	b.n	8001a1c <VCO_bleprect_SampleCompute+0x134>
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	e754      	b.n	8001a52 <VCO_bleprect_SampleCompute+0x16a>
	} else if (!k) {  /* normal operation, signal currently high */
 8001ba8:	bb9e      	cbnz	r6, 8001c12 <VCO_bleprect_SampleCompute+0x32a>
		if (p >= b) {
 8001baa:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d828      	bhi.n	8001c06 <VCO_bleprect_SampleCompute+0x31e>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001bb4:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001bb8:	eef0 0a68 	vmov.f32	s1, s17
 8001bbc:	ee38 0a49 	vsub.f32	s0, s16, s18
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001bc6:	f7ff fd0b 	bl	80015e0 <place_step_dd>
			x = -0.5f;
 8001bca:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 8001bce:	2301      	movs	r3, #1
		if (p >= 1.0f) {
 8001bd0:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	db17      	blt.n	8001c0a <VCO_bleprect_SampleCompute+0x322>
			p -= 1.0f;
 8001bda:	ee38 8a6a 	vsub.f32	s16, s16, s21
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001bde:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			vco->syncout = p / w + 1e-20f;
 8001be2:	eec8 7a28 	vdiv.f32	s15, s16, s17
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001be6:	4629      	mov	r1, r5
 8001be8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001bec:	eef0 0a68 	vmov.f32	s1, s17
			vco->syncout = p / w + 1e-20f;
 8001bf0:	ee77 7aac 	vadd.f32	s15, s15, s25
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001bf4:	eeb0 0a48 	vmov.f32	s0, s16
			vco->syncout = p / w + 1e-20f;
 8001bf8:	edc4 7a06 	vstr	s15, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001bfc:	f7ff fcf0 	bl	80015e0 <place_step_dd>
			x = 0.5f;
 8001c00:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001c04:	e729      	b.n	8001a5a <VCO_bleprect_SampleCompute+0x172>
 8001c06:	4633      	mov	r3, r6
 8001c08:	e7e2      	b.n	8001bd0 <VCO_bleprect_SampleCompute+0x2e8>
			vco->syncout = 0.0f;
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61a2      	str	r2, [r4, #24]
 8001c0e:	461e      	mov	r6, r3
 8001c10:	e723      	b.n	8001a5a <VCO_bleprect_SampleCompute+0x172>
		if (p >= 1.0f) {
 8001c12:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	db1c      	blt.n	8001c56 <VCO_bleprect_SampleCompute+0x36e>
			p -= 1.0f;
 8001c1c:	ee38 8a6a 	vsub.f32	s16, s16, s21
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001c20:	f104 0630 	add.w	r6, r4, #48	; 0x30
			vco->syncout = p / w + 1e-20f;
 8001c24:	eec8 7a28 	vdiv.f32	s15, s16, s17
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001c28:	4629      	mov	r1, r5
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			vco->syncout = p / w + 1e-20f;
 8001c30:	ee77 9aa9 	vadd.f32	s19, s15, s19
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001c34:	eef0 0a68 	vmov.f32	s1, s17
			vco->syncout = p / w + 1e-20f;
 8001c38:	edc4 9a06 	vstr	s19, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8001c40:	f7ff fcce 	bl	80015e0 <place_step_dd>
		if (!k && p >= b) {
 8001c44:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d906      	bls.n	8001c5c <VCO_bleprect_SampleCompute+0x374>
			x = 0.5f;
 8001c4e:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001c52:	2600      	movs	r6, #0
 8001c54:	e701      	b.n	8001a5a <VCO_bleprect_SampleCompute+0x172>
			vco->syncout = 0.0f;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61a3      	str	r3, [r4, #24]
 8001c5a:	e6fe      	b.n	8001a5a <VCO_bleprect_SampleCompute+0x172>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c62:	eef0 0a68 	vmov.f32	s1, s17
 8001c66:	ee38 0a49 	vsub.f32	s0, s16, s18
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7ff fcb8 	bl	80015e0 <place_step_dd>
			x = -0.5f;
 8001c70:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 8001c74:	2601      	movs	r6, #1
 8001c76:	e6f0      	b.n	8001a5a <VCO_bleprect_SampleCompute+0x172>
			if (p_at_reset >= 1.0f) {
 8001c78:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	f6bf aec4 	bge.w	8001a0c <VCO_bleprect_SampleCompute+0x124>
 8001c84:	e6d1      	b.n	8001a2a <VCO_bleprect_SampleCompute+0x142>
 8001c86:	bf00      	nop
 8001c88:	88e368f1 	.word	0x88e368f1
 8001c8c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001c90:	472c4400 	.word	0x472c4400
 8001c94:	3ff00000 	.word	0x3ff00000
 8001c98:	3fe00000 	.word	0x3fe00000
 8001c9c:	1e3ce508 	.word	0x1e3ce508
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	3727c5ac 	.word	0x3727c5ac

08001ca8 <VCO_bleptri_Init>:

///* ==== variable-slope, hard-sync-capable triangle oscillator ==== */

void VCO_bleptri_Init(VCO_bleptri_t *vco)
{
	vco->amp = 1.0f;
 8001ca8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cac:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <VCO_bleptri_Init+0x28>)
 8001cb0:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_init = true;
 8001cb2:	2201      	movs	r2, #1
	vco->syncin = 0.0f;
 8001cb4:	2300      	movs	r3, #0
	vco->_z = 0.0f;
	vco->_j = 0;
 8001cb6:	2100      	movs	r1, #0
	vco->_init = true;
 8001cb8:	f880 2554 	strb.w	r2, [r0, #1364]	; 0x554
	vco->syncin = 0.0f;
 8001cbc:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 8001cbe:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001cc0:	6283      	str	r3, [r0, #40]	; 0x28
	vco->_j = 0;
 8001cc2:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001cc6:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001cca:	302c      	adds	r0, #44	; 0x2c
 8001ccc:	f006 b9cf 	b.w	800806e <memset>
 8001cd0:	43dc0000 	.word	0x43dc0000
 8001cd4:	00000000 	.word	0x00000000

08001cd8 <VCO_bleptri_SampleCompute>:
}
////----------------------------------------------------------------------------------------------------------

float VCO_bleptri_SampleCompute(VCO_bleptri_t *vco)
{
 8001cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cdc:	ed90 7a03 	vldr	s14, [r0, #12]
 8001ce0:	eddf 7ae3 	vldr	s15, [pc, #908]	; 8002070 <VCO_bleptri_SampleCompute+0x398>
	freq = vco->freq;
	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	b = vco->_b;  /* duty cycle (0, 1) */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 8001ce4:	f8d0 554c 	ldr.w	r5, [r0, #1356]	; 0x54c
{
 8001ce8:	ed2d 8b0c 	vpush	{d8-d13}
 8001cec:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8001cf0:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001cf2:	ed90 ba05 	vldr	s22, [r0, #20]
	z = vco->_z;  /* low pass filter state */
 8001cf6:	edd0 aa0a 	vldr	s21, [r0, #40]	; 0x28
 8001cfa:	ee19 0a90 	vmov	r0, s19
 8001cfe:	f7fe fbc7 	bl	8000490 <__aeabi_f2d>
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */

	if (vco->_init) {
 8001d02:	f894 3554 	ldrb.w	r3, [r4, #1364]	; 0x554
 8001d06:	4680      	mov	r8, r0
 8001d08:	4689      	mov	r9, r1
 8001d0a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001d0e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 80e6 	bne.w	8001ee4 <VCO_bleptri_SampleCompute+0x20c>
	p = vco->_p;  /* phase [0, 1) */
 8001d18:	ed94 8a07 	vldr	s16, [r4, #28]
	w = vco->_w;  /* phase increment */
 8001d1c:	ed94 9a08 	vldr	s18, [r4, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001d20:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8001d24:	f8d4 6550 	ldr.w	r6, [r4, #1360]	; 0x550

	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8001d28:	a3cf      	add	r3, pc, #828	; (adr r3, 8002068 <VCO_bleptri_SampleCompute+0x390>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	4640      	mov	r0, r8
 8001d30:	4649      	mov	r1, r9
 8001d32:	f7fe fe77 	bl	8000a24 <__aeabi_dcmplt>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	f040 810b 	bne.w	8001f52 <VCO_bleptri_SampleCompute+0x27a>
	if (t > 0.5) t = 0.5;
 8001d3c:	eef4 9a4a 	vcmp.f32	s19, s20
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001d48:	bfc8      	it	gt
 8001d4a:	eef0 9a67 	vmovgt.f32	s19, s15
	dw = (t - w) ;
	t = 0.5 * (1.0 + vco->waveform );
 8001d4e:	6920      	ldr	r0, [r4, #16]
	w += dw;
	b += db;
	b1 = 1.0f - b;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 8001d50:	eddf bac8 	vldr	s23, [pc, #800]	; 8002074 <VCO_bleptri_SampleCompute+0x39c>
	t = 0.5 * (1.0 + vco->waveform );
 8001d54:	f7fe fb9c 	bl	8000490 <__aeabi_f2d>
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4bc7      	ldr	r3, [pc, #796]	; (8002078 <VCO_bleptri_SampleCompute+0x3a0>)
 8001d5c:	f7fe fa3a 	bl	80001d4 <__adddf3>
 8001d60:	2200      	movs	r2, #0
 8001d62:	4bc6      	ldr	r3, [pc, #792]	; (800207c <VCO_bleptri_SampleCompute+0x3a4>)
 8001d64:	f7fe fbec 	bl	8000540 <__aeabi_dmul>
 8001d68:	f7fe fe84 	bl	8000a74 <__aeabi_d2f>
 8001d6c:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 8001d70:	eeb4 9a47 	vcmp.f32	s18, s14
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (t > 1.0f - w) t = 1.0f - w;
 8001d78:	ee7c 7a49 	vsub.f32	s15, s24, s18
	if (t < w) t = w;
 8001d7c:	bfc8      	it	gt
 8001d7e:	eeb0 7a49 	vmovgt.f32	s14, s18
	if (t > 1.0f - w) t = 1.0f - w;
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	bf58      	it	pl
 8001d8c:	eef0 7a47 	vmovpl.f32	s15, s14
	dw = (t - w) ;
 8001d90:	ee79 9ac9 	vsub.f32	s19, s19, s18
	db = (t - b) ;
 8001d94:	ee77 7ae8 	vsub.f32	s15, s15, s17
	w += dw;
 8001d98:	ee39 9a29 	vadd.f32	s18, s18, s19
	b += db;
 8001d9c:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if (syncin >= 1e-20f) {  /* sync to master */
 8001da0:	eeb4 baeb 	vcmpe.f32	s22, s23
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	b1 = 1.0f - b;
 8001da8:	ee7c ca68 	vsub.f32	s25, s24, s17
	p += w;
 8001dac:	ee38 8a09 	vadd.f32	s16, s16, s18
 8001db0:	eeb0 da6b 	vmov.f32	s26, s23
	if (syncin >= 1e-20f) {  /* sync to master */
 8001db4:	f2c0 812b 	blt.w	800200e <VCO_bleptri_SampleCompute+0x336>

		float eof_offset = (syncin - 1e-20f) * w;
 8001db8:	ee7b ba6b 	vsub.f32	s23, s22, s23
 8001dbc:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8001dc0:	ee6b ba89 	vmul.f32	s23, s23, s18
		float p_at_reset = p - eof_offset;
 8001dc4:	ee38 8a6b 	vsub.f32	s16, s16, s23
		p = eof_offset;
		//
		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 8001dc8:	2e00      	cmp	r6, #0
 8001dca:	f040 80c5 	bne.w	8001f58 <VCO_bleptri_SampleCompute+0x280>
			x = -0.5f + p_at_reset / b;
			if (p_at_reset >= b) {
 8001dce:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	f200 81b5 	bhi.w	8002144 <VCO_bleptri_SampleCompute+0x46c>
				x = 0.5f - (p_at_reset - b) / b1;
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001dda:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001dde:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001de2:	4629      	mov	r1, r5
 8001de4:	4638      	mov	r0, r7
 8001de6:	eecc 7a28 	vdiv.f32	s15, s24, s17
				x = 0.5f - (p_at_reset - b) / b1;
 8001dea:	ee38 0a68 	vsub.f32	s0, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001dee:	ee31 1a67 	vsub.f32	s2, s2, s15
				x = 0.5f - (p_at_reset - b) / b1;
 8001df2:	eec0 9a2c 	vdiv.f32	s19, s0, s25
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001df6:	eef0 0a49 	vmov.f32	s1, s18
 8001dfa:	ee30 0a2b 	vadd.f32	s0, s0, s23
 8001dfe:	f7ff fc29 	bl	8001654 <place_slope_dd>
				k = 1;
			}
			if (p_at_reset >= 1.0f) {
 8001e02:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				x = 0.5f - (p_at_reset - b) / b1;
 8001e0a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			if (p_at_reset >= 1.0f) {
 8001e0e:	f2c0 80ae 	blt.w	8001f6e <VCO_bleptri_SampleCompute+0x296>
				p_at_reset -= 1.0f;
 8001e12:	ee38 8a4c 	vsub.f32	s16, s16, s24
				x = -0.5f + p_at_reset / b;
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001e16:	ee8c 1a28 	vdiv.f32	s2, s24, s17
				x = -0.5f + p_at_reset / b;
 8001e1a:	eec8 9a28 	vdiv.f32	s19, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001e1e:	eecc 7a2c 	vdiv.f32	s15, s24, s25
				x = -0.5f + p_at_reset / b;
 8001e22:	ee79 9aca 	vsub.f32	s19, s19, s20
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001e26:	ee31 1a27 	vadd.f32	s2, s2, s15
 8001e2a:	ee3b 0a88 	vadd.f32	s0, s23, s16
 8001e2e:	eef0 0a49 	vmov.f32	s1, s18
			}
		}

		/* now place reset DDs */
		if (k)
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001e32:	4629      	mov	r1, r5
 8001e34:	4638      	mov	r0, r7
 8001e36:	f7ff fc0d 	bl	8001654 <place_slope_dd>
		place_step_dd(vco->_f, j, p, w, -0.5f - x);
 8001e3a:	eebe 1a00 	vmov.f32	s2, #224	; 0xbf000000 -0.5
 8001e3e:	ee31 1a69 	vsub.f32	s2, s2, s19
 8001e42:	eef0 0a49 	vmov.f32	s1, s18
 8001e46:	eeb0 0a6b 	vmov.f32	s0, s23
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	4638      	mov	r0, r7
 8001e4e:	f7ff fbc7 	bl	80015e0 <place_step_dd>
		x = -0.5f + p / b;
		k = 0;
		if (p >= b) {
 8001e52:	eef4 8aeb 	vcmpe.f32	s17, s23
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	f240 80c2 	bls.w	8001fe2 <VCO_bleptri_SampleCompute+0x30a>
		x = -0.5f + p / b;
 8001e5e:	eecb 9aa8 	vdiv.f32	s19, s23, s17
		k = 0;
 8001e62:	2600      	movs	r6, #0
		x = -0.5f + p / b;
 8001e64:	ee79 9aca 	vsub.f32	s19, s19, s20
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001e68:	ed84 ba06 	vstr	s22, [r4, #24]
		p = eof_offset;
 8001e6c:	eeb0 8a6b 	vmov.f32	s16, s23
 8001e70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001e74:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001e78:	ee77 9aa9 	vadd.f32	s19, s15, s19

	z += a * (vco->_f[j] - z);
 8001e7c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001e80:	edc3 9a0f 	vstr	s19, [r3, #60]	; 0x3c
	z += a * (vco->_f[j] - z);
 8001e84:	ee77 7aea 	vsub.f32	s15, s15, s21
	vco->out = vco->amp * z;
 8001e88:	edd4 9a01 	vldr	s19, [r4, #4]
	z += a * (vco->_f[j] - z);
 8001e8c:	eee7 aa8a 	vfma.f32	s21, s15, s20

	if (++j == FILLEN)
 8001e90:	3501      	adds	r5, #1
 8001e92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	vco->out = vco->amp * z;
 8001e96:	ee6a 9aa9 	vmul.f32	s19, s21, s19
 8001e9a:	edc4 9a00 	vstr	s19, [r4]
	if (++j == FILLEN)
 8001e9e:	d10f      	bne.n	8001ec0 <VCO_bleptri_SampleCompute+0x1e8>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001ea0:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001ea4:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001ea8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001eac:	f006 f8d4 	bl	8008058 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 8001eba:	f006 f8d8 	bl	800806e <memset>
		j = 0;
 8001ebe:	2500      	movs	r5, #0
	vco->_j = j;
	vco->_k = k;

	return vco->out;

}
 8001ec0:	eeb0 0a69 	vmov.f32	s0, s19
	vco->_p = p;
 8001ec4:	ed84 8a07 	vstr	s16, [r4, #28]
	vco->_w = w;
 8001ec8:	ed84 9a08 	vstr	s18, [r4, #32]
	vco->_b = b;
 8001ecc:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
	vco->_z = z;
 8001ed0:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
}
 8001ed4:	ecbd 8b0c 	vpop	{d8-d13}
	vco->_j = j;
 8001ed8:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
	vco->_k = k;
 8001edc:	f8c4 6550 	str.w	r6, [r4, #1360]	; 0x550
}
 8001ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (w < 1e-5) w = 1e-5;
 8001ee4:	a360      	add	r3, pc, #384	; (adr r3, 8002068 <VCO_bleptri_SampleCompute+0x390>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fd9b 	bl	8000a24 <__aeabi_dcmplt>
 8001eee:	bb68      	cbnz	r0, 8001f4c <VCO_bleptri_SampleCompute+0x274>
		w = freq / SAMPLERATE;
 8001ef0:	eef4 9aca 	vcmpe.f32	s19, s20
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	bfd4      	ite	le
 8001efa:	eeb0 9a69 	vmovle.f32	s18, s19
 8001efe:	eeb0 9a4a 	vmovgt.f32	s18, s20
		b = 0.5 * (1.0 + vco->waveform);
 8001f02:	6920      	ldr	r0, [r4, #16]
 8001f04:	f7fe fac4 	bl	8000490 <__aeabi_f2d>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <VCO_bleptri_SampleCompute+0x3a0>)
 8001f0c:	f7fe f962 	bl	80001d4 <__adddf3>
 8001f10:	2200      	movs	r2, #0
 8001f12:	4b5a      	ldr	r3, [pc, #360]	; (800207c <VCO_bleptri_SampleCompute+0x3a4>)
 8001f14:	f7fe fb14 	bl	8000540 <__aeabi_dmul>
 8001f18:	f7fe fdac 	bl	8000a74 <__aeabi_d2f>
 8001f1c:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8001f20:	eeb4 9a67 	vcmp.f32	s18, s15
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (b > 1.0f - w) b = 1.0f - w;
 8001f28:	ee7c 8a49 	vsub.f32	s17, s24, s18
		if (b < w) b = w;
 8001f2c:	bfc8      	it	gt
 8001f2e:	eef0 7a49 	vmovgt.f32	s15, s18
		if (b > 1.0f - w) b = 1.0f - w;
 8001f32:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	bf58      	it	pl
 8001f3c:	eef0 8a67 	vmovpl.f32	s17, s15
		vco->_init = false;
 8001f40:	2600      	movs	r6, #0
		p = 0.5f * b;
 8001f42:	ee28 8a8a 	vmul.f32	s16, s17, s20
		vco->_init = false;
 8001f46:	f884 6554 	strb.w	r6, [r4, #1364]	; 0x554
 8001f4a:	e6ed      	b.n	8001d28 <VCO_bleptri_SampleCompute+0x50>
		if (w < 1e-5) w = 1e-5;
 8001f4c:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 8002080 <VCO_bleptri_SampleCompute+0x3a8>
 8001f50:	e7d7      	b.n	8001f02 <VCO_bleptri_SampleCompute+0x22a>
	if (t < 1e-5) t = 1e-5;
 8001f52:	eddf 9a4b 	vldr	s19, [pc, #300]	; 8002080 <VCO_bleptri_SampleCompute+0x3a8>
 8001f56:	e6fa      	b.n	8001d4e <VCO_bleptri_SampleCompute+0x76>
			if (p_at_reset >= 1.0f) {
 8001f58:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f60:	da10      	bge.n	8001f84 <VCO_bleptri_SampleCompute+0x2ac>
			x = 0.5f - (p_at_reset - b) / b1;
 8001f62:	ee38 8a68 	vsub.f32	s16, s16, s17
 8001f66:	eec8 9a2c 	vdiv.f32	s19, s16, s25
 8001f6a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001f6e:	ee8c 1a28 	vdiv.f32	s2, s24, s17
 8001f72:	eecc 7a2c 	vdiv.f32	s15, s24, s25
 8001f76:	eef0 0a49 	vmov.f32	s1, s18
 8001f7a:	ee31 1a27 	vadd.f32	s2, s2, s15
 8001f7e:	eeb0 0a6b 	vmov.f32	s0, s23
 8001f82:	e756      	b.n	8001e32 <VCO_bleptri_SampleCompute+0x15a>
 8001f84:	ee8c da28 	vdiv.f32	s26, s24, s17
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001f88:	4629      	mov	r1, r5
 8001f8a:	4638      	mov	r0, r7
 8001f8c:	ee8c 1a2c 	vdiv.f32	s2, s24, s25
				p_at_reset -= 1.0f;
 8001f90:	ee38 8a4c 	vsub.f32	s16, s16, s24
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001f94:	ee31 1a0d 	vadd.f32	s2, s2, s26
 8001f98:	eef0 0a49 	vmov.f32	s1, s18
 8001f9c:	ee3b 0a88 	vadd.f32	s0, s23, s16
 8001fa0:	f7ff fb58 	bl	8001654 <place_slope_dd>
			if (!k && p_at_reset >= b) {
 8001fa4:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d904      	bls.n	8001fb8 <VCO_bleptri_SampleCompute+0x2e0>
			x = -0.5f + p_at_reset / b;
 8001fae:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8001fb2:	ee79 9aca 	vsub.f32	s19, s19, s20
 8001fb6:	e740      	b.n	8001e3a <VCO_bleptri_SampleCompute+0x162>
				x = 0.5f - (p_at_reset - b) / b1;
 8001fb8:	ee38 8a68 	vsub.f32	s16, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001fbc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001fc0:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	4638      	mov	r0, r7
				x = 0.5f - (p_at_reset - b) / b1;
 8001fc8:	eec8 9a2c 	vdiv.f32	s19, s16, s25
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001fcc:	ee31 1a4d 	vsub.f32	s2, s2, s26
 8001fd0:	eef0 0a49 	vmov.f32	s1, s18
 8001fd4:	ee38 0a2b 	vadd.f32	s0, s16, s23
				x = 0.5f - (p_at_reset - b) / b1;
 8001fd8:	ee7a 9a69 	vsub.f32	s19, s20, s19
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001fdc:	f7ff fb3a 	bl	8001654 <place_slope_dd>
 8001fe0:	e7c5      	b.n	8001f6e <VCO_bleptri_SampleCompute+0x296>
			x = 0.5f - (p - b) / b1;
 8001fe2:	ee3b 0ae8 	vsub.f32	s0, s23, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001fe6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001fea:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001fee:	4629      	mov	r1, r5
 8001ff0:	4638      	mov	r0, r7
			k = 1;
 8001ff2:	2601      	movs	r6, #1
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001ff4:	eecc 7a28 	vdiv.f32	s15, s24, s17
			x = 0.5f - (p - b) / b1;
 8001ff8:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001ffc:	ee31 1a67 	vsub.f32	s2, s2, s15
 8002000:	eef0 0a49 	vmov.f32	s1, s18
			x = 0.5f - (p - b) / b1;
 8002004:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002008:	f7ff fb24 	bl	8001654 <place_slope_dd>
 800200c:	e72c      	b.n	8001e68 <VCO_bleptri_SampleCompute+0x190>
	} else if (!k) {  /* normal operation, slope currently up */
 800200e:	2e00      	cmp	r6, #0
 8002010:	d153      	bne.n	80020ba <VCO_bleptri_SampleCompute+0x3e2>
		if (p >= b) {
 8002012:	eef4 8ac8 	vcmpe.f32	s17, s16
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	d933      	bls.n	8002084 <VCO_bleptri_SampleCompute+0x3ac>
		x = -0.5f + p / b;
 800201c:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8002020:	4633      	mov	r3, r6
 8002022:	ee79 9aca 	vsub.f32	s19, s19, s20
		if (p >= 1.0f) {
 8002026:	eeb4 8acc 	vcmpe.f32	s16, s24
 800202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202e:	db40      	blt.n	80020b2 <VCO_bleptri_SampleCompute+0x3da>
			p -= 1.0f;
 8002030:	ee38 8a4c 	vsub.f32	s16, s16, s24
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002034:	ee8c 1a28 	vdiv.f32	s2, s24, s17
 8002038:	4629      	mov	r1, r5
 800203a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
			vco->syncout = p / w + 1e-20f;
 800203e:	eec8 7a09 	vdiv.f32	s15, s16, s18
			x = -0.5f + p / b;
 8002042:	eec8 9a28 	vdiv.f32	s19, s16, s17
			vco->syncout = p / w + 1e-20f;
 8002046:	ee77 7a8d 	vadd.f32	s15, s15, s26
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 800204a:	eef0 0a49 	vmov.f32	s1, s18
			vco->syncout = p / w + 1e-20f;
 800204e:	edc4 7a06 	vstr	s15, [r4, #24]
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002052:	eecc 7a2c 	vdiv.f32	s15, s24, s25
 8002056:	eeb0 0a48 	vmov.f32	s0, s16
 800205a:	ee31 1a27 	vadd.f32	s2, s2, s15
			x = -0.5f + p / b;
 800205e:	ee79 9aca 	vsub.f32	s19, s19, s20
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002062:	f7ff faf7 	bl	8001654 <place_slope_dd>
 8002066:	e703      	b.n	8001e70 <VCO_bleptri_SampleCompute+0x198>
 8002068:	88e368f1 	.word	0x88e368f1
 800206c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002070:	472c4400 	.word	0x472c4400
 8002074:	1e3ce508 	.word	0x1e3ce508
 8002078:	3ff00000 	.word	0x3ff00000
 800207c:	3fe00000 	.word	0x3fe00000
 8002080:	3727c5ac 	.word	0x3727c5ac
			x = 0.5f - (p - b) / b1;
 8002084:	ee38 0a68 	vsub.f32	s0, s16, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002088:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800208c:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8002090:	4629      	mov	r1, r5
 8002092:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002096:	eecc 7a28 	vdiv.f32	s15, s24, s17
			x = 0.5f - (p - b) / b1;
 800209a:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 800209e:	ee31 1a67 	vsub.f32	s2, s2, s15
 80020a2:	eef0 0a49 	vmov.f32	s1, s18
 80020a6:	f7ff fad5 	bl	8001654 <place_slope_dd>
			x = 0.5f - (p - b) / b1;
 80020aa:	ee7a 9a69 	vsub.f32	s19, s20, s19
			k = 1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e7b9      	b.n	8002026 <VCO_bleptri_SampleCompute+0x34e>
			vco->syncout = 0.0f;
 80020b2:	2200      	movs	r2, #0
 80020b4:	61a2      	str	r2, [r4, #24]
 80020b6:	461e      	mov	r6, r3
 80020b8:	e6da      	b.n	8001e70 <VCO_bleptri_SampleCompute+0x198>
		if (p >= 1.0f) {
 80020ba:	eeb4 8acc 	vcmpe.f32	s16, s24
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	db22      	blt.n	800210a <VCO_bleptri_SampleCompute+0x432>
			p -= 1.0f;
 80020c4:	ee38 8a4c 	vsub.f32	s16, s16, s24
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 80020c8:	ee8c ba28 	vdiv.f32	s22, s24, s17
 80020cc:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80020d0:	4629      	mov	r1, r5
 80020d2:	4630      	mov	r0, r6
			vco->syncout = p / w + 1e-20f;
 80020d4:	eec8 7a09 	vdiv.f32	s15, s16, s18
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 80020d8:	ee8c 1a2c 	vdiv.f32	s2, s24, s25
			vco->syncout = p / w + 1e-20f;
 80020dc:	ee77 baab 	vadd.f32	s23, s15, s23
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 80020e0:	ee31 1a0b 	vadd.f32	s2, s2, s22
			vco->syncout = p / w + 1e-20f;
 80020e4:	edc4 ba06 	vstr	s23, [r4, #24]
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 80020e8:	eef0 0a49 	vmov.f32	s1, s18
 80020ec:	eeb0 0a48 	vmov.f32	s0, s16
 80020f0:	f7ff fab0 	bl	8001654 <place_slope_dd>
		if (!k && p >= b) {
 80020f4:	eef4 8ac8 	vcmpe.f32	s17, s16
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	d90e      	bls.n	800211c <VCO_bleptri_SampleCompute+0x444>
			x = -0.5f + p / b;
 80020fe:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8002102:	2600      	movs	r6, #0
 8002104:	ee79 9aca 	vsub.f32	s19, s19, s20
 8002108:	e6b2      	b.n	8001e70 <VCO_bleptri_SampleCompute+0x198>
		x = 0.5f - (p - b) / b1;
 800210a:	ee78 7a68 	vsub.f32	s15, s16, s17
			vco->syncout = 0.0f;
 800210e:	2300      	movs	r3, #0
		x = 0.5f - (p - b) / b1;
 8002110:	eec7 9aac 	vdiv.f32	s19, s15, s25
			vco->syncout = 0.0f;
 8002114:	61a3      	str	r3, [r4, #24]
		x = 0.5f - (p - b) / b1;
 8002116:	ee7a 9a69 	vsub.f32	s19, s20, s19
 800211a:	e6a9      	b.n	8001e70 <VCO_bleptri_SampleCompute+0x198>
			x = 0.5f - (p - b) / b1;
 800211c:	ee38 0a68 	vsub.f32	s0, s16, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002120:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002124:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8002128:	4630      	mov	r0, r6
 800212a:	4629      	mov	r1, r5
			k = 1;
 800212c:	2601      	movs	r6, #1
			x = 0.5f - (p - b) / b1;
 800212e:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8002132:	ee31 1a4b 	vsub.f32	s2, s2, s22
 8002136:	eef0 0a49 	vmov.f32	s1, s18
			x = 0.5f - (p - b) / b1;
 800213a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 800213e:	f7ff fa89 	bl	8001654 <place_slope_dd>
 8002142:	e695      	b.n	8001e70 <VCO_bleptri_SampleCompute+0x198>
			if (p_at_reset >= 1.0f) {
 8002144:	eeb4 8acc 	vcmpe.f32	s16, s24
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	f6bf ae61 	bge.w	8001e12 <VCO_bleptri_SampleCompute+0x13a>
 8002150:	e72d      	b.n	8001fae <VCO_bleptri_SampleCompute+0x2d6>
 8002152:	bf00      	nop

08002154 <Lfo_SampleCompute>:
/*-------------------------------------------------------------------------------------------*/
float Lfo_SampleCompute(Lfo_t * op) // ! returns a positive value between 0 and op.amp !
{
	float z;

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002154:	edd0 7a02 	vldr	s15, [r0, #8]
 8002158:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80021cc <Lfo_SampleCompute+0x78>
 800215c:	edd0 6a01 	vldr	s13, [r0, #4]
 8002160:	eee6 7a87 	vfma.f32	s15, s13, s14
{
 8002164:	b510      	push	{r4, lr}
 8002166:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021d0 <Lfo_SampleCompute+0x7c>
	op->phase += _2PI * Ts * op->freq; // increment phase
 800216a:	edc0 7a02 	vstr	s15, [r0, #8]
{
 800216e:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002170:	edd4 7a02 	vldr	s15, [r4, #8]
 8002174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217c:	d41c      	bmi.n	80021b8 <Lfo_SampleCompute+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800217e:	edd4 7a02 	vldr	s15, [r4, #8]
 8002182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	da1a      	bge.n	80021c2 <Lfo_SampleCompute+0x6e>
		op->phase -= _2PI;

	z = sinetable[lrintf(ALPHA * (op->phase))];
 800218c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80021d4 <Lfo_SampleCompute+0x80>
 8002190:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002194:	f004 fd58 	bl	8006c48 <lrintf>
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <Lfo_SampleCompute+0x84>)
 800219a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	op->out = op->amp * (z + 1); // returns a positive value between 0 and op.amp
 800219e:	ed90 0a00 	vldr	s0, [r0]
 80021a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80021a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80021aa:	edd4 7a00 	vldr	s15, [r4]
 80021ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80021b2:	ed84 0a03 	vstr	s0, [r4, #12]

	return op->out;
}
 80021b6:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 80021b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021bc:	edc4 7a02 	vstr	s15, [r4, #8]
 80021c0:	e7d6      	b.n	8002170 <Lfo_SampleCompute+0x1c>
		op->phase -= _2PI;
 80021c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021c6:	edc4 7a02 	vstr	s15, [r4, #8]
 80021ca:	e7d8      	b.n	800217e <Lfo_SampleCompute+0x2a>
 80021cc:	39156592 	.word	0x39156592
 80021d0:	40c90fdb 	.word	0x40c90fdb
 80021d4:	4322f983 	.word	0x4322f983
 80021d8:	08015de8 	.word	0x08015de8

080021dc <Chorus_init>:
		}
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_delay(monochorus_t *del, float delay)
{
	del->baseDelay = delay;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <Chorus_init+0x68>)
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fb(monochorus_t *del, float val)
{
	del->fb = val;
 80021de:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <Chorus_init+0x6c>)
{
 80021e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	del->baseDelay = delay;
 80021e2:	4f1a      	ldr	r7, [pc, #104]	; (800224c <Chorus_init+0x70>)
 80021e4:	601f      	str	r7, [r3, #0]
	del->fb = val;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <Chorus_init+0x74>)
 80021e8:	4c1a      	ldr	r4, [pc, #104]	; (8002254 <Chorus_init+0x78>)
 80021ea:	6054      	str	r4, [r2, #4]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fw(monochorus_t *del, float val)
{
	del->fw = val;
 80021ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	del->mode = 1;
 80021f0:	f241 50f4 	movw	r0, #5620	; 0x15f4
 80021f4:	2501      	movs	r5, #1
	del->fw = val;
 80021f6:	6091      	str	r1, [r2, #8]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_mix(monochorus_t *del, float val)
{
	del->mix = val;
 80021f8:	6011      	str	r1, [r2, #0]
	del->fw = val;
 80021fa:	6099      	str	r1, [r3, #8]
	del->mix = val;
 80021fc:	6019      	str	r1, [r3, #0]
	lfoL.amp = LEFT_SWEEP;
 80021fe:	4916      	ldr	r1, [pc, #88]	; (8002258 <Chorus_init+0x7c>)
	del->mode = 1;
 8002200:	5415      	strb	r5, [r2, r0]
 8002202:	541d      	strb	r5, [r3, r0]
	lfoL.amp = LEFT_SWEEP;
 8002204:	4815      	ldr	r0, [pc, #84]	; (800225c <Chorus_init+0x80>)
 8002206:	6008      	str	r0, [r1, #0]
	lfoR.amp = RIGHT_SWEEP;
 8002208:	6108      	str	r0, [r1, #16]
	lfoL.freq = LEFT_RATE ;
 800220a:	4815      	ldr	r0, [pc, #84]	; (8002260 <Chorus_init+0x84>)
 800220c:	6048      	str	r0, [r1, #4]
	lfoR.freq = RIGHT_RATE ;
 800220e:	4815      	ldr	r0, [pc, #84]	; (8002264 <Chorus_init+0x88>)
 8002210:	6148      	str	r0, [r1, #20]
	rateCoeff = 1;
 8002212:	4815      	ldr	r0, [pc, #84]	; (8002268 <Chorus_init+0x8c>)
	del->fb = val;
 8002214:	605c      	str	r4, [r3, #4]
	rateCoeff = 1;
 8002216:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	del->baseDelay = delay;
 800221a:	4c14      	ldr	r4, [pc, #80]	; (800226c <Chorus_init+0x90>)
	rateCoeff = 1;
 800221c:	6005      	str	r5, [r0, #0]
	lfoL.phase = _PI/2; // initial phases for quadrature
 800221e:	4814      	ldr	r0, [pc, #80]	; (8002270 <Chorus_init+0x94>)
 8002220:	6088      	str	r0, [r1, #8]
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8002222:	f240 5677 	movw	r6, #1399	; 0x577
	lfoR.phase = 0;
 8002226:	2000      	movs	r0, #0
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8002228:	60d6      	str	r6, [r2, #12]
 800222a:	60de      	str	r6, [r3, #12]
	lfoR.phase = 0;
 800222c:	6188      	str	r0, [r1, #24]
	del->baseDelay = delay;
 800222e:	6027      	str	r7, [r4, #0]
 8002230:	3310      	adds	r3, #16
 8002232:	3210      	adds	r2, #16
 8002234:	4601      	mov	r1, r0
		delR.dline[var] = 0;
 8002236:	f843 1b04 	str.w	r1, [r3], #4
	for (int var = 0; var < DEPTH; ++var) {
 800223a:	42a3      	cmp	r3, r4
		delL.dline[var] = 0;
 800223c:	f842 1b04 	str.w	r1, [r2], #4
	for (int var = 0; var < DEPTH; ++var) {
 8002240:	d1f9      	bne.n	8002236 <Chorus_init+0x5a>
}
 8002242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002244:	20002734 	.word	0x20002734
 8002248:	20001144 	.word	0x20001144
 800224c:	43700000 	.word	0x43700000
 8002250:	2000273c 	.word	0x2000273c
 8002254:	be4ccccd 	.word	0xbe4ccccd
 8002258:	20001124 	.word	0x20001124
 800225c:	42480000 	.word	0x42480000
 8002260:	3de147ae 	.word	0x3de147ae
 8002264:	3df5c28f 	.word	0x3df5c28f
 8002268:	20013a58 	.word	0x20013a58
 800226c:	20003d2c 	.word	0x20003d2c
 8002270:	3fc90fdb 	.word	0x3fc90fdb

08002274 <ChorusRate_set>:
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8002274:	ee07 0a90 	vmov	s15, r0
 8002278:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80022a0 <ChorusRate_set+0x2c>
	lfoR.freq = rateCoeff * rate;
 800227c:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <ChorusRate_set+0x30>)
	lfoL.freq = rate;
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <ChorusRate_set+0x34>)
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8002280:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002284:	eddf 7a09 	vldr	s15, [pc, #36]	; 80022ac <ChorusRate_set+0x38>
 8002288:	eee6 7a87 	vfma.f32	s15, s13, s14
	lfoR.freq = rateCoeff * rate;
 800228c:	ed92 7a00 	vldr	s14, [r2]
	lfoL.freq = rate;
 8002290:	edc3 7a01 	vstr	s15, [r3, #4]
	lfoR.freq = rateCoeff * rate;
 8002294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002298:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	3d61c387 	.word	0x3d61c387
 80022a4:	20013a58 	.word	0x20013a58
 80022a8:	20001124 	.word	0x20001124
 80022ac:	3ca3d70a 	.word	0x3ca3d70a

080022b0 <ChorusSecondRate_set>:
	rateCoeff = 0.9f / MIDI_MAX * val + 0.1f; // from 10 % to 100 % of lfoL rate
 80022b0:	ee07 0a90 	vmov	s15, r0
 80022b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80022dc <ChorusSecondRate_set+0x2c>
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <ChorusSecondRate_set+0x30>)
 80022ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022be:	eddf 7a09 	vldr	s15, [pc, #36]	; 80022e4 <ChorusSecondRate_set+0x34>
 80022c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80022c6:	edc3 7a00 	vstr	s15, [r3]
	lfoR.freq = rateCoeff * lfoL.freq;
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <ChorusSecondRate_set+0x38>)
 80022cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80022d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	3be836d4 	.word	0x3be836d4
 80022e0:	20013a58 	.word	0x20013a58
 80022e4:	3dcccccd 	.word	0x3dcccccd
 80022e8:	20001124 	.word	0x20001124

080022ec <ChorusDelay_set>:
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 80022ec:	ee07 0a90 	vmov	s15, r0
 80022f0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800230c <ChorusDelay_set+0x20>
	delL.baseDelay = d;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <ChorusDelay_set+0x24>)
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 80022f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fa:	ee67 7a87 	vmul.f32	s15, s15, s14
	delL.baseDelay = d;
 80022fe:	edc3 7a00 	vstr	s15, [r3]
	delR.baseDelay = d;
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <ChorusDelay_set+0x28>)
 8002304:	edc3 7a00 	vstr	s15, [r3]
}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40b060c2 	.word	0x40b060c2
 8002310:	20002734 	.word	0x20002734
 8002314:	20003d2c 	.word	0x20003d2c

08002318 <ChorusFeedback_set>:
	fb = 0.95f * val / MIDI_MAX;
 8002318:	ee07 0a90 	vmov	s15, r0
 800231c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002340 <ChorusFeedback_set+0x28>
 8002320:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002344 <ChorusFeedback_set+0x2c>
	delL.fb = fb;
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <ChorusFeedback_set+0x30>)
	fb = 0.95f * val / MIDI_MAX;
 8002326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800232a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	delL.fb = fb;
 8002332:	ed83 7a01 	vstr	s14, [r3, #4]
	delR.fb = fb;
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <ChorusFeedback_set+0x34>)
 8002338:	ed83 7a01 	vstr	s14, [r3, #4]
}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	3f733333 	.word	0x3f733333
 8002344:	42fe0000 	.word	0x42fe0000
 8002348:	20001144 	.word	0x20001144
 800234c:	2000273c 	.word	0x2000273c

08002350 <ChorusSweep_set>:
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 8002350:	ee07 0a90 	vmov	s15, r0
 8002354:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800236c <ChorusSweep_set+0x1c>
	lfoL.amp = sw;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <ChorusSweep_set+0x20>)
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 800235a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235e:	ee67 7a87 	vmul.f32	s15, s15, s14
	lfoL.amp = sw;
 8002362:	edc3 7a00 	vstr	s15, [r3]
	lfoR.amp = sw;
 8002366:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800236a:	4770      	bx	lr
 800236c:	3f8c7f66 	.word	0x3f8c7f66
 8002370:	20001124 	.word	0x20001124

08002374 <ChorusMode_switch>:
	switch (val)
 8002374:	b148      	cbz	r0, 800238a <ChorusMode_switch+0x16>
 8002376:	287f      	cmp	r0, #127	; 0x7f
 8002378:	d106      	bne.n	8002388 <ChorusMode_switch+0x14>
		case 127 : 	delR.mode = delL.mode = -1 ; break;
 800237a:	f241 53f4 	movw	r3, #5620	; 0x15f4
 800237e:	22ff      	movs	r2, #255	; 0xff
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 8002380:	4904      	ldr	r1, [pc, #16]	; (8002394 <ChorusMode_switch+0x20>)
 8002382:	54ca      	strb	r2, [r1, r3]
 8002384:	4904      	ldr	r1, [pc, #16]	; (8002398 <ChorusMode_switch+0x24>)
 8002386:	54ca      	strb	r2, [r1, r3]
}
 8002388:	4770      	bx	lr
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 800238a:	f241 53f4 	movw	r3, #5620	; 0x15f4
 800238e:	2201      	movs	r2, #1
 8002390:	e7f6      	b.n	8002380 <ChorusMode_switch+0xc>
 8002392:	bf00      	nop
 8002394:	20001144 	.word	0x20001144
 8002398:	2000273c 	.word	0x2000273c

0800239c <ChorusFDBsign_switch>:
	switch (val)
 800239c:	b180      	cbz	r0, 80023c0 <ChorusFDBsign_switch+0x24>
 800239e:	287f      	cmp	r0, #127	; 0x7f
 80023a0:	d10d      	bne.n	80023be <ChorusFDBsign_switch+0x22>
		case 127 : 	delR.fb = fabsf(delR.fb); delL.fb = fabsf(delL.fb); break; // positive feedback;
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <ChorusFDBsign_switch+0x48>)
 80023a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023a8:	eef0 7ae7 	vabs.f32	s15, s15
 80023ac:	edc3 7a01 	vstr	s15, [r3, #4]
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <ChorusFDBsign_switch+0x4c>)
 80023b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023b6:	eef0 7ae7 	vabs.f32	s15, s15
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 80023ba:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80023be:	4770      	bx	lr
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <ChorusFDBsign_switch+0x48>)
 80023c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023c6:	eef0 7ae7 	vabs.f32	s15, s15
 80023ca:	eef1 7a67 	vneg.f32	s15, s15
 80023ce:	edc3 7a01 	vstr	s15, [r3, #4]
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <ChorusFDBsign_switch+0x4c>)
 80023d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d8:	eef0 7ae7 	vabs.f32	s15, s15
 80023dc:	eef1 7a67 	vneg.f32	s15, s15
 80023e0:	e7eb      	b.n	80023ba <ChorusFDBsign_switch+0x1e>
 80023e2:	bf00      	nop
 80023e4:	2000273c 	.word	0x2000273c
 80023e8:	20001144 	.word	0x20001144

080023ec <delay_write>:
	return del->mix;
}
/*-------------------------------------------------------------------------------------------*/
void delay_write (monochorus_t *del, float xin)
{
	del->dline[del->in_idx] = xin;
 80023ec:	68c3      	ldr	r3, [r0, #12]
 80023ee:	eb00 0283 	add.w	r2, r0, r3, lsl #2

	(del->in_idx)++;
 80023f2:	3301      	adds	r3, #1
	if (del->in_idx >= DEPTH)
 80023f4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
		del->in_idx = 0;
 80023f8:	bfa8      	it	ge
 80023fa:	2300      	movge	r3, #0
	del->dline[del->in_idx] = xin;
 80023fc:	ed82 0a04 	vstr	s0, [r2, #16]
		del->in_idx = 0;
 8002400:	60c3      	str	r3, [r0, #12]
}
 8002402:	4770      	bx	lr

08002404 <delay_read>:
/*-------------------------------------------------------------------------------------------*/
float delay_read (monochorus_t *del, float delay) // "delay" is a floating point number of samples
{
 8002404:	b510      	push	{r4, lr}
	float y_n_2;	// y(n-2)
	float y_n_3;	// y(n-3)
	int32_t idx;

	d = delay;
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002406:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 800240a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002412:	ed2d 8b02 	vpush	{d8}
 8002416:	4604      	mov	r4, r0
 8002418:	eeb0 8a40 	vmov.f32	s16, s0
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 800241c:	d464      	bmi.n	80024e8 <delay_read+0xe4>
	if (d > DEPTH-MARGIN) d = DEPTH-MARGIN;
 800241e:	eddf 7a34 	vldr	s15, [pc, #208]	; 80024f0 <delay_read+0xec>
 8002422:	eeb4 0a67 	vcmp.f32	s0, s15
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	bfc8      	it	gt
 800242c:	eeb0 8a67 	vmovgt.f32	s16, s15

	i = (int32_t)floorf(d);
 8002430:	eeb0 0a48 	vmov.f32	s0, s16
 8002434:	f004 fbc6 	bl	8006bc4 <floorf>
 8002438:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	f = d - i;

	idx = del->in_idx - i;
 800243c:	68e3      	ldr	r3, [r4, #12]
	if (idx < 0) idx += DEPTH;
 800243e:	ee10 2a10 	vmov	r2, s0
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	bf48      	it	mi
 8002446:	f503 63af 	addmi.w	r3, r3, #1400	; 0x578
	y_n = del->dline[idx]; 		// y(n)
 800244a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800244e:	edd2 5a04 	vldr	s11, [r2, #16]

	idx--;
	if (idx < 0) idx += DEPTH;
 8002452:	1e5a      	subs	r2, r3, #1
 8002454:	bf48      	it	mi
 8002456:	f203 5277 	addwmi	r2, r3, #1399	; 0x577
	y_n_1 = del->dline[idx];	// y(n-1)
 800245a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
	f = d - i;
 800245e:	eef8 7ac0 	vcvt.f32.s32	s15, s0
	y_n_1 = del->dline[idx];	// y(n-1)
 8002462:	ed93 5a04 	vldr	s10, [r3, #16]
	//return (.5f)*(f-1)*(f-2)*y_n - f*(f-2)*y_n_1 + (.5f)*f*(f-1)*y_n_2 ; // 2nd order Lagrange interpolation

	//return .5f*(f-1)*((f-2)*y_n + f*y_n_2) - f*(f-2)*y_n_1 ;	// 2nd order Lagrange interpolation (faster)

	/* 3rd order Lagrange interpolation :  */
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 8002466:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80024f4 <delay_read+0xf0>
	if (idx < 0) idx += DEPTH;
 800246a:	1e53      	subs	r3, r2, #1
	f = d - i;
 800246c:	ee38 8a67 	vsub.f32	s16, s16, s15
	if (idx < 0) idx += DEPTH;
 8002470:	bf48      	it	mi
 8002472:	f202 5377 	addwmi	r3, r2, #1399	; 0x577
	if (idx < 0) idx += DEPTH;
 8002476:	1e58      	subs	r0, r3, #1
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 8002478:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800247c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002480:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002484:	ee78 6a66 	vsub.f32	s13, s16, s13
	if (idx < 0) idx += DEPTH;
 8002488:	bf48      	it	mi
 800248a:	f203 5077 	addwmi	r0, r3, #1399	; 0x577
	y_n_2 = del->dline[idx];	// y(n-2)
 800248e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	y_n_3 = del->dline[idx];	// y(n-3)
 8002492:	eb04 0480 	add.w	r4, r4, r0, lsl #2
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 8002496:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800249a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800249e:	edd4 7a04 	vldr	s15, [r4, #16]
	y_n_2 = del->dline[idx];	// y(n-2)
 80024a2:	edd2 4a04 	vldr	s9, [r2, #16]
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80024a6:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
 80024aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024ae:	ee66 6a84 	vmul.f32	s13, s13, s8
 80024b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024b6:	ee38 7a47 	vsub.f32	s14, s16, s14
 80024ba:	eea6 0aa4 	vfma.f32	s0, s13, s9
 80024be:	ee67 7a08 	vmul.f32	s15, s14, s16
 80024c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024c6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80024f8 <delay_read+0xf4>
 80024ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80024d2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80024d6:	ee28 8a05 	vmul.f32	s16, s16, s10
 80024da:	eea7 8a25 	vfma.f32	s16, s14, s11

}
 80024de:	eea6 0a08 	vfma.f32	s0, s12, s16
 80024e2:	ecbd 8b02 	vpop	{d8}
 80024e6:	bd10      	pop	{r4, pc}
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 80024e8:	eeb0 8a67 	vmov.f32	s16, s15
 80024ec:	e7a0      	b.n	8002430 <delay_read+0x2c>
 80024ee:	bf00      	nop
 80024f0:	44ae4000 	.word	0x44ae4000
 80024f4:	3e2aaaab 	.word	0x3e2aaaab
 80024f8:	be2aaaab 	.word	0xbe2aaaab

080024fc <mono_chorus_compute>:
/*---------------------------------------------------------------------------------------------*/

float mono_chorus_compute(monochorus_t *del, Lfo_t *lfo, float xin)
{
 80024fc:	b538      	push	{r3, r4, r5, lr}
	float yout;
	float x1;
	float x2;

	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 80024fe:	f500 55af 	add.w	r5, r0, #5600	; 0x15e0
{
 8002502:	ed2d 8b04 	vpush	{d8-d9}
 8002506:	4604      	mov	r4, r0
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002508:	3510      	adds	r5, #16
 800250a:	4608      	mov	r0, r1
 800250c:	edd5 8a00 	vldr	s17, [r5]
{
 8002510:	eeb0 8a40 	vmov.f32	s16, s0
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002514:	f7ff fe1e 	bl	8002154 <Lfo_SampleCompute>
 8002518:	ee38 0a80 	vadd.f32	s0, s17, s0
 800251c:	eef1 9a08 	vmov.f32	s19, #24	; 0x40c00000  6.0
 8002520:	ee30 0a29 	vadd.f32	s0, s0, s19
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff ff6d 	bl	8002404 <delay_read>

	if (del->mode == 1)
 800252a:	f241 53f4 	movw	r3, #5620	; 0x15f4
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 800252e:	eef0 8a40 	vmov.f32	s17, s0
	if (del->mode == 1)
 8002532:	56e3      	ldrsb	r3, [r4, r3]
 8002534:	ed94 9a01 	vldr	s18, [r4, #4]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d123      	bne.n	8002584 <mono_chorus_compute+0x88>
		x1 = xin + del->fb * x2; // variable delay feedback signal or ...
 800253c:	eeb0 0a48 	vmov.f32	s0, s16
 8002540:	eea9 0a28 	vfma.f32	s0, s18, s17
	else
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal

	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 8002544:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002548:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800254c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002550:	dc24      	bgt.n	800259c <mono_chorus_compute+0xa0>
	x1 = (x1 < -1.0f) ? -1.0f : x1 ;
 8002552:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002556:	eeb4 0a67 	vcmp.f32	s0, s15
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	bf48      	it	mi
 8002560:	eeb0 0a67 	vmovmi.f32	s0, s15

	yout = del->mix * x1 + del->fw * x2;
 8002564:	edd4 7a02 	vldr	s15, [r4, #8]
 8002568:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800256c:	edd4 7a00 	vldr	s15, [r4]
 8002570:	eee7 8a80 	vfma.f32	s17, s15, s0
	//yout = del->mix * xin + del->fw * x2; // not good sounding...
	delay_write(del, x1);
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff ff39 	bl	80023ec <delay_write>

	return yout;
}
 800257a:	eeb0 0a68 	vmov.f32	s0, s17
 800257e:	ecbd 8b04 	vpop	{d8-d9}
 8002582:	bd38      	pop	{r3, r4, r5, pc}
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal
 8002584:	ed95 0a00 	vldr	s0, [r5]
 8002588:	4620      	mov	r0, r4
 800258a:	ee30 0a29 	vadd.f32	s0, s0, s19
 800258e:	f7ff ff39 	bl	8002404 <delay_read>
 8002592:	eea9 8a00 	vfma.f32	s16, s18, s0
 8002596:	eeb0 0a48 	vmov.f32	s0, s16
 800259a:	e7d3      	b.n	8002544 <mono_chorus_compute+0x48>
	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 800259c:	eeb0 0a67 	vmov.f32	s0, s15
 80025a0:	e7e0      	b.n	8002564 <mono_chorus_compute+0x68>
	...

080025a4 <stereoChorus_compute>:

/*--------------------This is the main stereo chorus function : ----------------------------*/

void stereoChorus_compute (float * left_out, float * right_out, float in)
{
 80025a4:	b570      	push	{r4, r5, r6, lr}
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80025a6:	4c0c      	ldr	r4, [pc, #48]	; (80025d8 <stereoChorus_compute+0x34>)
{
 80025a8:	ed2d 8b02 	vpush	{d8}
 80025ac:	4606      	mov	r6, r0
 80025ae:	460d      	mov	r5, r1
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80025b0:	480a      	ldr	r0, [pc, #40]	; (80025dc <stereoChorus_compute+0x38>)
 80025b2:	4621      	mov	r1, r4
{
 80025b4:	eeb0 8a40 	vmov.f32	s16, s0
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80025b8:	f7ff ffa0 	bl	80024fc <mono_chorus_compute>
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80025bc:	f104 0110 	add.w	r1, r4, #16
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80025c0:	ed86 0a00 	vstr	s0, [r6]
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80025c4:	4806      	ldr	r0, [pc, #24]	; (80025e0 <stereoChorus_compute+0x3c>)
 80025c6:	eeb0 0a48 	vmov.f32	s0, s16
 80025ca:	f7ff ff97 	bl	80024fc <mono_chorus_compute>
}
 80025ce:	ecbd 8b02 	vpop	{d8}
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80025d2:	ed85 0a00 	vstr	s0, [r5]
}
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
 80025d8:	20001124 	.word	0x20001124
 80025dc:	20001144 	.word	0x20001144
 80025e0:	2000273c 	.word	0x2000273c

080025e4 <Delay_init>:

/*-------------------------------------------------------------------------------------------*/
void Delay_init(void)
{
	/* initialize pointers positions for delay effect */
	shift = INIT_DELAY;
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <Delay_init+0x18>)
 80025e6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80025ea:	601a      	str	r2, [r3, #0]
	readpos = delayline;
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <Delay_init+0x1c>)
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <Delay_init+0x20>)
 80025f0:	601a      	str	r2, [r3, #0]
	writepos = delayline + INIT_DELAY;
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <Delay_init+0x24>)
 80025f4:	4a05      	ldr	r2, [pc, #20]	; (800260c <Delay_init+0x28>)
 80025f6:	601a      	str	r2, [r3, #0]
}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20012a5c 	.word	0x20012a5c
 8002600:	20012a58 	.word	0x20012a58
 8002604:	20003fec 	.word	0x20003fec
 8002608:	20012a60 	.word	0x20012a60
 800260c:	20010b0c 	.word	0x20010b0c

08002610 <Delay_clean>:
/*-------------------------------------------------------------------------------------------*/
void Delay_clean(void)
{
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <Delay_clean+0x10>)
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <Delay_clean+0x14>)
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
		delayline[i] = 0;
 8002614:	2100      	movs	r1, #0
 8002616:	f843 1b04 	str.w	r1, [r3], #4
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 800261a:	4293      	cmp	r3, r2
 800261c:	d1fb      	bne.n	8002616 <Delay_clean+0x6>
}
 800261e:	4770      	bx	lr
 8002620:	20003fec 	.word	0x20003fec
 8002624:	20012a54 	.word	0x20012a54

08002628 <Delay_time_set>:
}
/*-------------------------------------------------------------------------------------------*/
void Delay_time_set(uint8_t val)
{
	float 	*pos;
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 8002628:	ee07 0a90 	vmov	s15, r0
 800262c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002664 <Delay_time_set+0x3c>
 8002630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002634:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002668 <Delay_time_set+0x40>
{
 8002638:	b508      	push	{r3, lr}
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 800263a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800263e:	f004 fb03 	bl	8006c48 <lrintf>
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <Delay_time_set+0x44>)
 8002644:	6018      	str	r0, [r3, #0]
	pos = writepos - shift;
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <Delay_time_set+0x48>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
	if (pos >= delayline)
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <Delay_time_set+0x4c>)
 8002650:	4298      	cmp	r0, r3
		readpos = pos;
	else
		readpos = pos + DELAYLINE_LEN - 1;
 8002652:	bf38      	it	cc
 8002654:	f500 406a 	addcc.w	r0, r0, #59904	; 0xea00
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <Delay_time_set+0x50>)
 800265a:	bf38      	it	cc
 800265c:	305c      	addcc	r0, #92	; 0x5c
 800265e:	6018      	str	r0, [r3, #0]

}
 8002660:	bd08      	pop	{r3, pc}
 8002662:	bf00      	nop
 8002664:	437a0000 	.word	0x437a0000
 8002668:	42e84489 	.word	0x42e84489
 800266c:	20012a5c 	.word	0x20012a5c
 8002670:	20012a60 	.word	0x20012a60
 8002674:	20003fec 	.word	0x20003fec
 8002678:	20012a58 	.word	0x20012a58

0800267c <DelayFeedback_set>:
	fdb *= 0.95f ;//
}
/*-------------------------------------------------------------------------------------------*/
void DelayFeedback_set(uint8_t val)
{
	fdb = val / MIDI_MAX;
 800267c:	ee07 0a90 	vmov	s15, r0
 8002680:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002694 <DelayFeedback_set+0x18>
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <DelayFeedback_set+0x1c>)
 8002686:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800268a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800268e:	edc3 7a00 	vstr	s15, [r3]
}
 8002692:	4770      	bx	lr
 8002694:	42fe0000 	.word	0x42fe0000
 8002698:	20000004 	.word	0x20000004

0800269c <DelayWet_set>:
/*-------------------------------------------------------------------------------------------*/
void DelayWet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 800269c:	ee07 0a90 	vmov	s15, r0
 80026a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80026b4 <DelayWet_set+0x18>
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <DelayWet_set+0x1c>)
 80026a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ae:	edc3 7a00 	vstr	s15, [r3]
}
 80026b2:	4770      	bx	lr
 80026b4:	42fe0000 	.word	0x42fe0000
 80026b8:	20000008 	.word	0x20000008

080026bc <Delay_compute>:
float Delay_compute (float x)
{
	float y, dy;

	// (*readpos) : delayed sample read at the output of the delay line
	dy = (1.f - coeff_a1)*(*readpos) + coeff_a1 * old_dy; // apply lowpass filter in the loop
 80026bc:	4a25      	ldr	r2, [pc, #148]	; (8002754 <Delay_compute+0x98>)
 80026be:	4926      	ldr	r1, [pc, #152]	; (8002758 <Delay_compute+0x9c>)
 80026c0:	ed92 7a00 	vldr	s14, [r2]
 80026c4:	eddf 7a25 	vldr	s15, [pc, #148]	; 800275c <Delay_compute+0xa0>
 80026c8:	680b      	ldr	r3, [r1, #0]
 80026ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ce:	edd3 6a00 	vldr	s13, [r3]
 80026d2:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002760 <Delay_compute+0xa4>
 80026d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
{
 80026da:	b530      	push	{r4, r5, lr}
	old_dy = dy;
 80026dc:	ed82 7a00 	vstr	s14, [r2]
	y = x + fdb*dy;
 80026e0:	4a20      	ldr	r2, [pc, #128]	; (8002764 <Delay_compute+0xa8>)
 80026e2:	edd2 7a00 	vldr	s15, [r2]
 80026e6:	eef0 6a40 	vmov.f32	s13, s0
 80026ea:	eee7 6a87 	vfma.f32	s13, s15, s14

	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 80026ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80026f2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	y = x + fdb*dy;
 80026fa:	eeb0 7a66 	vmov.f32	s14, s13
	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 80026fe:	dc25      	bgt.n	800274c <Delay_compute+0x90>
	y = (y < -1.0f) ? -1.0f : y ;
 8002700:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8002704:	eeb4 7a66 	vcmp.f32	s14, s13
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	bf48      	it	mi
 800270e:	eeb0 7a66 	vmovmi.f32	s14, s13
	*writepos = y; // write new computed sample at the input of the delay line
 8002712:	4d15      	ldr	r5, [pc, #84]	; (8002768 <Delay_compute+0xac>)

	/* update the delay line pointers : */
	writepos++;
	readpos++;

	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002714:	4c15      	ldr	r4, [pc, #84]	; (800276c <Delay_compute+0xb0>)
	*writepos = y; // write new computed sample at the input of the delay line
 8002716:	682a      	ldr	r2, [r5, #0]
 8002718:	eca2 7a01 	vstmia	r2!, {s14}
	writepos++;
 800271c:	602a      	str	r2, [r5, #0]
	if ((writepos - delayline) >= DELAYLINE_LEN)
 800271e:	f64e 205c 	movw	r0, #59996	; 0xea5c
	readpos++;
 8002722:	3304      	adds	r3, #4
	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002724:	1b12      	subs	r2, r2, r4
	readpos++;
 8002726:	600b      	str	r3, [r1, #0]
	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002728:	4282      	cmp	r2, r0
		writepos = delayline; // wrap pointer

	if ((readpos - delayline) >= DELAYLINE_LEN)
 800272a:	eba3 0304 	sub.w	r3, r3, r4
		writepos = delayline; // wrap pointer
 800272e:	bfc8      	it	gt
 8002730:	602c      	strgt	r4, [r5, #0]
	if ((readpos - delayline) >= DELAYLINE_LEN)
 8002732:	4283      	cmp	r3, r0
		readpos = delayline;  // wrap pointer

	return (wet * y + (1 - wet) * x);
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <Delay_compute+0xb4>)
		readpos = delayline;  // wrap pointer
 8002736:	bfc8      	it	gt
 8002738:	600c      	strgt	r4, [r1, #0]
	return (wet * y + (1 - wet) * x);
 800273a:	edd3 6a00 	vldr	s13, [r3]
 800273e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002742:	ee27 0a80 	vmul.f32	s0, s15, s0

}
 8002746:	eea6 0a87 	vfma.f32	s0, s13, s14
 800274a:	bd30      	pop	{r4, r5, pc}
	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 800274c:	eeb0 7a67 	vmov.f32	s14, s15
 8002750:	e7df      	b.n	8002712 <Delay_compute+0x56>
 8002752:	bf00      	nop
 8002754:	20012a54 	.word	0x20012a54
 8002758:	20012a58 	.word	0x20012a58
 800275c:	3f19999a 	.word	0x3f19999a
 8002760:	3ecccccc 	.word	0x3ecccccc
 8002764:	20000004 	.word	0x20000004
 8002768:	20012a60 	.word	0x20012a60
 800276c:	20003fec 	.word	0x20003fec
 8002770:	20000008 	.word	0x20000008

08002774 <Drifter_amp_set>:
Drifter_t	d3 _CCM_ ;

/*-------------------------------------------------------------------------------------------*/
void	Drifter_amp_set(uint8_t val)
{
	d1.gain = d2.gain = d3.gain = (val / MIDI_MAX)*(val / MIDI_MAX);
 8002774:	ee07 0a90 	vmov	s15, r0
 8002778:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002798 <Drifter_amp_set+0x24>
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <Drifter_amp_set+0x28>)
 800277e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002786:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800278a:	edc3 7a02 	vstr	s15, [r3, #8]
 800278e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8002792:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

}
 8002796:	4770      	bx	lr
 8002798:	42fe0000 	.word	0x42fe0000
 800279c:	20003d34 	.word	0x20003d34

080027a0 <Drifter_minFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_minFreq_set(uint8_t val)
{
	d1.fmin = d2.fmin = d3.fmin = .1f + 50 * val / MIDI_MAX;
 80027a0:	2332      	movs	r3, #50	; 0x32
 80027a2:	4358      	muls	r0, r3
 80027a4:	ee07 0a90 	vmov	s15, r0
 80027a8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80027cc <Drifter_minFreq_set+0x2c>
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <Drifter_minFreq_set+0x30>)
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80027d4 <Drifter_minFreq_set+0x34>
 80027ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027be:	edc3 7a01 	vstr	s15, [r3, #4]
 80027c2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 80027c6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

}
 80027ca:	4770      	bx	lr
 80027cc:	42fe0000 	.word	0x42fe0000
 80027d0:	20003d34 	.word	0x20003d34
 80027d4:	3dcccccd 	.word	0x3dcccccd

080027d8 <Drifter_maxFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_maxFreq_set(uint8_t val)
{
	float x;

	x = (1 + 19 * val / MIDI_MAX )* d1.fmin ;
 80027d8:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80027dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80027e0:	ee07 0a90 	vmov	s15, r0
 80027e4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800282c <Drifter_maxFreq_set+0x54>
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <Drifter_maxFreq_set+0x58>)
 80027ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027fa:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80027fe:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (x > 10000)
 8002802:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002834 <Drifter_maxFreq_set+0x5c>
 8002806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		d1.fmax = d2.fmax = d3.fmax = 10000;
 800280e:	bfc3      	ittte	gt
 8002810:	ed83 7a00 	vstrgt	s14, [r3]
 8002814:	ed83 7a0b 	vstrgt	s14, [r3, #44]	; 0x2c
 8002818:	ed83 7a16 	vstrgt	s14, [r3, #88]	; 0x58
	else {
		d1.fmax = d2.fmax = d3.fmax = x;
 800281c:	edc3 7a00 	vstrle	s15, [r3]
 8002820:	bfdc      	itt	le
 8002822:	edc3 7a0b 	vstrle	s15, [r3, #44]	; 0x2c
 8002826:	edc3 7a16 	vstrle	s15, [r3, #88]	; 0x58
	}
}
 800282a:	4770      	bx	lr
 800282c:	42fe0000 	.word	0x42fe0000
 8002830:	20003d34 	.word	0x20003d34
 8002834:	461c4000 	.word	0x461c4000

08002838 <drifter_newSegment>:
/*-------------------------------------------------------------------------------------------*/
void drifter_newSegment(Drifter_t *d) //
{
	d->n = 0;
	d->initial = d->final;
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 8002838:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002898 <drifter_newSegment+0x60>
 800283c:	ed90 7a00 	vldr	s14, [r0]
 8002840:	ee87 0a87 	vdiv.f32	s0, s15, s14
	d->n = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	6183      	str	r3, [r0, #24]
	d->initial = d->final;
 8002848:	6a03      	ldr	r3, [r0, #32]
 800284a:	61c3      	str	r3, [r0, #28]
{
 800284c:	b510      	push	{r4, lr}
 800284e:	4604      	mov	r4, r0
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 8002850:	ed90 7a01 	vldr	s14, [r0, #4]
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 8002854:	ed80 0a03 	vstr	s0, [r0, #12]
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 8002858:	eec7 0a87 	vdiv.f32	s1, s15, s14
 800285c:	edc0 0a04 	vstr	s1, [r0, #16]
	d->length = frand_a_b(d->minLength,d->maxLength);
 8002860:	f001 f896 	bl	8003990 <frand_a_b>
 8002864:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	d->final = frand_a_b(-1, 1);
 8002868:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	d->length = frand_a_b(d->minLength,d->maxLength);
 800286c:	ed84 0a05 	vstr	s0, [r4, #20]
	d->final = frand_a_b(-1, 1);
 8002870:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002874:	f001 f88c 	bl	8003990 <frand_a_b>
	d->slope = (d->final - d->initial) / d->length ;
 8002878:	edd4 7a07 	vldr	s15, [r4, #28]
	d->final = frand_a_b(-1, 1);
 800287c:	ed84 0a08 	vstr	s0, [r4, #32]
	d->slope = (d->final - d->initial) / d->length ;
 8002880:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002884:	edd4 7a05 	vldr	s15, [r4, #20]
 8002888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288c:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8002890:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 8002894:	bd10      	pop	{r4, pc}
 8002896:	bf00      	nop
 8002898:	46ac4400 	.word	0x46ac4400

0800289c <drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float drifter_nextSample(Drifter_t *d) //
{
	d->out = d->gain * (d->slope * d->n + d->initial);
 800289c:	edd0 7a06 	vldr	s15, [r0, #24]
 80028a0:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
	(d->n)++;
 80028a4:	6983      	ldr	r3, [r0, #24]
	if (d->n >= d->length)
 80028a6:	6942      	ldr	r2, [r0, #20]
	d->out = d->gain * (d->slope * d->n + d->initial);
 80028a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028ac:	edd0 7a07 	vldr	s15, [r0, #28]
 80028b0:	eee6 7a87 	vfma.f32	s15, s13, s14
	(d->n)++;
 80028b4:	3301      	adds	r3, #1
	if (d->n >= d->length)
 80028b6:	4293      	cmp	r3, r2
	d->out = d->gain * (d->slope * d->n + d->initial);
 80028b8:	ed90 7a02 	vldr	s14, [r0, #8]
	(d->n)++;
 80028bc:	6183      	str	r3, [r0, #24]
	d->out = d->gain * (d->slope * d->n + d->initial);
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 80028c2:	b510      	push	{r4, lr}
	d->out = d->gain * (d->slope * d->n + d->initial);
 80028c4:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
{
 80028c8:	4604      	mov	r4, r0
	if (d->n >= d->length)
 80028ca:	d301      	bcc.n	80028d0 <drifter_nextSample+0x34>
		{
			drifter_newSegment(d);
 80028cc:	f7ff ffb4 	bl	8002838 <drifter_newSegment>
		}
	return d->out;
}
 80028d0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80028d4:	bd10      	pop	{r4, pc}
	...

080028d8 <d1_drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float d1_drifter_nextSample(void) //
{
	return drifter_nextSample(&d1);
 80028d8:	4801      	ldr	r0, [pc, #4]	; (80028e0 <d1_drifter_nextSample+0x8>)
 80028da:	f7ff bfdf 	b.w	800289c <drifter_nextSample>
 80028de:	bf00      	nop
 80028e0:	20003d8c 	.word	0x20003d8c

080028e4 <d2_drifter_nextSample>:
}
/*-------------------------------------------------------------------------------------------*/
float d2_drifter_nextSample(void) //
{
	return drifter_nextSample(&d2);
 80028e4:	4801      	ldr	r0, [pc, #4]	; (80028ec <d2_drifter_nextSample+0x8>)
 80028e6:	f7ff bfd9 	b.w	800289c <drifter_nextSample>
 80028ea:	bf00      	nop
 80028ec:	20003d60 	.word	0x20003d60

080028f0 <drifter_prepare>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_prepare(Drifter_t *d)
{
	d->final = 0;
 80028f0:	2200      	movs	r2, #0
 80028f2:	6202      	str	r2, [r0, #32]
	d->fmax = 4;
 80028f4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80028f8:	6002      	str	r2, [r0, #0]
	d->fmin = 2;
 80028fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028fe:	6042      	str	r2, [r0, #4]
	d->gain = .01f;
 8002900:	4a01      	ldr	r2, [pc, #4]	; (8002908 <drifter_prepare+0x18>)
 8002902:	6082      	str	r2, [r0, #8]

	drifter_newSegment(d);
 8002904:	f7ff bf98 	b.w	8002838 <drifter_newSegment>
 8002908:	3c23d70a 	.word	0x3c23d70a

0800290c <drifter_init>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_init(void)
{
 800290c:	b510      	push	{r4, lr}
	drifter_prepare(&d1);
 800290e:	4c07      	ldr	r4, [pc, #28]	; (800292c <drifter_init+0x20>)
 8002910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002914:	f7ff ffec 	bl	80028f0 <drifter_prepare>
	drifter_prepare(&d2);
 8002918:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800291c:	f7ff ffe8 	bl	80028f0 <drifter_prepare>
	drifter_prepare(&d3);
 8002920:	4620      	mov	r0, r4
}
 8002922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	drifter_prepare(&d3);
 8002926:	f7ff bfe3 	b.w	80028f0 <drifter_prepare>
 800292a:	bf00      	nop
 800292c:	20003d34 	.word	0x20003d34

08002930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002930:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002932:	2410      	movs	r4, #16
{
 8002934:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002936:	4622      	mov	r2, r4
 8002938:	2100      	movs	r1, #0
 800293a:	a80e      	add	r0, sp, #56	; 0x38
 800293c:	f005 fb97 	bl	800806e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002940:	2214      	movs	r2, #20
 8002942:	2100      	movs	r1, #0
 8002944:	a807      	add	r0, sp, #28
 8002946:	f005 fb92 	bl	800806e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800294a:	4622      	mov	r2, r4
 800294c:	2100      	movs	r1, #0
 800294e:	a803      	add	r0, sp, #12
 8002950:	f005 fb8d 	bl	800806e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002954:	2400      	movs	r4, #0
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <SystemClock_Config+0xac>)
 8002958:	9401      	str	r4, [sp, #4]
 800295a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <SystemClock_Config+0xb0>)
 800296e:	9402      	str	r4, [sp, #8]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002982:	2601      	movs	r6, #1
 8002984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002988:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800298a:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800298e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002992:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002994:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002998:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800299c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a0:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029a2:	2307      	movs	r3, #7
 80029a4:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029a6:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a8:	f003 fa9e 	bl	8005ee8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ac:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ae:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029b2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80029b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ba:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029be:	a807      	add	r0, sp, #28
 80029c0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029c4:	f003 fc64 	bl	8006290 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 144;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 80029c8:	2303      	movs	r3, #3
 80029ca:	2090      	movs	r0, #144	; 0x90
 80029cc:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d0:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80029d2:	9603      	str	r6, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d4:	f003 fd16 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80029d8:	b018      	add	sp, #96	; 0x60
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40007000 	.word	0x40007000

080029e4 <main>:
{
 80029e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80029e8:	b097      	sub	sp, #92	; 0x5c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	2400      	movs	r4, #0
 80029ec:	4e9c      	ldr	r6, [pc, #624]	; (8002c60 <main+0x27c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80029ee:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 8002c98 <main+0x2b4>
  hi2c2.Instance = I2C2;
 80029f2:	4f9c      	ldr	r7, [pc, #624]	; (8002c64 <main+0x280>)
  huart1.Instance = USART1;
 80029f4:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8002c9c <main+0x2b8>
  HAL_Init();
 80029f8:	f002 fa4e 	bl	8004e98 <HAL_Init>
  SystemClock_Config();
 80029fc:	f7ff ff98 	bl	8002930 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	2214      	movs	r2, #20
 8002a02:	2100      	movs	r1, #0
 8002a04:	a80d      	add	r0, sp, #52	; 0x34
 8002a06:	f005 fb32 	bl	800806e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0a:	9405      	str	r4, [sp, #20]
 8002a0c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	6333      	str	r3, [r6, #48]	; 0x30
 8002a14:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	9305      	str	r3, [sp, #20]
 8002a1c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1e:	9406      	str	r4, [sp, #24]
 8002a20:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	6333      	str	r3, [r6, #48]	; 0x30
 8002a28:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	9306      	str	r3, [sp, #24]
 8002a30:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a32:	9407      	str	r4, [sp, #28]
 8002a34:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6333      	str	r3, [r6, #48]	; 0x30
 8002a3c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	9307      	str	r3, [sp, #28]
 8002a44:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a46:	9408      	str	r4, [sp, #32]
 8002a48:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	6333      	str	r3, [r6, #48]	; 0x30
 8002a50:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002a58:	4622      	mov	r2, r4
 8002a5a:	210c      	movs	r1, #12
 8002a5c:	4658      	mov	r0, fp
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002a60:	f002 fd1c 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8002a64:	4b80      	ldr	r3, [pc, #512]	; (8002c68 <main+0x284>)
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	f002 fd15 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, GPIO_PIN_RESET);
 8002a72:	4622      	mov	r2, r4
 8002a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a78:	487c      	ldr	r0, [pc, #496]	; (8002c6c <main+0x288>)
 8002a7a:	f002 fd0f 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_A_Pin SW1_B_Pin */
  GPIO_InitStruct.Pin = SW1_A_Pin|SW1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a80:	487a      	ldr	r0, [pc, #488]	; (8002c6c <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a82:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a86:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8a:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a8c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a90:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a94:	f002 fc22 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_BTN_Pin FIRE_BTN_Pin */
  GPIO_InitStruct.Pin = SW1_BTN_Pin|FIRE_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a98:	4a76      	ldr	r2, [pc, #472]	; (8002c74 <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9a:	4874      	ldr	r0, [pc, #464]	; (8002c6c <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a9c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002aa0:	f248 0180 	movw	r1, #32896	; 0x8080
 8002aa4:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa8:	a90d      	add	r1, sp, #52	; 0x34
 8002aaa:	f002 fc17 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8002aae:	250c      	movs	r5, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	a90d      	add	r1, sp, #52	; 0x34
 8002ab2:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	e9cd 590d 	strd	r5, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abc:	f002 fc0e 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002ac0:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	e9cd 390d 	strd	r3, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002ac6:	9b01      	ldr	r3, [sp, #4]
 8002ac8:	a90d      	add	r1, sp, #52	; 0x34
 8002aca:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f002 fc04 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_LED_Pin */
  GPIO_InitStruct.Pin = FIRE_LED_Pin;
 8002ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	a90d      	add	r1, sp, #52	; 0x34
 8002ada:	4864      	ldr	r0, [pc, #400]	; (8002c6c <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002adc:	e9cd 290d 	strd	r2, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f002 fbfa 	bl	80052dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ae8:	4622      	mov	r2, r4
 8002aea:	4621      	mov	r1, r4
 8002aec:	2017      	movs	r0, #23
 8002aee:	f002 fa11 	bl	8004f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002af2:	2017      	movs	r0, #23
 8002af4:	f002 fa42 	bl	8004f7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002af8:	4622      	mov	r2, r4
 8002afa:	4621      	mov	r1, r4
 8002afc:	2028      	movs	r0, #40	; 0x28
 8002afe:	f002 fa09 	bl	8004f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b02:	2028      	movs	r0, #40	; 0x28
 8002b04:	f002 fa3a 	bl	8004f7c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b08:	9404      	str	r4, [sp, #16]
 8002b0a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002b0c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002b10:	6332      	str	r2, [r6, #48]	; 0x30
 8002b12:	6b32      	ldr	r2, [r6, #48]	; 0x30
  hi2s2.Instance = SPI2;
 8002b14:	4e58      	ldr	r6, [pc, #352]	; (8002c78 <main+0x294>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b16:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b1a:	9204      	str	r2, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b1c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b1e:	9a04      	ldr	r2, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b20:	200f      	movs	r0, #15
 8002b22:	4622      	mov	r2, r4
 8002b24:	f002 f9f6 	bl	8004f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002b28:	200f      	movs	r0, #15
 8002b2a:	f002 fa27 	bl	8004f7c <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 100000;
 8002b2e:	4853      	ldr	r0, [pc, #332]	; (8002c7c <main+0x298>)
 8002b30:	4a53      	ldr	r2, [pc, #332]	; (8002c80 <main+0x29c>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b32:	623c      	str	r4, [r7, #32]
  hi2c2.Init.ClockSpeed = 100000;
 8002b34:	e9c7 0200 	strd	r0, r2, [r7]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b3c:	4638      	mov	r0, r7
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b3e:	e9c7 2404 	strd	r2, r4, [r7, #16]
  hi2c2.Init.OwnAddress1 = 0;
 8002b42:	e9c7 4402 	strd	r4, r4, [r7, #8]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b46:	e9c7 4406 	strd	r4, r4, [r7, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b4a:	f002 fd8b 	bl	8005664 <HAL_I2C_Init>
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002b4e:	4a4d      	ldr	r2, [pc, #308]	; (8002c84 <main+0x2a0>)
 8002b50:	f44f 7a00 	mov.w	sl, #512	; 0x200
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002b54:	f64b 3180 	movw	r1, #48000	; 0xbb80
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002b58:	4630      	mov	r0, r6
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002b5a:	e9c6 2a00 	strd	r2, sl, [r6]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002b5e:	f8c6 a010 	str.w	sl, [r6, #16]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002b62:	e9c6 1405 	strd	r1, r4, [r6, #20]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002b66:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8002b6a:	e9c6 4907 	strd	r4, r9, [r6, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002b6e:	f002 fef9 	bl	8005964 <HAL_I2S_Init>
  huart1.Init.BaudRate = 115200;
 8002b72:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8002ca0 <main+0x2bc>
 8002b76:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b7a:	4640      	mov	r0, r8
  huart1.Init.BaudRate = 115200;
 8002b7c:	e9c8 c100 	strd	ip, r1, [r8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b80:	e9c8 4504 	strd	r4, r5, [r8, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b84:	e9c8 4402 	strd	r4, r4, [r8, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b88:	e9c8 4406 	strd	r4, r4, [r8, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b8c:	f003 ffec 	bl	8006b68 <HAL_UART_Init>
  hrng.Instance = RNG;
 8002b90:	483d      	ldr	r0, [pc, #244]	; (8002c88 <main+0x2a4>)
 8002b92:	493e      	ldr	r1, [pc, #248]	; (8002c8c <main+0x2a8>)
  hspi3.Instance = SPI3;
 8002b94:	4d3e      	ldr	r5, [pc, #248]	; (8002c90 <main+0x2ac>)
  hrng.Instance = RNG;
 8002b96:	6001      	str	r1, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b98:	f003 fcfa 	bl	8006590 <HAL_RNG_Init>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b9c:	f8df e104 	ldr.w	lr, [pc, #260]	; 8002ca4 <main+0x2c0>
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ba0:	f8c5 a018 	str.w	sl, [r5, #24]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ba4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ba8:	e9c5 e100 	strd	lr, r1, [r5]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bac:	f04f 0a18 	mov.w	sl, #24
  hspi3.Init.CRCPolynomial = 10;
 8002bb0:	210a      	movs	r1, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002bb2:	4628      	mov	r0, r5
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bb4:	e9c5 a407 	strd	sl, r4, [r5, #28]
  hspi3.Init.CRCPolynomial = 10;
 8002bb8:	62e9      	str	r1, [r5, #44]	; 0x2c
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bba:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bbe:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc2:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002bc6:	f003 fd63 	bl	8006690 <HAL_SPI_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bca:	4652      	mov	r2, sl
 8002bcc:	4621      	mov	r1, r4
 8002bce:	a810      	add	r0, sp, #64	; 0x40
 8002bd0:	f005 fa4d 	bl	800806e <memset>
  htim1.Instance = TIM1;
 8002bd4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8002ca8 <main+0x2c4>
 8002bd8:	492e      	ldr	r1, [pc, #184]	; (8002c94 <main+0x2b0>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bda:	f8ca 4008 	str.w	r4, [sl, #8]
  htim1.Init.Prescaler = 0;
 8002bde:	e9ca 1400 	strd	r1, r4, [sl]
  htim1.Init.Period = 65535;
 8002be2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002be6:	2302      	movs	r3, #2
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be8:	e9ca 1403 	strd	r1, r4, [sl, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002bec:	2103      	movs	r1, #3
 8002bee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002bf2:	4650      	mov	r0, sl
 8002bf4:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bf6:	e9cd 3912 	strd	r3, r9, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfe:	e9ca 4405 	strd	r4, r4, [sl, #20]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c02:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002c06:	f003 feb1 	bl	800696c <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c0a:	a909      	add	r1, sp, #36	; 0x24
 8002c0c:	4650      	mov	r0, sl
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c12:	f003 fef7 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8002c16:	213c      	movs	r1, #60	; 0x3c
 8002c18:	4650      	mov	r0, sl
 8002c1a:	f003 fe1e 	bl	800685a <HAL_TIM_Encoder_Start>
  Synth_Init();
 8002c1e:	f001 fb43 	bl	80042a8 <Synth_Init>
  WM8978_Init();
 8002c22:	f002 f88b 	bl	8004d3c <WM8978_Init>
  lcd.CEPIN = LCD_CS_Pin;
 8002c26:	2204      	movs	r2, #4
  lcd.BLPORT = LCD_BL_GPIO_Port;
 8002c28:	9b01      	ldr	r3, [sp, #4]
  lcd.CEPIN = LCD_CS_Pin;
 8002c2a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  lcd.DCPIN = LCD_DC_Pin;
 8002c2e:	2208      	movs	r2, #8
 8002c30:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  lcd.BLPORT = LCD_BL_GPIO_Port;
 8002c34:	9311      	str	r3, [sp, #68]	; 0x44
  maincpp(&comms, &enc, &lcd);    /// we can't use c++ reference here
 8002c36:	aa0d      	add	r2, sp, #52	; 0x34
  lcd.BLPIN = LCD_BL_Pin;
 8002c38:	f04f 0302 	mov.w	r3, #2
  maincpp(&comms, &enc, &lcd);    /// we can't use c++ reference here
 8002c3c:	a903      	add	r1, sp, #12
 8002c3e:	a809      	add	r0, sp, #36	; 0x24
  comms.i2s = &hi2s2;
 8002c40:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
  comms.uart = &huart1;
 8002c44:	e9cd 580b 	strd	r5, r8, [sp, #44]	; 0x2c
  enc.tim1 = &htim1;
 8002c48:	f8cd a00c 	str.w	sl, [sp, #12]
  lcd.CEPORT = LCD_CS_GPIO_Port;
 8002c4c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  lcd.DCPORT = LCD_DC_GPIO_Port;
 8002c50:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  lcd.BLPIN = LCD_BL_Pin;
 8002c54:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  lcd.SPICH = &hspi3;
 8002c58:	9513      	str	r5, [sp, #76]	; 0x4c
  maincpp(&comms, &enc, &lcd);    /// we can't use c++ reference here
 8002c5a:	f7fe f9ed 	bl	8001038 <maincpp>
 8002c5e:	e7fe      	b.n	8002c5e <main+0x27a>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	20013a5c 	.word	0x20013a5c
 8002c68:	40020400 	.word	0x40020400
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	10110000 	.word	0x10110000
 8002c74:	10310000 	.word	0x10310000
 8002c78:	20013bf8 	.word	0x20013bf8
 8002c7c:	40005800 	.word	0x40005800
 8002c80:	000186a0 	.word	0x000186a0
 8002c84:	40003800 	.word	0x40003800
 8002c88:	20013b88 	.word	0x20013b88
 8002c8c:	50060800 	.word	0x50060800
 8002c90:	20013ab0 	.word	0x20013ab0
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	20013b08 	.word	0x20013b08
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	40003c00 	.word	0x40003c00
 8002ca8:	20013b48 	.word	0x20013b48

08002cac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cac:	4770      	bx	lr
	...

08002cb0 <Lin2Exp>:
}
//------------------------------------------------------------------------------------
// input val in 0 ... 127
// output is an exponential between min and max
float	Lin2Exp(uint8_t val, float min, float max)
{
 8002cb0:	b508      	push	{r3, lr}
	return min * powf(max / min, val / MIDI_MAX);
 8002cb2:	ee07 0a90 	vmov	s15, r0
{
 8002cb6:	ed2d 8b02 	vpush	{d8}
 8002cba:	eeb0 8a40 	vmov.f32	s16, s0
	return min * powf(max / min, val / MIDI_MAX);
 8002cbe:	ee80 0a88 	vdiv.f32	s0, s1, s16
 8002cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc6:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002cdc <Lin2Exp+0x2c>
 8002cca:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8002cce:	f004 f897 	bl	8006e00 <powf>
}
 8002cd2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002cd6:	ecbd 8b02 	vpop	{d8}
 8002cda:	bd08      	pop	{r3, pc}
 8002cdc:	42fe0000 	.word	0x42fe0000

08002ce0 <tanhXdX>:
//------------------------------------------------------------------------------------

float tanhXdX(float x)
{
	float a = x*x;
 8002ce0:	ee20 0a00 	vmul.f32	s0, s0, s0
	// IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)
	x = ((a + 105)*a + 945) / ((15*a + 420)*a + 945);
 8002ce4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002d10 <tanhXdX+0x30>
 8002ce8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002d14 <tanhXdX+0x34>
 8002cec:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002cf0:	eef0 6a67 	vmov.f32	s13, s15
 8002cf4:	eee7 6a00 	vfma.f32	s13, s14, s0
 8002cf8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002d18 <tanhXdX+0x38>
 8002cfc:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
 8002d00:	eea0 7a06 	vfma.f32	s14, s0, s12
 8002d04:	eee7 7a00 	vfma.f32	s15, s14, s0
	return x;
}
 8002d08:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	42d20000 	.word	0x42d20000
 8002d14:	446c4000 	.word	0x446c4000
 8002d18:	43d20000 	.word	0x43d20000

08002d1c <fastTanh>:

//------------------------------------------------------------------------------------
float fastTanh(float var)
{
	if(var < -1.95f)     return -1.0f;
 8002d1c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002d5c <fastTanh+0x40>
 8002d20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	d411      	bmi.n	8002d4e <fastTanh+0x32>
	else if(var > 1.95f) return  1.0f;
 8002d2a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002d60 <fastTanh+0x44>
 8002d2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d36:	dc0d      	bgt.n	8002d54 <fastTanh+0x38>
	else return  4.15f*var/(4.29f+var*var);
 8002d38:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002d64 <fastTanh+0x48>
 8002d3c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002d68 <fastTanh+0x4c>
 8002d40:	eee0 7a00 	vfma.f32	s15, s0, s0
 8002d44:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002d48:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8002d4c:	4770      	bx	lr
	if(var < -1.95f)     return -1.0f;
 8002d4e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002d52:	4770      	bx	lr
	else if(var > 1.95f) return  1.0f;
 8002d54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	bff9999a 	.word	0xbff9999a
 8002d60:	3ff9999a 	.word	0x3ff9999a
 8002d64:	408947ae 	.word	0x408947ae
 8002d68:	4084cccd 	.word	0x4084cccd

08002d6c <softClipTwo>:
//------------------------------------------------------------------------------------
float 	softClipTwo(float in)
{
 8002d6c:	eef0 5a40 	vmov.f32	s11, s0
 8002d70:	b508      	push	{r3, lr}
	return in * tanhXdX(0.5*in);
 8002d72:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002d76:	ee25 0a80 	vmul.f32	s0, s11, s0
 8002d7a:	f7ff ffb1 	bl	8002ce0 <tanhXdX>
}
 8002d7e:	ee20 0a25 	vmul.f32	s0, s0, s11
 8002d82:	bd08      	pop	{r3, pc}

08002d84 <fastTan>:
//------------------------------------------------------------------------------------
float 	fastTan(float x)
{
	float A = -15*x+x*x*x;
 8002d84:	ee20 7a00 	vmul.f32	s14, s0, s0
	float B = 3*(-5+2*x*x);
 8002d88:	ee70 6a00 	vadd.f32	s13, s0, s0
	float A = -15*x+x*x*x;
 8002d8c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8002d90:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
 8002d94:	eea0 7a27 	vfma.f32	s14, s0, s15
	float B = 3*(-5+2*x*x);
 8002d98:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 8002d9c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8002da0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002da4:	ee27 0a80 	vmul.f32	s0, s15, s0
	return A/B;
}
 8002da8:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8002dac:	4770      	bx	lr

08002dae <osc_init>:
osc_init(Oscillator_t * op, float_t amp, float_t freq)
{
	op->amp = amp;
	op->last_amp = amp;
	op->freq = freq;
	op->phase = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60c3      	str	r3, [r0, #12]
	op->out = 0;
 8002db2:	61c3      	str	r3, [r0, #28]
	op->modInd = 0;
 8002db4:	6143      	str	r3, [r0, #20]
	op->mul = 1;
 8002db6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	op->amp = amp;
 8002dba:	ed80 0a00 	vstr	s0, [r0]
	op->last_amp = amp;
 8002dbe:	ed80 0a01 	vstr	s0, [r0, #4]
	op->freq = freq;
 8002dc2:	edc0 0a02 	vstr	s1, [r0, #8]
	op->mul = 1;
 8002dc6:	6183      	str	r3, [r0, #24]
}
 8002dc8:	4770      	bx	lr
	...

08002dcc <Drifter_centralFreq_set>:
	op->freq = f;
}

/*---------------------------------------------------------------*/
void	Drifter_centralFreq_set(uint8_t val)
{
 8002dcc:	b508      	push	{r3, lr}
	centralFreq = Lin2Exp(val, 1, 6000);
 8002dce:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002de4 <Drifter_centralFreq_set+0x18>
 8002dd2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002dd6:	f7ff ff6b 	bl	8002cb0 <Lin2Exp>
 8002dda:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <Drifter_centralFreq_set+0x1c>)
 8002ddc:	ed83 0a00 	vstr	s0, [r3]
}
 8002de0:	bd08      	pop	{r3, pc}
 8002de2:	bf00      	nop
 8002de4:	45bb8000 	.word	0x45bb8000
 8002de8:	20000010 	.word	0x20000010

08002dec <FM_op_freq_set>:
}


/*---------------------------------------------------------------*/
void FM_op_freq_set(Oscillator_t *op, uint8_t val)
{
 8002dec:	b510      	push	{r4, lr}
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 8002dee:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002e04 <FM_op_freq_set+0x18>
{
 8002df2:	4604      	mov	r4, r0
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 8002df4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002df8:	4608      	mov	r0, r1
 8002dfa:	f7ff ff59 	bl	8002cb0 <Lin2Exp>
 8002dfe:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	45fa0000 	.word	0x45fa0000

08002e08 <FM_op_modInd_set>:
/*-------------------------------------------------------*/
void FM_op_modInd_set(Oscillator_t *op, uint8_t val)
{
	op->modInd = (1.4f * val / MIDI_MAX) * (1.4f * val / MIDI_MAX);
 8002e08:	ee07 1a90 	vmov	s15, r1
 8002e0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e10:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002e2c <FM_op_modInd_set+0x24>
 8002e14:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002e30 <FM_op_modInd_set+0x28>
 8002e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e24:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	3fb33333 	.word	0x3fb33333
 8002e30:	42fe0000 	.word	0x42fe0000

08002e34 <OpSampleCompute0>:

	return  0.5f * (op1.out + op3.out);
}
/*----------------------------------------------------------------------------------------------*/
float_t OpSampleCompute0(Oscillator_t * op) // accurate sine
{
 8002e34:	b510      	push	{r4, lr}
 8002e36:	ed2d 8b02 	vpush	{d8}
	float_t z;


	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8002e3a:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002e84 <OpSampleCompute0+0x50>
{
 8002e3e:	4604      	mov	r4, r0
	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8002e40:	ed94 8a03 	vldr	s16, [r4, #12]
 8002e44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4c:	da14      	bge.n	8002e78 <OpSampleCompute0+0x44>
		op->phase -= _2PI;

	z = sinf(op->phase);
 8002e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8002e52:	f003 ff93 	bl	8006d7c <sinf>
	op->out = op->amp*z;
 8002e56:	edd4 7a00 	vldr	s15, [r4]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002e5a:	ed94 7a02 	vldr	s14, [r4, #8]
	op->out = op->amp*z;
 8002e5e:	ee20 0a27 	vmul.f32	s0, s0, s15
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002e62:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002e88 <OpSampleCompute0+0x54>
	op->out = op->amp*z;
 8002e66:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002e6a:	eea7 8a27 	vfma.f32	s16, s14, s15
 8002e6e:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 8002e72:	ecbd 8b02 	vpop	{d8}
 8002e76:	bd10      	pop	{r4, pc}
		op->phase -= _2PI;
 8002e78:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002e7c:	ed84 8a03 	vstr	s16, [r4, #12]
 8002e80:	e7de      	b.n	8002e40 <OpSampleCompute0+0xc>
 8002e82:	bf00      	nop
 8002e84:	40c90fdb 	.word	0x40c90fdb
 8002e88:	39156592 	.word	0x39156592

08002e8c <Osc_WT_SINE_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_WT_SINE_SampleCompute(Oscillator_t * op) // basic wave table sine
{
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	ed2d 8b02 	vpush	{d8}
 8002e92:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f04 <Osc_WT_SINE_SampleCompute+0x78>
 8002e96:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002e98:	edd4 7a03 	vldr	s15, [r4, #12]
 8002e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	d424      	bmi.n	8002ef0 <Osc_WT_SINE_SampleCompute+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002ea6:	edd4 7a03 	vldr	s15, [r4, #12]
 8002eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	da22      	bge.n	8002efa <Osc_WT_SINE_SampleCompute+0x6e>
		op->phase -= _2PI;

	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002eb4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002f08 <Osc_WT_SINE_SampleCompute+0x7c>
 8002eb8:	ed94 8a00 	vldr	s16, [r4]
 8002ebc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002ec0:	f003 fec2 	bl	8006c48 <lrintf>
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <Osc_WT_SINE_SampleCompute+0x80>)
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002ec6:	edd4 7a03 	vldr	s15, [r4, #12]
 8002eca:	edd4 6a02 	vldr	s13, [r4, #8]
 8002ece:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002f10 <Osc_WT_SINE_SampleCompute+0x84>
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002ed2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002ed6:	ed90 0a00 	vldr	s0, [r0]
 8002eda:	ee28 0a00 	vmul.f32	s0, s16, s0

	return op->out;
}
 8002ede:	ecbd 8b02 	vpop	{d8}
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002ee2:	eee6 7a87 	vfma.f32	s15, s13, s14
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002ee6:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002eea:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8002eee:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8002ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef4:	edc4 7a03 	vstr	s15, [r4, #12]
 8002ef8:	e7ce      	b.n	8002e98 <Osc_WT_SINE_SampleCompute+0xc>
		op->phase -= _2PI;
 8002efa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002efe:	edc4 7a03 	vstr	s15, [r4, #12]
 8002f02:	e7d0      	b.n	8002ea6 <Osc_WT_SINE_SampleCompute+0x1a>
 8002f04:	40c90fdb 	.word	0x40c90fdb
 8002f08:	4322f983 	.word	0x4322f983
 8002f0c:	08015de8 	.word	0x08015de8
 8002f10:	39156592 	.word	0x39156592

08002f14 <Osc_FM_sine_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_FM_sine_SampleCompute(Oscillator_t * op, float FMinput) // basic wave table sine with FM
{

	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8002f14:	edd0 7a05 	vldr	s15, [r0, #20]
 8002f18:	ed90 7a02 	vldr	s14, [r0, #8]
 8002f1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002f20:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002f98 <Osc_FM_sine_SampleCompute+0x84>
 8002f24:	eea7 0a27 	vfma.f32	s0, s14, s15
{
 8002f28:	b510      	push	{r4, lr}
	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8002f2a:	edd0 7a03 	vldr	s15, [r0, #12]
 8002f2e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002f9c <Osc_FM_sine_SampleCompute+0x88>
 8002f32:	ee37 0a80 	vadd.f32	s0, s15, s0
{
 8002f36:	ed2d 8b02 	vpush	{d8}
 8002f3a:	4604      	mov	r4, r0
	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8002f3c:	ed80 0a03 	vstr	s0, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002f40:	edd4 7a03 	vldr	s15, [r4, #12]
 8002f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	d41a      	bmi.n	8002f84 <Osc_FM_sine_SampleCompute+0x70>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002f4e:	edd4 7a03 	vldr	s15, [r4, #12]
 8002f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5a:	da18      	bge.n	8002f8e <Osc_FM_sine_SampleCompute+0x7a>
		op->phase -= _2PI;
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002f5c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002fa0 <Osc_FM_sine_SampleCompute+0x8c>
 8002f60:	ed94 8a00 	vldr	s16, [r4]
 8002f64:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002f68:	f003 fe6e 	bl	8006c48 <lrintf>
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <Osc_FM_sine_SampleCompute+0x90>)
 8002f6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002f72:	ed90 0a00 	vldr	s0, [r0]
 8002f76:	ee28 0a00 	vmul.f32	s0, s16, s0
	return op->out;
}
 8002f7a:	ecbd 8b02 	vpop	{d8}
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002f7e:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8002f82:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8002f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f88:	edc4 7a03 	vstr	s15, [r4, #12]
 8002f8c:	e7d8      	b.n	8002f40 <Osc_FM_sine_SampleCompute+0x2c>
		op->phase -= _2PI;
 8002f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f92:	edc4 7a03 	vstr	s15, [r4, #12]
 8002f96:	e7da      	b.n	8002f4e <Osc_FM_sine_SampleCompute+0x3a>
 8002f98:	39156592 	.word	0x39156592
 8002f9c:	40c90fdb 	.word	0x40c90fdb
 8002fa0:	4322f983 	.word	0x4322f983
 8002fa4:	08015de8 	.word	0x08015de8

08002fa8 <FM2_sampleCompute>:
{
 8002fa8:	b510      	push	{r4, lr}
	op1.freq = frq;
 8002faa:	4c1c      	ldr	r4, [pc, #112]	; (800301c <FM2_sampleCompute+0x74>)
	op2.freq = op2.mul * frq;
 8002fac:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
	op1.freq = frq;
 8002fb0:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
	op2.freq = op2.mul * frq;
 8002fb4:	ee67 7a80 	vmul.f32	s15, s15, s0
{
 8002fb8:	ed2d 8b02 	vpush	{d8}
	op2.freq = op2.mul * frq;
 8002fbc:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
	op3.freq = op3.mul * frq;
 8002fc0:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 8002fc4:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8003020 <FM2_sampleCompute+0x78>
	op3.freq = op3.mul * frq;
 8002fc8:	ee67 7a80 	vmul.f32	s15, s15, s0
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 8002fcc:	f104 0040 	add.w	r0, r4, #64	; 0x40
	op3.freq = op3.mul * frq;
 8002fd0:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	op4.freq = op4.mul * frq;
 8002fd4:	edd4 7a06 	vldr	s15, [r4, #24]
 8002fd8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002fdc:	ed84 0a02 	vstr	s0, [r4, #8]
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 8002fe0:	eeb0 0a48 	vmov.f32	s0, s16
 8002fe4:	f7ff ff96 	bl	8002f14 <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op1, in);
 8002fe8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8002fec:	f7ff ff92 	bl	8002f14 <Osc_FM_sine_SampleCompute>
	in = Osc_FM_sine_SampleCompute(&op4, 0);
 8002ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7ff ff8d 	bl	8002f14 <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op3, in);
 8002ffa:	f104 0020 	add.w	r0, r4, #32
 8002ffe:	f7ff ff89 	bl	8002f14 <Osc_FM_sine_SampleCompute>
}
 8003002:	ecbd 8b02 	vpop	{d8}
	return  0.5f * (op1.out + op3.out);
 8003006:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 800300a:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 800300e:	ee77 7a80 	vadd.f32	s15, s15, s0
}
 8003012:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003016:	ee27 0a80 	vmul.f32	s0, s15, s0
 800301a:	bd10      	pop	{r4, pc}
 800301c:	20003db8 	.word	0x20003db8
 8003020:	00000000 	.word	0x00000000

08003024 <OpSampleCompute7bis>:
/*-------------------------------------------------------*/
float_t OpSampleCompute7bis(Oscillator_t * op) // basic wave table positive sine : 0 < output < op.amp
{
 8003024:	b510      	push	{r4, lr}
 8003026:	ed2d 8b02 	vpush	{d8}
 800302a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80030ac <OpSampleCompute7bis+0x88>
 800302e:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003030:	edd4 7a03 	vldr	s15, [r4, #12]
 8003034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	d42c      	bmi.n	8003098 <OpSampleCompute7bis+0x74>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800303e:	edd4 7a03 	vldr	s15, [r4, #12]
 8003042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	da2a      	bge.n	80030a2 <OpSampleCompute7bis+0x7e>
		op->phase -= _2PI;

	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 800304c:	ed94 0a00 	vldr	s0, [r4]
 8003050:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8003054:	ee20 8a08 	vmul.f32	s16, s0, s16
 8003058:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80030b0 <OpSampleCompute7bis+0x8c>
 800305c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003060:	f003 fdf2 	bl	8006c48 <lrintf>
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <OpSampleCompute7bis+0x90>)
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003066:	edd4 6a02 	vldr	s13, [r4, #8]
 800306a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80030b8 <OpSampleCompute7bis+0x94>
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 800306e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003072:	ed90 0a00 	vldr	s0, [r0]
 8003076:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800307a:	ee30 0a27 	vadd.f32	s0, s0, s15
	op->phase += _2PI * Ts * op->freq; // increment phase
 800307e:	edd4 7a03 	vldr	s15, [r4, #12]
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8003082:	ee20 0a08 	vmul.f32	s0, s0, s16

	return op->out;
}
 8003086:	ecbd 8b02 	vpop	{d8}
	op->phase += _2PI * Ts * op->freq; // increment phase
 800308a:	eee6 7a87 	vfma.f32	s15, s13, s14
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 800308e:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003092:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8003096:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8003098:	ee77 7a87 	vadd.f32	s15, s15, s14
 800309c:	edc4 7a03 	vstr	s15, [r4, #12]
 80030a0:	e7c6      	b.n	8003030 <OpSampleCompute7bis+0xc>
		op->phase -= _2PI;
 80030a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030a6:	edc4 7a03 	vstr	s15, [r4, #12]
 80030aa:	e7c8      	b.n	800303e <OpSampleCompute7bis+0x1a>
 80030ac:	40c90fdb 	.word	0x40c90fdb
 80030b0:	4322f983 	.word	0x4322f983
 80030b4:	08015de8 	.word	0x08015de8
 80030b8:	39156592 	.word	0x39156592

080030bc <OpSampleCompute1>:
/*-------------------------------------------------------*/
float_t OpSampleCompute1(Oscillator_t * op) // basic sawtooth^2
{
 80030bc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8003148 <OpSampleCompute1+0x8c>
	while (op->phase < 0) // keep phase in [0, 2pi]
 80030c0:	edd0 7a03 	vldr	s15, [r0, #12]
 80030c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	d431      	bmi.n	8003132 <OpSampleCompute1+0x76>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 80030ce:	ed90 7a03 	vldr	s14, [r0, #12]
 80030d2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	da2f      	bge.n	800313c <OpSampleCompute1+0x80>
 80030dc:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800314c <OpSampleCompute1+0x90>
 80030e0:	edd0 7a00 	vldr	s15, [r0]
 80030e4:	eec7 6a06 	vdiv.f32	s13, s14, s12
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 80030e8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 80030f0:	bf5b      	ittet	pl
 80030f2:	eeb0 6a00 	vmovpl.f32	s12, #0	; 0x40000000  2.0
 80030f6:	ee76 6ac6 	vsubpl.f32	s13, s13, s12
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 80030fa:	eeb6 6a00 	vmovmi.f32	s12, #96	; 0x3f000000  0.5
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 80030fe:	ee66 7aa7 	vmulpl.f32	s15, s13, s15
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8003102:	bf4b      	itete	mi
 8003104:	ee67 7a86 	vmulmi.f32	s15, s15, s12
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8003108:	ee67 7aa6 	vmulpl.f32	s15, s15, s13
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 800310c:	ee67 7aa6 	vmulmi.f32	s15, s15, s13
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8003110:	eefe 6a00 	vmovpl.f32	s13, #224	; 0xbf000000 -0.5
 8003114:	ee67 7aa6 	vmul.f32	s15, s15, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003118:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 800311c:	edc0 7a07 	vstr	s15, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003120:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003150 <OpSampleCompute1+0x94>
	return op->out;
}
 8003124:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003128:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800312c:	ed80 7a03 	vstr	s14, [r0, #12]
}
 8003130:	4770      	bx	lr
		op->phase += _2PI;
 8003132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003136:	edc0 7a03 	vstr	s15, [r0, #12]
 800313a:	e7c1      	b.n	80030c0 <OpSampleCompute1+0x4>
		op->phase -= _2PI;
 800313c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003140:	ed80 7a03 	vstr	s14, [r0, #12]
 8003144:	e7c3      	b.n	80030ce <OpSampleCompute1+0x12>
 8003146:	bf00      	nop
 8003148:	40c90fdb 	.word	0x40c90fdb
 800314c:	40490fdb 	.word	0x40490fdb
 8003150:	39156592 	.word	0x39156592

08003154 <OpSampleCompute2>:
/*-------------------------------------------------------*/
float_t OpSampleCompute2(Oscillator_t * op) // basic sawtooth
{
 8003154:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80031cc <OpSampleCompute2+0x78>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003158:	edd0 7a03 	vldr	s15, [r0, #12]
 800315c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003164:	d428      	bmi.n	80031b8 <OpSampleCompute2+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8003166:	edd0 7a03 	vldr	s15, [r0, #12]
 800316a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	da26      	bge.n	80031c2 <OpSampleCompute2+0x6e>
 8003174:	ed9f 6a16 	vldr	s12, [pc, #88]	; 80031d0 <OpSampleCompute2+0x7c>
 8003178:	ed90 7a00 	vldr	s14, [r0]
 800317c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003180:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003184:	ee87 7a86 	vdiv.f32	s14, s15, s12
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = 0.5f*op->amp * (op->phase / _PI);
 8003188:	eef4 7ac6 	vcmpe.f32	s15, s12
 800318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 8003190:	bf5c      	itt	pl
 8003192:	eeb0 6a00 	vmovpl.f32	s12, #0	; 0x40000000  2.0
 8003196:	ee37 7a46 	vsubpl.f32	s14, s14, s12
 800319a:	ee27 7a26 	vmul.f32	s14, s14, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 800319e:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 80031a2:	ed80 7a07 	vstr	s14, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80031a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80031d4 <OpSampleCompute2+0x80>
	return op->out;
}
 80031aa:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80031ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 80031b2:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80031b6:	4770      	bx	lr
		op->phase += _2PI;
 80031b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031bc:	edc0 7a03 	vstr	s15, [r0, #12]
 80031c0:	e7ca      	b.n	8003158 <OpSampleCompute2+0x4>
		op->phase -= _2PI;
 80031c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031c6:	edc0 7a03 	vstr	s15, [r0, #12]
 80031ca:	e7cc      	b.n	8003166 <OpSampleCompute2+0x12>
 80031cc:	40c90fdb 	.word	0x40c90fdb
 80031d0:	40490fdb 	.word	0x40490fdb
 80031d4:	39156592 	.word	0x39156592

080031d8 <OpSampleCompute3>:
/*-------------------------------------------------------*/
float_t OpSampleCompute3(Oscillator_t * op) // sin(phi)^5
{
 80031d8:	b510      	push	{r4, lr}
 80031da:	ed2d 8b02 	vpush	{d8}
 80031de:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003250 <OpSampleCompute3+0x78>
 80031e2:	4604      	mov	r4, r0
	float_t z;

	while (op->phase < 0) // keep phase in [0, 2pi]
 80031e4:	edd4 7a03 	vldr	s15, [r4, #12]
 80031e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f0:	d423      	bmi.n	800323a <OpSampleCompute3+0x62>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 80031f2:	ed94 8a03 	vldr	s16, [r4, #12]
 80031f6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80031fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fe:	da21      	bge.n	8003244 <OpSampleCompute3+0x6c>
		op->phase -= _2PI;

	z = sinf(op->phase);
 8003200:	eeb0 0a48 	vmov.f32	s0, s16
 8003204:	f003 fdba 	bl	8006d7c <sinf>
	op->out = op->amp*z*z*z*z*z;
 8003208:	edd4 7a00 	vldr	s15, [r4]

	op->phase += _2PI * Ts * op->freq; // increment phase
 800320c:	ed94 7a02 	vldr	s14, [r4, #8]
	op->out = op->amp*z*z*z*z*z;
 8003210:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003214:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003218:	ee67 7a80 	vmul.f32	s15, s15, s0
 800321c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003220:	ee27 0a80 	vmul.f32	s0, s15, s0
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003224:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003254 <OpSampleCompute3+0x7c>
	op->out = op->amp*z*z*z*z*z;
 8003228:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 800322c:	eea7 8a27 	vfma.f32	s16, s14, s15
 8003230:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 8003234:	ecbd 8b02 	vpop	{d8}
 8003238:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 800323a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800323e:	edc4 7a03 	vstr	s15, [r4, #12]
 8003242:	e7cf      	b.n	80031e4 <OpSampleCompute3+0xc>
		op->phase -= _2PI;
 8003244:	ee38 8a47 	vsub.f32	s16, s16, s14
 8003248:	ed84 8a03 	vstr	s16, [r4, #12]
 800324c:	e7d1      	b.n	80031f2 <OpSampleCompute3+0x1a>
 800324e:	bf00      	nop
 8003250:	40c90fdb 	.word	0x40c90fdb
 8003254:	39156592 	.word	0x39156592

08003258 <OpSampleCompute5>:

	return op->out;
}
/*-------------------------------------------------------*/
float_t OpSampleCompute5(Oscillator_t * op) // Naive Triangle
{
 8003258:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80032d0 <OpSampleCompute5+0x78>
	while (op->phase < 0) // keep phase in [0, 2pi]
 800325c:	edd0 7a03 	vldr	s15, [r0, #12]
 8003260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003268:	d428      	bmi.n	80032bc <OpSampleCompute5+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800326a:	edd0 7a03 	vldr	s15, [r0, #12]
 800326e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	da26      	bge.n	80032c6 <OpSampleCompute5+0x6e>
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 8003278:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032d4 <OpSampleCompute5+0x7c>
 800327c:	edd0 6a00 	vldr	s13, [r0]
 8003280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	bf4b      	itete	mi
 800328a:	ed9f 6a13 	vldrmi	s12, [pc, #76]	; 80032d8 <OpSampleCompute5+0x80>
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 800328e:	ed9f 6a13 	vldrpl	s12, [pc, #76]	; 80032dc <OpSampleCompute5+0x84>
	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 8003292:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 8003296:	eeb8 7a08 	vmovpl.f32	s14, #136	; 0xc0400000 -3.0
 800329a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800329e:	ee27 7a26 	vmul.f32	s14, s14, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 80032a2:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 80032a6:	ed80 7a07 	vstr	s14, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80032aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80032e0 <OpSampleCompute5+0x88>
	return op->out;
}
 80032ae:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80032b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80032b6:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80032ba:	4770      	bx	lr
		op->phase += _2PI;
 80032bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032c0:	edc0 7a03 	vstr	s15, [r0, #12]
 80032c4:	e7ca      	b.n	800325c <OpSampleCompute5+0x4>
		op->phase -= _2PI;
 80032c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032ca:	edc0 7a03 	vstr	s15, [r0, #12]
 80032ce:	e7cc      	b.n	800326a <OpSampleCompute5+0x12>
 80032d0:	40c90fdb 	.word	0x40c90fdb
 80032d4:	40490fdb 	.word	0x40490fdb
 80032d8:	bf22f983 	.word	0xbf22f983
 80032dc:	3f22f983 	.word	0x3f22f983
 80032e0:	39156592 	.word	0x39156592

080032e4 <MorphingSaw_SampleCompute>:
/*-------------------------------------------------------*/
float_t MorphingSaw_SampleCompute(Oscillator_t * op) // Morphing sawtooth, tends to a triangle at high freqs
{
 80032e4:	eddf 6a32 	vldr	s13, [pc, #200]	; 80033b0 <MorphingSaw_SampleCompute+0xcc>
	while (op->phase < 0) // keep phase in [0, 2pi]
 80032e8:	edd0 7a03 	vldr	s15, [r0, #12]
 80032ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	d441      	bmi.n	800337a <MorphingSaw_SampleCompute+0x96>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 80032f6:	edd0 7a03 	vldr	s15, [r0, #12]
 80032fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	da3f      	bge.n	8003384 <MorphingSaw_SampleCompute+0xa0>
		op->phase -= _2PI;

	if (op->freq < 8000) op->phi0 = _PI/8000*(op->freq); else op->phi0 = _PI;
 8003304:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80033b4 <MorphingSaw_SampleCompute+0xd0>
 8003308:	edd0 5a02 	vldr	s11, [r0, #8]
 800330c:	ed90 5a00 	vldr	s10, [r0]
 8003310:	eef4 5ac7 	vcmpe.f32	s11, s14
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	bf4d      	iteet	mi
 800331a:	ed9f 7a27 	vldrmi	s14, [pc, #156]	; 80033b8 <MorphingSaw_SampleCompute+0xd4>
 800331e:	4b27      	ldrpl	r3, [pc, #156]	; (80033bc <MorphingSaw_SampleCompute+0xd8>)
 8003320:	6103      	strpl	r3, [r0, #16]
 8003322:	ee25 7a87 	vmulmi.f32	s14, s11, s14
 8003326:	bf48      	it	mi
 8003328:	ed80 7a04 	vstrmi	s14, [r0, #16]
	if (op->phi0 <= .0001f) op->phi0 = .0001f;
 800332c:	ed90 6a04 	vldr	s12, [r0, #16]
 8003330:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80033c0 <MorphingSaw_SampleCompute+0xdc>
 8003334:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8003338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333c:	bf98      	it	ls
 800333e:	ed80 7a04 	vstrls	s14, [r0, #16]
	if (op->phase < op->phi0) op->out = op->amp * (-2/op->phi0 * op->phase + 1);
 8003342:	ed90 6a04 	vldr	s12, [r0, #16]
 8003346:	eef4 7ac6 	vcmpe.f32	s15, s12
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d51e      	bpl.n	800338e <MorphingSaw_SampleCompute+0xaa>
 8003350:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003354:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800335c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8003360:	ee27 7a05 	vmul.f32	s14, s14, s10
 8003364:	ed80 7a07 	vstr	s14, [r0, #28]
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003368:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80033c4 <MorphingSaw_SampleCompute+0xe0>
	return op->out;
}
 800336c:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003370:	eee5 7a87 	vfma.f32	s15, s11, s14
 8003374:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8003378:	4770      	bx	lr
		op->phase += _2PI;
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	edc0 7a03 	vstr	s15, [r0, #12]
 8003382:	e7b1      	b.n	80032e8 <MorphingSaw_SampleCompute+0x4>
		op->phase -= _2PI;
 8003384:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003388:	edc0 7a03 	vstr	s15, [r0, #12]
 800338c:	e7b3      	b.n	80032f6 <MorphingSaw_SampleCompute+0x12>
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);
 800338e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80033c8 <MorphingSaw_SampleCompute+0xe4>
 8003392:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8003396:	eea7 7aa4 	vfma.f32	s14, s15, s9
 800339a:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800339e:	ee37 7a46 	vsub.f32	s14, s14, s12
 80033a2:	ee27 7a05 	vmul.f32	s14, s14, s10
 80033a6:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80033aa:	ed80 6a07 	vstr	s12, [r0, #28]
 80033ae:	e7db      	b.n	8003368 <MorphingSaw_SampleCompute+0x84>
 80033b0:	40c90fdb 	.word	0x40c90fdb
 80033b4:	45fa0000 	.word	0x45fa0000
 80033b8:	39cde32e 	.word	0x39cde32e
 80033bc:	40490fdb 	.word	0x40490fdb
 80033c0:	38d1b717 	.word	0x38d1b717
 80033c4:	39156592 	.word	0x39156592
 80033c8:	c0c90fdb 	.word	0xc0c90fdb

080033cc <Drifters_sampleCompute>:
{
 80033cc:	b538      	push	{r3, r4, r5, lr}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 80033ce:	4823      	ldr	r0, [pc, #140]	; (800345c <Drifters_sampleCompute+0x90>)
 80033d0:	4d23      	ldr	r5, [pc, #140]	; (8003460 <Drifters_sampleCompute+0x94>)
	op->freq = f;
 80033d2:	4c24      	ldr	r4, [pc, #144]	; (8003464 <Drifters_sampleCompute+0x98>)
{
 80033d4:	ed2d 8b02 	vpush	{d8}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 80033d8:	f7ff fa60 	bl	800289c <drifter_nextSample>
 80033dc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80033e0:	ee30 0a28 	vadd.f32	s0, s0, s17
 80033e4:	edd5 7a00 	vldr	s15, [r5]
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 80033e8:	481f      	ldr	r0, [pc, #124]	; (8003468 <Drifters_sampleCompute+0x9c>)
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 80033ea:	eeb3 8a09 	vmov.f32	s16, #57	; 0x41c80000  25.0
 80033ee:	eeb0 7a48 	vmov.f32	s14, s16
 80033f2:	eea0 7a27 	vfma.f32	s14, s0, s15
	op->freq = f;
 80033f6:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 80033fa:	f7ff fa4f 	bl	800289c <drifter_nextSample>
 80033fe:	edd5 7a00 	vldr	s15, [r5]
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 8003402:	481a      	ldr	r0, [pc, #104]	; (800346c <Drifters_sampleCompute+0xa0>)
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 8003404:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003408:	eeb0 7a48 	vmov.f32	s14, s16
 800340c:	eea0 7a27 	vfma.f32	s14, s0, s15
	op->freq = f;
 8003410:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 8003414:	f7ff fa42 	bl	800289c <drifter_nextSample>
 8003418:	edd5 7a00 	vldr	s15, [r5]
 800341c:	ee30 0a28 	vadd.f32	s0, s0, s17
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003420:	f104 0060 	add.w	r0, r4, #96	; 0x60
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 8003424:	eea0 8a27 	vfma.f32	s16, s0, s15
	op->freq = f;
 8003428:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800342c:	f7ff ff5a 	bl	80032e4 <MorphingSaw_SampleCompute>
 8003430:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003434:	eeb0 4a40 	vmov.f32	s8, s0
 8003438:	f7ff ff54 	bl	80032e4 <MorphingSaw_SampleCompute>
 800343c:	f104 0020 	add.w	r0, r4, #32
 8003440:	ee34 4a00 	vadd.f32	s8, s8, s0
 8003444:	f7ff ff4e 	bl	80032e4 <MorphingSaw_SampleCompute>
}
 8003448:	ecbd 8b02 	vpop	{d8}
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800344c:	ee34 0a00 	vadd.f32	s0, s8, s0
}
 8003450:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003470 <Drifters_sampleCompute+0xa4>
 8003454:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003458:	bd38      	pop	{r3, r4, r5, pc}
 800345a:	bf00      	nop
 800345c:	20003d8c 	.word	0x20003d8c
 8003460:	20000010 	.word	0x20000010
 8003464:	20003db8 	.word	0x20003db8
 8003468:	20003d60 	.word	0x20003d60
 800346c:	20003d34 	.word	0x20003d34
 8003470:	3ea8f5c3 	.word	0x3ea8f5c3

08003474 <AdditiveGen_newWaveform>:
	op->phase += _2PI * Ts * op->freq; // increment phase
	return op->out;
}
/*-------------------------------------------------------*/
void AdditiveGen_newWaveform(void) //
{
 8003474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t k;

	a[0] = a[1] = 1;
 8003478:	4c1a      	ldr	r4, [pc, #104]	; (80034e4 <AdditiveGen_newWaveform+0x70>)
{
 800347a:	ed2d 8b04 	vpush	{d8-d9}
	a[0] = a[1] = 1;
 800347e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	ph[0] = ph[1] = 0;
 8003482:	2200      	movs	r2, #0

	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
	{
		a[k] = frand_a_b(0.001f , 0.98f);
 8003484:	ed9f 9a18 	vldr	s18, [pc, #96]	; 80034e8 <AdditiveGen_newWaveform+0x74>
 8003488:	eddf 8a18 	vldr	s17, [pc, #96]	; 80034ec <AdditiveGen_newWaveform+0x78>
	a[0] = a[1] = 1;
 800348c:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8003490:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
	ph[0] = ph[1] = 0;
 8003494:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8003498:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 800349c:	f104 0688 	add.w	r6, r4, #136	; 0x88
 80034a0:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
 80034a4:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 80034a8:	eeb0 8a67 	vmov.f32	s16, s15
 80034ac:	4615      	mov	r5, r2
		a[k] = frand_a_b(0.001f , 0.98f);
 80034ae:	eef0 0a49 	vmov.f32	s1, s18
 80034b2:	eeb0 0a68 	vmov.f32	s0, s17
 80034b6:	f000 fa6b 	bl	8003990 <frand_a_b>
 80034ba:	eca6 0a01 	vstmia	r6!, {s0}
		a[0] += a[k];
 80034be:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
		ph[k] = 0;
 80034c2:	f847 5b04 	str.w	r5, [r7], #4
		a[0] += a[k];
 80034c6:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 80034ca:	4546      	cmp	r6, r8
		a[0] += a[k];
 80034cc:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 80034d0:	d1ed      	bne.n	80034ae <AdditiveGen_newWaveform+0x3a>
	}
	a[0] = 1.f / a[0];
 80034d2:	eec8 7a00 	vdiv.f32	s15, s16, s0
}
 80034d6:	ecbd 8b04 	vpop	{d8-d9}
	a[0] = 1.f / a[0];
 80034da:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
}
 80034de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e2:	bf00      	nop
 80034e4:	20003db8 	.word	0x20003db8
 80034e8:	3f7ae148 	.word	0x3f7ae148
 80034ec:	3a83126f 	.word	0x3a83126f

080034f0 <AdditiveGen_SampleCompute>:
/*-------------------------------------------------------*/
float_t AdditiveGen_SampleCompute(Oscillator_t * op) // additive sine generator
{
 80034f0:	b530      	push	{r4, r5, lr}
 80034f2:	4c27      	ldr	r4, [pc, #156]	; (8003590 <AdditiveGen_SampleCompute+0xa0>)
	uint8_t k = 1;
	float_t y = 0;
 80034f4:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8003594 <AdditiveGen_SampleCompute+0xa4>

	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 80034f8:	eddf 5a27 	vldr	s11, [pc, #156]	; 8003598 <AdditiveGen_SampleCompute+0xa8>
	{
		//while (ph[k] < 0) // keep phase in [0, 2pi]
		//	ph[k] += _2PI;
		while (ph[k] >= _2PI)
 80034fc:	ed9f 6a27 	vldr	s12, [pc, #156]	; 800359c <AdditiveGen_SampleCompute+0xac>
			ph[k] -= _2PI;
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 8003500:	4d27      	ldr	r5, [pc, #156]	; (80035a0 <AdditiveGen_SampleCompute+0xb0>)
 8003502:	ed9f 5a28 	vldr	s10, [pc, #160]	; 80035a4 <AdditiveGen_SampleCompute+0xb4>
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 8003506:	eddf 4a28 	vldr	s9, [pc, #160]	; 80035a8 <AdditiveGen_SampleCompute+0xb8>
 800350a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
{
 800350e:	2201      	movs	r2, #1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003510:	ee07 2a90 	vmov	s15, r2
 8003514:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003518:	edd0 7a02 	vldr	s15, [r0, #8]
 800351c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003520:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003528:	d404      	bmi.n	8003534 <AdditiveGen_SampleCompute+0x44>
 800352a:	e024      	b.n	8003576 <AdditiveGen_SampleCompute+0x86>
			ph[k] -= _2PI;
 800352c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003530:	edc1 7a00 	vstr	s15, [r1]
		while (ph[k] >= _2PI)
 8003534:	edd1 7a00 	vldr	s15, [r1]
 8003538:	eef4 7ac6 	vcmpe.f32	s15, s12
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	daf4      	bge.n	800352c <AdditiveGen_SampleCompute+0x3c>
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 8003542:	ee27 7a85 	vmul.f32	s14, s15, s10
 8003546:	ecb4 4a01 	vldmia	r4!, {s8}
 800354a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 800354e:	ee66 6aa4 	vmul.f32	s13, s13, s9
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 8003552:	ee17 3a10 	vmov	r3, s14
 8003556:	b29b      	uxth	r3, r3
 8003558:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800355c:	ed93 7a00 	vldr	s14, [r3]
 8003560:	eea4 0a07 	vfma.f32	s0, s8, s14
 8003564:	3201      	adds	r2, #1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003566:	2a0b      	cmp	r2, #11
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 8003568:	ed90 7a02 	vldr	s14, [r0, #8]
 800356c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003570:	ece1 7a01 	vstmia	r1!, {s15}
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003574:	d1cc      	bne.n	8003510 <AdditiveGen_SampleCompute+0x20>
		k++;
	}
	y = a[0] * y;
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <AdditiveGen_SampleCompute+0xbc>)
 8003578:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800357c:	ee20 0a27 	vmul.f32	s0, s0, s15

	op->out = op->amp * y;
 8003580:	edd0 7a00 	vldr	s15, [r0]
 8003584:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003588:	ed80 0a07 	vstr	s0, [r0, #28]

	return op->out;
}
 800358c:	bd30      	pop	{r4, r5, pc}
 800358e:	bf00      	nop
 8003590:	20003e3c 	.word	0x20003e3c
 8003594:	00000000 	.word	0x00000000
 8003598:	46ac4400 	.word	0x46ac4400
 800359c:	40c90fdb 	.word	0x40c90fdb
 80035a0:	08015de8 	.word	0x08015de8
 80035a4:	4322f983 	.word	0x4322f983
 80035a8:	39156592 	.word	0x39156592
 80035ac:	20003db8 	.word	0x20003db8

080035b0 <waveCompute>:

/*-------------------------------------------------------------------------------------------------------------------*/

float waveCompute(uint8_t sound, float frq)
{
 80035b0:	b510      	push	{r4, lr}
	op->freq = f;
 80035b2:	4c6f      	ldr	r4, [pc, #444]	; (8003770 <waveCompute+0x1c0>)
{
 80035b4:	ed2d 8b02 	vpush	{d8}
	op->freq = f;
 80035b8:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
{
 80035bc:	eeb0 8a40 	vmov.f32	s16, s0

	OpSetFreq(&op1, frq);


	/* choose waveform generator */
	switch (sound)
 80035c0:	280f      	cmp	r0, #15
 80035c2:	f200 80ce 	bhi.w	8003762 <waveCompute+0x1b2>
 80035c6:	e8df f000 	tbb	[pc, r0]
 80035ca:	1008      	.short	0x1008
 80035cc:	45625e32 	.word	0x45625e32
 80035d0:	7469554c 	.word	0x7469554c
 80035d4:	b7a8a587 	.word	0xb7a8a587
 80035d8:	c3bd      	.short	0xc3bd
	{
	case MORPH_SAW : 	y = 0.8f * MorphingSaw_SampleCompute(&op1); 		break ;
 80035da:	4866      	ldr	r0, [pc, #408]	; (8003774 <waveCompute+0x1c4>)
 80035dc:	f7ff fe82 	bl	80032e4 <MorphingSaw_SampleCompute>
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;

	case BLEPSQUARE : 		mbRectOsc.freq = frq;
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;

	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 80035e0:	eddf 7a65 	vldr	s15, [pc, #404]	; 8003778 <waveCompute+0x1c8>

	case VOICES3 :	{ // 3 slightly detuned oscillators with drifters

		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 80035e4:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 80035e8:	e031      	b.n	800364e <waveCompute+0x9e>
		if (frq < 200) y =  OpSampleCompute1(&op1);
 80035ea:	eddf 7a64 	vldr	s15, [pc, #400]	; 800377c <waveCompute+0x1cc>
 80035ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f6:	d506      	bpl.n	8003606 <waveCompute+0x56>
		y = 0;	break ;

	}

	return y;
}
 80035f8:	ecbd 8b02 	vpop	{d8}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 80035fc:	485d      	ldr	r0, [pc, #372]	; (8003774 <waveCompute+0x1c4>)
}
 80035fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 8003602:	f7ff bd5b 	b.w	80030bc <OpSampleCompute1>
		else if (frq < 600) y = OpSampleCompute2(&op1);
 8003606:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8003780 <waveCompute+0x1d0>
 800360a:	485a      	ldr	r0, [pc, #360]	; (8003774 <waveCompute+0x1c4>)
 800360c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003614:	d505      	bpl.n	8003622 <waveCompute+0x72>
}
 8003616:	ecbd 8b02 	vpop	{d8}
 800361a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else if (frq < 600) y = OpSampleCompute2(&op1);
 800361e:	f7ff bd99 	b.w	8003154 <OpSampleCompute2>
}
 8003622:	ecbd 8b02 	vpop	{d8}
 8003626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else y = OpSampleCompute5(&op1);
 800362a:	f7ff be15 	b.w	8003258 <OpSampleCompute5>
	case ACC_SINE : 		y = 0.8 * OpSampleCompute0(&op1); 		break;
 800362e:	4851      	ldr	r0, [pc, #324]	; (8003774 <waveCompute+0x1c4>)
 8003630:	f7ff fc00 	bl	8002e34 <OpSampleCompute0>
 8003634:	ee10 0a10 	vmov	r0, s0
 8003638:	f7fc ff2a 	bl	8000490 <__aeabi_f2d>
 800363c:	a34a      	add	r3, pc, #296	; (adr r3, 8003768 <waveCompute+0x1b8>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fc ff7d 	bl	8000540 <__aeabi_dmul>
 8003646:	f7fd fa15 	bl	8000a74 <__aeabi_d2f>
 800364a:	ee00 0a10 	vmov	s0, r0
}
 800364e:	ecbd 8b02 	vpop	{d8}
 8003652:	bd10      	pop	{r4, pc}
 8003654:	ecbd 8b02 	vpop	{d8}
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 8003658:	4846      	ldr	r0, [pc, #280]	; (8003774 <waveCompute+0x1c4>)
}
 800365a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 800365e:	f7ff bdbb 	b.w	80031d8 <OpSampleCompute3>
}
 8003662:	ecbd 8b02 	vpop	{d8}
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 8003666:	4847      	ldr	r0, [pc, #284]	; (8003784 <waveCompute+0x1d4>)
}
 8003668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 800366c:	ed80 0a03 	vstr	s0, [r0, #12]
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;
 8003670:	f7fe bb32 	b.w	8001cd8 <VCO_bleptri_SampleCompute>
}
 8003674:	ecbd 8b02 	vpop	{d8}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 8003678:	4843      	ldr	r0, [pc, #268]	; (8003788 <waveCompute+0x1d8>)
}
 800367a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 800367e:	ed80 0a03 	vstr	s0, [r0, #12]
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;
 8003682:	f7fe b931 	b.w	80018e8 <VCO_bleprect_SampleCompute>
	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 8003686:	483b      	ldr	r0, [pc, #236]	; (8003774 <waveCompute+0x1c4>)
 8003688:	f7ff fc00 	bl	8002e8c <Osc_WT_SINE_SampleCompute>
 800368c:	e7a8      	b.n	80035e0 <waveCompute+0x30>
}
 800368e:	ecbd 8b02 	vpop	{d8}
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 8003692:	4838      	ldr	r0, [pc, #224]	; (8003774 <waveCompute+0x1c4>)
}
 8003694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 8003698:	f7ff bf2a 	b.w	80034f0 <AdditiveGen_SampleCompute>
	case NOISE : 			y = op1.amp * frand_a_b(-.8f , .8f);	break; // noise !
 800369c:	eddf 0a36 	vldr	s1, [pc, #216]	; 8003778 <waveCompute+0x1c8>
 80036a0:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800378c <waveCompute+0x1dc>
 80036a4:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 80036a8:	f000 f972 	bl	8003990 <frand_a_b>
 80036ac:	ee28 0a00 	vmul.f32	s0, s16, s0
 80036b0:	e7cd      	b.n	800364e <waveCompute+0x9e>
		OpSetFreq(&op2, frq * 1.50f);
 80036b2:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80036b6:	ee28 8a00 	vmul.f32	s16, s16, s0
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 80036ba:	482e      	ldr	r0, [pc, #184]	; (8003774 <waveCompute+0x1c4>)
	op->freq = f;
 80036bc:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 80036c0:	f7ff fe10 	bl	80032e4 <MorphingSaw_SampleCompute>
 80036c4:	4832      	ldr	r0, [pc, #200]	; (8003790 <waveCompute+0x1e0>)
 80036c6:	eeb0 4a40 	vmov.f32	s8, s0
 80036ca:	f7ff fe0b 	bl	80032e4 <MorphingSaw_SampleCompute>
 80036ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80036d2:	ee34 0a00 	vadd.f32	s0, s8, s0
 80036d6:	e785      	b.n	80035e4 <waveCompute+0x34>
		OpSetFreq(&op2, frq * 1.26f);
 80036d8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8003794 <waveCompute+0x1e4>
		OpSetFreq(&op2, frq * 1.1892f);
 80036dc:	ee68 7a27 	vmul.f32	s15, s16, s15
		OpSetFreq(&op3, frq * 1.5f);
 80036e0:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
	op->freq = f;
 80036e4:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 80036e8:	ee20 8a08 	vmul.f32	s16, s0, s16
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 80036ec:	4821      	ldr	r0, [pc, #132]	; (8003774 <waveCompute+0x1c4>)
	op->freq = f;
 80036ee:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 80036f2:	f7ff fdf7 	bl	80032e4 <MorphingSaw_SampleCompute>
 80036f6:	4826      	ldr	r0, [pc, #152]	; (8003790 <waveCompute+0x1e0>)
 80036f8:	eeb0 4a40 	vmov.f32	s8, s0
 80036fc:	f7ff fdf2 	bl	80032e4 <MorphingSaw_SampleCompute>
 8003700:	4825      	ldr	r0, [pc, #148]	; (8003798 <waveCompute+0x1e8>)
 8003702:	ee34 4a00 	vadd.f32	s8, s8, s0
 8003706:	f7ff fded 	bl	80032e4 <MorphingSaw_SampleCompute>
 800370a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800379c <waveCompute+0x1ec>
 800370e:	ee34 0a00 	vadd.f32	s0, s8, s0
 8003712:	e767      	b.n	80035e4 <waveCompute+0x34>
		OpSetFreq(&op2, frq * 1.1892f);
 8003714:	eddf 7a22 	vldr	s15, [pc, #136]	; 80037a0 <waveCompute+0x1f0>
 8003718:	e7e0      	b.n	80036dc <waveCompute+0x12c>
		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
 800371a:	f7ff f8dd 	bl	80028d8 <d1_drifter_nextSample>
 800371e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8003722:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003726:	ee20 0a08 	vmul.f32	s0, s0, s16
	op->freq = f;
 800372a:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 800372e:	f7ff f8d9 	bl	80028e4 <d2_drifter_nextSample>
 8003732:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003736:	e7d7      	b.n	80036e8 <waveCompute+0x138>
}
 8003738:	ecbd 8b02 	vpop	{d8}
 800373c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case DRIFTERS : 	y = Drifters_sampleCompute(); break;
 8003740:	f7ff be44 	b.w	80033cc <Drifters_sampleCompute>
}
 8003744:	ecbd 8b02 	vpop	{d8}
 8003748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case FM2 : 			y = FM2_sampleCompute(frq); break;
 800374c:	f7ff bc2c 	b.w	8002fa8 <FM2_sampleCompute>
}
 8003750:	ecbd 8b02 	vpop	{d8}
		mbSawOsc.freq = frq;
 8003754:	4813      	ldr	r0, [pc, #76]	; (80037a4 <waveCompute+0x1f4>)
}
 8003756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mbSawOsc.freq = frq;
 800375a:	ed80 0a03 	vstr	s0, [r0, #12]
		y = VCO_blepsaw_SampleCompute(&mbSawOsc);
 800375e:	f7fd bfcf 	b.w	8001700 <VCO_blepsaw_SampleCompute>
		y = 0;	break ;
 8003762:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80037a8 <waveCompute+0x1f8>
	return y;
 8003766:	e772      	b.n	800364e <waveCompute+0x9e>
 8003768:	9999999a 	.word	0x9999999a
 800376c:	3fe99999 	.word	0x3fe99999
 8003770:	20003db8 	.word	0x20003db8
 8003774:	20003e18 	.word	0x20003e18
 8003778:	3f4ccccd 	.word	0x3f4ccccd
 800377c:	43480000 	.word	0x43480000
 8003780:	44160000 	.word	0x44160000
 8003784:	20000124 	.word	0x20000124
 8003788:	2000067c 	.word	0x2000067c
 800378c:	bf4ccccd 	.word	0xbf4ccccd
 8003790:	20003df8 	.word	0x20003df8
 8003794:	3fa147ae 	.word	0x3fa147ae
 8003798:	20003dd8 	.word	0x20003dd8
 800379c:	3ea8f5c3 	.word	0x3ea8f5c3
 80037a0:	3f9837b5 	.word	0x3f9837b5
 80037a4:	20000bd8 	.word	0x20000bd8
 80037a8:	00000000 	.word	0x00000000

080037ac <PhaserInit>:
void PhaserInit(void)
{
	f_min = 200.f;
	f_max = 1700.f;
	swrate = 0.1f;
	fb = 0.7f;
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <PhaserInit+0x20>)
 80037ae:	4a08      	ldr	r2, [pc, #32]	; (80037d0 <PhaserInit+0x24>)
 80037b0:	601a      	str	r2, [r3, #0]
	wet = 0.3f;
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <PhaserInit+0x28>)
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <PhaserInit+0x2c>)
 80037b6:	601a      	str	r2, [r3, #0]

	dmin = 2 * f_min / SAMPLERATE;
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <PhaserInit+0x30>)
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <PhaserInit+0x34>)
 80037bc:	601a      	str	r2, [r3, #0]
	dmax = 2 * f_max / SAMPLERATE;
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <PhaserInit+0x38>)
 80037c0:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <PhaserInit+0x3c>)
 80037c2:	601a      	str	r2, [r3, #0]
	lfoInc = _2PI * swrate / SAMPLERATE;
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <PhaserInit+0x40>)
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <PhaserInit+0x44>)
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	4770      	bx	lr
 80037cc:	20012a74 	.word	0x20012a74
 80037d0:	3f333333 	.word	0x3f333333
 80037d4:	20012a98 	.word	0x20012a98
 80037d8:	3e99999a 	.word	0x3e99999a
 80037dc:	20012a70 	.word	0x20012a70
 80037e0:	3c149b93 	.word	0x3c149b93
 80037e4:	20012a6c 	.word	0x20012a6c
 80037e8:	3d9de54c 	.word	0x3d9de54c
 80037ec:	20012a78 	.word	0x20012a78
 80037f0:	376f08eb 	.word	0x376f08eb

080037f4 <Phaser_Rate_set>:
/*---------------------------------------------------------------------*/
void Phaser_Rate_set(uint8_t val)
{
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 80037f4:	ee07 0a90 	vmov	s15, r0
 80037f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003820 <Phaser_Rate_set+0x2c>
	lfoInc = _2PI * swrate / SAMPLERATE;
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <Phaser_Rate_set+0x30>)
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 80037fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003802:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003828 <Phaser_Rate_set+0x34>
 8003806:	eee6 7a87 	vfma.f32	s15, s13, s14
	lfoInc = _2PI * swrate / SAMPLERATE;
 800380a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800382c <Phaser_Rate_set+0x38>
 800380e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003830 <Phaser_Rate_set+0x3c>
 8003812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003816:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800381a:	ed83 7a00 	vstr	s14, [r3]
}
 800381e:	4770      	bx	lr
 8003820:	3d611e66 	.word	0x3d611e66
 8003824:	20012a78 	.word	0x20012a78
 8003828:	3ca3d70a 	.word	0x3ca3d70a
 800382c:	40c90fdb 	.word	0x40c90fdb
 8003830:	472c4400 	.word	0x472c4400

08003834 <Phaser_Feedback_set>:
/*---------------------------------------------------------------------*/
void Phaser_Feedback_set(uint8_t val)
{
	fb = 0.999f * val / MIDI_MAX;
 8003834:	ee07 0a90 	vmov	s15, r0
 8003838:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003854 <Phaser_Feedback_set+0x20>
 800383c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003858 <Phaser_Feedback_set+0x24>
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <Phaser_Feedback_set+0x28>)
 8003842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800384a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800384e:	ed83 7a00 	vstr	s14, [r3]
}
 8003852:	4770      	bx	lr
 8003854:	3f7fbe77 	.word	0x3f7fbe77
 8003858:	42fe0000 	.word	0x42fe0000
 800385c:	20012a74 	.word	0x20012a74

08003860 <Phaser_Wet_set>:
/*---------------------------------------------------------------------*/
void Phaser_Wet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 8003860:	ee07 0a90 	vmov	s15, r0
 8003864:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003878 <Phaser_Wet_set+0x18>
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <Phaser_Wet_set+0x1c>)
 800386a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800386e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003872:	edc3 7a00 	vstr	s15, [r3]
}
 8003876:	4770      	bx	lr
 8003878:	42fe0000 	.word	0x42fe0000
 800387c:	20012a98 	.word	0x20012a98

08003880 <Phaser_compute>:
	return yout;
}

/*---------------------------------------------------------------------*/
float Phaser_compute(float xin)
{
 8003880:	b510      	push	{r4, lr}
	int i;
	float d;

	//calculate and update phaser sweep lfo...

	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003882:	4c37      	ldr	r4, [pc, #220]	; (8003960 <Phaser_compute+0xe0>)
 8003884:	4b37      	ldr	r3, [pc, #220]	; (8003964 <Phaser_compute+0xe4>)
{
 8003886:	ed2d 8b04 	vpush	{d8-d9}
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 800388a:	ed94 8a00 	vldr	s16, [r4]
 800388e:	edd3 8a00 	vldr	s17, [r3]
 8003892:	4b35      	ldr	r3, [pc, #212]	; (8003968 <Phaser_compute+0xe8>)
{
 8003894:	eef0 9a40 	vmov.f32	s19, s0
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003898:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800396c <Phaser_compute+0xec>
 800389c:	ed93 9a00 	vldr	s18, [r3]
 80038a0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80038a4:	f003 f9d0 	bl	8006c48 <lrintf>
 80038a8:	4b31      	ldr	r3, [pc, #196]	; (8003970 <Phaser_compute+0xf0>)
	//update filter coeffs
	a1 = (1.f - d) / (1.f + d);

	//calculate output

	yout = allpass(xin + zm1 * fb, 0);
 80038aa:	4932      	ldr	r1, [pc, #200]	; (8003974 <Phaser_compute+0xf4>)
	yout = - yin * a1 + old[ind];
 80038ac:	4a32      	ldr	r2, [pc, #200]	; (8003978 <Phaser_compute+0xf8>)
	yout = allpass(xin + zm1 * fb, 0);
 80038ae:	ed91 6a00 	vldr	s12, [r1]
	yout = - yin * a1 + old[ind];
 80038b2:	ed92 0a00 	vldr	s0, [r2]
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80038b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80038ba:	ed90 7a00 	vldr	s14, [r0]
	lfoPhase += lfoInc;
 80038be:	4b2f      	ldr	r3, [pc, #188]	; (800397c <Phaser_compute+0xfc>)
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80038c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80038c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80038cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80038d0:	ee39 9a68 	vsub.f32	s18, s18, s17
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 80038d4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003980 <Phaser_compute+0x100>
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80038d8:	eee9 8a07 	vfma.f32	s17, s18, s14
	lfoPhase += lfoInc;
 80038dc:	ed93 7a00 	vldr	s14, [r3]
	a1 = (1.f - d) / (1.f + d);
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <Phaser_compute+0x104>)
	lfoPhase += lfoInc;
 80038e2:	ee38 7a07 	vadd.f32	s14, s16, s14
	yout = allpass(xin + zm1 * fb, 0);
 80038e6:	eef0 5a69 	vmov.f32	s11, s19
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 80038ea:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f2:	bfa8      	it	ge
 80038f4:	ee37 7a66 	vsubge.f32	s14, s14, s13
	a1 = (1.f - d) / (1.f + d);
 80038f8:	ee77 6ae8 	vsub.f32	s13, s15, s17
 80038fc:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003900:	ed84 7a00 	vstr	s14, [r4]
	a1 = (1.f - d) / (1.f + d);
 8003904:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 8003908:	ed83 7a00 	vstr	s14, [r3]
	yout = allpass(xin + zm1 * fb, 0);
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <Phaser_compute+0x108>)
 800390e:	edd3 6a00 	vldr	s13, [r3]
 8003912:	eee6 5a26 	vfma.f32	s11, s12, s13
	old[ind] = yout * a1 + yin;
 8003916:	4613      	mov	r3, r2
 8003918:	3218      	adds	r2, #24
	yout = - yin * a1 + old[ind];
 800391a:	eea5 0ac7 	vfms.f32	s0, s11, s14
	yout = allpass(xin + zm1 * fb, 0);
 800391e:	eef0 6a65 	vmov.f32	s13, s11
	old[ind] = yout * a1 + yin;
 8003922:	eee7 6a00 	vfma.f32	s13, s14, s0
 8003926:	ece3 6a01 	vstmia	r3!, {s13}
	yout = - yin * a1 + old[ind];
 800392a:	edd3 6a00 	vldr	s13, [r3]
 800392e:	eee0 6a47 	vfms.f32	s13, s0, s14
	old[ind] = yout * a1 + yin;
 8003932:	eea7 0a26 	vfma.f32	s0, s14, s13
 8003936:	eca3 0a01 	vstmia	r3!, {s0}

	for(i = 1; i < PH_STAGES; i++)
 800393a:	429a      	cmp	r2, r3
	yout = - yin * a1 + old[ind];
 800393c:	eeb0 0a66 	vmov.f32	s0, s13
	for(i = 1; i < PH_STAGES; i++)
 8003940:	d1f3      	bne.n	800392a <Phaser_compute+0xaa>
	{
		yout = allpass(yout, i);
	}
	zm1 = yout;

	yout = (1 - wet) * xin + wet * yout;
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <Phaser_compute+0x10c>)
	zm1 = yout;
 8003944:	edc1 6a00 	vstr	s13, [r1]
	yout = (1 - wet) * xin + wet * yout;
 8003948:	ed93 7a00 	vldr	s14, [r3]
 800394c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003950:	ee27 0a26 	vmul.f32	s0, s14, s13

	return yout;
}
 8003954:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8003958:	ecbd 8b04 	vpop	{d8-d9}
 800395c:	bd10      	pop	{r4, pc}
 800395e:	bf00      	nop
 8003960:	20012a7c 	.word	0x20012a7c
 8003964:	20012a70 	.word	0x20012a70
 8003968:	20012a6c 	.word	0x20012a6c
 800396c:	4322f983 	.word	0x4322f983
 8003970:	08015de8 	.word	0x08015de8
 8003974:	20012a9c 	.word	0x20012a9c
 8003978:	20012a80 	.word	0x20012a80
 800397c:	20012a78 	.word	0x20012a78
 8003980:	40c90fdb 	.word	0x40c90fdb
 8003984:	20012a68 	.word	0x20012a68
 8003988:	20012a74 	.word	0x20012a74
 800398c:	20012a98 	.word	0x20012a98

08003990 <frand_a_b>:
//---------------------------------------------------------------------------
/**************
 * returns a random float between a and b
 *****************/
float_t frand_a_b(float_t a, float_t b)
{
 8003990:	b508      	push	{r3, lr}
 8003992:	ed2d 8b02 	vpush	{d8}
 8003996:	eef0 8a40 	vmov.f32	s17, s0
 800399a:	eeb0 8a60 	vmov.f32	s16, s1
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 800399e:	f004 fb6f 	bl	8008080 <rand>
 80039a2:	ee78 0a68 	vsub.f32	s1, s16, s17
}
 80039a6:	eeb0 0a68 	vmov.f32	s0, s17
 80039aa:	ecbd 8b02 	vpop	{d8}
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 80039ae:	ee07 0a90 	vmov	s15, r0
 80039b2:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
}
 80039b6:	eea7 0aa0 	vfma.f32	s0, s15, s1
 80039ba:	bd08      	pop	{r3, pc}

080039bc <MIDIrandVal>:
/*-----------------------------------------------------------------------------*/
/**************
 * returns a random integer between 0 and MIDI_MAX
 *****************/
uint8_t MIDIrandVal(void)
{
 80039bc:	b508      	push	{r3, lr}
	return (uint8_t)lrintf(frand_a_b(0 , MIDI_MAX));
 80039be:	eddf 0a05 	vldr	s1, [pc, #20]	; 80039d4 <MIDIrandVal+0x18>
 80039c2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80039d8 <MIDIrandVal+0x1c>
 80039c6:	f7ff ffe3 	bl	8003990 <frand_a_b>
 80039ca:	f003 f93d 	bl	8006c48 <lrintf>
}
 80039ce:	b2c0      	uxtb	r0, r0
 80039d0:	bd08      	pop	{r3, pc}
 80039d2:	bf00      	nop
 80039d4:	42fe0000 	.word	0x42fe0000
 80039d8:	00000000 	.word	0x00000000

080039dc <SVF_setReso>:

/****************************************************************************************************************/

void SVF_setReso(ResonantFilter* filter, float feedback)
{
	filter->q = 1-feedback;
 80039dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80039e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
	if(filter->q < 0.01f) filter->q = 0.01f;
 80039e4:	eddf 7a05 	vldr	s15, [pc, #20]	; 80039fc <SVF_setReso+0x20>
 80039e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	filter->q = 1-feedback;
 80039f0:	bf58      	it	pl
 80039f2:	eef0 7a40 	vmovpl.f32	s15, s0
 80039f6:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80039fa:	4770      	bx	lr
 80039fc:	3c23d70a 	.word	0x3c23d70a

08003a00 <SVF_setDrive>:
{
#if USE_SHAPER_NONLINEARITY
	filter->drive = drive;
	setDistortionShape(&filter->shaper, filter->drive);
#else
	filter->drive =  /*  0.4f +  */ (drive/MIDI_MAX)*(drive/MIDI_MAX)*6; // the output can be muted (at 0)
 8003a00:	ee07 1a90 	vmov	s15, r1
 8003a04:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003a24 <SVF_setDrive+0x24>
 8003a08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a10:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003a14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a1c:	edc0 7a06 	vstr	s15, [r0, #24]
#endif

}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	42fe0000 	.word	0x42fe0000

08003a28 <SVF_directSetFilterValue>:
//------------------------------------------------------------------------------------
void SVF_directSetFilterValue(ResonantFilter* filter, float val) // 0 < val < 1
{
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	ed2d 8b02 	vpush	{d8}
	if (val > 0.95) val = 0.95f;
 8003a30:	ee10 0a10 	vmov	r0, s0
{
 8003a34:	eeb0 8a40 	vmov.f32	s16, s0
	if (val > 0.95) val = 0.95f;
 8003a38:	f7fc fd2a 	bl	8000490 <__aeabi_f2d>
 8003a3c:	a310      	add	r3, pc, #64	; (adr r3, 8003a80 <SVF_directSetFilterValue+0x58>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fd f80d 	bl	8000a60 <__aeabi_dcmpgt>
 8003a46:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003a78 <SVF_directSetFilterValue+0x50>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	bf18      	it	ne
 8003a4e:	eeb0 8a67 	vmovne.f32	s16, s15
	filter->f = val*0.5f;
 8003a52:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003a56:	ee28 8a00 	vmul.f32	s16, s16, s0
	filter->g  = fastTan(_PI * filter->f );
 8003a5a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003a7c <SVF_directSetFilterValue+0x54>
	filter->f = val*0.5f;
 8003a5e:	ed84 8a01 	vstr	s16, [r4, #4]
	filter->g  = fastTan(_PI * filter->f );
 8003a62:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003a66:	f7ff f98d 	bl	8002d84 <fastTan>

}
 8003a6a:	ecbd 8b02 	vpop	{d8}
	filter->g  = fastTan(_PI * filter->f );
 8003a6e:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8003a72:	bd10      	pop	{r4, pc}
 8003a74:	f3af 8000 	nop.w
 8003a78:	3f733333 	.word	0x3f733333
 8003a7c:	40490fdb 	.word	0x40490fdb
 8003a80:	66666666 	.word	0x66666666
 8003a84:	3fee6666 	.word	0x3fee6666

08003a88 <SVF_initialize>:
{
 8003a88:	b538      	push	{r3, r4, r5, lr}
	filter->type = 1;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	7003      	strb	r3, [r0, #0]
	filter->f = 0.20f;
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <SVF_initialize+0x28>)
 8003a90:	6043      	str	r3, [r0, #4]
	filter->q = 0.9f;
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <SVF_initialize+0x2c>)
 8003a94:	60c3      	str	r3, [r0, #12]
	filter->s1 = 0;
 8003a96:	2500      	movs	r5, #0
{
 8003a98:	4604      	mov	r4, r0
	filter->drive = 0.4f;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <SVF_initialize+0x30>)
	filter->s1 = 0;
 8003a9c:	6105      	str	r5, [r0, #16]
	filter->s2 = 0;
 8003a9e:	6145      	str	r5, [r0, #20]
	filter->drive = 0.4f;
 8003aa0:	6183      	str	r3, [r0, #24]
	SVF_directSetFilterValue(filter,0.25f);
 8003aa2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8003aa6:	f7ff ffbf 	bl	8003a28 <SVF_directSetFilterValue>
	filter->zi = 0;	//input z^(-1)
 8003aaa:	61e5      	str	r5, [r4, #28]
}
 8003aac:	bd38      	pop	{r3, r4, r5, pc}
 8003aae:	bf00      	nop
 8003ab0:	3e4ccccd 	.word	0x3e4ccccd
 8003ab4:	3f666666 	.word	0x3f666666
 8003ab8:	3ecccccd 	.word	0x3ecccccd

08003abc <SVF_init>:
//=====================================================================================================
void SVF_init(void)
{
 8003abc:	b510      	push	{r4, lr}
	SVF_initialize(&SVFilter);
 8003abe:	4c05      	ldr	r4, [pc, #20]	; (8003ad4 <SVF_init+0x18>)
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff ffe1 	bl	8003a88 <SVF_initialize>
	SVF_initialize(&SVFilter2);
 8003ac6:	f104 0020 	add.w	r0, r4, #32
}
 8003aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SVF_initialize(&SVFilter2);
 8003ace:	f7ff bfdb 	b.w	8003a88 <SVF_initialize>
 8003ad2:	bf00      	nop
 8003ad4:	20003f10 	.word	0x20003f10

08003ad8 <Filter1Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter1Freq_set(uint8_t val)
{
 8003ad8:	b508      	push	{r3, lr}
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003ada:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003b00 <Filter1Freq_set+0x28>
 8003ade:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003b04 <Filter1Freq_set+0x2c>
 8003ae2:	f7ff f8e5 	bl	8002cb0 <Lin2Exp>
 8003ae6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003b08 <Filter1Freq_set+0x30>
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <Filter1Freq_set+0x34>)
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003aec:	4808      	ldr	r0, [pc, #32]	; (8003b10 <Filter1Freq_set+0x38>)
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003aee:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003af2:	ed83 0a00 	vstr	s0, [r3]
}
 8003af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003afa:	f7ff bf95 	b.w	8003a28 <SVF_directSetFilterValue>
 8003afe:	bf00      	nop
 8003b00:	45fa0000 	.word	0x45fa0000
 8003b04:	42a00000 	.word	0x42a00000
 8003b08:	472c4400 	.word	0x472c4400
 8003b0c:	20013c40 	.word	0x20013c40
 8003b10:	20003f10 	.word	0x20003f10

08003b14 <Filter1Res_set>:
//------------------------------------------------------------------------------------
void 	Filter1Res_set(uint8_t val)
{
	SVF_setReso(&SVFilter, val / MIDI_MAX);
 8003b14:	ee07 0a90 	vmov	s15, r0
 8003b18:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003b1c:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003b2c <Filter1Res_set+0x18>
 8003b20:	4803      	ldr	r0, [pc, #12]	; (8003b30 <Filter1Res_set+0x1c>)
 8003b22:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003b26:	f7ff bf59 	b.w	80039dc <SVF_setReso>
 8003b2a:	bf00      	nop
 8003b2c:	42fe0000 	.word	0x42fe0000
 8003b30:	20003f10 	.word	0x20003f10

08003b34 <Filter1Drive_set>:
}
//------------------------------------------------------------------------------------
void	Filter1Drive_set(uint8_t val)
{
	SVF_setDrive(&SVFilter, val);
 8003b34:	4601      	mov	r1, r0
 8003b36:	4801      	ldr	r0, [pc, #4]	; (8003b3c <Filter1Drive_set+0x8>)
 8003b38:	f7ff bf62 	b.w	8003a00 <SVF_setDrive>
 8003b3c:	20003f10 	.word	0x20003f10

08003b40 <Filter1Type_set>:
}
//------------------------------------------------------------------------------------
void 	Filter1Type_set(uint8_t val)
{
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003b40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b44:	ee07 0a90 	vmov	s15, r0
 8003b48:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003b4c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003b60 <Filter1Type_set+0x20>
{
 8003b50:	b508      	push	{r3, lr}
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003b52:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003b56:	f003 f877 	bl	8006c48 <lrintf>
 8003b5a:	4b02      	ldr	r3, [pc, #8]	; (8003b64 <Filter1Type_set+0x24>)
 8003b5c:	7018      	strb	r0, [r3, #0]
}
 8003b5e:	bd08      	pop	{r3, pc}
 8003b60:	42fe0000 	.word	0x42fe0000
 8003b64:	20003f10 	.word	0x20003f10

08003b68 <Filter2Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter2Freq_set(uint8_t val)
{
 8003b68:	b508      	push	{r3, lr}
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003b6a:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003b90 <Filter2Freq_set+0x28>
 8003b6e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003b94 <Filter2Freq_set+0x2c>
 8003b72:	f7ff f89d 	bl	8002cb0 <Lin2Exp>
 8003b76:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003b98 <Filter2Freq_set+0x30>
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <Filter2Freq_set+0x34>)
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 8003b7c:	4808      	ldr	r0, [pc, #32]	; (8003ba0 <Filter2Freq_set+0x38>)
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003b7e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003b82:	ed83 0a00 	vstr	s0, [r3]
}
 8003b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 8003b8a:	f7ff bf4d 	b.w	8003a28 <SVF_directSetFilterValue>
 8003b8e:	bf00      	nop
 8003b90:	45fa0000 	.word	0x45fa0000
 8003b94:	42a00000 	.word	0x42a00000
 8003b98:	472c4400 	.word	0x472c4400
 8003b9c:	20013c44 	.word	0x20013c44
 8003ba0:	20003f30 	.word	0x20003f30

08003ba4 <Filter2Res_set>:
//------------------------------------------------------------------------------------
void 	Filter2Res_set(uint8_t val)
{
	SVF_setReso(&SVFilter2, val / MIDI_MAX);
 8003ba4:	ee07 0a90 	vmov	s15, r0
 8003ba8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003bac:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003bbc <Filter2Res_set+0x18>
 8003bb0:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <Filter2Res_set+0x1c>)
 8003bb2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003bb6:	f7ff bf11 	b.w	80039dc <SVF_setReso>
 8003bba:	bf00      	nop
 8003bbc:	42fe0000 	.word	0x42fe0000
 8003bc0:	20003f30 	.word	0x20003f30

08003bc4 <Filter2Drive_set>:
}
//------------------------------------------------------------------------------------
void	Filter2Drive_set(uint8_t val)
{
	SVF_setDrive(&SVFilter2, val);
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	4801      	ldr	r0, [pc, #4]	; (8003bcc <Filter2Drive_set+0x8>)
 8003bc8:	f7ff bf1a 	b.w	8003a00 <SVF_setDrive>
 8003bcc:	20003f30 	.word	0x20003f30

08003bd0 <Filter2Type_set>:
}
//------------------------------------------------------------------------------------
void 	Filter2Type_set(uint8_t val)
{
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003bd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003bd4:	ee07 0a90 	vmov	s15, r0
 8003bd8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003bdc:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003bf4 <Filter2Type_set+0x24>
{
 8003be0:	b508      	push	{r3, lr}
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003be2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003be6:	f003 f82f 	bl	8006c48 <lrintf>
 8003bea:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <Filter2Type_set+0x28>)
 8003bec:	f883 0020 	strb.w	r0, [r3, #32]
}
 8003bf0:	bd08      	pop	{r3, pc}
 8003bf2:	bf00      	nop
 8003bf4:	42fe0000 	.word	0x42fe0000
 8003bf8:	20003f10 	.word	0x20003f10

08003bfc <SVF_calcSample>:

//------------------------------------------------------------------------------------

float SVF_calcSample(ResonantFilter* filter, float in)
{
 8003bfc:	b510      	push	{r4, lr}
	const float f 	= filter->g;
	//fix unstable filter for high f and r settings
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003bfe:	ed90 7a01 	vldr	s14, [r0, #4]
 8003c02:	eddf 7a66 	vldr	s15, [pc, #408]	; 8003d9c <SVF_calcSample+0x1a0>
{
 8003c06:	ed2d 8b0c 	vpush	{d8-d13}
 8003c0a:	eeb0 8a40 	vmov.f32	s16, s0


#if USE_SHAPER_NONLINEARITY
	const float x = (buf[i]/((float)0x7fff));
#else
	const float x = softClipTwo( in * filter->drive);
 8003c0e:	ed90 0a06 	vldr	s0, [r0, #24]
	const float f 	= filter->g;
 8003c12:	edd0 8a02 	vldr	s17, [r0, #8]
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1e:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	const float x = softClipTwo( in * filter->drive);
 8003c22:	ee28 0a00 	vmul.f32	s0, s16, s0
{
 8003c26:	4604      	mov	r4, r0
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003c28:	bfb4      	ite	lt
 8003c2a:	ed90 aa03 	vldrlt	s20, [r0, #12]
 8003c2e:	eeb0 aa6b 	vmovge.f32	s20, s23
	const float x = softClipTwo( in * filter->drive);
 8003c32:	f7ff f89b 	bl	8002d6c <softClipTwo>
#endif

#if ENABLE_NONLINEAR_INTEGRATORS
	// input with half sample delay, for non-linearities
	float ih = 0.5f * (x + filter->zi);
 8003c36:	edd4 7a07 	vldr	s15, [r4, #28]
	filter->zi = x;
 8003c3a:	ed84 0a07 	vstr	s0, [r4, #28]
	const float x = softClipTwo( in * filter->drive);
 8003c3e:	eeb0 ca40 	vmov.f32	s24, s0
	float ih = 0.5f * (x + filter->zi);
 8003c42:	ee70 7a27 	vadd.f32	s15, s0, s15
		You can trivially remove any saturator by setting the corresponding gain t0,...,t1 to 1. Also, you can simply scale any saturator (i.e. change clipping threshold) to 1/a*tanh(a*x) by writing
		double t1 = tanhXdX(a*s[0]);
	 */
#if ENABLE_NONLINEAR_INTEGRATORS
	const float scale = 0.5f;
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 8003c46:	ee7a ca0a 	vadd.f32	s25, s20, s20
 8003c4a:	ed94 0a04 	vldr	s0, [r4, #16]
 8003c4e:	ee20 0a6c 	vnmul.f32	s0, s0, s25
 8003c52:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8003c56:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8003c5a:	edd4 7a05 	vldr	s15, [r4, #20]
 8003c5e:	ee30 0a67 	vsub.f32	s0, s0, s15
	const float ff 	= f*f;
 8003c62:	ee28 9aa8 	vmul.f32	s18, s17, s17
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 8003c66:	ee20 0a29 	vmul.f32	s0, s0, s19
 8003c6a:	f7ff f839 	bl	8002ce0 <tanhXdX>
 8003c6e:	eef0 aa40 	vmov.f32	s21, s0
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 8003c72:	ed94 0a04 	vldr	s0, [r4, #16]
 8003c76:	ee20 0a29 	vmul.f32	s0, s0, s19
 8003c7a:	f7ff f831 	bl	8002ce0 <tanhXdX>
	const float t0 = 1;
	const float t1 = 1;
#endif

	// g# the denominators for solutions of individual stages
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003c7e:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8003c82:	eeb0 7a6b 	vmov.f32	s14, s23
 8003c86:	ee77 7aa7 	vadd.f32	s15, s15, s15
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 8003c8a:	eeb0 da40 	vmov.f32	s26, s0
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003c8e:	eea7 7a8a 	vfma.f32	s14, s15, s20

	const float s1 = filter->s1;
 8003c92:	ed94 0a04 	vldr	s0, [r4, #16]
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003c96:	eecb da87 	vdiv.f32	s27, s23, s14
	const float s2 = filter->s2;

	// solve feedback
	const float f1 = ff*g0*t0*t1;
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003c9a:	ed94 7a05 	vldr	s14, [r4, #20]
	const float f1 = ff*g0*t0*t1;
 8003c9e:	ee69 7a2d 	vmul.f32	s15, s18, s27
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003ca2:	ee68 6aad 	vmul.f32	s13, s17, s27
	const float f1 = ff*g0*t0*t1;
 8003ca6:	ee67 7aaa 	vmul.f32	s15, s15, s21
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003caa:	ee66 6a8d 	vmul.f32	s13, s13, s26
	const float f1 = ff*g0*t0*t1;
 8003cae:	ee67 7a8d 	vmul.f32	s15, s15, s26
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003cb2:	eeac 7a27 	vfma.f32	s14, s24, s15
 8003cb6:	ee77 7aab 	vadd.f32	s15, s15, s23
 8003cba:	eea6 7a80 	vfma.f32	s14, s13, s0
 8003cbe:	eec7 9a27 	vdiv.f32	s19, s14, s15


	// solve the remaining stages with nonlinear gain
	const float xx = t0*(x - y1);
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003cc2:	f7ff f853 	bl	8002d6c <softClipTwo>
	const float xx = t0*(x - y1);
 8003cc6:	ee3c ba69 	vsub.f32	s22, s24, s19
 8003cca:	ee2b ba2a 	vmul.f32	s22, s22, s21
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003cce:	eea8 0a8b 	vfma.f32	s0, s17, s22
 8003cd2:	ee60 da2d 	vmul.f32	s27, s0, s27

	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003cd6:	ed94 0a04 	vldr	s0, [r4, #16]
 8003cda:	f7ff f847 	bl	8002d6c <softClipTwo>
 8003cde:	ee7a aaaa 	vadd.f32	s21, s21, s21
 8003ce2:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8003ce6:	ee2a aa6a 	vnmul.f32	s20, s20, s21
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003cea:	edd4 7a05 	vldr	s15, [r4, #20]

	float out;


	switch(filter->type)
 8003cee:	7823      	ldrb	r3, [r4, #0]
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003cf0:	eeaa ba2d 	vfma.f32	s22, s20, s27
	switch(filter->type)
 8003cf4:	3b01      	subs	r3, #1
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003cf6:	eea8 0a8b 	vfma.f32	s0, s17, s22
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003cfa:	ee68 8a8d 	vmul.f32	s17, s17, s26
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003cfe:	ed84 0a04 	vstr	s0, [r4, #16]
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003d02:	eee8 7aad 	vfma.f32	s15, s17, s27
 8003d06:	edc4 7a05 	vstr	s15, [r4, #20]
	switch(filter->type)
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d80a      	bhi.n	8003d24 <SVF_calcSample+0x128>
 8003d0e:	e8df f003 	tbb	[pc, r3]
 8003d12:	1c03      	.short	0x1c03
 8003d14:	2c27      	.short	0x2c27
 8003d16:	35          	.byte	0x35
 8003d17:	00          	.byte	0x00
	case FILTER_LP:
#if USE_SHAPER_NONLINEARITY

		buf[i] = FILTER_GAIN * fastTanh( distortion_calcSampleFloat(&filter->shaper, y1));
#else
		out = fastTanh(y1) ;
 8003d18:	eeb0 0a69 	vmov.f32	s0, s19
 8003d1c:	f7fe fffe 	bl	8002d1c <fastTanh>
 8003d20:	eeb0 8a40 	vmov.f32	s16, s0
	default:
		out = in ;
		break;
	}

	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 8003d24:	eeb4 8aeb 	vcmpe.f32	s16, s23
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	dc33      	bgt.n	8003d96 <SVF_calcSample+0x19a>
	out = (out < -1.0f) ? -1.0f : out;
 8003d2e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003d32:	eeb4 8a67 	vcmp.f32	s16, s15
 8003d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3a:	bf48      	it	mi
 8003d3c:	eeb0 8a67 	vmovmi.f32	s16, s15

	return out;

}
 8003d40:	eeb0 0a48 	vmov.f32	s0, s16
 8003d44:	ecbd 8b0c 	vpop	{d8-d13}
 8003d48:	bd10      	pop	{r4, pc}
		const float h = x - ugb - y1;
 8003d4a:	eeb0 0a4c 	vmov.f32	s0, s24
 8003d4e:	eeac 0aed 	vfms.f32	s0, s25, s27
		out = h * FILTER_GAIN_F;
 8003d52:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003da0 <SVF_calcSample+0x1a4>
		const float h = x - ugb - y1;
 8003d56:	ee30 8a69 	vsub.f32	s16, s0, s19
		out = h * FILTER_GAIN_F;
 8003d5a:	ee28 8a27 	vmul.f32	s16, s16, s15
	break;
 8003d5e:	e7e1      	b.n	8003d24 <SVF_calcSample+0x128>
		out = y0 * FILTER_GAIN_F;
 8003d60:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 8003da0 <SVF_calcSample+0x1a4>
 8003d64:	ee2d 8a88 	vmul.f32	s16, s27, s16
		break;
 8003d68:	e7dc      	b.n	8003d24 <SVF_calcSample+0x128>
		out = (x-ugb) * FILTER_GAIN_F;
 8003d6a:	eeb0 0a4c 	vmov.f32	s0, s24
 8003d6e:	eeac 0aed 	vfms.f32	s0, s25, s27
 8003d72:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003da0 <SVF_calcSample+0x1a4>
 8003d76:	ee20 8a27 	vmul.f32	s16, s0, s15
	break;
 8003d7a:	e7d3      	b.n	8003d24 <SVF_calcSample+0x128>
		const float h = x - ugb - y1;
 8003d7c:	eeb0 0a4c 	vmov.f32	s0, s24
 8003d80:	eeac 0aed 	vfms.f32	s0, s25, s27
		out = (y1-h) * FILTER_GAIN_F;
 8003d84:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8003da0 <SVF_calcSample+0x1a4>
		const float h = x - ugb - y1;
 8003d88:	ee30 0a69 	vsub.f32	s0, s0, s19
		out = (y1-h) * FILTER_GAIN_F;
 8003d8c:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8003d90:	ee20 8a08 	vmul.f32	s16, s0, s16
	break;
 8003d94:	e7c6      	b.n	8003d24 <SVF_calcSample+0x128>
	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 8003d96:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003d9a:	e7d1      	b.n	8003d40 <SVF_calcSample+0x144>
 8003d9c:	3ee6594b 	.word	0x3ee6594b
 8003da0:	3f6147ae 	.word	0x3f6147ae

08003da4 <seq_tempo_set>:
Sequencer_t seq _CCM_;
NoteGenerator_t noteGen _CCM_;

/*--------------------------------------------------------------------------------------------*/
void seq_tempo_set(uint8_t val) {
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 8003da4:	ee07 0a90 	vmov	s15, r0
 8003da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dac:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003ddc <seq_tempo_set+0x38>
 8003db0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003de0 <seq_tempo_set+0x3c>
 8003db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003db8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
void seq_tempo_set(uint8_t val) {
 8003dc0:	b510      	push	{r4, lr}
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 8003dc2:	4c08      	ldr	r4, [pc, #32]	; (8003de4 <seq_tempo_set+0x40>)
 8003dc4:	ee77 7a80 	vadd.f32	s15, s15, s0
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003dc8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003de8 <seq_tempo_set+0x44>
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 8003dcc:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003dd0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003dd4:	f002 ff38 	bl	8006c48 <lrintf>
 8003dd8:	6460      	str	r0, [r4, #68]	; 0x44
	//seq.smp_count = seq.steptime;
}
 8003dda:	bd10      	pop	{r4, pc}
 8003ddc:	44480000 	.word	0x44480000
 8003de0:	42fe0000 	.word	0x42fe0000
 8003de4:	20003f50 	.word	0x20003f50
 8003de8:	4a217fc0 	.word	0x4a217fc0

08003dec <seq_gateTime_set>:
/*-------------------------------------------------------*/
void seq_gateTime_set(uint8_t val) // val is a number of samples
{
	seq.gateTime = seq.steptime * ((0.9f - 0.1f) * val / MIDI_MAX + 0.1f); // from 10% to 90% of each step duration
 8003dec:	ee07 0a90 	vmov	s15, r0
 8003df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003e24 <seq_gateTime_set+0x38>
 8003df8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003e28 <seq_gateTime_set+0x3c>
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <seq_gateTime_set+0x40>)
 8003dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e06:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003e30 <seq_gateTime_set+0x44>
 8003e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e0e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003e12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e1e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8003e22:	4770      	bx	lr
 8003e24:	3f4ccccc 	.word	0x3f4ccccc
 8003e28:	42fe0000 	.word	0x42fe0000
 8003e2c:	20003f50 	.word	0x20003f50
 8003e30:	3dcccccd 	.word	0x3dcccccd

08003e34 <seq_chooseScale>:
		noteGen.transpose = -2;
	}
}

/*-------------------------------------------------------*/
void seq_chooseScale(int16_t idx) {
 8003e34:	b280      	uxth	r0, r0
 8003e36:	280e      	cmp	r0, #14
 8003e38:	bf96      	itet	ls
 8003e3a:	4b05      	ldrls	r3, [pc, #20]	; (8003e50 <seq_chooseScale+0x1c>)
 8003e3c:	4a05      	ldrhi	r2, [pc, #20]	; (8003e54 <seq_chooseScale+0x20>)
 8003e3e:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
		break;
	default:
		currentScale = (uint8_t*) MIDIscale11;
		break;
	}
	noteGen.currentScale = currentScale;
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <seq_chooseScale+0x24>)
 8003e44:	659a      	str	r2, [r3, #88]	; 0x58
	noteGen.chRequested = true;
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	08015dac 	.word	0x08015dac
 8003e54:	08015be3 	.word	0x08015be3
 8003e58:	20003f50 	.word	0x20003f50

08003e5c <seq_scale_set>:
		seq_chooseScale(noteGen.scaleIndex);
	}
}
/*-------------------------------------------------------*/
void seq_scale_set(uint8_t val) {
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 8003e5c:	ee07 0a90 	vmov	s15, r0
 8003e60:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003e64:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8003e90 <seq_scale_set+0x34>
void seq_scale_set(uint8_t val) {
 8003e68:	b507      	push	{r0, r1, r2, lr}
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 8003e6a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003e6e:	f002 ff2b 	bl	8006cc8 <rintf>
 8003e72:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <seq_scale_set+0x38>)
 8003e78:	edcd 7a01 	vstr	s15, [sp, #4]
 8003e7c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003e80:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	seq_chooseScale(noteGen.scaleIndex);
}
 8003e84:	b003      	add	sp, #12
 8003e86:	f85d eb04 	ldr.w	lr, [sp], #4
	seq_chooseScale(noteGen.scaleIndex);
 8003e8a:	f7ff bfd3 	b.w	8003e34 <seq_chooseScale>
 8003e8e:	bf00      	nop
 8003e90:	3de1c387 	.word	0x3de1c387
 8003e94:	20003f50 	.word	0x20003f50

08003e98 <seq_switchMovingSeq>:
	else
		noteGen.automaticON = true;
}
/*-------------------------------------------------------*/
void seq_switchMovingSeq(uint8_t val) {
	if (val > 63)
 8003e98:	283f      	cmp	r0, #63	; 0x3f
 8003e9a:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <seq_switchMovingSeq+0x10>)
		noteGen.automaticON = true;
 8003e9c:	bf8c      	ite	hi
 8003e9e:	2201      	movhi	r2, #1
	else
		noteGen.automaticON = false;
 8003ea0:	2200      	movls	r2, #0
 8003ea2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
}
 8003ea6:	4770      	bx	lr
 8003ea8:	20003f50 	.word	0x20003f50

08003eac <seq_switchMute>:
	else
		noteGen.someNotesMuted = true;
}
/*-------------------------------------------------------*/
void seq_switchMute(uint8_t val) {
	switch (val) {
 8003eac:	b130      	cbz	r0, 8003ebc <seq_switchMute+0x10>
 8003eae:	287f      	cmp	r0, #127	; 0x7f
 8003eb0:	d107      	bne.n	8003ec2 <seq_switchMute+0x16>
	case MIDI_MAXi:
		noteGen.someNotesMuted = true;
 8003eb2:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <seq_switchMute+0x18>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		break;
 8003eba:	4770      	bx	lr
	case 0:
		noteGen.someNotesMuted = false;
 8003ebc:	4b01      	ldr	r3, [pc, #4]	; (8003ec4 <seq_switchMute+0x18>)
 8003ebe:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
		break;
	}
}
 8003ec2:	4770      	bx	lr
 8003ec4:	20003f50 	.word	0x20003f50

08003ec8 <seq_freqMax_set>:
		//pitchGenChangePoints();
	}
}
/*-------------------------------------------------------*/
void seq_freqMax_set(uint8_t val) {
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 8003ec8:	ee07 0a90 	vmov	s15, r0
 8003ecc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003ef8 <seq_freqMax_set+0x30>
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <seq_freqMax_set+0x34>)
 8003ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void seq_freqMax_set(uint8_t val) {
 8003ed6:	b082      	sub	sp, #8
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 8003ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee0:	edcd 7a01 	vstr	s15, [sp, #4]
 8003ee4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ee8:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
	noteGen.chRequested = true;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
}
 8003ef2:	b002      	add	sp, #8
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	3d810204 	.word	0x3d810204
 8003efc:	20003f50 	.word	0x20003f50

08003f00 <seq_sequence_new>:

/*--------------------------------------------------------------------------------------------*/
void seq_sequence_new(void) {
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int16_t relativeNote;
	int16_t octaveShift;
	int16_t index;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		relativeNote = noteGen.currentScale[lrintf(
 8003f02:	4d1d      	ldr	r5, [pc, #116]	; (8003f78 <seq_sequence_new+0x78>)
void seq_sequence_new(void) {
 8003f04:	ed2d 8b02 	vpush	{d8}
				frand_a_b(1, noteGen.currentScale[0]))];
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8003f08:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8003f7c <seq_sequence_new+0x7c>
void seq_sequence_new(void) {
 8003f0c:	2400      	movs	r4, #0
 8003f0e:	462f      	mov	r7, r5
		relativeNote = noteGen.currentScale[lrintf(
 8003f10:	6dae      	ldr	r6, [r5, #88]	; 0x58
 8003f12:	7833      	ldrb	r3, [r6, #0]
 8003f14:	ee00 3a90 	vmov	s1, r3
 8003f18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f1c:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8003f20:	f7ff fd36 	bl	8003990 <frand_a_b>
 8003f24:	f002 fe90 	bl	8006c48 <lrintf>
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8003f28:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
		relativeNote = noteGen.currentScale[lrintf(
 8003f2c:	5c36      	ldrb	r6, [r6, r0]
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8003f2e:	ee00 3a90 	vmov	s1, r3
 8003f32:	eeb0 0a48 	vmov.f32	s0, s16
 8003f36:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8003f3a:	f7ff fd29 	bl	8003990 <frand_a_b>
 8003f3e:	f002 fe83 	bl	8006c48 <lrintf>
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 8003f42:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8003f46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 8003f4a:	3b15      	subs	r3, #21
 8003f4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003f50:	4430      	add	r0, r6
 8003f52:	b200      	sxth	r0, r0

		while (index > MAX_NOTE_INDEX)
 8003f54:	286a      	cmp	r0, #106	; 0x6a
 8003f56:	dc09      	bgt.n	8003f6c <seq_sequence_new+0x6c>
			index -= 12;
		while (index < 0)
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	db09      	blt.n	8003f70 <seq_sequence_new+0x70>
			index += 12;
		seq.track1.note[i] = index; // note frequency is in notesFreq[index]
 8003f5c:	f827 0014 	strh.w	r0, [r7, r4, lsl #1]
 8003f60:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8003f62:	2c10      	cmp	r4, #16
 8003f64:	d1d4      	bne.n	8003f10 <seq_sequence_new+0x10>
	}
}
 8003f66:	ecbd 8b02 	vpop	{d8}
 8003f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6c:	380c      	subs	r0, #12
 8003f6e:	e7f0      	b.n	8003f52 <seq_sequence_new+0x52>
 8003f70:	300c      	adds	r0, #12
 8003f72:	b200      	sxth	r0, r0
 8003f74:	e7f0      	b.n	8003f58 <seq_sequence_new+0x58>
 8003f76:	bf00      	nop
 8003f78:	20003f50 	.word	0x20003f50
 8003f7c:	00000000 	.word	0x00000000

08003f80 <seq_transpose>:
/*--------------------------------------------------------------------------------------------*/
void seq_transpose(void) {
	int16_t noteIndex;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 8003f80:	4a0d      	ldr	r2, [pc, #52]	; (8003fb8 <seq_transpose+0x38>)
void seq_transpose(void) {
 8003f82:	b510      	push	{r4, lr}
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 8003f84:	f8b2 4060 	ldrh.w	r4, [r2, #96]	; 0x60
 8003f88:	1e91      	subs	r1, r2, #2
 8003f8a:	f102 001e 	add.w	r0, r2, #30
 8003f8e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8003f92:	4423      	add	r3, r4
 8003f94:	b21b      	sxth	r3, r3
		while (noteIndex > MAX_NOTE_INDEX)
 8003f96:	2b6a      	cmp	r3, #106	; 0x6a
 8003f98:	dc08      	bgt.n	8003fac <seq_transpose+0x2c>
			noteIndex -= 12;
		while (noteIndex < 0)
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	db08      	blt.n	8003fb0 <seq_transpose+0x30>
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8003f9e:	4281      	cmp	r1, r0
			noteIndex += 12;
		seq.track1.note[i] = noteIndex;
 8003fa0:	800b      	strh	r3, [r1, #0]
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8003fa2:	d1f4      	bne.n	8003f8e <seq_transpose+0xe>
	}
	noteGen.transpose = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
}
 8003faa:	bd10      	pop	{r4, pc}
 8003fac:	3b0c      	subs	r3, #12
 8003fae:	e7f1      	b.n	8003f94 <seq_transpose+0x14>
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	b21b      	sxth	r3, r3
 8003fb4:	e7f1      	b.n	8003f9a <seq_transpose+0x1a>
 8003fb6:	bf00      	nop
 8003fb8:	20003f50 	.word	0x20003f50

08003fbc <sequencer_init>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_init(void) {
 8003fbc:	b510      	push	{r4, lr}
	seq.tempo = INIT_TEMPO;
 8003fbe:	4c11      	ldr	r4, [pc, #68]	; (8004004 <sequencer_init+0x48>)
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <sequencer_init+0x4c>)
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003fc2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800400c <sequencer_init+0x50>
	seq.tempo = INIT_TEMPO;
 8003fc6:	6423      	str	r3, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003fc8:	f002 fe3e 	bl	8006c48 <lrintf>
	seq.smp_count = 0;
 8003fcc:	2300      	movs	r3, #0
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003fce:	6460      	str	r0, [r4, #68]	; 0x44
	seq.smp_count = 0;
 8003fd0:	64a3      	str	r3, [r4, #72]	; 0x48
	seq.step_idx = 0;
 8003fd2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	seq.gateTime = seq.steptime / 2;

	noteGen.transpose = 0;
	noteGen.automaticON = false;
 8003fd6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	noteGen.glideON = false;
 8003fda:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	noteGen.chRequested = false;
 8003fde:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	noteGen.someNotesMuted = false;
 8003fe2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	noteGen.scaleIndex = 0;
 8003fe6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	noteGen.octaveSpread = 4;
	noteGen.rootNote = 36;
 8003fea:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	seq.gateTime = seq.steptime / 2;
 8003fee:	1040      	asrs	r0, r0, #1
	noteGen.octaveSpread = 4;
 8003ff0:	4a07      	ldr	r2, [pc, #28]	; (8004010 <sequencer_init+0x54>)
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <sequencer_init+0x58>)
	seq.gateTime = seq.steptime / 2;
 8003ff4:	6520      	str	r0, [r4, #80]	; 0x50
	noteGen.octaveSpread = 4;
 8003ff6:	65e2      	str	r2, [r4, #92]	; 0x5c
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 8003ff8:	65a3      	str	r3, [r4, #88]	; 0x58

	seq_sequence_new();
}
 8003ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seq_sequence_new();
 8003ffe:	f7ff bf7f 	b.w	8003f00 <seq_sequence_new>
 8004002:	bf00      	nop
 8004004:	20003f50 	.word	0x20003f50
 8004008:	43a00000 	.word	0x43a00000
 800400c:	46013300 	.word	0x46013300
 8004010:	00240004 	.word	0x00240004
 8004014:	08015bf8 	.word	0x08015bf8

08004018 <sequencer_process>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_process(void) // To be called at each sample treatment
{
 8004018:	b510      	push	{r4, lr}
	/* If we have reached a new step ....  */
	if (seq.smp_count-- <= 0) {
 800401a:	4c0c      	ldr	r4, [pc, #48]	; (800404c <sequencer_process+0x34>)
 800401c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800401e:	1e5a      	subs	r2, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	64a2      	str	r2, [r4, #72]	; 0x48
 8004024:	dc11      	bgt.n	800404a <sequencer_process+0x32>
		/* If we are at the beginning of a new sequence .... */
		if (seq.step_idx == 0) {
 8004026:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 800402a:	b90b      	cbnz	r3, 8004030 <sequencer_process+0x18>
			sequencer_newSequence_action();
 800402c:	f000 fa74 	bl	8004518 <sequencer_newSequence_action>
		}
		sequencer_newStep_action();
 8004030:	f000 f9d0 	bl	80043d4 <sequencer_newStep_action>

		seq.smp_count = seq.steptime; // reload the counter
 8004034:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004036:	64a3      	str	r3, [r4, #72]	; 0x48
		seq.step_idx++;
 8004038:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800403c:	3301      	adds	r3, #1
 800403e:	b21b      	sxth	r3, r3
		if (seq.step_idx >= NUMBER_STEPS)
 8004040:	2b0f      	cmp	r3, #15
			seq.step_idx = 0;
 8004042:	bfc8      	it	gt
 8004044:	2300      	movgt	r3, #0
 8004046:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c

	}
}
 800404a:	bd10      	pop	{r4, pc}
 800404c:	20003f50 	.word	0x20003f50

08004050 <autoSound_set>:
static enum timbre sound _CCM_;

/*===============================================================================================================*/

void autoSound_set(int8_t val) {
	autoSound = val;
 8004050:	4b01      	ldr	r3, [pc, #4]	; (8004058 <autoSound_set+0x8>)
 8004052:	7018      	strb	r0, [r3, #0]
}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20003fb8 	.word	0x20003fb8

0800405c <soundNumber_get>:
	}
}
/*---------------------------------------------------------*/
uint8_t soundNumber_get(void) {
	return sound;
}
 800405c:	4b01      	ldr	r3, [pc, #4]	; (8004064 <soundNumber_get+0x8>)
 800405e:	7858      	ldrb	r0, [r3, #1]
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20003fb8 	.word	0x20003fb8

08004068 <AmpLFO_amp_set>:
	}
}

/*-------------------------------------------------------*/
void AmpLFO_amp_set(uint8_t val) {
	amp_lfo.amp = val / MIDI_MAX;
 8004068:	ee07 0a90 	vmov	s15, r0
 800406c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004080 <AmpLFO_amp_set+0x18>
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <AmpLFO_amp_set+0x1c>)
 8004072:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407a:	edc3 7a00 	vstr	s15, [r3]
}
 800407e:	4770      	bx	lr
 8004080:	42fe0000 	.word	0x42fe0000
 8004084:	20003e90 	.word	0x20003e90

08004088 <AmpLFO_freq_set>:
/*-------------------------------------------------------*/
void AmpLFO_freq_set(uint8_t val) {
	amp_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8004088:	ee07 0a90 	vmov	s15, r0
 800408c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80040a0 <AmpLFO_freq_set+0x18>
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <AmpLFO_freq_set+0x1c>)
 8004092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800409a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800409e:	4770      	bx	lr
 80040a0:	3dc18306 	.word	0x3dc18306
 80040a4:	20003e90 	.word	0x20003e90

080040a8 <Filt1LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt1LFO_amp_set(uint8_t val) {
	filt_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 80040a8:	ee07 0a90 	vmov	s15, r0
 80040ac:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80040c0 <Filt1LFO_amp_set+0x18>
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <Filt1LFO_amp_set+0x1c>)
 80040b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ba:	edc3 7a00 	vstr	s15, [r3]
}
 80040be:	4770      	bx	lr
 80040c0:	3e810204 	.word	0x3e810204
 80040c4:	20003ed0 	.word	0x20003ed0

080040c8 <Filt1LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt1LFO_freq_set(uint8_t val) {
	filt_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 80040c8:	ee07 0a90 	vmov	s15, r0
 80040cc:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80040e0 <Filt1LFO_freq_set+0x18>
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <Filt1LFO_freq_set+0x1c>)
 80040d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040da:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80040de:	4770      	bx	lr
 80040e0:	3dc18306 	.word	0x3dc18306
 80040e4:	20003ed0 	.word	0x20003ed0

080040e8 <Filt2LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt2LFO_amp_set(uint8_t val) {
	filt2_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 80040e8:	ee07 0a90 	vmov	s15, r0
 80040ec:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004100 <Filt2LFO_amp_set+0x18>
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <Filt2LFO_amp_set+0x1c>)
 80040f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040fa:	edc3 7a00 	vstr	s15, [r3]
}
 80040fe:	4770      	bx	lr
 8004100:	3e810204 	.word	0x3e810204
 8004104:	20003eb0 	.word	0x20003eb0

08004108 <Filt2LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt2LFO_freq_set(uint8_t val) {
	filt2_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8004108:	ee07 0a90 	vmov	s15, r0
 800410c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004120 <Filt2LFO_freq_set+0x18>
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <Filt2LFO_freq_set+0x1c>)
 8004112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800411e:	4770      	bx	lr
 8004120:	3dc18306 	.word	0x3dc18306
 8004124:	20003eb0 	.word	0x20003eb0

08004128 <VibratoAmp_set>:
	} else
		vibr_lfo.amp = vibr_lfo.last_amp;
}
/*-------------------------------------------------------*/
void VibratoAmp_set(uint8_t val) {
	vibr_lfo.amp = MAX_VIBRATO_AMP / MIDI_MAX * val;
 8004128:	ee07 0a90 	vmov	s15, r0
 800412c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004140 <VibratoAmp_set+0x18>
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <VibratoAmp_set+0x1c>)
 8004132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413a:	edc3 7a00 	vstr	s15, [r3]
}
 800413e:	4770      	bx	lr
 8004140:	3b810204 	.word	0x3b810204
 8004144:	20003ef0 	.word	0x20003ef0

08004148 <VibratoFreq_set>:
/*-------------------------------------------------------*/
void VibratoFreq_set(uint8_t val) {
	vibr_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8004148:	ee07 0a90 	vmov	s15, r0
 800414c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004160 <VibratoFreq_set+0x18>
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <VibratoFreq_set+0x1c>)
 8004152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800415a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800415e:	4770      	bx	lr
 8004160:	3dc18306 	.word	0x3dc18306
 8004164:	20003ef0 	.word	0x20003ef0

08004168 <Delay_switch>:
		delayON = true;
}
/*-------------------------------------------------------*/
void Delay_switch(uint8_t val) {

	if (val > 63)
 8004168:	283f      	cmp	r0, #63	; 0x3f
 800416a:	4b04      	ldr	r3, [pc, #16]	; (800417c <Delay_switch+0x14>)
 800416c:	d902      	bls.n	8004174 <Delay_switch+0xc>
		delayON = true;
 800416e:	2201      	movs	r2, #1
 8004170:	709a      	strb	r2, [r3, #2]
	else {
		delayON = false;
		Delay_clean();
	}
}
 8004172:	4770      	bx	lr
		delayON = false;
 8004174:	2200      	movs	r2, #0
 8004176:	709a      	strb	r2, [r3, #2]
		Delay_clean();
 8004178:	f7fe ba4a 	b.w	8002610 <Delay_clean>
 800417c:	20003fb8 	.word	0x20003fb8

08004180 <Filter_Random_switch>:
	else
		autoFilterON = true;
}
/*-------------------------------------------------------*/
void Filter_Random_switch(uint8_t val) {
	if (val > 63)
 8004180:	283f      	cmp	r0, #63	; 0x3f
 8004182:	4b03      	ldr	r3, [pc, #12]	; (8004190 <Filter_Random_switch+0x10>)
		autoFilterON = true;
 8004184:	bf8c      	ite	hi
 8004186:	2201      	movhi	r2, #1
	else
		autoFilterON = false;
 8004188:	2200      	movls	r2, #0
 800418a:	70da      	strb	r2, [r3, #3]
}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20003fb8 	.word	0x20003fb8

08004194 <Chorus_switch>:
		chorusON = true;
}
/*-------------------------------------------------------*/
void Chorus_switch(uint8_t val) {

	if (val > 63)
 8004194:	283f      	cmp	r0, #63	; 0x3f
 8004196:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <Chorus_switch+0x10>)
		chorusON = true;
 8004198:	bf8c      	ite	hi
 800419a:	2201      	movhi	r2, #1
	else
		chorusON = false;
 800419c:	2200      	movls	r2, #0
 800419e:	711a      	strb	r2, [r3, #4]
}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20003fb8 	.word	0x20003fb8

080041a8 <Phaser_switch>:
/*-------------------------------------------------------*/
void Phaser_switch(uint8_t val) {

	if (val > 63)
 80041a8:	283f      	cmp	r0, #63	; 0x3f
 80041aa:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <Phaser_switch+0x10>)
		phaserON = true;
 80041ac:	bf8c      	ite	hi
 80041ae:	2201      	movhi	r2, #1
	else
		phaserON = false;
 80041b0:	2200      	movls	r2, #0
 80041b2:	715a      	strb	r2, [r3, #5]
}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20003fb8 	.word	0x20003fb8

080041bc <Sound_set>:
	else
		sound = 0;
}
/*-------------------------------------------------------*/
void Sound_set(uint8_t val) {
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 80041bc:	ee07 0a90 	vmov	s15, r0
 80041c0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80041c4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80041f8 <Sound_set+0x3c>
void Sound_set(uint8_t val) {
 80041c8:	b507      	push	{r0, r1, r2, lr}
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 80041ca:	ee20 0a27 	vmul.f32	s0, s0, s15
 80041ce:	f002 fd7b 	bl	8006cc8 <rintf>
 80041d2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80041d6:	4a09      	ldr	r2, [pc, #36]	; (80041fc <Sound_set+0x40>)
 80041d8:	edcd 7a01 	vstr	s15, [sp, #4]
 80041dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041e0:	7053      	strb	r3, [r2, #1]
	if (sound != ADDITIVE)
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d004      	beq.n	80041f0 <Sound_set+0x34>
		AdditiveGen_newWaveform();
}
 80041e6:	b003      	add	sp, #12
 80041e8:	f85d eb04 	ldr.w	lr, [sp], #4
		AdditiveGen_newWaveform();
 80041ec:	f7ff b942 	b.w	8003474 <AdditiveGen_newWaveform>
}
 80041f0:	b003      	add	sp, #12
 80041f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f6:	bf00      	nop
 80041f8:	3df1e3c8 	.word	0x3df1e3c8
 80041fc:	20003fb8 	.word	0x20003fb8

08004200 <FM_OP1_freq_set>:
/*******************************************************************************************************************************/

void FM_OP1_freq_set(uint8_t val) {
	FM_op_freq_set(&op1, val);
 8004200:	4601      	mov	r1, r0
 8004202:	4801      	ldr	r0, [pc, #4]	; (8004208 <FM_OP1_freq_set+0x8>)
 8004204:	f7fe bdf2 	b.w	8002dec <FM_op_freq_set>
 8004208:	20003e18 	.word	0x20003e18

0800420c <FM_OP1_modInd_set>:
}
/*-------------------------------------------------------*/
void FM_OP1_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op1, val);
 800420c:	4601      	mov	r1, r0
 800420e:	4801      	ldr	r0, [pc, #4]	; (8004214 <FM_OP1_modInd_set+0x8>)
 8004210:	f7fe bdfa 	b.w	8002e08 <FM_op_modInd_set>
 8004214:	20003e18 	.word	0x20003e18

08004218 <FM_OP2_freq_set>:
}

/*----------------------------------------------------------------------------------------------------------------------------*/
void FM_OP2_freq_set(uint8_t val) {
 8004218:	b508      	push	{r3, lr}
	//FM_op_freq_set(&op2, val);
	op2.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op2 is a multiple of the main pitch freq (op1)
 800421a:	eddf 0a05 	vldr	s1, [pc, #20]	; 8004230 <FM_OP2_freq_set+0x18>
 800421e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004234 <FM_OP2_freq_set+0x1c>
 8004222:	f7fe fd45 	bl	8002cb0 <Lin2Exp>
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <FM_OP2_freq_set+0x20>)
 8004228:	ed83 0a06 	vstr	s0, [r3, #24]
	//op2.mul = roundf(32 * val/MIDI_MAX);
}
 800422c:	bd08      	pop	{r3, pc}
 800422e:	bf00      	nop
 8004230:	42000000 	.word	0x42000000
 8004234:	3e4ccccd 	.word	0x3e4ccccd
 8004238:	20003df8 	.word	0x20003df8

0800423c <FM_OP2_modInd_set>:
		op2.mul *= 0.99f;
	}
}
/*-------------------------------------------------------*/
void FM_OP2_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op2, val);
 800423c:	4601      	mov	r1, r0
 800423e:	4801      	ldr	r0, [pc, #4]	; (8004244 <FM_OP2_modInd_set+0x8>)
 8004240:	f7fe bde2 	b.w	8002e08 <FM_op_modInd_set>
 8004244:	20003df8 	.word	0x20003df8

08004248 <FM_OP3_freq_set>:
}

/*------------------------------------------------------------------------------------------------------------------------------*/
void FM_OP3_freq_set(uint8_t val) {
 8004248:	b508      	push	{r3, lr}
	op3.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op3 is a multiple of the main pitch freq (op1)
 800424a:	eddf 0a05 	vldr	s1, [pc, #20]	; 8004260 <FM_OP3_freq_set+0x18>
 800424e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004264 <FM_OP3_freq_set+0x1c>
 8004252:	f7fe fd2d 	bl	8002cb0 <Lin2Exp>
 8004256:	4b04      	ldr	r3, [pc, #16]	; (8004268 <FM_OP3_freq_set+0x20>)
 8004258:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800425c:	bd08      	pop	{r3, pc}
 800425e:	bf00      	nop
 8004260:	42000000 	.word	0x42000000
 8004264:	3e4ccccd 	.word	0x3e4ccccd
 8004268:	20003dd8 	.word	0x20003dd8

0800426c <FM_OP3_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP3_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op3, val);
 800426c:	4601      	mov	r1, r0
 800426e:	4801      	ldr	r0, [pc, #4]	; (8004274 <FM_OP3_modInd_set+0x8>)
 8004270:	f7fe bdca 	b.w	8002e08 <FM_op_modInd_set>
 8004274:	20003dd8 	.word	0x20003dd8

08004278 <FM_OP4_freq_set>:
		op3.mul *= 0.99f;
	}
}

/*--------------------------------------------------------------------------------------------------------------------------*/
void FM_OP4_freq_set(uint8_t val) {
 8004278:	b508      	push	{r3, lr}
	op4.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op4 is a multiple of the main pitch freq (op1)
 800427a:	eddf 0a05 	vldr	s1, [pc, #20]	; 8004290 <FM_OP4_freq_set+0x18>
 800427e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004294 <FM_OP4_freq_set+0x1c>
 8004282:	f7fe fd15 	bl	8002cb0 <Lin2Exp>
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <FM_OP4_freq_set+0x20>)
 8004288:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800428c:	bd08      	pop	{r3, pc}
 800428e:	bf00      	nop
 8004290:	42000000 	.word	0x42000000
 8004294:	3e4ccccd 	.word	0x3e4ccccd
 8004298:	20003db8 	.word	0x20003db8

0800429c <FM_OP4_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP4_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op4, val);
 800429c:	4601      	mov	r1, r0
 800429e:	4801      	ldr	r0, [pc, #4]	; (80042a4 <FM_OP4_modInd_set+0x8>)
 80042a0:	f7fe bdb2 	b.w	8002e08 <FM_op_modInd_set>
 80042a4:	20003db8 	.word	0x20003db8

080042a8 <Synth_Init>:
	}
}

/*===============================================================================================================*/

void Synth_Init(void) {
 80042a8:	b508      	push	{r3, lr}

	vol = env = 1;
 80042aa:	4b38      	ldr	r3, [pc, #224]	; (800438c <Synth_Init+0xe4>)
 80042ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
void Synth_Init(void) {
 80042b0:	ed2d 8b02 	vpush	{d8}
	vol = env = 1;
 80042b4:	609a      	str	r2, [r3, #8]
	sound = WT_SINE;
 80042b6:	2203      	movs	r2, #3
 80042b8:	705a      	strb	r2, [r3, #1]
	autoFilterON = false;
 80042ba:	2200      	movs	r2, #0
 80042bc:	70da      	strb	r2, [r3, #3]
	autoSound = 0;
 80042be:	701a      	strb	r2, [r3, #0]
	chorusON = false;
 80042c0:	711a      	strb	r2, [r3, #4]
	delayON = false;
 80042c2:	709a      	strb	r2, [r3, #2]
	phaserON = true;
 80042c4:	2201      	movs	r2, #1
 80042c6:	715a      	strb	r2, [r3, #5]

	Delay_init();
 80042c8:	f7fe f98c 	bl	80025e4 <Delay_init>
	drifter_init();
 80042cc:	f7fe fb1e 	bl	800290c <drifter_init>
//	pitchGen_init();
	sequencer_init();
 80042d0:	f7ff fe74 	bl	8003fbc <sequencer_init>
	ADSR_init(&adsr);
 80042d4:	482e      	ldr	r0, [pc, #184]	; (8004390 <Synth_Init+0xe8>)
	Chorus_init();
	PhaserInit();
	SVF_init();
	filterFreq = 0.25f;
	filterFreq2 = 0.25f;
	osc_init(&op1, 0.8f, 587.f);
 80042d6:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8004394 <Synth_Init+0xec>
 80042da:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8004398 <Synth_Init+0xf0>
	ADSR_init(&adsr);
 80042de:	f7fd f88d 	bl	80013fc <ADSR_init>
	Chorus_init();
 80042e2:	f7fd ff7b 	bl	80021dc <Chorus_init>
	PhaserInit();
 80042e6:	f7ff fa61 	bl	80037ac <PhaserInit>
	SVF_init();
 80042ea:	f7ff fbe7 	bl	8003abc <SVF_init>
	filterFreq = 0.25f;
 80042ee:	4a2b      	ldr	r2, [pc, #172]	; (800439c <Synth_Init+0xf4>)
	osc_init(&op1, 0.8f, 587.f);
 80042f0:	482b      	ldr	r0, [pc, #172]	; (80043a0 <Synth_Init+0xf8>)
	filterFreq = 0.25f;
 80042f2:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80042f6:	6013      	str	r3, [r2, #0]
	filterFreq2 = 0.25f;
 80042f8:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <Synth_Init+0xfc>)
	osc_init(&op1, 0.8f, 587.f);
 80042fa:	eef0 0a68 	vmov.f32	s1, s17
 80042fe:	eeb0 0a48 	vmov.f32	s0, s16
	filterFreq2 = 0.25f;
 8004302:	6013      	str	r3, [r2, #0]
	osc_init(&op1, 0.8f, 587.f);
 8004304:	f7fe fd53 	bl	8002dae <osc_init>
	osc_init(&op2, 0.8f, 587.f);
 8004308:	eef0 0a68 	vmov.f32	s1, s17
 800430c:	eeb0 0a48 	vmov.f32	s0, s16
 8004310:	4825      	ldr	r0, [pc, #148]	; (80043a8 <Synth_Init+0x100>)
 8004312:	f7fe fd4c 	bl	8002dae <osc_init>
	osc_init(&op3, 0.8f, 587.f);
 8004316:	eef0 0a68 	vmov.f32	s1, s17
 800431a:	eeb0 0a48 	vmov.f32	s0, s16
 800431e:	4823      	ldr	r0, [pc, #140]	; (80043ac <Synth_Init+0x104>)
 8004320:	f7fe fd45 	bl	8002dae <osc_init>
	osc_init(&op4, 0.8f, 587.f);
 8004324:	eeb0 0a48 	vmov.f32	s0, s16
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 8004328:	ed9f 8a21 	vldr	s16, [pc, #132]	; 80043b0 <Synth_Init+0x108>
	osc_init(&op4, 0.8f, 587.f);
 800432c:	4821      	ldr	r0, [pc, #132]	; (80043b4 <Synth_Init+0x10c>)
 800432e:	eef0 0a68 	vmov.f32	s1, s17
 8004332:	f7fe fd3c 	bl	8002dae <osc_init>
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 8004336:	eeb0 0a48 	vmov.f32	s0, s16
 800433a:	eef1 0a06 	vmov.f32	s1, #22	; 0x40b00000  5.5
 800433e:	481e      	ldr	r0, [pc, #120]	; (80043b8 <Synth_Init+0x110>)
 8004340:	f7fe fd35 	bl	8002dae <osc_init>
	osc_init(&filt_lfo, 0, 0);
 8004344:	eef0 0a48 	vmov.f32	s1, s16
 8004348:	eeb0 0a48 	vmov.f32	s0, s16
 800434c:	481b      	ldr	r0, [pc, #108]	; (80043bc <Synth_Init+0x114>)
 800434e:	f7fe fd2e 	bl	8002dae <osc_init>
	osc_init(&filt2_lfo, 0, 0);
 8004352:	eef0 0a48 	vmov.f32	s1, s16
 8004356:	eeb0 0a48 	vmov.f32	s0, s16
 800435a:	4819      	ldr	r0, [pc, #100]	; (80043c0 <Synth_Init+0x118>)
 800435c:	f7fe fd27 	bl	8002dae <osc_init>
	osc_init(&amp_lfo, 0, 0);
 8004360:	eef0 0a48 	vmov.f32	s1, s16
 8004364:	eeb0 0a48 	vmov.f32	s0, s16
 8004368:	4816      	ldr	r0, [pc, #88]	; (80043c4 <Synth_Init+0x11c>)
 800436a:	f7fe fd20 	bl	8002dae <osc_init>
	AdditiveGen_newWaveform();
 800436e:	f7ff f881 	bl	8003474 <AdditiveGen_newWaveform>
	VCO_blepsaw_Init(&mbSawOsc);
 8004372:	4815      	ldr	r0, [pc, #84]	; (80043c8 <Synth_Init+0x120>)
 8004374:	f7fd f9ae 	bl	80016d4 <VCO_blepsaw_Init>
	VCO_bleprect_Init(&mbRectOsc);
 8004378:	4814      	ldr	r0, [pc, #80]	; (80043cc <Synth_Init+0x124>)
 800437a:	f7fd fa9f 	bl	80018bc <VCO_bleprect_Init>
	VCO_bleptri_Init(&mbTriOsc);
}
 800437e:	ecbd 8b02 	vpop	{d8}
	VCO_bleptri_Init(&mbTriOsc);
 8004382:	4813      	ldr	r0, [pc, #76]	; (80043d0 <Synth_Init+0x128>)
}
 8004384:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	VCO_bleptri_Init(&mbTriOsc);
 8004388:	f7fd bc8e 	b.w	8001ca8 <VCO_bleptri_Init>
 800438c:	20003fb8 	.word	0x20003fb8
 8004390:	200000fc 	.word	0x200000fc
 8004394:	4412c000 	.word	0x4412c000
 8004398:	3f4ccccd 	.word	0x3f4ccccd
 800439c:	20013c40 	.word	0x20013c40
 80043a0:	20003e18 	.word	0x20003e18
 80043a4:	20013c44 	.word	0x20013c44
 80043a8:	20003df8 	.word	0x20003df8
 80043ac:	20003dd8 	.word	0x20003dd8
 80043b0:	00000000 	.word	0x00000000
 80043b4:	20003db8 	.word	0x20003db8
 80043b8:	20003ef0 	.word	0x20003ef0
 80043bc:	20003ed0 	.word	0x20003ed0
 80043c0:	20003eb0 	.word	0x20003eb0
 80043c4:	20003e90 	.word	0x20003e90
 80043c8:	20000bd8 	.word	0x20000bd8
 80043cc:	2000067c 	.word	0x2000067c
 80043d0:	20000124 	.word	0x20000124

080043d4 <sequencer_newStep_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newStep_action(void) // User callback function called by sequencer_process()
{
 80043d4:	b538      	push	{r3, r4, r5, lr}
	if ((noteGen.automaticON || noteGen.chRequested)) {
 80043d6:	4d45      	ldr	r5, [pc, #276]	; (80044ec <sequencer_newStep_action+0x118>)
 80043d8:	7bab      	ldrb	r3, [r5, #14]
 80043da:	b90b      	cbnz	r3, 80043e0 <sequencer_newStep_action+0xc>
 80043dc:	7c2b      	ldrb	r3, [r5, #16]
 80043de:	b12b      	cbz	r3, 80043ec <sequencer_newStep_action+0x18>
		seq_sequence_new();
 80043e0:	f7ff fd8e 	bl	8003f00 <seq_sequence_new>
		noteGen.chRequested = false;
 80043e4:	2300      	movs	r3, #0
 80043e6:	742b      	strb	r3, [r5, #16]
		AdditiveGen_newWaveform();
 80043e8:	f7ff f844 	bl	8003474 <AdditiveGen_newWaveform>
	}

	if ((noteGen.someNotesMuted) && (rintf(frand_a_b(0.4f, 1)) == 0))
 80043ec:	7c6b      	ldrb	r3, [r5, #17]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d040      	beq.n	8004474 <sequencer_newStep_action+0xa0>
 80043f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80043f6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80044f0 <sequencer_newStep_action+0x11c>
 80043fa:	f7ff fac9 	bl	8003990 <frand_a_b>
 80043fe:	f002 fc63 	bl	8006cc8 <rintf>
 8004402:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440a:	d133      	bne.n	8004474 <sequencer_newStep_action+0xa0>
		ADSR_keyOff(&adsr);
 800440c:	4839      	ldr	r0, [pc, #228]	; (80044f4 <sequencer_newStep_action+0x120>)
 800440e:	f7fd f812 	bl	8001436 <ADSR_keyOff>
	else
		ADSR_keyOn(&adsr);

	if (autoFilterON)
 8004412:	4c39      	ldr	r4, [pc, #228]	; (80044f8 <sequencer_newStep_action+0x124>)
 8004414:	78e3      	ldrb	r3, [r4, #3]
 8004416:	b193      	cbz	r3, 800443e <sequencer_newStep_action+0x6a>
		SVF_directSetFilterValue(&SVFilter,
		Ts * 600.f * powf(5000.f / 600.f, frand_a_b(0, 1)));
 8004418:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800441c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80044fc <sequencer_newStep_action+0x128>
 8004420:	f7ff fab6 	bl	8003990 <frand_a_b>
 8004424:	eef0 0a40 	vmov.f32	s1, s0
 8004428:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004500 <sequencer_newStep_action+0x12c>
 800442c:	f002 fce8 	bl	8006e00 <powf>
		SVF_directSetFilterValue(&SVFilter,
 8004430:	eddf 7a34 	vldr	s15, [pc, #208]	; 8004504 <sequencer_newStep_action+0x130>
 8004434:	4834      	ldr	r0, [pc, #208]	; (8004508 <sequencer_newStep_action+0x134>)
 8004436:	ee20 0a27 	vmul.f32	s0, s0, s15
 800443a:	f7ff faf5 	bl	8003a28 <SVF_directSetFilterValue>

	if (noteGen.transpose != 0) {
 800443e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004442:	b123      	cbz	r3, 800444e <sequencer_newStep_action+0x7a>
		noteGen.rootNote += noteGen.transpose;
 8004444:	896a      	ldrh	r2, [r5, #10]
 8004446:	4413      	add	r3, r2
 8004448:	816b      	strh	r3, [r5, #10]
		seq_transpose();
 800444a:	f7ff fd99 	bl	8003f80 <seq_transpose>
	}

	if (autoSound == 1) {
 800444e:	f994 3000 	ldrsb.w	r3, [r4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d114      	bne.n	8004480 <sequencer_newStep_action+0xac>
		switch (rand() % 4) // 4 random timbers
 8004456:	f003 fe13 	bl	8008080 <rand>
 800445a:	4243      	negs	r3, r0
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	f000 0003 	and.w	r0, r0, #3
 8004464:	bf58      	it	pl
 8004466:	4258      	negpl	r0, r3
 8004468:	2803      	cmp	r0, #3
 800446a:	d809      	bhi.n	8004480 <sequencer_newStep_action+0xac>
 800446c:	e8df f000 	tbb	[pc, r0]
 8004470:	3b393506 	.word	0x3b393506
		ADSR_keyOn(&adsr);
 8004474:	481f      	ldr	r0, [pc, #124]	; (80044f4 <sequencer_newStep_action+0x120>)
 8004476:	f7fc ffd5 	bl	8001424 <ADSR_keyOn>
 800447a:	e7ca      	b.n	8004412 <sequencer_newStep_action+0x3e>
		{
		case 0:
			sound = CHORD15;
 800447c:	2309      	movs	r3, #9
			break;
		case 2:
			sound = CHORD13min5;
			break;
		case 3:
			sound = VOICES3;
 800447e:	7063      	strb	r3, [r4, #1]
			break;
		}
	}
	if (autoSound == 2) {
 8004480:	f994 3000 	ldrsb.w	r3, [r4]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d115      	bne.n	80044b4 <sequencer_newStep_action+0xe0>
		sound = rand() % LAST_SOUND;
 8004488:	f003 fdfa 	bl	8008080 <rand>
 800448c:	4243      	negs	r3, r0
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	f000 000f 	and.w	r0, r0, #15
 8004496:	bf58      	it	pl
 8004498:	4258      	negpl	r0, r3
 800449a:	b2c0      	uxtb	r0, r0
		if ((sound == CHORD13min5) || (sound == CHORD135))
 800449c:	f1a0 030a 	sub.w	r3, r0, #10
 80044a0:	2b01      	cmp	r3, #1
			sound = VOICES3;
 80044a2:	bf96      	itet	ls
 80044a4:	230c      	movls	r3, #12
		sound = rand() % LAST_SOUND;
 80044a6:	7060      	strbhi	r0, [r4, #1]
			sound = VOICES3;
 80044a8:	7063      	strbls	r3, [r4, #1]
		if (sound == ADDITIVE)
 80044aa:	7863      	ldrb	r3, [r4, #1]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d101      	bne.n	80044b4 <sequencer_newStep_action+0xe0>
			AdditiveGen_newWaveform();
 80044b0:	f7fe ffe0 	bl	8003474 <AdditiveGen_newWaveform>
	}

	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80044b4:	4b15      	ldr	r3, [pc, #84]	; (800450c <sequencer_newStep_action+0x138>)
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80044b6:	eddf 0a16 	vldr	s1, [pc, #88]	; 8004510 <sequencer_newStep_action+0x13c>
	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80044ba:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80044be:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80044f0 <sequencer_newStep_action+0x11c>
	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80044c2:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <sequencer_newStep_action+0x140>)
 80044c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60e3      	str	r3, [r4, #12]
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80044d0:	f7ff fa5e 	bl	8003990 <frand_a_b>
 80044d4:	ed84 0a02 	vstr	s0, [r4, #8]
}
 80044d8:	bd38      	pop	{r3, r4, r5, pc}
			AdditiveGen_newWaveform();
 80044da:	f7fe ffcb 	bl	8003474 <AdditiveGen_newWaveform>
			sound = ADDITIVE;
 80044de:	2304      	movs	r3, #4
 80044e0:	e7cd      	b.n	800447e <sequencer_newStep_action+0xaa>
			sound = CHORD13min5;
 80044e2:	230b      	movs	r3, #11
 80044e4:	e7cb      	b.n	800447e <sequencer_newStep_action+0xaa>
			sound = VOICES3;
 80044e6:	230c      	movs	r3, #12
 80044e8:	e7c9      	b.n	800447e <sequencer_newStep_action+0xaa>
 80044ea:	bf00      	nop
 80044ec:	20003fa4 	.word	0x20003fa4
 80044f0:	3ecccccd 	.word	0x3ecccccd
 80044f4:	200000fc 	.word	0x200000fc
 80044f8:	20003fb8 	.word	0x20003fb8
 80044fc:	00000000 	.word	0x00000000
 8004500:	41055555 	.word	0x41055555
 8004504:	3c5ee95c 	.word	0x3c5ee95c
 8004508:	20003f10 	.word	0x20003f10
 800450c:	20003f50 	.word	0x20003f50
 8004510:	3f4ccccd 	.word	0x3f4ccccd
 8004514:	08015c00 	.word	0x08015c00

08004518 <sequencer_newSequence_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newSequence_action(void) // User callback function called by sequencer_process()
{
 8004518:	b508      	push	{r3, lr}
	/* A new sequence begins ... */
	if ((demoMode == true) && (freeze == false)) {
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <sequencer_newSequence_action+0x20>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b153      	cbz	r3, 8004536 <sequencer_newSequence_action+0x1e>
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <sequencer_newSequence_action+0x24>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b93b      	cbnz	r3, 8004536 <sequencer_newSequence_action+0x1e>
		MagicPatch(MIDI_MAXi);
 8004526:	207f      	movs	r0, #127	; 0x7f
 8004528:	f7fc fe88 	bl	800123c <MagicPatch>
		MagicFX(MIDI_MAXi);
 800452c:	207f      	movs	r0, #127	; 0x7f
	}
}
 800452e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		MagicFX(MIDI_MAXi);
 8004532:	f7fc be3f 	b.w	80011b4 <MagicFX>
}
 8004536:	bd08      	pop	{r3, pc}
 8004538:	2000000c 	.word	0x2000000c
 800453c:	20012a64 	.word	0x20012a64

08004540 <make_sound>:
/*===============================================================================================================*/

void make_sound(uint16_t *buf, uint16_t length) // To be used with the Sequencer
{
 8004540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004544:	ed2d 8b04 	vpush	{d8-d9}
 8004548:	1d06      	adds	r6, r0, #4

	for (pos = 0; pos < length; pos++) {
		/*--- Sequencer actions and update ---*/
		//sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
		// GRA
		if (sequencerIsOn == true) {
 800454a:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8004758 <make_sound+0x218>
 800454e:	4c72      	ldr	r4, [pc, #456]	; (8004718 <make_sound+0x1d8>)
 8004550:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{
 8004554:	b082      	sub	sp, #8
 8004556:	1d05      	adds	r5, r0, #4
	for (pos = 0; pos < length; pos++) {
 8004558:	42ae      	cmp	r6, r5
 800455a:	d104      	bne.n	8004566 <make_sound+0x26>

		*outp++ = valueL; // left channel sample
		*outp++ = valueR; // right channel sample
	}

}
 800455c:	b002      	add	sp, #8
 800455e:	ecbd 8b04 	vpop	{d8-d9}
 8004562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sequencerIsOn == true) {
 8004566:	f898 3000 	ldrb.w	r3, [r8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80b3 	beq.w	80046d6 <make_sound+0x196>
			sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
 8004570:	f7ff fd52 	bl	8004018 <sequencer_process>
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 8004574:	4869      	ldr	r0, [pc, #420]	; (800471c <make_sound+0x1dc>)
		env = ADSR_computeSample(&adsr)
 8004576:	4f6a      	ldr	r7, [pc, #424]	; (8004720 <make_sound+0x1e0>)
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 8004578:	f7fe fc88 	bl	8002e8c <Osc_WT_SINE_SampleCompute>
 800457c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004580:	edd4 7a03 	vldr	s15, [r4, #12]
		y = waveCompute(sound, f1);
 8004584:	7860      	ldrb	r0, [r4, #1]
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 8004586:	ee30 0a28 	vadd.f32	s0, s0, s17
		y = waveCompute(sound, f1);
 800458a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800458e:	f7ff f80f 	bl	80035b0 <waveCompute>
		env = ADSR_computeSample(&adsr)
 8004592:	4638      	mov	r0, r7
		y = waveCompute(sound, f1);
 8004594:	eeb0 8a40 	vmov.f32	s16, s0
		env = ADSR_computeSample(&adsr)
 8004598:	f7fc ffda 	bl	8001550 <ADSR_computeSample>
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 800459c:	4861      	ldr	r0, [pc, #388]	; (8004724 <make_sound+0x1e4>)
		env = ADSR_computeSample(&adsr)
 800459e:	eef0 9a40 	vmov.f32	s19, s0
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80045a2:	f7fe fc73 	bl	8002e8c <Osc_WT_SINE_SampleCompute>
 80045a6:	ee30 9a28 	vadd.f32	s18, s0, s17
		y *= vol * env; // apply volume and envelop
 80045aa:	ed94 0a02 	vldr	s0, [r4, #8]
		if (sequencerIsOn == true) {
 80045ae:	f898 3000 	ldrb.w	r3, [r8]
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80045b2:	ee29 9a29 	vmul.f32	s18, s18, s19
		y *= vol * env; // apply volume and envelop
 80045b6:	ee29 9a00 	vmul.f32	s18, s18, s0
 80045ba:	ee29 9a08 	vmul.f32	s18, s18, s16
		if (sequencerIsOn == true) {
 80045be:	b13b      	cbz	r3, 80045d0 <make_sound+0x90>
			if (adsr.cnt_ >= seq.gateTime)
 80045c0:	4b59      	ldr	r3, [pc, #356]	; (8004728 <make_sound+0x1e8>)
 80045c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <make_sound+0x90>
				ADSR_keyOff(&adsr);
 80045ca:	4638      	mov	r0, r7
 80045cc:	f7fc ff33 	bl	8001436 <ADSR_keyOff>
		if ((!autoFilterON) && (filt_lfo.amp != 0))
 80045d0:	78e3      	ldrb	r3, [r4, #3]
 80045d2:	b99b      	cbnz	r3, 80045fc <make_sound+0xbc>
 80045d4:	4855      	ldr	r0, [pc, #340]	; (800472c <make_sound+0x1ec>)
 80045d6:	edd0 7a00 	vldr	s15, [r0]
 80045da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e2:	d00b      	beq.n	80045fc <make_sound+0xbc>
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 80045e4:	f7fe fd1e 	bl	8003024 <OpSampleCompute7bis>
			SVF_directSetFilterValue(&SVFilter,
 80045e8:	4b51      	ldr	r3, [pc, #324]	; (8004730 <make_sound+0x1f0>)
 80045ea:	4852      	ldr	r0, [pc, #328]	; (8004734 <make_sound+0x1f4>)
 80045ec:	edd3 7a00 	vldr	s15, [r3]
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 80045f0:	ee30 0a28 	vadd.f32	s0, s0, s17
			SVF_directSetFilterValue(&SVFilter,
 80045f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80045f8:	f7ff fa16 	bl	8003a28 <SVF_directSetFilterValue>
		if (filt2_lfo.amp != 0)
 80045fc:	484e      	ldr	r0, [pc, #312]	; (8004738 <make_sound+0x1f8>)
 80045fe:	edd0 7a00 	vldr	s15, [r0]
 8004602:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460a:	d00b      	beq.n	8004624 <make_sound+0xe4>
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 800460c:	f7fe fd0a 	bl	8003024 <OpSampleCompute7bis>
			SVF_directSetFilterValue(&SVFilter2,
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <make_sound+0x1fc>)
 8004612:	484b      	ldr	r0, [pc, #300]	; (8004740 <make_sound+0x200>)
 8004614:	edd3 7a00 	vldr	s15, [r3]
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 8004618:	ee30 0a28 	vadd.f32	s0, s0, s17
			SVF_directSetFilterValue(&SVFilter2,
 800461c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004620:	f7ff fa02 	bl	8003a28 <SVF_directSetFilterValue>
						* (SVF_calcSample(&SVFilter, y)
 8004624:	4843      	ldr	r0, [pc, #268]	; (8004734 <make_sound+0x1f4>)
 8004626:	eeb0 0a49 	vmov.f32	s0, s18
 800462a:	f7ff fae7 	bl	8003bfc <SVF_calcSample>
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 800462e:	4844      	ldr	r0, [pc, #272]	; (8004740 <make_sound+0x200>)
						* (SVF_calcSample(&SVFilter, y)
 8004630:	eeb0 8a40 	vmov.f32	s16, s0
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 8004634:	eeb0 0a49 	vmov.f32	s0, s18
 8004638:	f7ff fae0 	bl	8003bfc <SVF_calcSample>
		if (delayON)
 800463c:	78a3      	ldrb	r3, [r4, #2]
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 800463e:	ee38 0a00 	vadd.f32	s0, s16, s0
		y =
 8004642:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004646:	ee20 0a27 	vmul.f32	s0, s0, s15
		if (delayON)
 800464a:	b10b      	cbz	r3, 8004650 <make_sound+0x110>
			y = Delay_compute(y);
 800464c:	f7fe f836 	bl	80026bc <Delay_compute>
		if (phaserON)
 8004650:	7963      	ldrb	r3, [r4, #5]
 8004652:	b10b      	cbz	r3, 8004658 <make_sound+0x118>
			y = Phaser_compute(y);
 8004654:	f7ff f914 	bl	8003880 <Phaser_compute>
		if (chorusON)
 8004658:	7923      	ldrb	r3, [r4, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d051      	beq.n	8004702 <make_sound+0x1c2>
			stereoChorus_compute(&yL, &yR, y);
 800465e:	a901      	add	r1, sp, #4
 8004660:	4668      	mov	r0, sp
 8004662:	f7fd ff9f 	bl	80025a4 <stereoChorus_compute>
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 8004666:	ed9d 7a00 	vldr	s14, [sp]
 800466a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	dc4b      	bgt.n	800470c <make_sound+0x1cc>
		yL = (yL < -1.0f) ? -1.0f : yL;
 8004674:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004678:	eeb4 7a67 	vcmp.f32	s14, s15
 800467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004680:	bf48      	it	mi
 8004682:	eeb0 7a67 	vmovmi.f32	s14, s15
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 8004686:	eddd 7a01 	vldr	s15, [sp, #4]
		yL = (yL < -1.0f) ? -1.0f : yL;
 800468a:	ed8d 7a00 	vstr	s14, [sp]
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 800468e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	dc3c      	bgt.n	8004712 <make_sound+0x1d2>
		yR = (yR < -1.0f) ? -1.0f : yR;
 8004698:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800469c:	eef4 7a66 	vcmp.f32	s15, s13
 80046a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a4:	bf48      	it	mi
 80046a6:	eef0 7a66 	vmovmi.f32	s15, s13
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80046aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004744 <make_sound+0x204>
		yR = (yR < -1.0f) ? -1.0f : yR;
 80046ae:	edcd 7a01 	vstr	s15, [sp, #4]
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80046b2:	ee27 7a26 	vmul.f32	s14, s14, s13
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80046b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80046ba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80046be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80046c2:	ee17 3a10 	vmov	r3, s14
 80046c6:	f826 3c04 	strh.w	r3, [r6, #-4]
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80046ca:	ee17 3a90 	vmov	r3, s15
 80046ce:	3604      	adds	r6, #4
 80046d0:	f826 3c06 	strh.w	r3, [r6, #-6]
 80046d4:	e740      	b.n	8004558 <make_sound+0x18>
			f0 = notesFreq[currentNote];
 80046d6:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <make_sound+0x208>)
			vol = (float) velocity / 127.0f;
 80046d8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800474c <make_sound+0x20c>
			f0 = notesFreq[currentNote];
 80046dc:	f993 2000 	ldrsb.w	r2, [r3]
 80046e0:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <make_sound+0x210>)
 80046e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60e3      	str	r3, [r4, #12]
			vol = (float) velocity / 127.0f;
 80046ea:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <make_sound+0x214>)
 80046ec:	f993 3000 	ldrsb.w	r3, [r3]
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80046fc:	ed84 7a02 	vstr	s14, [r4, #8]
 8004700:	e738      	b.n	8004574 <make_sound+0x34>
			yL = yR = y;
 8004702:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004706:	ed8d 0a00 	vstr	s0, [sp]
 800470a:	e7ac      	b.n	8004666 <make_sound+0x126>
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 800470c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004710:	e7b9      	b.n	8004686 <make_sound+0x146>
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 8004712:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004716:	e7c8      	b.n	80046aa <make_sound+0x16a>
 8004718:	20003fb8 	.word	0x20003fb8
 800471c:	20003ef0 	.word	0x20003ef0
 8004720:	200000fc 	.word	0x200000fc
 8004724:	20003e90 	.word	0x20003e90
 8004728:	20003f50 	.word	0x20003f50
 800472c:	20003ed0 	.word	0x20003ed0
 8004730:	20013c40 	.word	0x20013c40
 8004734:	20003f10 	.word	0x20003f10
 8004738:	20003eb0 	.word	0x20003eb0
 800473c:	20013c44 	.word	0x20013c44
 8004740:	20003f30 	.word	0x20003f30
 8004744:	46fffe00 	.word	0x46fffe00
 8004748:	20000000 	.word	0x20000000
 800474c:	42fe0000 	.word	0x42fe0000
 8004750:	08015c00 	.word	0x08015c00
 8004754:	20012ab4 	.word	0x20012ab4
 8004758:	20012a65 	.word	0x20012a65

0800475c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800475c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475e:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <HAL_MspInit+0x34>)
 8004760:	2100      	movs	r1, #0
 8004762:	9100      	str	r1, [sp, #0]
 8004764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476a:	645a      	str	r2, [r3, #68]	; 0x44
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004772:	9200      	str	r2, [sp, #0]
 8004774:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	9101      	str	r1, [sp, #4]
 8004778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478a:	b002      	add	sp, #8
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800

08004794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	4604      	mov	r4, r0
 8004798:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479a:	2214      	movs	r2, #20
 800479c:	2100      	movs	r1, #0
 800479e:	a803      	add	r0, sp, #12
 80047a0:	f003 fc65 	bl	800806e <memset>
  if(hi2c->Instance==I2C2)
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_I2C_MspInit+0x68>)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d124      	bne.n	80047f6 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ac:	4c14      	ldr	r4, [pc, #80]	; (8004800 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ae:	4815      	ldr	r0, [pc, #84]	; (8004804 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b0:	2500      	movs	r5, #0
 80047b2:	9501      	str	r5, [sp, #4]
 80047b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	6323      	str	r3, [r4, #48]	; 0x30
 80047bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047c6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80047ca:	2312      	movs	r3, #18
 80047cc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d0:	2101      	movs	r1, #1
 80047d2:	2303      	movs	r3, #3
 80047d4:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80047d8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047da:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80047dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047de:	f000 fd7d 	bl	80052dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80047e2:	9502      	str	r5, [sp, #8]
 80047e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047ea:	6423      	str	r3, [r4, #64]	; 0x40
 80047ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80047f6:	b009      	add	sp, #36	; 0x24
 80047f8:	bd30      	pop	{r4, r5, pc}
 80047fa:	bf00      	nop
 80047fc:	40005800 	.word	0x40005800
 8004800:	40023800 	.word	0x40023800
 8004804:	40020400 	.word	0x40020400

08004808 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800480c:	4606      	mov	r6, r0
 800480e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004810:	2214      	movs	r2, #20
 8004812:	2100      	movs	r1, #0
 8004814:	a803      	add	r0, sp, #12
 8004816:	f003 fc2a 	bl	800806e <memset>
  if(hi2s->Instance==SPI2)
 800481a:	6832      	ldr	r2, [r6, #0]
 800481c:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_I2S_MspInit+0xf0>)
 800481e:	429a      	cmp	r2, r3
 8004820:	d167      	bne.n	80048f2 <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004822:	2500      	movs	r5, #0
 8004824:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004828:	9500      	str	r5, [sp, #0]
 800482a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800482c:	4833      	ldr	r0, [pc, #204]	; (80048fc <HAL_I2S_MspInit+0xf4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800482e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004832:	641a      	str	r2, [r3, #64]	; 0x40
 8004834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004836:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800483a:	9200      	str	r2, [sp, #0]
 800483c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483e:	9501      	str	r5, [sp, #4]
 8004840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004842:	f042 0202 	orr.w	r2, r2, #2
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
 8004848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484a:	f002 0202 	and.w	r2, r2, #2
 800484e:	9201      	str	r2, [sp, #4]
 8004850:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004852:	9502      	str	r5, [sp, #8]
 8004854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004856:	f042 0204 	orr.w	r2, r2, #4
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004864:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004866:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004868:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004870:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004876:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487a:	f000 fd2f 	bl	80052dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800487e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004882:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004886:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004888:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800488a:	481c      	ldr	r0, [pc, #112]	; (80048fc <HAL_I2S_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800488c:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800488e:	2740      	movs	r7, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004894:	f000 fd22 	bl	80052dc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004898:	a903      	add	r1, sp, #12
 800489a:	4819      	ldr	r0, [pc, #100]	; (8004900 <HAL_I2S_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800489c:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a4:	e9cd 5505 	strd	r5, r5, [sp, #20]

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80048a8:	4c16      	ldr	r4, [pc, #88]	; (8004904 <HAL_I2S_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048aa:	f000 fd17 	bl	80052dc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80048ae:	4b16      	ldr	r3, [pc, #88]	; (8004908 <HAL_I2S_MspInit+0x100>)
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80048b0:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80048b2:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048be:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80048c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048c6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80048ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80048ce:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80048d2:	2304      	movs	r3, #4
 80048d4:	e9c4 0308 	strd	r0, r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80048d8:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80048da:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048dc:	e9c4 7502 	strd	r7, r5, [r4, #8]
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80048e0:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80048e4:	f000 fb84 	bl	8004ff0 <HAL_DMA_Init>
 80048e8:	b108      	cbz	r0, 80048ee <HAL_I2S_MspInit+0xe6>
    {
      Error_Handler();
 80048ea:	f7fe f9df 	bl	8002cac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80048ee:	63b4      	str	r4, [r6, #56]	; 0x38
 80048f0:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80048f2:	b008      	add	sp, #32
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f8:	40003800 	.word	0x40003800
 80048fc:	40020400 	.word	0x40020400
 8004900:	40020800 	.word	0x40020800
 8004904:	20013b98 	.word	0x20013b98
 8004908:	40026070 	.word	0x40026070

0800490c <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 800490c:	6802      	ldr	r2, [r0, #0]
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RNG_MspInit+0x28>)
 8004910:	429a      	cmp	r2, r3
{
 8004912:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8004914:	d10b      	bne.n	800492e <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RNG_MspInit+0x2c>)
 800491c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004922:	635a      	str	r2, [r3, #52]	; 0x34
 8004924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800492e:	b002      	add	sp, #8
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	50060800 	.word	0x50060800
 8004938:	40023800 	.word	0x40023800

0800493c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800493c:	b510      	push	{r4, lr}
 800493e:	4604      	mov	r4, r0
 8004940:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004942:	2214      	movs	r2, #20
 8004944:	2100      	movs	r1, #0
 8004946:	a803      	add	r0, sp, #12
 8004948:	f003 fb91 	bl	800806e <memset>
  if(hspi->Instance==SPI3)
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <HAL_SPI_MspInit+0x64>)
 8004950:	429a      	cmp	r2, r3
 8004952:	d123      	bne.n	800499c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004954:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8004958:	2100      	movs	r1, #0
 800495a:	9101      	str	r1, [sp, #4]
 800495c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800495e:	4811      	ldr	r0, [pc, #68]	; (80049a4 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
 8004966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004968:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800496c:	9201      	str	r2, [sp, #4]
 800496e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004970:	9102      	str	r1, [sp, #8]
 8004972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004974:	f042 0204 	orr.w	r2, r2, #4
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	9302      	str	r3, [sp, #8]
 8004982:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004984:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8004988:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800498a:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004990:	2306      	movs	r3, #6
 8004992:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004996:	a903      	add	r1, sp, #12
 8004998:	f000 fca0 	bl	80052dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800499c:	b008      	add	sp, #32
 800499e:	bd10      	pop	{r4, pc}
 80049a0:	40003c00 	.word	0x40003c00
 80049a4:	40020800 	.word	0x40020800

080049a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4604      	mov	r4, r0
 80049ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ae:	2214      	movs	r2, #20
 80049b0:	2100      	movs	r1, #0
 80049b2:	a803      	add	r0, sp, #12
 80049b4:	f003 fb5b 	bl	800806e <memset>
  if(htim_encoder->Instance==TIM1)
 80049b8:	6822      	ldr	r2, [r4, #0]
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <HAL_TIM_Encoder_MspInit+0x64>)
 80049bc:	429a      	cmp	r2, r3
 80049be:	d122      	bne.n	8004a06 <HAL_TIM_Encoder_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049c0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80049c4:	2100      	movs	r1, #0
 80049c6:	9101      	str	r1, [sp, #4]
 80049c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ca:	4811      	ldr	r0, [pc, #68]	; (8004a10 <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
 80049d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d4:	f002 0201 	and.w	r2, r2, #1
 80049d8:	9201      	str	r2, [sp, #4]
 80049da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049dc:	9102      	str	r1, [sp, #8]
 80049de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	9302      	str	r3, [sp, #8]
 80049ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80049f4:	2302      	movs	r3, #2
 80049f6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049fc:	2301      	movs	r3, #1
 80049fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a00:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a02:	f000 fc6b 	bl	80052dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004a06:	b008      	add	sp, #32
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40020000 	.word	0x40020000

08004a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a14:	b510      	push	{r4, lr}
 8004a16:	4604      	mov	r4, r0
 8004a18:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1a:	2214      	movs	r2, #20
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	a803      	add	r0, sp, #12
 8004a20:	f003 fb25 	bl	800806e <memset>
  if(huart->Instance==USART1)
 8004a24:	6822      	ldr	r2, [r4, #0]
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <HAL_UART_MspInit+0x64>)
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d122      	bne.n	8004a72 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a2c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004a30:	2100      	movs	r1, #0
 8004a32:	9101      	str	r1, [sp, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a36:	4811      	ldr	r0, [pc, #68]	; (8004a7c <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a38:	f042 0210 	orr.w	r2, r2, #16
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
 8004a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a40:	f002 0210 	and.w	r2, r2, #16
 8004a44:	9201      	str	r2, [sp, #4]
 8004a46:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a48:	9102      	str	r1, [sp, #8]
 8004a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4c:	f042 0202 	orr.w	r2, r2, #2
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	9302      	str	r3, [sp, #8]
 8004a5a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5c:	22c0      	movs	r2, #192	; 0xc0
 8004a5e:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a60:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a62:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a66:	2307      	movs	r3, #7
 8004a68:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a6c:	a903      	add	r1, sp, #12
 8004a6e:	f000 fc35 	bl	80052dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a72:	b008      	add	sp, #32
 8004a74:	bd10      	pop	{r4, pc}
 8004a76:	bf00      	nop
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40020400 	.word	0x40020400

08004a80 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a80:	4770      	bx	lr

08004a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a82:	e7fe      	b.n	8004a82 <HardFault_Handler>

08004a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a84:	e7fe      	b.n	8004a84 <MemManage_Handler>

08004a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a86:	e7fe      	b.n	8004a86 <BusFault_Handler>

08004a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a88:	e7fe      	b.n	8004a88 <UsageFault_Handler>

08004a8a <SVC_Handler>:
 8004a8a:	4770      	bx	lr

08004a8c <DebugMon_Handler>:
 8004a8c:	4770      	bx	lr

08004a8e <PendSV_Handler>:
 8004a8e:	4770      	bx	lr

08004a90 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a90:	f000 ba1c 	b.w	8004ecc <HAL_IncTick>

08004a94 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <DMA1_Stream4_IRQHandler+0x8>)
 8004a96:	f000 bb63 	b.w	8005160 <HAL_DMA_IRQHandler>
 8004a9a:	bf00      	nop
 8004a9c:	20013b98 	.word	0x20013b98

08004aa0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004aa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  TriggerSound();
 8004aa2:	f7fc fb63 	bl	800116c <TriggerSound>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004aa6:	2080      	movs	r0, #128	; 0x80
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004aac:	f000 bcfc 	b.w	80054a8 <HAL_GPIO_EXTI_IRQHandler>

08004ab0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ab0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <EXTI15_10_IRQHandler+0x58>)
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	049a      	lsls	r2, r3, #18
 8004ab8:	d507      	bpl.n	8004aca <EXTI15_10_IRQHandler+0x1a>
  { // SW1_A
    if (sw1bon)
 8004aba:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <EXTI15_10_IRQHandler+0x5c>)
 8004abc:	7811      	ldrb	r1, [r2, #0]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	b1e1      	cbz	r1, 8004afc <EXTI15_10_IRQHandler+0x4c>
    {
      sw1dir = true;
 8004ac2:	4913      	ldr	r1, [pc, #76]	; (8004b10 <EXTI15_10_IRQHandler+0x60>)
 8004ac4:	700b      	strb	r3, [r1, #0]
      sw1bon = false;
 8004ac6:	2300      	movs	r3, #0
    }
    else
    {
      sw1aon = true;
 8004ac8:	7013      	strb	r3, [r2, #0]
    }
  }
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))
 8004aca:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <EXTI15_10_IRQHandler+0x58>)
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	045b      	lsls	r3, r3, #17
 8004ad0:	d506      	bpl.n	8004ae0 <EXTI15_10_IRQHandler+0x30>
  { // SW1_B
    if (sw1aon)
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <EXTI15_10_IRQHandler+0x64>)
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	b19a      	cbz	r2, 8004b00 <EXTI15_10_IRQHandler+0x50>
    {
      sw1dir = false;
 8004ad8:	490d      	ldr	r1, [pc, #52]	; (8004b10 <EXTI15_10_IRQHandler+0x60>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	700a      	strb	r2, [r1, #0]
      sw1aon = false;
    }
    else
    {
      sw1bon = true;
 8004ade:	701a      	strb	r2, [r3, #0]
    }
    // TriggerENC1(sw1dir);
  }
  // MenuSelect();
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ae0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ae4:	f000 fce0 	bl	80054a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004ae8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004aec:	f000 fcdc 	bl	80054a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004af0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004af8:	f000 bcd6 	b.w	80054a8 <HAL_GPIO_EXTI_IRQHandler>
      sw1aon = true;
 8004afc:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <EXTI15_10_IRQHandler+0x64>)
 8004afe:	e7e3      	b.n	8004ac8 <EXTI15_10_IRQHandler+0x18>
      sw1bon = true;
 8004b00:	4b02      	ldr	r3, [pc, #8]	; (8004b0c <EXTI15_10_IRQHandler+0x5c>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	e7eb      	b.n	8004ade <EXTI15_10_IRQHandler+0x2e>
 8004b06:	bf00      	nop
 8004b08:	40013c00 	.word	0x40013c00
 8004b0c:	20013c4a 	.word	0x20013c4a
 8004b10:	20013c49 	.word	0x20013c49
 8004b14:	20013c48 	.word	0x20013c48

08004b18 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <_sbrk+0x30>)
 8004b1a:	6819      	ldr	r1, [r3, #0]
{
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8004b20:	b909      	cbnz	r1, 8004b26 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004b22:	490a      	ldr	r1, [pc, #40]	; (8004b4c <_sbrk+0x34>)
 8004b24:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	4909      	ldr	r1, [pc, #36]	; (8004b50 <_sbrk+0x38>)
 8004b2a:	4c0a      	ldr	r4, [pc, #40]	; (8004b54 <_sbrk+0x3c>)
 8004b2c:	4402      	add	r2, r0
 8004b2e:	1b09      	subs	r1, r1, r4
 8004b30:	428a      	cmp	r2, r1
 8004b32:	d906      	bls.n	8004b42 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004b34:	f003 fa66 	bl	8008004 <__errno>
 8004b38:	230c      	movs	r3, #12
 8004b3a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004b40:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004b42:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8004b44:	e7fc      	b.n	8004b40 <_sbrk+0x28>
 8004b46:	bf00      	nop
 8004b48:	20012aa0 	.word	0x20012aa0
 8004b4c:	20013c58 	.word	0x20013c58
 8004b50:	20020000 	.word	0x20020000
 8004b54:	00000400 	.word	0x00000400

08004b58 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <SystemInit+0x18>)
 8004b5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b5e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b6a:	609a      	str	r2, [r3, #8]
#endif
}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000ed00 	.word	0xe000ed00

08004b74 <WM8978_Write_Reg>:
        0X0000, 0X0000, 0X0000, 0X0000, 0X0003, 0X0010, 0X0010, 0X0100,
        0X0100, 0X0002, 0X0001, 0X0001, 0X0039, 0X0039, 0X0039, 0X0039,
        0X0001, 0X0001};

uint8_t WM8978_Write_Reg(uint8_t reg, uint16_t val)
{
 8004b74:	b530      	push	{r4, r5, lr}
    uint8_t res;
    uint8_t RegAddr;
    uint8_t RegValue;
    RegAddr = (reg << 1) | ((uint8_t)((val >> 8) & 0x01)); //reg address + data highest bit
 8004b76:	f3c1 2300 	ubfx	r3, r1, #8, #1
{
 8004b7a:	b085      	sub	sp, #20
    RegAddr = (reg << 1) | ((uint8_t)((val >> 8) & 0x01)); //reg address + data highest bit
 8004b7c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1

    HAL_StatusTypeDef status = HAL_OK;
    uint8_t data[2];

    //     /* Assemble 2-byte data in WM8731 format */
    data[0] = RegAddr;  // 0x0C in your example
 8004b80:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = RegValue; // MSB byte of 16bit data

    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 8004b84:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
{
 8004b88:	4605      	mov	r5, r0
 8004b8a:	460c      	mov	r4, r1
    RegValue = (uint8_t)(val & 0XFF);
 8004b8c:	f88d 100d 	strb.w	r1, [sp, #13]
    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	aa03      	add	r2, sp, #12
 8004b94:	2302      	movs	r3, #2
 8004b96:	2134      	movs	r1, #52	; 0x34
 8004b98:	4808      	ldr	r0, [pc, #32]	; (8004bbc <WM8978_Write_Reg+0x48>)
 8004b9a:	f000 fe0f 	bl	80057bc <HAL_I2C_Master_Transmit>
                                                                                          //     /* Check the communication status */
    if (status != HAL_OK)
 8004b9e:	b138      	cbz	r0, 8004bb0 <WM8978_Write_Reg+0x3c>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ba6:	4806      	ldr	r0, [pc, #24]	; (8004bc0 <WM8978_Write_Reg+0x4c>)
 8004ba8:	f000 fc78 	bl	800549c <HAL_GPIO_WritePin>
        // Error handling, for example re-initialization of the I2C peripheral
        Error_Handler();
 8004bac:	f7fe f87e 	bl	8002cac <Error_Handler>
    }

    WM8978_REGVAL[reg] = val;
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <WM8978_Write_Reg+0x50>)
    return res;
}
 8004bb2:	2000      	movs	r0, #0
    WM8978_REGVAL[reg] = val;
 8004bb4:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
}
 8004bb8:	b005      	add	sp, #20
 8004bba:	bd30      	pop	{r4, r5, pc}
 8004bbc:	20013a5c 	.word	0x20013a5c
 8004bc0:	40020800 	.word	0x40020800
 8004bc4:	2000001a 	.word	0x2000001a

08004bc8 <WM8978_ADDA_Cfg>:

//WM8978 DAC/ADC config
//adcen:adc enable(1)/disable(0)
//dacen:dac enable(1)/disable(0)
void WM8978_ADDA_Cfg(uint8_t dacen, uint8_t adcen)
{
 8004bc8:	b538      	push	{r3, r4, r5, lr}
    return WM8978_REGVAL[reg];
 8004bca:	4c0d      	ldr	r4, [pc, #52]	; (8004c00 <WM8978_ADDA_Cfg+0x38>)
{
 8004bcc:	460d      	mov	r5, r1
    return WM8978_REGVAL[reg];
 8004bce:	88e1      	ldrh	r1, [r4, #6]
    uint16_t regval;
    regval = WM8978_Read_Reg(3); //read R3
    if (dacen)
 8004bd0:	b168      	cbz	r0, 8004bee <WM8978_ADDA_Cfg+0x26>
        regval |= 3 << 0; //R3 set lowest 2 bits to 1,enable DACR&DACL
 8004bd2:	f041 0103 	orr.w	r1, r1, #3
    else
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
    WM8978_Write_Reg(3, regval);
 8004bd6:	2003      	movs	r0, #3
 8004bd8:	f7ff ffcc 	bl	8004b74 <WM8978_Write_Reg>
    return WM8978_REGVAL[reg];
 8004bdc:	88a1      	ldrh	r1, [r4, #4]
    regval = WM8978_Read_Reg(2); //read R2
    if (adcen)
 8004bde:	b155      	cbz	r5, 8004bf6 <WM8978_ADDA_Cfg+0x2e>
        regval |= 3 << 0; //R2 set lowest bits to 1, enable ADCR&ADCL
 8004be0:	f041 0103 	orr.w	r1, r1, #3
    else
        regval &= ~(3 << 0);     //R2 set lowest bits to 0, disable ADCR&ADCL.
    WM8978_Write_Reg(2, regval); //R2
 8004be4:	2002      	movs	r0, #2
}
 8004be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WM8978_Write_Reg(2, regval); //R2
 8004bea:	f7ff bfc3 	b.w	8004b74 <WM8978_Write_Reg>
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
 8004bee:	f021 0103 	bic.w	r1, r1, #3
 8004bf2:	b289      	uxth	r1, r1
 8004bf4:	e7ef      	b.n	8004bd6 <WM8978_ADDA_Cfg+0xe>
        regval &= ~(3 << 0);     //R2 set lowest bits to 0, disable ADCR&ADCL.
 8004bf6:	f021 0103 	bic.w	r1, r1, #3
 8004bfa:	b289      	uxth	r1, r1
 8004bfc:	e7f2      	b.n	8004be4 <WM8978_ADDA_Cfg+0x1c>
 8004bfe:	bf00      	nop
 8004c00:	2000001a 	.word	0x2000001a

08004c04 <WM8978_LINEIN_Gain>:
}

//WM8978 L2/R2(Line In)db config(L2/R2-->ADC input db)
//gain:0~7,0 means channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void WM8978_LINEIN_Gain(uint8_t gain)
{
 8004c04:	b538      	push	{r3, r4, r5, lr}
    return WM8978_REGVAL[reg];
 8004c06:	4d0b      	ldr	r5, [pc, #44]	; (8004c34 <WM8978_LINEIN_Gain+0x30>)
    uint16_t regval;
    gain &= 0X07;
    regval = WM8978_Read_Reg(47);
    regval &= ~(7 << 4); //reset old config
 8004c08:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    WM8978_Write_Reg(47, regval | gain << 4);
 8004c0c:	f000 0007 	and.w	r0, r0, #7
 8004c10:	0104      	lsls	r4, r0, #4
    regval &= ~(7 << 4); //reset old config
 8004c12:	f021 0170 	bic.w	r1, r1, #112	; 0x70
    WM8978_Write_Reg(47, regval | gain << 4);
 8004c16:	4321      	orrs	r1, r4
 8004c18:	202f      	movs	r0, #47	; 0x2f
 8004c1a:	f7ff ffab 	bl	8004b74 <WM8978_Write_Reg>
    regval = WM8978_Read_Reg(48);
    regval &= ~(7 << 4); //reset old config
 8004c1e:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
 8004c22:	f021 0170 	bic.w	r1, r1, #112	; 0x70
    WM8978_Write_Reg(48, regval | gain << 4);
 8004c26:	4321      	orrs	r1, r4
 8004c28:	2030      	movs	r0, #48	; 0x30
}
 8004c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WM8978_Write_Reg(48, regval | gain << 4);
 8004c2e:	f7ff bfa1 	b.w	8004b74 <WM8978_Write_Reg>
 8004c32:	bf00      	nop
 8004c34:	2000001a 	.word	0x2000001a

08004c38 <WM8978_AUX_Gain>:
//WM8978 AUXR,AUXL(PWM audio config)db config(AUXR/L-->ADC input db)
//gain:0~7,0 channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void WM8978_AUX_Gain(uint8_t gain)
{
 8004c38:	b538      	push	{r3, r4, r5, lr}
    return WM8978_REGVAL[reg];
 8004c3a:	4d0a      	ldr	r5, [pc, #40]	; (8004c64 <WM8978_AUX_Gain+0x2c>)
    uint16_t regval;
    gain &= 0X07;
    regval = WM8978_Read_Reg(47);
    regval &= ~(7 << 0); //reset old config
 8004c3c:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    WM8978_Write_Reg(47, regval | gain << 0);
 8004c40:	f000 0407 	and.w	r4, r0, #7
    regval &= ~(7 << 0); //reset old config
 8004c44:	f021 0107 	bic.w	r1, r1, #7
    WM8978_Write_Reg(47, regval | gain << 0);
 8004c48:	4321      	orrs	r1, r4
 8004c4a:	202f      	movs	r0, #47	; 0x2f
 8004c4c:	f7ff ff92 	bl	8004b74 <WM8978_Write_Reg>
    regval = WM8978_Read_Reg(48);
    regval &= ~(7 << 0); //reset old config
 8004c50:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
 8004c54:	f021 0107 	bic.w	r1, r1, #7
    WM8978_Write_Reg(48, regval | gain << 0);
 8004c58:	4321      	orrs	r1, r4
 8004c5a:	2030      	movs	r0, #48	; 0x30
}
 8004c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WM8978_Write_Reg(48, regval | gain << 0);
 8004c60:	f7ff bf88 	b.w	8004b74 <WM8978_Write_Reg>
 8004c64:	2000001a 	.word	0x2000001a

08004c68 <WM8978_Input_Cfg>:
{
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return WM8978_REGVAL[reg];
 8004c6a:	4e14      	ldr	r6, [pc, #80]	; (8004cbc <WM8978_Input_Cfg+0x54>)
{
 8004c6c:	460d      	mov	r5, r1
 8004c6e:	4614      	mov	r4, r2
    return WM8978_REGVAL[reg];
 8004c70:	88b1      	ldrh	r1, [r6, #4]
    if (micen)
 8004c72:	4607      	mov	r7, r0
 8004c74:	b1b0      	cbz	r0, 8004ca4 <WM8978_Input_Cfg+0x3c>
        regval |= 3 << 2; //open INPPGAENR,INPPGAENL(MIC��PGA�Ŵ�)
 8004c76:	f041 010c 	orr.w	r1, r1, #12
    WM8978_Write_Reg(2, regval);
 8004c7a:	2002      	movs	r0, #2
 8004c7c:	f7ff ff7a 	bl	8004b74 <WM8978_Write_Reg>
    return WM8978_REGVAL[reg];
 8004c80:	f8b6 1058 	ldrh.w	r1, [r6, #88]	; 0x58
    if (micen)
 8004c84:	b197      	cbz	r7, 8004cac <WM8978_Input_Cfg+0x44>
        regval |= 3 << 4 | 3 << 0; //enable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 8004c86:	f041 0133 	orr.w	r1, r1, #51	; 0x33
    WM8978_Write_Reg(44, regval);
 8004c8a:	202c      	movs	r0, #44	; 0x2c
 8004c8c:	f7ff ff72 	bl	8004b74 <WM8978_Write_Reg>
    if (lineinen)
 8004c90:	b185      	cbz	r5, 8004cb4 <WM8978_Input_Cfg+0x4c>
        WM8978_LINEIN_Gain(5); //LINE IN 0dB
 8004c92:	2005      	movs	r0, #5
        WM8978_LINEIN_Gain(0); //disable LINE IN
 8004c94:	f7ff ffb6 	bl	8004c04 <WM8978_LINEIN_Gain>
    if (auxen)
 8004c98:	b174      	cbz	r4, 8004cb8 <WM8978_Input_Cfg+0x50>
        WM8978_AUX_Gain(7); //AUX 6dB
 8004c9a:	2007      	movs	r0, #7
}
 8004c9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        WM8978_AUX_Gain(0); //disable AUX input
 8004ca0:	f7ff bfca 	b.w	8004c38 <WM8978_AUX_Gain>
        regval &= ~(3 << 2); //close INPPGAENR,INPPGAENL.
 8004ca4:	f021 010c 	bic.w	r1, r1, #12
 8004ca8:	b289      	uxth	r1, r1
 8004caa:	e7e6      	b.n	8004c7a <WM8978_Input_Cfg+0x12>
        regval &= ~(3 << 4 | 3 << 0); //disable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 8004cac:	f021 0133 	bic.w	r1, r1, #51	; 0x33
 8004cb0:	b289      	uxth	r1, r1
 8004cb2:	e7ea      	b.n	8004c8a <WM8978_Input_Cfg+0x22>
        WM8978_LINEIN_Gain(0); //disable LINE IN
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	e7ed      	b.n	8004c94 <WM8978_Input_Cfg+0x2c>
        WM8978_AUX_Gain(0); //disable AUX input
 8004cb8:	4620      	mov	r0, r4
 8004cba:	e7ef      	b.n	8004c9c <WM8978_Input_Cfg+0x34>
 8004cbc:	2000001a 	.word	0x2000001a

08004cc0 <WM8978_Output_Cfg>:

//WM8978 output setting
//dacen:DAC output enabled(1)/disabled(0)
//bpsen:Bypass output(record,include MIC,LINE IN,AUX��) enabled(1)/disabled(0)
void WM8978_Output_Cfg(uint8_t dacen, uint8_t bpsen)
{
 8004cc0:	b510      	push	{r4, lr}
    uint16_t regval = 0;
 8004cc2:	1c04      	adds	r4, r0, #0
 8004cc4:	bf18      	it	ne
 8004cc6:	2401      	movne	r4, #1
    if (dacen)
        regval |= 1 << 0; //DAC output enabled
    if (bpsen)
 8004cc8:	b109      	cbz	r1, 8004cce <WM8978_Output_Cfg+0xe>
    {
        regval |= 1 << 1; //BYPASS enabled
        regval |= 5 << 2; //0dB
 8004cca:	f044 0416 	orr.w	r4, r4, #22
    }
    WM8978_Write_Reg(50, regval);
 8004cce:	4621      	mov	r1, r4
 8004cd0:	2032      	movs	r0, #50	; 0x32
 8004cd2:	f7ff ff4f 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(51, regval);
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	2033      	movs	r0, #51	; 0x33
}
 8004cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WM8978_Write_Reg(51, regval);
 8004cde:	f7ff bf49 	b.w	8004b74 <WM8978_Write_Reg>
	...

08004ce4 <WM8978_HPvol_Set>:

//Headphone volume
void WM8978_HPvol_Set(uint8_t voll, uint8_t volr)
{
 8004ce4:	b510      	push	{r4, lr}
	WM8978_HP_Volume = voll;
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <WM8978_HPvol_Set+0x2c>)
 8004ce8:	7018      	strb	r0, [r3, #0]

    voll &= 0X3F;
    volr &= 0X3F;
    if (voll == 0)
 8004cea:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
        voll |= 1 << 6; //volume is 0, mute on
 8004cee:	bf08      	it	eq
 8004cf0:	2040      	moveq	r0, #64	; 0x40
    if (volr == 0)
 8004cf2:	f011 043f 	ands.w	r4, r1, #63	; 0x3f
        volr |= 1 << 6;                    //volume is 0, mute on
 8004cf6:	bf08      	it	eq
 8004cf8:	2440      	moveq	r4, #64	; 0x40
    WM8978_Write_Reg(52, voll);            //R52, left channel volume
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	2034      	movs	r0, #52	; 0x34
 8004cfe:	f7ff ff39 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(53, volr | (1 << 8)); //R53, right channel volume
 8004d02:	f444 7180 	orr.w	r1, r4, #256	; 0x100
 8004d06:	2035      	movs	r0, #53	; 0x35
}
 8004d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WM8978_Write_Reg(53, volr | (1 << 8)); //R53, right channel volume
 8004d0c:	f7ff bf32 	b.w	8004b74 <WM8978_Write_Reg>
 8004d10:	20000018 	.word	0x20000018

08004d14 <WM8978_SPKvol_Set>:

//speaker volume
//voll:left channel volume(0~63)
void WM8978_SPKvol_Set(uint8_t volx)
{
 8004d14:	b510      	push	{r4, lr}
	WM8978_SPK_Volume = volx;
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <WM8978_SPKvol_Set+0x24>)
    volx &= 0X3F;
    if (volx == 0)
 8004d18:	f010 043f 	ands.w	r4, r0, #63	; 0x3f
        volx |= 1 << 6;                    //volume is 0, mute on
 8004d1c:	bf08      	it	eq
 8004d1e:	2440      	moveq	r4, #64	; 0x40
    WM8978_Write_Reg(54, volx);            //R54, left channel audio volume
 8004d20:	4621      	mov	r1, r4
	WM8978_SPK_Volume = volx;
 8004d22:	7018      	strb	r0, [r3, #0]
    WM8978_Write_Reg(54, volx);            //R54, left channel audio volume
 8004d24:	2036      	movs	r0, #54	; 0x36
 8004d26:	f7ff ff25 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(55, volx | (1 << 8)); //R55, right channel audio volume
 8004d2a:	f444 7180 	orr.w	r1, r4, #256	; 0x100
 8004d2e:	2037      	movs	r0, #55	; 0x37
}
 8004d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WM8978_Write_Reg(55, volx | (1 << 8)); //R55, right channel audio volume
 8004d34:	f7ff bf1e 	b.w	8004b74 <WM8978_Write_Reg>
 8004d38:	2000008e 	.word	0x2000008e

08004d3c <WM8978_Init>:
    Res = WM8978_Write_Reg(0, 0); //soft reset WM8978
 8004d3c:	2100      	movs	r1, #0
{
 8004d3e:	b510      	push	{r4, lr}
    Res = WM8978_Write_Reg(0, 0); //soft reset WM8978
 8004d40:	4608      	mov	r0, r1
 8004d42:	f7ff ff17 	bl	8004b74 <WM8978_Write_Reg>
    if (Res)
 8004d46:	4604      	mov	r4, r0
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d14c      	bne.n	8004de6 <WM8978_Init+0xaa>
    WM8978_Write_Reg(1, 0X1B);  //R1,MICEN 1(MIC enabled),BIASEN 1(emu on),VMIDSEL[1:0]:11(5K) R1,MICEN设置为1(MIC使能)，BIASEN设置为1(模拟工作，VMIDSEL[1:0]设置为：11（5）)
 8004d4c:	211b      	movs	r1, #27
 8004d4e:	2001      	movs	r0, #1
 8004d50:	f7ff ff10 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(2, 0X1B0); //R2, ROUT1,LOUT1 output enabled(headphone),BOOSTENR,BOOSTENL enabled.
 8004d54:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004d58:	2002      	movs	r0, #2
 8004d5a:	f7ff ff0b 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(3, 0X6C);  //R3, LOUT2,ROUT2 output enabled(speaker on),RMIX,LMIX enabled
 8004d5e:	216c      	movs	r1, #108	; 0x6c
 8004d60:	2003      	movs	r0, #3
 8004d62:	f7ff ff07 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(6, 0); //R6, MCLK from out
 8004d66:	4621      	mov	r1, r4
 8004d68:	2006      	movs	r0, #6
 8004d6a:	f7ff ff03 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(43, 1 << 4); //R43,INVROUT2 inverted, drive speaker
 8004d6e:	2110      	movs	r1, #16
 8004d70:	202b      	movs	r0, #43	; 0x2b
 8004d72:	f7ff feff 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(47, 1 << 8); //R47,PGABOOSTL,left MIC got 20 db
 8004d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d7a:	202f      	movs	r0, #47	; 0x2f
 8004d7c:	f7ff fefa 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(48, 1 << 8); //R48,PGABOOSTR, right MIC got 20 db
 8004d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d84:	2030      	movs	r0, #48	; 0x30
 8004d86:	f7ff fef5 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(49, 1 << 1); //R49,TSDEN, open hot protecting
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	2031      	movs	r0, #49	; 0x31
 8004d8e:	f7ff fef1 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(10, 1 << 3); //R10,SOFTMUTE closed,128x sample rate, best SNR
 8004d92:	2108      	movs	r1, #8
 8004d94:	200a      	movs	r0, #10
 8004d96:	f7ff feed 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_Write_Reg(14, 1 << 3); //R14,ADC 128x sample rate
 8004d9a:	2108      	movs	r1, #8
 8004d9c:	200e      	movs	r0, #14
 8004d9e:	f7ff fee9 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_ADDA_Cfg(1, 1);     //open DAC
 8004da2:	2101      	movs	r1, #1
 8004da4:	4608      	mov	r0, r1
 8004da6:	f7ff ff0f 	bl	8004bc8 <WM8978_ADDA_Cfg>
    WM8978_Input_Cfg(1, 0, 0); //close input channel
 8004daa:	4622      	mov	r2, r4
 8004dac:	4621      	mov	r1, r4
 8004dae:	2001      	movs	r0, #1
 8004db0:	f7ff ff5a 	bl	8004c68 <WM8978_Input_Cfg>
    WM8978_Output_Cfg(1, 0);   //open DAC output
 8004db4:	4621      	mov	r1, r4
 8004db6:	2001      	movs	r0, #1
 8004db8:	f7ff ff82 	bl	8004cc0 <WM8978_Output_Cfg>
//len:0,16bist;1,20bits;2,24bits;3,32bits;
void WM8978_I2S_Cfg(uint8_t fmt, uint8_t len)
{
    fmt &= 0x02;
    len &= 0x03;
    WM8978_Write_Reg(4, (fmt << 3) | (len << 5)); //R4,WM8978 working mode
 8004dbc:	2110      	movs	r1, #16
 8004dbe:	2004      	movs	r0, #4
 8004dc0:	f7ff fed8 	bl	8004b74 <WM8978_Write_Reg>
    WM8978_HPvol_Set(WM8978_HP_Volume, WM8978_HP_Volume);
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <WM8978_Init+0xb0>)
 8004dc6:	7819      	ldrb	r1, [r3, #0]
 8004dc8:	4608      	mov	r0, r1
 8004dca:	f7ff ff8b 	bl	8004ce4 <WM8978_HPvol_Set>
    WM8978_SPKvol_Set(WM8978_SPK_Volume);
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <WM8978_Init+0xb4>)
 8004dd0:	7818      	ldrb	r0, [r3, #0]
 8004dd2:	f7ff ff9f 	bl	8004d14 <WM8978_SPKvol_Set>
    HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)&audiobuff[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
 8004dd6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004dda:	4906      	ldr	r1, [pc, #24]	; (8004df4 <WM8978_Init+0xb8>)
 8004ddc:	4806      	ldr	r0, [pc, #24]	; (8004df8 <WM8978_Init+0xbc>)
 8004dde:	f000 fe59 	bl	8005a94 <HAL_I2S_Transmit_DMA>
}
 8004de2:	4620      	mov	r0, r4
 8004de4:	bd10      	pop	{r4, pc}
        return 1; //reset failed, WM8978 exception
 8004de6:	2401      	movs	r4, #1
 8004de8:	e7fb      	b.n	8004de2 <WM8978_Init+0xa6>
 8004dea:	bf00      	nop
 8004dec:	20000018 	.word	0x20000018
 8004df0:	2000008e 	.word	0x2000008e
 8004df4:	20012ab6 	.word	0x20012ab6
 8004df8:	20013bf8 	.word	0x20013bf8

08004dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e02:	e003      	b.n	8004e0c <LoopCopyDataInit>

08004e04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e0a:	3104      	adds	r1, #4

08004e0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e0c:	480b      	ldr	r0, [pc, #44]	; (8004e3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e14:	d3f6      	bcc.n	8004e04 <CopyDataInit>
  ldr  r2, =_sbss
 8004e16:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e18:	e002      	b.n	8004e20 <LoopFillZerobss>

08004e1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e1c:	f842 3b04 	str.w	r3, [r2], #4

08004e20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e24:	d3f9      	bcc.n	8004e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e26:	f7ff fe97 	bl	8004b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e2a:	f003 f8f1 	bl	8008010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e2e:	f7fd fdd9 	bl	80029e4 <main>
  bx  lr    
 8004e32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004e38:	0801721c 	.word	0x0801721c
  ldr  r0, =_sdata
 8004e3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e40:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8004e44:	20003fc8 	.word	0x20003fc8
  ldr  r3, = _ebss
 8004e48:	20013c54 	.word	0x20013c54

08004e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e4c:	e7fe      	b.n	8004e4c <ADC_IRQHandler>
	...

08004e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e50:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e52:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <HAL_InitTick+0x3c>)
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <HAL_InitTick+0x40>)
{
 8004e56:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e58:	7818      	ldrb	r0, [r3, #0]
 8004e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8004e62:	6810      	ldr	r0, [r2, #0]
 8004e64:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e68:	f000 f896 	bl	8004f98 <HAL_SYSTICK_Config>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	b958      	cbnz	r0, 8004e88 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e70:	2d0f      	cmp	r5, #15
 8004e72:	d809      	bhi.n	8004e88 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e74:	4602      	mov	r2, r0
 8004e76:	4629      	mov	r1, r5
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e7c:	f000 f84a 	bl	8004f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e80:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <HAL_InitTick+0x44>)
 8004e82:	4620      	mov	r0, r4
 8004e84:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e88:	2001      	movs	r0, #1
 8004e8a:	e7fc      	b.n	8004e86 <HAL_InitTick+0x36>
 8004e8c:	20000014 	.word	0x20000014
 8004e90:	2000008f 	.word	0x2000008f
 8004e94:	20000090 	.word	0x20000090

08004e98 <HAL_Init>:
{
 8004e98:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_Init+0x30>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eaa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	f000 f81b 	bl	8004ef0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f7ff ffc8 	bl	8004e50 <HAL_InitTick>
  HAL_MspInit();
 8004ec0:	f7ff fc4c 	bl	800475c <HAL_MspInit>
}
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	bd08      	pop	{r3, pc}
 8004ec8:	40023c00 	.word	0x40023c00

08004ecc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004ecc:	4a03      	ldr	r2, [pc, #12]	; (8004edc <HAL_IncTick+0x10>)
 8004ece:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <HAL_IncTick+0x14>)
 8004ed0:	6811      	ldr	r1, [r2, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	440b      	add	r3, r1
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20013c4c 	.word	0x20013c4c
 8004ee0:	2000008f 	.word	0x2000008f

08004ee4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ee4:	4b01      	ldr	r3, [pc, #4]	; (8004eec <HAL_GetTick+0x8>)
 8004ee6:	6818      	ldr	r0, [r3, #0]
}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20013c4c 	.word	0x20013c4c

08004ef0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef0:	4a07      	ldr	r2, [pc, #28]	; (8004f10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004ef2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ef4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f00:	0200      	lsls	r0, r0, #8
 8004f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004f0a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004f0c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004f0e:	4770      	bx	lr
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f16:	b570      	push	{r4, r5, r6, lr}
 8004f18:	68dc      	ldr	r4, [r3, #12]
 8004f1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f1e:	f1c4 0507 	rsb	r5, r4, #7
 8004f22:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f24:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f28:	bf28      	it	cs
 8004f2a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f2c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f30:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f32:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f36:	bf8c      	ite	hi
 8004f38:	3c03      	subhi	r4, #3
 8004f3a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f3c:	ea21 0303 	bic.w	r3, r1, r3
 8004f40:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f42:	fa06 f404 	lsl.w	r4, r6, r4
 8004f46:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004f4a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f4c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f50:	bfa8      	it	ge
 8004f52:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8004f56:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5a:	bfbc      	itt	lt
 8004f5c:	f000 000f 	andlt.w	r0, r0, #15
 8004f60:	4a05      	ldrlt	r2, [pc, #20]	; (8004f78 <HAL_NVIC_SetPriority+0x64>)
 8004f62:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f64:	bfaa      	itet	ge
 8004f66:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
 8004f72:	bf00      	nop
 8004f74:	e000ed00 	.word	0xe000ed00
 8004f78:	e000ed14 	.word	0xe000ed14

08004f7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	db08      	blt.n	8004f92 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f80:	0942      	lsrs	r2, r0, #5
 8004f82:	2301      	movs	r3, #1
 8004f84:	f000 001f 	and.w	r0, r0, #31
 8004f88:	fa03 f000 	lsl.w	r0, r3, r0
 8004f8c:	4b01      	ldr	r3, [pc, #4]	; (8004f94 <HAL_NVIC_EnableIRQ+0x18>)
 8004f8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004f92:	4770      	bx	lr
 8004f94:	e000e100 	.word	0xe000e100

08004f98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f98:	3801      	subs	r0, #1
 8004f9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004f9e:	d20a      	bcs.n	8004fb6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	4a07      	ldr	r2, [pc, #28]	; (8004fc0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fa4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa6:	21f0      	movs	r1, #240	; 0xf0
 8004fa8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fb0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004fb6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	e000e010 	.word	0xe000e010
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fc4:	6803      	ldr	r3, [r0, #0]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fcc:	f023 0303 	bic.w	r3, r3, #3
 8004fd0:	2118      	movs	r1, #24
 8004fd2:	3a10      	subs	r2, #16
 8004fd4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fd8:	4904      	ldr	r1, [pc, #16]	; (8004fec <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8004fda:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fdc:	bf88      	it	hi
 8004fde:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fe0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fe2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fe4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8004fe6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	08016e04 	.word	0x08016e04

08004ff0 <HAL_DMA_Init>:
{
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff ff76 	bl	8004ee4 <HAL_GetTick>
 8004ff8:	4605      	mov	r5, r0
  if(hdma == NULL)
 8004ffa:	2c00      	cmp	r4, #0
 8004ffc:	d071      	beq.n	80050e2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8004ffe:	2300      	movs	r3, #0
 8005000:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8005004:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005006:	2302      	movs	r3, #2
 8005008:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800500c:	6813      	ldr	r3, [r2, #0]
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005014:	6821      	ldr	r1, [r4, #0]
 8005016:	680b      	ldr	r3, [r1, #0]
 8005018:	07d8      	lsls	r0, r3, #31
 800501a:	d43c      	bmi.n	8005096 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 800501c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800501e:	4d32      	ldr	r5, [pc, #200]	; (80050e8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005020:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005022:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005024:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8005028:	4313      	orrs	r3, r2
 800502a:	68e2      	ldr	r2, [r4, #12]
 800502c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800502e:	6922      	ldr	r2, [r4, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	6962      	ldr	r2, [r4, #20]
 8005034:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005036:	69e2      	ldr	r2, [r4, #28]
 8005038:	4303      	orrs	r3, r0
 800503a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800503c:	6a22      	ldr	r2, [r4, #32]
 800503e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005040:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005042:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005044:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005048:	bf02      	ittt	eq
 800504a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800504e:	4335      	orreq	r5, r6
 8005050:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8005052:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8005054:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005056:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005058:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800505c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005060:	d10b      	bne.n	800507a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8005062:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005064:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8005066:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005068:	b13d      	cbz	r5, 800507a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800506a:	b9f8      	cbnz	r0, 80050ac <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800506c:	2a01      	cmp	r2, #1
 800506e:	d02d      	beq.n	80050cc <HAL_DMA_Init+0xdc>
 8005070:	d301      	bcc.n	8005076 <HAL_DMA_Init+0x86>
 8005072:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005074:	d101      	bne.n	800507a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005076:	01ea      	lsls	r2, r5, #7
 8005078:	d42b      	bmi.n	80050d2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800507a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800507c:	4620      	mov	r0, r4
 800507e:	f7ff ffa1 	bl	8004fc4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005082:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005084:	233f      	movs	r3, #63	; 0x3f
 8005086:	4093      	lsls	r3, r2
 8005088:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800508c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005090:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005094:	e009      	b.n	80050aa <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005096:	f7ff ff25 	bl	8004ee4 <HAL_GetTick>
 800509a:	1b40      	subs	r0, r0, r5
 800509c:	2805      	cmp	r0, #5
 800509e:	d9b9      	bls.n	8005014 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050a0:	2320      	movs	r3, #32
 80050a2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050a4:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80050a6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ac:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80050b0:	d113      	bne.n	80050da <HAL_DMA_Init+0xea>
    switch (tmp)
 80050b2:	2a03      	cmp	r2, #3
 80050b4:	d8e1      	bhi.n	800507a <HAL_DMA_Init+0x8a>
 80050b6:	a001      	add	r0, pc, #4	; (adr r0, 80050bc <HAL_DMA_Init+0xcc>)
 80050b8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80050bc:	080050d3 	.word	0x080050d3
 80050c0:	08005077 	.word	0x08005077
 80050c4:	080050d3 	.word	0x080050d3
 80050c8:	080050cd 	.word	0x080050cd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050cc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80050d0:	d1d3      	bne.n	800507a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050d2:	2340      	movs	r3, #64	; 0x40
 80050d4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80050d6:	2001      	movs	r0, #1
 80050d8:	e7e5      	b.n	80050a6 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80050da:	2a02      	cmp	r2, #2
 80050dc:	d9f9      	bls.n	80050d2 <HAL_DMA_Init+0xe2>
 80050de:	2a03      	cmp	r2, #3
 80050e0:	e7c8      	b.n	8005074 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80050e2:	2001      	movs	r0, #1
 80050e4:	e7e1      	b.n	80050aa <HAL_DMA_Init+0xba>
 80050e6:	bf00      	nop
 80050e8:	f010803f 	.word	0xf010803f

080050ec <HAL_DMA_Start_IT>:
{
 80050ec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80050ee:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80050f2:	2c01      	cmp	r4, #1
 80050f4:	d032      	beq.n	800515c <HAL_DMA_Start_IT+0x70>
 80050f6:	2401      	movs	r4, #1
 80050f8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80050fc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005100:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8005102:	2c01      	cmp	r4, #1
 8005104:	f04f 0500 	mov.w	r5, #0
 8005108:	f04f 0402 	mov.w	r4, #2
 800510c:	d124      	bne.n	8005158 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800510e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005112:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005114:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005116:	6825      	ldr	r5, [r4, #0]
 8005118:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800511c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800511e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005120:	6883      	ldr	r3, [r0, #8]
 8005122:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8005124:	bf0e      	itee	eq
 8005126:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8005128:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800512a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800512c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800512e:	bf08      	it	eq
 8005130:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005132:	233f      	movs	r3, #63	; 0x3f
 8005134:	4093      	lsls	r3, r2
 8005136:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	f043 0316 	orr.w	r3, r3, #22
 800513e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005140:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005142:	b11b      	cbz	r3, 800514c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	f043 0308 	orr.w	r3, r3, #8
 800514a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005154:	2000      	movs	r0, #0
}
 8005156:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8005158:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800515c:	2002      	movs	r0, #2
 800515e:	e7fa      	b.n	8005156 <HAL_DMA_Start_IT+0x6a>

08005160 <HAL_DMA_IRQHandler>:
{
 8005160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005166:	4b5c      	ldr	r3, [pc, #368]	; (80052d8 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005168:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800516a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800516c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800516e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005170:	2208      	movs	r2, #8
 8005172:	409a      	lsls	r2, r3
 8005174:	4232      	tst	r2, r6
{
 8005176:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005178:	d00c      	beq.n	8005194 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800517a:	6801      	ldr	r1, [r0, #0]
 800517c:	6808      	ldr	r0, [r1, #0]
 800517e:	0740      	lsls	r0, r0, #29
 8005180:	d508      	bpl.n	8005194 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005182:	6808      	ldr	r0, [r1, #0]
 8005184:	f020 0004 	bic.w	r0, r0, #4
 8005188:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800518a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800518c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005194:	2201      	movs	r2, #1
 8005196:	409a      	lsls	r2, r3
 8005198:	4232      	tst	r2, r6
 800519a:	d008      	beq.n	80051ae <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800519c:	6821      	ldr	r1, [r4, #0]
 800519e:	6949      	ldr	r1, [r1, #20]
 80051a0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051a2:	bf41      	itttt	mi
 80051a4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051a6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80051a8:	f042 0202 	orrmi.w	r2, r2, #2
 80051ac:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ae:	2204      	movs	r2, #4
 80051b0:	409a      	lsls	r2, r3
 80051b2:	4232      	tst	r2, r6
 80051b4:	d008      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051b6:	6821      	ldr	r1, [r4, #0]
 80051b8:	6809      	ldr	r1, [r1, #0]
 80051ba:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051bc:	bf41      	itttt	mi
 80051be:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051c0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80051c2:	f042 0204 	orrmi.w	r2, r2, #4
 80051c6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051c8:	2210      	movs	r2, #16
 80051ca:	409a      	lsls	r2, r3
 80051cc:	4232      	tst	r2, r6
 80051ce:	d010      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	0709      	lsls	r1, r1, #28
 80051d6:	d50c      	bpl.n	80051f2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051d8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	0350      	lsls	r0, r2, #13
 80051de:	d537      	bpl.n	8005250 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	0319      	lsls	r1, r3, #12
 80051e4:	d401      	bmi.n	80051ea <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80051e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051e8:	e000      	b.n	80051ec <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80051ec:	b10b      	cbz	r3, 80051f2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80051ee:	4620      	mov	r0, r4
 80051f0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051f2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80051f4:	2220      	movs	r2, #32
 80051f6:	408a      	lsls	r2, r1
 80051f8:	4232      	tst	r2, r6
 80051fa:	d03a      	beq.n	8005272 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	06c6      	lsls	r6, r0, #27
 8005202:	d536      	bpl.n	8005272 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005204:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005206:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800520a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800520c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800520e:	d127      	bne.n	8005260 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005210:	f022 0216 	bic.w	r2, r2, #22
 8005214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800521c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800521e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005220:	b90a      	cbnz	r2, 8005226 <HAL_DMA_IRQHandler+0xc6>
 8005222:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005224:	b11a      	cbz	r2, 800522e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	f022 0208 	bic.w	r2, r2, #8
 800522c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800522e:	233f      	movs	r3, #63	; 0x3f
 8005230:	408b      	lsls	r3, r1
 8005232:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8005234:	2300      	movs	r3, #0
 8005236:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800523a:	2301      	movs	r3, #1
 800523c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005240:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8005242:	2b00      	cmp	r3, #0
 8005244:	d045      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8005246:	4620      	mov	r0, r4
}
 8005248:	b003      	add	sp, #12
 800524a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800524e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005254:	bf5e      	ittt	pl
 8005256:	681a      	ldrpl	r2, [r3, #0]
 8005258:	f022 0208 	bicpl.w	r2, r2, #8
 800525c:	601a      	strpl	r2, [r3, #0]
 800525e:	e7c2      	b.n	80051e6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005260:	0350      	lsls	r0, r2, #13
 8005262:	d527      	bpl.n	80052b4 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	0319      	lsls	r1, r3, #12
 8005268:	d431      	bmi.n	80052ce <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800526a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800526c:	b10b      	cbz	r3, 8005272 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800526e:	4620      	mov	r0, r4
 8005270:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005272:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005274:	b36b      	cbz	r3, 80052d2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005276:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005278:	07da      	lsls	r2, r3, #31
 800527a:	d519      	bpl.n	80052b0 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 800527c:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800527e:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005280:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005284:	6813      	ldr	r3, [r2, #0]
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800528c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005290:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8005294:	9b01      	ldr	r3, [sp, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	42bb      	cmp	r3, r7
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	d802      	bhi.n	80052a4 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800529e:	6813      	ldr	r3, [r2, #0]
 80052a0:	07db      	lsls	r3, r3, #31
 80052a2:	d4f7      	bmi.n	8005294 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80052a4:	2300      	movs	r3, #0
 80052a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80052b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80052b2:	e7c6      	b.n	8005242 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80052ba:	d108      	bne.n	80052ce <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	f021 0110 	bic.w	r1, r1, #16
 80052c2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80052c4:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80052c6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80052ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80052ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052d0:	e7cc      	b.n	800526c <HAL_DMA_IRQHandler+0x10c>
}
 80052d2:	b003      	add	sp, #12
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000014 	.word	0x20000014

080052dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052e2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005494 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052e8:	4a68      	ldr	r2, [pc, #416]	; (800548c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052ea:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8005498 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ee:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052f0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80052f2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052f4:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80052f6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052f8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80052fa:	42ac      	cmp	r4, r5
 80052fc:	f040 80b0 	bne.w	8005460 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005300:	684c      	ldr	r4, [r1, #4]
 8005302:	f024 0c10 	bic.w	ip, r4, #16
 8005306:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800530a:	2603      	movs	r6, #3
 800530c:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 8005310:	fa06 f60e 	lsl.w	r6, r6, lr
 8005314:	2f01      	cmp	r7, #1
 8005316:	ea6f 0606 	mvn.w	r6, r6
 800531a:	d811      	bhi.n	8005340 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 800531c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800531e:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005322:	68cf      	ldr	r7, [r1, #12]
 8005324:	fa07 f70e 	lsl.w	r7, r7, lr
 8005328:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800532c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800532e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005330:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005334:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8005338:	409f      	lsls	r7, r3
 800533a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800533e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8005340:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005342:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005346:	688f      	ldr	r7, [r1, #8]
 8005348:	fa07 f70e 	lsl.w	r7, r7, lr
 800534c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005350:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8005354:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005356:	d116      	bne.n	8005386 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8005358:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800535c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005360:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005364:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005368:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800536c:	f04f 0c0f 	mov.w	ip, #15
 8005370:	fa0c fc0b 	lsl.w	ip, ip, fp
 8005374:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005378:	690f      	ldr	r7, [r1, #16]
 800537a:	fa07 f70b 	lsl.w	r7, r7, fp
 800537e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8005382:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8005386:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005388:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800538a:	f004 0703 	and.w	r7, r4, #3
 800538e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8005392:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8005396:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005398:	00e6      	lsls	r6, r4, #3
 800539a:	d561      	bpl.n	8005460 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800539c:	f04f 0b00 	mov.w	fp, #0
 80053a0:	f8cd b00c 	str.w	fp, [sp, #12]
 80053a4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053a8:	4e39      	ldr	r6, [pc, #228]	; (8005490 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053aa:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80053ae:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80053b2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80053b6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80053ba:	9703      	str	r7, [sp, #12]
 80053bc:	9f03      	ldr	r7, [sp, #12]
 80053be:	f023 0703 	bic.w	r7, r3, #3
 80053c2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80053c6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053ca:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80053ce:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80053d6:	f04f 0c0f 	mov.w	ip, #15
 80053da:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053de:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053e0:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053e4:	d043      	beq.n	800546e <HAL_GPIO_Init+0x192>
 80053e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80053ea:	42b0      	cmp	r0, r6
 80053ec:	d041      	beq.n	8005472 <HAL_GPIO_Init+0x196>
 80053ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80053f2:	42b0      	cmp	r0, r6
 80053f4:	d03f      	beq.n	8005476 <HAL_GPIO_Init+0x19a>
 80053f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80053fa:	42b0      	cmp	r0, r6
 80053fc:	d03d      	beq.n	800547a <HAL_GPIO_Init+0x19e>
 80053fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005402:	42b0      	cmp	r0, r6
 8005404:	d03b      	beq.n	800547e <HAL_GPIO_Init+0x1a2>
 8005406:	4548      	cmp	r0, r9
 8005408:	d03b      	beq.n	8005482 <HAL_GPIO_Init+0x1a6>
 800540a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800540e:	42b0      	cmp	r0, r6
 8005410:	d039      	beq.n	8005486 <HAL_GPIO_Init+0x1aa>
 8005412:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005416:	42b0      	cmp	r0, r6
 8005418:	bf14      	ite	ne
 800541a:	2608      	movne	r6, #8
 800541c:	2607      	moveq	r6, #7
 800541e:	fa06 f60e 	lsl.w	r6, r6, lr
 8005422:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005426:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8005428:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800542a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800542c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8005430:	bf0c      	ite	eq
 8005432:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005434:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8005436:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8005438:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800543a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800543e:	bf0c      	ite	eq
 8005440:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005442:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8005444:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005446:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005448:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800544c:	bf0c      	ite	eq
 800544e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005450:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8005452:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8005454:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005456:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8005458:	bf54      	ite	pl
 800545a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800545c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800545e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005460:	3301      	adds	r3, #1
 8005462:	2b10      	cmp	r3, #16
 8005464:	f47f af45 	bne.w	80052f2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8005468:	b005      	add	sp, #20
 800546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800546e:	465e      	mov	r6, fp
 8005470:	e7d5      	b.n	800541e <HAL_GPIO_Init+0x142>
 8005472:	2601      	movs	r6, #1
 8005474:	e7d3      	b.n	800541e <HAL_GPIO_Init+0x142>
 8005476:	2602      	movs	r6, #2
 8005478:	e7d1      	b.n	800541e <HAL_GPIO_Init+0x142>
 800547a:	2603      	movs	r6, #3
 800547c:	e7cf      	b.n	800541e <HAL_GPIO_Init+0x142>
 800547e:	2604      	movs	r6, #4
 8005480:	e7cd      	b.n	800541e <HAL_GPIO_Init+0x142>
 8005482:	2605      	movs	r6, #5
 8005484:	e7cb      	b.n	800541e <HAL_GPIO_Init+0x142>
 8005486:	2606      	movs	r6, #6
 8005488:	e7c9      	b.n	800541e <HAL_GPIO_Init+0x142>
 800548a:	bf00      	nop
 800548c:	40013c00 	.word	0x40013c00
 8005490:	40020000 	.word	0x40020000
 8005494:	40023800 	.word	0x40023800
 8005498:	40021400 	.word	0x40021400

0800549c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800549c:	b10a      	cbz	r2, 80054a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800549e:	6181      	str	r1, [r0, #24]
  }
}
 80054a0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054a2:	0409      	lsls	r1, r1, #16
 80054a4:	e7fb      	b.n	800549e <HAL_GPIO_WritePin+0x2>

080054a6 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054a6:	4770      	bx	lr

080054a8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80054a8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054aa:	4b04      	ldr	r3, [pc, #16]	; (80054bc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80054ac:	6959      	ldr	r1, [r3, #20]
 80054ae:	4201      	tst	r1, r0
 80054b0:	d002      	beq.n	80054b8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054b2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054b4:	f7ff fff7 	bl	80054a6 <HAL_GPIO_EXTI_Callback>
}
 80054b8:	bd08      	pop	{r3, pc}
 80054ba:	bf00      	nop
 80054bc:	40013c00 	.word	0x40013c00

080054c0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c0:	6801      	ldr	r1, [r0, #0]
 80054c2:	694b      	ldr	r3, [r1, #20]
 80054c4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	d010      	beq.n	80054f0 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ce:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80054d2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80054d4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80054d6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054dc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054e0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054e6:	f043 0304 	orr.w	r3, r3, #4
 80054ea:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80054ec:	2001      	movs	r0, #1
 80054ee:	4770      	bx	lr
  }
  return HAL_OK;
 80054f0:	4618      	mov	r0, r3
}
 80054f2:	4770      	bx	lr

080054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80054f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f8:	4604      	mov	r4, r0
 80054fa:	4616      	mov	r6, r2
 80054fc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054fe:	b28f      	uxth	r7, r1
 8005500:	6825      	ldr	r5, [r4, #0]
 8005502:	6968      	ldr	r0, [r5, #20]
 8005504:	ea37 0000 	bics.w	r0, r7, r0
 8005508:	d017      	beq.n	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800550a:	696b      	ldr	r3, [r5, #20]
 800550c:	055a      	lsls	r2, r3, #21
 800550e:	d516      	bpl.n	800553e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005516:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005518:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800551c:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800551e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005520:	2300      	movs	r3, #0
 8005522:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005528:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800552c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800552e:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005532:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005534:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005538:	2001      	movs	r0, #1
}
 800553a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800553e:	1c73      	adds	r3, r6, #1
 8005540:	d0df      	beq.n	8005502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7ff fccf 	bl	8004ee4 <HAL_GetTick>
 8005546:	eba0 0008 	sub.w	r0, r0, r8
 800554a:	42b0      	cmp	r0, r6
 800554c:	d801      	bhi.n	8005552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 800554e:	2e00      	cmp	r6, #0
 8005550:	d1d6      	bne.n	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005552:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005554:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005556:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005558:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005560:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005562:	f042 0220 	orr.w	r2, r2, #32
 8005566:	e7e4      	b.n	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08005568 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4604      	mov	r4, r0
 800556c:	460d      	mov	r5, r1
 800556e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	075b      	lsls	r3, r3, #29
 8005576:	d501      	bpl.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005578:	2000      	movs	r0, #0
}
 800557a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800557c:	4620      	mov	r0, r4
 800557e:	f7ff ff9f 	bl	80054c0 <I2C_IsAcknowledgeFailed>
 8005582:	b9a8      	cbnz	r0, 80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005584:	1c6a      	adds	r2, r5, #1
 8005586:	d0f3      	beq.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005588:	f7ff fcac 	bl	8004ee4 <HAL_GetTick>
 800558c:	1b80      	subs	r0, r0, r6
 800558e:	42a8      	cmp	r0, r5
 8005590:	d801      	bhi.n	8005596 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005592:	2d00      	cmp	r5, #0
 8005594:	d1ec      	bne.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005596:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005598:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800559a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800559c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80055a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055aa:	f042 0220 	orr.w	r2, r2, #32
 80055ae:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80055b0:	2001      	movs	r0, #1
 80055b2:	e7e2      	b.n	800557a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080055b4 <I2C_WaitOnFlagUntilTimeout>:
{
 80055b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b8:	9e08      	ldr	r6, [sp, #32]
 80055ba:	4604      	mov	r4, r0
 80055bc:	4690      	mov	r8, r2
 80055be:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055c0:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80055c4:	b28d      	uxth	r5, r1
 80055c6:	6821      	ldr	r1, [r4, #0]
 80055c8:	f1b9 0f01 	cmp.w	r9, #1
 80055cc:	bf0c      	ite	eq
 80055ce:	694b      	ldreq	r3, [r1, #20]
 80055d0:	698b      	ldrne	r3, [r1, #24]
 80055d2:	ea35 0303 	bics.w	r3, r5, r3
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	4598      	cmp	r8, r3
 80055de:	d001      	beq.n	80055e4 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80055e0:	2000      	movs	r0, #0
 80055e2:	e016      	b.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80055e4:	1c7b      	adds	r3, r7, #1
 80055e6:	d0ef      	beq.n	80055c8 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e8:	f7ff fc7c 	bl	8004ee4 <HAL_GetTick>
 80055ec:	1b80      	subs	r0, r0, r6
 80055ee:	42b8      	cmp	r0, r7
 80055f0:	d801      	bhi.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80055f2:	2f00      	cmp	r7, #0
 80055f4:	d1e7      	bne.n	80055c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055f6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80055f8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055fa:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005600:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005604:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005606:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800560a:	f042 0220 	orr.w	r2, r2, #32
 800560e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005610:	2001      	movs	r0, #1
}
 8005612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005616 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005616:	b570      	push	{r4, r5, r6, lr}
 8005618:	4604      	mov	r4, r0
 800561a:	460d      	mov	r5, r1
 800561c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	061b      	lsls	r3, r3, #24
 8005624:	d501      	bpl.n	800562a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005626:	2000      	movs	r0, #0
}
 8005628:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff ff48 	bl	80054c0 <I2C_IsAcknowledgeFailed>
 8005630:	b9a8      	cbnz	r0, 800565e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005632:	1c6a      	adds	r2, r5, #1
 8005634:	d0f3      	beq.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7ff fc55 	bl	8004ee4 <HAL_GetTick>
 800563a:	1b80      	subs	r0, r0, r6
 800563c:	42a8      	cmp	r0, r5
 800563e:	d801      	bhi.n	8005644 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005640:	2d00      	cmp	r5, #0
 8005642:	d1ec      	bne.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005644:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005646:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005648:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800564a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800564e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005652:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005654:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005658:	f042 0220 	orr.w	r2, r2, #32
 800565c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800565e:	2001      	movs	r0, #1
 8005660:	e7e2      	b.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08005664 <HAL_I2C_Init>:
{
 8005664:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005666:	4604      	mov	r4, r0
 8005668:	b908      	cbnz	r0, 800566e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800566a:	2001      	movs	r0, #1
}
 800566c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800566e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005672:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005676:	b91b      	cbnz	r3, 8005680 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005678:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800567c:	f7ff f88a 	bl	8004794 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005680:	2324      	movs	r3, #36	; 0x24
 8005682:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800569e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056a0:	f000 fe90 	bl	80063c4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	4a41      	ldr	r2, [pc, #260]	; (80057ac <HAL_I2C_Init+0x148>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d84d      	bhi.n	8005748 <HAL_I2C_Init+0xe4>
 80056ac:	4a40      	ldr	r2, [pc, #256]	; (80057b0 <HAL_I2C_Init+0x14c>)
 80056ae:	4290      	cmp	r0, r2
 80056b0:	d9db      	bls.n	800566a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056b2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80056b4:	493f      	ldr	r1, [pc, #252]	; (80057b4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056b6:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80056b8:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056bc:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80056c0:	430d      	orrs	r5, r1
 80056c2:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056c4:	6a15      	ldr	r5, [r2, #32]
 80056c6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80056ca:	3101      	adds	r1, #1
 80056cc:	4329      	orrs	r1, r5
 80056ce:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056d0:	69d1      	ldr	r1, [r2, #28]
 80056d2:	4d36      	ldr	r5, [pc, #216]	; (80057ac <HAL_I2C_Init+0x148>)
 80056d4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80056d8:	42ab      	cmp	r3, r5
 80056da:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80056de:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80056e2:	d848      	bhi.n	8005776 <HAL_I2C_Init+0x112>
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	bf38      	it	cc
 80056f4:	2304      	movcc	r3, #4
 80056f6:	430b      	orrs	r3, r1
 80056f8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056fa:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80056fe:	6811      	ldr	r1, [r2, #0]
 8005700:	4303      	orrs	r3, r0
 8005702:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005706:	430b      	orrs	r3, r1
 8005708:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800570a:	6891      	ldr	r1, [r2, #8]
 800570c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005710:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005714:	4303      	orrs	r3, r0
 8005716:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800571a:	430b      	orrs	r3, r1
 800571c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800571e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005722:	68d1      	ldr	r1, [r2, #12]
 8005724:	4303      	orrs	r3, r0
 8005726:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800572a:	430b      	orrs	r3, r1
 800572c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005736:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005738:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800573c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005740:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005746:	e791      	b.n	800566c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <HAL_I2C_Init+0x154>)
 800574a:	4290      	cmp	r0, r2
 800574c:	d98d      	bls.n	800566a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800574e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005750:	4e18      	ldr	r6, [pc, #96]	; (80057b4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005752:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005754:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005758:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800575c:	4335      	orrs	r5, r6
 800575e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005760:	6a15      	ldr	r5, [r2, #32]
 8005762:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005766:	4371      	muls	r1, r6
 8005768:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800576c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005770:	fbb1 f1f6 	udiv	r1, r1, r6
 8005774:	e7a9      	b.n	80056ca <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005776:	68a5      	ldr	r5, [r4, #8]
 8005778:	b955      	cbnz	r5, 8005790 <HAL_I2C_Init+0x12c>
 800577a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800577e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005788:	b16b      	cbz	r3, 80057a6 <HAL_I2C_Init+0x142>
 800578a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578e:	e7b2      	b.n	80056f6 <HAL_I2C_Init+0x92>
 8005790:	2519      	movs	r5, #25
 8005792:	436b      	muls	r3, r5
 8005794:	fbb0 f0f3 	udiv	r0, r0, r3
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579e:	b113      	cbz	r3, 80057a6 <HAL_I2C_Init+0x142>
 80057a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a4:	e7a7      	b.n	80056f6 <HAL_I2C_Init+0x92>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e7a5      	b.n	80056f6 <HAL_I2C_Init+0x92>
 80057aa:	bf00      	nop
 80057ac:	000186a0 	.word	0x000186a0
 80057b0:	001e847f 	.word	0x001e847f
 80057b4:	000f4240 	.word	0x000f4240
 80057b8:	003d08ff 	.word	0x003d08ff

080057bc <HAL_I2C_Master_Transmit>:
{
 80057bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80057c0:	4604      	mov	r4, r0
 80057c2:	461f      	mov	r7, r3
 80057c4:	460d      	mov	r5, r1
 80057c6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80057c8:	f7ff fb8c 	bl	8004ee4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057cc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80057d0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80057d2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d4:	d004      	beq.n	80057e0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80057d6:	2502      	movs	r5, #2
}
 80057d8:	4628      	mov	r0, r5
 80057da:	b004      	add	sp, #16
 80057dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057e0:	9000      	str	r0, [sp, #0]
 80057e2:	2319      	movs	r3, #25
 80057e4:	2201      	movs	r2, #1
 80057e6:	495b      	ldr	r1, [pc, #364]	; (8005954 <HAL_I2C_Master_Transmit+0x198>)
 80057e8:	4620      	mov	r0, r4
 80057ea:	f7ff fee3 	bl	80055b4 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d1f1      	bne.n	80057d6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80057f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d0ed      	beq.n	80057d6 <HAL_I2C_Master_Transmit+0x1a>
 80057fa:	2301      	movs	r3, #1
 80057fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005806:	bf5e      	ittt	pl
 8005808:	681a      	ldrpl	r2, [r3, #0]
 800580a:	f042 0201 	orrpl.w	r2, r2, #1
 800580e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005816:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005818:	2221      	movs	r2, #33	; 0x21
 800581a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800581e:	2210      	movs	r2, #16
 8005820:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005824:	2200      	movs	r2, #0
 8005826:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005828:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800582a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800582c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800582e:	4a4a      	ldr	r2, [pc, #296]	; (8005958 <HAL_I2C_Master_Transmit+0x19c>)
 8005830:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8005834:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005838:	2a08      	cmp	r2, #8
 800583a:	d004      	beq.n	8005846 <HAL_I2C_Master_Transmit+0x8a>
 800583c:	2a01      	cmp	r2, #1
 800583e:	d002      	beq.n	8005846 <HAL_I2C_Master_Transmit+0x8a>
 8005840:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005844:	d104      	bne.n	8005850 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e002      	b.n	8005856 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005850:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005852:	2a12      	cmp	r2, #18
 8005854:	d0f7      	beq.n	8005846 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005856:	2200      	movs	r2, #0
 8005858:	9600      	str	r6, [sp, #0]
 800585a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005860:	4620      	mov	r0, r4
 8005862:	f7ff fea7 	bl	80055b4 <I2C_WaitOnFlagUntilTimeout>
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	b138      	cbz	r0, 800587a <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800586a:	6813      	ldr	r3, [r2, #0]
 800586c:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800586e:	bf44      	itt	mi
 8005870:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8005874:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005876:	2501      	movs	r5, #1
 8005878:	e7ae      	b.n	80057d8 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005880:	d121      	bne.n	80058c6 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005882:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005886:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005888:	4633      	mov	r3, r6
 800588a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800588c:	4933      	ldr	r1, [pc, #204]	; (800595c <HAL_I2C_Master_Transmit+0x1a0>)
 800588e:	4620      	mov	r0, r4
 8005890:	f7ff fe30 	bl	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005894:	4605      	mov	r5, r0
 8005896:	2800      	cmp	r0, #0
 8005898:	d1ed      	bne.n	8005876 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	9003      	str	r0, [sp, #12]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	9203      	str	r2, [sp, #12]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	9303      	str	r3, [sp, #12]
 80058a6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80058a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058aa:	b9f3      	cbnz	r3, 80058ea <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ac:	6821      	ldr	r1, [r4, #0]
 80058ae:	680a      	ldr	r2, [r1, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b4:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80058b6:	2220      	movs	r2, #32
 80058b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80058bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80058c4:	e788      	b.n	80057d8 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058c6:	11eb      	asrs	r3, r5, #7
 80058c8:	f003 0306 	and.w	r3, r3, #6
 80058cc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80058d0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058d2:	4923      	ldr	r1, [pc, #140]	; (8005960 <HAL_I2C_Master_Transmit+0x1a4>)
 80058d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058d6:	4633      	mov	r3, r6
 80058d8:	4620      	mov	r0, r4
 80058da:	f7ff fe0b 	bl	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d1c9      	bne.n	8005876 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	b2ed      	uxtb	r5, r5
 80058e6:	611d      	str	r5, [r3, #16]
 80058e8:	e7ce      	b.n	8005888 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ea:	4632      	mov	r2, r6
 80058ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7ff fe91 	bl	8005616 <I2C_WaitOnTXEFlagUntilTimeout>
 80058f4:	b140      	cbz	r0, 8005908 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d1bc      	bne.n	8005876 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	6822      	ldr	r2, [r4, #0]
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e7b6      	b.n	8005876 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005912:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8005914:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005916:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005918:	3a01      	subs	r2, #1
 800591a:	b292      	uxth	r2, r2
 800591c:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800591e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005920:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8005922:	1e51      	subs	r1, r2, #1
 8005924:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005926:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8005928:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800592a:	d50a      	bpl.n	8005942 <HAL_I2C_Master_Transmit+0x186>
 800592c:	b149      	cbz	r1, 8005942 <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800592e:	7859      	ldrb	r1, [r3, #1]
 8005930:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8005932:	3302      	adds	r3, #2
 8005934:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005936:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005938:	3b01      	subs	r3, #1
 800593a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800593c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800593e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005940:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005942:	4632      	mov	r2, r6
 8005944:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005946:	4620      	mov	r0, r4
 8005948:	f7ff fe0e 	bl	8005568 <I2C_WaitOnBTFFlagUntilTimeout>
 800594c:	2800      	cmp	r0, #0
 800594e:	d0ab      	beq.n	80058a8 <HAL_I2C_Master_Transmit+0xec>
 8005950:	e7d1      	b.n	80058f6 <HAL_I2C_Master_Transmit+0x13a>
 8005952:	bf00      	nop
 8005954:	00100002 	.word	0x00100002
 8005958:	ffff0000 	.word	0xffff0000
 800595c:	00010002 	.word	0x00010002
 8005960:	00010008 	.word	0x00010008

08005964 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005966:	4604      	mov	r4, r0
 8005968:	2800      	cmp	r0, #0
 800596a:	d041      	beq.n	80059f0 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800596c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005970:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005974:	b92b      	cbnz	r3, 8005982 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005976:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8005978:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800597c:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800597e:	f7fe ff43 	bl	8004808 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005982:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005984:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8005986:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800598a:	69d3      	ldr	r3, [r2, #28]
 800598c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005990:	f023 030f 	bic.w	r3, r3, #15
 8005994:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005996:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8005998:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800599a:	428b      	cmp	r3, r1
 800599c:	d031      	beq.n	8005a02 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800599e:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80059a0:	2b00      	cmp	r3, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80059a2:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 80059a4:	bf14      	ite	ne
 80059a6:	2520      	movne	r5, #32
 80059a8:	2510      	moveq	r5, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059aa:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80059ac:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80059ae:	bf98      	it	ls
 80059b0:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059b2:	f000 fdbf 	bl	8006534 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6961      	ldr	r1, [r4, #20]
 80059ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059be:	d11b      	bne.n	80059f8 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059c0:	68e3      	ldr	r3, [r4, #12]
 80059c2:	220a      	movs	r2, #10
 80059c4:	b1b3      	cbz	r3, 80059f4 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059c6:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80059cc:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80059ce:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80059d4:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80059d6:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059da:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80059de:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059e0:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059e2:	1e99      	subs	r1, r3, #2
 80059e4:	29fd      	cmp	r1, #253	; 0xfd
 80059e6:	d90e      	bls.n	8005a06 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059ea:	f043 0310 	orr.w	r3, r3, #16
 80059ee:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80059f0:	2001      	movs	r0, #1
 80059f2:	e044      	b.n	8005a7e <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059f4:	00eb      	lsls	r3, r5, #3
 80059f6:	e7e7      	b.n	80059c8 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059f8:	230a      	movs	r3, #10
 80059fa:	fbb0 f0f5 	udiv	r0, r0, r5
 80059fe:	4343      	muls	r3, r0
 8005a00:	e7e5      	b.n	80059ce <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8005a02:	2200      	movs	r2, #0
 8005a04:	e7ed      	b.n	80059e2 <HAL_I2S_Init+0x7e>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a06:	4313      	orrs	r3, r2
 8005a08:	6922      	ldr	r2, [r4, #16]
 8005a0a:	6821      	ldr	r1, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a0c:	68e5      	ldr	r5, [r4, #12]
 8005a0e:	69a0      	ldr	r0, [r4, #24]
 8005a10:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005a90 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a14:	4313      	orrs	r3, r2
 8005a16:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a18:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8005a1c:	ea46 0203 	orr.w	r2, r6, r3
 8005a20:	69cf      	ldr	r7, [r1, #28]
 8005a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a26:	432a      	orrs	r2, r5
 8005a28:	4302      	orrs	r2, r0
 8005a2a:	ea07 070c 	and.w	r7, r7, ip
 8005a2e:	433a      	orrs	r2, r7
 8005a30:	61ca      	str	r2, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a32:	6a22      	ldr	r2, [r4, #32]
 8005a34:	2a01      	cmp	r2, #1
 8005a36:	d11d      	bne.n	8005a74 <HAL_I2S_Init+0x110>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a38:	4a12      	ldr	r2, [pc, #72]	; (8005a84 <HAL_I2S_Init+0x120>)
 8005a3a:	6362      	str	r2, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a3c:	4f12      	ldr	r7, [pc, #72]	; (8005a88 <HAL_I2S_Init+0x124>)
 8005a3e:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <HAL_I2S_Init+0x128>)
 8005a40:	42b9      	cmp	r1, r7
 8005a42:	bf18      	it	ne
 8005a44:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005a48:	432b      	orrs	r3, r5
 8005a4a:	69d1      	ldr	r1, [r2, #28]
 8005a4c:	ea01 010c 	and.w	r1, r1, ip
 8005a50:	61d1      	str	r1, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a52:	2102      	movs	r1, #2
 8005a54:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a56:	69d7      	ldr	r7, [r2, #28]
 8005a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a5c:	4303      	orrs	r3, r0

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a5e:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8005a62:	ea43 0307 	orr.w	r3, r3, r7
 8005a66:	bf14      	ite	ne
 8005a68:	2100      	movne	r1, #0
 8005a6a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005a6e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a70:	430b      	orrs	r3, r1
 8005a72:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a74:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a76:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a78:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8005a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a80:	08005b7d 	.word	0x08005b7d
 8005a84:	08005ca1 	.word	0x08005ca1
 8005a88:	40003800 	.word	0x40003800
 8005a8c:	40003400 	.word	0x40003400
 8005a90:	fffff040 	.word	0xfffff040

08005a94 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4604      	mov	r4, r0
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	d04e      	beq.n	8005b3a <HAL_I2S_Transmit_DMA+0xa6>
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	d04c      	beq.n	8005b3a <HAL_I2S_Transmit_DMA+0xa6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005aa0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d00a      	beq.n	8005abe <HAL_I2S_Transmit_DMA+0x2a>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005aae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_I2S_Transmit_DMA+0x2e>
  {
    __HAL_UNLOCK(hi2s);
 8005aba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8005abe:	2002      	movs	r0, #2
 8005ac0:	e027      	b.n	8005b12 <HAL_I2S_Transmit_DMA+0x7e>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005ac2:	2003      	movs	r0, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005ac4:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005ac6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005aca:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005acc:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 8005ace:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005ad0:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005ad4:	4283      	cmp	r3, r0
 8005ad6:	d001      	beq.n	8005adc <HAL_I2S_Transmit_DMA+0x48>
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d11b      	bne.n	8005b14 <HAL_I2S_Transmit_DMA+0x80>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005adc:	0053      	lsls	r3, r2, #1
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005ae2:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->TxXferSize = Size;
    hi2s->TxXferCount = Size;
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005ae4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ae6:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <HAL_I2S_Transmit_DMA+0xac>)
 8005ae8:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005aea:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <HAL_I2S_Transmit_DMA+0xb0>)
 8005aec:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005aee:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <HAL_I2S_Transmit_DMA+0xb4>)
 8005af0:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005af2:	f105 020c 	add.w	r2, r5, #12
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8005af6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005af8:	f7ff faf8 	bl	80050ec <HAL_DMA_Start_IT>
 8005afc:	b168      	cbz	r0, 8005b1a <HAL_I2S_Transmit_DMA+0x86>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005afe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005b00:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b02:	f043 0308 	orr.w	r3, r3, #8
 8005b06:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005b08:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
  }

  __HAL_UNLOCK(hi2s);
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = Size;
 8005b14:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005b16:	8562      	strh	r2, [r4, #42]	; 0x2a
 8005b18:	e7e4      	b.n	8005ae4 <HAL_I2S_Transmit_DMA+0x50>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	69da      	ldr	r2, [r3, #28]
 8005b1e:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8005b20:	bf5e      	ittt	pl
 8005b22:	69da      	ldrpl	r2, [r3, #28]
 8005b24:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8005b28:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b2e:	bf5e      	ittt	pl
 8005b30:	685a      	ldrpl	r2, [r3, #4]
 8005b32:	f042 0202 	orrpl.w	r2, r2, #2
 8005b36:	605a      	strpl	r2, [r3, #4]
 8005b38:	e7e8      	b.n	8005b0c <HAL_I2S_Transmit_DMA+0x78>
    return  HAL_ERROR;
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	e7e9      	b.n	8005b12 <HAL_I2S_Transmit_DMA+0x7e>
 8005b3e:	bf00      	nop
 8005b40:	08005b4d 	.word	0x08005b4d
 8005b44:	08005b57 	.word	0x08005b57
 8005b48:	08005c77 	.word	0x08005c77

08005b4c <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005b4e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005b50:	f7fb fc46 	bl	80013e0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b54:	bd08      	pop	{r3, pc}

08005b56 <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8005b56:	69c1      	ldr	r1, [r0, #28]
{
 8005b58:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8005b5c:	b941      	cbnz	r1, 8005b70 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	6842      	ldr	r2, [r0, #4]
 8005b62:	f022 0202 	bic.w	r2, r2, #2
 8005b66:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005b68:	2201      	movs	r2, #1
    hi2s->TxXferCount = 0U;
 8005b6a:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fb fc27 	bl	80013c4 <HAL_I2S_TxCpltCallback>
}
 8005b76:	bd08      	pop	{r3, pc}

08005b78 <HAL_I2S_RxCpltCallback>:
 8005b78:	4770      	bx	lr

08005b7a <HAL_I2S_ErrorCallback>:
 8005b7a:	4770      	bx	lr

08005b7c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005b7e:	6803      	ldr	r3, [r0, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005b84:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005b88:	2a04      	cmp	r2, #4
{
 8005b8a:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005b8c:	d136      	bne.n	8005bfc <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005b8e:	9a01      	ldr	r2, [sp, #4]
 8005b90:	07d1      	lsls	r1, r2, #31
 8005b92:	d517      	bpl.n	8005bc4 <I2S_IRQHandler+0x48>
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	0652      	lsls	r2, r2, #25
 8005b98:	d514      	bpl.n	8005bc4 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005b9c:	68d9      	ldr	r1, [r3, #12]
 8005b9e:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8005ba2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005ba4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005ba6:	3a01      	subs	r2, #1
 8005ba8:	b292      	uxth	r2, r2
 8005baa:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8005bac:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005bae:	b292      	uxth	r2, r2
 8005bb0:	b942      	cbnz	r2, 8005bc4 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bb8:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8005bc0:	f7ff ffda 	bl	8005b78 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	0659      	lsls	r1, r3, #25
 8005bc8:	d518      	bpl.n	8005bfc <I2S_IRQHandler+0x80>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	0692      	lsls	r2, r2, #26
 8005bd0:	d514      	bpl.n	8005bfc <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bd8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	9202      	str	r2, [sp, #8]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	9202      	str	r2, [sp, #8]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	9302      	str	r3, [sp, #8]
 8005be6:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f7ff ffbf 	bl	8005b7a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005bfc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d136      	bne.n	8005c72 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c04:	9b01      	ldr	r3, [sp, #4]
 8005c06:	079b      	lsls	r3, r3, #30
 8005c08:	d519      	bpl.n	8005c3e <I2S_IRQHandler+0xc2>
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	6853      	ldr	r3, [r2, #4]
 8005c0e:	0618      	lsls	r0, r3, #24
 8005c10:	d515      	bpl.n	8005c3e <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c14:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005c18:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8005c1a:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8005c1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005c24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	b94b      	cbnz	r3, 8005c3e <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c2a:	6853      	ldr	r3, [r2, #4]
 8005c2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c30:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f7fb fbc3 	bl	80013c4 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c3e:	9b01      	ldr	r3, [sp, #4]
 8005c40:	0719      	lsls	r1, r3, #28
 8005c42:	d516      	bpl.n	8005c72 <I2S_IRQHandler+0xf6>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	0692      	lsls	r2, r2, #26
 8005c4a:	d512      	bpl.n	8005c72 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c52:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c54:	2200      	movs	r2, #0
 8005c56:	9203      	str	r2, [sp, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	9303      	str	r3, [sp, #12]
 8005c5c:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7ff ff84 	bl	8005b7a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c72:	b004      	add	sp, #16
 8005c74:	bd10      	pop	{r4, pc}

08005c76 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c76:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005c78:	6802      	ldr	r2, [r0, #0]
{
 8005c7a:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005c7c:	6853      	ldr	r3, [r2, #4]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005c88:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005c92:	f043 0308 	orr.w	r3, r3, #8
 8005c96:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8005c98:	f7ff ff6f 	bl	8005b7a <HAL_I2S_ErrorCallback>
}
 8005c9c:	bd08      	pop	{r3, pc}

08005c9e <HAL_I2SEx_TxRxCpltCallback>:
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ca0:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ca2:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ca4:	498e      	ldr	r1, [pc, #568]	; (8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ca6:	6893      	ldr	r3, [r2, #8]
{
 8005ca8:	b086      	sub	sp, #24
 8005caa:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005cac:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005cae:	4b8d      	ldr	r3, [pc, #564]	; (8005ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005cb0:	428a      	cmp	r2, r1
 8005cb2:	bf18      	it	ne
 8005cb4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005cb8:	6899      	ldr	r1, [r3, #8]
 8005cba:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005cbc:	6851      	ldr	r1, [r2, #4]
 8005cbe:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005cc0:	6859      	ldr	r1, [r3, #4]
 8005cc2:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005cc4:	6841      	ldr	r1, [r0, #4]
 8005cc6:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8005cca:	f040 8093 	bne.w	8005df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005cce:	9b00      	ldr	r3, [sp, #0]
 8005cd0:	0799      	lsls	r1, r3, #30
 8005cd2:	d51a      	bpl.n	8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8005cd4:	9b02      	ldr	r3, [sp, #8]
 8005cd6:	061b      	lsls	r3, r3, #24
 8005cd8:	d517      	bpl.n	8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005cda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cdc:	1c99      	adds	r1, r3, #2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	6241      	str	r1, [r0, #36]	; 0x24
 8005ce2:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8005ce4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	b95b      	cbnz	r3, 8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cf2:	6853      	ldr	r3, [r2, #4]
 8005cf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cf8:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8005cfa:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	b923      	cbnz	r3, 8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d06:	f7ff ffca 	bl	8005c9e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	07d8      	lsls	r0, r3, #31
 8005d0e:	d522      	bpl.n	8005d56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8005d10:	9b03      	ldr	r3, [sp, #12]
 8005d12:	0659      	lsls	r1, r3, #25
 8005d14:	d51f      	bpl.n	8005d56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005d16:	6821      	ldr	r1, [r4, #0]
 8005d18:	4a71      	ldr	r2, [pc, #452]	; (8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005d1a:	4b72      	ldr	r3, [pc, #456]	; (8005ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005d1c:	4291      	cmp	r1, r2
 8005d1e:	bf18      	it	ne
 8005d20:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005d24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d26:	68d9      	ldr	r1, [r3, #12]
 8005d28:	1c90      	adds	r0, r2, #2
 8005d2a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8005d2c:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8005d2e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005d30:	3a01      	subs	r2, #1
 8005d32:	b292      	uxth	r2, r2
 8005d34:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d36:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005d38:	b292      	uxth	r2, r2
 8005d3a:	b962      	cbnz	r2, 8005d56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	b92b      	cbnz	r3, 8005d56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7ff ffa4 	bl	8005c9e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d56:	9b01      	ldr	r3, [sp, #4]
 8005d58:	065a      	lsls	r2, r3, #25
 8005d5a:	d522      	bpl.n	8005da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	069b      	lsls	r3, r3, #26
 8005d60:	d51f      	bpl.n	8005da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	495e      	ldr	r1, [pc, #376]	; (8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005d66:	4a5f      	ldr	r2, [pc, #380]	; (8005ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	bf18      	it	ne
 8005d6c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8005d70:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d72:	6851      	ldr	r1, [r2, #4]
 8005d74:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005d78:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d80:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d82:	2200      	movs	r2, #0
 8005d84:	9204      	str	r2, [sp, #16]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	9204      	str	r2, [sp, #16]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d98:	f043 0302 	orr.w	r3, r3, #2
 8005d9c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005d9e:	f7ff feec 	bl	8005b7a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005da2:	9b00      	ldr	r3, [sp, #0]
 8005da4:	0718      	lsls	r0, r3, #28
 8005da6:	f140 8098 	bpl.w	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8005daa:	9b02      	ldr	r3, [sp, #8]
 8005dac:	0699      	lsls	r1, r3, #26
 8005dae:	f140 8094 	bpl.w	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005db2:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005db4:	494a      	ldr	r1, [pc, #296]	; (8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dbc:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dbe:	4a49      	ldr	r2, [pc, #292]	; (8005ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005dc0:	428b      	cmp	r3, r1
 8005dc2:	bf18      	it	ne
 8005dc4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005dc8:	6851      	ldr	r1, [r2, #4]
 8005dca:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005dce:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	9205      	str	r2, [sp, #20]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	9305      	str	r3, [sp, #20]
 8005dd8:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005de0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005de2:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005dea:	b006      	add	sp, #24
 8005dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8005df0:	f7ff bec3 	b.w	8005b7a <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005df4:	9a01      	ldr	r2, [sp, #4]
 8005df6:	0792      	lsls	r2, r2, #30
 8005df8:	d51a      	bpl.n	8005e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8005dfa:	9a03      	ldr	r2, [sp, #12]
 8005dfc:	0611      	lsls	r1, r2, #24
 8005dfe:	d517      	bpl.n	8005e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005e00:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005e02:	1c91      	adds	r1, r2, #2
 8005e04:	8812      	ldrh	r2, [r2, #0]
 8005e06:	6241      	str	r1, [r0, #36]	; 0x24
 8005e08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e0a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005e0c:	3a01      	subs	r2, #1
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005e12:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005e14:	b292      	uxth	r2, r2
 8005e16:	b95a      	cbnz	r2, 8005e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e1e:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8005e20:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	b923      	cbnz	r3, 8005e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e2c:	f7ff ff37 	bl	8005c9e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005e30:	9b00      	ldr	r3, [sp, #0]
 8005e32:	07da      	lsls	r2, r3, #31
 8005e34:	d51c      	bpl.n	8005e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8005e36:	9b02      	ldr	r3, [sp, #8]
 8005e38:	065b      	lsls	r3, r3, #25
 8005e3a:	d519      	bpl.n	8005e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005e3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	1c98      	adds	r0, r3, #2
 8005e42:	68d1      	ldr	r1, [r2, #12]
 8005e44:	62e0      	str	r0, [r4, #44]	; 0x2c
 8005e46:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8005e48:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8005e50:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	b963      	cbnz	r3, 8005e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e56:	6853      	ldr	r3, [r2, #4]
 8005e58:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005e5c:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8005e5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	b92b      	cbnz	r3, 8005e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f7ff ff17 	bl	8005c9e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e70:	9b00      	ldr	r3, [sp, #0]
 8005e72:	0658      	lsls	r0, r3, #25
 8005e74:	d51b      	bpl.n	8005eae <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 8005e76:	9b02      	ldr	r3, [sp, #8]
 8005e78:	0699      	lsls	r1, r3, #26
 8005e7a:	d518      	bpl.n	8005eae <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e7c:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e7e:	4918      	ldr	r1, [pc, #96]	; (8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e80:	6853      	ldr	r3, [r2, #4]
 8005e82:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005e86:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e88:	4b16      	ldr	r3, [pc, #88]	; (8005ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005e8a:	428a      	cmp	r2, r1
 8005e8c:	bf18      	it	ne
 8005e8e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8005e92:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e9a:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ea4:	f043 0302 	orr.w	r3, r3, #2
 8005ea8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005eaa:	f7ff fe66 	bl	8005b7a <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	071a      	lsls	r2, r3, #28
 8005eb2:	d512      	bpl.n	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8005eb4:	9b03      	ldr	r3, [sp, #12]
 8005eb6:	069b      	lsls	r3, r3, #26
 8005eb8:	d50f      	bpl.n	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	4908      	ldr	r1, [pc, #32]	; (8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005ec0:	428a      	cmp	r2, r1
 8005ec2:	bf18      	it	ne
 8005ec4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8005ece:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ed0:	6853      	ldr	r3, [r2, #4]
 8005ed2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005ed6:	6053      	str	r3, [r2, #4]
 8005ed8:	e77f      	b.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8005eda:	b006      	add	sp, #24
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	40003800 	.word	0x40003800
 8005ee4:	40003400 	.word	0x40003400

08005ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eec:	4604      	mov	r4, r0
 8005eee:	b908      	cbnz	r0, 8005ef4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	e03f      	b.n	8005f74 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef4:	6803      	ldr	r3, [r0, #0]
 8005ef6:	07dd      	lsls	r5, r3, #31
 8005ef8:	d410      	bmi.n	8005f1c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	0798      	lsls	r0, r3, #30
 8005efe:	d45a      	bmi.n	8005fb6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	071a      	lsls	r2, r3, #28
 8005f04:	f100 809c 	bmi.w	8006040 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	075b      	lsls	r3, r3, #29
 8005f0c:	f100 80ba 	bmi.w	8006084 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f10:	69a0      	ldr	r0, [r4, #24]
 8005f12:	2800      	cmp	r0, #0
 8005f14:	f040 811b 	bne.w	800614e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e02b      	b.n	8005f74 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f1c:	4ba7      	ldr	r3, [pc, #668]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	f002 020c 	and.w	r2, r2, #12
 8005f24:	2a04      	cmp	r2, #4
 8005f26:	d007      	beq.n	8005f38 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f2e:	2a08      	cmp	r2, #8
 8005f30:	d10a      	bne.n	8005f48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	0259      	lsls	r1, r3, #9
 8005f36:	d507      	bpl.n	8005f48 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	4ba0      	ldr	r3, [pc, #640]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	039a      	lsls	r2, r3, #14
 8005f3e:	d5dc      	bpl.n	8005efa <HAL_RCC_OscConfig+0x12>
 8005f40:	6863      	ldr	r3, [r4, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1d9      	bne.n	8005efa <HAL_RCC_OscConfig+0x12>
 8005f46:	e7d3      	b.n	8005ef0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f48:	6863      	ldr	r3, [r4, #4]
 8005f4a:	4d9c      	ldr	r5, [pc, #624]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f50:	d113      	bne.n	8005f7a <HAL_RCC_OscConfig+0x92>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f5a:	f7fe ffc3 	bl	8004ee4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5e:	4d97      	ldr	r5, [pc, #604]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8005f60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	039b      	lsls	r3, r3, #14
 8005f66:	d4c8      	bmi.n	8005efa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f68:	f7fe ffbc 	bl	8004ee4 <HAL_GetTick>
 8005f6c:	1b80      	subs	r0, r0, r6
 8005f6e:	2864      	cmp	r0, #100	; 0x64
 8005f70:	d9f7      	bls.n	8005f62 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8005f72:	2003      	movs	r0, #3
}
 8005f74:	b002      	add	sp, #8
 8005f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f7e:	d104      	bne.n	8005f8a <HAL_RCC_OscConfig+0xa2>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f86:	602b      	str	r3, [r5, #0]
 8005f88:	e7e3      	b.n	8005f52 <HAL_RCC_OscConfig+0x6a>
 8005f8a:	682a      	ldr	r2, [r5, #0]
 8005f8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	682a      	ldr	r2, [r5, #0]
 8005f94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f98:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1dd      	bne.n	8005f5a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8005f9e:	f7fe ffa1 	bl	8004ee4 <HAL_GetTick>
 8005fa2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	039f      	lsls	r7, r3, #14
 8005fa8:	d5a7      	bpl.n	8005efa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005faa:	f7fe ff9b 	bl	8004ee4 <HAL_GetTick>
 8005fae:	1b80      	subs	r0, r0, r6
 8005fb0:	2864      	cmp	r0, #100	; 0x64
 8005fb2:	d9f7      	bls.n	8005fa4 <HAL_RCC_OscConfig+0xbc>
 8005fb4:	e7dd      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fb6:	4b81      	ldr	r3, [pc, #516]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	f012 0f0c 	tst.w	r2, #12
 8005fbe:	d007      	beq.n	8005fd0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fc6:	2a08      	cmp	r2, #8
 8005fc8:	d111      	bne.n	8005fee <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	025e      	lsls	r6, r3, #9
 8005fce:	d40e      	bmi.n	8005fee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fd0:	4b7a      	ldr	r3, [pc, #488]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	0795      	lsls	r5, r2, #30
 8005fd6:	d502      	bpl.n	8005fde <HAL_RCC_OscConfig+0xf6>
 8005fd8:	68e2      	ldr	r2, [r4, #12]
 8005fda:	2a01      	cmp	r2, #1
 8005fdc:	d188      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	6921      	ldr	r1, [r4, #16]
 8005fe2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005fe6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005fea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fec:	e788      	b.n	8005f00 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fee:	68e2      	ldr	r2, [r4, #12]
 8005ff0:	4b73      	ldr	r3, [pc, #460]	; (80061c0 <HAL_RCC_OscConfig+0x2d8>)
 8005ff2:	b1b2      	cbz	r2, 8006022 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ff8:	f7fe ff74 	bl	8004ee4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffc:	4d6f      	ldr	r5, [pc, #444]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8005ffe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	0798      	lsls	r0, r3, #30
 8006004:	d507      	bpl.n	8006016 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	6922      	ldr	r2, [r4, #16]
 800600a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800600e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	e774      	b.n	8005f00 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006016:	f7fe ff65 	bl	8004ee4 <HAL_GetTick>
 800601a:	1b80      	subs	r0, r0, r6
 800601c:	2802      	cmp	r0, #2
 800601e:	d9ef      	bls.n	8006000 <HAL_RCC_OscConfig+0x118>
 8006020:	e7a7      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8006022:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006024:	f7fe ff5e 	bl	8004ee4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006028:	4d64      	ldr	r5, [pc, #400]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800602a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	0799      	lsls	r1, r3, #30
 8006030:	f57f af66 	bpl.w	8005f00 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006034:	f7fe ff56 	bl	8004ee4 <HAL_GetTick>
 8006038:	1b80      	subs	r0, r0, r6
 800603a:	2802      	cmp	r0, #2
 800603c:	d9f6      	bls.n	800602c <HAL_RCC_OscConfig+0x144>
 800603e:	e798      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006040:	6962      	ldr	r2, [r4, #20]
 8006042:	4b60      	ldr	r3, [pc, #384]	; (80061c4 <HAL_RCC_OscConfig+0x2dc>)
 8006044:	b17a      	cbz	r2, 8006066 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800604a:	f7fe ff4b 	bl	8004ee4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800604e:	4d5b      	ldr	r5, [pc, #364]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8006050:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006052:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006054:	079f      	lsls	r7, r3, #30
 8006056:	f53f af57 	bmi.w	8005f08 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605a:	f7fe ff43 	bl	8004ee4 <HAL_GetTick>
 800605e:	1b80      	subs	r0, r0, r6
 8006060:	2802      	cmp	r0, #2
 8006062:	d9f6      	bls.n	8006052 <HAL_RCC_OscConfig+0x16a>
 8006064:	e785      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8006066:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006068:	f7fe ff3c 	bl	8004ee4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800606c:	4d53      	ldr	r5, [pc, #332]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800606e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006072:	0798      	lsls	r0, r3, #30
 8006074:	f57f af48 	bpl.w	8005f08 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006078:	f7fe ff34 	bl	8004ee4 <HAL_GetTick>
 800607c:	1b80      	subs	r0, r0, r6
 800607e:	2802      	cmp	r0, #2
 8006080:	d9f6      	bls.n	8006070 <HAL_RCC_OscConfig+0x188>
 8006082:	e776      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006084:	4b4d      	ldr	r3, [pc, #308]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 8006086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006088:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800608c:	d128      	bne.n	80060e0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800608e:	9201      	str	r2, [sp, #4]
 8006090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006092:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006096:	641a      	str	r2, [r3, #64]	; 0x40
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80060a2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4d48      	ldr	r5, [pc, #288]	; (80061c8 <HAL_RCC_OscConfig+0x2e0>)
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	05d9      	lsls	r1, r3, #23
 80060aa:	d51b      	bpl.n	80060e4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ac:	68a3      	ldr	r3, [r4, #8]
 80060ae:	4d43      	ldr	r5, [pc, #268]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d127      	bne.n	8006104 <HAL_RCC_OscConfig+0x21c>
 80060b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80060bc:	f7fe ff12 	bl	8004ee4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c0:	4d3e      	ldr	r5, [pc, #248]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80060c2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d539      	bpl.n	8006142 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80060ce:	2e00      	cmp	r6, #0
 80060d0:	f43f af1e 	beq.w	8005f10 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d4:	4a39      	ldr	r2, [pc, #228]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 80060d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80060d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060dc:	6413      	str	r3, [r2, #64]	; 0x40
 80060de:	e717      	b.n	8005f10 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80060e0:	2600      	movs	r6, #0
 80060e2:	e7df      	b.n	80060a4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80060ec:	f7fe fefa 	bl	8004ee4 <HAL_GetTick>
 80060f0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f2:	682b      	ldr	r3, [r5, #0]
 80060f4:	05da      	lsls	r2, r3, #23
 80060f6:	d4d9      	bmi.n	80060ac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f8:	f7fe fef4 	bl	8004ee4 <HAL_GetTick>
 80060fc:	1bc0      	subs	r0, r0, r7
 80060fe:	2802      	cmp	r0, #2
 8006100:	d9f7      	bls.n	80060f2 <HAL_RCC_OscConfig+0x20a>
 8006102:	e736      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006104:	2b05      	cmp	r3, #5
 8006106:	d104      	bne.n	8006112 <HAL_RCC_OscConfig+0x22a>
 8006108:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	672b      	str	r3, [r5, #112]	; 0x70
 8006110:	e7d0      	b.n	80060b4 <HAL_RCC_OscConfig+0x1cc>
 8006112:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006114:	f022 0201 	bic.w	r2, r2, #1
 8006118:	672a      	str	r2, [r5, #112]	; 0x70
 800611a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800611c:	f022 0204 	bic.w	r2, r2, #4
 8006120:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1ca      	bne.n	80060bc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8006126:	f7fe fedd 	bl	8004ee4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800612e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006130:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006132:	0798      	lsls	r0, r3, #30
 8006134:	d5cb      	bpl.n	80060ce <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006136:	f7fe fed5 	bl	8004ee4 <HAL_GetTick>
 800613a:	1bc0      	subs	r0, r0, r7
 800613c:	4540      	cmp	r0, r8
 800613e:	d9f7      	bls.n	8006130 <HAL_RCC_OscConfig+0x248>
 8006140:	e717      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006142:	f7fe fecf 	bl	8004ee4 <HAL_GetTick>
 8006146:	1bc0      	subs	r0, r0, r7
 8006148:	4540      	cmp	r0, r8
 800614a:	d9bd      	bls.n	80060c8 <HAL_RCC_OscConfig+0x1e0>
 800614c:	e711      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800614e:	4d1b      	ldr	r5, [pc, #108]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
 8006150:	68ab      	ldr	r3, [r5, #8]
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	2b08      	cmp	r3, #8
 8006158:	d047      	beq.n	80061ea <HAL_RCC_OscConfig+0x302>
 800615a:	4e1c      	ldr	r6, [pc, #112]	; (80061cc <HAL_RCC_OscConfig+0x2e4>)
 800615c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800615e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006160:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006162:	d135      	bne.n	80061d0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8006164:	f7fe febe 	bl	8004ee4 <HAL_GetTick>
 8006168:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	0199      	lsls	r1, r3, #6
 800616e:	d41e      	bmi.n	80061ae <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006170:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8006174:	4313      	orrs	r3, r2
 8006176:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006178:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800617c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800617e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006182:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006184:	4c0d      	ldr	r4, [pc, #52]	; (80061bc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006186:	0852      	lsrs	r2, r2, #1
 8006188:	3a01      	subs	r2, #1
 800618a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800618e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006190:	2301      	movs	r3, #1
 8006192:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006194:	f7fe fea6 	bl	8004ee4 <HAL_GetTick>
 8006198:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	019a      	lsls	r2, r3, #6
 800619e:	f53f aebb 	bmi.w	8005f18 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a2:	f7fe fe9f 	bl	8004ee4 <HAL_GetTick>
 80061a6:	1b40      	subs	r0, r0, r5
 80061a8:	2802      	cmp	r0, #2
 80061aa:	d9f6      	bls.n	800619a <HAL_RCC_OscConfig+0x2b2>
 80061ac:	e6e1      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fe fe99 	bl	8004ee4 <HAL_GetTick>
 80061b2:	1bc0      	subs	r0, r0, r7
 80061b4:	2802      	cmp	r0, #2
 80061b6:	d9d8      	bls.n	800616a <HAL_RCC_OscConfig+0x282>
 80061b8:	e6db      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
 80061ba:	bf00      	nop
 80061bc:	40023800 	.word	0x40023800
 80061c0:	42470000 	.word	0x42470000
 80061c4:	42470e80 	.word	0x42470e80
 80061c8:	40007000 	.word	0x40007000
 80061cc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80061d0:	f7fe fe88 	bl	8004ee4 <HAL_GetTick>
 80061d4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d6:	682b      	ldr	r3, [r5, #0]
 80061d8:	019b      	lsls	r3, r3, #6
 80061da:	f57f ae9d 	bpl.w	8005f18 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061de:	f7fe fe81 	bl	8004ee4 <HAL_GetTick>
 80061e2:	1b00      	subs	r0, r0, r4
 80061e4:	2802      	cmp	r0, #2
 80061e6:	d9f6      	bls.n	80061d6 <HAL_RCC_OscConfig+0x2ee>
 80061e8:	e6c3      	b.n	8005f72 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ea:	2801      	cmp	r0, #1
 80061ec:	f43f aec2 	beq.w	8005f74 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 80061f0:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	69e3      	ldr	r3, [r4, #28]
 80061f4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80061f8:	429a      	cmp	r2, r3
 80061fa:	f47f ae79 	bne.w	8005ef0 <HAL_RCC_OscConfig+0x8>
 80061fe:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006200:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006204:	4293      	cmp	r3, r2
 8006206:	f47f ae73 	bne.w	8005ef0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800620a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800620c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006210:	4003      	ands	r3, r0
 8006212:	4293      	cmp	r3, r2
 8006214:	f47f ae6c 	bne.w	8005ef0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006218:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800621a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800621e:	4293      	cmp	r3, r2
 8006220:	f47f ae66 	bne.w	8005ef0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006226:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 800622a:	1ac0      	subs	r0, r0, r3
 800622c:	bf18      	it	ne
 800622e:	2001      	movne	r0, #1
 8006230:	e6a0      	b.n	8005f74 <HAL_RCC_OscConfig+0x8c>
 8006232:	bf00      	nop

08006234 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006234:	4913      	ldr	r1, [pc, #76]	; (8006284 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006236:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006238:	688b      	ldr	r3, [r1, #8]
 800623a:	f003 030c 	and.w	r3, r3, #12
 800623e:	2b04      	cmp	r3, #4
 8006240:	d003      	beq.n	800624a <HAL_RCC_GetSysClockFreq+0x16>
 8006242:	2b08      	cmp	r3, #8
 8006244:	d003      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006246:	4810      	ldr	r0, [pc, #64]	; (8006288 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8006248:	e000      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800624a:	4810      	ldr	r0, [pc, #64]	; (800628c <HAL_RCC_GetSysClockFreq+0x58>)
}
 800624c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800624e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006250:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006252:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006254:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006258:	bf14      	ite	ne
 800625a:	480c      	ldrne	r0, [pc, #48]	; (800628c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800625c:	480a      	ldreq	r0, [pc, #40]	; (8006288 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800625e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006262:	bf18      	it	ne
 8006264:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006266:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626a:	fba1 0100 	umull	r0, r1, r1, r0
 800626e:	f7fa fc51 	bl	8000b14 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006272:	4b04      	ldr	r3, [pc, #16]	; (8006284 <HAL_RCC_GetSysClockFreq+0x50>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800627a:	3301      	adds	r3, #1
 800627c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800627e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006282:	e7e3      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x18>
 8006284:	40023800 	.word	0x40023800
 8006288:	00f42400 	.word	0x00f42400
 800628c:	017d7840 	.word	0x017d7840

08006290 <HAL_RCC_ClockConfig>:
{
 8006290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006294:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006296:	4604      	mov	r4, r0
 8006298:	b910      	cbnz	r0, 80062a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800629a:	2001      	movs	r0, #1
}
 800629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062a0:	4b43      	ldr	r3, [pc, #268]	; (80063b0 <HAL_RCC_ClockConfig+0x120>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	f002 020f 	and.w	r2, r2, #15
 80062a8:	428a      	cmp	r2, r1
 80062aa:	d328      	bcc.n	80062fe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ac:	6821      	ldr	r1, [r4, #0]
 80062ae:	078f      	lsls	r7, r1, #30
 80062b0:	d42d      	bmi.n	800630e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062b2:	07c8      	lsls	r0, r1, #31
 80062b4:	d440      	bmi.n	8006338 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062b6:	4b3e      	ldr	r3, [pc, #248]	; (80063b0 <HAL_RCC_ClockConfig+0x120>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	f002 020f 	and.w	r2, r2, #15
 80062be:	42aa      	cmp	r2, r5
 80062c0:	d865      	bhi.n	800638e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c2:	6822      	ldr	r2, [r4, #0]
 80062c4:	0751      	lsls	r1, r2, #29
 80062c6:	d46b      	bmi.n	80063a0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c8:	0713      	lsls	r3, r2, #28
 80062ca:	d507      	bpl.n	80062dc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062cc:	4a39      	ldr	r2, [pc, #228]	; (80063b4 <HAL_RCC_ClockConfig+0x124>)
 80062ce:	6921      	ldr	r1, [r4, #16]
 80062d0:	6893      	ldr	r3, [r2, #8]
 80062d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80062d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80062da:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062dc:	f7ff ffaa 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 80062e0:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <HAL_RCC_ClockConfig+0x124>)
 80062e2:	4a35      	ldr	r2, [pc, #212]	; (80063b8 <HAL_RCC_ClockConfig+0x128>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80062ea:	5cd3      	ldrb	r3, [r2, r3]
 80062ec:	40d8      	lsrs	r0, r3
 80062ee:	4b33      	ldr	r3, [pc, #204]	; (80063bc <HAL_RCC_ClockConfig+0x12c>)
 80062f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80062f2:	4b33      	ldr	r3, [pc, #204]	; (80063c0 <HAL_RCC_ClockConfig+0x130>)
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f7fe fdab 	bl	8004e50 <HAL_InitTick>
  return HAL_OK;
 80062fa:	2000      	movs	r0, #0
 80062fc:	e7ce      	b.n	800629c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fe:	b2ca      	uxtb	r2, r1
 8006300:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	428b      	cmp	r3, r1
 800630a:	d1c6      	bne.n	800629a <HAL_RCC_ClockConfig+0xa>
 800630c:	e7ce      	b.n	80062ac <HAL_RCC_ClockConfig+0x1c>
 800630e:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006310:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006314:	bf1e      	ittt	ne
 8006316:	689a      	ldrne	r2, [r3, #8]
 8006318:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800631c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800631e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006320:	bf42      	ittt	mi
 8006322:	689a      	ldrmi	r2, [r3, #8]
 8006324:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8006328:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	68a0      	ldr	r0, [r4, #8]
 800632e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006332:	4302      	orrs	r2, r0
 8006334:	609a      	str	r2, [r3, #8]
 8006336:	e7bc      	b.n	80062b2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006338:	6862      	ldr	r2, [r4, #4]
 800633a:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <HAL_RCC_ClockConfig+0x124>)
 800633c:	2a01      	cmp	r2, #1
 800633e:	d11c      	bne.n	800637a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006346:	d0a8      	beq.n	800629a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006348:	4e1a      	ldr	r6, [pc, #104]	; (80063b4 <HAL_RCC_ClockConfig+0x124>)
 800634a:	68b3      	ldr	r3, [r6, #8]
 800634c:	f023 0303 	bic.w	r3, r3, #3
 8006350:	4313      	orrs	r3, r2
 8006352:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006354:	f7fe fdc6 	bl	8004ee4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006358:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800635c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635e:	68b3      	ldr	r3, [r6, #8]
 8006360:	6862      	ldr	r2, [r4, #4]
 8006362:	f003 030c 	and.w	r3, r3, #12
 8006366:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800636a:	d0a4      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800636c:	f7fe fdba 	bl	8004ee4 <HAL_GetTick>
 8006370:	1bc0      	subs	r0, r0, r7
 8006372:	4540      	cmp	r0, r8
 8006374:	d9f3      	bls.n	800635e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8006376:	2003      	movs	r0, #3
 8006378:	e790      	b.n	800629c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637a:	1e91      	subs	r1, r2, #2
 800637c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006380:	d802      	bhi.n	8006388 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006382:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006386:	e7de      	b.n	8006346 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006388:	f013 0f02 	tst.w	r3, #2
 800638c:	e7db      	b.n	8006346 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638e:	b2ea      	uxtb	r2, r5
 8006390:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	42ab      	cmp	r3, r5
 800639a:	f47f af7e 	bne.w	800629a <HAL_RCC_ClockConfig+0xa>
 800639e:	e790      	b.n	80062c2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a0:	4904      	ldr	r1, [pc, #16]	; (80063b4 <HAL_RCC_ClockConfig+0x124>)
 80063a2:	68e0      	ldr	r0, [r4, #12]
 80063a4:	688b      	ldr	r3, [r1, #8]
 80063a6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80063aa:	4303      	orrs	r3, r0
 80063ac:	608b      	str	r3, [r1, #8]
 80063ae:	e78b      	b.n	80062c8 <HAL_RCC_ClockConfig+0x38>
 80063b0:	40023c00 	.word	0x40023c00
 80063b4:	40023800 	.word	0x40023800
 80063b8:	08016dec 	.word	0x08016dec
 80063bc:	20000014 	.word	0x20000014
 80063c0:	20000090 	.word	0x20000090

080063c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80063c6:	4a05      	ldr	r2, [pc, #20]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80063ce:	5cd3      	ldrb	r3, [r2, r3]
 80063d0:	4a03      	ldr	r2, [pc, #12]	; (80063e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80063d2:	6810      	ldr	r0, [r2, #0]
}
 80063d4:	40d8      	lsrs	r0, r3
 80063d6:	4770      	bx	lr
 80063d8:	40023800 	.word	0x40023800
 80063dc:	08016dfc 	.word	0x08016dfc
 80063e0:	20000014 	.word	0x20000014

080063e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063e4:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80063e6:	4a05      	ldr	r2, [pc, #20]	; (80063fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80063ee:	5cd3      	ldrb	r3, [r2, r3]
 80063f0:	4a03      	ldr	r2, [pc, #12]	; (8006400 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80063f2:	6810      	ldr	r0, [r2, #0]
}
 80063f4:	40d8      	lsrs	r0, r3
 80063f6:	4770      	bx	lr
 80063f8:	40023800 	.word	0x40023800
 80063fc:	08016dfc 	.word	0x08016dfc
 8006400:	20000014 	.word	0x20000014

08006404 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006404:	6803      	ldr	r3, [r0, #0]
 8006406:	f013 0f05 	tst.w	r3, #5
{
 800640a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640c:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800640e:	d105      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006410:	6828      	ldr	r0, [r5, #0]
 8006412:	f010 0002 	ands.w	r0, r0, #2
 8006416:	d128      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8006418:	b003      	add	sp, #12
 800641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800641c:	4c41      	ldr	r4, [pc, #260]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800641e:	4e42      	ldr	r6, [pc, #264]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8006420:	2300      	movs	r3, #0
 8006422:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006424:	f7fe fd5e 	bl	8004ee4 <HAL_GetTick>
 8006428:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800642a:	6833      	ldr	r3, [r6, #0]
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	d415      	bmi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006430:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8006434:	071b      	lsls	r3, r3, #28
 8006436:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800643a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800643e:	2301      	movs	r3, #1
 8006440:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006442:	f7fe fd4f 	bl	8004ee4 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006446:	4c38      	ldr	r4, [pc, #224]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8006448:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	0118      	lsls	r0, r3, #4
 800644e:	d4df      	bmi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006450:	f7fe fd48 	bl	8004ee4 <HAL_GetTick>
 8006454:	1b80      	subs	r0, r0, r6
 8006456:	2802      	cmp	r0, #2
 8006458:	d9f7      	bls.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x46>
 800645a:	e004      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800645c:	f7fe fd42 	bl	8004ee4 <HAL_GetTick>
 8006460:	1bc0      	subs	r0, r0, r7
 8006462:	2802      	cmp	r0, #2
 8006464:	d9e1      	bls.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8006466:	2003      	movs	r0, #3
 8006468:	e7d6      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 800646a:	2300      	movs	r3, #0
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8006470:	4c2e      	ldr	r4, [pc, #184]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006474:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006478:	641a      	str	r2, [r3, #64]	; 0x40
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800648c:	f7fe fd2a 	bl	8004ee4 <HAL_GetTick>
 8006490:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	05d9      	lsls	r1, r3, #23
 8006496:	d51b      	bpl.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006498:	4c23      	ldr	r4, [pc, #140]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800649a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800649c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80064a0:	d11c      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064a2:	68eb      	ldr	r3, [r5, #12]
 80064a4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80064a8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80064ac:	4a1e      	ldr	r2, [pc, #120]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80064ae:	d134      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80064b0:	6891      	ldr	r1, [r2, #8]
 80064b2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80064b6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80064ba:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80064be:	4301      	orrs	r1, r0
 80064c0:	6091      	str	r1, [r2, #8]
 80064c2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80064c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80064cc:	2000      	movs	r0, #0
 80064ce:	e7a3      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064d0:	f7fe fd08 	bl	8004ee4 <HAL_GetTick>
 80064d4:	1b80      	subs	r0, r0, r6
 80064d6:	2802      	cmp	r0, #2
 80064d8:	d9db      	bls.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80064da:	e7c4      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064dc:	68ea      	ldr	r2, [r5, #12]
 80064de:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d0dd      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80064e8:	4a11      	ldr	r2, [pc, #68]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80064ea:	2101      	movs	r1, #1
 80064ec:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064f2:	2100      	movs	r1, #0
 80064f4:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80064f6:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80064fa:	07da      	lsls	r2, r3, #31
 80064fc:	d5d1      	bpl.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 80064fe:	f7fe fcf1 	bl	8004ee4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006502:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006506:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006508:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800650a:	079b      	lsls	r3, r3, #30
 800650c:	d4c9      	bmi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650e:	f7fe fce9 	bl	8004ee4 <HAL_GetTick>
 8006512:	1b80      	subs	r0, r0, r6
 8006514:	42b8      	cmp	r0, r7
 8006516:	d9f7      	bls.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006518:	e7a5      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800651a:	6891      	ldr	r1, [r2, #8]
 800651c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006520:	e7ce      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8006522:	bf00      	nop
 8006524:	42470068 	.word	0x42470068
 8006528:	40023800 	.word	0x40023800
 800652c:	40007000 	.word	0x40007000
 8006530:	42470e40 	.word	0x42470e40

08006534 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8006534:	2801      	cmp	r0, #1
 8006536:	d120      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006538:	4b11      	ldr	r3, [pc, #68]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800653a:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 800653c:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8006540:	d004      	beq.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8006542:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006544:	480f      	ldr	r0, [pc, #60]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8006546:	bf18      	it	ne
 8006548:	2000      	movne	r0, #0
 800654a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800654c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800654e:	490c      	ldr	r1, [pc, #48]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006550:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006552:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006554:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006558:	bf4c      	ite	mi
 800655a:	4b0b      	ldrmi	r3, [pc, #44]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800655c:	4b0b      	ldrpl	r3, [pc, #44]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800655e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006562:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006566:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800656a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800656e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006570:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8006574:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8006578:	4770      	bx	lr
          frequency = 0U;
 800657a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40023800 	.word	0x40023800
 8006584:	00bb8000 	.word	0x00bb8000
 8006588:	017d7840 	.word	0x017d7840
 800658c:	00f42400 	.word	0x00f42400

08006590 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006590:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006592:	4604      	mov	r4, r0
 8006594:	b190      	cbz	r0, 80065bc <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006596:	7943      	ldrb	r3, [r0, #5]
 8006598:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800659c:	b913      	cbnz	r3, 80065a4 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800659e:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80065a0:	f7fe f9b4 	bl	800490c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80065a4:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80065a6:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80065a8:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	f043 0304 	orr.w	r3, r3, #4
 80065b0:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80065b2:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 80065b4:	2301      	movs	r3, #1
 80065b6:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80065b8:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 80065ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80065bc:	2001      	movs	r0, #1
 80065be:	e7fc      	b.n	80065ba <HAL_RNG_Init+0x2a>

080065c0 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	4604      	mov	r4, r0
 80065c4:	460e      	mov	r6, r1
 80065c6:	4615      	mov	r5, r2
 80065c8:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ca:	6821      	ldr	r1, [r4, #0]
 80065cc:	688a      	ldr	r2, [r1, #8]
 80065ce:	ea36 0302 	bics.w	r3, r6, r2
 80065d2:	d001      	beq.n	80065d8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80065d4:	2000      	movs	r0, #0
 80065d6:	e02d      	b.n	8006634 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80065d8:	1c6b      	adds	r3, r5, #1
 80065da:	d0f7      	beq.n	80065cc <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80065dc:	f7fe fc82 	bl	8004ee4 <HAL_GetTick>
 80065e0:	1bc0      	subs	r0, r0, r7
 80065e2:	4285      	cmp	r5, r0
 80065e4:	d8f1      	bhi.n	80065ca <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065ee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f0:	6862      	ldr	r2, [r4, #4]
 80065f2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80065f6:	d10a      	bne.n	800660e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 80065f8:	68a2      	ldr	r2, [r4, #8]
 80065fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80065fe:	d002      	beq.n	8006606 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006600:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006604:	d103      	bne.n	800660e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800660e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006610:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006614:	d107      	bne.n	8006626 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006624:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006626:	2301      	movs	r3, #1
 8006628:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800662c:	2300      	movs	r3, #0
 800662e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006632:	2003      	movs	r0, #3
}
 8006634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800663a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800663c:	4a12      	ldr	r2, [pc, #72]	; (8006688 <SPI_EndRxTxTransaction+0x50>)
 800663e:	4e13      	ldr	r6, [pc, #76]	; (800668c <SPI_EndRxTxTransaction+0x54>)
 8006640:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006642:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006644:	fbb5 f6f6 	udiv	r6, r5, r6
 8006648:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800664c:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800664e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8006652:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006654:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006656:	d10b      	bne.n	8006670 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006658:	460a      	mov	r2, r1
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	f7ff ffb0 	bl	80065c0 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8006660:	b178      	cbz	r0, 8006682 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006662:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006664:	f043 0320 	orr.w	r3, r3, #32
 8006668:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800666a:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 800666c:	b002      	add	sp, #8
 800666e:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8006670:	9b01      	ldr	r3, [sp, #4]
 8006672:	b133      	cbz	r3, 8006682 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8006674:	9b01      	ldr	r3, [sp, #4]
 8006676:	3b01      	subs	r3, #1
 8006678:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	061b      	lsls	r3, r3, #24
 8006680:	d4f6      	bmi.n	8006670 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8006682:	2000      	movs	r0, #0
 8006684:	e7f2      	b.n	800666c <SPI_EndRxTxTransaction+0x34>
 8006686:	bf00      	nop
 8006688:	20000014 	.word	0x20000014
 800668c:	016e3600 	.word	0x016e3600

08006690 <HAL_SPI_Init>:
{
 8006690:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8006692:	4604      	mov	r4, r0
 8006694:	2800      	cmp	r0, #0
 8006696:	d036      	beq.n	8006706 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006698:	2300      	movs	r3, #0
 800669a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800669c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80066a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066a4:	b91b      	cbnz	r3, 80066ae <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80066a6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80066aa:	f7fe f947 	bl	800493c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80066ae:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80066b0:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80066b2:	2302      	movs	r3, #2
 80066b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80066b8:	680b      	ldr	r3, [r1, #0]
 80066ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066be:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80066c0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80066c4:	4303      	orrs	r3, r0
 80066c6:	68e0      	ldr	r0, [r4, #12]
 80066c8:	4303      	orrs	r3, r0
 80066ca:	6920      	ldr	r0, [r4, #16]
 80066cc:	4303      	orrs	r3, r0
 80066ce:	6960      	ldr	r0, [r4, #20]
 80066d0:	4303      	orrs	r3, r0
 80066d2:	69e0      	ldr	r0, [r4, #28]
 80066d4:	4303      	orrs	r3, r0
 80066d6:	6a20      	ldr	r0, [r4, #32]
 80066d8:	4303      	orrs	r3, r0
 80066da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80066dc:	4303      	orrs	r3, r0
 80066de:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80066e2:	4303      	orrs	r3, r0
 80066e4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80066e6:	0c12      	lsrs	r2, r2, #16
 80066e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ea:	f002 0204 	and.w	r2, r2, #4
 80066ee:	431a      	orrs	r2, r3
 80066f0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066f2:	69cb      	ldr	r3, [r1, #28]
 80066f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066f8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066fa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80066fc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066fe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006700:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8006704:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006706:	2001      	movs	r0, #1
 8006708:	e7fc      	b.n	8006704 <HAL_SPI_Init+0x74>

0800670a <HAL_SPI_Transmit>:
{
 800670a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800670e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006710:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006714:	2b01      	cmp	r3, #1
{
 8006716:	4604      	mov	r4, r0
 8006718:	460d      	mov	r5, r1
 800671a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800671c:	f000 809b 	beq.w	8006856 <HAL_SPI_Transmit+0x14c>
 8006720:	2301      	movs	r3, #1
 8006722:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006726:	f7fe fbdd 	bl	8004ee4 <HAL_GetTick>
 800672a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800672c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006730:	b2c0      	uxtb	r0, r0
 8006732:	2801      	cmp	r0, #1
 8006734:	f040 808d 	bne.w	8006852 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8006738:	2d00      	cmp	r5, #0
 800673a:	d05d      	beq.n	80067f8 <HAL_SPI_Transmit+0xee>
 800673c:	f1b8 0f00 	cmp.w	r8, #0
 8006740:	d05a      	beq.n	80067f8 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006742:	2303      	movs	r3, #3
 8006744:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006748:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800674e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006750:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8006754:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006756:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006758:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 800675c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800675e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8006764:	bf08      	it	eq
 8006766:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8006768:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800676c:	bf04      	itt	eq
 800676e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8006772:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006774:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006776:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006778:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800677a:	bf5e      	ittt	pl
 800677c:	6803      	ldrpl	r3, [r0, #0]
 800677e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8006782:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006784:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	d13e      	bne.n	800680a <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800678c:	b113      	cbz	r3, 8006794 <HAL_SPI_Transmit+0x8a>
 800678e:	f1b8 0f01 	cmp.w	r8, #1
 8006792:	d107      	bne.n	80067a4 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006794:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006798:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800679a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800679c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80067a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	b9a3      	cbnz	r3, 80067d4 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067aa:	463a      	mov	r2, r7
 80067ac:	4631      	mov	r1, r6
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7ff ff42 	bl	8006638 <SPI_EndRxTxTransaction>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d149      	bne.n	800684c <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067b8:	68a3      	ldr	r3, [r4, #8]
 80067ba:	b933      	cbnz	r3, 80067ca <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	9201      	str	r2, [sp, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80067cc:	3000      	adds	r0, #0
 80067ce:	bf18      	it	ne
 80067d0:	2001      	movne	r0, #1
error:
 80067d2:	e011      	b.n	80067f8 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	6893      	ldr	r3, [r2, #8]
 80067d8:	0798      	lsls	r0, r3, #30
 80067da:	d505      	bpl.n	80067e8 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067de:	f833 1b02 	ldrh.w	r1, [r3], #2
 80067e2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e4:	6323      	str	r3, [r4, #48]	; 0x30
 80067e6:	e7d9      	b.n	800679c <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067e8:	f7fe fb7c 	bl	8004ee4 <HAL_GetTick>
 80067ec:	1bc0      	subs	r0, r0, r7
 80067ee:	42b0      	cmp	r0, r6
 80067f0:	d3d8      	bcc.n	80067a4 <HAL_SPI_Transmit+0x9a>
 80067f2:	1c71      	adds	r1, r6, #1
 80067f4:	d0d6      	beq.n	80067a4 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80067f6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067fe:	2300      	movs	r3, #0
 8006800:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006804:	b002      	add	sp, #8
 8006806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800680a:	b113      	cbz	r3, 8006812 <HAL_SPI_Transmit+0x108>
 800680c:	f1b8 0f01 	cmp.w	r8, #1
 8006810:	d108      	bne.n	8006824 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006812:	782b      	ldrb	r3, [r5, #0]
 8006814:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006816:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006818:	3301      	adds	r3, #1
 800681a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800681c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800681e:	3b01      	subs	r3, #1
 8006820:	b29b      	uxth	r3, r3
 8006822:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006824:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0be      	beq.n	80067aa <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	0792      	lsls	r2, r2, #30
 8006832:	d503      	bpl.n	800683c <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006834:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006836:	7812      	ldrb	r2, [r2, #0]
 8006838:	731a      	strb	r2, [r3, #12]
 800683a:	e7ec      	b.n	8006816 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800683c:	f7fe fb52 	bl	8004ee4 <HAL_GetTick>
 8006840:	1bc0      	subs	r0, r0, r7
 8006842:	42b0      	cmp	r0, r6
 8006844:	d3ee      	bcc.n	8006824 <HAL_SPI_Transmit+0x11a>
 8006846:	1c73      	adds	r3, r6, #1
 8006848:	d0ec      	beq.n	8006824 <HAL_SPI_Transmit+0x11a>
 800684a:	e7d4      	b.n	80067f6 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800684c:	2320      	movs	r3, #32
 800684e:	6563      	str	r3, [r4, #84]	; 0x54
 8006850:	e7b2      	b.n	80067b8 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8006852:	2002      	movs	r0, #2
 8006854:	e7d0      	b.n	80067f8 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8006856:	2002      	movs	r0, #2
 8006858:	e7d4      	b.n	8006804 <HAL_SPI_Transmit+0xfa>

0800685a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800685a:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800685c:	b189      	cbz	r1, 8006882 <HAL_TIM_Encoder_Start+0x28>
 800685e:	2904      	cmp	r1, #4
 8006860:	d007      	beq.n	8006872 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006862:	6a1a      	ldr	r2, [r3, #32]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	f042 0201 	orr.w	r2, r2, #1
 8006870:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	f022 0210 	bic.w	r2, r2, #16
 8006878:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	f042 0210 	orr.w	r2, r2, #16
 8006880:	e006      	b.n	8006890 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8006882:	6a1a      	ldr	r2, [r3, #32]
 8006884:	f022 0201 	bic.w	r2, r2, #1
 8006888:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
}
 800689a:	2000      	movs	r0, #0
 800689c:	4770      	bx	lr
	...

080068a0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a0:	4a30      	ldr	r2, [pc, #192]	; (8006964 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80068a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a4:	4290      	cmp	r0, r2
 80068a6:	d012      	beq.n	80068ce <TIM_Base_SetConfig+0x2e>
 80068a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80068ac:	d00f      	beq.n	80068ce <TIM_Base_SetConfig+0x2e>
 80068ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80068b2:	4290      	cmp	r0, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_Base_SetConfig+0x2e>
 80068b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068ba:	4290      	cmp	r0, r2
 80068bc:	d007      	beq.n	80068ce <TIM_Base_SetConfig+0x2e>
 80068be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068c2:	4290      	cmp	r0, r2
 80068c4:	d003      	beq.n	80068ce <TIM_Base_SetConfig+0x2e>
 80068c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80068ca:	4290      	cmp	r0, r2
 80068cc:	d119      	bne.n	8006902 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80068ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80068d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d6:	4a23      	ldr	r2, [pc, #140]	; (8006964 <TIM_Base_SetConfig+0xc4>)
 80068d8:	4290      	cmp	r0, r2
 80068da:	d029      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 80068dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80068e0:	d026      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 80068e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80068e6:	4290      	cmp	r0, r2
 80068e8:	d022      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 80068ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068ee:	4290      	cmp	r0, r2
 80068f0:	d01e      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 80068f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068f6:	4290      	cmp	r0, r2
 80068f8:	d01a      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 80068fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80068fe:	4290      	cmp	r0, r2
 8006900:	d016      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 8006902:	4a19      	ldr	r2, [pc, #100]	; (8006968 <TIM_Base_SetConfig+0xc8>)
 8006904:	4290      	cmp	r0, r2
 8006906:	d013      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 8006908:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800690c:	4290      	cmp	r0, r2
 800690e:	d00f      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 8006910:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006914:	4290      	cmp	r0, r2
 8006916:	d00b      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 8006918:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800691c:	4290      	cmp	r0, r2
 800691e:	d007      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 8006920:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006924:	4290      	cmp	r0, r2
 8006926:	d003      	beq.n	8006930 <TIM_Base_SetConfig+0x90>
 8006928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800692c:	4290      	cmp	r0, r2
 800692e:	d103      	bne.n	8006938 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006930:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006936:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006938:	694a      	ldr	r2, [r1, #20]
 800693a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006940:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006942:	688b      	ldr	r3, [r1, #8]
 8006944:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006946:	680b      	ldr	r3, [r1, #0]
 8006948:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <TIM_Base_SetConfig+0xc4>)
 800694c:	4298      	cmp	r0, r3
 800694e:	d003      	beq.n	8006958 <TIM_Base_SetConfig+0xb8>
 8006950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006954:	4298      	cmp	r0, r3
 8006956:	d101      	bne.n	800695c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006958:	690b      	ldr	r3, [r1, #16]
 800695a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800695c:	2301      	movs	r3, #1
 800695e:	6143      	str	r3, [r0, #20]
}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40010000 	.word	0x40010000
 8006968:	40014000 	.word	0x40014000

0800696c <HAL_TIM_Encoder_Init>:
{
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	460c      	mov	r4, r1
  if (htim == NULL)
 8006970:	4605      	mov	r5, r0
 8006972:	2800      	cmp	r0, #0
 8006974:	d043      	beq.n	80069fe <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006976:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800697a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800697e:	b91b      	cbnz	r3, 8006988 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8006980:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006984:	f7fe f810 	bl	80049a8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006988:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 800698a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800698c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006994:	6883      	ldr	r3, [r0, #8]
 8006996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699a:	f023 0307 	bic.w	r3, r3, #7
 800699e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a0:	f7ff ff7e 	bl	80068a0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80069a4:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80069a6:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 80069a8:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80069aa:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069ac:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 80069ae:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 80069b0:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069b2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80069b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80069b8:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069bc:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80069c0:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069c2:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069c6:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069c8:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80069d0:	68e1      	ldr	r1, [r4, #12]
 80069d2:	430b      	orrs	r3, r1
 80069d4:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069d6:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069da:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80069de:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069e0:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069e2:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069e6:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80069e8:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069ea:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80069ee:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069f0:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 80069f2:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80069f4:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 80069f6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80069fa:	2000      	movs	r0, #0
}
 80069fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80069fe:	2001      	movs	r0, #1
 8006a00:	e7fc      	b.n	80069fc <HAL_TIM_Encoder_Init+0x90>
	...

08006a04 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
{
 8006a0a:	b530      	push	{r4, r5, lr}
 8006a0c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006a10:	d035      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a16:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a18:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8006a1a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a1c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8006a20:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a22:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8006a24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006a28:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a2a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2c:	4c15      	ldr	r4, [pc, #84]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	d01a      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a36:	d017      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006a38:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d013      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006a40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d00f      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006a48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d00b      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006a50:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d007      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006a58:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	d003      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006a60:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d104      	bne.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a68:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006a7e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006a80:	bd30      	pop	{r4, r5, pc}
 8006a82:	bf00      	nop
 8006a84:	40010000 	.word	0x40010000

08006a88 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a88:	6803      	ldr	r3, [r0, #0]
 8006a8a:	68c1      	ldr	r1, [r0, #12]
 8006a8c:	691a      	ldr	r2, [r3, #16]
{
 8006a8e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a90:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8006a94:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a96:	430a      	orrs	r2, r1
 8006a98:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a9a:	6925      	ldr	r5, [r4, #16]
 8006a9c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a9e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aa0:	69c0      	ldr	r0, [r0, #28]
 8006aa2:	432a      	orrs	r2, r5
 8006aa4:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006aa6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aaa:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8006aac:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ab0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ab6:	695a      	ldr	r2, [r3, #20]
 8006ab8:	69a1      	ldr	r1, [r4, #24]
 8006aba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006abe:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ac4:	615a      	str	r2, [r3, #20]
 8006ac6:	4a26      	ldr	r2, [pc, #152]	; (8006b60 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac8:	d129      	bne.n	8006b1e <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d003      	beq.n	8006ad6 <UART_SetConfig+0x4e>
 8006ace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d120      	bne.n	8006b18 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ad6:	f7ff fc85 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ada:	6862      	ldr	r2, [r4, #4]
 8006adc:	2600      	movs	r6, #0
 8006ade:	1892      	adds	r2, r2, r2
 8006ae0:	f04f 0119 	mov.w	r1, #25
 8006ae4:	eb46 0306 	adc.w	r3, r6, r6
 8006ae8:	fba0 0101 	umull	r0, r1, r0, r1
 8006aec:	f7fa f812 	bl	8000b14 <__aeabi_uldivmod>
 8006af0:	2164      	movs	r1, #100	; 0x64
 8006af2:	fbb0 f5f1 	udiv	r5, r0, r1
 8006af6:	fb01 0315 	mls	r3, r1, r5, r0
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	3332      	adds	r3, #50	; 0x32
 8006afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b02:	f003 0207 	and.w	r2, r3, #7
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	6821      	ldr	r1, [r4, #0]
 8006b0a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8006b0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b12:	4413      	add	r3, r2
 8006b14:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b18:	f7ff fc54 	bl	80063c4 <HAL_RCC_GetPCLK1Freq>
 8006b1c:	e7dd      	b.n	8006ada <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d002      	beq.n	8006b28 <UART_SetConfig+0xa0>
 8006b22:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <UART_SetConfig+0xdc>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d117      	bne.n	8006b58 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b28:	f7ff fc5c 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	2119      	movs	r1, #25
 8006b30:	009a      	lsls	r2, r3, #2
 8006b32:	fba0 0101 	umull	r0, r1, r0, r1
 8006b36:	0f9b      	lsrs	r3, r3, #30
 8006b38:	f7f9 ffec 	bl	8000b14 <__aeabi_uldivmod>
 8006b3c:	2264      	movs	r2, #100	; 0x64
 8006b3e:	fbb0 f1f2 	udiv	r1, r0, r2
 8006b42:	fb02 0311 	mls	r3, r2, r1, r0
 8006b46:	6824      	ldr	r4, [r4, #0]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	3332      	adds	r3, #50	; 0x32
 8006b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b50:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006b54:	60a3      	str	r3, [r4, #8]
}
 8006b56:	e7de      	b.n	8006b16 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7ff fc34 	bl	80063c4 <HAL_RCC_GetPCLK1Freq>
 8006b5c:	e7e6      	b.n	8006b2c <UART_SetConfig+0xa4>
 8006b5e:	bf00      	nop
 8006b60:	40011000 	.word	0x40011000
 8006b64:	40011400 	.word	0x40011400

08006b68 <HAL_UART_Init>:
{
 8006b68:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	b340      	cbz	r0, 8006bc0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006b72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b76:	b91b      	cbnz	r3, 8006b80 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006b78:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006b7c:	f7fd ff4a 	bl	8004a14 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006b80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b82:	2324      	movs	r3, #36	; 0x24
 8006b84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006b88:	68d3      	ldr	r3, [r2, #12]
 8006b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b8e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006b90:	4620      	mov	r0, r4
 8006b92:	f7ff ff79 	bl	8006a88 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bae:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006bb2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006bb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006bba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006bbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	e7fc      	b.n	8006bbe <HAL_UART_Init+0x56>

08006bc4 <floorf>:
 8006bc4:	ee10 3a10 	vmov	r3, s0
 8006bc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006bcc:	0dca      	lsrs	r2, r1, #23
 8006bce:	3a7f      	subs	r2, #127	; 0x7f
 8006bd0:	2a16      	cmp	r2, #22
 8006bd2:	dc2a      	bgt.n	8006c2a <floorf+0x66>
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	da11      	bge.n	8006bfc <floorf+0x38>
 8006bd8:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006c3c <floorf+0x78>
 8006bdc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006be0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be8:	dd05      	ble.n	8006bf6 <floorf+0x32>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da23      	bge.n	8006c36 <floorf+0x72>
 8006bee:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <floorf+0x7c>)
 8006bf0:	2900      	cmp	r1, #0
 8006bf2:	bf18      	it	ne
 8006bf4:	4613      	movne	r3, r2
 8006bf6:	ee00 3a10 	vmov	s0, r3
 8006bfa:	4770      	bx	lr
 8006bfc:	4911      	ldr	r1, [pc, #68]	; (8006c44 <floorf+0x80>)
 8006bfe:	4111      	asrs	r1, r2
 8006c00:	420b      	tst	r3, r1
 8006c02:	d0fa      	beq.n	8006bfa <floorf+0x36>
 8006c04:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006c3c <floorf+0x78>
 8006c08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c14:	ddef      	ble.n	8006bf6 <floorf+0x32>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bfbe      	ittt	lt
 8006c1a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006c1e:	fa40 f202 	asrlt.w	r2, r0, r2
 8006c22:	189b      	addlt	r3, r3, r2
 8006c24:	ea23 0301 	bic.w	r3, r3, r1
 8006c28:	e7e5      	b.n	8006bf6 <floorf+0x32>
 8006c2a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006c2e:	d3e4      	bcc.n	8006bfa <floorf+0x36>
 8006c30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c34:	4770      	bx	lr
 8006c36:	2300      	movs	r3, #0
 8006c38:	e7dd      	b.n	8006bf6 <floorf+0x32>
 8006c3a:	bf00      	nop
 8006c3c:	7149f2ca 	.word	0x7149f2ca
 8006c40:	bf800000 	.word	0xbf800000
 8006c44:	007fffff 	.word	0x007fffff

08006c48 <lrintf>:
 8006c48:	ee10 3a10 	vmov	r3, s0
 8006c4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006c50:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8006c54:	281e      	cmp	r0, #30
 8006c56:	b082      	sub	sp, #8
 8006c58:	dc2e      	bgt.n	8006cb8 <lrintf+0x70>
 8006c5a:	1c41      	adds	r1, r0, #1
 8006c5c:	da02      	bge.n	8006c64 <lrintf+0x1c>
 8006c5e:	2000      	movs	r0, #0
 8006c60:	b002      	add	sp, #8
 8006c62:	4770      	bx	lr
 8006c64:	2816      	cmp	r0, #22
 8006c66:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8006c6a:	dd09      	ble.n	8006c80 <lrintf+0x38>
 8006c6c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006c74:	3a96      	subs	r2, #150	; 0x96
 8006c76:	4090      	lsls	r0, r2
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d0f1      	beq.n	8006c60 <lrintf+0x18>
 8006c7c:	4240      	negs	r0, r0
 8006c7e:	e7ef      	b.n	8006c60 <lrintf+0x18>
 8006c80:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <lrintf+0x7c>)
 8006c82:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006c86:	ed93 7a00 	vldr	s14, [r3]
 8006c8a:	ee37 0a00 	vadd.f32	s0, s14, s0
 8006c8e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006c92:	eddd 7a01 	vldr	s15, [sp, #4]
 8006c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c9a:	ee17 3a90 	vmov	r3, s15
 8006c9e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006ca2:	d0dc      	beq.n	8006c5e <lrintf+0x16>
 8006ca4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006ca8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006cac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006cb0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006cb4:	40d8      	lsrs	r0, r3
 8006cb6:	e7df      	b.n	8006c78 <lrintf+0x30>
 8006cb8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006cbc:	ee17 0a90 	vmov	r0, s15
 8006cc0:	e7ce      	b.n	8006c60 <lrintf+0x18>
 8006cc2:	bf00      	nop
 8006cc4:	08016e0c 	.word	0x08016e0c

08006cc8 <rintf>:
 8006cc8:	b513      	push	{r0, r1, r4, lr}
 8006cca:	ee10 1a10 	vmov	r1, s0
 8006cce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cd2:	0ddc      	lsrs	r4, r3, #23
 8006cd4:	3c7f      	subs	r4, #127	; 0x7f
 8006cd6:	2c16      	cmp	r4, #22
 8006cd8:	dc46      	bgt.n	8006d68 <rintf+0xa0>
 8006cda:	b32b      	cbz	r3, 8006d28 <rintf+0x60>
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	ee10 2a10 	vmov	r2, s0
 8006ce2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8006ce6:	da21      	bge.n	8006d2c <rintf+0x64>
 8006ce8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8006cec:	425b      	negs	r3, r3
 8006cee:	4a21      	ldr	r2, [pc, #132]	; (8006d74 <rintf+0xac>)
 8006cf0:	0a5b      	lsrs	r3, r3, #9
 8006cf2:	0d09      	lsrs	r1, r1, #20
 8006cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf8:	0509      	lsls	r1, r1, #20
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006d00:	ee07 3a90 	vmov	s15, r3
 8006d04:	edd2 6a00 	vldr	s13, [r2]
 8006d08:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006d0c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006d10:	eddd 7a01 	vldr	s15, [sp, #4]
 8006d14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d18:	ee17 3a90 	vmov	r3, s15
 8006d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d20:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006d24:	ee00 3a10 	vmov	s0, r3
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <rintf+0xb0>)
 8006d2e:	4123      	asrs	r3, r4
 8006d30:	4219      	tst	r1, r3
 8006d32:	d0f9      	beq.n	8006d28 <rintf+0x60>
 8006d34:	085b      	lsrs	r3, r3, #1
 8006d36:	4219      	tst	r1, r3
 8006d38:	d006      	beq.n	8006d48 <rintf+0x80>
 8006d3a:	ea21 0203 	bic.w	r2, r1, r3
 8006d3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d42:	fa43 f404 	asr.w	r4, r3, r4
 8006d46:	4322      	orrs	r2, r4
 8006d48:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <rintf+0xac>)
 8006d4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d4e:	ed90 7a00 	vldr	s14, [r0]
 8006d52:	ee07 2a90 	vmov	s15, r2
 8006d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d5a:	edcd 7a01 	vstr	s15, [sp, #4]
 8006d5e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006d62:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006d66:	e7df      	b.n	8006d28 <rintf+0x60>
 8006d68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006d6c:	d3dc      	bcc.n	8006d28 <rintf+0x60>
 8006d6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006d72:	e7d9      	b.n	8006d28 <rintf+0x60>
 8006d74:	08016e14 	.word	0x08016e14
 8006d78:	007fffff 	.word	0x007fffff

08006d7c <sinf>:
 8006d7c:	ee10 3a10 	vmov	r3, s0
 8006d80:	b507      	push	{r0, r1, r2, lr}
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <sinf+0x7c>)
 8006d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	dc05      	bgt.n	8006d98 <sinf+0x1c>
 8006d8c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006dfc <sinf+0x80>
 8006d90:	2000      	movs	r0, #0
 8006d92:	f001 f869 	bl	8007e68 <__kernel_sinf>
 8006d96:	e004      	b.n	8006da2 <sinf+0x26>
 8006d98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006d9c:	db04      	blt.n	8006da8 <sinf+0x2c>
 8006d9e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006da2:	b003      	add	sp, #12
 8006da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006da8:	4668      	mov	r0, sp
 8006daa:	f000 fc4d 	bl	8007648 <__ieee754_rem_pio2f>
 8006dae:	f000 0003 	and.w	r0, r0, #3
 8006db2:	2801      	cmp	r0, #1
 8006db4:	d008      	beq.n	8006dc8 <sinf+0x4c>
 8006db6:	2802      	cmp	r0, #2
 8006db8:	d00d      	beq.n	8006dd6 <sinf+0x5a>
 8006dba:	b9b0      	cbnz	r0, 8006dea <sinf+0x6e>
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8006dc2:	ed9d 0a00 	vldr	s0, [sp]
 8006dc6:	e7e4      	b.n	8006d92 <sinf+0x16>
 8006dc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8006dcc:	ed9d 0a00 	vldr	s0, [sp]
 8006dd0:	f000 fd6a 	bl	80078a8 <__kernel_cosf>
 8006dd4:	e7e5      	b.n	8006da2 <sinf+0x26>
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ddc:	ed9d 0a00 	vldr	s0, [sp]
 8006de0:	f001 f842 	bl	8007e68 <__kernel_sinf>
 8006de4:	eeb1 0a40 	vneg.f32	s0, s0
 8006de8:	e7db      	b.n	8006da2 <sinf+0x26>
 8006dea:	eddd 0a01 	vldr	s1, [sp, #4]
 8006dee:	ed9d 0a00 	vldr	s0, [sp]
 8006df2:	f000 fd59 	bl	80078a8 <__kernel_cosf>
 8006df6:	e7f5      	b.n	8006de4 <sinf+0x68>
 8006df8:	3f490fd8 	.word	0x3f490fd8
 8006dfc:	00000000 	.word	0x00000000

08006e00 <powf>:
 8006e00:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8006e04:	ed2d 8b04 	vpush	{d8-d9}
 8006e08:	4ca7      	ldr	r4, [pc, #668]	; (80070a8 <powf+0x2a8>)
 8006e0a:	b08a      	sub	sp, #40	; 0x28
 8006e0c:	eef0 8a40 	vmov.f32	s17, s0
 8006e10:	eeb0 8a60 	vmov.f32	s16, s1
 8006e14:	f000 f958 	bl	80070c8 <__ieee754_powf>
 8006e18:	f994 5000 	ldrsb.w	r5, [r4]
 8006e1c:	1c6b      	adds	r3, r5, #1
 8006e1e:	eeb0 9a40 	vmov.f32	s18, s0
 8006e22:	4626      	mov	r6, r4
 8006e24:	d05f      	beq.n	8006ee6 <powf+0xe6>
 8006e26:	eeb4 8a48 	vcmp.f32	s16, s16
 8006e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e2e:	d65a      	bvs.n	8006ee6 <powf+0xe6>
 8006e30:	eef4 8a68 	vcmp.f32	s17, s17
 8006e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e38:	d721      	bvc.n	8006e7e <powf+0x7e>
 8006e3a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e42:	d150      	bne.n	8006ee6 <powf+0xe6>
 8006e44:	2301      	movs	r3, #1
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4b98      	ldr	r3, [pc, #608]	; (80070ac <powf+0x2ac>)
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	ee18 0a90 	vmov	r0, s17
 8006e50:	2300      	movs	r3, #0
 8006e52:	9308      	str	r3, [sp, #32]
 8006e54:	f7f9 fb1c 	bl	8000490 <__aeabi_f2d>
 8006e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e5c:	ee18 0a10 	vmov	r0, s16
 8006e60:	f7f9 fb16 	bl	8000490 <__aeabi_f2d>
 8006e64:	4b92      	ldr	r3, [pc, #584]	; (80070b0 <powf+0x2b0>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	2d02      	cmp	r5, #2
 8006e6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e72:	d032      	beq.n	8006eda <powf+0xda>
 8006e74:	4668      	mov	r0, sp
 8006e76:	f001 f83f 	bl	8007ef8 <matherr>
 8006e7a:	bb40      	cbnz	r0, 8006ece <powf+0xce>
 8006e7c:	e065      	b.n	8006f4a <powf+0x14a>
 8006e7e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80070b4 <powf+0x2b4>
 8006e82:	eef4 8a69 	vcmp.f32	s17, s19
 8006e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e8a:	d163      	bne.n	8006f54 <powf+0x154>
 8006e8c:	eeb4 8a69 	vcmp.f32	s16, s19
 8006e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e94:	d12e      	bne.n	8006ef4 <powf+0xf4>
 8006e96:	2301      	movs	r3, #1
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	4b84      	ldr	r3, [pc, #528]	; (80070ac <powf+0x2ac>)
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	ee18 0a90 	vmov	r0, s17
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9308      	str	r3, [sp, #32]
 8006ea6:	f7f9 faf3 	bl	8000490 <__aeabi_f2d>
 8006eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eae:	ee18 0a10 	vmov	r0, s16
 8006eb2:	f7f9 faed 	bl	8000490 <__aeabi_f2d>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2300      	movs	r3, #0
 8006eba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ebe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ec2:	2d00      	cmp	r5, #0
 8006ec4:	d0d6      	beq.n	8006e74 <powf+0x74>
 8006ec6:	4b7a      	ldr	r3, [pc, #488]	; (80070b0 <powf+0x2b0>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ece:	9b08      	ldr	r3, [sp, #32]
 8006ed0:	b11b      	cbz	r3, 8006eda <powf+0xda>
 8006ed2:	f001 f897 	bl	8008004 <__errno>
 8006ed6:	9b08      	ldr	r3, [sp, #32]
 8006ed8:	6003      	str	r3, [r0, #0]
 8006eda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ede:	f7f9 fdc9 	bl	8000a74 <__aeabi_d2f>
 8006ee2:	ee09 0a10 	vmov	s18, r0
 8006ee6:	eeb0 0a49 	vmov.f32	s0, s18
 8006eea:	b00a      	add	sp, #40	; 0x28
 8006eec:	ecbd 8b04 	vpop	{d8-d9}
 8006ef0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006ef4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ef8:	f001 f807 	bl	8007f0a <finitef>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d0f2      	beq.n	8006ee6 <powf+0xe6>
 8006f00:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f08:	d5ed      	bpl.n	8006ee6 <powf+0xe6>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	4b67      	ldr	r3, [pc, #412]	; (80070ac <powf+0x2ac>)
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	ee18 0a90 	vmov	r0, s17
 8006f16:	2300      	movs	r3, #0
 8006f18:	9308      	str	r3, [sp, #32]
 8006f1a:	f7f9 fab9 	bl	8000490 <__aeabi_f2d>
 8006f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f22:	ee18 0a10 	vmov	r0, s16
 8006f26:	f7f9 fab3 	bl	8000490 <__aeabi_f2d>
 8006f2a:	f994 3000 	ldrsb.w	r3, [r4]
 8006f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f32:	b923      	cbnz	r3, 8006f3e <powf+0x13e>
 8006f34:	2200      	movs	r2, #0
 8006f36:	2300      	movs	r3, #0
 8006f38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f3c:	e79a      	b.n	8006e74 <powf+0x74>
 8006f3e:	495e      	ldr	r1, [pc, #376]	; (80070b8 <powf+0x2b8>)
 8006f40:	2000      	movs	r0, #0
 8006f42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d194      	bne.n	8006e74 <powf+0x74>
 8006f4a:	f001 f85b 	bl	8008004 <__errno>
 8006f4e:	2321      	movs	r3, #33	; 0x21
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	e7bc      	b.n	8006ece <powf+0xce>
 8006f54:	f000 ffd9 	bl	8007f0a <finitef>
 8006f58:	4605      	mov	r5, r0
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d173      	bne.n	8007046 <powf+0x246>
 8006f5e:	eeb0 0a68 	vmov.f32	s0, s17
 8006f62:	f000 ffd2 	bl	8007f0a <finitef>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d06d      	beq.n	8007046 <powf+0x246>
 8006f6a:	eeb0 0a48 	vmov.f32	s0, s16
 8006f6e:	f000 ffcc 	bl	8007f0a <finitef>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d067      	beq.n	8007046 <powf+0x246>
 8006f76:	ee18 0a90 	vmov	r0, s17
 8006f7a:	f7f9 fa89 	bl	8000490 <__aeabi_f2d>
 8006f7e:	4680      	mov	r8, r0
 8006f80:	ee18 0a10 	vmov	r0, s16
 8006f84:	4689      	mov	r9, r1
 8006f86:	f7f9 fa83 	bl	8000490 <__aeabi_f2d>
 8006f8a:	eeb4 9a49 	vcmp.f32	s18, s18
 8006f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f92:	f994 4000 	ldrsb.w	r4, [r4]
 8006f96:	4b45      	ldr	r3, [pc, #276]	; (80070ac <powf+0x2ac>)
 8006f98:	d713      	bvc.n	8006fc2 <powf+0x1c2>
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	e9cd 2300 	strd	r2, r3, [sp]
 8006fa0:	9508      	str	r5, [sp, #32]
 8006fa2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006fa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006faa:	2c00      	cmp	r4, #0
 8006fac:	d0c2      	beq.n	8006f34 <powf+0x134>
 8006fae:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8006fb2:	ee17 0a90 	vmov	r0, s15
 8006fb6:	f7f9 fa6b 	bl	8000490 <__aeabi_f2d>
 8006fba:	2c02      	cmp	r4, #2
 8006fbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fc0:	e7c2      	b.n	8006f48 <powf+0x148>
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006fc8:	e9cd 2300 	strd	r2, r3, [sp]
 8006fcc:	9508      	str	r5, [sp, #32]
 8006fce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006fd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fd6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006fda:	b9fc      	cbnz	r4, 800701c <powf+0x21c>
 8006fdc:	4b37      	ldr	r3, [pc, #220]	; (80070bc <powf+0x2bc>)
 8006fde:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006fe2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fee:	d553      	bpl.n	8007098 <powf+0x298>
 8006ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8006ff4:	f7ff fe68 	bl	8006cc8 <rintf>
 8006ff8:	eeb4 0a48 	vcmp.f32	s0, s16
 8006ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007000:	d004      	beq.n	800700c <powf+0x20c>
 8007002:	4b2f      	ldr	r3, [pc, #188]	; (80070c0 <powf+0x2c0>)
 8007004:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007008:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800700c:	f996 3000 	ldrsb.w	r3, [r6]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d141      	bne.n	8007098 <powf+0x298>
 8007014:	f000 fff6 	bl	8008004 <__errno>
 8007018:	2322      	movs	r3, #34	; 0x22
 800701a:	e799      	b.n	8006f50 <powf+0x150>
 800701c:	4b29      	ldr	r3, [pc, #164]	; (80070c4 <powf+0x2c4>)
 800701e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007022:	2200      	movs	r2, #0
 8007024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007028:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702c:	d5ee      	bpl.n	800700c <powf+0x20c>
 800702e:	eeb0 0a48 	vmov.f32	s0, s16
 8007032:	f7ff fe49 	bl	8006cc8 <rintf>
 8007036:	eeb4 0a48 	vcmp.f32	s0, s16
 800703a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703e:	d0e5      	beq.n	800700c <powf+0x20c>
 8007040:	2200      	movs	r2, #0
 8007042:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <powf+0x2b8>)
 8007044:	e7e0      	b.n	8007008 <powf+0x208>
 8007046:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800704a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704e:	f47f af4a 	bne.w	8006ee6 <powf+0xe6>
 8007052:	eeb0 0a68 	vmov.f32	s0, s17
 8007056:	f000 ff58 	bl	8007f0a <finitef>
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f af43 	beq.w	8006ee6 <powf+0xe6>
 8007060:	eeb0 0a48 	vmov.f32	s0, s16
 8007064:	f000 ff51 	bl	8007f0a <finitef>
 8007068:	2800      	cmp	r0, #0
 800706a:	f43f af3c 	beq.w	8006ee6 <powf+0xe6>
 800706e:	2304      	movs	r3, #4
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <powf+0x2ac>)
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	ee18 0a90 	vmov	r0, s17
 800707a:	2300      	movs	r3, #0
 800707c:	9308      	str	r3, [sp, #32]
 800707e:	f7f9 fa07 	bl	8000490 <__aeabi_f2d>
 8007082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007086:	ee18 0a10 	vmov	r0, s16
 800708a:	f7f9 fa01 	bl	8000490 <__aeabi_f2d>
 800708e:	2200      	movs	r2, #0
 8007090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007094:	2300      	movs	r3, #0
 8007096:	e7b7      	b.n	8007008 <powf+0x208>
 8007098:	4668      	mov	r0, sp
 800709a:	f000 ff2d 	bl	8007ef8 <matherr>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f47f af15 	bne.w	8006ece <powf+0xce>
 80070a4:	e7b6      	b.n	8007014 <powf+0x214>
 80070a6:	bf00      	nop
 80070a8:	20000094 	.word	0x20000094
 80070ac:	08016e1c 	.word	0x08016e1c
 80070b0:	3ff00000 	.word	0x3ff00000
 80070b4:	00000000 	.word	0x00000000
 80070b8:	fff00000 	.word	0xfff00000
 80070bc:	47efffff 	.word	0x47efffff
 80070c0:	c7efffff 	.word	0xc7efffff
 80070c4:	7ff00000 	.word	0x7ff00000

080070c8 <__ieee754_powf>:
 80070c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070cc:	ee10 5a90 	vmov	r5, s1
 80070d0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80070d4:	ed2d 8b02 	vpush	{d8}
 80070d8:	eeb0 8a40 	vmov.f32	s16, s0
 80070dc:	eef0 8a60 	vmov.f32	s17, s1
 80070e0:	f000 8293 	beq.w	800760a <__ieee754_powf+0x542>
 80070e4:	ee10 8a10 	vmov	r8, s0
 80070e8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80070ec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80070f0:	dc06      	bgt.n	8007100 <__ieee754_powf+0x38>
 80070f2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80070f6:	dd0a      	ble.n	800710e <__ieee754_powf+0x46>
 80070f8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80070fc:	f000 8285 	beq.w	800760a <__ieee754_powf+0x542>
 8007100:	ecbd 8b02 	vpop	{d8}
 8007104:	48d9      	ldr	r0, [pc, #868]	; (800746c <__ieee754_powf+0x3a4>)
 8007106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800710a:	f000 bf09 	b.w	8007f20 <nanf>
 800710e:	f1b8 0f00 	cmp.w	r8, #0
 8007112:	da1d      	bge.n	8007150 <__ieee754_powf+0x88>
 8007114:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007118:	da2c      	bge.n	8007174 <__ieee754_powf+0xac>
 800711a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800711e:	db30      	blt.n	8007182 <__ieee754_powf+0xba>
 8007120:	15fb      	asrs	r3, r7, #23
 8007122:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007126:	fa47 f603 	asr.w	r6, r7, r3
 800712a:	fa06 f303 	lsl.w	r3, r6, r3
 800712e:	42bb      	cmp	r3, r7
 8007130:	d127      	bne.n	8007182 <__ieee754_powf+0xba>
 8007132:	f006 0601 	and.w	r6, r6, #1
 8007136:	f1c6 0602 	rsb	r6, r6, #2
 800713a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800713e:	d122      	bne.n	8007186 <__ieee754_powf+0xbe>
 8007140:	2d00      	cmp	r5, #0
 8007142:	f280 8268 	bge.w	8007616 <__ieee754_powf+0x54e>
 8007146:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800714a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800714e:	e00d      	b.n	800716c <__ieee754_powf+0xa4>
 8007150:	2600      	movs	r6, #0
 8007152:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007156:	d1f0      	bne.n	800713a <__ieee754_powf+0x72>
 8007158:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800715c:	f000 8255 	beq.w	800760a <__ieee754_powf+0x542>
 8007160:	dd0a      	ble.n	8007178 <__ieee754_powf+0xb0>
 8007162:	2d00      	cmp	r5, #0
 8007164:	f280 8254 	bge.w	8007610 <__ieee754_powf+0x548>
 8007168:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8007470 <__ieee754_powf+0x3a8>
 800716c:	ecbd 8b02 	vpop	{d8}
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	2602      	movs	r6, #2
 8007176:	e7ec      	b.n	8007152 <__ieee754_powf+0x8a>
 8007178:	2d00      	cmp	r5, #0
 800717a:	daf5      	bge.n	8007168 <__ieee754_powf+0xa0>
 800717c:	eeb1 0a68 	vneg.f32	s0, s17
 8007180:	e7f4      	b.n	800716c <__ieee754_powf+0xa4>
 8007182:	2600      	movs	r6, #0
 8007184:	e7d9      	b.n	800713a <__ieee754_powf+0x72>
 8007186:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800718a:	d102      	bne.n	8007192 <__ieee754_powf+0xca>
 800718c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007190:	e7ec      	b.n	800716c <__ieee754_powf+0xa4>
 8007192:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007196:	eeb0 0a48 	vmov.f32	s0, s16
 800719a:	d108      	bne.n	80071ae <__ieee754_powf+0xe6>
 800719c:	f1b8 0f00 	cmp.w	r8, #0
 80071a0:	db05      	blt.n	80071ae <__ieee754_powf+0xe6>
 80071a2:	ecbd 8b02 	vpop	{d8}
 80071a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071aa:	f000 bb79 	b.w	80078a0 <__ieee754_sqrtf>
 80071ae:	f000 fea5 	bl	8007efc <fabsf>
 80071b2:	b124      	cbz	r4, 80071be <__ieee754_powf+0xf6>
 80071b4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80071b8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80071bc:	d117      	bne.n	80071ee <__ieee754_powf+0x126>
 80071be:	2d00      	cmp	r5, #0
 80071c0:	bfbc      	itt	lt
 80071c2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80071c6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80071ca:	f1b8 0f00 	cmp.w	r8, #0
 80071ce:	dacd      	bge.n	800716c <__ieee754_powf+0xa4>
 80071d0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80071d4:	ea54 0306 	orrs.w	r3, r4, r6
 80071d8:	d104      	bne.n	80071e4 <__ieee754_powf+0x11c>
 80071da:	ee70 7a40 	vsub.f32	s15, s0, s0
 80071de:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80071e2:	e7c3      	b.n	800716c <__ieee754_powf+0xa4>
 80071e4:	2e01      	cmp	r6, #1
 80071e6:	d1c1      	bne.n	800716c <__ieee754_powf+0xa4>
 80071e8:	eeb1 0a40 	vneg.f32	s0, s0
 80071ec:	e7be      	b.n	800716c <__ieee754_powf+0xa4>
 80071ee:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80071f2:	3801      	subs	r0, #1
 80071f4:	ea56 0300 	orrs.w	r3, r6, r0
 80071f8:	d104      	bne.n	8007204 <__ieee754_powf+0x13c>
 80071fa:	ee38 8a48 	vsub.f32	s16, s16, s16
 80071fe:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007202:	e7b3      	b.n	800716c <__ieee754_powf+0xa4>
 8007204:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007208:	dd6d      	ble.n	80072e6 <__ieee754_powf+0x21e>
 800720a:	4b9a      	ldr	r3, [pc, #616]	; (8007474 <__ieee754_powf+0x3ac>)
 800720c:	429c      	cmp	r4, r3
 800720e:	dc06      	bgt.n	800721e <__ieee754_powf+0x156>
 8007210:	2d00      	cmp	r5, #0
 8007212:	daa9      	bge.n	8007168 <__ieee754_powf+0xa0>
 8007214:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8007478 <__ieee754_powf+0x3b0>
 8007218:	ee20 0a00 	vmul.f32	s0, s0, s0
 800721c:	e7a6      	b.n	800716c <__ieee754_powf+0xa4>
 800721e:	4b97      	ldr	r3, [pc, #604]	; (800747c <__ieee754_powf+0x3b4>)
 8007220:	429c      	cmp	r4, r3
 8007222:	dd02      	ble.n	800722a <__ieee754_powf+0x162>
 8007224:	2d00      	cmp	r5, #0
 8007226:	dcf5      	bgt.n	8007214 <__ieee754_powf+0x14c>
 8007228:	e79e      	b.n	8007168 <__ieee754_powf+0xa0>
 800722a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800722e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007232:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8007480 <__ieee754_powf+0x3b8>
 8007236:	eef1 6a40 	vneg.f32	s13, s0
 800723a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800723e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007242:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007246:	eee7 7a40 	vfms.f32	s15, s14, s0
 800724a:	ee60 0a00 	vmul.f32	s1, s0, s0
 800724e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8007484 <__ieee754_powf+0x3bc>
 8007252:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8007256:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8007488 <__ieee754_powf+0x3c0>
 800725a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800725e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007262:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800748c <__ieee754_powf+0x3c4>
 8007266:	eeb0 6a67 	vmov.f32	s12, s15
 800726a:	eea0 6a07 	vfma.f32	s12, s0, s14
 800726e:	ee16 3a10 	vmov	r3, s12
 8007272:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007276:	f023 030f 	bic.w	r3, r3, #15
 800727a:	ee00 3a90 	vmov	s1, r3
 800727e:	eee6 0a87 	vfma.f32	s1, s13, s14
 8007282:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007286:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800728a:	f025 050f 	bic.w	r5, r5, #15
 800728e:	ee07 5a10 	vmov	s14, r5
 8007292:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007296:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eee7 0a27 	vfma.f32	s1, s14, s15
 80072a2:	3e01      	subs	r6, #1
 80072a4:	ea56 0200 	orrs.w	r2, r6, r0
 80072a8:	ee07 5a10 	vmov	s14, r5
 80072ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80072b4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80072b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80072bc:	ee17 4a10 	vmov	r4, s14
 80072c0:	bf08      	it	eq
 80072c2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80072cc:	f340 8184 	ble.w	80075d8 <__ieee754_powf+0x510>
 80072d0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80072d4:	f340 80fc 	ble.w	80074d0 <__ieee754_powf+0x408>
 80072d8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007478 <__ieee754_powf+0x3b0>
 80072dc:	ee28 0a27 	vmul.f32	s0, s16, s15
 80072e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80072e4:	e742      	b.n	800716c <__ieee754_powf+0xa4>
 80072e6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80072ea:	bfbf      	itttt	lt
 80072ec:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8007490 <__ieee754_powf+0x3c8>
 80072f0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80072f4:	f06f 0217 	mvnlt.w	r2, #23
 80072f8:	ee17 4a90 	vmovlt	r4, s15
 80072fc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007300:	bfa8      	it	ge
 8007302:	2200      	movge	r2, #0
 8007304:	3b7f      	subs	r3, #127	; 0x7f
 8007306:	4413      	add	r3, r2
 8007308:	4a62      	ldr	r2, [pc, #392]	; (8007494 <__ieee754_powf+0x3cc>)
 800730a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800730e:	4294      	cmp	r4, r2
 8007310:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007314:	dd06      	ble.n	8007324 <__ieee754_powf+0x25c>
 8007316:	4a60      	ldr	r2, [pc, #384]	; (8007498 <__ieee754_powf+0x3d0>)
 8007318:	4294      	cmp	r4, r2
 800731a:	f340 80a5 	ble.w	8007468 <__ieee754_powf+0x3a0>
 800731e:	3301      	adds	r3, #1
 8007320:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007324:	2400      	movs	r4, #0
 8007326:	4a5d      	ldr	r2, [pc, #372]	; (800749c <__ieee754_powf+0x3d4>)
 8007328:	00a7      	lsls	r7, r4, #2
 800732a:	443a      	add	r2, r7
 800732c:	ee07 1a90 	vmov	s15, r1
 8007330:	ed92 7a00 	vldr	s14, [r2]
 8007334:	4a5a      	ldr	r2, [pc, #360]	; (80074a0 <__ieee754_powf+0x3d8>)
 8007336:	ee37 6a27 	vadd.f32	s12, s14, s15
 800733a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800733e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007342:	1049      	asrs	r1, r1, #1
 8007344:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007348:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800734c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007350:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8007354:	ee06 1a10 	vmov	s12, r1
 8007358:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800735c:	ee14 ca90 	vmov	ip, s9
 8007360:	ea02 0c0c 	and.w	ip, r2, ip
 8007364:	ee05 ca10 	vmov	s10, ip
 8007368:	eeb1 4a45 	vneg.f32	s8, s10
 800736c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007370:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007374:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80074a4 <__ieee754_powf+0x3dc>
 8007378:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800737c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007380:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007384:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8007388:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800738c:	eddf 5a46 	vldr	s11, [pc, #280]	; 80074a8 <__ieee754_powf+0x3e0>
 8007390:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007394:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074ac <__ieee754_powf+0x3e4>
 8007398:	eee7 5a27 	vfma.f32	s11, s14, s15
 800739c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007480 <__ieee754_powf+0x3b8>
 80073a0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80073a4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80074b0 <__ieee754_powf+0x3e8>
 80073a8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80073ac:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80074b4 <__ieee754_powf+0x3ec>
 80073b0:	ee75 6a24 	vadd.f32	s13, s10, s9
 80073b4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80073b8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80073bc:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80073c0:	eef0 7a65 	vmov.f32	s15, s11
 80073c4:	eee3 6a87 	vfma.f32	s13, s7, s14
 80073c8:	eee5 7a05 	vfma.f32	s15, s10, s10
 80073cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d0:	ee17 1a90 	vmov	r1, s15
 80073d4:	4011      	ands	r1, r2
 80073d6:	ee07 1a90 	vmov	s15, r1
 80073da:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80073de:	eddf 5a36 	vldr	s11, [pc, #216]	; 80074b8 <__ieee754_powf+0x3f0>
 80073e2:	eea4 7a05 	vfma.f32	s14, s8, s10
 80073e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80073ea:	ee27 7a24 	vmul.f32	s14, s14, s9
 80073ee:	eea7 7a86 	vfma.f32	s14, s15, s12
 80073f2:	eeb0 6a47 	vmov.f32	s12, s14
 80073f6:	eea5 6a27 	vfma.f32	s12, s10, s15
 80073fa:	ee16 1a10 	vmov	r1, s12
 80073fe:	4011      	ands	r1, r2
 8007400:	ee06 1a90 	vmov	s13, r1
 8007404:	eee4 6a27 	vfma.f32	s13, s8, s15
 8007408:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80074bc <__ieee754_powf+0x3f4>
 800740c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007410:	ee06 1a10 	vmov	s12, r1
 8007414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007418:	eddf 7a29 	vldr	s15, [pc, #164]	; 80074c0 <__ieee754_powf+0x3f8>
 800741c:	4929      	ldr	r1, [pc, #164]	; (80074c4 <__ieee754_powf+0x3fc>)
 800741e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007422:	4439      	add	r1, r7
 8007424:	edd1 7a00 	vldr	s15, [r1]
 8007428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef0 0a47 	vmov.f32	s1, s14
 8007434:	4b24      	ldr	r3, [pc, #144]	; (80074c8 <__ieee754_powf+0x400>)
 8007436:	eee6 0a25 	vfma.f32	s1, s12, s11
 800743a:	443b      	add	r3, r7
 800743c:	ed93 5a00 	vldr	s10, [r3]
 8007440:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007444:	ee70 0a85 	vadd.f32	s1, s1, s10
 8007448:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800744c:	ee17 3a90 	vmov	r3, s15
 8007450:	4013      	ands	r3, r2
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800745a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800745e:	eee6 7a65 	vfms.f32	s15, s12, s11
 8007462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007466:	e70e      	b.n	8007286 <__ieee754_powf+0x1be>
 8007468:	2401      	movs	r4, #1
 800746a:	e75c      	b.n	8007326 <__ieee754_powf+0x25e>
 800746c:	08016e20 	.word	0x08016e20
 8007470:	00000000 	.word	0x00000000
 8007474:	3f7ffff7 	.word	0x3f7ffff7
 8007478:	7149f2ca 	.word	0x7149f2ca
 800747c:	3f800007 	.word	0x3f800007
 8007480:	3eaaaaab 	.word	0x3eaaaaab
 8007484:	36eca570 	.word	0x36eca570
 8007488:	3fb8aa3b 	.word	0x3fb8aa3b
 800748c:	3fb8aa00 	.word	0x3fb8aa00
 8007490:	4b800000 	.word	0x4b800000
 8007494:	001cc471 	.word	0x001cc471
 8007498:	005db3d6 	.word	0x005db3d6
 800749c:	08016e24 	.word	0x08016e24
 80074a0:	fffff000 	.word	0xfffff000
 80074a4:	3e6c3255 	.word	0x3e6c3255
 80074a8:	3e53f142 	.word	0x3e53f142
 80074ac:	3e8ba305 	.word	0x3e8ba305
 80074b0:	3edb6db7 	.word	0x3edb6db7
 80074b4:	3f19999a 	.word	0x3f19999a
 80074b8:	3f763800 	.word	0x3f763800
 80074bc:	3f76384f 	.word	0x3f76384f
 80074c0:	369dc3a0 	.word	0x369dc3a0
 80074c4:	08016e34 	.word	0x08016e34
 80074c8:	08016e2c 	.word	0x08016e2c
 80074cc:	3338aa3c 	.word	0x3338aa3c
 80074d0:	f040 8092 	bne.w	80075f8 <__ieee754_powf+0x530>
 80074d4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80074cc <__ieee754_powf+0x404>
 80074d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074dc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80074e0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80074e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e8:	f73f aef6 	bgt.w	80072d8 <__ieee754_powf+0x210>
 80074ec:	15db      	asrs	r3, r3, #23
 80074ee:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80074f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80074f6:	4103      	asrs	r3, r0
 80074f8:	4423      	add	r3, r4
 80074fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80074fe:	4947      	ldr	r1, [pc, #284]	; (800761c <__ieee754_powf+0x554>)
 8007500:	3a7f      	subs	r2, #127	; 0x7f
 8007502:	4111      	asrs	r1, r2
 8007504:	ea23 0101 	bic.w	r1, r3, r1
 8007508:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800750c:	ee07 1a10 	vmov	s14, r1
 8007510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007514:	f1c2 0217 	rsb	r2, r2, #23
 8007518:	4110      	asrs	r0, r2
 800751a:	2c00      	cmp	r4, #0
 800751c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007520:	bfb8      	it	lt
 8007522:	4240      	neglt	r0, r0
 8007524:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007528:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007620 <__ieee754_powf+0x558>
 800752c:	ee17 3a10 	vmov	r3, s14
 8007530:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007534:	f023 030f 	bic.w	r3, r3, #15
 8007538:	ee07 3a10 	vmov	s14, r3
 800753c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007540:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007544:	eddf 7a37 	vldr	s15, [pc, #220]	; 8007624 <__ieee754_powf+0x55c>
 8007548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007550:	eddf 6a35 	vldr	s13, [pc, #212]	; 8007628 <__ieee754_powf+0x560>
 8007554:	eeb0 0a67 	vmov.f32	s0, s15
 8007558:	eea7 0a26 	vfma.f32	s0, s14, s13
 800755c:	eeb0 6a40 	vmov.f32	s12, s0
 8007560:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007564:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007568:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800756c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800762c <__ieee754_powf+0x564>
 8007570:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007630 <__ieee754_powf+0x568>
 8007574:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007578:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007634 <__ieee754_powf+0x56c>
 800757c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007580:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007638 <__ieee754_powf+0x570>
 8007584:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007588:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800763c <__ieee754_powf+0x574>
 800758c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007590:	eeb0 6a40 	vmov.f32	s12, s0
 8007594:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007598:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800759c:	eeb0 7a46 	vmov.f32	s14, s12
 80075a0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80075a4:	ee20 6a06 	vmul.f32	s12, s0, s12
 80075a8:	eee0 7a27 	vfma.f32	s15, s0, s15
 80075ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80075b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80075b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80075bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80075c0:	ee10 3a10 	vmov	r3, s0
 80075c4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80075c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075cc:	da1a      	bge.n	8007604 <__ieee754_powf+0x53c>
 80075ce:	f000 fcad 	bl	8007f2c <scalbnf>
 80075d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80075d6:	e5c9      	b.n	800716c <__ieee754_powf+0xa4>
 80075d8:	4a19      	ldr	r2, [pc, #100]	; (8007640 <__ieee754_powf+0x578>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	dd02      	ble.n	80075e4 <__ieee754_powf+0x51c>
 80075de:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007644 <__ieee754_powf+0x57c>
 80075e2:	e67b      	b.n	80072dc <__ieee754_powf+0x214>
 80075e4:	d108      	bne.n	80075f8 <__ieee754_powf+0x530>
 80075e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075ea:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	f6ff af7b 	blt.w	80074ec <__ieee754_powf+0x424>
 80075f6:	e7f2      	b.n	80075de <__ieee754_powf+0x516>
 80075f8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80075fc:	f73f af76 	bgt.w	80074ec <__ieee754_powf+0x424>
 8007600:	2000      	movs	r0, #0
 8007602:	e78f      	b.n	8007524 <__ieee754_powf+0x45c>
 8007604:	ee00 3a10 	vmov	s0, r3
 8007608:	e7e3      	b.n	80075d2 <__ieee754_powf+0x50a>
 800760a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800760e:	e5ad      	b.n	800716c <__ieee754_powf+0xa4>
 8007610:	eeb0 0a68 	vmov.f32	s0, s17
 8007614:	e5aa      	b.n	800716c <__ieee754_powf+0xa4>
 8007616:	eeb0 0a48 	vmov.f32	s0, s16
 800761a:	e5a7      	b.n	800716c <__ieee754_powf+0xa4>
 800761c:	007fffff 	.word	0x007fffff
 8007620:	3f317218 	.word	0x3f317218
 8007624:	35bfbe8c 	.word	0x35bfbe8c
 8007628:	3f317200 	.word	0x3f317200
 800762c:	3331bb4c 	.word	0x3331bb4c
 8007630:	b5ddea0e 	.word	0xb5ddea0e
 8007634:	388ab355 	.word	0x388ab355
 8007638:	bb360b61 	.word	0xbb360b61
 800763c:	3e2aaaab 	.word	0x3e2aaaab
 8007640:	43160000 	.word	0x43160000
 8007644:	0da24260 	.word	0x0da24260

08007648 <__ieee754_rem_pio2f>:
 8007648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764a:	ee10 6a10 	vmov	r6, s0
 800764e:	4b86      	ldr	r3, [pc, #536]	; (8007868 <__ieee754_rem_pio2f+0x220>)
 8007650:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007654:	429c      	cmp	r4, r3
 8007656:	b087      	sub	sp, #28
 8007658:	4605      	mov	r5, r0
 800765a:	dc05      	bgt.n	8007668 <__ieee754_rem_pio2f+0x20>
 800765c:	2300      	movs	r3, #0
 800765e:	ed85 0a00 	vstr	s0, [r5]
 8007662:	6043      	str	r3, [r0, #4]
 8007664:	2000      	movs	r0, #0
 8007666:	e020      	b.n	80076aa <__ieee754_rem_pio2f+0x62>
 8007668:	4b80      	ldr	r3, [pc, #512]	; (800786c <__ieee754_rem_pio2f+0x224>)
 800766a:	429c      	cmp	r4, r3
 800766c:	dc38      	bgt.n	80076e0 <__ieee754_rem_pio2f+0x98>
 800766e:	2e00      	cmp	r6, #0
 8007670:	f024 040f 	bic.w	r4, r4, #15
 8007674:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8007870 <__ieee754_rem_pio2f+0x228>
 8007678:	4b7e      	ldr	r3, [pc, #504]	; (8007874 <__ieee754_rem_pio2f+0x22c>)
 800767a:	dd18      	ble.n	80076ae <__ieee754_rem_pio2f+0x66>
 800767c:	429c      	cmp	r4, r3
 800767e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007682:	bf09      	itett	eq
 8007684:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007878 <__ieee754_rem_pio2f+0x230>
 8007688:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800787c <__ieee754_rem_pio2f+0x234>
 800768c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007690:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007880 <__ieee754_rem_pio2f+0x238>
 8007694:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007698:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800769c:	edc0 6a00 	vstr	s13, [r0]
 80076a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80076a8:	2001      	movs	r0, #1
 80076aa:	b007      	add	sp, #28
 80076ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ae:	429c      	cmp	r4, r3
 80076b0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80076b4:	bf09      	itett	eq
 80076b6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007878 <__ieee754_rem_pio2f+0x230>
 80076ba:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800787c <__ieee754_rem_pio2f+0x234>
 80076be:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80076c2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007880 <__ieee754_rem_pio2f+0x238>
 80076c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80076ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076ce:	edc0 6a00 	vstr	s13, [r0]
 80076d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076d6:	edc0 7a01 	vstr	s15, [r0, #4]
 80076da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076de:	e7e4      	b.n	80076aa <__ieee754_rem_pio2f+0x62>
 80076e0:	4b68      	ldr	r3, [pc, #416]	; (8007884 <__ieee754_rem_pio2f+0x23c>)
 80076e2:	429c      	cmp	r4, r3
 80076e4:	dc71      	bgt.n	80077ca <__ieee754_rem_pio2f+0x182>
 80076e6:	f000 fc09 	bl	8007efc <fabsf>
 80076ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007888 <__ieee754_rem_pio2f+0x240>
 80076ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80076f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076fa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80076fe:	ee17 0a90 	vmov	r0, s15
 8007702:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007870 <__ieee754_rem_pio2f+0x228>
 8007706:	eeb1 7a46 	vneg.f32	s14, s12
 800770a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800770e:	281f      	cmp	r0, #31
 8007710:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800787c <__ieee754_rem_pio2f+0x234>
 8007714:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007718:	ee70 6a67 	vsub.f32	s13, s0, s15
 800771c:	ee16 3a90 	vmov	r3, s13
 8007720:	dc1c      	bgt.n	800775c <__ieee754_rem_pio2f+0x114>
 8007722:	1e47      	subs	r7, r0, #1
 8007724:	4959      	ldr	r1, [pc, #356]	; (800788c <__ieee754_rem_pio2f+0x244>)
 8007726:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800772a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800772e:	428a      	cmp	r2, r1
 8007730:	d014      	beq.n	800775c <__ieee754_rem_pio2f+0x114>
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	ed95 7a00 	vldr	s14, [r5]
 8007738:	ee30 0a47 	vsub.f32	s0, s0, s14
 800773c:	2e00      	cmp	r6, #0
 800773e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007742:	ed85 0a01 	vstr	s0, [r5, #4]
 8007746:	dab0      	bge.n	80076aa <__ieee754_rem_pio2f+0x62>
 8007748:	eeb1 7a47 	vneg.f32	s14, s14
 800774c:	eeb1 0a40 	vneg.f32	s0, s0
 8007750:	ed85 7a00 	vstr	s14, [r5]
 8007754:	ed85 0a01 	vstr	s0, [r5, #4]
 8007758:	4240      	negs	r0, r0
 800775a:	e7a6      	b.n	80076aa <__ieee754_rem_pio2f+0x62>
 800775c:	15e4      	asrs	r4, r4, #23
 800775e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007762:	1aa2      	subs	r2, r4, r2
 8007764:	2a08      	cmp	r2, #8
 8007766:	dde4      	ble.n	8007732 <__ieee754_rem_pio2f+0xea>
 8007768:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007878 <__ieee754_rem_pio2f+0x230>
 800776c:	eef0 6a40 	vmov.f32	s13, s0
 8007770:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007774:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007778:	eea7 0a27 	vfma.f32	s0, s14, s15
 800777c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007880 <__ieee754_rem_pio2f+0x238>
 8007780:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007784:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007788:	eef0 7a40 	vmov.f32	s15, s0
 800778c:	ee15 3a90 	vmov	r3, s11
 8007790:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007794:	1aa4      	subs	r4, r4, r2
 8007796:	2c19      	cmp	r4, #25
 8007798:	dc04      	bgt.n	80077a4 <__ieee754_rem_pio2f+0x15c>
 800779a:	edc5 5a00 	vstr	s11, [r5]
 800779e:	eeb0 0a66 	vmov.f32	s0, s13
 80077a2:	e7c7      	b.n	8007734 <__ieee754_rem_pio2f+0xec>
 80077a4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007890 <__ieee754_rem_pio2f+0x248>
 80077a8:	eeb0 0a66 	vmov.f32	s0, s13
 80077ac:	eea7 0a25 	vfma.f32	s0, s14, s11
 80077b0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80077b4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80077b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007894 <__ieee754_rem_pio2f+0x24c>
 80077bc:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80077c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80077c4:	ed85 7a00 	vstr	s14, [r5]
 80077c8:	e7b4      	b.n	8007734 <__ieee754_rem_pio2f+0xec>
 80077ca:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80077ce:	db06      	blt.n	80077de <__ieee754_rem_pio2f+0x196>
 80077d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80077d4:	edc0 7a01 	vstr	s15, [r0, #4]
 80077d8:	edc0 7a00 	vstr	s15, [r0]
 80077dc:	e742      	b.n	8007664 <__ieee754_rem_pio2f+0x1c>
 80077de:	15e2      	asrs	r2, r4, #23
 80077e0:	3a86      	subs	r2, #134	; 0x86
 80077e2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80077ee:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007898 <__ieee754_rem_pio2f+0x250>
 80077f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80077f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077fa:	ed8d 7a03 	vstr	s14, [sp, #12]
 80077fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007802:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007806:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800780a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800780e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007812:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007816:	eef5 7a40 	vcmp.f32	s15, #0.0
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	edcd 7a05 	vstr	s15, [sp, #20]
 8007822:	d11e      	bne.n	8007862 <__ieee754_rem_pio2f+0x21a>
 8007824:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	2302      	movne	r3, #2
 8007832:	491a      	ldr	r1, [pc, #104]	; (800789c <__ieee754_rem_pio2f+0x254>)
 8007834:	9101      	str	r1, [sp, #4]
 8007836:	2102      	movs	r1, #2
 8007838:	9100      	str	r1, [sp, #0]
 800783a:	a803      	add	r0, sp, #12
 800783c:	4629      	mov	r1, r5
 800783e:	f000 f891 	bl	8007964 <__kernel_rem_pio2f>
 8007842:	2e00      	cmp	r6, #0
 8007844:	f6bf af31 	bge.w	80076aa <__ieee754_rem_pio2f+0x62>
 8007848:	edd5 7a00 	vldr	s15, [r5]
 800784c:	eef1 7a67 	vneg.f32	s15, s15
 8007850:	edc5 7a00 	vstr	s15, [r5]
 8007854:	edd5 7a01 	vldr	s15, [r5, #4]
 8007858:	eef1 7a67 	vneg.f32	s15, s15
 800785c:	edc5 7a01 	vstr	s15, [r5, #4]
 8007860:	e77a      	b.n	8007758 <__ieee754_rem_pio2f+0x110>
 8007862:	2303      	movs	r3, #3
 8007864:	e7e5      	b.n	8007832 <__ieee754_rem_pio2f+0x1ea>
 8007866:	bf00      	nop
 8007868:	3f490fd8 	.word	0x3f490fd8
 800786c:	4016cbe3 	.word	0x4016cbe3
 8007870:	3fc90f80 	.word	0x3fc90f80
 8007874:	3fc90fd0 	.word	0x3fc90fd0
 8007878:	37354400 	.word	0x37354400
 800787c:	37354443 	.word	0x37354443
 8007880:	2e85a308 	.word	0x2e85a308
 8007884:	43490f80 	.word	0x43490f80
 8007888:	3f22f984 	.word	0x3f22f984
 800788c:	08016e3c 	.word	0x08016e3c
 8007890:	2e85a300 	.word	0x2e85a300
 8007894:	248d3132 	.word	0x248d3132
 8007898:	43800000 	.word	0x43800000
 800789c:	08016ebc 	.word	0x08016ebc

080078a0 <__ieee754_sqrtf>:
 80078a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80078a4:	4770      	bx	lr
	...

080078a8 <__kernel_cosf>:
 80078a8:	ee10 3a10 	vmov	r3, s0
 80078ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80078b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b8:	da05      	bge.n	80078c6 <__kernel_cosf+0x1e>
 80078ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80078be:	ee17 2a90 	vmov	r2, s15
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	d03b      	beq.n	800793e <__kernel_cosf+0x96>
 80078c6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80078ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80078ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007944 <__kernel_cosf+0x9c>
 80078d2:	4a1d      	ldr	r2, [pc, #116]	; (8007948 <__kernel_cosf+0xa0>)
 80078d4:	ee66 7a07 	vmul.f32	s15, s12, s14
 80078d8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800794c <__kernel_cosf+0xa4>
 80078dc:	eea6 7a25 	vfma.f32	s14, s12, s11
 80078e0:	4293      	cmp	r3, r2
 80078e2:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007950 <__kernel_cosf+0xa8>
 80078e6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80078ea:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007954 <__kernel_cosf+0xac>
 80078ee:	eea5 7a86 	vfma.f32	s14, s11, s12
 80078f2:	eddf 5a19 	vldr	s11, [pc, #100]	; 8007958 <__kernel_cosf+0xb0>
 80078f6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80078fa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800795c <__kernel_cosf+0xb4>
 80078fe:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007902:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007906:	ee27 7a06 	vmul.f32	s14, s14, s12
 800790a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800790e:	dc04      	bgt.n	800791a <__kernel_cosf+0x72>
 8007910:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8007914:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8007918:	4770      	bx	lr
 800791a:	4a11      	ldr	r2, [pc, #68]	; (8007960 <__kernel_cosf+0xb8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	bfda      	itte	le
 8007920:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007924:	ee07 3a10 	vmovle	s14, r3
 8007928:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800792c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007930:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007934:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007938:	ee30 0a67 	vsub.f32	s0, s0, s15
 800793c:	4770      	bx	lr
 800793e:	eeb0 0a66 	vmov.f32	s0, s13
 8007942:	4770      	bx	lr
 8007944:	ad47d74e 	.word	0xad47d74e
 8007948:	3e999999 	.word	0x3e999999
 800794c:	310f74f6 	.word	0x310f74f6
 8007950:	b493f27c 	.word	0xb493f27c
 8007954:	37d00d01 	.word	0x37d00d01
 8007958:	bab60b61 	.word	0xbab60b61
 800795c:	3d2aaaab 	.word	0x3d2aaaab
 8007960:	3f480000 	.word	0x3f480000

08007964 <__kernel_rem_pio2f>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	ed2d 8b04 	vpush	{d8-d9}
 800796c:	b0d7      	sub	sp, #348	; 0x15c
 800796e:	469b      	mov	fp, r3
 8007970:	460e      	mov	r6, r1
 8007972:	4bbe      	ldr	r3, [pc, #760]	; (8007c6c <__kernel_rem_pio2f+0x308>)
 8007974:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007976:	9002      	str	r0, [sp, #8]
 8007978:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800797c:	9865      	ldr	r0, [sp, #404]	; 0x194
 800797e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8007c7c <__kernel_rem_pio2f+0x318>
 8007982:	1ed1      	subs	r1, r2, #3
 8007984:	2308      	movs	r3, #8
 8007986:	fb91 f1f3 	sdiv	r1, r1, r3
 800798a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800798e:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8007992:	1c4c      	adds	r4, r1, #1
 8007994:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8007998:	eba1 050a 	sub.w	r5, r1, sl
 800799c:	aa1a      	add	r2, sp, #104	; 0x68
 800799e:	eb09 070a 	add.w	r7, r9, sl
 80079a2:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80079a6:	4696      	mov	lr, r2
 80079a8:	2300      	movs	r3, #0
 80079aa:	42bb      	cmp	r3, r7
 80079ac:	dd0f      	ble.n	80079ce <__kernel_rem_pio2f+0x6a>
 80079ae:	af42      	add	r7, sp, #264	; 0x108
 80079b0:	2200      	movs	r2, #0
 80079b2:	454a      	cmp	r2, r9
 80079b4:	dc27      	bgt.n	8007a06 <__kernel_rem_pio2f+0xa2>
 80079b6:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80079ba:	eb0b 0302 	add.w	r3, fp, r2
 80079be:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80079c2:	9d02      	ldr	r5, [sp, #8]
 80079c4:	eddf 7aad 	vldr	s15, [pc, #692]	; 8007c7c <__kernel_rem_pio2f+0x318>
 80079c8:	f04f 0c00 	mov.w	ip, #0
 80079cc:	e015      	b.n	80079fa <__kernel_rem_pio2f+0x96>
 80079ce:	42dd      	cmn	r5, r3
 80079d0:	bf5d      	ittte	pl
 80079d2:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80079d6:	ee07 2a90 	vmovpl	s15, r2
 80079da:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80079de:	eef0 7a47 	vmovmi.f32	s15, s14
 80079e2:	ecee 7a01 	vstmia	lr!, {s15}
 80079e6:	3301      	adds	r3, #1
 80079e8:	e7df      	b.n	80079aa <__kernel_rem_pio2f+0x46>
 80079ea:	ecf5 6a01 	vldmia	r5!, {s13}
 80079ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80079f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80079f6:	f10c 0c01 	add.w	ip, ip, #1
 80079fa:	45d4      	cmp	ip, sl
 80079fc:	ddf5      	ble.n	80079ea <__kernel_rem_pio2f+0x86>
 80079fe:	ece7 7a01 	vstmia	r7!, {s15}
 8007a02:	3201      	adds	r2, #1
 8007a04:	e7d5      	b.n	80079b2 <__kernel_rem_pio2f+0x4e>
 8007a06:	ab06      	add	r3, sp, #24
 8007a08:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8007c78 <__kernel_rem_pio2f+0x314>
 8007a12:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007c74 <__kernel_rem_pio2f+0x310>
 8007a16:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007a1a:	9303      	str	r3, [sp, #12]
 8007a1c:	464d      	mov	r5, r9
 8007a1e:	ab56      	add	r3, sp, #344	; 0x158
 8007a20:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007a24:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007a28:	3f01      	subs	r7, #1
 8007a2a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007a2e:	00bf      	lsls	r7, r7, #2
 8007a30:	ab56      	add	r3, sp, #344	; 0x158
 8007a32:	19da      	adds	r2, r3, r7
 8007a34:	3a4c      	subs	r2, #76	; 0x4c
 8007a36:	2300      	movs	r3, #0
 8007a38:	1ae9      	subs	r1, r5, r3
 8007a3a:	2900      	cmp	r1, #0
 8007a3c:	dc4c      	bgt.n	8007ad8 <__kernel_rem_pio2f+0x174>
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fa74 	bl	8007f2c <scalbnf>
 8007a44:	eeb0 8a40 	vmov.f32	s16, s0
 8007a48:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007a4c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007a50:	f7ff f8b8 	bl	8006bc4 <floorf>
 8007a54:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007a58:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007a5c:	2c00      	cmp	r4, #0
 8007a5e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007a62:	edcd 7a01 	vstr	s15, [sp, #4]
 8007a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a6a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007a6e:	dd48      	ble.n	8007b02 <__kernel_rem_pio2f+0x19e>
 8007a70:	1e69      	subs	r1, r5, #1
 8007a72:	ab06      	add	r3, sp, #24
 8007a74:	f1c4 0008 	rsb	r0, r4, #8
 8007a78:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007a7c:	9a01      	ldr	r2, [sp, #4]
 8007a7e:	fa4c f300 	asr.w	r3, ip, r0
 8007a82:	441a      	add	r2, r3
 8007a84:	4083      	lsls	r3, r0
 8007a86:	9201      	str	r2, [sp, #4]
 8007a88:	ebac 0203 	sub.w	r2, ip, r3
 8007a8c:	ab06      	add	r3, sp, #24
 8007a8e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007a92:	f1c4 0307 	rsb	r3, r4, #7
 8007a96:	fa42 f803 	asr.w	r8, r2, r3
 8007a9a:	f1b8 0f00 	cmp.w	r8, #0
 8007a9e:	dd41      	ble.n	8007b24 <__kernel_rem_pio2f+0x1c0>
 8007aa0:	9b01      	ldr	r3, [sp, #4]
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	4285      	cmp	r5, r0
 8007aac:	dc6d      	bgt.n	8007b8a <__kernel_rem_pio2f+0x226>
 8007aae:	2c00      	cmp	r4, #0
 8007ab0:	dd04      	ble.n	8007abc <__kernel_rem_pio2f+0x158>
 8007ab2:	2c01      	cmp	r4, #1
 8007ab4:	d07e      	beq.n	8007bb4 <__kernel_rem_pio2f+0x250>
 8007ab6:	2c02      	cmp	r4, #2
 8007ab8:	f000 8086 	beq.w	8007bc8 <__kernel_rem_pio2f+0x264>
 8007abc:	f1b8 0f02 	cmp.w	r8, #2
 8007ac0:	d130      	bne.n	8007b24 <__kernel_rem_pio2f+0x1c0>
 8007ac2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ac6:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007aca:	b359      	cbz	r1, 8007b24 <__kernel_rem_pio2f+0x1c0>
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fa2d 	bl	8007f2c <scalbnf>
 8007ad2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007ad6:	e025      	b.n	8007b24 <__kernel_rem_pio2f+0x1c0>
 8007ad8:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007adc:	a806      	add	r0, sp, #24
 8007ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ae6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007aea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007aee:	ee10 1a10 	vmov	r1, s0
 8007af2:	ed32 0a01 	vldmdb	r2!, {s0}
 8007af6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8007afa:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007afe:	3301      	adds	r3, #1
 8007b00:	e79a      	b.n	8007a38 <__kernel_rem_pio2f+0xd4>
 8007b02:	d106      	bne.n	8007b12 <__kernel_rem_pio2f+0x1ae>
 8007b04:	1e6b      	subs	r3, r5, #1
 8007b06:	aa06      	add	r2, sp, #24
 8007b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007b0c:	ea4f 2822 	mov.w	r8, r2, asr #8
 8007b10:	e7c3      	b.n	8007a9a <__kernel_rem_pio2f+0x136>
 8007b12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007b16:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1e:	da31      	bge.n	8007b84 <__kernel_rem_pio2f+0x220>
 8007b20:	f04f 0800 	mov.w	r8, #0
 8007b24:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2c:	f040 80a8 	bne.w	8007c80 <__kernel_rem_pio2f+0x31c>
 8007b30:	1e6b      	subs	r3, r5, #1
 8007b32:	4618      	mov	r0, r3
 8007b34:	2200      	movs	r2, #0
 8007b36:	4548      	cmp	r0, r9
 8007b38:	da4d      	bge.n	8007bd6 <__kernel_rem_pio2f+0x272>
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	f000 8087 	beq.w	8007c4e <__kernel_rem_pio2f+0x2ea>
 8007b40:	aa06      	add	r2, sp, #24
 8007b42:	3c08      	subs	r4, #8
 8007b44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	f000 808d 	beq.w	8007c68 <__kernel_rem_pio2f+0x304>
 8007b4e:	4620      	mov	r0, r4
 8007b50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007b54:	9302      	str	r3, [sp, #8]
 8007b56:	f000 f9e9 	bl	8007f2c <scalbnf>
 8007b5a:	9b02      	ldr	r3, [sp, #8]
 8007b5c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007c78 <__kernel_rem_pio2f+0x314>
 8007b60:	0099      	lsls	r1, r3, #2
 8007b62:	aa42      	add	r2, sp, #264	; 0x108
 8007b64:	1850      	adds	r0, r2, r1
 8007b66:	1d05      	adds	r5, r0, #4
 8007b68:	461c      	mov	r4, r3
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	f280 80b8 	bge.w	8007ce0 <__kernel_rem_pio2f+0x37c>
 8007b70:	2500      	movs	r5, #0
 8007b72:	1b5c      	subs	r4, r3, r5
 8007b74:	2c00      	cmp	r4, #0
 8007b76:	f2c0 80d8 	blt.w	8007d2a <__kernel_rem_pio2f+0x3c6>
 8007b7a:	4f3d      	ldr	r7, [pc, #244]	; (8007c70 <__kernel_rem_pio2f+0x30c>)
 8007b7c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007c7c <__kernel_rem_pio2f+0x318>
 8007b80:	2400      	movs	r4, #0
 8007b82:	e0c6      	b.n	8007d12 <__kernel_rem_pio2f+0x3ae>
 8007b84:	f04f 0802 	mov.w	r8, #2
 8007b88:	e78a      	b.n	8007aa0 <__kernel_rem_pio2f+0x13c>
 8007b8a:	ab06      	add	r3, sp, #24
 8007b8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007b90:	b949      	cbnz	r1, 8007ba6 <__kernel_rem_pio2f+0x242>
 8007b92:	b12b      	cbz	r3, 8007ba0 <__kernel_rem_pio2f+0x23c>
 8007b94:	aa06      	add	r2, sp, #24
 8007b96:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007b9a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	e781      	b.n	8007aaa <__kernel_rem_pio2f+0x146>
 8007ba6:	aa06      	add	r2, sp, #24
 8007ba8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007bac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	e7f5      	b.n	8007ba0 <__kernel_rem_pio2f+0x23c>
 8007bb4:	1e68      	subs	r0, r5, #1
 8007bb6:	ab06      	add	r3, sp, #24
 8007bb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc0:	aa06      	add	r2, sp, #24
 8007bc2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007bc6:	e779      	b.n	8007abc <__kernel_rem_pio2f+0x158>
 8007bc8:	1e68      	subs	r0, r5, #1
 8007bca:	ab06      	add	r3, sp, #24
 8007bcc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bd4:	e7f4      	b.n	8007bc0 <__kernel_rem_pio2f+0x25c>
 8007bd6:	a906      	add	r1, sp, #24
 8007bd8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007bdc:	3801      	subs	r0, #1
 8007bde:	430a      	orrs	r2, r1
 8007be0:	e7a9      	b.n	8007b36 <__kernel_rem_pio2f+0x1d2>
 8007be2:	f10c 0c01 	add.w	ip, ip, #1
 8007be6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	d0f9      	beq.n	8007be2 <__kernel_rem_pio2f+0x27e>
 8007bee:	eb0b 0305 	add.w	r3, fp, r5
 8007bf2:	aa1a      	add	r2, sp, #104	; 0x68
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	1898      	adds	r0, r3, r2
 8007bf8:	3004      	adds	r0, #4
 8007bfa:	1c69      	adds	r1, r5, #1
 8007bfc:	3704      	adds	r7, #4
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4465      	add	r5, ip
 8007c02:	9005      	str	r0, [sp, #20]
 8007c04:	428d      	cmp	r5, r1
 8007c06:	f6ff af0a 	blt.w	8007a1e <__kernel_rem_pio2f+0xba>
 8007c0a:	a81a      	add	r0, sp, #104	; 0x68
 8007c0c:	eb02 0c03 	add.w	ip, r2, r3
 8007c10:	4484      	add	ip, r0
 8007c12:	9803      	ldr	r0, [sp, #12]
 8007c14:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007c18:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007c1c:	9001      	str	r0, [sp, #4]
 8007c1e:	ee07 0a90 	vmov	s15, r0
 8007c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c26:	9805      	ldr	r0, [sp, #20]
 8007c28:	edcc 7a00 	vstr	s15, [ip]
 8007c2c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007c7c <__kernel_rem_pio2f+0x318>
 8007c30:	eb00 0802 	add.w	r8, r0, r2
 8007c34:	f04f 0c00 	mov.w	ip, #0
 8007c38:	45d4      	cmp	ip, sl
 8007c3a:	dd0c      	ble.n	8007c56 <__kernel_rem_pio2f+0x2f2>
 8007c3c:	eb02 0c07 	add.w	ip, r2, r7
 8007c40:	a842      	add	r0, sp, #264	; 0x108
 8007c42:	4484      	add	ip, r0
 8007c44:	edcc 7a01 	vstr	s15, [ip, #4]
 8007c48:	3101      	adds	r1, #1
 8007c4a:	3204      	adds	r2, #4
 8007c4c:	e7da      	b.n	8007c04 <__kernel_rem_pio2f+0x2a0>
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	f04f 0c01 	mov.w	ip, #1
 8007c54:	e7c7      	b.n	8007be6 <__kernel_rem_pio2f+0x282>
 8007c56:	ecfe 6a01 	vldmia	lr!, {s13}
 8007c5a:	ed38 7a01 	vldmdb	r8!, {s14}
 8007c5e:	f10c 0c01 	add.w	ip, ip, #1
 8007c62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007c66:	e7e7      	b.n	8007c38 <__kernel_rem_pio2f+0x2d4>
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	e769      	b.n	8007b40 <__kernel_rem_pio2f+0x1dc>
 8007c6c:	08017200 	.word	0x08017200
 8007c70:	080171d4 	.word	0x080171d4
 8007c74:	43800000 	.word	0x43800000
 8007c78:	3b800000 	.word	0x3b800000
 8007c7c:	00000000 	.word	0x00000000
 8007c80:	4260      	negs	r0, r4
 8007c82:	eeb0 0a48 	vmov.f32	s0, s16
 8007c86:	f000 f951 	bl	8007f2c <scalbnf>
 8007c8a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007c74 <__kernel_rem_pio2f+0x310>
 8007c8e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c96:	db1a      	blt.n	8007cce <__kernel_rem_pio2f+0x36a>
 8007c98:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007c78 <__kernel_rem_pio2f+0x314>
 8007c9c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007ca0:	aa06      	add	r2, sp, #24
 8007ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ca6:	a906      	add	r1, sp, #24
 8007ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cac:	3408      	adds	r4, #8
 8007cae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cb6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007cba:	ee10 3a10 	vmov	r3, s0
 8007cbe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007cc2:	1c6b      	adds	r3, r5, #1
 8007cc4:	ee17 2a90 	vmov	r2, s15
 8007cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007ccc:	e73f      	b.n	8007b4e <__kernel_rem_pio2f+0x1ea>
 8007cce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007cd2:	aa06      	add	r2, sp, #24
 8007cd4:	ee10 3a10 	vmov	r3, s0
 8007cd8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007cdc:	462b      	mov	r3, r5
 8007cde:	e736      	b.n	8007b4e <__kernel_rem_pio2f+0x1ea>
 8007ce0:	aa06      	add	r2, sp, #24
 8007ce2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007ce6:	9202      	str	r2, [sp, #8]
 8007ce8:	ee07 2a90 	vmov	s15, r2
 8007cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cf0:	3c01      	subs	r4, #1
 8007cf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007cf6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007cfa:	ed65 7a01 	vstmdb	r5!, {s15}
 8007cfe:	e734      	b.n	8007b6a <__kernel_rem_pio2f+0x206>
 8007d00:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007d04:	ecf7 6a01 	vldmia	r7!, {s13}
 8007d08:	ed9c 7a00 	vldr	s14, [ip]
 8007d0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d10:	3401      	adds	r4, #1
 8007d12:	454c      	cmp	r4, r9
 8007d14:	dc01      	bgt.n	8007d1a <__kernel_rem_pio2f+0x3b6>
 8007d16:	42a5      	cmp	r5, r4
 8007d18:	daf2      	bge.n	8007d00 <__kernel_rem_pio2f+0x39c>
 8007d1a:	aa56      	add	r2, sp, #344	; 0x158
 8007d1c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007d20:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007d24:	3501      	adds	r5, #1
 8007d26:	3804      	subs	r0, #4
 8007d28:	e723      	b.n	8007b72 <__kernel_rem_pio2f+0x20e>
 8007d2a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007d2c:	2a03      	cmp	r2, #3
 8007d2e:	d84d      	bhi.n	8007dcc <__kernel_rem_pio2f+0x468>
 8007d30:	e8df f002 	tbb	[pc, r2]
 8007d34:	021f1f3e 	.word	0x021f1f3e
 8007d38:	aa56      	add	r2, sp, #344	; 0x158
 8007d3a:	4411      	add	r1, r2
 8007d3c:	399c      	subs	r1, #156	; 0x9c
 8007d3e:	4608      	mov	r0, r1
 8007d40:	461c      	mov	r4, r3
 8007d42:	2c00      	cmp	r4, #0
 8007d44:	dc5f      	bgt.n	8007e06 <__kernel_rem_pio2f+0x4a2>
 8007d46:	4608      	mov	r0, r1
 8007d48:	461c      	mov	r4, r3
 8007d4a:	2c01      	cmp	r4, #1
 8007d4c:	dc6b      	bgt.n	8007e26 <__kernel_rem_pio2f+0x4c2>
 8007d4e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8007c7c <__kernel_rem_pio2f+0x318>
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	dc77      	bgt.n	8007e46 <__kernel_rem_pio2f+0x4e2>
 8007d56:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007d5a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007d5e:	f1b8 0f00 	cmp.w	r8, #0
 8007d62:	d176      	bne.n	8007e52 <__kernel_rem_pio2f+0x4ee>
 8007d64:	edc6 6a00 	vstr	s13, [r6]
 8007d68:	ed86 7a01 	vstr	s14, [r6, #4]
 8007d6c:	edc6 7a02 	vstr	s15, [r6, #8]
 8007d70:	e02c      	b.n	8007dcc <__kernel_rem_pio2f+0x468>
 8007d72:	aa56      	add	r2, sp, #344	; 0x158
 8007d74:	4411      	add	r1, r2
 8007d76:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8007c7c <__kernel_rem_pio2f+0x318>
 8007d7a:	399c      	subs	r1, #156	; 0x9c
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	da32      	bge.n	8007de8 <__kernel_rem_pio2f+0x484>
 8007d82:	f1b8 0f00 	cmp.w	r8, #0
 8007d86:	d035      	beq.n	8007df4 <__kernel_rem_pio2f+0x490>
 8007d88:	eef1 7a47 	vneg.f32	s15, s14
 8007d8c:	edc6 7a00 	vstr	s15, [r6]
 8007d90:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d98:	a82f      	add	r0, sp, #188	; 0xbc
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	da2c      	bge.n	8007dfa <__kernel_rem_pio2f+0x496>
 8007da0:	f1b8 0f00 	cmp.w	r8, #0
 8007da4:	d001      	beq.n	8007daa <__kernel_rem_pio2f+0x446>
 8007da6:	eef1 7a67 	vneg.f32	s15, s15
 8007daa:	edc6 7a01 	vstr	s15, [r6, #4]
 8007dae:	e00d      	b.n	8007dcc <__kernel_rem_pio2f+0x468>
 8007db0:	aa56      	add	r2, sp, #344	; 0x158
 8007db2:	4411      	add	r1, r2
 8007db4:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007c7c <__kernel_rem_pio2f+0x318>
 8007db8:	399c      	subs	r1, #156	; 0x9c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	da0e      	bge.n	8007ddc <__kernel_rem_pio2f+0x478>
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	d001      	beq.n	8007dc8 <__kernel_rem_pio2f+0x464>
 8007dc4:	eef1 7a67 	vneg.f32	s15, s15
 8007dc8:	edc6 7a00 	vstr	s15, [r6]
 8007dcc:	9b01      	ldr	r3, [sp, #4]
 8007dce:	f003 0007 	and.w	r0, r3, #7
 8007dd2:	b057      	add	sp, #348	; 0x15c
 8007dd4:	ecbd 8b04 	vpop	{d8-d9}
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	ed31 7a01 	vldmdb	r1!, {s14}
 8007de0:	3b01      	subs	r3, #1
 8007de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007de6:	e7e8      	b.n	8007dba <__kernel_rem_pio2f+0x456>
 8007de8:	ed71 7a01 	vldmdb	r1!, {s15}
 8007dec:	3801      	subs	r0, #1
 8007dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007df2:	e7c4      	b.n	8007d7e <__kernel_rem_pio2f+0x41a>
 8007df4:	eef0 7a47 	vmov.f32	s15, s14
 8007df8:	e7c8      	b.n	8007d8c <__kernel_rem_pio2f+0x428>
 8007dfa:	ecb0 7a01 	vldmia	r0!, {s14}
 8007dfe:	3101      	adds	r1, #1
 8007e00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e04:	e7ca      	b.n	8007d9c <__kernel_rem_pio2f+0x438>
 8007e06:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007e0a:	ed70 6a01 	vldmdb	r0!, {s13}
 8007e0e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007e12:	3c01      	subs	r4, #1
 8007e14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e18:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e20:	edc0 7a00 	vstr	s15, [r0]
 8007e24:	e78d      	b.n	8007d42 <__kernel_rem_pio2f+0x3de>
 8007e26:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007e2a:	ed70 6a01 	vldmdb	r0!, {s13}
 8007e2e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007e32:	3c01      	subs	r4, #1
 8007e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e38:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e40:	edc0 7a00 	vstr	s15, [r0]
 8007e44:	e781      	b.n	8007d4a <__kernel_rem_pio2f+0x3e6>
 8007e46:	ed31 7a01 	vldmdb	r1!, {s14}
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e50:	e77f      	b.n	8007d52 <__kernel_rem_pio2f+0x3ee>
 8007e52:	eef1 6a66 	vneg.f32	s13, s13
 8007e56:	eeb1 7a47 	vneg.f32	s14, s14
 8007e5a:	edc6 6a00 	vstr	s13, [r6]
 8007e5e:	ed86 7a01 	vstr	s14, [r6, #4]
 8007e62:	eef1 7a67 	vneg.f32	s15, s15
 8007e66:	e781      	b.n	8007d6c <__kernel_rem_pio2f+0x408>

08007e68 <__kernel_sinf>:
 8007e68:	ee10 3a10 	vmov	r3, s0
 8007e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007e74:	da04      	bge.n	8007e80 <__kernel_sinf+0x18>
 8007e76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007e7a:	ee17 3a90 	vmov	r3, s15
 8007e7e:	b35b      	cbz	r3, 8007ed8 <__kernel_sinf+0x70>
 8007e80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007e84:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007edc <__kernel_sinf+0x74>
 8007e88:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007ee0 <__kernel_sinf+0x78>
 8007e8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007e90:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007ee4 <__kernel_sinf+0x7c>
 8007e94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007e98:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007ee8 <__kernel_sinf+0x80>
 8007e9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007ea0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007eec <__kernel_sinf+0x84>
 8007ea4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007ea8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007eac:	b930      	cbnz	r0, 8007ebc <__kernel_sinf+0x54>
 8007eae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007ef0 <__kernel_sinf+0x88>
 8007eb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007eb6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007eba:	4770      	bx	lr
 8007ebc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007ec0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007ec4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007ec8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007ecc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007ef4 <__kernel_sinf+0x8c>
 8007ed0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007ed4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	2f2ec9d3 	.word	0x2f2ec9d3
 8007ee0:	b2d72f34 	.word	0xb2d72f34
 8007ee4:	3638ef1b 	.word	0x3638ef1b
 8007ee8:	b9500d01 	.word	0xb9500d01
 8007eec:	3c088889 	.word	0x3c088889
 8007ef0:	be2aaaab 	.word	0xbe2aaaab
 8007ef4:	3e2aaaab 	.word	0x3e2aaaab

08007ef8 <matherr>:
 8007ef8:	2000      	movs	r0, #0
 8007efa:	4770      	bx	lr

08007efc <fabsf>:
 8007efc:	ee10 3a10 	vmov	r3, s0
 8007f00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f04:	ee00 3a10 	vmov	s0, r3
 8007f08:	4770      	bx	lr

08007f0a <finitef>:
 8007f0a:	ee10 3a10 	vmov	r3, s0
 8007f0e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007f12:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007f16:	bfac      	ite	ge
 8007f18:	2000      	movge	r0, #0
 8007f1a:	2001      	movlt	r0, #1
 8007f1c:	4770      	bx	lr
	...

08007f20 <nanf>:
 8007f20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f28 <nanf+0x8>
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	7fc00000 	.word	0x7fc00000

08007f2c <scalbnf>:
 8007f2c:	b508      	push	{r3, lr}
 8007f2e:	ee10 2a10 	vmov	r2, s0
 8007f32:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007f36:	ed2d 8b02 	vpush	{d8}
 8007f3a:	eef0 0a40 	vmov.f32	s1, s0
 8007f3e:	d004      	beq.n	8007f4a <scalbnf+0x1e>
 8007f40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007f44:	d306      	bcc.n	8007f54 <scalbnf+0x28>
 8007f46:	ee70 0a00 	vadd.f32	s1, s0, s0
 8007f4a:	ecbd 8b02 	vpop	{d8}
 8007f4e:	eeb0 0a60 	vmov.f32	s0, s1
 8007f52:	bd08      	pop	{r3, pc}
 8007f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f58:	d21c      	bcs.n	8007f94 <scalbnf+0x68>
 8007f5a:	4b1f      	ldr	r3, [pc, #124]	; (8007fd8 <scalbnf+0xac>)
 8007f5c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007fdc <scalbnf+0xb0>
 8007f60:	4298      	cmp	r0, r3
 8007f62:	ee60 0a27 	vmul.f32	s1, s0, s15
 8007f66:	db10      	blt.n	8007f8a <scalbnf+0x5e>
 8007f68:	ee10 2a90 	vmov	r2, s1
 8007f6c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007f70:	3b19      	subs	r3, #25
 8007f72:	4403      	add	r3, r0
 8007f74:	2bfe      	cmp	r3, #254	; 0xfe
 8007f76:	dd0f      	ble.n	8007f98 <scalbnf+0x6c>
 8007f78:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007fe0 <scalbnf+0xb4>
 8007f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f80:	f000 f834 	bl	8007fec <copysignf>
 8007f84:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007f88:	e7df      	b.n	8007f4a <scalbnf+0x1e>
 8007f8a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007fe4 <scalbnf+0xb8>
 8007f8e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007f92:	e7da      	b.n	8007f4a <scalbnf+0x1e>
 8007f94:	0ddb      	lsrs	r3, r3, #23
 8007f96:	e7ec      	b.n	8007f72 <scalbnf+0x46>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	dd06      	ble.n	8007faa <scalbnf+0x7e>
 8007f9c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007fa0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007fa4:	ee00 3a90 	vmov	s1, r3
 8007fa8:	e7cf      	b.n	8007f4a <scalbnf+0x1e>
 8007faa:	f113 0f16 	cmn.w	r3, #22
 8007fae:	da06      	bge.n	8007fbe <scalbnf+0x92>
 8007fb0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007fb4:	4298      	cmp	r0, r3
 8007fb6:	dcdf      	bgt.n	8007f78 <scalbnf+0x4c>
 8007fb8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007fe4 <scalbnf+0xb8>
 8007fbc:	e7de      	b.n	8007f7c <scalbnf+0x50>
 8007fbe:	3319      	adds	r3, #25
 8007fc0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007fc4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007fc8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007fe8 <scalbnf+0xbc>
 8007fcc:	ee07 3a10 	vmov	s14, r3
 8007fd0:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007fd4:	e7b9      	b.n	8007f4a <scalbnf+0x1e>
 8007fd6:	bf00      	nop
 8007fd8:	ffff3cb0 	.word	0xffff3cb0
 8007fdc:	4c000000 	.word	0x4c000000
 8007fe0:	7149f2ca 	.word	0x7149f2ca
 8007fe4:	0da24260 	.word	0x0da24260
 8007fe8:	33000000 	.word	0x33000000

08007fec <copysignf>:
 8007fec:	ee10 3a10 	vmov	r3, s0
 8007ff0:	ee10 2a90 	vmov	r2, s1
 8007ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ff8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	ee00 3a10 	vmov	s0, r3
 8008002:	4770      	bx	lr

08008004 <__errno>:
 8008004:	4b01      	ldr	r3, [pc, #4]	; (800800c <__errno+0x8>)
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000098 	.word	0x20000098

08008010 <__libc_init_array>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	4e0d      	ldr	r6, [pc, #52]	; (8008048 <__libc_init_array+0x38>)
 8008014:	4c0d      	ldr	r4, [pc, #52]	; (800804c <__libc_init_array+0x3c>)
 8008016:	1ba4      	subs	r4, r4, r6
 8008018:	10a4      	asrs	r4, r4, #2
 800801a:	2500      	movs	r5, #0
 800801c:	42a5      	cmp	r5, r4
 800801e:	d109      	bne.n	8008034 <__libc_init_array+0x24>
 8008020:	4e0b      	ldr	r6, [pc, #44]	; (8008050 <__libc_init_array+0x40>)
 8008022:	4c0c      	ldr	r4, [pc, #48]	; (8008054 <__libc_init_array+0x44>)
 8008024:	f000 f8d4 	bl	80081d0 <_init>
 8008028:	1ba4      	subs	r4, r4, r6
 800802a:	10a4      	asrs	r4, r4, #2
 800802c:	2500      	movs	r5, #0
 800802e:	42a5      	cmp	r5, r4
 8008030:	d105      	bne.n	800803e <__libc_init_array+0x2e>
 8008032:	bd70      	pop	{r4, r5, r6, pc}
 8008034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008038:	4798      	blx	r3
 800803a:	3501      	adds	r5, #1
 800803c:	e7ee      	b.n	800801c <__libc_init_array+0xc>
 800803e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008042:	4798      	blx	r3
 8008044:	3501      	adds	r5, #1
 8008046:	e7f2      	b.n	800802e <__libc_init_array+0x1e>
 8008048:	08017214 	.word	0x08017214
 800804c:	08017214 	.word	0x08017214
 8008050:	08017214 	.word	0x08017214
 8008054:	08017218 	.word	0x08017218

08008058 <memcpy>:
 8008058:	b510      	push	{r4, lr}
 800805a:	1e43      	subs	r3, r0, #1
 800805c:	440a      	add	r2, r1
 800805e:	4291      	cmp	r1, r2
 8008060:	d100      	bne.n	8008064 <memcpy+0xc>
 8008062:	bd10      	pop	{r4, pc}
 8008064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800806c:	e7f7      	b.n	800805e <memcpy+0x6>

0800806e <memset>:
 800806e:	4402      	add	r2, r0
 8008070:	4603      	mov	r3, r0
 8008072:	4293      	cmp	r3, r2
 8008074:	d100      	bne.n	8008078 <memset+0xa>
 8008076:	4770      	bx	lr
 8008078:	f803 1b01 	strb.w	r1, [r3], #1
 800807c:	e7f9      	b.n	8008072 <memset+0x4>
	...

08008080 <rand>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <rand+0x50>)
 8008084:	681c      	ldr	r4, [r3, #0]
 8008086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008088:	b97b      	cbnz	r3, 80080aa <rand+0x2a>
 800808a:	2018      	movs	r0, #24
 800808c:	f000 f82c 	bl	80080e8 <malloc>
 8008090:	4a10      	ldr	r2, [pc, #64]	; (80080d4 <rand+0x54>)
 8008092:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <rand+0x58>)
 8008094:	63a0      	str	r0, [r4, #56]	; 0x38
 8008096:	e9c0 2300 	strd	r2, r3, [r0]
 800809a:	4b10      	ldr	r3, [pc, #64]	; (80080dc <rand+0x5c>)
 800809c:	6083      	str	r3, [r0, #8]
 800809e:	230b      	movs	r3, #11
 80080a0:	8183      	strh	r3, [r0, #12]
 80080a2:	2201      	movs	r2, #1
 80080a4:	2300      	movs	r3, #0
 80080a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80080aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080ac:	480c      	ldr	r0, [pc, #48]	; (80080e0 <rand+0x60>)
 80080ae:	690a      	ldr	r2, [r1, #16]
 80080b0:	694b      	ldr	r3, [r1, #20]
 80080b2:	4c0c      	ldr	r4, [pc, #48]	; (80080e4 <rand+0x64>)
 80080b4:	4350      	muls	r0, r2
 80080b6:	fb04 0003 	mla	r0, r4, r3, r0
 80080ba:	fba2 2304 	umull	r2, r3, r2, r4
 80080be:	4403      	add	r3, r0
 80080c0:	1c54      	adds	r4, r2, #1
 80080c2:	f143 0500 	adc.w	r5, r3, #0
 80080c6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80080ca:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20000098 	.word	0x20000098
 80080d4:	abcd330e 	.word	0xabcd330e
 80080d8:	e66d1234 	.word	0xe66d1234
 80080dc:	0005deec 	.word	0x0005deec
 80080e0:	5851f42d 	.word	0x5851f42d
 80080e4:	4c957f2d 	.word	0x4c957f2d

080080e8 <malloc>:
 80080e8:	4b02      	ldr	r3, [pc, #8]	; (80080f4 <malloc+0xc>)
 80080ea:	4601      	mov	r1, r0
 80080ec:	6818      	ldr	r0, [r3, #0]
 80080ee:	f000 b803 	b.w	80080f8 <_malloc_r>
 80080f2:	bf00      	nop
 80080f4:	20000098 	.word	0x20000098

080080f8 <_malloc_r>:
 80080f8:	b570      	push	{r4, r5, r6, lr}
 80080fa:	1ccd      	adds	r5, r1, #3
 80080fc:	f025 0503 	bic.w	r5, r5, #3
 8008100:	3508      	adds	r5, #8
 8008102:	2d0c      	cmp	r5, #12
 8008104:	bf38      	it	cc
 8008106:	250c      	movcc	r5, #12
 8008108:	2d00      	cmp	r5, #0
 800810a:	4606      	mov	r6, r0
 800810c:	db01      	blt.n	8008112 <_malloc_r+0x1a>
 800810e:	42a9      	cmp	r1, r5
 8008110:	d903      	bls.n	800811a <_malloc_r+0x22>
 8008112:	230c      	movs	r3, #12
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	2000      	movs	r0, #0
 8008118:	bd70      	pop	{r4, r5, r6, pc}
 800811a:	f000 f857 	bl	80081cc <__malloc_lock>
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <_malloc_r+0xac>)
 8008120:	6814      	ldr	r4, [r2, #0]
 8008122:	4621      	mov	r1, r4
 8008124:	b991      	cbnz	r1, 800814c <_malloc_r+0x54>
 8008126:	4c20      	ldr	r4, [pc, #128]	; (80081a8 <_malloc_r+0xb0>)
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	b91b      	cbnz	r3, 8008134 <_malloc_r+0x3c>
 800812c:	4630      	mov	r0, r6
 800812e:	f000 f83d 	bl	80081ac <_sbrk_r>
 8008132:	6020      	str	r0, [r4, #0]
 8008134:	4629      	mov	r1, r5
 8008136:	4630      	mov	r0, r6
 8008138:	f000 f838 	bl	80081ac <_sbrk_r>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d124      	bne.n	800818a <_malloc_r+0x92>
 8008140:	230c      	movs	r3, #12
 8008142:	6033      	str	r3, [r6, #0]
 8008144:	4630      	mov	r0, r6
 8008146:	f000 f842 	bl	80081ce <__malloc_unlock>
 800814a:	e7e4      	b.n	8008116 <_malloc_r+0x1e>
 800814c:	680b      	ldr	r3, [r1, #0]
 800814e:	1b5b      	subs	r3, r3, r5
 8008150:	d418      	bmi.n	8008184 <_malloc_r+0x8c>
 8008152:	2b0b      	cmp	r3, #11
 8008154:	d90f      	bls.n	8008176 <_malloc_r+0x7e>
 8008156:	600b      	str	r3, [r1, #0]
 8008158:	50cd      	str	r5, [r1, r3]
 800815a:	18cc      	adds	r4, r1, r3
 800815c:	4630      	mov	r0, r6
 800815e:	f000 f836 	bl	80081ce <__malloc_unlock>
 8008162:	f104 000b 	add.w	r0, r4, #11
 8008166:	1d23      	adds	r3, r4, #4
 8008168:	f020 0007 	bic.w	r0, r0, #7
 800816c:	1ac3      	subs	r3, r0, r3
 800816e:	d0d3      	beq.n	8008118 <_malloc_r+0x20>
 8008170:	425a      	negs	r2, r3
 8008172:	50e2      	str	r2, [r4, r3]
 8008174:	e7d0      	b.n	8008118 <_malloc_r+0x20>
 8008176:	428c      	cmp	r4, r1
 8008178:	684b      	ldr	r3, [r1, #4]
 800817a:	bf16      	itet	ne
 800817c:	6063      	strne	r3, [r4, #4]
 800817e:	6013      	streq	r3, [r2, #0]
 8008180:	460c      	movne	r4, r1
 8008182:	e7eb      	b.n	800815c <_malloc_r+0x64>
 8008184:	460c      	mov	r4, r1
 8008186:	6849      	ldr	r1, [r1, #4]
 8008188:	e7cc      	b.n	8008124 <_malloc_r+0x2c>
 800818a:	1cc4      	adds	r4, r0, #3
 800818c:	f024 0403 	bic.w	r4, r4, #3
 8008190:	42a0      	cmp	r0, r4
 8008192:	d005      	beq.n	80081a0 <_malloc_r+0xa8>
 8008194:	1a21      	subs	r1, r4, r0
 8008196:	4630      	mov	r0, r6
 8008198:	f000 f808 	bl	80081ac <_sbrk_r>
 800819c:	3001      	adds	r0, #1
 800819e:	d0cf      	beq.n	8008140 <_malloc_r+0x48>
 80081a0:	6025      	str	r5, [r4, #0]
 80081a2:	e7db      	b.n	800815c <_malloc_r+0x64>
 80081a4:	20012aa4 	.word	0x20012aa4
 80081a8:	20012aa8 	.word	0x20012aa8

080081ac <_sbrk_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4c06      	ldr	r4, [pc, #24]	; (80081c8 <_sbrk_r+0x1c>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	4605      	mov	r5, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	f7fc fcae 	bl	8004b18 <_sbrk>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_sbrk_r+0x1a>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_sbrk_r+0x1a>
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20013c50 	.word	0x20013c50

080081cc <__malloc_lock>:
 80081cc:	4770      	bx	lr

080081ce <__malloc_unlock>:
 80081ce:	4770      	bx	lr

080081d0 <_init>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr

080081dc <_fini>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr
