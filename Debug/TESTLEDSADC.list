
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ed80  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080167e0  080167e0  00033f50  2**0
                  CONTENTS
  4 .ARM          00000008  080167e0  080167e0  000267e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080167e8  080167e8  00033f50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080167e8  080167e8  000267e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080167ec  080167ec  000267ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080167f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00003ecc  20000084  08016874  00030084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000fcd0  20003f50  0801a740  00033f50  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013c20  0801a740  00043c20  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00033f50  2**0
                  CONTENTS, READONLY
 13 .debug_info   000229f1  00000000  00000000  00033f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000585f  00000000  00000000  00056971  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000ad3f  00000000  00000000  0005c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000012a0  00000000  00000000  00066f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  000681b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024dd8  00000000  00000000  00069a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00015942  00000000  00000000  0008e848  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c3cd8  00000000  00000000  000a418a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f4  00000000  00000000  00167e62  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000039b4  00000000  00000000  00167f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20003f50 	.word	0x20003f50
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a48 	.word	0x08007a48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20003f54 	.word	0x20003f54
 80001c4:	08007a48 	.word	0x08007a48

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <MagicFX>:
//}

/*-----------------------------------------------------------------------------*/
void MagicFX(uint8_t val) /* random effects parameters */
{
	if (val == MIDI_MAXi)
 8000e14:	287f      	cmp	r0, #127	; 0x7f
{
 8000e16:	b510      	push	{r4, lr}
 8000e18:	4604      	mov	r4, r0
	if (val == MIDI_MAXi)
 8000e1a:	d13d      	bne.n	8000e98 <MagicFX+0x84>
	{
		Delay_switch(MIDI_MAXi);
 8000e1c:	f002 ffc0 	bl	8003da0 <Delay_switch>
		Delay_time_set(MIDIrandVal());
 8000e20:	f002 fbe8 	bl	80035f4 <MIDIrandVal>
 8000e24:	f001 fa14 	bl	8002250 <Delay_time_set>
		DelayWet_set(MIDIrandVal());
 8000e28:	f002 fbe4 	bl	80035f4 <MIDIrandVal>
 8000e2c:	f001 fa4a 	bl	80022c4 <DelayWet_set>
		DelayFeedback_set(MIDIrandVal());
 8000e30:	f002 fbe0 	bl	80035f4 <MIDIrandVal>
 8000e34:	f001 fa36 	bl	80022a4 <DelayFeedback_set>

		Chorus_switch(MIDI_MAXi);
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f002 ffc7 	bl	8003dcc <Chorus_switch>
		ChorusRate_set(MIDIrandVal());
 8000e3e:	f002 fbd9 	bl	80035f4 <MIDIrandVal>
 8000e42:	f001 f82b 	bl	8001e9c <ChorusRate_set>
		ChorusSecondRate_set(MIDIrandVal());
 8000e46:	f002 fbd5 	bl	80035f4 <MIDIrandVal>
 8000e4a:	f001 f845 	bl	8001ed8 <ChorusSecondRate_set>
		ChorusDelay_set(MIDIrandVal());
 8000e4e:	f002 fbd1 	bl	80035f4 <MIDIrandVal>
 8000e52:	f001 f85f 	bl	8001f14 <ChorusDelay_set>
		ChorusSweep_set(MIDIrandVal());
 8000e56:	f002 fbcd 	bl	80035f4 <MIDIrandVal>
 8000e5a:	f001 f88d 	bl	8001f78 <ChorusSweep_set>
		ChorusFeedback_set(MIDIrandVal());
 8000e5e:	f002 fbc9 	bl	80035f4 <MIDIrandVal>
 8000e62:	f001 f86d 	bl	8001f40 <ChorusFeedback_set>
		ChorusMode_switch(MIDIrandVal());
 8000e66:	f002 fbc5 	bl	80035f4 <MIDIrandVal>
 8000e6a:	f001 f897 	bl	8001f9c <ChorusMode_switch>
		ChorusFDBsign_switch(MIDIrandVal());
 8000e6e:	f002 fbc1 	bl	80035f4 <MIDIrandVal>
 8000e72:	f001 f8a7 	bl	8001fc4 <ChorusFDBsign_switch>

		Phaser_switch(MIDI_MAXi);
 8000e76:	4620      	mov	r0, r4
 8000e78:	f002 ffb2 	bl	8003de0 <Phaser_switch>
		Phaser_Rate_set(MIDIrandVal());
 8000e7c:	f002 fbba 	bl	80035f4 <MIDIrandVal>
 8000e80:	f002 fad4 	bl	800342c <Phaser_Rate_set>
		Phaser_Feedback_set(MIDIrandVal());
 8000e84:	f002 fbb6 	bl	80035f4 <MIDIrandVal>
 8000e88:	f002 faf0 	bl	800346c <Phaser_Feedback_set>
		Phaser_Wet_set(MIDIrandVal());
 8000e8c:	f002 fbb2 	bl	80035f4 <MIDIrandVal>
	}
}
 8000e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Phaser_Wet_set(MIDIrandVal());
 8000e94:	f002 bb00 	b.w	8003498 <Phaser_Wet_set>
}
 8000e98:	bd10      	pop	{r4, pc}
	...

08000e9c <MagicPatch>:
/*-----------------------------------------------------------------------------*/
void MagicPatch(uint8_t val) /* random sound parameters */
{
	if (val == MIDI_MAXi)
 8000e9c:	287f      	cmp	r0, #127	; 0x7f
{
 8000e9e:	b508      	push	{r3, lr}
	if (val == MIDI_MAXi)
 8000ea0:	f040 80bb 	bne.w	800101a <MagicPatch+0x17e>
	{
		seq_tempo_set(MIDIrandVal());
 8000ea4:	f002 fba6 	bl	80035f4 <MIDIrandVal>
 8000ea8:	f002 fd98 	bl	80039dc <seq_tempo_set>
		seq_freqMax_set(MIDIrandVal());
 8000eac:	f002 fba2 	bl	80035f4 <MIDIrandVal>
 8000eb0:	f002 fe26 	bl	8003b00 <seq_freqMax_set>
		seq_scale_set(MIDIrandVal());
 8000eb4:	f002 fb9e 	bl	80035f4 <MIDIrandVal>
 8000eb8:	f002 fdec 	bl	8003a94 <seq_scale_set>
		seq_switchMovingSeq(MIDIrandVal());
 8000ebc:	f002 fb9a 	bl	80035f4 <MIDIrandVal>
 8000ec0:	f002 fe06 	bl	8003ad0 <seq_switchMovingSeq>
		seq_switchMute(MIDIrandVal());
 8000ec4:	f002 fb96 	bl	80035f4 <MIDIrandVal>
 8000ec8:	f002 fe0c 	bl	8003ae4 <seq_switchMute>
		seq_gateTime_set(MIDIrandVal());
 8000ecc:	f002 fb92 	bl	80035f4 <MIDIrandVal>
 8000ed0:	f002 fda8 	bl	8003a24 <seq_gateTime_set>
		autoSound_set(rand() % 3);
 8000ed4:	f005 faf0 	bl	80064b8 <rand>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	fb90 f3f3 	sdiv	r3, r0, r3
 8000ede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ee2:	1ac0      	subs	r0, r0, r3
 8000ee4:	b240      	sxtb	r0, r0
 8000ee6:	f002 fecf 	bl	8003c88 <autoSound_set>
		Sound_set(MIDIrandVal());
 8000eea:	f002 fb83 	bl	80035f4 <MIDIrandVal>
 8000eee:	f002 ff81 	bl	8003df4 <Sound_set>
		uint8_t snd = soundNumber_get();
 8000ef2:	f002 fecf 	bl	8003c94 <soundNumber_get>

		if (snd == FM2)
 8000ef6:	280e      	cmp	r0, #14
 8000ef8:	d17c      	bne.n	8000ff4 <MagicPatch+0x158>
		{
			FM_OP1_freq_set(MIDIrandVal());
 8000efa:	f002 fb7b 	bl	80035f4 <MIDIrandVal>
 8000efe:	f002 ff9b 	bl	8003e38 <FM_OP1_freq_set>
			FM_OP1_modInd_set(MIDIrandVal());
 8000f02:	f002 fb77 	bl	80035f4 <MIDIrandVal>
 8000f06:	f002 ff9d 	bl	8003e44 <FM_OP1_modInd_set>
			FM_OP2_freq_set(MIDIrandVal());
 8000f0a:	f002 fb73 	bl	80035f4 <MIDIrandVal>
 8000f0e:	f002 ff9f 	bl	8003e50 <FM_OP2_freq_set>
			FM_OP2_modInd_set(MIDIrandVal());
 8000f12:	f002 fb6f 	bl	80035f4 <MIDIrandVal>
 8000f16:	f002 ffad 	bl	8003e74 <FM_OP2_modInd_set>
			FM_OP3_freq_set(MIDIrandVal());
 8000f1a:	f002 fb6b 	bl	80035f4 <MIDIrandVal>
 8000f1e:	f002 ffaf 	bl	8003e80 <FM_OP3_freq_set>
			FM_OP3_modInd_set(MIDIrandVal());
 8000f22:	f002 fb67 	bl	80035f4 <MIDIrandVal>
 8000f26:	f002 ffbd 	bl	8003ea4 <FM_OP3_modInd_set>
			FM_OP4_freq_set(MIDIrandVal());
 8000f2a:	f002 fb63 	bl	80035f4 <MIDIrandVal>
 8000f2e:	f002 ffbf 	bl	8003eb0 <FM_OP4_freq_set>
			FM_OP4_modInd_set(MIDIrandVal());
 8000f32:	f002 fb5f 	bl	80035f4 <MIDIrandVal>
 8000f36:	f002 ffcd 	bl	8003ed4 <FM_OP4_modInd_set>
			Drifter_minFreq_set(MIDIrandVal());
			Drifter_maxFreq_set(MIDIrandVal());
			Drifter_centralFreq_set(MIDIrandVal());
		}

		Filter1Freq_set(MIDIrandVal());
 8000f3a:	f002 fb5b 	bl	80035f4 <MIDIrandVal>
 8000f3e:	f002 fbe7 	bl	8003710 <Filter1Freq_set>
		Filter1Res_set(MIDIrandVal());
 8000f42:	f002 fb57 	bl	80035f4 <MIDIrandVal>
 8000f46:	f002 fc01 	bl	800374c <Filter1Res_set>
		Filter1Drive_set(MIDIrandVal());
 8000f4a:	f002 fb53 	bl	80035f4 <MIDIrandVal>
 8000f4e:	f002 fc0d 	bl	800376c <Filter1Drive_set>
		Filter1Type_set(MIDIrandVal());
 8000f52:	f002 fb4f 	bl	80035f4 <MIDIrandVal>
 8000f56:	f002 fc0f 	bl	8003778 <Filter1Type_set>
		Filt1LFO_amp_set(MIDIrandVal());
 8000f5a:	f002 fb4b 	bl	80035f4 <MIDIrandVal>
 8000f5e:	f002 febf 	bl	8003ce0 <Filt1LFO_amp_set>
		Filt1LFO_freq_set(MIDIrandVal());
 8000f62:	f002 fb47 	bl	80035f4 <MIDIrandVal>
 8000f66:	f002 fecb 	bl	8003d00 <Filt1LFO_freq_set>

		Filter2Freq_set(MIDIrandVal());
 8000f6a:	f002 fb43 	bl	80035f4 <MIDIrandVal>
 8000f6e:	f002 fc17 	bl	80037a0 <Filter2Freq_set>
		Filter2Res_set(MIDIrandVal());
 8000f72:	f002 fb3f 	bl	80035f4 <MIDIrandVal>
 8000f76:	f002 fc31 	bl	80037dc <Filter2Res_set>
		Filter2Drive_set(MIDIrandVal());
 8000f7a:	f002 fb3b 	bl	80035f4 <MIDIrandVal>
 8000f7e:	f002 fc3d 	bl	80037fc <Filter2Drive_set>
		Filter2Type_set(MIDIrandVal());
 8000f82:	f002 fb37 	bl	80035f4 <MIDIrandVal>
 8000f86:	f002 fc3f 	bl	8003808 <Filter2Type_set>
		Filt2LFO_amp_set(MIDIrandVal());
 8000f8a:	f002 fb33 	bl	80035f4 <MIDIrandVal>
 8000f8e:	f002 fec7 	bl	8003d20 <Filt2LFO_amp_set>
		Filt2LFO_freq_set(MIDIrandVal());
 8000f92:	f002 fb2f 	bl	80035f4 <MIDIrandVal>
 8000f96:	f002 fed3 	bl	8003d40 <Filt2LFO_freq_set>

		Filter_Random_switch(MIDIrandVal());
 8000f9a:	f002 fb2b 	bl	80035f4 <MIDIrandVal>
 8000f9e:	f002 ff0b 	bl	8003db8 <Filter_Random_switch>

		AttTime_set((uint8_t)lrintf(frand_a_b(0, MIDI_MAX / 10)));
 8000fa2:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800101c <MagicPatch+0x180>
 8000fa6:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001020 <MagicPatch+0x184>
 8000faa:	f002 fb0d 	bl	80035c8 <frand_a_b>
 8000fae:	f005 fb6d 	bl	800668c <lrintf>
 8000fb2:	b2c0      	uxtb	r0, r0
 8000fb4:	f000 f85c 	bl	8001070 <AttTime_set>
		DecTime_set(MIDIrandVal());
 8000fb8:	f002 fb1c 	bl	80035f4 <MIDIrandVal>
 8000fbc:	f000 f878 	bl	80010b0 <DecTime_set>
		SustLevel_set(MIDIrandVal());
 8000fc0:	f002 fb18 	bl	80035f4 <MIDIrandVal>
 8000fc4:	f000 f8a8 	bl	8001118 <SustLevel_set>
		RelTime_set(MIDIrandVal());
 8000fc8:	f002 fb14 	bl	80035f4 <MIDIrandVal>
 8000fcc:	f000 f8b4 	bl	8001138 <RelTime_set>

		VibratoAmp_set(MIDIrandVal());
 8000fd0:	f002 fb10 	bl	80035f4 <MIDIrandVal>
 8000fd4:	f002 fec4 	bl	8003d60 <VibratoAmp_set>
		VibratoFreq_set(MIDIrandVal());
 8000fd8:	f002 fb0c 	bl	80035f4 <MIDIrandVal>
 8000fdc:	f002 fed0 	bl	8003d80 <VibratoFreq_set>

		AmpLFO_amp_set(MIDIrandVal());
 8000fe0:	f002 fb08 	bl	80035f4 <MIDIrandVal>
 8000fe4:	f002 fe5c 	bl	8003ca0 <AmpLFO_amp_set>
		AmpLFO_freq_set(MIDIrandVal());
 8000fe8:	f002 fb04 	bl	80035f4 <MIDIrandVal>
	}
}
 8000fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		AmpLFO_freq_set(MIDIrandVal());
 8000ff0:	f002 be66 	b.w	8003cc0 <AmpLFO_freq_set>
		else if (snd == DRIFTERS)
 8000ff4:	280d      	cmp	r0, #13
 8000ff6:	d1a0      	bne.n	8000f3a <MagicPatch+0x9e>
			Drifter_amp_set(MIDIrandVal());
 8000ff8:	f002 fafc 	bl	80035f4 <MIDIrandVal>
 8000ffc:	f001 f9ce 	bl	800239c <Drifter_amp_set>
			Drifter_minFreq_set(MIDIrandVal());
 8001000:	f002 faf8 	bl	80035f4 <MIDIrandVal>
 8001004:	f001 f9e0 	bl	80023c8 <Drifter_minFreq_set>
			Drifter_maxFreq_set(MIDIrandVal());
 8001008:	f002 faf4 	bl	80035f4 <MIDIrandVal>
 800100c:	f001 f9f8 	bl	8002400 <Drifter_maxFreq_set>
			Drifter_centralFreq_set(MIDIrandVal());
 8001010:	f002 faf0 	bl	80035f4 <MIDIrandVal>
 8001014:	f001 fcf6 	bl	8002a04 <Drifter_centralFreq_set>
 8001018:	e78f      	b.n	8000f3a <MagicPatch+0x9e>
}
 800101a:	bd08      	pop	{r3, pc}
 800101c:	414b3333 	.word	0x414b3333
 8001020:	00000000 	.word	0x00000000

08001024 <ADSR_init>:

/*---------------------------------------------------------------------------*/

void ADSR_init(ADSR_t *env)
{
  env->target_ = 0.0;
 8001024:	2300      	movs	r3, #0
 8001026:	6183      	str	r3, [r0, #24]
  env->value_ = 0.0;
 8001028:	6103      	str	r3, [r0, #16]
  env->attackRate_ = 0.001;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <ADSR_init+0x20>)
 800102c:	6003      	str	r3, [r0, #0]
  env->decayRate_ = 0.001;
 800102e:	6043      	str	r3, [r0, #4]
  env->sustainLevel_ = 0.5;
 8001030:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001034:	6083      	str	r3, [r0, #8]
  env->releaseRate_ = 0.01;
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <ADSR_init+0x24>)
 8001038:	60c3      	str	r3, [r0, #12]
  env->state_ = ATTACK;
 800103a:	2300      	movs	r3, #0
  env->cnt_ = 0;
 800103c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  //env->gateTime_ = 10000;
}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	3a83126f 	.word	0x3a83126f
 8001048:	3c23d70a 	.word	0x3c23d70a

0800104c <ADSR_keyOn>:

void ADSR_keyOn(ADSR_t *env)
{
	env->cnt_ = 0;
	env->target_ = 1.0f;
 800104c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	env->cnt_ = 0;
 8001050:	2300      	movs	r3, #0
	env->target_ = 1.0f;
 8001052:	6182      	str	r2, [r0, #24]
	env->rate_ = 	env->attackRate_;
 8001054:	6802      	ldr	r2, [r0, #0]
	env->cnt_ = 0;
 8001056:	6243      	str	r3, [r0, #36]	; 0x24
	env->rate_ = 	env->attackRate_;
 8001058:	61c2      	str	r2, [r0, #28]
	env->state_ = ATTACK;
 800105a:	6203      	str	r3, [r0, #32]
}
 800105c:	4770      	bx	lr

0800105e <ADSR_keyOff>:

void ADSR_keyOff(ADSR_t *env)
{
	env->cnt_ = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	6243      	str	r3, [r0, #36]	; 0x24
	env->target_ = 0.0;
 8001062:	2300      	movs	r3, #0
 8001064:	6183      	str	r3, [r0, #24]
	env->rate_ = 	env->releaseRate_;
 8001066:	68c3      	ldr	r3, [r0, #12]
 8001068:	61c3      	str	r3, [r0, #28]
	env->state_ = RELEASE;
 800106a:	2303      	movs	r3, #3
 800106c:	6203      	str	r3, [r0, #32]
}
 800106e:	4770      	bx	lr

08001070 <AttTime_set>:
  return env->state_;
}

void AttTime_set(uint8_t val)
{
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 8001070:	ee07 0a90 	vmov	s15, r0
 8001074:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80010a0 <AttTime_set+0x30>
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <AttTime_set+0x34>)
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 800107a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800107e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001082:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010a8 <AttTime_set+0x38>
 8001086:	ee77 7a87 	vadd.f32	s15, s15, s14
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 800108a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80010ac <AttTime_set+0x3c>
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800109a:	ed83 7a00 	vstr	s14, [r3]
}
 800109e:	4770      	bx	lr
 80010a0:	42fe0000 	.word	0x42fe0000
 80010a4:	20000084 	.word	0x20000084
 80010a8:	38d1b717 	.word	0x38d1b717
 80010ac:	472c4400 	.word	0x472c4400

080010b0 <DecTime_set>:
void DecTime_set(uint8_t val)
{
 80010b0:	b508      	push	{r3, lr}
	ADSR_setDecayTime(&adsr, .2*val/MIDI_MAX + 0.0001f);
 80010b2:	f7ff f9db 	bl	800046c <__aeabi_i2d>
 80010b6:	a312      	add	r3, pc, #72	; (adr r3, 8001100 <DecTime_set+0x50>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa40 	bl	8000540 <__aeabi_dmul>
 80010c0:	a311      	add	r3, pc, #68	; (adr r3, 8001108 <DecTime_set+0x58>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fb65 	bl	8000794 <__aeabi_ddiv>
 80010ca:	a311      	add	r3, pc, #68	; (adr r3, 8001110 <DecTime_set+0x60>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff f880 	bl	80001d4 <__adddf3>
 80010d4:	f7ff fcce 	bl	8000a74 <__aeabi_d2f>
	env->decayRate_ = 1.0 / ( time * SAMPLERATE );
 80010d8:	eddf 7a07 	vldr	s15, [pc, #28]	; 80010f8 <DecTime_set+0x48>
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <DecTime_set+0x4c>)
 80010de:	ee07 0a10 	vmov	s14, r0
 80010e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010ee:	ed83 7a01 	vstr	s14, [r3, #4]
}
 80010f2:	bd08      	pop	{r3, pc}
 80010f4:	f3af 8000 	nop.w
 80010f8:	472c4400 	.word	0x472c4400
 80010fc:	20000084 	.word	0x20000084
 8001100:	9999999a 	.word	0x9999999a
 8001104:	3fc99999 	.word	0x3fc99999
 8001108:	00000000 	.word	0x00000000
 800110c:	405fc000 	.word	0x405fc000
 8001110:	e0000000 	.word	0xe0000000
 8001114:	3f1a36e2 	.word	0x3f1a36e2

08001118 <SustLevel_set>:
void SustLevel_set(uint8_t val)
{
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 8001118:	ee07 0a90 	vmov	s15, r0
 800111c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001130 <SustLevel_set+0x18>
	env->sustainLevel_ = level;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SustLevel_set+0x1c>)
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 8001122:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001126:	eec6 7a87 	vdiv.f32	s15, s13, s14
	env->sustainLevel_ = level;
 800112a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800112e:	4770      	bx	lr
 8001130:	42fe0000 	.word	0x42fe0000
 8001134:	20000084 	.word	0x20000084

08001138 <RelTime_set>:
void RelTime_set(uint8_t val)
{
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 8001138:	ee06 0a90 	vmov	s13, r0
 800113c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001168 <RelTime_set+0x30>
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <RelTime_set+0x34>)
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 8001142:	eefa 6aef 	vcvt.f32.s32	s13, s13, #1
 8001146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001170 <RelTime_set+0x38>
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 800114e:	edd3 6a02 	vldr	s13, [r3, #8]
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 8001152:	ee77 7a87 	vadd.f32	s15, s15, s14
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 8001156:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001174 <RelTime_set+0x3c>
 800115a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001162:	ed83 7a03 	vstr	s14, [r3, #12]
}
 8001166:	4770      	bx	lr
 8001168:	42fe0000 	.word	0x42fe0000
 800116c:	20000084 	.word	0x20000084
 8001170:	38d1b717 	.word	0x38d1b717
 8001174:	472c4400 	.word	0x472c4400

08001178 <ADSR_computeSample>:
/*--------------------------------------------------------------------------------------*/
float ADSR_computeSample(ADSR_t *env)
{
	(env->cnt_)++;
 8001178:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800117a:	edd0 7a04 	vldr	s15, [r0, #16]
 800117e:	3301      	adds	r3, #1
 8001180:	6243      	str	r3, [r0, #36]	; 0x24

	switch (env->state_) {
 8001182:	6a03      	ldr	r3, [r0, #32]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d018      	beq.n	80011ba <ADSR_computeSample+0x42>
 8001188:	2b03      	cmp	r3, #3
 800118a:	d029      	beq.n	80011e0 <ADSR_computeSample+0x68>
 800118c:	bb9b      	cbnz	r3, 80011f6 <ADSR_computeSample+0x7e>

  case ATTACK:
	  env->value_ += env->rate_;
 800118e:	ed90 7a07 	vldr	s14, [r0, #28]
 8001192:	ee77 7a87 	vadd.f32	s15, s15, s14
    if (env->value_ >= env->target_)
 8001196:	ed90 7a06 	vldr	s14, [r0, #24]
	  env->value_ += env->rate_;
 800119a:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ >= env->target_)
 800119e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	db26      	blt.n	80011f6 <ADSR_computeSample+0x7e>
    {
    	env->value_ = env->target_;
    	env->rate_ = env->decayRate_;
 80011a8:	6843      	ldr	r3, [r0, #4]
 80011aa:	61c3      	str	r3, [r0, #28]
    	env->target_ = env->sustainLevel_;
 80011ac:	6883      	ldr	r3, [r0, #8]
 80011ae:	6183      	str	r3, [r0, #24]
    	env->value_ = env->target_;
 80011b0:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->state_ = DECAY;
 80011b4:	2301      	movs	r3, #1
  case RELEASE:
	  env->value_ -= env->releaseRate_;
    if (env->value_ <= 0.0f)
    {
    	env->value_ =  0.0f;
    	env->state_ = DONE;
 80011b6:	6203      	str	r3, [r0, #32]
 80011b8:	e01d      	b.n	80011f6 <ADSR_computeSample+0x7e>
	  env->value_ -= env->decayRate_;
 80011ba:	ed90 7a01 	vldr	s14, [r0, #4]
 80011be:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (env->value_ <= env->sustainLevel_)
 80011c2:	ed90 7a02 	vldr	s14, [r0, #8]
	  env->value_ -= env->decayRate_;
 80011c6:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ <= env->sustainLevel_)
 80011ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	d810      	bhi.n	80011f6 <ADSR_computeSample+0x7e>
    	env->rate_ = 0.0f;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61c3      	str	r3, [r0, #28]
    	env->value_ = env->sustainLevel_;
 80011d8:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->state_ = SUSTAIN;
 80011dc:	2302      	movs	r3, #2
 80011de:	e7ea      	b.n	80011b6 <ADSR_computeSample+0x3e>
	  env->value_ -= env->releaseRate_;
 80011e0:	ed90 7a03 	vldr	s14, [r0, #12]
 80011e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (env->value_ <= 0.0f)
 80011e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d906      	bls.n	8001200 <ADSR_computeSample+0x88>
	  env->value_ -= env->releaseRate_;
 80011f2:	edc0 7a04 	vstr	s15, [r0, #16]
    }
  }

  env->lastOutput_ = env->value_;
 80011f6:	ed90 0a04 	vldr	s0, [r0, #16]
 80011fa:	ed80 0a05 	vstr	s0, [r0, #20]
  return env->value_;
}
 80011fe:	4770      	bx	lr
    	env->value_ =  0.0f;
 8001200:	2300      	movs	r3, #0
 8001202:	6103      	str	r3, [r0, #16]
    	env->state_ = DONE;
 8001204:	2304      	movs	r3, #4
 8001206:	e7d6      	b.n	80011b6 <ADSR_computeSample+0x3e>

08001208 <place_step_dd>:

/**======================================================================================================**/


void place_step_dd(float *buffer, int index, float phase, float w, float scale)
{
 8001208:	b538      	push	{r3, r4, r5, lr}
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 800120a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8001274 <place_step_dd+0x6c>
 800120e:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8001212:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
 8001216:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
 800121a:	4604      	mov	r4, r0
 800121c:	460d      	mov	r5, r1
	i = lrintf(r - 0.5f);
 800121e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001222:	ee38 0a40 	vsub.f32	s0, s16, s0
{
 8001226:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
 800122a:	f005 fa2f 	bl	800668c <lrintf>
	r -= (float)i;
 800122e:	ee07 0a90 	vmov	s15, r0
 8001232:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <place_step_dd+0x70>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8001238:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 800123c:	ee38 8a60 	vsub.f32	s16, s16, s1
 8001240:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8001244:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	 *    index++;
	 *  }
	 */

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 8001248:	edd3 6a00 	vldr	s13, [r3]
 800124c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8001250:	edd1 7a00 	vldr	s15, [r1]
 8001254:	eea6 7a88 	vfma.f32	s14, s13, s16
		i += MINBLEP_PHASES;
 8001258:	3040      	adds	r0, #64	; 0x40
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 800125a:	f5b0 5f90 	cmp.w	r0, #4608	; 0x1200
 800125e:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 8001262:	eee7 7a28 	vfma.f32	s15, s14, s17
 8001266:	ece1 7a01 	vstmia	r1!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 800126a:	dbed      	blt.n	8001248 <place_step_dd+0x40>
		index++;
	}
}
 800126c:	ecbd 8b02 	vpop	{d8}
 8001270:	bd38      	pop	{r3, r4, r5, pc}
 8001272:	bf00      	nop
 8001274:	42800000 	.word	0x42800000
 8001278:	0800c17c 	.word	0x0800c17c

0800127c <place_slope_dd>:
//----------------------------------------------------------------------------------------------------------

void place_slope_dd(float *buffer, int index, float phase, float w, float slope_delta)
{
 800127c:	b538      	push	{r3, r4, r5, lr}
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 800127e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80012f4 <place_slope_dd+0x78>
 8001282:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8001286:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
 800128a:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
 800128e:	4604      	mov	r4, r0
 8001290:	460d      	mov	r5, r1
	i = lrintf(r - 0.5f);
 8001292:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001296:	ee38 0ac0 	vsub.f32	s0, s17, s0
{
 800129a:	eeb0 8a60 	vmov.f32	s16, s1
 800129e:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
 80012a2:	f005 f9f3 	bl	800668c <lrintf>
	r -= (float)i;
 80012a6:	ee07 0a90 	vmov	s15, r0
 80012aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <place_slope_dd+0x7c>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80012b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80012b4:	ee78 8ae7 	vsub.f32	s17, s17, s15

	slope_delta *= w;
 80012b8:	ee28 8a09 	vmul.f32	s16, s16, s18
 80012bc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80012c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80012cc:	ed91 7a00 	vldr	s14, [r1]
 80012d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
		i += MINBLEP_PHASES;
 80012d4:	3040      	adds	r0, #64	; 0x40
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80012d6:	eee6 7aa8 	vfma.f32	s15, s13, s17
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 80012da:	f5b0 5f8e 	cmp.w	r0, #4544	; 0x11c0
 80012de:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80012e2:	eea7 7a88 	vfma.f32	s14, s15, s16
 80012e6:	eca1 7a01 	vstmia	r1!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 80012ea:	dbeb      	blt.n	80012c4 <place_slope_dd+0x48>
		index++;
	}
}
 80012ec:	ecbd 8b04 	vpop	{d8-d9}
 80012f0:	bd38      	pop	{r3, r4, r5, pc}
 80012f2:	bf00      	nop
 80012f4:	42800000 	.word	0x42800000
 80012f8:	08007a74 	.word	0x08007a74

080012fc <VCO_blepsaw_Init>:

/* ==== hard-sync-capable sawtooth oscillator ==== */

void VCO_blepsaw_Init(VCO_blepsaw_t *vco)
{
	vco->_init = true;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f880 3548 	strb.w	r3, [r0, #1352]	; 0x548
	vco->amp = 1.0f;
 8001302:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001306:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <VCO_blepsaw_Init+0x28>)
 800130a:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 800130c:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 800130e:	2300      	movs	r3, #0
 8001310:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001312:	6203      	str	r3, [r0, #32]
	vco->_j = 0;
 8001314:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001318:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800131c:	3024      	adds	r0, #36	; 0x24
 800131e:	f005 b8c2 	b.w	80064a6 <memset>
 8001322:	bf00      	nop
 8001324:	43dc0000 	.word	0x43dc0000

08001328 <VCO_blepsaw_SampleCompute>:
}

//----------------------------------------------------------------------------------------------------------

float VCO_blepsaw_SampleCompute(VCO_blepsaw_t *vco)
{
 8001328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132a:	ed90 7a03 	vldr	s14, [r0, #12]
 800132e:	eddf 7a6a 	vldr	s15, [pc, #424]	; 80014d8 <VCO_blepsaw_SampleCompute+0x1b0>
	freq = vco->freq;

	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 8001332:	f8d0 5544 	ldr.w	r5, [r0, #1348]	; 0x544
{
 8001336:	ed2d 8b06 	vpush	{d8-d10}
 800133a:	ee87 9a27 	vdiv.f32	s18, s14, s15
 800133e:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001340:	edd0 aa04 	vldr	s21, [r0, #16]
	z = vco->_z;  /* low pass filter state */
 8001344:	edd0 9a08 	vldr	s19, [r0, #32]
 8001348:	ee19 0a10 	vmov	r0, s18
 800134c:	f7ff f8a0 	bl	8000490 <__aeabi_f2d>

	if (vco->_init) {
 8001350:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
 8001354:	4606      	mov	r6, r0
 8001356:	460f      	mov	r7, r1
 8001358:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800135c:	2b00      	cmp	r3, #0
 800135e:	d17f      	bne.n	8001460 <VCO_blepsaw_SampleCompute+0x138>
	p = vco->_p;  /* phase [0, 1) */
 8001360:	ed94 8a06 	vldr	s16, [r4, #24]
	w = vco->_w;  /* phase increment */
 8001364:	edd4 8a07 	vldr	s17, [r4, #28]

	//a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8001368:	a359      	add	r3, pc, #356	; (adr r3, 80014d0 <VCO_blepsaw_SampleCompute+0x1a8>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	4630      	mov	r0, r6
 8001370:	4639      	mov	r1, r7
 8001372:	f7ff fb57 	bl	8000a24 <__aeabi_dcmplt>
 8001376:	2800      	cmp	r0, #0
 8001378:	f040 808a 	bne.w	8001490 <VCO_blepsaw_SampleCompute+0x168>
	if (t > 0.5) t = 0.5;
 800137c:	eeb4 9a4a 	vcmp.f32	s18, s20
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001388:	bfc8      	it	gt
 800138a:	eeb0 9a67 	vmovgt.f32	s18, s15
	dw = (t - w); // n= 1
 800138e:	ee39 9a68 	vsub.f32	s18, s18, s17
	w += dw;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 8001392:	eddf 7a52 	vldr	s15, [pc, #328]	; 80014dc <VCO_blepsaw_SampleCompute+0x1b4>
	w += dw;
 8001396:	ee78 8a89 	vadd.f32	s17, s17, s18
	if (syncin >= 1e-20f) {  /* sync to master */
 800139a:	eef4 aae7 	vcmpe.f32	s21, s15
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	p += w;
 80013a2:	ee38 8a28 	vadd.f32	s16, s16, s17
 80013a6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	if (syncin >= 1e-20f) {  /* sync to master */
 80013aa:	db74      	blt.n	8001496 <VCO_blepsaw_SampleCompute+0x16e>

		float eof_offset = (syncin - 1e-20f) * w;
 80013ac:	ee3a 9ae7 	vsub.f32	s18, s21, s15
 80013b0:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80013b4:	ee29 9a28 	vmul.f32	s18, s18, s17
		float p_at_reset = p - eof_offset;
 80013b8:	ee38 8a49 	vsub.f32	s16, s16, s18
		p = eof_offset;

		/* place any DD that may have occurred in subsample before reset */
		if (p_at_reset >= 1.0f) {
 80013bc:	eeb4 8ac1 	vcmpe.f32	s16, s2
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	db09      	blt.n	80013da <VCO_blepsaw_SampleCompute+0xb2>
			p_at_reset -= 1.0f;
 80013c6:	ee38 8a41 	vsub.f32	s16, s16, s2
			place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 80013ca:	eef0 0a68 	vmov.f32	s1, s17
 80013ce:	ee39 0a08 	vadd.f32	s0, s18, s16
 80013d2:	4629      	mov	r1, r5
 80013d4:	4630      	mov	r0, r6
 80013d6:	f7ff ff17 	bl	8001208 <place_step_dd>
		}

		/* now place reset DD */
		place_step_dd(vco->_f, j, p, w, p_at_reset);
 80013da:	eeb0 1a48 	vmov.f32	s2, s16
 80013de:	eef0 0a68 	vmov.f32	s1, s17
 80013e2:	eeb0 0a49 	vmov.f32	s0, s18
 80013e6:	4629      	mov	r1, r5
 80013e8:	4630      	mov	r0, r6
 80013ea:	f7ff ff0d 	bl	8001208 <place_step_dd>

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 80013ee:	edc4 aa05 	vstr	s21, [r4, #20]
 80013f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2

	} else {

		vco->syncout = 0.0f;
	}
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 80013f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80013fa:	ee3a 7a49 	vsub.f32	s14, s20, s18

	z += a * (vco->_f[j] - z); // LP filtering
	vco->out = vco->amp * z;

	if (++j == FILLEN)
 80013fe:	3501      	adds	r5, #1
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 8001400:	ee77 7a87 	vadd.f32	s15, s15, s14
	if (++j == FILLEN)
 8001404:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 8001408:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	z += a * (vco->_f[j] - z); // LP filtering
 800140c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	vco->out = vco->amp * z;
 8001410:	ed94 8a01 	vldr	s16, [r4, #4]
	z += a * (vco->_f[j] - z); // LP filtering
 8001414:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8001418:	eee7 9a8a 	vfma.f32	s19, s15, s20
	vco->out = vco->amp * z;
 800141c:	ee29 8a88 	vmul.f32	s16, s19, s16
 8001420:	ed84 8a00 	vstr	s16, [r4]
	if (++j == FILLEN)
 8001424:	d10f      	bne.n	8001446 <VCO_blepsaw_SampleCompute+0x11e>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001426:	f44f 7290 	mov.w	r2, #288	; 0x120
 800142a:	f204 4124 	addw	r1, r4, #1060	; 0x424
 800142e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001432:	f005 f82d 	bl	8006490 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143a:	2100      	movs	r1, #0
 800143c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8001440:	f005 f831 	bl	80064a6 <memset>
		j = 0;
 8001444:	2500      	movs	r5, #0
	vco->_w = w;
	vco->_z = z;
	vco->_j = j;

	return vco->out;
}
 8001446:	eeb0 0a48 	vmov.f32	s0, s16
	vco->_p = p;
 800144a:	ed84 9a06 	vstr	s18, [r4, #24]
	vco->_w = w;
 800144e:	edc4 8a07 	vstr	s17, [r4, #28]
	vco->_z = z;
 8001452:	edc4 9a08 	vstr	s19, [r4, #32]
}
 8001456:	ecbd 8b06 	vpop	{d8-d10}
	vco->_j = j;
 800145a:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
}
 800145e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (w < 1e-5) w = 1e-5;
 8001460:	a31b      	add	r3, pc, #108	; (adr r3, 80014d0 <VCO_blepsaw_SampleCompute+0x1a8>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff fadd 	bl	8000a24 <__aeabi_dcmplt>
 800146a:	b970      	cbnz	r0, 800148a <VCO_blepsaw_SampleCompute+0x162>
		if (w > 0.5) w = 0.5;
 800146c:	eeb4 9aca 	vcmpe.f32	s18, s20
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		w = freq / SAMPLERATE;
 8001474:	bfd4      	ite	le
 8001476:	eef0 8a49 	vmovle.f32	s17, s18
 800147a:	eef0 8a4a 	vmovgt.f32	s17, s20
		vco->_init = false;
 800147e:	2300      	movs	r3, #0
 8001480:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		p = 0.5f;
 8001484:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001488:	e76e      	b.n	8001368 <VCO_blepsaw_SampleCompute+0x40>
		if (w < 1e-5) w = 1e-5;
 800148a:	eddf 8a15 	vldr	s17, [pc, #84]	; 80014e0 <VCO_blepsaw_SampleCompute+0x1b8>
 800148e:	e7f6      	b.n	800147e <VCO_blepsaw_SampleCompute+0x156>
	if (t < 1e-5) t = 1e-5;
 8001490:	ed9f 9a13 	vldr	s18, [pc, #76]	; 80014e0 <VCO_blepsaw_SampleCompute+0x1b8>
 8001494:	e77b      	b.n	800138e <VCO_blepsaw_SampleCompute+0x66>
	} else if (p >= 1.0f) {  /* normal phase reset */
 8001496:	eeb4 8ac1 	vcmpe.f32	s16, s2
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	db11      	blt.n	80014c4 <VCO_blepsaw_SampleCompute+0x19c>
		p -= 1.0f;
 80014a0:	ee38 9a41 	vsub.f32	s18, s16, s2
		place_step_dd(vco->_f, j, p, w, 1.0f);
 80014a4:	eef0 0a68 	vmov.f32	s1, s17
		vco->syncout = p / w + 1e-20f;
 80014a8:	ee89 7a28 	vdiv.f32	s14, s18, s17
		place_step_dd(vco->_f, j, p, w, 1.0f);
 80014ac:	4629      	mov	r1, r5
 80014ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80014b2:	eeb0 0a49 	vmov.f32	s0, s18
		vco->syncout = p / w + 1e-20f;
 80014b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ba:	edc4 7a05 	vstr	s15, [r4, #20]
		place_step_dd(vco->_f, j, p, w, 1.0f);
 80014be:	f7ff fea3 	bl	8001208 <place_step_dd>
 80014c2:	e796      	b.n	80013f2 <VCO_blepsaw_SampleCompute+0xca>
		vco->syncout = 0.0f;
 80014c4:	2300      	movs	r3, #0
 80014c6:	6163      	str	r3, [r4, #20]
	p += w;
 80014c8:	eeb0 9a48 	vmov.f32	s18, s16
 80014cc:	e791      	b.n	80013f2 <VCO_blepsaw_SampleCompute+0xca>
 80014ce:	bf00      	nop
 80014d0:	88e368f1 	.word	0x88e368f1
 80014d4:	3ee4f8b5 	.word	0x3ee4f8b5
 80014d8:	472c4400 	.word	0x472c4400
 80014dc:	1e3ce508 	.word	0x1e3ce508
 80014e0:	3727c5ac 	.word	0x3727c5ac

080014e4 <VCO_bleprect_Init>:
//----------------------------------------------------------------------------------------------------------
/* ==== variable-width, hard-sync-capable rectangular oscillator ==== */

void VCO_bleprect_Init(VCO_bleprect_t *vco)
{
	vco->_init = true;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f880 3558 	strb.w	r3, [r0, #1368]	; 0x558
	vco->amp = 1.0f;
 80014ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014ee:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <VCO_bleprect_Init+0x28>)
 80014f2:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 80014f4:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 80014f6:	2300      	movs	r3, #0
 80014f8:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 80014fa:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 80014fc:	62c3      	str	r3, [r0, #44]	; 0x2c
	vco->_j = 0;
 80014fe:	f8c0 1550 	str.w	r1, [r0, #1360]	; 0x550
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001502:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001506:	3030      	adds	r0, #48	; 0x30
 8001508:	f004 bfcd 	b.w	80064a6 <memset>
 800150c:	43dc0000 	.word	0x43dc0000

08001510 <VCO_bleprect_SampleCompute>:
}
////----------------------------------------------------------------------------------------------------------

float VCO_bleprect_SampleCompute(VCO_bleprect_t *vco)
{
 8001510:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001514:	ed90 7a03 	vldr	s14, [r0, #12]
 8001518:	eddf 7ae7 	vldr	s15, [pc, #924]	; 80018b8 <VCO_bleprect_SampleCompute+0x3a8>
	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	b = vco->_b;  /* duty cycle (0, 1) */
	x = vco->_x;  /* temporary output variable */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 800151c:	f8d0 5550 	ldr.w	r5, [r0, #1360]	; 0x550
{
 8001520:	ed2d 8b0a 	vpush	{d8-d12}
 8001524:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8001528:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 800152a:	ed90 ca05 	vldr	s24, [r0, #20]
	z = vco->_z;  /* low pass filter state */
 800152e:	ed90 ba0b 	vldr	s22, [r0, #44]	; 0x2c
 8001532:	ee19 0a90 	vmov	r0, s19
 8001536:	f7fe ffab 	bl	8000490 <__aeabi_f2d>
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
	//
	if (vco->_init) {
 800153a:	f894 3558 	ldrb.w	r3, [r4, #1368]	; 0x558
 800153e:	4680      	mov	r8, r0
 8001540:	4689      	mov	r9, r1
 8001542:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8001546:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 80d5 	bne.w	80016fa <VCO_bleprect_SampleCompute+0x1ea>
	p = vco->_p;  /* phase [0, 1) */
 8001550:	ed94 8a07 	vldr	s16, [r4, #28]
	w = vco->_w;  /* phase increment */
 8001554:	edd4 8a08 	vldr	s17, [r4, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001558:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
	x = vco->_x;  /* temporary output variable */
 800155c:	ed94 aa0a 	vldr	s20, [r4, #40]	; 0x28
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8001560:	f8d4 6554 	ldr.w	r6, [r4, #1364]	; 0x554
	//
	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8001564:	a3d2      	add	r3, pc, #840	; (adr r3, 80018b0 <VCO_bleprect_SampleCompute+0x3a0>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	4640      	mov	r0, r8
 800156c:	4649      	mov	r1, r9
 800156e:	f7ff fa59 	bl	8000a24 <__aeabi_dcmplt>
 8001572:	2800      	cmp	r0, #0
 8001574:	f040 80fb 	bne.w	800176e <VCO_bleprect_SampleCompute+0x25e>
	if (t > 0.5) t = 0.5;
 8001578:	eef4 9a6b 	vcmp.f32	s19, s23
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001584:	bfc8      	it	gt
 8001586:	eef0 9a67 	vmovgt.f32	s19, s15
	dw = (t - w) ;
	t = 0.5 * (1.0 + vco->waveform );
 800158a:	6920      	ldr	r0, [r4, #16]
 800158c:	f7fe ff80 	bl	8000490 <__aeabi_f2d>
 8001590:	2200      	movs	r2, #0
 8001592:	4bca      	ldr	r3, [pc, #808]	; (80018bc <VCO_bleprect_SampleCompute+0x3ac>)
 8001594:	f7fe fe1e 	bl	80001d4 <__adddf3>
 8001598:	2200      	movs	r2, #0
 800159a:	4bc9      	ldr	r3, [pc, #804]	; (80018c0 <VCO_bleprect_SampleCompute+0x3b0>)
 800159c:	f7fe ffd0 	bl	8000540 <__aeabi_dmul>
 80015a0:	f7ff fa68 	bl	8000a74 <__aeabi_d2f>
 80015a4:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 80015a8:	eef4 8a47 	vcmp.f32	s17, s14
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (t > 1.0f - w) t = 1.0f - w;
 80015b0:	ee7a 7ae8 	vsub.f32	s15, s21, s17
	if (t < w) t = w;
 80015b4:	bfc8      	it	gt
 80015b6:	eeb0 7a68 	vmovgt.f32	s14, s17
	dw = (t - w) ;
 80015ba:	ee79 9ae8 	vsub.f32	s19, s19, s17
	if (t > 1.0f - w) t = 1.0f - w;
 80015be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	db = (t - b) ;

	w += dw;
 80015c6:	ee78 8aa9 	vadd.f32	s17, s17, s19
	b += db;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 80015ca:	eddf 9abe 	vldr	s19, [pc, #760]	; 80018c4 <VCO_bleprect_SampleCompute+0x3b4>
	if (t > 1.0f - w) t = 1.0f - w;
 80015ce:	bf58      	it	pl
 80015d0:	eef0 7a47 	vmovpl.f32	s15, s14
	db = (t - b) ;
 80015d4:	ee77 7ac9 	vsub.f32	s15, s15, s18
	if (syncin >= 1e-20f) {  /* sync to master */
 80015d8:	eeb4 cae9 	vcmpe.f32	s24, s19
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	b += db;
 80015e0:	ee39 9a27 	vadd.f32	s18, s18, s15
	p += w;
 80015e4:	ee38 8a28 	vadd.f32	s16, s16, s17
 80015e8:	eef0 ca69 	vmov.f32	s25, s19
	if (syncin >= 1e-20f) {  /* sync to master */
 80015ec:	f2c0 80f0 	blt.w	80017d0 <VCO_bleprect_SampleCompute+0x2c0>
		//
		float eof_offset = (syncin - 1e-20f) * w;
 80015f0:	ee7c 9a69 	vsub.f32	s19, s24, s19
 80015f4:	ee69 9aa8 	vmul.f32	s19, s19, s17
		float p_at_reset = p - eof_offset;
 80015f8:	ee38 8a69 	vsub.f32	s16, s16, s19
		p = eof_offset;

		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 80015fc:	2e00      	cmp	r6, #0
 80015fe:	f040 80b9 	bne.w	8001774 <VCO_bleprect_SampleCompute+0x264>
			if (p_at_reset >= b) {
 8001602:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	f200 8149 	bhi.w	80018a0 <VCO_bleprect_SampleCompute+0x390>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 800160e:	ee38 0a49 	vsub.f32	s0, s16, s18
 8001612:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001616:	eef0 0a68 	vmov.f32	s1, s17
 800161a:	ee30 0a29 	vadd.f32	s0, s0, s19
 800161e:	4629      	mov	r1, r5
 8001620:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001624:	f7ff fdf0 	bl	8001208 <place_step_dd>
				k = 1;
				x = -0.5f;
			}
			if (p_at_reset >= 1.0f) {
 8001628:	eeb4 8aea 	vcmpe.f32	s16, s21
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	f2c0 80c5 	blt.w	80017be <VCO_bleprect_SampleCompute+0x2ae>
				p_at_reset -= 1.0f;
 8001634:	ee38 8a6a 	vsub.f32	s16, s16, s21
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001638:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800163c:	ee38 0a29 	vadd.f32	s0, s16, s19
 8001640:	eef0 0a68 	vmov.f32	s1, s17
			}
		}

		/* now place reset DD */
		if (k) {
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001644:	4629      	mov	r1, r5
 8001646:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800164a:	f7ff fddd 	bl	8001208 <place_step_dd>
 800164e:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
			k = 0;
			x = 0.5f;
		}
		if (p >= b) {
 8001652:	eeb4 9ae9 	vcmpe.f32	s18, s19
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	f200 80b7 	bhi.w	80017cc <VCO_bleprect_SampleCompute+0x2bc>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 800165e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001662:	eef0 0a68 	vmov.f32	s1, s17
 8001666:	ee39 0ac9 	vsub.f32	s0, s19, s18
 800166a:	4629      	mov	r1, r5
 800166c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001670:	f7ff fdca 	bl	8001208 <place_step_dd>
			k = 1;
			x = -0.5f;
 8001674:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 8001678:	2601      	movs	r6, #1
		}

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 800167a:	ed84 ca06 	vstr	s24, [r4, #24]
		p = eof_offset;
 800167e:	eeb0 8a69 	vmov.f32	s16, s19
 8001682:	eb04 0385 	add.w	r3, r4, r5, lsl #2
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
			k = 1;
			x = -0.5f;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001686:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800168a:	ee77 7a8a 	vadd.f32	s15, s15, s20

	z += a * (vco->_f[j] - z);
	vco->out = vco->amp * z;

	if (++j == FILLEN)
 800168e:	3501      	adds	r5, #1
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001690:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	z += a * (vco->_f[j] - z);
 8001694:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
	vco->out = vco->amp * z;
 8001698:	edd4 9a01 	vldr	s19, [r4, #4]
	z += a * (vco->_f[j] - z);
 800169c:	ee77 7acb 	vsub.f32	s15, s15, s22
	if (++j == FILLEN)
 80016a0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	z += a * (vco->_f[j] - z);
 80016a4:	eea7 baab 	vfma.f32	s22, s15, s23
	vco->out = vco->amp * z;
 80016a8:	ee6b 9a29 	vmul.f32	s19, s22, s19
 80016ac:	edc4 9a00 	vstr	s19, [r4]
	if (++j == FILLEN)
 80016b0:	d10f      	bne.n	80016d2 <VCO_bleprect_SampleCompute+0x1c2>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 80016b2:	f44f 7290 	mov.w	r2, #288	; 0x120
 80016b6:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 80016ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80016be:	f004 fee7 	bl	8006490 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 80016c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c6:	2100      	movs	r1, #0
 80016c8:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80016cc:	f004 feeb 	bl	80064a6 <memset>
		j = 0;
 80016d0:	2500      	movs	r5, #0
	vco->_j = j;
	vco->_k = k;

	return vco->out;

}
 80016d2:	eeb0 0a69 	vmov.f32	s0, s19
	vco->_p = p;
 80016d6:	ed84 8a07 	vstr	s16, [r4, #28]
	vco->_w = w;
 80016da:	edc4 8a08 	vstr	s17, [r4, #32]
	vco->_b = b;
 80016de:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
	vco->_x = x;
 80016e2:	ed84 aa0a 	vstr	s20, [r4, #40]	; 0x28
	vco->_z = z;
 80016e6:	ed84 ba0b 	vstr	s22, [r4, #44]	; 0x2c
}
 80016ea:	ecbd 8b0a 	vpop	{d8-d12}
	vco->_j = j;
 80016ee:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
	vco->_k = k;
 80016f2:	f8c4 6554 	str.w	r6, [r4, #1364]	; 0x554
}
 80016f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		if (w < 1e-5) w = 1e-5;
 80016fa:	a36d      	add	r3, pc, #436	; (adr r3, 80018b0 <VCO_bleprect_SampleCompute+0x3a0>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7ff f990 	bl	8000a24 <__aeabi_dcmplt>
 8001704:	bb80      	cbnz	r0, 8001768 <VCO_bleprect_SampleCompute+0x258>
		w = freq / SAMPLERATE;
 8001706:	eef4 9aeb 	vcmpe.f32	s19, s23
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	bfd4      	ite	le
 8001710:	eef0 8a69 	vmovle.f32	s17, s19
 8001714:	eef0 8a6b 	vmovgt.f32	s17, s23
		b = 0.5 * (1.0 + vco->waveform );
 8001718:	6920      	ldr	r0, [r4, #16]
		p = 0.0f;
 800171a:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 80018c8 <VCO_bleprect_SampleCompute+0x3b8>
		b = 0.5 * (1.0 + vco->waveform );
 800171e:	f7fe feb7 	bl	8000490 <__aeabi_f2d>
 8001722:	2200      	movs	r2, #0
 8001724:	4b65      	ldr	r3, [pc, #404]	; (80018bc <VCO_bleprect_SampleCompute+0x3ac>)
 8001726:	f7fe fd55 	bl	80001d4 <__adddf3>
 800172a:	2200      	movs	r2, #0
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <VCO_bleprect_SampleCompute+0x3b0>)
 800172e:	f7fe ff07 	bl	8000540 <__aeabi_dmul>
 8001732:	f7ff f99f 	bl	8000a74 <__aeabi_d2f>
 8001736:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 800173a:	eef4 8a67 	vcmp.f32	s17, s15
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (b > 1.0f - w) b = 1.0f - w;
 8001742:	ee3a 9ae8 	vsub.f32	s18, s21, s17
		if (b < w) b = w;
 8001746:	bfc8      	it	gt
 8001748:	eef0 7a68 	vmovgt.f32	s15, s17
		if (b > 1.0f - w) b = 1.0f - w;
 800174c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		vco->_init = false;
 8001754:	f04f 0600 	mov.w	r6, #0
		if (b > 1.0f - w) b = 1.0f - w;
 8001758:	bf58      	it	pl
 800175a:	eeb0 9a67 	vmovpl.f32	s18, s15
		vco->_init = false;
 800175e:	f884 6558 	strb.w	r6, [r4, #1368]	; 0x558
		x = 0.5f;
 8001762:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001766:	e6fd      	b.n	8001564 <VCO_bleprect_SampleCompute+0x54>
		if (w < 1e-5) w = 1e-5;
 8001768:	eddf 8a58 	vldr	s17, [pc, #352]	; 80018cc <VCO_bleprect_SampleCompute+0x3bc>
 800176c:	e7d4      	b.n	8001718 <VCO_bleprect_SampleCompute+0x208>
	if (t < 1e-5) t = 1e-5;
 800176e:	eddf 9a57 	vldr	s19, [pc, #348]	; 80018cc <VCO_bleprect_SampleCompute+0x3bc>
 8001772:	e70a      	b.n	800158a <VCO_bleprect_SampleCompute+0x7a>
			if (p_at_reset >= 1.0f) {
 8001774:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	db1f      	blt.n	80017be <VCO_bleprect_SampleCompute+0x2ae>
				p_at_reset -= 1.0f;
 800177e:	ee38 8a6a 	vsub.f32	s16, s16, s21
 8001782:	f104 0630 	add.w	r6, r4, #48	; 0x30
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001786:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800178a:	eef0 0a68 	vmov.f32	s1, s17
 800178e:	ee39 0a88 	vadd.f32	s0, s19, s16
 8001792:	4629      	mov	r1, r5
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff fd37 	bl	8001208 <place_step_dd>
			if (!k && p_at_reset >= b) {
 800179a:	eeb4 9ac8 	vcmpe.f32	s18, s16
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	f63f af54 	bhi.w	800164e <VCO_bleprect_SampleCompute+0x13e>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 80017a6:	ee38 8a49 	vsub.f32	s16, s16, s18
 80017aa:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80017ae:	eef0 0a68 	vmov.f32	s1, s17
 80017b2:	ee38 0a29 	vadd.f32	s0, s16, s19
 80017b6:	4629      	mov	r1, r5
 80017b8:	4630      	mov	r0, r6
 80017ba:	f7ff fd25 	bl	8001208 <place_step_dd>
			place_step_dd(vco->_f, j, p, w, 1.0f);
 80017be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80017c2:	eef0 0a68 	vmov.f32	s1, s17
 80017c6:	eeb0 0a69 	vmov.f32	s0, s19
 80017ca:	e73b      	b.n	8001644 <VCO_bleprect_SampleCompute+0x134>
 80017cc:	2600      	movs	r6, #0
 80017ce:	e754      	b.n	800167a <VCO_bleprect_SampleCompute+0x16a>
	} else if (!k) {  /* normal operation, signal currently high */
 80017d0:	bb9e      	cbnz	r6, 800183a <VCO_bleprect_SampleCompute+0x32a>
		if (p >= b) {
 80017d2:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d828      	bhi.n	800182e <VCO_bleprect_SampleCompute+0x31e>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 80017dc:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80017e0:	eef0 0a68 	vmov.f32	s1, s17
 80017e4:	ee38 0a49 	vsub.f32	s0, s16, s18
 80017e8:	4629      	mov	r1, r5
 80017ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80017ee:	f7ff fd0b 	bl	8001208 <place_step_dd>
			x = -0.5f;
 80017f2:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 80017f6:	2301      	movs	r3, #1
		if (p >= 1.0f) {
 80017f8:	eeb4 8aea 	vcmpe.f32	s16, s21
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	db17      	blt.n	8001832 <VCO_bleprect_SampleCompute+0x322>
			p -= 1.0f;
 8001802:	ee38 8a6a 	vsub.f32	s16, s16, s21
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001806:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			vco->syncout = p / w + 1e-20f;
 800180a:	eec8 7a28 	vdiv.f32	s15, s16, s17
			place_step_dd(vco->_f, j, p, w, 1.0f);
 800180e:	4629      	mov	r1, r5
 8001810:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001814:	eef0 0a68 	vmov.f32	s1, s17
			vco->syncout = p / w + 1e-20f;
 8001818:	ee77 7aac 	vadd.f32	s15, s15, s25
			place_step_dd(vco->_f, j, p, w, 1.0f);
 800181c:	eeb0 0a48 	vmov.f32	s0, s16
			vco->syncout = p / w + 1e-20f;
 8001820:	edc4 7a06 	vstr	s15, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001824:	f7ff fcf0 	bl	8001208 <place_step_dd>
			x = 0.5f;
 8001828:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800182c:	e729      	b.n	8001682 <VCO_bleprect_SampleCompute+0x172>
 800182e:	4633      	mov	r3, r6
 8001830:	e7e2      	b.n	80017f8 <VCO_bleprect_SampleCompute+0x2e8>
			vco->syncout = 0.0f;
 8001832:	2200      	movs	r2, #0
 8001834:	61a2      	str	r2, [r4, #24]
 8001836:	461e      	mov	r6, r3
 8001838:	e723      	b.n	8001682 <VCO_bleprect_SampleCompute+0x172>
		if (p >= 1.0f) {
 800183a:	eeb4 8aea 	vcmpe.f32	s16, s21
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	db1c      	blt.n	800187e <VCO_bleprect_SampleCompute+0x36e>
			p -= 1.0f;
 8001844:	ee38 8a6a 	vsub.f32	s16, s16, s21
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001848:	f104 0630 	add.w	r6, r4, #48	; 0x30
			vco->syncout = p / w + 1e-20f;
 800184c:	eec8 7a28 	vdiv.f32	s15, s16, s17
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001850:	4629      	mov	r1, r5
 8001852:	4630      	mov	r0, r6
 8001854:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			vco->syncout = p / w + 1e-20f;
 8001858:	ee77 9aa9 	vadd.f32	s19, s15, s19
			place_step_dd(vco->_f, j, p, w, 1.0f);
 800185c:	eef0 0a68 	vmov.f32	s1, s17
			vco->syncout = p / w + 1e-20f;
 8001860:	edc4 9a06 	vstr	s19, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001864:	eeb0 0a48 	vmov.f32	s0, s16
 8001868:	f7ff fcce 	bl	8001208 <place_step_dd>
		if (!k && p >= b) {
 800186c:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	d906      	bls.n	8001884 <VCO_bleprect_SampleCompute+0x374>
			x = 0.5f;
 8001876:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800187a:	2600      	movs	r6, #0
 800187c:	e701      	b.n	8001682 <VCO_bleprect_SampleCompute+0x172>
			vco->syncout = 0.0f;
 800187e:	2300      	movs	r3, #0
 8001880:	61a3      	str	r3, [r4, #24]
 8001882:	e6fe      	b.n	8001682 <VCO_bleprect_SampleCompute+0x172>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001884:	4630      	mov	r0, r6
 8001886:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800188a:	eef0 0a68 	vmov.f32	s1, s17
 800188e:	ee38 0a49 	vsub.f32	s0, s16, s18
 8001892:	4629      	mov	r1, r5
 8001894:	f7ff fcb8 	bl	8001208 <place_step_dd>
			x = -0.5f;
 8001898:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 800189c:	2601      	movs	r6, #1
 800189e:	e6f0      	b.n	8001682 <VCO_bleprect_SampleCompute+0x172>
			if (p_at_reset >= 1.0f) {
 80018a0:	eeb4 8aea 	vcmpe.f32	s16, s21
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	f6bf aec4 	bge.w	8001634 <VCO_bleprect_SampleCompute+0x124>
 80018ac:	e6d1      	b.n	8001652 <VCO_bleprect_SampleCompute+0x142>
 80018ae:	bf00      	nop
 80018b0:	88e368f1 	.word	0x88e368f1
 80018b4:	3ee4f8b5 	.word	0x3ee4f8b5
 80018b8:	472c4400 	.word	0x472c4400
 80018bc:	3ff00000 	.word	0x3ff00000
 80018c0:	3fe00000 	.word	0x3fe00000
 80018c4:	1e3ce508 	.word	0x1e3ce508
 80018c8:	00000000 	.word	0x00000000
 80018cc:	3727c5ac 	.word	0x3727c5ac

080018d0 <VCO_bleptri_Init>:

///* ==== variable-slope, hard-sync-capable triangle oscillator ==== */

void VCO_bleptri_Init(VCO_bleptri_t *vco)
{
	vco->amp = 1.0f;
 80018d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018d4:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <VCO_bleptri_Init+0x28>)
 80018d8:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_init = true;
 80018da:	2201      	movs	r2, #1
	vco->syncin = 0.0f;
 80018dc:	2300      	movs	r3, #0
	vco->_z = 0.0f;
	vco->_j = 0;
 80018de:	2100      	movs	r1, #0
	vco->_init = true;
 80018e0:	f880 2554 	strb.w	r2, [r0, #1364]	; 0x554
	vco->syncin = 0.0f;
 80018e4:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 80018e6:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 80018e8:	6283      	str	r3, [r0, #40]	; 0x28
	vco->_j = 0;
 80018ea:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 80018ee:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80018f2:	302c      	adds	r0, #44	; 0x2c
 80018f4:	f004 bdd7 	b.w	80064a6 <memset>
 80018f8:	43dc0000 	.word	0x43dc0000
 80018fc:	00000000 	.word	0x00000000

08001900 <VCO_bleptri_SampleCompute>:
}
////----------------------------------------------------------------------------------------------------------

float VCO_bleptri_SampleCompute(VCO_bleptri_t *vco)
{
 8001900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001904:	ed90 7a03 	vldr	s14, [r0, #12]
 8001908:	eddf 7ae3 	vldr	s15, [pc, #908]	; 8001c98 <VCO_bleptri_SampleCompute+0x398>
	freq = vco->freq;
	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	b = vco->_b;  /* duty cycle (0, 1) */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 800190c:	f8d0 554c 	ldr.w	r5, [r0, #1356]	; 0x54c
{
 8001910:	ed2d 8b0c 	vpush	{d8-d13}
 8001914:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8001918:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 800191a:	ed90 ba05 	vldr	s22, [r0, #20]
	z = vco->_z;  /* low pass filter state */
 800191e:	edd0 aa0a 	vldr	s21, [r0, #40]	; 0x28
 8001922:	ee19 0a90 	vmov	r0, s19
 8001926:	f7fe fdb3 	bl	8000490 <__aeabi_f2d>
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */

	if (vco->_init) {
 800192a:	f894 3554 	ldrb.w	r3, [r4, #1364]	; 0x554
 800192e:	4680      	mov	r8, r0
 8001930:	4689      	mov	r9, r1
 8001932:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001936:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 80e6 	bne.w	8001b0c <VCO_bleptri_SampleCompute+0x20c>
	p = vco->_p;  /* phase [0, 1) */
 8001940:	ed94 8a07 	vldr	s16, [r4, #28]
	w = vco->_w;  /* phase increment */
 8001944:	ed94 9a08 	vldr	s18, [r4, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001948:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 800194c:	f8d4 6550 	ldr.w	r6, [r4, #1360]	; 0x550

	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8001950:	a3cf      	add	r3, pc, #828	; (adr r3, 8001c90 <VCO_bleptri_SampleCompute+0x390>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	4640      	mov	r0, r8
 8001958:	4649      	mov	r1, r9
 800195a:	f7ff f863 	bl	8000a24 <__aeabi_dcmplt>
 800195e:	2800      	cmp	r0, #0
 8001960:	f040 810b 	bne.w	8001b7a <VCO_bleptri_SampleCompute+0x27a>
	if (t > 0.5) t = 0.5;
 8001964:	eef4 9a4a 	vcmp.f32	s19, s20
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001970:	bfc8      	it	gt
 8001972:	eef0 9a67 	vmovgt.f32	s19, s15
	dw = (t - w) ;
	t = 0.5 * (1.0 + vco->waveform );
 8001976:	6920      	ldr	r0, [r4, #16]
	w += dw;
	b += db;
	b1 = 1.0f - b;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 8001978:	eddf bac8 	vldr	s23, [pc, #800]	; 8001c9c <VCO_bleptri_SampleCompute+0x39c>
	t = 0.5 * (1.0 + vco->waveform );
 800197c:	f7fe fd88 	bl	8000490 <__aeabi_f2d>
 8001980:	2200      	movs	r2, #0
 8001982:	4bc7      	ldr	r3, [pc, #796]	; (8001ca0 <VCO_bleptri_SampleCompute+0x3a0>)
 8001984:	f7fe fc26 	bl	80001d4 <__adddf3>
 8001988:	2200      	movs	r2, #0
 800198a:	4bc6      	ldr	r3, [pc, #792]	; (8001ca4 <VCO_bleptri_SampleCompute+0x3a4>)
 800198c:	f7fe fdd8 	bl	8000540 <__aeabi_dmul>
 8001990:	f7ff f870 	bl	8000a74 <__aeabi_d2f>
 8001994:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 8001998:	eeb4 9a47 	vcmp.f32	s18, s14
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (t > 1.0f - w) t = 1.0f - w;
 80019a0:	ee7c 7a49 	vsub.f32	s15, s24, s18
	if (t < w) t = w;
 80019a4:	bfc8      	it	gt
 80019a6:	eeb0 7a49 	vmovgt.f32	s14, s18
	if (t > 1.0f - w) t = 1.0f - w;
 80019aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	bf58      	it	pl
 80019b4:	eef0 7a47 	vmovpl.f32	s15, s14
	dw = (t - w) ;
 80019b8:	ee79 9ac9 	vsub.f32	s19, s19, s18
	db = (t - b) ;
 80019bc:	ee77 7ae8 	vsub.f32	s15, s15, s17
	w += dw;
 80019c0:	ee39 9a29 	vadd.f32	s18, s18, s19
	b += db;
 80019c4:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if (syncin >= 1e-20f) {  /* sync to master */
 80019c8:	eeb4 baeb 	vcmpe.f32	s22, s23
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	b1 = 1.0f - b;
 80019d0:	ee7c ca68 	vsub.f32	s25, s24, s17
	p += w;
 80019d4:	ee38 8a09 	vadd.f32	s16, s16, s18
 80019d8:	eeb0 da6b 	vmov.f32	s26, s23
	if (syncin >= 1e-20f) {  /* sync to master */
 80019dc:	f2c0 812b 	blt.w	8001c36 <VCO_bleptri_SampleCompute+0x336>

		float eof_offset = (syncin - 1e-20f) * w;
 80019e0:	ee7b ba6b 	vsub.f32	s23, s22, s23
 80019e4:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80019e8:	ee6b ba89 	vmul.f32	s23, s23, s18
		float p_at_reset = p - eof_offset;
 80019ec:	ee38 8a6b 	vsub.f32	s16, s16, s23
		p = eof_offset;
		//
		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 80019f0:	2e00      	cmp	r6, #0
 80019f2:	f040 80c5 	bne.w	8001b80 <VCO_bleptri_SampleCompute+0x280>
			x = -0.5f + p_at_reset / b;
			if (p_at_reset >= b) {
 80019f6:	eef4 8ac8 	vcmpe.f32	s17, s16
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	f200 81b5 	bhi.w	8001d6c <VCO_bleptri_SampleCompute+0x46c>
				x = 0.5f - (p_at_reset - b) / b1;
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001a02:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001a06:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	4638      	mov	r0, r7
 8001a0e:	eecc 7a28 	vdiv.f32	s15, s24, s17
				x = 0.5f - (p_at_reset - b) / b1;
 8001a12:	ee38 0a68 	vsub.f32	s0, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001a16:	ee31 1a67 	vsub.f32	s2, s2, s15
				x = 0.5f - (p_at_reset - b) / b1;
 8001a1a:	eec0 9a2c 	vdiv.f32	s19, s0, s25
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001a1e:	eef0 0a49 	vmov.f32	s1, s18
 8001a22:	ee30 0a2b 	vadd.f32	s0, s0, s23
 8001a26:	f7ff fc29 	bl	800127c <place_slope_dd>
				k = 1;
			}
			if (p_at_reset >= 1.0f) {
 8001a2a:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				x = 0.5f - (p_at_reset - b) / b1;
 8001a32:	ee7a 9a69 	vsub.f32	s19, s20, s19
			if (p_at_reset >= 1.0f) {
 8001a36:	f2c0 80ae 	blt.w	8001b96 <VCO_bleptri_SampleCompute+0x296>
				p_at_reset -= 1.0f;
 8001a3a:	ee38 8a4c 	vsub.f32	s16, s16, s24
				x = -0.5f + p_at_reset / b;
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001a3e:	ee8c 1a28 	vdiv.f32	s2, s24, s17
				x = -0.5f + p_at_reset / b;
 8001a42:	eec8 9a28 	vdiv.f32	s19, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001a46:	eecc 7a2c 	vdiv.f32	s15, s24, s25
				x = -0.5f + p_at_reset / b;
 8001a4a:	ee79 9aca 	vsub.f32	s19, s19, s20
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001a4e:	ee31 1a27 	vadd.f32	s2, s2, s15
 8001a52:	ee3b 0a88 	vadd.f32	s0, s23, s16
 8001a56:	eef0 0a49 	vmov.f32	s1, s18
			}
		}

		/* now place reset DDs */
		if (k)
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	4638      	mov	r0, r7
 8001a5e:	f7ff fc0d 	bl	800127c <place_slope_dd>
		place_step_dd(vco->_f, j, p, w, -0.5f - x);
 8001a62:	eebe 1a00 	vmov.f32	s2, #224	; 0xbf000000 -0.5
 8001a66:	ee31 1a69 	vsub.f32	s2, s2, s19
 8001a6a:	eef0 0a49 	vmov.f32	s1, s18
 8001a6e:	eeb0 0a6b 	vmov.f32	s0, s23
 8001a72:	4629      	mov	r1, r5
 8001a74:	4638      	mov	r0, r7
 8001a76:	f7ff fbc7 	bl	8001208 <place_step_dd>
		x = -0.5f + p / b;
		k = 0;
		if (p >= b) {
 8001a7a:	eef4 8aeb 	vcmpe.f32	s17, s23
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	f240 80c2 	bls.w	8001c0a <VCO_bleptri_SampleCompute+0x30a>
		x = -0.5f + p / b;
 8001a86:	eecb 9aa8 	vdiv.f32	s19, s23, s17
		k = 0;
 8001a8a:	2600      	movs	r6, #0
		x = -0.5f + p / b;
 8001a8c:	ee79 9aca 	vsub.f32	s19, s19, s20
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001a90:	ed84 ba06 	vstr	s22, [r4, #24]
		p = eof_offset;
 8001a94:	eeb0 8a6b 	vmov.f32	s16, s23
 8001a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001a9c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001aa0:	ee77 9aa9 	vadd.f32	s19, s15, s19

	z += a * (vco->_f[j] - z);
 8001aa4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001aa8:	edc3 9a0f 	vstr	s19, [r3, #60]	; 0x3c
	z += a * (vco->_f[j] - z);
 8001aac:	ee77 7aea 	vsub.f32	s15, s15, s21
	vco->out = vco->amp * z;
 8001ab0:	edd4 9a01 	vldr	s19, [r4, #4]
	z += a * (vco->_f[j] - z);
 8001ab4:	eee7 aa8a 	vfma.f32	s21, s15, s20

	if (++j == FILLEN)
 8001ab8:	3501      	adds	r5, #1
 8001aba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	vco->out = vco->amp * z;
 8001abe:	ee6a 9aa9 	vmul.f32	s19, s21, s19
 8001ac2:	edc4 9a00 	vstr	s19, [r4]
	if (++j == FILLEN)
 8001ac6:	d10f      	bne.n	8001ae8 <VCO_bleptri_SampleCompute+0x1e8>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001ac8:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001acc:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001ad0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001ad4:	f004 fcdc 	bl	8006490 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001adc:	2100      	movs	r1, #0
 8001ade:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 8001ae2:	f004 fce0 	bl	80064a6 <memset>
		j = 0;
 8001ae6:	2500      	movs	r5, #0
	vco->_j = j;
	vco->_k = k;

	return vco->out;

}
 8001ae8:	eeb0 0a69 	vmov.f32	s0, s19
	vco->_p = p;
 8001aec:	ed84 8a07 	vstr	s16, [r4, #28]
	vco->_w = w;
 8001af0:	ed84 9a08 	vstr	s18, [r4, #32]
	vco->_b = b;
 8001af4:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
	vco->_z = z;
 8001af8:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
}
 8001afc:	ecbd 8b0c 	vpop	{d8-d13}
	vco->_j = j;
 8001b00:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
	vco->_k = k;
 8001b04:	f8c4 6550 	str.w	r6, [r4, #1360]	; 0x550
}
 8001b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (w < 1e-5) w = 1e-5;
 8001b0c:	a360      	add	r3, pc, #384	; (adr r3, 8001c90 <VCO_bleptri_SampleCompute+0x390>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe ff87 	bl	8000a24 <__aeabi_dcmplt>
 8001b16:	bb68      	cbnz	r0, 8001b74 <VCO_bleptri_SampleCompute+0x274>
		w = freq / SAMPLERATE;
 8001b18:	eef4 9aca 	vcmpe.f32	s19, s20
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	bfd4      	ite	le
 8001b22:	eeb0 9a69 	vmovle.f32	s18, s19
 8001b26:	eeb0 9a4a 	vmovgt.f32	s18, s20
		b = 0.5 * (1.0 + vco->waveform);
 8001b2a:	6920      	ldr	r0, [r4, #16]
 8001b2c:	f7fe fcb0 	bl	8000490 <__aeabi_f2d>
 8001b30:	2200      	movs	r2, #0
 8001b32:	4b5b      	ldr	r3, [pc, #364]	; (8001ca0 <VCO_bleptri_SampleCompute+0x3a0>)
 8001b34:	f7fe fb4e 	bl	80001d4 <__adddf3>
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ca4 <VCO_bleptri_SampleCompute+0x3a4>)
 8001b3c:	f7fe fd00 	bl	8000540 <__aeabi_dmul>
 8001b40:	f7fe ff98 	bl	8000a74 <__aeabi_d2f>
 8001b44:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8001b48:	eeb4 9a67 	vcmp.f32	s18, s15
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (b > 1.0f - w) b = 1.0f - w;
 8001b50:	ee7c 8a49 	vsub.f32	s17, s24, s18
		if (b < w) b = w;
 8001b54:	bfc8      	it	gt
 8001b56:	eef0 7a49 	vmovgt.f32	s15, s18
		if (b > 1.0f - w) b = 1.0f - w;
 8001b5a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	bf58      	it	pl
 8001b64:	eef0 8a67 	vmovpl.f32	s17, s15
		vco->_init = false;
 8001b68:	2600      	movs	r6, #0
		p = 0.5f * b;
 8001b6a:	ee28 8a8a 	vmul.f32	s16, s17, s20
		vco->_init = false;
 8001b6e:	f884 6554 	strb.w	r6, [r4, #1364]	; 0x554
 8001b72:	e6ed      	b.n	8001950 <VCO_bleptri_SampleCompute+0x50>
		if (w < 1e-5) w = 1e-5;
 8001b74:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 8001ca8 <VCO_bleptri_SampleCompute+0x3a8>
 8001b78:	e7d7      	b.n	8001b2a <VCO_bleptri_SampleCompute+0x22a>
	if (t < 1e-5) t = 1e-5;
 8001b7a:	eddf 9a4b 	vldr	s19, [pc, #300]	; 8001ca8 <VCO_bleptri_SampleCompute+0x3a8>
 8001b7e:	e6fa      	b.n	8001976 <VCO_bleptri_SampleCompute+0x76>
			if (p_at_reset >= 1.0f) {
 8001b80:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	da10      	bge.n	8001bac <VCO_bleptri_SampleCompute+0x2ac>
			x = 0.5f - (p_at_reset - b) / b1;
 8001b8a:	ee38 8a68 	vsub.f32	s16, s16, s17
 8001b8e:	eec8 9a2c 	vdiv.f32	s19, s16, s25
 8001b92:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001b96:	ee8c 1a28 	vdiv.f32	s2, s24, s17
 8001b9a:	eecc 7a2c 	vdiv.f32	s15, s24, s25
 8001b9e:	eef0 0a49 	vmov.f32	s1, s18
 8001ba2:	ee31 1a27 	vadd.f32	s2, s2, s15
 8001ba6:	eeb0 0a6b 	vmov.f32	s0, s23
 8001baa:	e756      	b.n	8001a5a <VCO_bleptri_SampleCompute+0x15a>
 8001bac:	ee8c da28 	vdiv.f32	s26, s24, s17
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	4638      	mov	r0, r7
 8001bb4:	ee8c 1a2c 	vdiv.f32	s2, s24, s25
				p_at_reset -= 1.0f;
 8001bb8:	ee38 8a4c 	vsub.f32	s16, s16, s24
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001bbc:	ee31 1a0d 	vadd.f32	s2, s2, s26
 8001bc0:	eef0 0a49 	vmov.f32	s1, s18
 8001bc4:	ee3b 0a88 	vadd.f32	s0, s23, s16
 8001bc8:	f7ff fb58 	bl	800127c <place_slope_dd>
			if (!k && p_at_reset >= b) {
 8001bcc:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d904      	bls.n	8001be0 <VCO_bleptri_SampleCompute+0x2e0>
			x = -0.5f + p_at_reset / b;
 8001bd6:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8001bda:	ee79 9aca 	vsub.f32	s19, s19, s20
 8001bde:	e740      	b.n	8001a62 <VCO_bleptri_SampleCompute+0x162>
				x = 0.5f - (p_at_reset - b) / b1;
 8001be0:	ee38 8a68 	vsub.f32	s16, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001be4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001be8:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001bec:	4629      	mov	r1, r5
 8001bee:	4638      	mov	r0, r7
				x = 0.5f - (p_at_reset - b) / b1;
 8001bf0:	eec8 9a2c 	vdiv.f32	s19, s16, s25
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001bf4:	ee31 1a4d 	vsub.f32	s2, s2, s26
 8001bf8:	eef0 0a49 	vmov.f32	s1, s18
 8001bfc:	ee38 0a2b 	vadd.f32	s0, s16, s23
				x = 0.5f - (p_at_reset - b) / b1;
 8001c00:	ee7a 9a69 	vsub.f32	s19, s20, s19
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001c04:	f7ff fb3a 	bl	800127c <place_slope_dd>
 8001c08:	e7c5      	b.n	8001b96 <VCO_bleptri_SampleCompute+0x296>
			x = 0.5f - (p - b) / b1;
 8001c0a:	ee3b 0ae8 	vsub.f32	s0, s23, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001c0e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001c12:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001c16:	4629      	mov	r1, r5
 8001c18:	4638      	mov	r0, r7
			k = 1;
 8001c1a:	2601      	movs	r6, #1
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001c1c:	eecc 7a28 	vdiv.f32	s15, s24, s17
			x = 0.5f - (p - b) / b1;
 8001c20:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001c24:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001c28:	eef0 0a49 	vmov.f32	s1, s18
			x = 0.5f - (p - b) / b1;
 8001c2c:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001c30:	f7ff fb24 	bl	800127c <place_slope_dd>
 8001c34:	e72c      	b.n	8001a90 <VCO_bleptri_SampleCompute+0x190>
	} else if (!k) {  /* normal operation, slope currently up */
 8001c36:	2e00      	cmp	r6, #0
 8001c38:	d153      	bne.n	8001ce2 <VCO_bleptri_SampleCompute+0x3e2>
		if (p >= b) {
 8001c3a:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	d933      	bls.n	8001cac <VCO_bleptri_SampleCompute+0x3ac>
		x = -0.5f + p / b;
 8001c44:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8001c48:	4633      	mov	r3, r6
 8001c4a:	ee79 9aca 	vsub.f32	s19, s19, s20
		if (p >= 1.0f) {
 8001c4e:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	db40      	blt.n	8001cda <VCO_bleptri_SampleCompute+0x3da>
			p -= 1.0f;
 8001c58:	ee38 8a4c 	vsub.f32	s16, s16, s24
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001c5c:	ee8c 1a28 	vdiv.f32	s2, s24, s17
 8001c60:	4629      	mov	r1, r5
 8001c62:	f104 002c 	add.w	r0, r4, #44	; 0x2c
			vco->syncout = p / w + 1e-20f;
 8001c66:	eec8 7a09 	vdiv.f32	s15, s16, s18
			x = -0.5f + p / b;
 8001c6a:	eec8 9a28 	vdiv.f32	s19, s16, s17
			vco->syncout = p / w + 1e-20f;
 8001c6e:	ee77 7a8d 	vadd.f32	s15, s15, s26
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001c72:	eef0 0a49 	vmov.f32	s1, s18
			vco->syncout = p / w + 1e-20f;
 8001c76:	edc4 7a06 	vstr	s15, [r4, #24]
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001c7a:	eecc 7a2c 	vdiv.f32	s15, s24, s25
 8001c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8001c82:	ee31 1a27 	vadd.f32	s2, s2, s15
			x = -0.5f + p / b;
 8001c86:	ee79 9aca 	vsub.f32	s19, s19, s20
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001c8a:	f7ff faf7 	bl	800127c <place_slope_dd>
 8001c8e:	e703      	b.n	8001a98 <VCO_bleptri_SampleCompute+0x198>
 8001c90:	88e368f1 	.word	0x88e368f1
 8001c94:	3ee4f8b5 	.word	0x3ee4f8b5
 8001c98:	472c4400 	.word	0x472c4400
 8001c9c:	1e3ce508 	.word	0x1e3ce508
 8001ca0:	3ff00000 	.word	0x3ff00000
 8001ca4:	3fe00000 	.word	0x3fe00000
 8001ca8:	3727c5ac 	.word	0x3727c5ac
			x = 0.5f - (p - b) / b1;
 8001cac:	ee38 0a68 	vsub.f32	s0, s16, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001cb0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001cb4:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001cb8:	4629      	mov	r1, r5
 8001cba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001cbe:	eecc 7a28 	vdiv.f32	s15, s24, s17
			x = 0.5f - (p - b) / b1;
 8001cc2:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001cc6:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001cca:	eef0 0a49 	vmov.f32	s1, s18
 8001cce:	f7ff fad5 	bl	800127c <place_slope_dd>
			x = 0.5f - (p - b) / b1;
 8001cd2:	ee7a 9a69 	vsub.f32	s19, s20, s19
			k = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e7b9      	b.n	8001c4e <VCO_bleptri_SampleCompute+0x34e>
			vco->syncout = 0.0f;
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61a2      	str	r2, [r4, #24]
 8001cde:	461e      	mov	r6, r3
 8001ce0:	e6da      	b.n	8001a98 <VCO_bleptri_SampleCompute+0x198>
		if (p >= 1.0f) {
 8001ce2:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	db22      	blt.n	8001d32 <VCO_bleptri_SampleCompute+0x432>
			p -= 1.0f;
 8001cec:	ee38 8a4c 	vsub.f32	s16, s16, s24
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001cf0:	ee8c ba28 	vdiv.f32	s22, s24, s17
 8001cf4:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4630      	mov	r0, r6
			vco->syncout = p / w + 1e-20f;
 8001cfc:	eec8 7a09 	vdiv.f32	s15, s16, s18
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001d00:	ee8c 1a2c 	vdiv.f32	s2, s24, s25
			vco->syncout = p / w + 1e-20f;
 8001d04:	ee77 baab 	vadd.f32	s23, s15, s23
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001d08:	ee31 1a0b 	vadd.f32	s2, s2, s22
			vco->syncout = p / w + 1e-20f;
 8001d0c:	edc4 ba06 	vstr	s23, [r4, #24]
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001d10:	eef0 0a49 	vmov.f32	s1, s18
 8001d14:	eeb0 0a48 	vmov.f32	s0, s16
 8001d18:	f7ff fab0 	bl	800127c <place_slope_dd>
		if (!k && p >= b) {
 8001d1c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	d90e      	bls.n	8001d44 <VCO_bleptri_SampleCompute+0x444>
			x = -0.5f + p / b;
 8001d26:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	ee79 9aca 	vsub.f32	s19, s19, s20
 8001d30:	e6b2      	b.n	8001a98 <VCO_bleptri_SampleCompute+0x198>
		x = 0.5f - (p - b) / b1;
 8001d32:	ee78 7a68 	vsub.f32	s15, s16, s17
			vco->syncout = 0.0f;
 8001d36:	2300      	movs	r3, #0
		x = 0.5f - (p - b) / b1;
 8001d38:	eec7 9aac 	vdiv.f32	s19, s15, s25
			vco->syncout = 0.0f;
 8001d3c:	61a3      	str	r3, [r4, #24]
		x = 0.5f - (p - b) / b1;
 8001d3e:	ee7a 9a69 	vsub.f32	s19, s20, s19
 8001d42:	e6a9      	b.n	8001a98 <VCO_bleptri_SampleCompute+0x198>
			x = 0.5f - (p - b) / b1;
 8001d44:	ee38 0a68 	vsub.f32	s0, s16, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001d48:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001d4c:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001d50:	4630      	mov	r0, r6
 8001d52:	4629      	mov	r1, r5
			k = 1;
 8001d54:	2601      	movs	r6, #1
			x = 0.5f - (p - b) / b1;
 8001d56:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001d5a:	ee31 1a4b 	vsub.f32	s2, s2, s22
 8001d5e:	eef0 0a49 	vmov.f32	s1, s18
			x = 0.5f - (p - b) / b1;
 8001d62:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001d66:	f7ff fa89 	bl	800127c <place_slope_dd>
 8001d6a:	e695      	b.n	8001a98 <VCO_bleptri_SampleCompute+0x198>
			if (p_at_reset >= 1.0f) {
 8001d6c:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	f6bf ae61 	bge.w	8001a3a <VCO_bleptri_SampleCompute+0x13a>
 8001d78:	e72d      	b.n	8001bd6 <VCO_bleptri_SampleCompute+0x2d6>
 8001d7a:	bf00      	nop

08001d7c <Lfo_SampleCompute>:
/*-------------------------------------------------------------------------------------------*/
float Lfo_SampleCompute(Lfo_t * op) // ! returns a positive value between 0 and op.amp !
{
	float z;

	op->phase += _2PI * Ts * op->freq; // increment phase
 8001d7c:	edd0 7a02 	vldr	s15, [r0, #8]
 8001d80:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001df4 <Lfo_SampleCompute+0x78>
 8001d84:	edd0 6a01 	vldr	s13, [r0, #4]
 8001d88:	eee6 7a87 	vfma.f32	s15, s13, s14
{
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001df8 <Lfo_SampleCompute+0x7c>
	op->phase += _2PI * Ts * op->freq; // increment phase
 8001d92:	edc0 7a02 	vstr	s15, [r0, #8]
{
 8001d96:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8001d98:	edd4 7a02 	vldr	s15, [r4, #8]
 8001d9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	d41c      	bmi.n	8001de0 <Lfo_SampleCompute+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8001da6:	edd4 7a02 	vldr	s15, [r4, #8]
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	da1a      	bge.n	8001dea <Lfo_SampleCompute+0x6e>
		op->phase -= _2PI;

	z = sinetable[lrintf(ALPHA * (op->phase))];
 8001db4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001dfc <Lfo_SampleCompute+0x80>
 8001db8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001dbc:	f004 fc66 	bl	800668c <lrintf>
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <Lfo_SampleCompute+0x84>)
 8001dc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	op->out = op->amp * (z + 1); // returns a positive value between 0 and op.amp
 8001dc6:	ed90 0a00 	vldr	s0, [r0]
 8001dca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001dce:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001dd2:	edd4 7a00 	vldr	s15, [r4]
 8001dd6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001dda:	ed84 0a03 	vstr	s0, [r4, #12]

	return op->out;
}
 8001dde:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8001de0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001de4:	edc4 7a02 	vstr	s15, [r4, #8]
 8001de8:	e7d6      	b.n	8001d98 <Lfo_SampleCompute+0x1c>
		op->phase -= _2PI;
 8001dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dee:	edc4 7a02 	vstr	s15, [r4, #8]
 8001df2:	e7d8      	b.n	8001da6 <Lfo_SampleCompute+0x2a>
 8001df4:	39156592 	.word	0x39156592
 8001df8:	40c90fdb 	.word	0x40c90fdb
 8001dfc:	4322f983 	.word	0x4322f983
 8001e00:	080153bc 	.word	0x080153bc

08001e04 <Chorus_init>:
		}
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_delay(monochorus_t *del, float delay)
{
	del->baseDelay = delay;
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <Chorus_init+0x68>)
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fb(monochorus_t *del, float val)
{
	del->fb = val;
 8001e06:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <Chorus_init+0x6c>)
{
 8001e08:	b5f0      	push	{r4, r5, r6, r7, lr}
	del->baseDelay = delay;
 8001e0a:	4f1a      	ldr	r7, [pc, #104]	; (8001e74 <Chorus_init+0x70>)
 8001e0c:	601f      	str	r7, [r3, #0]
	del->fb = val;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <Chorus_init+0x74>)
 8001e10:	4c1a      	ldr	r4, [pc, #104]	; (8001e7c <Chorus_init+0x78>)
 8001e12:	6054      	str	r4, [r2, #4]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fw(monochorus_t *del, float val)
{
	del->fw = val;
 8001e14:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	del->mode = 1;
 8001e18:	f241 50f4 	movw	r0, #5620	; 0x15f4
 8001e1c:	2501      	movs	r5, #1
	del->fw = val;
 8001e1e:	6091      	str	r1, [r2, #8]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_mix(monochorus_t *del, float val)
{
	del->mix = val;
 8001e20:	6011      	str	r1, [r2, #0]
	del->fw = val;
 8001e22:	6099      	str	r1, [r3, #8]
	del->mix = val;
 8001e24:	6019      	str	r1, [r3, #0]
	lfoL.amp = LEFT_SWEEP;
 8001e26:	4916      	ldr	r1, [pc, #88]	; (8001e80 <Chorus_init+0x7c>)
	del->mode = 1;
 8001e28:	5415      	strb	r5, [r2, r0]
 8001e2a:	541d      	strb	r5, [r3, r0]
	lfoL.amp = LEFT_SWEEP;
 8001e2c:	4815      	ldr	r0, [pc, #84]	; (8001e84 <Chorus_init+0x80>)
 8001e2e:	6008      	str	r0, [r1, #0]
	lfoR.amp = RIGHT_SWEEP;
 8001e30:	6108      	str	r0, [r1, #16]
	lfoL.freq = LEFT_RATE ;
 8001e32:	4815      	ldr	r0, [pc, #84]	; (8001e88 <Chorus_init+0x84>)
 8001e34:	6048      	str	r0, [r1, #4]
	lfoR.freq = RIGHT_RATE ;
 8001e36:	4815      	ldr	r0, [pc, #84]	; (8001e8c <Chorus_init+0x88>)
 8001e38:	6148      	str	r0, [r1, #20]
	rateCoeff = 1;
 8001e3a:	4815      	ldr	r0, [pc, #84]	; (8001e90 <Chorus_init+0x8c>)
	del->fb = val;
 8001e3c:	605c      	str	r4, [r3, #4]
	rateCoeff = 1;
 8001e3e:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	del->baseDelay = delay;
 8001e42:	4c14      	ldr	r4, [pc, #80]	; (8001e94 <Chorus_init+0x90>)
	rateCoeff = 1;
 8001e44:	6005      	str	r5, [r0, #0]
	lfoL.phase = _PI/2; // initial phases for quadrature
 8001e46:	4814      	ldr	r0, [pc, #80]	; (8001e98 <Chorus_init+0x94>)
 8001e48:	6088      	str	r0, [r1, #8]
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8001e4a:	f240 5677 	movw	r6, #1399	; 0x577
	lfoR.phase = 0;
 8001e4e:	2000      	movs	r0, #0
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8001e50:	60d6      	str	r6, [r2, #12]
 8001e52:	60de      	str	r6, [r3, #12]
	lfoR.phase = 0;
 8001e54:	6188      	str	r0, [r1, #24]
	del->baseDelay = delay;
 8001e56:	6027      	str	r7, [r4, #0]
 8001e58:	3310      	adds	r3, #16
 8001e5a:	3210      	adds	r2, #16
 8001e5c:	4601      	mov	r1, r0
		delR.dline[var] = 0;
 8001e5e:	f843 1b04 	str.w	r1, [r3], #4
	for (int var = 0; var < DEPTH; ++var) {
 8001e62:	42a3      	cmp	r3, r4
		delL.dline[var] = 0;
 8001e64:	f842 1b04 	str.w	r1, [r2], #4
	for (int var = 0; var < DEPTH; ++var) {
 8001e68:	d1f9      	bne.n	8001e5e <Chorus_init+0x5a>
}
 8001e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6c:	200026bc 	.word	0x200026bc
 8001e70:	200010cc 	.word	0x200010cc
 8001e74:	43700000 	.word	0x43700000
 8001e78:	200026c4 	.word	0x200026c4
 8001e7c:	be4ccccd 	.word	0xbe4ccccd
 8001e80:	200010ac 	.word	0x200010ac
 8001e84:	42480000 	.word	0x42480000
 8001e88:	3de147ae 	.word	0x3de147ae
 8001e8c:	3df5c28f 	.word	0x3df5c28f
 8001e90:	20013a10 	.word	0x20013a10
 8001e94:	20003cb4 	.word	0x20003cb4
 8001e98:	3fc90fdb 	.word	0x3fc90fdb

08001e9c <ChorusRate_set>:
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8001e9c:	ee07 0a90 	vmov	s15, r0
 8001ea0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001ec8 <ChorusRate_set+0x2c>
	lfoR.freq = rateCoeff * rate;
 8001ea4:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <ChorusRate_set+0x30>)
	lfoL.freq = rate;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <ChorusRate_set+0x34>)
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8001ea8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001eac:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001ed4 <ChorusRate_set+0x38>
 8001eb0:	eee6 7a87 	vfma.f32	s15, s13, s14
	lfoR.freq = rateCoeff * rate;
 8001eb4:	ed92 7a00 	vldr	s14, [r2]
	lfoL.freq = rate;
 8001eb8:	edc3 7a01 	vstr	s15, [r3, #4]
	lfoR.freq = rateCoeff * rate;
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	3d61c387 	.word	0x3d61c387
 8001ecc:	20013a10 	.word	0x20013a10
 8001ed0:	200010ac 	.word	0x200010ac
 8001ed4:	3ca3d70a 	.word	0x3ca3d70a

08001ed8 <ChorusSecondRate_set>:
	rateCoeff = 0.9f / MIDI_MAX * val + 0.1f; // from 10 % to 100 % of lfoL rate
 8001ed8:	ee07 0a90 	vmov	s15, r0
 8001edc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001f04 <ChorusSecondRate_set+0x2c>
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <ChorusSecondRate_set+0x30>)
 8001ee2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ee6:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001f0c <ChorusSecondRate_set+0x34>
 8001eea:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001eee:	edc3 7a00 	vstr	s15, [r3]
	lfoR.freq = rateCoeff * lfoL.freq;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <ChorusSecondRate_set+0x38>)
 8001ef4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	3be836d4 	.word	0x3be836d4
 8001f08:	20013a10 	.word	0x20013a10
 8001f0c:	3dcccccd 	.word	0x3dcccccd
 8001f10:	200010ac 	.word	0x200010ac

08001f14 <ChorusDelay_set>:
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 8001f14:	ee07 0a90 	vmov	s15, r0
 8001f18:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f34 <ChorusDelay_set+0x20>
	delL.baseDelay = d;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <ChorusDelay_set+0x24>)
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 8001f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f22:	ee67 7a87 	vmul.f32	s15, s15, s14
	delL.baseDelay = d;
 8001f26:	edc3 7a00 	vstr	s15, [r3]
	delR.baseDelay = d;
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <ChorusDelay_set+0x28>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40b060c2 	.word	0x40b060c2
 8001f38:	200026bc 	.word	0x200026bc
 8001f3c:	20003cb4 	.word	0x20003cb4

08001f40 <ChorusFeedback_set>:
	fb = 0.95f * val / MIDI_MAX;
 8001f40:	ee07 0a90 	vmov	s15, r0
 8001f44:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001f68 <ChorusFeedback_set+0x28>
 8001f48:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001f6c <ChorusFeedback_set+0x2c>
	delL.fb = fb;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <ChorusFeedback_set+0x30>)
	fb = 0.95f * val / MIDI_MAX;
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	delL.fb = fb;
 8001f5a:	ed83 7a01 	vstr	s14, [r3, #4]
	delR.fb = fb;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <ChorusFeedback_set+0x34>)
 8001f60:	ed83 7a01 	vstr	s14, [r3, #4]
}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	3f733333 	.word	0x3f733333
 8001f6c:	42fe0000 	.word	0x42fe0000
 8001f70:	200010cc 	.word	0x200010cc
 8001f74:	200026c4 	.word	0x200026c4

08001f78 <ChorusSweep_set>:
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 8001f78:	ee07 0a90 	vmov	s15, r0
 8001f7c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001f94 <ChorusSweep_set+0x1c>
	lfoL.amp = sw;
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <ChorusSweep_set+0x20>)
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 8001f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f86:	ee67 7a87 	vmul.f32	s15, s15, s14
	lfoL.amp = sw;
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
	lfoR.amp = sw;
 8001f8e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001f92:	4770      	bx	lr
 8001f94:	3f8c7f66 	.word	0x3f8c7f66
 8001f98:	200010ac 	.word	0x200010ac

08001f9c <ChorusMode_switch>:
	switch (val)
 8001f9c:	b148      	cbz	r0, 8001fb2 <ChorusMode_switch+0x16>
 8001f9e:	287f      	cmp	r0, #127	; 0x7f
 8001fa0:	d106      	bne.n	8001fb0 <ChorusMode_switch+0x14>
		case 127 : 	delR.mode = delL.mode = -1 ; break;
 8001fa2:	f241 53f4 	movw	r3, #5620	; 0x15f4
 8001fa6:	22ff      	movs	r2, #255	; 0xff
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 8001fa8:	4904      	ldr	r1, [pc, #16]	; (8001fbc <ChorusMode_switch+0x20>)
 8001faa:	54ca      	strb	r2, [r1, r3]
 8001fac:	4904      	ldr	r1, [pc, #16]	; (8001fc0 <ChorusMode_switch+0x24>)
 8001fae:	54ca      	strb	r2, [r1, r3]
}
 8001fb0:	4770      	bx	lr
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 8001fb2:	f241 53f4 	movw	r3, #5620	; 0x15f4
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	e7f6      	b.n	8001fa8 <ChorusMode_switch+0xc>
 8001fba:	bf00      	nop
 8001fbc:	200010cc 	.word	0x200010cc
 8001fc0:	200026c4 	.word	0x200026c4

08001fc4 <ChorusFDBsign_switch>:
	switch (val)
 8001fc4:	b180      	cbz	r0, 8001fe8 <ChorusFDBsign_switch+0x24>
 8001fc6:	287f      	cmp	r0, #127	; 0x7f
 8001fc8:	d10d      	bne.n	8001fe6 <ChorusFDBsign_switch+0x22>
		case 127 : 	delR.fb = fabsf(delR.fb); delL.fb = fabsf(delL.fb); break; // positive feedback;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <ChorusFDBsign_switch+0x48>)
 8001fcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fd0:	eef0 7ae7 	vabs.f32	s15, s15
 8001fd4:	edc3 7a01 	vstr	s15, [r3, #4]
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <ChorusFDBsign_switch+0x4c>)
 8001fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fde:	eef0 7ae7 	vabs.f32	s15, s15
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 8001fe2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001fe6:	4770      	bx	lr
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <ChorusFDBsign_switch+0x48>)
 8001fea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fee:	eef0 7ae7 	vabs.f32	s15, s15
 8001ff2:	eef1 7a67 	vneg.f32	s15, s15
 8001ff6:	edc3 7a01 	vstr	s15, [r3, #4]
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <ChorusFDBsign_switch+0x4c>)
 8001ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002000:	eef0 7ae7 	vabs.f32	s15, s15
 8002004:	eef1 7a67 	vneg.f32	s15, s15
 8002008:	e7eb      	b.n	8001fe2 <ChorusFDBsign_switch+0x1e>
 800200a:	bf00      	nop
 800200c:	200026c4 	.word	0x200026c4
 8002010:	200010cc 	.word	0x200010cc

08002014 <delay_write>:
	return del->mix;
}
/*-------------------------------------------------------------------------------------------*/
void delay_write (monochorus_t *del, float xin)
{
	del->dline[del->in_idx] = xin;
 8002014:	68c3      	ldr	r3, [r0, #12]
 8002016:	eb00 0283 	add.w	r2, r0, r3, lsl #2

	(del->in_idx)++;
 800201a:	3301      	adds	r3, #1
	if (del->in_idx >= DEPTH)
 800201c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
		del->in_idx = 0;
 8002020:	bfa8      	it	ge
 8002022:	2300      	movge	r3, #0
	del->dline[del->in_idx] = xin;
 8002024:	ed82 0a04 	vstr	s0, [r2, #16]
		del->in_idx = 0;
 8002028:	60c3      	str	r3, [r0, #12]
}
 800202a:	4770      	bx	lr

0800202c <delay_read>:
/*-------------------------------------------------------------------------------------------*/
float delay_read (monochorus_t *del, float delay) // "delay" is a floating point number of samples
{
 800202c:	b510      	push	{r4, lr}
	float y_n_2;	// y(n-2)
	float y_n_3;	// y(n-3)
	int32_t idx;

	d = delay;
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 800202e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8002032:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800203a:	ed2d 8b02 	vpush	{d8}
 800203e:	4604      	mov	r4, r0
 8002040:	eeb0 8a40 	vmov.f32	s16, s0
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002044:	d464      	bmi.n	8002110 <delay_read+0xe4>
	if (d > DEPTH-MARGIN) d = DEPTH-MARGIN;
 8002046:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002118 <delay_read+0xec>
 800204a:	eeb4 0a67 	vcmp.f32	s0, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	bfc8      	it	gt
 8002054:	eeb0 8a67 	vmovgt.f32	s16, s15

	i = (int32_t)floorf(d);
 8002058:	eeb0 0a48 	vmov.f32	s0, s16
 800205c:	f004 fad4 	bl	8006608 <floorf>
 8002060:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	f = d - i;

	idx = del->in_idx - i;
 8002064:	68e3      	ldr	r3, [r4, #12]
	if (idx < 0) idx += DEPTH;
 8002066:	ee10 2a10 	vmov	r2, s0
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	bf48      	it	mi
 800206e:	f503 63af 	addmi.w	r3, r3, #1400	; 0x578
	y_n = del->dline[idx]; 		// y(n)
 8002072:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8002076:	edd2 5a04 	vldr	s11, [r2, #16]

	idx--;
	if (idx < 0) idx += DEPTH;
 800207a:	1e5a      	subs	r2, r3, #1
 800207c:	bf48      	it	mi
 800207e:	f203 5277 	addwmi	r2, r3, #1399	; 0x577
	y_n_1 = del->dline[idx];	// y(n-1)
 8002082:	eb04 0382 	add.w	r3, r4, r2, lsl #2
	f = d - i;
 8002086:	eef8 7ac0 	vcvt.f32.s32	s15, s0
	y_n_1 = del->dline[idx];	// y(n-1)
 800208a:	ed93 5a04 	vldr	s10, [r3, #16]
	//return (.5f)*(f-1)*(f-2)*y_n - f*(f-2)*y_n_1 + (.5f)*f*(f-1)*y_n_2 ; // 2nd order Lagrange interpolation

	//return .5f*(f-1)*((f-2)*y_n + f*y_n_2) - f*(f-2)*y_n_1 ;	// 2nd order Lagrange interpolation (faster)

	/* 3rd order Lagrange interpolation :  */
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 800208e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800211c <delay_read+0xf0>
	if (idx < 0) idx += DEPTH;
 8002092:	1e53      	subs	r3, r2, #1
	f = d - i;
 8002094:	ee38 8a67 	vsub.f32	s16, s16, s15
	if (idx < 0) idx += DEPTH;
 8002098:	bf48      	it	mi
 800209a:	f202 5377 	addwmi	r3, r2, #1399	; 0x577
	if (idx < 0) idx += DEPTH;
 800209e:	1e58      	subs	r0, r3, #1
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80020a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80020a4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80020a8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80020ac:	ee78 6a66 	vsub.f32	s13, s16, s13
	if (idx < 0) idx += DEPTH;
 80020b0:	bf48      	it	mi
 80020b2:	f203 5077 	addwmi	r0, r3, #1399	; 0x577
	y_n_2 = del->dline[idx];	// y(n-2)
 80020b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	y_n_3 = del->dline[idx];	// y(n-3)
 80020ba:	eb04 0480 	add.w	r4, r4, r0, lsl #2
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80020be:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80020c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80020c6:	edd4 7a04 	vldr	s15, [r4, #16]
	y_n_2 = del->dline[idx];	// y(n-2)
 80020ca:	edd2 4a04 	vldr	s9, [r2, #16]
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80020ce:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
 80020d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80020d6:	ee66 6a84 	vmul.f32	s13, s13, s8
 80020da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020de:	ee38 7a47 	vsub.f32	s14, s16, s14
 80020e2:	eea6 0aa4 	vfma.f32	s0, s13, s9
 80020e6:	ee67 7a08 	vmul.f32	s15, s14, s16
 80020ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80020ee:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002120 <delay_read+0xf4>
 80020f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80020fa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80020fe:	ee28 8a05 	vmul.f32	s16, s16, s10
 8002102:	eea7 8a25 	vfma.f32	s16, s14, s11

}
 8002106:	eea6 0a08 	vfma.f32	s0, s12, s16
 800210a:	ecbd 8b02 	vpop	{d8}
 800210e:	bd10      	pop	{r4, pc}
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002110:	eeb0 8a67 	vmov.f32	s16, s15
 8002114:	e7a0      	b.n	8002058 <delay_read+0x2c>
 8002116:	bf00      	nop
 8002118:	44ae4000 	.word	0x44ae4000
 800211c:	3e2aaaab 	.word	0x3e2aaaab
 8002120:	be2aaaab 	.word	0xbe2aaaab

08002124 <mono_chorus_compute>:
/*---------------------------------------------------------------------------------------------*/

float mono_chorus_compute(monochorus_t *del, Lfo_t *lfo, float xin)
{
 8002124:	b538      	push	{r3, r4, r5, lr}
	float yout;
	float x1;
	float x2;

	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002126:	f500 55af 	add.w	r5, r0, #5600	; 0x15e0
{
 800212a:	ed2d 8b04 	vpush	{d8-d9}
 800212e:	4604      	mov	r4, r0
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002130:	3510      	adds	r5, #16
 8002132:	4608      	mov	r0, r1
 8002134:	edd5 8a00 	vldr	s17, [r5]
{
 8002138:	eeb0 8a40 	vmov.f32	s16, s0
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 800213c:	f7ff fe1e 	bl	8001d7c <Lfo_SampleCompute>
 8002140:	ee38 0a80 	vadd.f32	s0, s17, s0
 8002144:	eef1 9a08 	vmov.f32	s19, #24	; 0x40c00000  6.0
 8002148:	ee30 0a29 	vadd.f32	s0, s0, s19
 800214c:	4620      	mov	r0, r4
 800214e:	f7ff ff6d 	bl	800202c <delay_read>

	if (del->mode == 1)
 8002152:	f241 53f4 	movw	r3, #5620	; 0x15f4
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002156:	eef0 8a40 	vmov.f32	s17, s0
	if (del->mode == 1)
 800215a:	56e3      	ldrsb	r3, [r4, r3]
 800215c:	ed94 9a01 	vldr	s18, [r4, #4]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d123      	bne.n	80021ac <mono_chorus_compute+0x88>
		x1 = xin + del->fb * x2; // variable delay feedback signal or ...
 8002164:	eeb0 0a48 	vmov.f32	s0, s16
 8002168:	eea9 0a28 	vfma.f32	s0, s18, s17
	else
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal

	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 800216c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002170:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	dc24      	bgt.n	80021c4 <mono_chorus_compute+0xa0>
	x1 = (x1 < -1.0f) ? -1.0f : x1 ;
 800217a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800217e:	eeb4 0a67 	vcmp.f32	s0, s15
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	bf48      	it	mi
 8002188:	eeb0 0a67 	vmovmi.f32	s0, s15

	yout = del->mix * x1 + del->fw * x2;
 800218c:	edd4 7a02 	vldr	s15, [r4, #8]
 8002190:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8002194:	edd4 7a00 	vldr	s15, [r4]
 8002198:	eee7 8a80 	vfma.f32	s17, s15, s0
	//yout = del->mix * xin + del->fw * x2; // not good sounding...
	delay_write(del, x1);
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff ff39 	bl	8002014 <delay_write>

	return yout;
}
 80021a2:	eeb0 0a68 	vmov.f32	s0, s17
 80021a6:	ecbd 8b04 	vpop	{d8-d9}
 80021aa:	bd38      	pop	{r3, r4, r5, pc}
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal
 80021ac:	ed95 0a00 	vldr	s0, [r5]
 80021b0:	4620      	mov	r0, r4
 80021b2:	ee30 0a29 	vadd.f32	s0, s0, s19
 80021b6:	f7ff ff39 	bl	800202c <delay_read>
 80021ba:	eea9 8a00 	vfma.f32	s16, s18, s0
 80021be:	eeb0 0a48 	vmov.f32	s0, s16
 80021c2:	e7d3      	b.n	800216c <mono_chorus_compute+0x48>
	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 80021c4:	eeb0 0a67 	vmov.f32	s0, s15
 80021c8:	e7e0      	b.n	800218c <mono_chorus_compute+0x68>
	...

080021cc <stereoChorus_compute>:

/*--------------------This is the main stereo chorus function : ----------------------------*/

void stereoChorus_compute (float * left_out, float * right_out, float in)
{
 80021cc:	b570      	push	{r4, r5, r6, lr}
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80021ce:	4c0c      	ldr	r4, [pc, #48]	; (8002200 <stereoChorus_compute+0x34>)
{
 80021d0:	ed2d 8b02 	vpush	{d8}
 80021d4:	4606      	mov	r6, r0
 80021d6:	460d      	mov	r5, r1
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80021d8:	480a      	ldr	r0, [pc, #40]	; (8002204 <stereoChorus_compute+0x38>)
 80021da:	4621      	mov	r1, r4
{
 80021dc:	eeb0 8a40 	vmov.f32	s16, s0
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80021e0:	f7ff ffa0 	bl	8002124 <mono_chorus_compute>
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80021e4:	f104 0110 	add.w	r1, r4, #16
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 80021e8:	ed86 0a00 	vstr	s0, [r6]
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <stereoChorus_compute+0x3c>)
 80021ee:	eeb0 0a48 	vmov.f32	s0, s16
 80021f2:	f7ff ff97 	bl	8002124 <mono_chorus_compute>
}
 80021f6:	ecbd 8b02 	vpop	{d8}
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 80021fa:	ed85 0a00 	vstr	s0, [r5]
}
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
 8002200:	200010ac 	.word	0x200010ac
 8002204:	200010cc 	.word	0x200010cc
 8002208:	200026c4 	.word	0x200026c4

0800220c <Delay_init>:

/*-------------------------------------------------------------------------------------------*/
void Delay_init(void)
{
	/* initialize pointers positions for delay effect */
	shift = INIT_DELAY;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <Delay_init+0x18>)
 800220e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8002212:	601a      	str	r2, [r3, #0]
	readpos = delayline;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <Delay_init+0x1c>)
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <Delay_init+0x20>)
 8002218:	601a      	str	r2, [r3, #0]
	writepos = delayline + INIT_DELAY;
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <Delay_init+0x24>)
 800221c:	4a05      	ldr	r2, [pc, #20]	; (8002234 <Delay_init+0x28>)
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200129dc 	.word	0x200129dc
 8002228:	200129d8 	.word	0x200129d8
 800222c:	20003f6c 	.word	0x20003f6c
 8002230:	200129e0 	.word	0x200129e0
 8002234:	20010a8c 	.word	0x20010a8c

08002238 <Delay_clean>:
/*-------------------------------------------------------------------------------------------*/
void Delay_clean(void)
{
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <Delay_clean+0x14>)
{
 800223a:	f643 239a 	movw	r3, #15002	; 0x3a9a
		delayline[i] = 0;
 800223e:	2100      	movs	r1, #0
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 8002240:	3b01      	subs	r3, #1
		delayline[i] = 0;
 8002242:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 8002246:	d1fb      	bne.n	8002240 <Delay_clean+0x8>
}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20003f6c 	.word	0x20003f6c

08002250 <Delay_time_set>:
}
/*-------------------------------------------------------------------------------------------*/
void Delay_time_set(uint8_t val)
{
	float 	*pos;
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 8002250:	ee07 0a90 	vmov	s15, r0
 8002254:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800228c <Delay_time_set+0x3c>
 8002258:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002290 <Delay_time_set+0x40>
 800225c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8002260:	b508      	push	{r3, lr}
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 8002262:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002266:	f004 fa11 	bl	800668c <lrintf>
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <Delay_time_set+0x44>)
 800226c:	6018      	str	r0, [r3, #0]
	pos = writepos - shift;
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <Delay_time_set+0x48>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
	if (pos >= delayline)
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <Delay_time_set+0x4c>)
 8002278:	4298      	cmp	r0, r3
		readpos = pos;
	else
		readpos = pos + DELAYLINE_LEN - 1;
 800227a:	bf38      	it	cc
 800227c:	f500 406a 	addcc.w	r0, r0, #59904	; 0xea00
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <Delay_time_set+0x50>)
 8002282:	bf38      	it	cc
 8002284:	305c      	addcc	r0, #92	; 0x5c
 8002286:	6018      	str	r0, [r3, #0]

}
 8002288:	bd08      	pop	{r3, pc}
 800228a:	bf00      	nop
 800228c:	42e84489 	.word	0x42e84489
 8002290:	437a0000 	.word	0x437a0000
 8002294:	200129dc 	.word	0x200129dc
 8002298:	200129e0 	.word	0x200129e0
 800229c:	20003f6c 	.word	0x20003f6c
 80022a0:	200129d8 	.word	0x200129d8

080022a4 <DelayFeedback_set>:
	fdb *= 0.95f ;//
}
/*-------------------------------------------------------------------------------------------*/
void DelayFeedback_set(uint8_t val)
{
	fdb = val / MIDI_MAX;
 80022a4:	ee07 0a90 	vmov	s15, r0
 80022a8:	eddf 6a04 	vldr	s13, [pc, #16]	; 80022bc <DelayFeedback_set+0x18>
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <DelayFeedback_set+0x1c>)
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022b6:	ed83 7a00 	vstr	s14, [r3]
}
 80022ba:	4770      	bx	lr
 80022bc:	42fe0000 	.word	0x42fe0000
 80022c0:	20000000 	.word	0x20000000

080022c4 <DelayWet_set>:
/*-------------------------------------------------------------------------------------------*/
void DelayWet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 80022c4:	ee07 0a90 	vmov	s15, r0
 80022c8:	eddf 6a04 	vldr	s13, [pc, #16]	; 80022dc <DelayWet_set+0x18>
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <DelayWet_set+0x1c>)
 80022ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022d6:	ed83 7a00 	vstr	s14, [r3]
}
 80022da:	4770      	bx	lr
 80022dc:	42fe0000 	.word	0x42fe0000
 80022e0:	20000004 	.word	0x20000004

080022e4 <Delay_compute>:
float Delay_compute (float x)
{
	float y, dy;

	// (*readpos) : delayed sample read at the output of the delay line
	dy = (1.f - coeff_a1)*(*readpos) + coeff_a1 * old_dy; // apply lowpass filter in the loop
 80022e4:	4925      	ldr	r1, [pc, #148]	; (800237c <Delay_compute+0x98>)
 80022e6:	4a26      	ldr	r2, [pc, #152]	; (8002380 <Delay_compute+0x9c>)
 80022e8:	ed91 7a00 	vldr	s14, [r1]
 80022ec:	eddf 7a25 	vldr	s15, [pc, #148]	; 8002384 <Delay_compute+0xa0>
 80022f0:	6813      	ldr	r3, [r2, #0]
 80022f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f6:	edd3 6a00 	vldr	s13, [r3]
 80022fa:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002388 <Delay_compute+0xa4>
 80022fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
{
 8002302:	b570      	push	{r4, r5, r6, lr}
	old_dy = dy;
 8002304:	ed81 7a00 	vstr	s14, [r1]
	y = x + fdb*dy;
 8002308:	4920      	ldr	r1, [pc, #128]	; (800238c <Delay_compute+0xa8>)
 800230a:	edd1 7a00 	vldr	s15, [r1]
 800230e:	eef0 6a40 	vmov.f32	s13, s0
 8002312:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002316:	4611      	mov	r1, r2

	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 8002318:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800231c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	y = x + fdb*dy;
 8002324:	eeb0 7a66 	vmov.f32	s14, s13
	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 8002328:	dc24      	bgt.n	8002374 <Delay_compute+0x90>
	y = (y < -1.0f) ? -1.0f : y ;
 800232a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800232e:	eeb4 7a66 	vcmp.f32	s14, s13
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	bf48      	it	mi
 8002338:	eeb0 7a66 	vmovmi.f32	s14, s13
	*writepos = y; // write new computed sample at the input of the delay line
 800233c:	4d14      	ldr	r5, [pc, #80]	; (8002390 <Delay_compute+0xac>)

	/* update the delay line pointers : */
	writepos++;
	readpos++;

	if ((writepos - delayline) >= DELAYLINE_LEN)
 800233e:	4815      	ldr	r0, [pc, #84]	; (8002394 <Delay_compute+0xb0>)
	*writepos = y; // write new computed sample at the input of the delay line
 8002340:	682a      	ldr	r2, [r5, #0]
 8002342:	eca2 7a01 	vstmia	r2!, {s14}
	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002346:	f64e 245c 	movw	r4, #59996	; 0xea5c
 800234a:	1a16      	subs	r6, r2, r0
		writepos = delayline; // wrap pointer
 800234c:	42a6      	cmp	r6, r4
 800234e:	bfc8      	it	gt
 8002350:	4602      	movgt	r2, r0
	readpos++;
 8002352:	3304      	adds	r3, #4
		writepos = delayline; // wrap pointer
 8002354:	602a      	str	r2, [r5, #0]

	if ((readpos - delayline) >= DELAYLINE_LEN)
 8002356:	1a1a      	subs	r2, r3, r0
		readpos = delayline;  // wrap pointer
 8002358:	42a2      	cmp	r2, r4
 800235a:	bfc8      	it	gt
 800235c:	4603      	movgt	r3, r0
 800235e:	600b      	str	r3, [r1, #0]

	return (wet * y + (1 - wet) * x);
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <Delay_compute+0xb4>)
 8002362:	edd3 6a00 	vldr	s13, [r3]
 8002366:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800236a:	ee27 0a80 	vmul.f32	s0, s15, s0

}
 800236e:	eea6 0a87 	vfma.f32	s0, s13, s14
 8002372:	bd70      	pop	{r4, r5, r6, pc}
	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 8002374:	eeb0 7a67 	vmov.f32	s14, s15
 8002378:	e7e0      	b.n	800233c <Delay_compute+0x58>
 800237a:	bf00      	nop
 800237c:	200129d4 	.word	0x200129d4
 8002380:	200129d8 	.word	0x200129d8
 8002384:	3f19999a 	.word	0x3f19999a
 8002388:	3ecccccc 	.word	0x3ecccccc
 800238c:	20000000 	.word	0x20000000
 8002390:	200129e0 	.word	0x200129e0
 8002394:	20003f6c 	.word	0x20003f6c
 8002398:	20000004 	.word	0x20000004

0800239c <Drifter_amp_set>:
Drifter_t	d3 _CCM_ ;

/*-------------------------------------------------------------------------------------------*/
void	Drifter_amp_set(uint8_t val)
{
	d1.gain = d2.gain = d3.gain = (val / MIDI_MAX)*(val / MIDI_MAX);
 800239c:	ee07 0a90 	vmov	s15, r0
 80023a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80023c0 <Drifter_amp_set+0x24>
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <Drifter_amp_set+0x28>)
 80023a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023b2:	edc3 7a02 	vstr	s15, [r3, #8]
 80023b6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 80023ba:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

}
 80023be:	4770      	bx	lr
 80023c0:	42fe0000 	.word	0x42fe0000
 80023c4:	20003cbc 	.word	0x20003cbc

080023c8 <Drifter_minFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_minFreq_set(uint8_t val)
{
	d1.fmin = d2.fmin = d3.fmin = .1f + 50 * val / MIDI_MAX;
 80023c8:	2332      	movs	r3, #50	; 0x32
 80023ca:	4358      	muls	r0, r3
 80023cc:	ee07 0a90 	vmov	s15, r0
 80023d0:	eddf 6a08 	vldr	s13, [pc, #32]	; 80023f4 <Drifter_minFreq_set+0x2c>
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <Drifter_minFreq_set+0x30>)
 80023d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023de:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80023fc <Drifter_minFreq_set+0x34>
 80023e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023e6:	edc3 7a01 	vstr	s15, [r3, #4]
 80023ea:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 80023ee:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

}
 80023f2:	4770      	bx	lr
 80023f4:	42fe0000 	.word	0x42fe0000
 80023f8:	20003cbc 	.word	0x20003cbc
 80023fc:	3dcccccd 	.word	0x3dcccccd

08002400 <Drifter_maxFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_maxFreq_set(uint8_t val)
{
	float x;

	x = (1 + 19 * val / MIDI_MAX )* d1.fmin ;
 8002400:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002404:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002408:	ee07 0a90 	vmov	s15, r0
 800240c:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002454 <Drifter_maxFreq_set+0x54>
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <Drifter_maxFreq_set+0x58>)
 8002412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800241e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002422:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8002426:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (x > 10000)
 800242a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800245c <Drifter_maxFreq_set+0x5c>
 800242e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		d1.fmax = d2.fmax = d3.fmax = 10000;
 8002436:	bfc3      	ittte	gt
 8002438:	ed83 7a00 	vstrgt	s14, [r3]
 800243c:	ed83 7a0b 	vstrgt	s14, [r3, #44]	; 0x2c
 8002440:	ed83 7a16 	vstrgt	s14, [r3, #88]	; 0x58
	else {
		d1.fmax = d2.fmax = d3.fmax = x;
 8002444:	edc3 7a00 	vstrle	s15, [r3]
 8002448:	bfdc      	itt	le
 800244a:	edc3 7a0b 	vstrle	s15, [r3, #44]	; 0x2c
 800244e:	edc3 7a16 	vstrle	s15, [r3, #88]	; 0x58
	}
}
 8002452:	4770      	bx	lr
 8002454:	42fe0000 	.word	0x42fe0000
 8002458:	20003cbc 	.word	0x20003cbc
 800245c:	461c4000 	.word	0x461c4000

08002460 <drifter_newSegment>:
/*-------------------------------------------------------------------------------------------*/
void drifter_newSegment(Drifter_t *d) //
{
	d->n = 0;
	d->initial = d->final;
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 8002460:	eddf 7a17 	vldr	s15, [pc, #92]	; 80024c0 <drifter_newSegment+0x60>
 8002464:	ed90 7a00 	vldr	s14, [r0]
 8002468:	ee87 0a87 	vdiv.f32	s0, s15, s14
	d->n = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	6183      	str	r3, [r0, #24]
	d->initial = d->final;
 8002470:	6a03      	ldr	r3, [r0, #32]
 8002472:	61c3      	str	r3, [r0, #28]
{
 8002474:	b510      	push	{r4, lr}
 8002476:	4604      	mov	r4, r0
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 8002478:	ed90 7a01 	vldr	s14, [r0, #4]
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 800247c:	ed80 0a03 	vstr	s0, [r0, #12]
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 8002480:	eec7 0a87 	vdiv.f32	s1, s15, s14
 8002484:	edc0 0a04 	vstr	s1, [r0, #16]
	d->length = frand_a_b(d->minLength,d->maxLength);
 8002488:	f001 f89e 	bl	80035c8 <frand_a_b>
 800248c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	d->final = frand_a_b(-1, 1);
 8002490:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	d->length = frand_a_b(d->minLength,d->maxLength);
 8002494:	ed84 0a05 	vstr	s0, [r4, #20]
	d->final = frand_a_b(-1, 1);
 8002498:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800249c:	f001 f894 	bl	80035c8 <frand_a_b>
	d->slope = (d->final - d->initial) / d->length ;
 80024a0:	edd4 7a07 	vldr	s15, [r4, #28]
	d->final = frand_a_b(-1, 1);
 80024a4:	ed84 0a08 	vstr	s0, [r4, #32]
	d->slope = (d->final - d->initial) / d->length ;
 80024a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80024ac:	edd4 7a05 	vldr	s15, [r4, #20]
 80024b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b4:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80024b8:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 80024bc:	bd10      	pop	{r4, pc}
 80024be:	bf00      	nop
 80024c0:	46ac4400 	.word	0x46ac4400

080024c4 <drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float drifter_nextSample(Drifter_t *d) //
{
	d->out = d->gain * (d->slope * d->n + d->initial);
 80024c4:	edd0 7a06 	vldr	s15, [r0, #24]
 80024c8:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
	(d->n)++;
 80024cc:	6983      	ldr	r3, [r0, #24]
	if (d->n >= d->length)
 80024ce:	6942      	ldr	r2, [r0, #20]
	d->out = d->gain * (d->slope * d->n + d->initial);
 80024d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d4:	edd0 7a07 	vldr	s15, [r0, #28]
 80024d8:	eee6 7a87 	vfma.f32	s15, s13, s14
	(d->n)++;
 80024dc:	3301      	adds	r3, #1
	if (d->n >= d->length)
 80024de:	4293      	cmp	r3, r2
	d->out = d->gain * (d->slope * d->n + d->initial);
 80024e0:	ed90 7a02 	vldr	s14, [r0, #8]
	(d->n)++;
 80024e4:	6183      	str	r3, [r0, #24]
	d->out = d->gain * (d->slope * d->n + d->initial);
 80024e6:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 80024ea:	b510      	push	{r4, lr}
	d->out = d->gain * (d->slope * d->n + d->initial);
 80024ec:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
{
 80024f0:	4604      	mov	r4, r0
	if (d->n >= d->length)
 80024f2:	d301      	bcc.n	80024f8 <drifter_nextSample+0x34>
		{
			drifter_newSegment(d);
 80024f4:	f7ff ffb4 	bl	8002460 <drifter_newSegment>
		}
	return d->out;
}
 80024f8:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80024fc:	bd10      	pop	{r4, pc}
	...

08002500 <d1_drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float d1_drifter_nextSample(void) //
{
	return drifter_nextSample(&d1);
 8002500:	4801      	ldr	r0, [pc, #4]	; (8002508 <d1_drifter_nextSample+0x8>)
 8002502:	f7ff bfdf 	b.w	80024c4 <drifter_nextSample>
 8002506:	bf00      	nop
 8002508:	20003d14 	.word	0x20003d14

0800250c <d2_drifter_nextSample>:
}
/*-------------------------------------------------------------------------------------------*/
float d2_drifter_nextSample(void) //
{
	return drifter_nextSample(&d2);
 800250c:	4801      	ldr	r0, [pc, #4]	; (8002514 <d2_drifter_nextSample+0x8>)
 800250e:	f7ff bfd9 	b.w	80024c4 <drifter_nextSample>
 8002512:	bf00      	nop
 8002514:	20003ce8 	.word	0x20003ce8

08002518 <drifter_prepare>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_prepare(Drifter_t *d)
{
	d->final = 0;
 8002518:	2200      	movs	r2, #0
 800251a:	6202      	str	r2, [r0, #32]
	d->fmax = 4;
 800251c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002520:	6002      	str	r2, [r0, #0]
	d->fmin = 2;
 8002522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002526:	6042      	str	r2, [r0, #4]
	d->gain = .01f;
 8002528:	4a01      	ldr	r2, [pc, #4]	; (8002530 <drifter_prepare+0x18>)
 800252a:	6082      	str	r2, [r0, #8]

	drifter_newSegment(d);
 800252c:	f7ff bf98 	b.w	8002460 <drifter_newSegment>
 8002530:	3c23d70a 	.word	0x3c23d70a

08002534 <drifter_init>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_init(void)
{
 8002534:	b510      	push	{r4, lr}
	drifter_prepare(&d1);
 8002536:	4c07      	ldr	r4, [pc, #28]	; (8002554 <drifter_init+0x20>)
 8002538:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800253c:	f7ff ffec 	bl	8002518 <drifter_prepare>
	drifter_prepare(&d2);
 8002540:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002544:	f7ff ffe8 	bl	8002518 <drifter_prepare>
	drifter_prepare(&d3);
 8002548:	4620      	mov	r0, r4
}
 800254a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	drifter_prepare(&d3);
 800254e:	f7ff bfe3 	b.w	8002518 <drifter_prepare>
 8002552:	bf00      	nop
 8002554:	20003cbc 	.word	0x20003cbc

08002558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255a:	2414      	movs	r4, #20
{
 800255c:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255e:	4622      	mov	r2, r4
 8002560:	2100      	movs	r1, #0
 8002562:	a80d      	add	r0, sp, #52	; 0x34
 8002564:	f003 ff9f 	bl	80064a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002568:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800256a:	4622      	mov	r2, r4
 800256c:	2100      	movs	r1, #0
 800256e:	a807      	add	r0, sp, #28
 8002570:	f003 ff99 	bl	80064a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002574:	4632      	mov	r2, r6
 8002576:	2100      	movs	r1, #0
 8002578:	a803      	add	r0, sp, #12
 800257a:	f003 ff94 	bl	80064a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	2500      	movs	r5, #0
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <SystemClock_Config+0xa4>)
 8002582:	9501      	str	r5, [sp, #4]
 8002584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002586:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <SystemClock_Config+0xa8>)
 8002598:	9502      	str	r5, [sp, #8]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a8:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025aa:	2208      	movs	r2, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ac:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025ae:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025b0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025b2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025b6:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025b8:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ba:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025bc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025be:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025c0:	e9cd 760f 	strd	r7, r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025c4:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c8:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ca:	f003 fb2d 	bl	8005c28 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ce:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d0:	e9cd 3407 	strd	r3, r4, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025d4:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80025d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025dc:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025e0:	a807      	add	r0, sp, #28
 80025e2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e4:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025e6:	f003 fcf3 	bl	8005fd0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80025ea:	2332      	movs	r3, #50	; 0x32
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ec:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80025ee:	9703      	str	r7, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80025f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f4:	f003 fda6 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80025f8:	b019      	add	sp, #100	; 0x64
 80025fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000

08002604 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 8002604:	b51f      	push	{r0, r1, r2, r3, r4, lr}

 	uint8_t data[2];


	/* Assemble 2-byte data in WM8731 format */
    data[0] = ((RegisterAddr<<1)&0xFE) | ((RegisterValue>>8)&0x01);     // 0x0C in your example
 8002606:	f3c1 2300 	ubfx	r3, r1, #8, #1
 800260a:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    data[1] = RegisterValue&0xFF;    // MSB byte of 16bit data


    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT);  // data is the start pointer of our array
 800260e:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
    data[0] = ((RegisterAddr<<1)&0xFE) | ((RegisterValue>>8)&0x01);     // 0x0C in your example
 8002612:	f88d 000c 	strb.w	r0, [sp, #12]
    data[1] = RegisterValue&0xFF;    // MSB byte of 16bit data
 8002616:	f88d 100d 	strb.w	r1, [sp, #13]
    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT);  // data is the start pointer of our array
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	aa03      	add	r2, sp, #12
 800261e:	2302      	movs	r3, #2
 8002620:	2134      	movs	r1, #52	; 0x34
 8002622:	4806      	ldr	r0, [pc, #24]	; (800263c <Codec_WriteRegister+0x38>)
 8002624:	f002 ff6a 	bl	80054fc <HAL_I2C_Master_Transmit>
    /* Check the communication status */
    if(status != HAL_OK)
 8002628:	4604      	mov	r4, r0
 800262a:	b120      	cbz	r0, 8002636 <Codec_WriteRegister+0x32>
    {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800262c:	2201      	movs	r2, #1
 800262e:	2110      	movs	r1, #16
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <Codec_WriteRegister+0x3c>)
 8002632:	f002 fde1 	bl	80051f8 <HAL_GPIO_WritePin>
    }

      // data is the start pointer of our array
	/* Return the verifying value: 0 (Passed) or 1 (Failed) */
	return status;
}
 8002636:	4620      	mov	r0, r4
 8002638:	b004      	add	sp, #16
 800263a:	bd10      	pop	{r4, pc}
 800263c:	20013a14 	.word	0x20013a14
 8002640:	40020000 	.word	0x40020000

08002644 <Codec_Init>:
{
 8002644:	b538      	push	{r3, r4, r5, lr}
	Codec_WriteRegister(0x0f, 0);
 8002646:	2100      	movs	r1, #0
 8002648:	200f      	movs	r0, #15
 800264a:	f7ff ffdb 	bl	8002604 <Codec_WriteRegister>
		Codec_WriteRegister(i, w8731_init_data[i]);
 800264e:	4d05      	ldr	r5, [pc, #20]	; (8002664 <Codec_Init+0x20>)
	Codec_WriteRegister(0x0f, 0);
 8002650:	2400      	movs	r4, #0
		Codec_WriteRegister(i, w8731_init_data[i]);
 8002652:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8002656:	b2e0      	uxtb	r0, r4
 8002658:	3401      	adds	r4, #1
 800265a:	f7ff ffd3 	bl	8002604 <Codec_WriteRegister>
	for(i=0;i<W8731_NUM_REGS;i++)
 800265e:	2c0a      	cmp	r4, #10
 8002660:	d1f7      	bne.n	8002652 <Codec_Init+0xe>
}
 8002662:	bd38      	pop	{r3, r4, r5, pc}
 8002664:	08007a60 	.word	0x08007a60

08002668 <main>:
{
 8002668:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	2614      	movs	r6, #20
{
 800266c:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800266e:	2400      	movs	r4, #0
 8002670:	4d7d      	ldr	r5, [pc, #500]	; (8002868 <main+0x200>)
  HAL_Init();
 8002672:	f002 f897 	bl	80047a4 <HAL_Init>
  SystemClock_Config();
 8002676:	f7ff ff6f 	bl	8002558 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267a:	4632      	mov	r2, r6
 800267c:	2100      	movs	r1, #0
 800267e:	a807      	add	r0, sp, #28
 8002680:	f003 ff11 	bl	80064a6 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002684:	9403      	str	r4, [sp, #12]
 8002686:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8002688:	4878      	ldr	r0, [pc, #480]	; (800286c <main+0x204>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800268a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268e:	632b      	str	r3, [r5, #48]	; 0x30
 8002690:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	9303      	str	r3, [sp, #12]
 8002698:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269a:	9404      	str	r4, [sp, #16]
 800269c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	632b      	str	r3, [r5, #48]	; 0x30
 80026a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	9304      	str	r3, [sp, #16]
 80026ac:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	9405      	str	r4, [sp, #20]
 80026b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	632b      	str	r3, [r5, #48]	; 0x30
 80026b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	9305      	str	r3, [sp, #20]
 80026c0:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	9406      	str	r4, [sp, #24]
 80026c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	632b      	str	r3, [r5, #48]	; 0x30
 80026cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80026d2:	4622      	mov	r2, r4
 80026d4:	4631      	mov	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d8:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80026dc:	f002 fd8c 	bl	80051f8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	a907      	add	r1, sp, #28
 80026e2:	4862      	ldr	r0, [pc, #392]	; (800286c <main+0x204>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80026e4:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	e9cd 7408 	strd	r7, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	f002 fca4 	bl	8005038 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026f0:	9401      	str	r4, [sp, #4]
 80026f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2c2.Init.ClockSpeed = 100000;
 80026f4:	4e5e      	ldr	r6, [pc, #376]	; (8002870 <main+0x208>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026fa:	632b      	str	r3, [r5, #48]	; 0x30
 80026fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002706:	9402      	str	r4, [sp, #8]
 8002708:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800270a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270e:	632b      	str	r3, [r5, #48]	; 0x30
 8002710:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8002712:	4d58      	ldr	r5, [pc, #352]	; (8002874 <main+0x20c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002718:	4622      	mov	r2, r4
 800271a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800271c:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800271e:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002720:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002722:	f002 faa5 	bl	8004c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002726:	200f      	movs	r0, #15
 8002728:	f002 fad6 	bl	8004cd8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800272c:	4622      	mov	r2, r4
 800272e:	4621      	mov	r1, r4
 8002730:	2038      	movs	r0, #56	; 0x38
 8002732:	f002 fa9d 	bl	8004c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002736:	2038      	movs	r0, #56	; 0x38
 8002738:	f002 face 	bl	8004cd8 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 800273c:	4621      	mov	r1, r4
 800273e:	2210      	movs	r2, #16
 8002740:	a807      	add	r0, sp, #28
 8002742:	f003 feb0 	bl	80064a6 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002746:	4a4c      	ldr	r2, [pc, #304]	; (8002878 <main+0x210>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002748:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800274a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274e:	e9c5 2300 	strd	r2, r3, [r5]
  hadc1.Init.NbrOfConversion = 4;
 8002752:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002756:	4b49      	ldr	r3, [pc, #292]	; (800287c <main+0x214>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002758:	f885 4020 	strb.w	r4, [r5, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800275c:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800275e:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002760:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002762:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 8002764:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002766:	762f      	strb	r7, [r5, #24]
  hadc1.Init.NbrOfConversion = 4;
 8002768:	f8c5 801c 	str.w	r8, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800276c:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002770:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002772:	f002 f857 	bl	8004824 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_10;
 8002776:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002778:	a907      	add	r1, sp, #28
 800277a:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 800277c:	e9cd 3707 	strd	r3, r7, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002780:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002782:	f002 f9d3 	bl	8004b2c <HAL_ADC_ConfigChannel>
  sConfig.Rank = 2;
 8002786:	2302      	movs	r3, #2
 8002788:	210b      	movs	r1, #11
 800278a:	e9cd 1307 	strd	r1, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800278e:	4628      	mov	r0, r5
 8002790:	a907      	add	r1, sp, #28
 8002792:	f002 f9cb 	bl	8004b2c <HAL_ADC_ConfigChannel>
  sConfig.Rank = 3;
 8002796:	f04f 090c 	mov.w	r9, #12
 800279a:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800279c:	a907      	add	r1, sp, #28
 800279e:	4628      	mov	r0, r5
  sConfig.Rank = 3;
 80027a0:	e9cd 9307 	strd	r9, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a4:	f002 f9c2 	bl	8004b2c <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a8:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_13;
 80027aa:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ac:	4628      	mov	r0, r5
  sConfig.Rank = 4;
 80027ae:	e9cd 3807 	strd	r3, r8, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027b2:	f002 f9bb 	bl	8004b2c <HAL_ADC_ConfigChannel>
  hi2c2.Instance = I2C2;
 80027b6:	4832      	ldr	r0, [pc, #200]	; (8002880 <main+0x218>)
  hi2c2.Init.ClockSpeed = 100000;
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <main+0x21c>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ba:	6204      	str	r4, [r0, #32]
  hi2c2.Init.ClockSpeed = 100000;
 80027bc:	e9c0 6300 	strd	r6, r3, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2s2.Instance = SPI2;
 80027c4:	4e30      	ldr	r6, [pc, #192]	; (8002888 <main+0x220>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027c6:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c2.Init.OwnAddress1 = 0;
 80027ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027ce:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027d2:	f002 fde7 	bl	80053a4 <HAL_I2C_Init>
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80027d6:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 80028a4 <main+0x23c>
 80027da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027de:	e9c6 c300 	strd	ip, r3, [r6]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80027e2:	6133      	str	r3, [r6, #16]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80027e4:	4630      	mov	r0, r6
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80027e6:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80027ea:	e9c6 3405 	strd	r3, r4, [r6, #20]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80027ee:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80027f2:	e9c6 4707 	strd	r4, r7, [r6, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80027f6:	f002 ff55 	bl	80056a4 <HAL_I2S_Init>
  huart1.Init.BaudRate = 115200;
 80027fa:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 80028a8 <main+0x240>
  huart1.Instance = USART1;
 80027fe:	4823      	ldr	r0, [pc, #140]	; (800288c <main+0x224>)
  huart1.Init.BaudRate = 115200;
 8002800:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002804:	e9c0 e300 	strd	lr, r3, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002808:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800280c:	e9c0 4904 	strd	r4, r9, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002814:	f003 fde4 	bl	80063e0 <HAL_UART_Init>
  hrng.Instance = RNG;
 8002818:	481d      	ldr	r0, [pc, #116]	; (8002890 <main+0x228>)
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <main+0x22c>)
 800281c:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800281e:	f003 fd57 	bl	80062d0 <HAL_RNG_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValArray, 4);
 8002822:	4642      	mov	r2, r8
 8002824:	491c      	ldr	r1, [pc, #112]	; (8002898 <main+0x230>)
	  pin_state = !pin_state;
 8002826:	4c1d      	ldr	r4, [pc, #116]	; (800289c <main+0x234>)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValArray, 4);
 8002828:	4628      	mov	r0, r5
 800282a:	f002 f8a1 	bl	8004970 <HAL_ADC_Start_DMA>
  HAL_I2S_MspInit(&hi2s2);
 800282e:	4630      	mov	r0, r6
 8002830:	f001 fe56 	bl	80044e0 <HAL_I2S_MspInit>
  Synth_Init();
 8002834:	f001 fb54 	bl	8003ee0 <Synth_Init>
  Codec_Init();
 8002838:	f7ff ff04 	bl	8002644 <Codec_Init>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)&audiobuff[0], 2*BUFF_LEN); // size must be in bytes
 800283c:	4630      	mov	r0, r6
 800283e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002842:	4917      	ldr	r1, [pc, #92]	; (80028a0 <main+0x238>)
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, pin_state);
 8002844:	4e09      	ldr	r6, [pc, #36]	; (800286c <main+0x204>)
		  HAL_Delay(adcValArray[1]);
 8002846:	4d14      	ldr	r5, [pc, #80]	; (8002898 <main+0x230>)
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)&audiobuff[0], 2*BUFF_LEN); // size must be in bytes
 8002848:	f002 ffc4 	bl	80057d4 <HAL_I2S_Transmit_DMA>
	  pin_state = !pin_state;
 800284c:	8822      	ldrh	r2, [r4, #0]
 800284e:	fab2 f282 	clz	r2, r2
 8002852:	0952      	lsrs	r2, r2, #5
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, pin_state);
 8002854:	4630      	mov	r0, r6
 8002856:	2104      	movs	r1, #4
	  pin_state = !pin_state;
 8002858:	8022      	strh	r2, [r4, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, pin_state);
 800285a:	f002 fccd 	bl	80051f8 <HAL_GPIO_WritePin>
		  HAL_Delay(adcValArray[1]);
 800285e:	8868      	ldrh	r0, [r5, #2]
 8002860:	f001 ffcc 	bl	80047fc <HAL_Delay>
 8002864:	e7f2      	b.n	800284c <main+0x1e4>
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40020000 	.word	0x40020000
 8002870:	40005800 	.word	0x40005800
 8002874:	20013a70 	.word	0x20013a70
 8002878:	40012000 	.word	0x40012000
 800287c:	0f000001 	.word	0x0f000001
 8002880:	20013a14 	.word	0x20013a14
 8002884:	000186a0 	.word	0x000186a0
 8002888:	20013bc8 	.word	0x20013bc8
 800288c:	20013ab8 	.word	0x20013ab8
 8002890:	20013b58 	.word	0x20013b58
 8002894:	50060800 	.word	0x50060800
 8002898:	20013a68 	.word	0x20013a68
 800289c:	200129e6 	.word	0x200129e6
 80028a0:	20012a6e 	.word	0x20012a6e
 80028a4:	40003800 	.word	0x40003800
 80028a8:	40011000 	.word	0x40011000

080028ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2)
 80028ac:	6802      	ldr	r2, [r0, #0]
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <HAL_I2S_TxCpltCallback+0x14>)
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d104      	bne.n	80028be <HAL_I2S_TxCpltCallback+0x12>
  {
    /* Call the user function which will manage directly transfer complete */
	  make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
 80028b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <HAL_I2S_TxCpltCallback+0x18>)
 80028ba:	f001 bc5b 	b.w	8004174 <make_sound>
  }
}
 80028be:	4770      	bx	lr
 80028c0:	40003800 	.word	0x40003800
 80028c4:	2001323e 	.word	0x2001323e

080028c8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2)
 80028c8:	6802      	ldr	r2, [r0, #0]
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_I2S_TxHalfCpltCallback+0x14>)
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d104      	bne.n	80028da <HAL_I2S_TxHalfCpltCallback+0x12>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  	make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
 80028d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <HAL_I2S_TxHalfCpltCallback+0x18>)
 80028d6:	f001 bc4d 	b.w	8004174 <make_sound>
  }
}
 80028da:	4770      	bx	lr
 80028dc:	40003800 	.word	0x40003800
 80028e0:	20012a6e 	.word	0x20012a6e

080028e4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028e4:	4770      	bx	lr
	...

080028e8 <Lin2Exp>:
}
//------------------------------------------------------------------------------------
// input val in 0 ... 127
// output is an exponential between min and max
float	Lin2Exp(uint8_t val, float min, float max)
{
 80028e8:	b508      	push	{r3, lr}
	return min * powf(max / min, val / MIDI_MAX);
 80028ea:	ee07 0a90 	vmov	s15, r0
{
 80028ee:	ed2d 8b02 	vpush	{d8}
 80028f2:	eeb0 8a40 	vmov.f32	s16, s0
	return min * powf(max / min, val / MIDI_MAX);
 80028f6:	ee80 0a88 	vdiv.f32	s0, s1, s16
 80028fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fe:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002914 <Lin2Exp+0x2c>
 8002902:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8002906:	f003 ff9d 	bl	8006844 <powf>
}
 800290a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800290e:	ecbd 8b02 	vpop	{d8}
 8002912:	bd08      	pop	{r3, pc}
 8002914:	42fe0000 	.word	0x42fe0000

08002918 <tanhXdX>:
//------------------------------------------------------------------------------------

float tanhXdX(float x)
{
	float a = x*x;
 8002918:	ee20 0a00 	vmul.f32	s0, s0, s0
	// IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)
	x = ((a + 105)*a + 945) / ((15*a + 420)*a + 945);
 800291c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002948 <tanhXdX+0x30>
 8002920:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800294c <tanhXdX+0x34>
 8002924:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002928:	eef0 6a67 	vmov.f32	s13, s15
 800292c:	eee7 6a00 	vfma.f32	s13, s14, s0
 8002930:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002950 <tanhXdX+0x38>
 8002934:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
 8002938:	eea0 7a06 	vfma.f32	s14, s0, s12
 800293c:	eee7 7a00 	vfma.f32	s15, s14, s0
	return x;
}
 8002940:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	42d20000 	.word	0x42d20000
 800294c:	446c4000 	.word	0x446c4000
 8002950:	43d20000 	.word	0x43d20000

08002954 <fastTanh>:

//------------------------------------------------------------------------------------
float fastTanh(float var)
{
	if(var < -1.95f)     return -1.0f;
 8002954:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002994 <fastTanh+0x40>
 8002958:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002960:	d411      	bmi.n	8002986 <fastTanh+0x32>
	else if(var > 1.95f) return  1.0f;
 8002962:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002998 <fastTanh+0x44>
 8002966:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	dc0d      	bgt.n	800298c <fastTanh+0x38>
	else return  4.15f*var/(4.29f+var*var);
 8002970:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800299c <fastTanh+0x48>
 8002974:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80029a0 <fastTanh+0x4c>
 8002978:	eee0 7a00 	vfma.f32	s15, s0, s0
 800297c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002980:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8002984:	4770      	bx	lr
	if(var < -1.95f)     return -1.0f;
 8002986:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800298a:	4770      	bx	lr
	else if(var > 1.95f) return  1.0f;
 800298c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	bff9999a 	.word	0xbff9999a
 8002998:	3ff9999a 	.word	0x3ff9999a
 800299c:	408947ae 	.word	0x408947ae
 80029a0:	4084cccd 	.word	0x4084cccd

080029a4 <softClipTwo>:
//------------------------------------------------------------------------------------
float 	softClipTwo(float in)
{
 80029a4:	eef0 5a40 	vmov.f32	s11, s0
 80029a8:	b508      	push	{r3, lr}
	return in * tanhXdX(0.5*in);
 80029aa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80029ae:	ee25 0a80 	vmul.f32	s0, s11, s0
 80029b2:	f7ff ffb1 	bl	8002918 <tanhXdX>
}
 80029b6:	ee20 0a25 	vmul.f32	s0, s0, s11
 80029ba:	bd08      	pop	{r3, pc}

080029bc <fastTan>:
//------------------------------------------------------------------------------------
float 	fastTan(float x)
{
	float A = -15*x+x*x*x;
 80029bc:	ee20 7a00 	vmul.f32	s14, s0, s0
	float B = 3*(-5+2*x*x);
 80029c0:	ee70 6a00 	vadd.f32	s13, s0, s0
	float A = -15*x+x*x*x;
 80029c4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80029c8:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
 80029cc:	eea0 7a27 	vfma.f32	s14, s0, s15
	float B = 3*(-5+2*x*x);
 80029d0:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 80029d4:	eee6 7a80 	vfma.f32	s15, s13, s0
 80029d8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80029dc:	ee27 0a80 	vmul.f32	s0, s15, s0
	return A/B;
}
 80029e0:	ee87 0a00 	vdiv.f32	s0, s14, s0
 80029e4:	4770      	bx	lr

080029e6 <osc_init>:
osc_init(Oscillator_t * op, float_t amp, float_t freq)
{
	op->amp = amp;
	op->last_amp = amp;
	op->freq = freq;
	op->phase = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60c3      	str	r3, [r0, #12]
	op->out = 0;
 80029ea:	61c3      	str	r3, [r0, #28]
	op->modInd = 0;
 80029ec:	6143      	str	r3, [r0, #20]
	op->mul = 1;
 80029ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	op->amp = amp;
 80029f2:	ed80 0a00 	vstr	s0, [r0]
	op->last_amp = amp;
 80029f6:	ed80 0a01 	vstr	s0, [r0, #4]
	op->freq = freq;
 80029fa:	edc0 0a02 	vstr	s1, [r0, #8]
	op->mul = 1;
 80029fe:	6183      	str	r3, [r0, #24]
}
 8002a00:	4770      	bx	lr
	...

08002a04 <Drifter_centralFreq_set>:
	op->freq = f;
}

/*---------------------------------------------------------------*/
void	Drifter_centralFreq_set(uint8_t val)
{
 8002a04:	b508      	push	{r3, lr}
	centralFreq = Lin2Exp(val, 1, 6000);
 8002a06:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002a1c <Drifter_centralFreq_set+0x18>
 8002a0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a0e:	f7ff ff6b 	bl	80028e8 <Lin2Exp>
 8002a12:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <Drifter_centralFreq_set+0x1c>)
 8002a14:	ed83 0a00 	vstr	s0, [r3]
}
 8002a18:	bd08      	pop	{r3, pc}
 8002a1a:	bf00      	nop
 8002a1c:	45bb8000 	.word	0x45bb8000
 8002a20:	2000000c 	.word	0x2000000c

08002a24 <FM_op_freq_set>:
}


/*---------------------------------------------------------------*/
void FM_op_freq_set(Oscillator_t *op, uint8_t val)
{
 8002a24:	b510      	push	{r4, lr}
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 8002a26:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002a3c <FM_op_freq_set+0x18>
{
 8002a2a:	4604      	mov	r4, r0
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 8002a2c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a30:	4608      	mov	r0, r1
 8002a32:	f7ff ff59 	bl	80028e8 <Lin2Exp>
 8002a36:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	45fa0000 	.word	0x45fa0000

08002a40 <FM_op_modInd_set>:
/*-------------------------------------------------------*/
void FM_op_modInd_set(Oscillator_t *op, uint8_t val)
{
	op->modInd = (1.4f * val / MIDI_MAX) * (1.4f * val / MIDI_MAX);
 8002a40:	ee07 1a90 	vmov	s15, r1
 8002a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a48:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002a64 <FM_op_modInd_set+0x24>
 8002a4c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002a68 <FM_op_modInd_set+0x28>
 8002a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a5c:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	3fb33333 	.word	0x3fb33333
 8002a68:	42fe0000 	.word	0x42fe0000

08002a6c <OpSampleCompute0>:

	return  0.5f * (op1.out + op3.out);
}
/*----------------------------------------------------------------------------------------------*/
float_t OpSampleCompute0(Oscillator_t * op) // accurate sine
{
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	ed2d 8b02 	vpush	{d8}
	float_t z;


	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8002a72:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002abc <OpSampleCompute0+0x50>
{
 8002a76:	4604      	mov	r4, r0
	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8002a78:	ed94 8a03 	vldr	s16, [r4, #12]
 8002a7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	da14      	bge.n	8002ab0 <OpSampleCompute0+0x44>
		op->phase -= _2PI;

	z = sinf(op->phase);
 8002a86:	eeb0 0a48 	vmov.f32	s0, s16
 8002a8a:	f003 fe99 	bl	80067c0 <sinf>
	op->out = op->amp*z;
 8002a8e:	edd4 7a00 	vldr	s15, [r4]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002a92:	ed94 7a02 	vldr	s14, [r4, #8]
	op->out = op->amp*z;
 8002a96:	ee20 0a27 	vmul.f32	s0, s0, s15
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002a9a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002ac0 <OpSampleCompute0+0x54>
	op->out = op->amp*z;
 8002a9e:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002aa2:	eea7 8a27 	vfma.f32	s16, s14, s15
 8002aa6:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 8002aaa:	ecbd 8b02 	vpop	{d8}
 8002aae:	bd10      	pop	{r4, pc}
		op->phase -= _2PI;
 8002ab0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002ab4:	ed84 8a03 	vstr	s16, [r4, #12]
 8002ab8:	e7de      	b.n	8002a78 <OpSampleCompute0+0xc>
 8002aba:	bf00      	nop
 8002abc:	40c90fdb 	.word	0x40c90fdb
 8002ac0:	39156592 	.word	0x39156592

08002ac4 <Osc_WT_SINE_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_WT_SINE_SampleCompute(Oscillator_t * op) // basic wave table sine
{
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	ed2d 8b02 	vpush	{d8}
 8002aca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002b3c <Osc_WT_SINE_SampleCompute+0x78>
 8002ace:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002ad0:	edd4 7a03 	vldr	s15, [r4, #12]
 8002ad4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d424      	bmi.n	8002b28 <Osc_WT_SINE_SampleCompute+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002ade:	edd4 7a03 	vldr	s15, [r4, #12]
 8002ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	da22      	bge.n	8002b32 <Osc_WT_SINE_SampleCompute+0x6e>
		op->phase -= _2PI;

	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002aec:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002b40 <Osc_WT_SINE_SampleCompute+0x7c>
 8002af0:	ed94 8a00 	vldr	s16, [r4]
 8002af4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002af8:	f003 fdc8 	bl	800668c <lrintf>
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <Osc_WT_SINE_SampleCompute+0x80>)
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002afe:	edd4 7a03 	vldr	s15, [r4, #12]
 8002b02:	edd4 6a02 	vldr	s13, [r4, #8]
 8002b06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002b48 <Osc_WT_SINE_SampleCompute+0x84>
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002b0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002b0e:	ed90 0a00 	vldr	s0, [r0]
 8002b12:	ee28 0a00 	vmul.f32	s0, s16, s0

	return op->out;
}
 8002b16:	ecbd 8b02 	vpop	{d8}
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002b1a:	eee6 7a87 	vfma.f32	s15, s13, s14
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002b1e:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002b22:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8002b26:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8002b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b2c:	edc4 7a03 	vstr	s15, [r4, #12]
 8002b30:	e7ce      	b.n	8002ad0 <Osc_WT_SINE_SampleCompute+0xc>
		op->phase -= _2PI;
 8002b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b36:	edc4 7a03 	vstr	s15, [r4, #12]
 8002b3a:	e7d0      	b.n	8002ade <Osc_WT_SINE_SampleCompute+0x1a>
 8002b3c:	40c90fdb 	.word	0x40c90fdb
 8002b40:	4322f983 	.word	0x4322f983
 8002b44:	080153bc 	.word	0x080153bc
 8002b48:	39156592 	.word	0x39156592

08002b4c <Osc_FM_sine_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_FM_sine_SampleCompute(Oscillator_t * op, float FMinput) // basic wave table sine with FM
{

	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8002b4c:	edd0 7a05 	vldr	s15, [r0, #20]
 8002b50:	ed90 7a02 	vldr	s14, [r0, #8]
 8002b54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002b58:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002bd0 <Osc_FM_sine_SampleCompute+0x84>
 8002b5c:	eea7 0a27 	vfma.f32	s0, s14, s15
{
 8002b60:	b510      	push	{r4, lr}
	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8002b62:	edd0 7a03 	vldr	s15, [r0, #12]
 8002b66:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002bd4 <Osc_FM_sine_SampleCompute+0x88>
 8002b6a:	ee37 0a80 	vadd.f32	s0, s15, s0
{
 8002b6e:	ed2d 8b02 	vpush	{d8}
 8002b72:	4604      	mov	r4, r0
	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8002b74:	ed80 0a03 	vstr	s0, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002b78:	edd4 7a03 	vldr	s15, [r4, #12]
 8002b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	d41a      	bmi.n	8002bbc <Osc_FM_sine_SampleCompute+0x70>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002b86:	edd4 7a03 	vldr	s15, [r4, #12]
 8002b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	da18      	bge.n	8002bc6 <Osc_FM_sine_SampleCompute+0x7a>
		op->phase -= _2PI;
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002b94:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002bd8 <Osc_FM_sine_SampleCompute+0x8c>
 8002b98:	ed94 8a00 	vldr	s16, [r4]
 8002b9c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002ba0:	f003 fd74 	bl	800668c <lrintf>
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <Osc_FM_sine_SampleCompute+0x90>)
 8002ba6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002baa:	ed90 0a00 	vldr	s0, [r0]
 8002bae:	ee28 0a00 	vmul.f32	s0, s16, s0
	return op->out;
}
 8002bb2:	ecbd 8b02 	vpop	{d8}
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002bb6:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8002bba:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8002bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bc0:	edc4 7a03 	vstr	s15, [r4, #12]
 8002bc4:	e7d8      	b.n	8002b78 <Osc_FM_sine_SampleCompute+0x2c>
		op->phase -= _2PI;
 8002bc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bca:	edc4 7a03 	vstr	s15, [r4, #12]
 8002bce:	e7da      	b.n	8002b86 <Osc_FM_sine_SampleCompute+0x3a>
 8002bd0:	39156592 	.word	0x39156592
 8002bd4:	40c90fdb 	.word	0x40c90fdb
 8002bd8:	4322f983 	.word	0x4322f983
 8002bdc:	080153bc 	.word	0x080153bc

08002be0 <FM2_sampleCompute>:
{
 8002be0:	b510      	push	{r4, lr}
	op1.freq = frq;
 8002be2:	4c1c      	ldr	r4, [pc, #112]	; (8002c54 <FM2_sampleCompute+0x74>)
	op2.freq = op2.mul * frq;
 8002be4:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
	op1.freq = frq;
 8002be8:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
	op2.freq = op2.mul * frq;
 8002bec:	ee67 7a80 	vmul.f32	s15, s15, s0
{
 8002bf0:	ed2d 8b02 	vpush	{d8}
	op2.freq = op2.mul * frq;
 8002bf4:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
	op3.freq = op3.mul * frq;
 8002bf8:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 8002bfc:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8002c58 <FM2_sampleCompute+0x78>
	op3.freq = op3.mul * frq;
 8002c00:	ee67 7a80 	vmul.f32	s15, s15, s0
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 8002c04:	f104 0040 	add.w	r0, r4, #64	; 0x40
	op3.freq = op3.mul * frq;
 8002c08:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	op4.freq = op4.mul * frq;
 8002c0c:	edd4 7a06 	vldr	s15, [r4, #24]
 8002c10:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c14:	ed84 0a02 	vstr	s0, [r4, #8]
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 8002c18:	eeb0 0a48 	vmov.f32	s0, s16
 8002c1c:	f7ff ff96 	bl	8002b4c <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op1, in);
 8002c20:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8002c24:	f7ff ff92 	bl	8002b4c <Osc_FM_sine_SampleCompute>
	in = Osc_FM_sine_SampleCompute(&op4, 0);
 8002c28:	eeb0 0a48 	vmov.f32	s0, s16
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff ff8d 	bl	8002b4c <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op3, in);
 8002c32:	f104 0020 	add.w	r0, r4, #32
 8002c36:	f7ff ff89 	bl	8002b4c <Osc_FM_sine_SampleCompute>
}
 8002c3a:	ecbd 8b02 	vpop	{d8}
	return  0.5f * (op1.out + op3.out);
 8002c3e:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8002c42:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8002c46:	ee77 7a80 	vadd.f32	s15, s15, s0
}
 8002c4a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002c4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c52:	bd10      	pop	{r4, pc}
 8002c54:	20003d40 	.word	0x20003d40
 8002c58:	00000000 	.word	0x00000000

08002c5c <OpSampleCompute7bis>:
/*-------------------------------------------------------*/
float_t OpSampleCompute7bis(Oscillator_t * op) // basic wave table positive sine : 0 < output < op.amp
{
 8002c5c:	b510      	push	{r4, lr}
 8002c5e:	ed2d 8b02 	vpush	{d8}
 8002c62:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002ce4 <OpSampleCompute7bis+0x88>
 8002c66:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002c68:	edd4 7a03 	vldr	s15, [r4, #12]
 8002c6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	d42c      	bmi.n	8002cd0 <OpSampleCompute7bis+0x74>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002c76:	edd4 7a03 	vldr	s15, [r4, #12]
 8002c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c82:	da2a      	bge.n	8002cda <OpSampleCompute7bis+0x7e>
		op->phase -= _2PI;

	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8002c84:	ed94 0a00 	vldr	s0, [r4]
 8002c88:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8002c8c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8002c90:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002ce8 <OpSampleCompute7bis+0x8c>
 8002c94:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c98:	f003 fcf8 	bl	800668c <lrintf>
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <OpSampleCompute7bis+0x90>)
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002c9e:	edd4 6a02 	vldr	s13, [r4, #8]
 8002ca2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002cf0 <OpSampleCompute7bis+0x94>
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8002ca6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002caa:	ed90 0a00 	vldr	s0, [r0]
 8002cae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002cb2:	ee30 0a27 	vadd.f32	s0, s0, s15
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002cb6:	edd4 7a03 	vldr	s15, [r4, #12]
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8002cba:	ee20 0a08 	vmul.f32	s0, s0, s16

	return op->out;
}
 8002cbe:	ecbd 8b02 	vpop	{d8}
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002cc2:	eee6 7a87 	vfma.f32	s15, s13, s14
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8002cc6:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002cca:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8002cce:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8002cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cd4:	edc4 7a03 	vstr	s15, [r4, #12]
 8002cd8:	e7c6      	b.n	8002c68 <OpSampleCompute7bis+0xc>
		op->phase -= _2PI;
 8002cda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cde:	edc4 7a03 	vstr	s15, [r4, #12]
 8002ce2:	e7c8      	b.n	8002c76 <OpSampleCompute7bis+0x1a>
 8002ce4:	40c90fdb 	.word	0x40c90fdb
 8002ce8:	4322f983 	.word	0x4322f983
 8002cec:	080153bc 	.word	0x080153bc
 8002cf0:	39156592 	.word	0x39156592

08002cf4 <OpSampleCompute1>:
/*-------------------------------------------------------*/
float_t OpSampleCompute1(Oscillator_t * op) // basic sawtooth^2
{
 8002cf4:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002d80 <OpSampleCompute1+0x8c>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002cf8:	edd0 7a03 	vldr	s15, [r0, #12]
 8002cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d04:	d431      	bmi.n	8002d6a <OpSampleCompute1+0x76>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002d06:	ed90 7a03 	vldr	s14, [r0, #12]
 8002d0a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	da2f      	bge.n	8002d74 <OpSampleCompute1+0x80>
 8002d14:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8002d84 <OpSampleCompute1+0x90>
 8002d18:	edd0 7a00 	vldr	s15, [r0]
 8002d1c:	eec7 6a06 	vdiv.f32	s13, s14, s12
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8002d20:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8002d28:	bf5b      	ittet	pl
 8002d2a:	eeb0 6a00 	vmovpl.f32	s12, #0	; 0x40000000  2.0
 8002d2e:	ee76 6ac6 	vsubpl.f32	s13, s13, s12
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8002d32:	eeb6 6a00 	vmovmi.f32	s12, #96	; 0x3f000000  0.5
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8002d36:	ee66 7aa7 	vmulpl.f32	s15, s13, s15
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8002d3a:	bf4b      	itete	mi
 8002d3c:	ee67 7a86 	vmulmi.f32	s15, s15, s12
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8002d40:	ee67 7aa6 	vmulpl.f32	s15, s15, s13
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8002d44:	ee67 7aa6 	vmulmi.f32	s15, s15, s13
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8002d48:	eefe 6a00 	vmovpl.f32	s13, #224	; 0xbf000000 -0.5
 8002d4c:	ee67 7aa6 	vmul.f32	s15, s15, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002d50:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8002d54:	edc0 7a07 	vstr	s15, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002d58:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002d88 <OpSampleCompute1+0x94>
	return op->out;
}
 8002d5c:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002d60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002d64:	ed80 7a03 	vstr	s14, [r0, #12]
}
 8002d68:	4770      	bx	lr
		op->phase += _2PI;
 8002d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d6e:	edc0 7a03 	vstr	s15, [r0, #12]
 8002d72:	e7c1      	b.n	8002cf8 <OpSampleCompute1+0x4>
		op->phase -= _2PI;
 8002d74:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002d78:	ed80 7a03 	vstr	s14, [r0, #12]
 8002d7c:	e7c3      	b.n	8002d06 <OpSampleCompute1+0x12>
 8002d7e:	bf00      	nop
 8002d80:	40c90fdb 	.word	0x40c90fdb
 8002d84:	40490fdb 	.word	0x40490fdb
 8002d88:	39156592 	.word	0x39156592

08002d8c <OpSampleCompute2>:
/*-------------------------------------------------------*/
float_t OpSampleCompute2(Oscillator_t * op) // basic sawtooth
{
 8002d8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002e04 <OpSampleCompute2+0x78>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002d90:	edd0 7a03 	vldr	s15, [r0, #12]
 8002d94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	d428      	bmi.n	8002df0 <OpSampleCompute2+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002d9e:	edd0 7a03 	vldr	s15, [r0, #12]
 8002da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	da26      	bge.n	8002dfa <OpSampleCompute2+0x6e>
 8002dac:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8002e08 <OpSampleCompute2+0x7c>
 8002db0:	ed90 7a00 	vldr	s14, [r0]
 8002db4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002db8:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002dbc:	ee87 7a86 	vdiv.f32	s14, s15, s12
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = 0.5f*op->amp * (op->phase / _PI);
 8002dc0:	eef4 7ac6 	vcmpe.f32	s15, s12
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 8002dc8:	bf5c      	itt	pl
 8002dca:	eeb0 6a00 	vmovpl.f32	s12, #0	; 0x40000000  2.0
 8002dce:	ee37 7a46 	vsubpl.f32	s14, s14, s12
 8002dd2:	ee27 7a26 	vmul.f32	s14, s14, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002dd6:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 8002dda:	ed80 7a07 	vstr	s14, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002dde:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002e0c <OpSampleCompute2+0x80>
	return op->out;
}
 8002de2:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002de6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002dea:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8002dee:	4770      	bx	lr
		op->phase += _2PI;
 8002df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002df4:	edc0 7a03 	vstr	s15, [r0, #12]
 8002df8:	e7ca      	b.n	8002d90 <OpSampleCompute2+0x4>
		op->phase -= _2PI;
 8002dfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dfe:	edc0 7a03 	vstr	s15, [r0, #12]
 8002e02:	e7cc      	b.n	8002d9e <OpSampleCompute2+0x12>
 8002e04:	40c90fdb 	.word	0x40c90fdb
 8002e08:	40490fdb 	.word	0x40490fdb
 8002e0c:	39156592 	.word	0x39156592

08002e10 <OpSampleCompute3>:
/*-------------------------------------------------------*/
float_t OpSampleCompute3(Oscillator_t * op) // sin(phi)^5
{
 8002e10:	b510      	push	{r4, lr}
 8002e12:	ed2d 8b02 	vpush	{d8}
 8002e16:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e88 <OpSampleCompute3+0x78>
 8002e1a:	4604      	mov	r4, r0
	float_t z;

	while (op->phase < 0) // keep phase in [0, 2pi]
 8002e1c:	edd4 7a03 	vldr	s15, [r4, #12]
 8002e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d423      	bmi.n	8002e72 <OpSampleCompute3+0x62>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002e2a:	ed94 8a03 	vldr	s16, [r4, #12]
 8002e2e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e36:	da21      	bge.n	8002e7c <OpSampleCompute3+0x6c>
		op->phase -= _2PI;

	z = sinf(op->phase);
 8002e38:	eeb0 0a48 	vmov.f32	s0, s16
 8002e3c:	f003 fcc0 	bl	80067c0 <sinf>
	op->out = op->amp*z*z*z*z*z;
 8002e40:	edd4 7a00 	vldr	s15, [r4]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002e44:	ed94 7a02 	vldr	s14, [r4, #8]
	op->out = op->amp*z*z*z*z*z;
 8002e48:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002e4c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002e50:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002e54:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002e58:	ee27 0a80 	vmul.f32	s0, s15, s0
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002e5c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002e8c <OpSampleCompute3+0x7c>
	op->out = op->amp*z*z*z*z*z;
 8002e60:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002e64:	eea7 8a27 	vfma.f32	s16, s14, s15
 8002e68:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 8002e6c:	ecbd 8b02 	vpop	{d8}
 8002e70:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8002e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e76:	edc4 7a03 	vstr	s15, [r4, #12]
 8002e7a:	e7cf      	b.n	8002e1c <OpSampleCompute3+0xc>
		op->phase -= _2PI;
 8002e7c:	ee38 8a47 	vsub.f32	s16, s16, s14
 8002e80:	ed84 8a03 	vstr	s16, [r4, #12]
 8002e84:	e7d1      	b.n	8002e2a <OpSampleCompute3+0x1a>
 8002e86:	bf00      	nop
 8002e88:	40c90fdb 	.word	0x40c90fdb
 8002e8c:	39156592 	.word	0x39156592

08002e90 <OpSampleCompute5>:

	return op->out;
}
/*-------------------------------------------------------*/
float_t OpSampleCompute5(Oscillator_t * op) // Naive Triangle
{
 8002e90:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f08 <OpSampleCompute5+0x78>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002e94:	edd0 7a03 	vldr	s15, [r0, #12]
 8002e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	d428      	bmi.n	8002ef4 <OpSampleCompute5+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002ea2:	edd0 7a03 	vldr	s15, [r0, #12]
 8002ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eae:	da26      	bge.n	8002efe <OpSampleCompute5+0x6e>
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 8002eb0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f0c <OpSampleCompute5+0x7c>
 8002eb4:	edd0 6a00 	vldr	s13, [r0]
 8002eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec0:	bf4b      	itete	mi
 8002ec2:	ed9f 6a13 	vldrmi	s12, [pc, #76]	; 8002f10 <OpSampleCompute5+0x80>
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 8002ec6:	ed9f 6a13 	vldrpl	s12, [pc, #76]	; 8002f14 <OpSampleCompute5+0x84>
	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 8002eca:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 8002ece:	eeb8 7a08 	vmovpl.f32	s14, #136	; 0xc0400000 -3.0
 8002ed2:	eea7 7a86 	vfma.f32	s14, s15, s12
 8002ed6:	ee27 7a26 	vmul.f32	s14, s14, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002eda:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 8002ede:	ed80 7a07 	vstr	s14, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002ee2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002f18 <OpSampleCompute5+0x88>
	return op->out;
}
 8002ee6:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002eea:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002eee:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8002ef2:	4770      	bx	lr
		op->phase += _2PI;
 8002ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef8:	edc0 7a03 	vstr	s15, [r0, #12]
 8002efc:	e7ca      	b.n	8002e94 <OpSampleCompute5+0x4>
		op->phase -= _2PI;
 8002efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f02:	edc0 7a03 	vstr	s15, [r0, #12]
 8002f06:	e7cc      	b.n	8002ea2 <OpSampleCompute5+0x12>
 8002f08:	40c90fdb 	.word	0x40c90fdb
 8002f0c:	40490fdb 	.word	0x40490fdb
 8002f10:	bf22f983 	.word	0xbf22f983
 8002f14:	3f22f983 	.word	0x3f22f983
 8002f18:	39156592 	.word	0x39156592

08002f1c <MorphingSaw_SampleCompute>:
/*-------------------------------------------------------*/
float_t MorphingSaw_SampleCompute(Oscillator_t * op) // Morphing sawtooth, tends to a triangle at high freqs
{
 8002f1c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002fe8 <MorphingSaw_SampleCompute+0xcc>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002f20:	edd0 7a03 	vldr	s15, [r0, #12]
 8002f24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	d441      	bmi.n	8002fb2 <MorphingSaw_SampleCompute+0x96>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8002f2e:	edd0 7a03 	vldr	s15, [r0, #12]
 8002f32:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	da3f      	bge.n	8002fbc <MorphingSaw_SampleCompute+0xa0>
		op->phase -= _2PI;

	if (op->freq < 8000) op->phi0 = _PI/8000*(op->freq); else op->phi0 = _PI;
 8002f3c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002fec <MorphingSaw_SampleCompute+0xd0>
 8002f40:	edd0 5a02 	vldr	s11, [r0, #8]
 8002f44:	ed90 5a00 	vldr	s10, [r0]
 8002f48:	eef4 5ac7 	vcmpe.f32	s11, s14
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f50:	bf4d      	iteet	mi
 8002f52:	ed9f 7a27 	vldrmi	s14, [pc, #156]	; 8002ff0 <MorphingSaw_SampleCompute+0xd4>
 8002f56:	4b27      	ldrpl	r3, [pc, #156]	; (8002ff4 <MorphingSaw_SampleCompute+0xd8>)
 8002f58:	6103      	strpl	r3, [r0, #16]
 8002f5a:	ee25 7a87 	vmulmi.f32	s14, s11, s14
 8002f5e:	bf48      	it	mi
 8002f60:	ed80 7a04 	vstrmi	s14, [r0, #16]
	if (op->phi0 <= .0001f) op->phi0 = .0001f;
 8002f64:	ed90 6a04 	vldr	s12, [r0, #16]
 8002f68:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ff8 <MorphingSaw_SampleCompute+0xdc>
 8002f6c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f74:	bf98      	it	ls
 8002f76:	ed80 7a04 	vstrls	s14, [r0, #16]
	if (op->phase < op->phi0) op->out = op->amp * (-2/op->phi0 * op->phase + 1);
 8002f7a:	ed90 6a04 	vldr	s12, [r0, #16]
 8002f7e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8002f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f86:	d51e      	bpl.n	8002fc6 <MorphingSaw_SampleCompute+0xaa>
 8002f88:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002f8c:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8002f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f94:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002f98:	ee27 7a05 	vmul.f32	s14, s14, s10
 8002f9c:	ed80 7a07 	vstr	s14, [r0, #28]
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002fa0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002ffc <MorphingSaw_SampleCompute+0xe0>
	return op->out;
}
 8002fa4:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002fa8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8002fac:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8002fb0:	4770      	bx	lr
		op->phase += _2PI;
 8002fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fb6:	edc0 7a03 	vstr	s15, [r0, #12]
 8002fba:	e7b1      	b.n	8002f20 <MorphingSaw_SampleCompute+0x4>
		op->phase -= _2PI;
 8002fbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fc0:	edc0 7a03 	vstr	s15, [r0, #12]
 8002fc4:	e7b3      	b.n	8002f2e <MorphingSaw_SampleCompute+0x12>
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);
 8002fc6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003000 <MorphingSaw_SampleCompute+0xe4>
 8002fca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8002fce:	eea7 7aa4 	vfma.f32	s14, s15, s9
 8002fd2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8002fd6:	ee37 7a46 	vsub.f32	s14, s14, s12
 8002fda:	ee27 7a05 	vmul.f32	s14, s14, s10
 8002fde:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8002fe2:	ed80 6a07 	vstr	s12, [r0, #28]
 8002fe6:	e7db      	b.n	8002fa0 <MorphingSaw_SampleCompute+0x84>
 8002fe8:	40c90fdb 	.word	0x40c90fdb
 8002fec:	45fa0000 	.word	0x45fa0000
 8002ff0:	39cde32e 	.word	0x39cde32e
 8002ff4:	40490fdb 	.word	0x40490fdb
 8002ff8:	38d1b717 	.word	0x38d1b717
 8002ffc:	39156592 	.word	0x39156592
 8003000:	c0c90fdb 	.word	0xc0c90fdb

08003004 <Drifters_sampleCompute>:
{
 8003004:	b538      	push	{r3, r4, r5, lr}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 8003006:	4823      	ldr	r0, [pc, #140]	; (8003094 <Drifters_sampleCompute+0x90>)
 8003008:	4d23      	ldr	r5, [pc, #140]	; (8003098 <Drifters_sampleCompute+0x94>)
	op->freq = f;
 800300a:	4c24      	ldr	r4, [pc, #144]	; (800309c <Drifters_sampleCompute+0x98>)
{
 800300c:	ed2d 8b02 	vpush	{d8}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 8003010:	f7ff fa58 	bl	80024c4 <drifter_nextSample>
 8003014:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8003018:	ee30 0a28 	vadd.f32	s0, s0, s17
 800301c:	edd5 7a00 	vldr	s15, [r5]
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 8003020:	481f      	ldr	r0, [pc, #124]	; (80030a0 <Drifters_sampleCompute+0x9c>)
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 8003022:	eeb3 8a09 	vmov.f32	s16, #57	; 0x41c80000  25.0
 8003026:	eeb0 7a48 	vmov.f32	s14, s16
 800302a:	eea0 7a27 	vfma.f32	s14, s0, s15
	op->freq = f;
 800302e:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 8003032:	f7ff fa47 	bl	80024c4 <drifter_nextSample>
 8003036:	edd5 7a00 	vldr	s15, [r5]
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 800303a:	481a      	ldr	r0, [pc, #104]	; (80030a4 <Drifters_sampleCompute+0xa0>)
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 800303c:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003040:	eeb0 7a48 	vmov.f32	s14, s16
 8003044:	eea0 7a27 	vfma.f32	s14, s0, s15
	op->freq = f;
 8003048:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 800304c:	f7ff fa3a 	bl	80024c4 <drifter_nextSample>
 8003050:	edd5 7a00 	vldr	s15, [r5]
 8003054:	ee30 0a28 	vadd.f32	s0, s0, s17
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003058:	f104 0060 	add.w	r0, r4, #96	; 0x60
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 800305c:	eea0 8a27 	vfma.f32	s16, s0, s15
	op->freq = f;
 8003060:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003064:	f7ff ff5a 	bl	8002f1c <MorphingSaw_SampleCompute>
 8003068:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800306c:	eeb0 4a40 	vmov.f32	s8, s0
 8003070:	f7ff ff54 	bl	8002f1c <MorphingSaw_SampleCompute>
 8003074:	f104 0020 	add.w	r0, r4, #32
 8003078:	ee34 4a00 	vadd.f32	s8, s8, s0
 800307c:	f7ff ff4e 	bl	8002f1c <MorphingSaw_SampleCompute>
}
 8003080:	ecbd 8b02 	vpop	{d8}
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003084:	ee34 0a00 	vadd.f32	s0, s8, s0
}
 8003088:	eddf 7a07 	vldr	s15, [pc, #28]	; 80030a8 <Drifters_sampleCompute+0xa4>
 800308c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003090:	bd38      	pop	{r3, r4, r5, pc}
 8003092:	bf00      	nop
 8003094:	20003d14 	.word	0x20003d14
 8003098:	2000000c 	.word	0x2000000c
 800309c:	20003d40 	.word	0x20003d40
 80030a0:	20003ce8 	.word	0x20003ce8
 80030a4:	20003cbc 	.word	0x20003cbc
 80030a8:	3ea8f5c3 	.word	0x3ea8f5c3

080030ac <AdditiveGen_newWaveform>:
	op->phase += _2PI * Ts * op->freq; // increment phase
	return op->out;
}
/*-------------------------------------------------------*/
void AdditiveGen_newWaveform(void) //
{
 80030ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t k;

	a[0] = a[1] = 1;
 80030b0:	4c1a      	ldr	r4, [pc, #104]	; (800311c <AdditiveGen_newWaveform+0x70>)
{
 80030b2:	ed2d 8b04 	vpush	{d8-d9}
	a[0] = a[1] = 1;
 80030b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	ph[0] = ph[1] = 0;
 80030ba:	2200      	movs	r2, #0

	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
	{
		a[k] = frand_a_b(0.001f , 0.98f);
 80030bc:	ed9f 9a18 	vldr	s18, [pc, #96]	; 8003120 <AdditiveGen_newWaveform+0x74>
 80030c0:	eddf 8a18 	vldr	s17, [pc, #96]	; 8003124 <AdditiveGen_newWaveform+0x78>
	a[0] = a[1] = 1;
 80030c4:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 80030c8:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
	ph[0] = ph[1] = 0;
 80030cc:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80030d0:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 80030d4:	f104 0688 	add.w	r6, r4, #136	; 0x88
 80030d8:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
 80030dc:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 80030e0:	eeb0 8a67 	vmov.f32	s16, s15
 80030e4:	4615      	mov	r5, r2
		a[k] = frand_a_b(0.001f , 0.98f);
 80030e6:	eef0 0a49 	vmov.f32	s1, s18
 80030ea:	eeb0 0a68 	vmov.f32	s0, s17
 80030ee:	f000 fa6b 	bl	80035c8 <frand_a_b>
 80030f2:	eca6 0a01 	vstmia	r6!, {s0}
		a[0] += a[k];
 80030f6:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
		ph[k] = 0;
 80030fa:	f847 5b04 	str.w	r5, [r7], #4
		a[0] += a[k];
 80030fe:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8003102:	4546      	cmp	r6, r8
		a[0] += a[k];
 8003104:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8003108:	d1ed      	bne.n	80030e6 <AdditiveGen_newWaveform+0x3a>
	}
	a[0] = 1.f / a[0];
 800310a:	eec8 7a00 	vdiv.f32	s15, s16, s0
}
 800310e:	ecbd 8b04 	vpop	{d8-d9}
	a[0] = 1.f / a[0];
 8003112:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
}
 8003116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800311a:	bf00      	nop
 800311c:	20003d40 	.word	0x20003d40
 8003120:	3f7ae148 	.word	0x3f7ae148
 8003124:	3a83126f 	.word	0x3a83126f

08003128 <AdditiveGen_SampleCompute>:
/*-------------------------------------------------------*/
float_t AdditiveGen_SampleCompute(Oscillator_t * op) // additive sine generator
{
 8003128:	b530      	push	{r4, r5, lr}
 800312a:	4c27      	ldr	r4, [pc, #156]	; (80031c8 <AdditiveGen_SampleCompute+0xa0>)
	uint8_t k = 1;
	float_t y = 0;
 800312c:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80031cc <AdditiveGen_SampleCompute+0xa4>

	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003130:	eddf 5a27 	vldr	s11, [pc, #156]	; 80031d0 <AdditiveGen_SampleCompute+0xa8>
	{
		//while (ph[k] < 0) // keep phase in [0, 2pi]
		//	ph[k] += _2PI;
		while (ph[k] >= _2PI)
 8003134:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80031d4 <AdditiveGen_SampleCompute+0xac>
			ph[k] -= _2PI;
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 8003138:	4d27      	ldr	r5, [pc, #156]	; (80031d8 <AdditiveGen_SampleCompute+0xb0>)
 800313a:	ed9f 5a28 	vldr	s10, [pc, #160]	; 80031dc <AdditiveGen_SampleCompute+0xb4>
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 800313e:	eddf 4a28 	vldr	s9, [pc, #160]	; 80031e0 <AdditiveGen_SampleCompute+0xb8>
 8003142:	f104 012c 	add.w	r1, r4, #44	; 0x2c
{
 8003146:	2201      	movs	r2, #1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003148:	ee07 2a90 	vmov	s15, r2
 800314c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003150:	edd0 7a02 	vldr	s15, [r0, #8]
 8003154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003158:	eef4 7ae5 	vcmpe.f32	s15, s11
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	d404      	bmi.n	800316c <AdditiveGen_SampleCompute+0x44>
 8003162:	e024      	b.n	80031ae <AdditiveGen_SampleCompute+0x86>
			ph[k] -= _2PI;
 8003164:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003168:	edc1 7a00 	vstr	s15, [r1]
		while (ph[k] >= _2PI)
 800316c:	edd1 7a00 	vldr	s15, [r1]
 8003170:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003178:	daf4      	bge.n	8003164 <AdditiveGen_SampleCompute+0x3c>
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 800317a:	ee27 7a85 	vmul.f32	s14, s15, s10
 800317e:	ecb4 4a01 	vldmia	r4!, {s8}
 8003182:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 8003186:	ee66 6aa4 	vmul.f32	s13, s13, s9
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 800318a:	ee17 3a10 	vmov	r3, s14
 800318e:	b29b      	uxth	r3, r3
 8003190:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003194:	ed93 7a00 	vldr	s14, [r3]
 8003198:	eea4 0a07 	vfma.f32	s0, s8, s14
 800319c:	3201      	adds	r2, #1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 800319e:	2a0b      	cmp	r2, #11
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 80031a0:	ed90 7a02 	vldr	s14, [r0, #8]
 80031a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80031a8:	ece1 7a01 	vstmia	r1!, {s15}
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 80031ac:	d1cc      	bne.n	8003148 <AdditiveGen_SampleCompute+0x20>
		k++;
	}
	y = a[0] * y;
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <AdditiveGen_SampleCompute+0xbc>)
 80031b0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80031b4:	ee20 0a27 	vmul.f32	s0, s0, s15

	op->out = op->amp * y;
 80031b8:	edd0 7a00 	vldr	s15, [r0]
 80031bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80031c0:	ed80 0a07 	vstr	s0, [r0, #28]

	return op->out;
}
 80031c4:	bd30      	pop	{r4, r5, pc}
 80031c6:	bf00      	nop
 80031c8:	20003dc4 	.word	0x20003dc4
 80031cc:	00000000 	.word	0x00000000
 80031d0:	46ac4400 	.word	0x46ac4400
 80031d4:	40c90fdb 	.word	0x40c90fdb
 80031d8:	080153bc 	.word	0x080153bc
 80031dc:	4322f983 	.word	0x4322f983
 80031e0:	39156592 	.word	0x39156592
 80031e4:	20003d40 	.word	0x20003d40

080031e8 <waveCompute>:

/*-------------------------------------------------------------------------------------------------------------------*/

float waveCompute(uint8_t sound, float frq)
{
 80031e8:	b510      	push	{r4, lr}
	op->freq = f;
 80031ea:	4c6f      	ldr	r4, [pc, #444]	; (80033a8 <waveCompute+0x1c0>)
{
 80031ec:	ed2d 8b02 	vpush	{d8}
	op->freq = f;
 80031f0:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
{
 80031f4:	eeb0 8a40 	vmov.f32	s16, s0

	OpSetFreq(&op1, frq);


	/* choose waveform generator */
	switch (sound)
 80031f8:	280f      	cmp	r0, #15
 80031fa:	f200 80ce 	bhi.w	800339a <waveCompute+0x1b2>
 80031fe:	e8df f000 	tbb	[pc, r0]
 8003202:	1008      	.short	0x1008
 8003204:	45625e32 	.word	0x45625e32
 8003208:	7469554c 	.word	0x7469554c
 800320c:	b7a8a587 	.word	0xb7a8a587
 8003210:	c3bd      	.short	0xc3bd
	{
	case MORPH_SAW : 	y = 0.8f * MorphingSaw_SampleCompute(&op1); 		break ;
 8003212:	4866      	ldr	r0, [pc, #408]	; (80033ac <waveCompute+0x1c4>)
 8003214:	f7ff fe82 	bl	8002f1c <MorphingSaw_SampleCompute>
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;

	case BLEPSQUARE : 		mbRectOsc.freq = frq;
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;

	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 8003218:	eddf 7a65 	vldr	s15, [pc, #404]	; 80033b0 <waveCompute+0x1c8>

	case VOICES3 :	{ // 3 slightly detuned oscillators with drifters

		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800321c:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 8003220:	e031      	b.n	8003286 <waveCompute+0x9e>
		if (frq < 200) y =  OpSampleCompute1(&op1);
 8003222:	eddf 7a64 	vldr	s15, [pc, #400]	; 80033b4 <waveCompute+0x1cc>
 8003226:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	d506      	bpl.n	800323e <waveCompute+0x56>
		y = 0;	break ;

	}

	return y;
}
 8003230:	ecbd 8b02 	vpop	{d8}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 8003234:	485d      	ldr	r0, [pc, #372]	; (80033ac <waveCompute+0x1c4>)
}
 8003236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 800323a:	f7ff bd5b 	b.w	8002cf4 <OpSampleCompute1>
		else if (frq < 600) y = OpSampleCompute2(&op1);
 800323e:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80033b8 <waveCompute+0x1d0>
 8003242:	485a      	ldr	r0, [pc, #360]	; (80033ac <waveCompute+0x1c4>)
 8003244:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	d505      	bpl.n	800325a <waveCompute+0x72>
}
 800324e:	ecbd 8b02 	vpop	{d8}
 8003252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else if (frq < 600) y = OpSampleCompute2(&op1);
 8003256:	f7ff bd99 	b.w	8002d8c <OpSampleCompute2>
}
 800325a:	ecbd 8b02 	vpop	{d8}
 800325e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else y = OpSampleCompute5(&op1);
 8003262:	f7ff be15 	b.w	8002e90 <OpSampleCompute5>
	case ACC_SINE : 		y = 0.8 * OpSampleCompute0(&op1); 		break;
 8003266:	4851      	ldr	r0, [pc, #324]	; (80033ac <waveCompute+0x1c4>)
 8003268:	f7ff fc00 	bl	8002a6c <OpSampleCompute0>
 800326c:	ee10 0a10 	vmov	r0, s0
 8003270:	f7fd f90e 	bl	8000490 <__aeabi_f2d>
 8003274:	a34a      	add	r3, pc, #296	; (adr r3, 80033a0 <waveCompute+0x1b8>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fd f961 	bl	8000540 <__aeabi_dmul>
 800327e:	f7fd fbf9 	bl	8000a74 <__aeabi_d2f>
 8003282:	ee00 0a10 	vmov	s0, r0
}
 8003286:	ecbd 8b02 	vpop	{d8}
 800328a:	bd10      	pop	{r4, pc}
 800328c:	ecbd 8b02 	vpop	{d8}
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 8003290:	4846      	ldr	r0, [pc, #280]	; (80033ac <waveCompute+0x1c4>)
}
 8003292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 8003296:	f7ff bdbb 	b.w	8002e10 <OpSampleCompute3>
}
 800329a:	ecbd 8b02 	vpop	{d8}
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 800329e:	4847      	ldr	r0, [pc, #284]	; (80033bc <waveCompute+0x1d4>)
}
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 80032a4:	ed80 0a03 	vstr	s0, [r0, #12]
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;
 80032a8:	f7fe bb2a 	b.w	8001900 <VCO_bleptri_SampleCompute>
}
 80032ac:	ecbd 8b02 	vpop	{d8}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 80032b0:	4843      	ldr	r0, [pc, #268]	; (80033c0 <waveCompute+0x1d8>)
}
 80032b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 80032b6:	ed80 0a03 	vstr	s0, [r0, #12]
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;
 80032ba:	f7fe b929 	b.w	8001510 <VCO_bleprect_SampleCompute>
	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 80032be:	483b      	ldr	r0, [pc, #236]	; (80033ac <waveCompute+0x1c4>)
 80032c0:	f7ff fc00 	bl	8002ac4 <Osc_WT_SINE_SampleCompute>
 80032c4:	e7a8      	b.n	8003218 <waveCompute+0x30>
}
 80032c6:	ecbd 8b02 	vpop	{d8}
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 80032ca:	4838      	ldr	r0, [pc, #224]	; (80033ac <waveCompute+0x1c4>)
}
 80032cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 80032d0:	f7ff bf2a 	b.w	8003128 <AdditiveGen_SampleCompute>
	case NOISE : 			y = op1.amp * frand_a_b(-.8f , .8f);	break; // noise !
 80032d4:	eddf 0a36 	vldr	s1, [pc, #216]	; 80033b0 <waveCompute+0x1c8>
 80032d8:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80033c4 <waveCompute+0x1dc>
 80032dc:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 80032e0:	f000 f972 	bl	80035c8 <frand_a_b>
 80032e4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80032e8:	e7cd      	b.n	8003286 <waveCompute+0x9e>
		OpSetFreq(&op2, frq * 1.50f);
 80032ea:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80032ee:	ee28 8a00 	vmul.f32	s16, s16, s0
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 80032f2:	482e      	ldr	r0, [pc, #184]	; (80033ac <waveCompute+0x1c4>)
	op->freq = f;
 80032f4:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 80032f8:	f7ff fe10 	bl	8002f1c <MorphingSaw_SampleCompute>
 80032fc:	4832      	ldr	r0, [pc, #200]	; (80033c8 <waveCompute+0x1e0>)
 80032fe:	eeb0 4a40 	vmov.f32	s8, s0
 8003302:	f7ff fe0b 	bl	8002f1c <MorphingSaw_SampleCompute>
 8003306:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800330a:	ee34 0a00 	vadd.f32	s0, s8, s0
 800330e:	e785      	b.n	800321c <waveCompute+0x34>
		OpSetFreq(&op2, frq * 1.26f);
 8003310:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80033cc <waveCompute+0x1e4>
		OpSetFreq(&op2, frq * 1.1892f);
 8003314:	ee68 7a27 	vmul.f32	s15, s16, s15
		OpSetFreq(&op3, frq * 1.5f);
 8003318:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
	op->freq = f;
 800331c:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 8003320:	ee20 8a08 	vmul.f32	s16, s0, s16
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003324:	4821      	ldr	r0, [pc, #132]	; (80033ac <waveCompute+0x1c4>)
	op->freq = f;
 8003326:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800332a:	f7ff fdf7 	bl	8002f1c <MorphingSaw_SampleCompute>
 800332e:	4826      	ldr	r0, [pc, #152]	; (80033c8 <waveCompute+0x1e0>)
 8003330:	eeb0 4a40 	vmov.f32	s8, s0
 8003334:	f7ff fdf2 	bl	8002f1c <MorphingSaw_SampleCompute>
 8003338:	4825      	ldr	r0, [pc, #148]	; (80033d0 <waveCompute+0x1e8>)
 800333a:	ee34 4a00 	vadd.f32	s8, s8, s0
 800333e:	f7ff fded 	bl	8002f1c <MorphingSaw_SampleCompute>
 8003342:	eddf 7a24 	vldr	s15, [pc, #144]	; 80033d4 <waveCompute+0x1ec>
 8003346:	ee34 0a00 	vadd.f32	s0, s8, s0
 800334a:	e767      	b.n	800321c <waveCompute+0x34>
		OpSetFreq(&op2, frq * 1.1892f);
 800334c:	eddf 7a22 	vldr	s15, [pc, #136]	; 80033d8 <waveCompute+0x1f0>
 8003350:	e7e0      	b.n	8003314 <waveCompute+0x12c>
		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
 8003352:	f7ff f8d5 	bl	8002500 <d1_drifter_nextSample>
 8003356:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800335a:	ee30 0a28 	vadd.f32	s0, s0, s17
 800335e:	ee20 0a08 	vmul.f32	s0, s0, s16
	op->freq = f;
 8003362:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 8003366:	f7ff f8d1 	bl	800250c <d2_drifter_nextSample>
 800336a:	ee30 0a28 	vadd.f32	s0, s0, s17
 800336e:	e7d7      	b.n	8003320 <waveCompute+0x138>
}
 8003370:	ecbd 8b02 	vpop	{d8}
 8003374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case DRIFTERS : 	y = Drifters_sampleCompute(); break;
 8003378:	f7ff be44 	b.w	8003004 <Drifters_sampleCompute>
}
 800337c:	ecbd 8b02 	vpop	{d8}
 8003380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case FM2 : 			y = FM2_sampleCompute(frq); break;
 8003384:	f7ff bc2c 	b.w	8002be0 <FM2_sampleCompute>
}
 8003388:	ecbd 8b02 	vpop	{d8}
		mbSawOsc.freq = frq;
 800338c:	4813      	ldr	r0, [pc, #76]	; (80033dc <waveCompute+0x1f4>)
}
 800338e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mbSawOsc.freq = frq;
 8003392:	ed80 0a03 	vstr	s0, [r0, #12]
		y = VCO_blepsaw_SampleCompute(&mbSawOsc);
 8003396:	f7fd bfc7 	b.w	8001328 <VCO_blepsaw_SampleCompute>
		y = 0;	break ;
 800339a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80033e0 <waveCompute+0x1f8>
	return y;
 800339e:	e772      	b.n	8003286 <waveCompute+0x9e>
 80033a0:	9999999a 	.word	0x9999999a
 80033a4:	3fe99999 	.word	0x3fe99999
 80033a8:	20003d40 	.word	0x20003d40
 80033ac:	20003da0 	.word	0x20003da0
 80033b0:	3f4ccccd 	.word	0x3f4ccccd
 80033b4:	43480000 	.word	0x43480000
 80033b8:	44160000 	.word	0x44160000
 80033bc:	200000ac 	.word	0x200000ac
 80033c0:	20000604 	.word	0x20000604
 80033c4:	bf4ccccd 	.word	0xbf4ccccd
 80033c8:	20003d80 	.word	0x20003d80
 80033cc:	3fa147ae 	.word	0x3fa147ae
 80033d0:	20003d60 	.word	0x20003d60
 80033d4:	3ea8f5c3 	.word	0x3ea8f5c3
 80033d8:	3f9837b5 	.word	0x3f9837b5
 80033dc:	20000b60 	.word	0x20000b60
 80033e0:	00000000 	.word	0x00000000

080033e4 <PhaserInit>:
void PhaserInit(void)
{
	f_min = 200.f;
	f_max = 1700.f;
	swrate = 0.1f;
	fb = 0.7f;
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <PhaserInit+0x20>)
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <PhaserInit+0x24>)
 80033e8:	601a      	str	r2, [r3, #0]
	wet = 0.3f;
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <PhaserInit+0x28>)
 80033ec:	4a08      	ldr	r2, [pc, #32]	; (8003410 <PhaserInit+0x2c>)
 80033ee:	601a      	str	r2, [r3, #0]

	dmin = 2 * f_min / SAMPLERATE;
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <PhaserInit+0x30>)
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <PhaserInit+0x34>)
 80033f4:	601a      	str	r2, [r3, #0]
	dmax = 2 * f_max / SAMPLERATE;
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <PhaserInit+0x38>)
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <PhaserInit+0x3c>)
 80033fa:	601a      	str	r2, [r3, #0]
	lfoInc = _2PI * swrate / SAMPLERATE;
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <PhaserInit+0x40>)
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <PhaserInit+0x44>)
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	4770      	bx	lr
 8003404:	200129f4 	.word	0x200129f4
 8003408:	3f333333 	.word	0x3f333333
 800340c:	20012a18 	.word	0x20012a18
 8003410:	3e99999a 	.word	0x3e99999a
 8003414:	200129f0 	.word	0x200129f0
 8003418:	3c149b93 	.word	0x3c149b93
 800341c:	200129ec 	.word	0x200129ec
 8003420:	3d9de54c 	.word	0x3d9de54c
 8003424:	200129f8 	.word	0x200129f8
 8003428:	376f08eb 	.word	0x376f08eb

0800342c <Phaser_Rate_set>:
/*---------------------------------------------------------------------*/
void Phaser_Rate_set(uint8_t val)
{
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 800342c:	ee07 0a90 	vmov	s15, r0
 8003430:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003458 <Phaser_Rate_set+0x2c>
	lfoInc = _2PI * swrate / SAMPLERATE;
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <Phaser_Rate_set+0x30>)
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 8003436:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800343a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003460 <Phaser_Rate_set+0x34>
 800343e:	eee6 7a87 	vfma.f32	s15, s13, s14
	lfoInc = _2PI * swrate / SAMPLERATE;
 8003442:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003464 <Phaser_Rate_set+0x38>
 8003446:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003468 <Phaser_Rate_set+0x3c>
 800344a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003452:	ed83 7a00 	vstr	s14, [r3]
}
 8003456:	4770      	bx	lr
 8003458:	3d611e66 	.word	0x3d611e66
 800345c:	200129f8 	.word	0x200129f8
 8003460:	3ca3d70a 	.word	0x3ca3d70a
 8003464:	40c90fdb 	.word	0x40c90fdb
 8003468:	472c4400 	.word	0x472c4400

0800346c <Phaser_Feedback_set>:
/*---------------------------------------------------------------------*/
void Phaser_Feedback_set(uint8_t val)
{
	fb = 0.999f * val / MIDI_MAX;
 800346c:	ee07 0a90 	vmov	s15, r0
 8003470:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800348c <Phaser_Feedback_set+0x20>
 8003474:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003490 <Phaser_Feedback_set+0x24>
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <Phaser_Feedback_set+0x28>)
 800347a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003482:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003486:	ed83 7a00 	vstr	s14, [r3]
}
 800348a:	4770      	bx	lr
 800348c:	3f7fbe77 	.word	0x3f7fbe77
 8003490:	42fe0000 	.word	0x42fe0000
 8003494:	200129f4 	.word	0x200129f4

08003498 <Phaser_Wet_set>:
/*---------------------------------------------------------------------*/
void Phaser_Wet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 8003498:	ee07 0a90 	vmov	s15, r0
 800349c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80034b0 <Phaser_Wet_set+0x18>
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <Phaser_Wet_set+0x1c>)
 80034a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80034a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034aa:	edc3 7a00 	vstr	s15, [r3]
}
 80034ae:	4770      	bx	lr
 80034b0:	42fe0000 	.word	0x42fe0000
 80034b4:	20012a18 	.word	0x20012a18

080034b8 <Phaser_compute>:
	return yout;
}

/*---------------------------------------------------------------------*/
float Phaser_compute(float xin)
{
 80034b8:	b510      	push	{r4, lr}
	int i;
	float d;

	//calculate and update phaser sweep lfo...

	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80034ba:	4c37      	ldr	r4, [pc, #220]	; (8003598 <Phaser_compute+0xe0>)
 80034bc:	4b37      	ldr	r3, [pc, #220]	; (800359c <Phaser_compute+0xe4>)
{
 80034be:	ed2d 8b04 	vpush	{d8-d9}
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80034c2:	ed94 8a00 	vldr	s16, [r4]
 80034c6:	edd3 8a00 	vldr	s17, [r3]
 80034ca:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <Phaser_compute+0xe8>)
{
 80034cc:	eef0 9a40 	vmov.f32	s19, s0
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80034d0:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80035a4 <Phaser_compute+0xec>
 80034d4:	ed93 9a00 	vldr	s18, [r3]
 80034d8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80034dc:	f003 f8d6 	bl	800668c <lrintf>
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <Phaser_compute+0xf0>)
	//update filter coeffs
	a1 = (1.f - d) / (1.f + d);

	//calculate output

	yout = allpass(xin + zm1 * fb, 0);
 80034e2:	4932      	ldr	r1, [pc, #200]	; (80035ac <Phaser_compute+0xf4>)
	yout = - yin * a1 + old[ind];
 80034e4:	4a32      	ldr	r2, [pc, #200]	; (80035b0 <Phaser_compute+0xf8>)
	yout = allpass(xin + zm1 * fb, 0);
 80034e6:	ed91 6a00 	vldr	s12, [r1]
	yout = - yin * a1 + old[ind];
 80034ea:	ed92 0a00 	vldr	s0, [r2]
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80034ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80034f2:	ed90 7a00 	vldr	s14, [r0]
	lfoPhase += lfoInc;
 80034f6:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <Phaser_compute+0xfc>)
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 80034f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80034fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003500:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003504:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003508:	ee39 9a68 	vsub.f32	s18, s18, s17
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 800350c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80035b8 <Phaser_compute+0x100>
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003510:	eee9 8a07 	vfma.f32	s17, s18, s14
	lfoPhase += lfoInc;
 8003514:	ed93 7a00 	vldr	s14, [r3]
	a1 = (1.f - d) / (1.f + d);
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <Phaser_compute+0x104>)
	lfoPhase += lfoInc;
 800351a:	ee38 7a07 	vadd.f32	s14, s16, s14
	yout = allpass(xin + zm1 * fb, 0);
 800351e:	eef0 5a69 	vmov.f32	s11, s19
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003522:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	bfa8      	it	ge
 800352c:	ee37 7a66 	vsubge.f32	s14, s14, s13
	a1 = (1.f - d) / (1.f + d);
 8003530:	ee77 6ae8 	vsub.f32	s13, s15, s17
 8003534:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003538:	ed84 7a00 	vstr	s14, [r4]
	a1 = (1.f - d) / (1.f + d);
 800353c:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 8003540:	ed83 7a00 	vstr	s14, [r3]
	yout = allpass(xin + zm1 * fb, 0);
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <Phaser_compute+0x108>)
 8003546:	edd3 6a00 	vldr	s13, [r3]
 800354a:	eee6 5a26 	vfma.f32	s11, s12, s13
	old[ind] = yout * a1 + yin;
 800354e:	4613      	mov	r3, r2
 8003550:	3218      	adds	r2, #24
	yout = - yin * a1 + old[ind];
 8003552:	eea5 0ac7 	vfms.f32	s0, s11, s14
	yout = allpass(xin + zm1 * fb, 0);
 8003556:	eef0 6a65 	vmov.f32	s13, s11
	old[ind] = yout * a1 + yin;
 800355a:	eee7 6a00 	vfma.f32	s13, s14, s0
 800355e:	ece3 6a01 	vstmia	r3!, {s13}
	yout = - yin * a1 + old[ind];
 8003562:	edd3 6a00 	vldr	s13, [r3]
 8003566:	eee0 6a47 	vfms.f32	s13, s0, s14
	old[ind] = yout * a1 + yin;
 800356a:	eea7 0a26 	vfma.f32	s0, s14, s13
 800356e:	eca3 0a01 	vstmia	r3!, {s0}

	for(i = 1; i < PH_STAGES; i++)
 8003572:	429a      	cmp	r2, r3
	yout = - yin * a1 + old[ind];
 8003574:	eeb0 0a66 	vmov.f32	s0, s13
	for(i = 1; i < PH_STAGES; i++)
 8003578:	d1f3      	bne.n	8003562 <Phaser_compute+0xaa>
	{
		yout = allpass(yout, i);
	}
	zm1 = yout;

	yout = (1 - wet) * xin + wet * yout;
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <Phaser_compute+0x10c>)
	zm1 = yout;
 800357c:	edc1 6a00 	vstr	s13, [r1]
	yout = (1 - wet) * xin + wet * yout;
 8003580:	ed93 7a00 	vldr	s14, [r3]
 8003584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003588:	ee27 0a26 	vmul.f32	s0, s14, s13

	return yout;
}
 800358c:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8003590:	ecbd 8b04 	vpop	{d8-d9}
 8003594:	bd10      	pop	{r4, pc}
 8003596:	bf00      	nop
 8003598:	200129fc 	.word	0x200129fc
 800359c:	200129f0 	.word	0x200129f0
 80035a0:	200129ec 	.word	0x200129ec
 80035a4:	4322f983 	.word	0x4322f983
 80035a8:	080153bc 	.word	0x080153bc
 80035ac:	20012a1c 	.word	0x20012a1c
 80035b0:	20012a00 	.word	0x20012a00
 80035b4:	200129f8 	.word	0x200129f8
 80035b8:	40c90fdb 	.word	0x40c90fdb
 80035bc:	200129e8 	.word	0x200129e8
 80035c0:	200129f4 	.word	0x200129f4
 80035c4:	20012a18 	.word	0x20012a18

080035c8 <frand_a_b>:
//---------------------------------------------------------------------------
/**************
 * returns a random float between a and b
 *****************/
float_t frand_a_b(float_t a, float_t b)
{
 80035c8:	b508      	push	{r3, lr}
 80035ca:	ed2d 8b02 	vpush	{d8}
 80035ce:	eef0 8a40 	vmov.f32	s17, s0
 80035d2:	eeb0 8a60 	vmov.f32	s16, s1
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 80035d6:	f002 ff6f 	bl	80064b8 <rand>
 80035da:	ee78 0a68 	vsub.f32	s1, s16, s17
}
 80035de:	eeb0 0a68 	vmov.f32	s0, s17
 80035e2:	ecbd 8b02 	vpop	{d8}
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 80035e6:	ee07 0a90 	vmov	s15, r0
 80035ea:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
}
 80035ee:	eea7 0aa0 	vfma.f32	s0, s15, s1
 80035f2:	bd08      	pop	{r3, pc}

080035f4 <MIDIrandVal>:
/*-----------------------------------------------------------------------------*/
/**************
 * returns a random integer between 0 and MIDI_MAX
 *****************/
uint8_t MIDIrandVal(void)
{
 80035f4:	b508      	push	{r3, lr}
	return (uint8_t)lrintf(frand_a_b(0 , MIDI_MAX));
 80035f6:	eddf 0a05 	vldr	s1, [pc, #20]	; 800360c <MIDIrandVal+0x18>
 80035fa:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003610 <MIDIrandVal+0x1c>
 80035fe:	f7ff ffe3 	bl	80035c8 <frand_a_b>
 8003602:	f003 f843 	bl	800668c <lrintf>
}
 8003606:	b2c0      	uxtb	r0, r0
 8003608:	bd08      	pop	{r3, pc}
 800360a:	bf00      	nop
 800360c:	42fe0000 	.word	0x42fe0000
 8003610:	00000000 	.word	0x00000000

08003614 <SVF_setReso>:

/****************************************************************************************************************/

void SVF_setReso(ResonantFilter* filter, float feedback)
{
	filter->q = 1-feedback;
 8003614:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003618:	ee37 0ac0 	vsub.f32	s0, s15, s0
	if(filter->q < 0.01f) filter->q = 0.01f;
 800361c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003634 <SVF_setReso+0x20>
 8003620:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	filter->q = 1-feedback;
 8003628:	bf58      	it	pl
 800362a:	eef0 7a40 	vmovpl.f32	s15, s0
 800362e:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8003632:	4770      	bx	lr
 8003634:	3c23d70a 	.word	0x3c23d70a

08003638 <SVF_setDrive>:
{
#if USE_SHAPER_NONLINEARITY
	filter->drive = drive;
	setDistortionShape(&filter->shaper, filter->drive);
#else
	filter->drive =  /*  0.4f +  */ (drive/MIDI_MAX)*(drive/MIDI_MAX)*6; // the output can be muted (at 0)
 8003638:	ee07 1a90 	vmov	s15, r1
 800363c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800365c <SVF_setDrive+0x24>
 8003640:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003648:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800364c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003654:	edc0 7a06 	vstr	s15, [r0, #24]
#endif

}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	42fe0000 	.word	0x42fe0000

08003660 <SVF_directSetFilterValue>:
//------------------------------------------------------------------------------------
void SVF_directSetFilterValue(ResonantFilter* filter, float val) // 0 < val < 1
{
 8003660:	b510      	push	{r4, lr}
 8003662:	4604      	mov	r4, r0
 8003664:	ed2d 8b02 	vpush	{d8}
	if (val > 0.95) val = 0.95f;
 8003668:	ee10 0a10 	vmov	r0, s0
{
 800366c:	eeb0 8a40 	vmov.f32	s16, s0
	if (val > 0.95) val = 0.95f;
 8003670:	f7fc ff0e 	bl	8000490 <__aeabi_f2d>
 8003674:	a310      	add	r3, pc, #64	; (adr r3, 80036b8 <SVF_directSetFilterValue+0x58>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f7fd f9f1 	bl	8000a60 <__aeabi_dcmpgt>
 800367e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80036b0 <SVF_directSetFilterValue+0x50>
 8003682:	2800      	cmp	r0, #0
 8003684:	bf18      	it	ne
 8003686:	eeb0 8a67 	vmovne.f32	s16, s15
	filter->f = val*0.5f;
 800368a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800368e:	ee28 8a00 	vmul.f32	s16, s16, s0
	filter->g  = fastTan(_PI * filter->f );
 8003692:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80036b4 <SVF_directSetFilterValue+0x54>
	filter->f = val*0.5f;
 8003696:	ed84 8a01 	vstr	s16, [r4, #4]
	filter->g  = fastTan(_PI * filter->f );
 800369a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800369e:	f7ff f98d 	bl	80029bc <fastTan>

}
 80036a2:	ecbd 8b02 	vpop	{d8}
	filter->g  = fastTan(_PI * filter->f );
 80036a6:	ed84 0a02 	vstr	s0, [r4, #8]
}
 80036aa:	bd10      	pop	{r4, pc}
 80036ac:	f3af 8000 	nop.w
 80036b0:	3f733333 	.word	0x3f733333
 80036b4:	40490fdb 	.word	0x40490fdb
 80036b8:	66666666 	.word	0x66666666
 80036bc:	3fee6666 	.word	0x3fee6666

080036c0 <SVF_initialize>:
{
 80036c0:	b538      	push	{r3, r4, r5, lr}
	filter->type = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	7003      	strb	r3, [r0, #0]
	filter->f = 0.20f;
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <SVF_initialize+0x28>)
 80036c8:	6043      	str	r3, [r0, #4]
	filter->q = 0.9f;
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <SVF_initialize+0x2c>)
 80036cc:	60c3      	str	r3, [r0, #12]
	filter->s1 = 0;
 80036ce:	2500      	movs	r5, #0
{
 80036d0:	4604      	mov	r4, r0
	filter->drive = 0.4f;
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <SVF_initialize+0x30>)
	filter->s1 = 0;
 80036d4:	6105      	str	r5, [r0, #16]
	filter->s2 = 0;
 80036d6:	6145      	str	r5, [r0, #20]
	filter->drive = 0.4f;
 80036d8:	6183      	str	r3, [r0, #24]
	SVF_directSetFilterValue(filter,0.25f);
 80036da:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80036de:	f7ff ffbf 	bl	8003660 <SVF_directSetFilterValue>
	filter->zi = 0;	//input z^(-1)
 80036e2:	61e5      	str	r5, [r4, #28]
}
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
 80036e6:	bf00      	nop
 80036e8:	3e4ccccd 	.word	0x3e4ccccd
 80036ec:	3f666666 	.word	0x3f666666
 80036f0:	3ecccccd 	.word	0x3ecccccd

080036f4 <SVF_init>:
//=====================================================================================================
void SVF_init(void)
{
 80036f4:	b510      	push	{r4, lr}
	SVF_initialize(&SVFilter);
 80036f6:	4c05      	ldr	r4, [pc, #20]	; (800370c <SVF_init+0x18>)
 80036f8:	4620      	mov	r0, r4
 80036fa:	f7ff ffe1 	bl	80036c0 <SVF_initialize>
	SVF_initialize(&SVFilter2);
 80036fe:	f104 0020 	add.w	r0, r4, #32
}
 8003702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SVF_initialize(&SVFilter2);
 8003706:	f7ff bfdb 	b.w	80036c0 <SVF_initialize>
 800370a:	bf00      	nop
 800370c:	20003e98 	.word	0x20003e98

08003710 <Filter1Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter1Freq_set(uint8_t val)
{
 8003710:	b508      	push	{r3, lr}
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003712:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003738 <Filter1Freq_set+0x28>
 8003716:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800373c <Filter1Freq_set+0x2c>
 800371a:	f7ff f8e5 	bl	80028e8 <Lin2Exp>
 800371e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003740 <Filter1Freq_set+0x30>
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <Filter1Freq_set+0x34>)
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003724:	4808      	ldr	r0, [pc, #32]	; (8003748 <Filter1Freq_set+0x38>)
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003726:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800372a:	ed83 0a00 	vstr	s0, [r3]
}
 800372e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003732:	f7ff bf95 	b.w	8003660 <SVF_directSetFilterValue>
 8003736:	bf00      	nop
 8003738:	45fa0000 	.word	0x45fa0000
 800373c:	42a00000 	.word	0x42a00000
 8003740:	472c4400 	.word	0x472c4400
 8003744:	20013c10 	.word	0x20013c10
 8003748:	20003e98 	.word	0x20003e98

0800374c <Filter1Res_set>:
//------------------------------------------------------------------------------------
void 	Filter1Res_set(uint8_t val)
{
	SVF_setReso(&SVFilter, val / MIDI_MAX);
 800374c:	ee07 0a90 	vmov	s15, r0
 8003750:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003754:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003764 <Filter1Res_set+0x18>
 8003758:	4803      	ldr	r0, [pc, #12]	; (8003768 <Filter1Res_set+0x1c>)
 800375a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800375e:	f7ff bf59 	b.w	8003614 <SVF_setReso>
 8003762:	bf00      	nop
 8003764:	42fe0000 	.word	0x42fe0000
 8003768:	20003e98 	.word	0x20003e98

0800376c <Filter1Drive_set>:
}
//------------------------------------------------------------------------------------
void	Filter1Drive_set(uint8_t val)
{
	SVF_setDrive(&SVFilter, val);
 800376c:	4601      	mov	r1, r0
 800376e:	4801      	ldr	r0, [pc, #4]	; (8003774 <Filter1Drive_set+0x8>)
 8003770:	f7ff bf62 	b.w	8003638 <SVF_setDrive>
 8003774:	20003e98 	.word	0x20003e98

08003778 <Filter1Type_set>:
}
//------------------------------------------------------------------------------------
void 	Filter1Type_set(uint8_t val)
{
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003778:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800377c:	ee07 0a90 	vmov	s15, r0
 8003780:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003784:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003798 <Filter1Type_set+0x20>
{
 8003788:	b508      	push	{r3, lr}
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 800378a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800378e:	f002 ff7d 	bl	800668c <lrintf>
 8003792:	4b02      	ldr	r3, [pc, #8]	; (800379c <Filter1Type_set+0x24>)
 8003794:	7018      	strb	r0, [r3, #0]
}
 8003796:	bd08      	pop	{r3, pc}
 8003798:	42fe0000 	.word	0x42fe0000
 800379c:	20003e98 	.word	0x20003e98

080037a0 <Filter2Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter2Freq_set(uint8_t val)
{
 80037a0:	b508      	push	{r3, lr}
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 80037a2:	eddf 0a09 	vldr	s1, [pc, #36]	; 80037c8 <Filter2Freq_set+0x28>
 80037a6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80037cc <Filter2Freq_set+0x2c>
 80037aa:	f7ff f89d 	bl	80028e8 <Lin2Exp>
 80037ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 80037d0 <Filter2Freq_set+0x30>
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <Filter2Freq_set+0x34>)
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 80037b4:	4808      	ldr	r0, [pc, #32]	; (80037d8 <Filter2Freq_set+0x38>)
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 80037b6:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80037ba:	ed83 0a00 	vstr	s0, [r3]
}
 80037be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 80037c2:	f7ff bf4d 	b.w	8003660 <SVF_directSetFilterValue>
 80037c6:	bf00      	nop
 80037c8:	45fa0000 	.word	0x45fa0000
 80037cc:	42a00000 	.word	0x42a00000
 80037d0:	472c4400 	.word	0x472c4400
 80037d4:	20013c14 	.word	0x20013c14
 80037d8:	20003eb8 	.word	0x20003eb8

080037dc <Filter2Res_set>:
//------------------------------------------------------------------------------------
void 	Filter2Res_set(uint8_t val)
{
	SVF_setReso(&SVFilter2, val / MIDI_MAX);
 80037dc:	ee07 0a90 	vmov	s15, r0
 80037e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80037e4:	eddf 7a03 	vldr	s15, [pc, #12]	; 80037f4 <Filter2Res_set+0x18>
 80037e8:	4803      	ldr	r0, [pc, #12]	; (80037f8 <Filter2Res_set+0x1c>)
 80037ea:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80037ee:	f7ff bf11 	b.w	8003614 <SVF_setReso>
 80037f2:	bf00      	nop
 80037f4:	42fe0000 	.word	0x42fe0000
 80037f8:	20003eb8 	.word	0x20003eb8

080037fc <Filter2Drive_set>:
}
//------------------------------------------------------------------------------------
void	Filter2Drive_set(uint8_t val)
{
	SVF_setDrive(&SVFilter2, val);
 80037fc:	4601      	mov	r1, r0
 80037fe:	4801      	ldr	r0, [pc, #4]	; (8003804 <Filter2Drive_set+0x8>)
 8003800:	f7ff bf1a 	b.w	8003638 <SVF_setDrive>
 8003804:	20003eb8 	.word	0x20003eb8

08003808 <Filter2Type_set>:
}
//------------------------------------------------------------------------------------
void 	Filter2Type_set(uint8_t val)
{
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800380c:	ee07 0a90 	vmov	s15, r0
 8003810:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003814:	eddf 7a05 	vldr	s15, [pc, #20]	; 800382c <Filter2Type_set+0x24>
{
 8003818:	b508      	push	{r3, lr}
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 800381a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800381e:	f002 ff35 	bl	800668c <lrintf>
 8003822:	4b03      	ldr	r3, [pc, #12]	; (8003830 <Filter2Type_set+0x28>)
 8003824:	f883 0020 	strb.w	r0, [r3, #32]
}
 8003828:	bd08      	pop	{r3, pc}
 800382a:	bf00      	nop
 800382c:	42fe0000 	.word	0x42fe0000
 8003830:	20003e98 	.word	0x20003e98

08003834 <SVF_calcSample>:

//------------------------------------------------------------------------------------

float SVF_calcSample(ResonantFilter* filter, float in)
{
 8003834:	b510      	push	{r4, lr}
	const float f 	= filter->g;
	//fix unstable filter for high f and r settings
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003836:	ed90 7a01 	vldr	s14, [r0, #4]
 800383a:	eddf 7a66 	vldr	s15, [pc, #408]	; 80039d4 <SVF_calcSample+0x1a0>
{
 800383e:	ed2d 8b0c 	vpush	{d8-d13}
 8003842:	eeb0 8a40 	vmov.f32	s16, s0


#if USE_SHAPER_NONLINEARITY
	const float x = (buf[i]/((float)0x7fff));
#else
	const float x = softClipTwo( in * filter->drive);
 8003846:	ed90 0a06 	vldr	s0, [r0, #24]
	const float f 	= filter->g;
 800384a:	edd0 8a02 	vldr	s17, [r0, #8]
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 800384e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003856:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	const float x = softClipTwo( in * filter->drive);
 800385a:	ee28 0a00 	vmul.f32	s0, s16, s0
{
 800385e:	4604      	mov	r4, r0
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003860:	bfb4      	ite	lt
 8003862:	ed90 aa03 	vldrlt	s20, [r0, #12]
 8003866:	eeb0 aa6b 	vmovge.f32	s20, s23
	const float x = softClipTwo( in * filter->drive);
 800386a:	f7ff f89b 	bl	80029a4 <softClipTwo>
#endif

#if ENABLE_NONLINEAR_INTEGRATORS
	// input with half sample delay, for non-linearities
	float ih = 0.5f * (x + filter->zi);
 800386e:	edd4 7a07 	vldr	s15, [r4, #28]
	filter->zi = x;
 8003872:	ed84 0a07 	vstr	s0, [r4, #28]
	const float x = softClipTwo( in * filter->drive);
 8003876:	eeb0 ca40 	vmov.f32	s24, s0
	float ih = 0.5f * (x + filter->zi);
 800387a:	ee70 7a27 	vadd.f32	s15, s0, s15
		You can trivially remove any saturator by setting the corresponding gain t0,...,t1 to 1. Also, you can simply scale any saturator (i.e. change clipping threshold) to 1/a*tanh(a*x) by writing
		double t1 = tanhXdX(a*s[0]);
	 */
#if ENABLE_NONLINEAR_INTEGRATORS
	const float scale = 0.5f;
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 800387e:	ee7a ca0a 	vadd.f32	s25, s20, s20
 8003882:	ed94 0a04 	vldr	s0, [r4, #16]
 8003886:	ee20 0a6c 	vnmul.f32	s0, s0, s25
 800388a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800388e:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8003892:	edd4 7a05 	vldr	s15, [r4, #20]
 8003896:	ee30 0a67 	vsub.f32	s0, s0, s15
	const float ff 	= f*f;
 800389a:	ee28 9aa8 	vmul.f32	s18, s17, s17
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 800389e:	ee20 0a29 	vmul.f32	s0, s0, s19
 80038a2:	f7ff f839 	bl	8002918 <tanhXdX>
 80038a6:	eef0 aa40 	vmov.f32	s21, s0
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 80038aa:	ed94 0a04 	vldr	s0, [r4, #16]
 80038ae:	ee20 0a29 	vmul.f32	s0, s0, s19
 80038b2:	f7ff f831 	bl	8002918 <tanhXdX>
	const float t0 = 1;
	const float t1 = 1;
#endif

	// g# the denominators for solutions of individual stages
	const float g0 = 1.f / (1.f + f*t0*2*R);
 80038b6:	ee68 7aaa 	vmul.f32	s15, s17, s21
 80038ba:	eeb0 7a6b 	vmov.f32	s14, s23
 80038be:	ee77 7aa7 	vadd.f32	s15, s15, s15
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 80038c2:	eeb0 da40 	vmov.f32	s26, s0
	const float g0 = 1.f / (1.f + f*t0*2*R);
 80038c6:	eea7 7a8a 	vfma.f32	s14, s15, s20

	const float s1 = filter->s1;
 80038ca:	ed94 0a04 	vldr	s0, [r4, #16]
	const float g0 = 1.f / (1.f + f*t0*2*R);
 80038ce:	eecb da87 	vdiv.f32	s27, s23, s14
	const float s2 = filter->s2;

	// solve feedback
	const float f1 = ff*g0*t0*t1;
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 80038d2:	ed94 7a05 	vldr	s14, [r4, #20]
	const float f1 = ff*g0*t0*t1;
 80038d6:	ee69 7a2d 	vmul.f32	s15, s18, s27
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 80038da:	ee68 6aad 	vmul.f32	s13, s17, s27
	const float f1 = ff*g0*t0*t1;
 80038de:	ee67 7aaa 	vmul.f32	s15, s15, s21
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 80038e2:	ee66 6a8d 	vmul.f32	s13, s13, s26
	const float f1 = ff*g0*t0*t1;
 80038e6:	ee67 7a8d 	vmul.f32	s15, s15, s26
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 80038ea:	eeac 7a27 	vfma.f32	s14, s24, s15
 80038ee:	ee77 7aab 	vadd.f32	s15, s15, s23
 80038f2:	eea6 7a80 	vfma.f32	s14, s13, s0
 80038f6:	eec7 9a27 	vdiv.f32	s19, s14, s15


	// solve the remaining stages with nonlinear gain
	const float xx = t0*(x - y1);
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 80038fa:	f7ff f853 	bl	80029a4 <softClipTwo>
	const float xx = t0*(x - y1);
 80038fe:	ee3c ba69 	vsub.f32	s22, s24, s19
 8003902:	ee2b ba2a 	vmul.f32	s22, s22, s21
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003906:	eea8 0a8b 	vfma.f32	s0, s17, s22
 800390a:	ee60 da2d 	vmul.f32	s27, s0, s27

	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 800390e:	ed94 0a04 	vldr	s0, [r4, #16]
 8003912:	f7ff f847 	bl	80029a4 <softClipTwo>
 8003916:	ee7a aaaa 	vadd.f32	s21, s21, s21
 800391a:	ee78 8aa8 	vadd.f32	s17, s17, s17
 800391e:	ee2a aa6a 	vnmul.f32	s20, s20, s21
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003922:	edd4 7a05 	vldr	s15, [r4, #20]

	float out;


	switch(filter->type)
 8003926:	7823      	ldrb	r3, [r4, #0]
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003928:	eeaa ba2d 	vfma.f32	s22, s20, s27
	switch(filter->type)
 800392c:	3b01      	subs	r3, #1
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 800392e:	eea8 0a8b 	vfma.f32	s0, s17, s22
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003932:	ee68 8a8d 	vmul.f32	s17, s17, s26
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003936:	ed84 0a04 	vstr	s0, [r4, #16]
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 800393a:	eee8 7aad 	vfma.f32	s15, s17, s27
 800393e:	edc4 7a05 	vstr	s15, [r4, #20]
	switch(filter->type)
 8003942:	2b04      	cmp	r3, #4
 8003944:	d80a      	bhi.n	800395c <SVF_calcSample+0x128>
 8003946:	e8df f003 	tbb	[pc, r3]
 800394a:	1c03      	.short	0x1c03
 800394c:	2c27      	.short	0x2c27
 800394e:	35          	.byte	0x35
 800394f:	00          	.byte	0x00
	case FILTER_LP:
#if USE_SHAPER_NONLINEARITY

		buf[i] = FILTER_GAIN * fastTanh( distortion_calcSampleFloat(&filter->shaper, y1));
#else
		out = fastTanh(y1) ;
 8003950:	eeb0 0a69 	vmov.f32	s0, s19
 8003954:	f7fe fffe 	bl	8002954 <fastTanh>
 8003958:	eeb0 8a40 	vmov.f32	s16, s0
	default:
		out = in ;
		break;
	}

	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 800395c:	eeb4 8aeb 	vcmpe.f32	s16, s23
 8003960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003964:	dc33      	bgt.n	80039ce <SVF_calcSample+0x19a>
	out = (out < -1.0f) ? -1.0f : out;
 8003966:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800396a:	eeb4 8a67 	vcmp.f32	s16, s15
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003972:	bf48      	it	mi
 8003974:	eeb0 8a67 	vmovmi.f32	s16, s15

	return out;

}
 8003978:	eeb0 0a48 	vmov.f32	s0, s16
 800397c:	ecbd 8b0c 	vpop	{d8-d13}
 8003980:	bd10      	pop	{r4, pc}
		const float h = x - ugb - y1;
 8003982:	eeb0 0a4c 	vmov.f32	s0, s24
 8003986:	eeac 0aed 	vfms.f32	s0, s25, s27
		out = h * FILTER_GAIN_F;
 800398a:	eddf 7a13 	vldr	s15, [pc, #76]	; 80039d8 <SVF_calcSample+0x1a4>
		const float h = x - ugb - y1;
 800398e:	ee30 8a69 	vsub.f32	s16, s0, s19
		out = h * FILTER_GAIN_F;
 8003992:	ee28 8a27 	vmul.f32	s16, s16, s15
	break;
 8003996:	e7e1      	b.n	800395c <SVF_calcSample+0x128>
		out = y0 * FILTER_GAIN_F;
 8003998:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 80039d8 <SVF_calcSample+0x1a4>
 800399c:	ee2d 8a88 	vmul.f32	s16, s27, s16
		break;
 80039a0:	e7dc      	b.n	800395c <SVF_calcSample+0x128>
		out = (x-ugb) * FILTER_GAIN_F;
 80039a2:	eeb0 0a4c 	vmov.f32	s0, s24
 80039a6:	eeac 0aed 	vfms.f32	s0, s25, s27
 80039aa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80039d8 <SVF_calcSample+0x1a4>
 80039ae:	ee20 8a27 	vmul.f32	s16, s0, s15
	break;
 80039b2:	e7d3      	b.n	800395c <SVF_calcSample+0x128>
		const float h = x - ugb - y1;
 80039b4:	eeb0 0a4c 	vmov.f32	s0, s24
 80039b8:	eeac 0aed 	vfms.f32	s0, s25, s27
		out = (y1-h) * FILTER_GAIN_F;
 80039bc:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80039d8 <SVF_calcSample+0x1a4>
		const float h = x - ugb - y1;
 80039c0:	ee30 0a69 	vsub.f32	s0, s0, s19
		out = (y1-h) * FILTER_GAIN_F;
 80039c4:	ee39 0ac0 	vsub.f32	s0, s19, s0
 80039c8:	ee20 8a08 	vmul.f32	s16, s0, s16
	break;
 80039cc:	e7c6      	b.n	800395c <SVF_calcSample+0x128>
	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 80039ce:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80039d2:	e7d1      	b.n	8003978 <SVF_calcSample+0x144>
 80039d4:	3ee6594b 	.word	0x3ee6594b
 80039d8:	3f6147ae 	.word	0x3f6147ae

080039dc <seq_tempo_set>:
Sequencer_t seq _CCM_;
NoteGenerator_t noteGen _CCM_;

/*--------------------------------------------------------------------------------------------*/
void seq_tempo_set(uint8_t val) {
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 80039dc:	ee07 0a90 	vmov	s15, r0
 80039e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039e4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003a14 <seq_tempo_set+0x38>
 80039e8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003a18 <seq_tempo_set+0x3c>
 80039ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039f0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80039f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
void seq_tempo_set(uint8_t val) {
 80039f8:	b510      	push	{r4, lr}
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 80039fa:	4c08      	ldr	r4, [pc, #32]	; (8003a1c <seq_tempo_set+0x40>)
 80039fc:	ee77 7a80 	vadd.f32	s15, s15, s0
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003a00:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003a20 <seq_tempo_set+0x44>
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 8003a04:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003a08:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003a0c:	f002 fe3e 	bl	800668c <lrintf>
 8003a10:	6460      	str	r0, [r4, #68]	; 0x44
	//seq.smp_count = seq.steptime;
}
 8003a12:	bd10      	pop	{r4, pc}
 8003a14:	44480000 	.word	0x44480000
 8003a18:	42fe0000 	.word	0x42fe0000
 8003a1c:	20003ed8 	.word	0x20003ed8
 8003a20:	4a217fc0 	.word	0x4a217fc0

08003a24 <seq_gateTime_set>:
/*-------------------------------------------------------*/
void seq_gateTime_set(uint8_t val) // val is a number of samples
{
	seq.gateTime = seq.steptime * ((0.9f - 0.1f) * val / MIDI_MAX + 0.1f); // from 10% to 90% of each step duration
 8003a24:	ee07 0a90 	vmov	s15, r0
 8003a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a2c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003a5c <seq_gateTime_set+0x38>
 8003a30:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003a60 <seq_gateTime_set+0x3c>
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <seq_gateTime_set+0x40>)
 8003a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a3e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003a68 <seq_gateTime_set+0x44>
 8003a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a46:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003a4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a56:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8003a5a:	4770      	bx	lr
 8003a5c:	3f4ccccc 	.word	0x3f4ccccc
 8003a60:	42fe0000 	.word	0x42fe0000
 8003a64:	20003ed8 	.word	0x20003ed8
 8003a68:	3dcccccd 	.word	0x3dcccccd

08003a6c <seq_chooseScale>:
		noteGen.transpose = -2;
	}
}

/*-------------------------------------------------------*/
void seq_chooseScale(int16_t idx) {
 8003a6c:	b280      	uxth	r0, r0
 8003a6e:	280e      	cmp	r0, #14
 8003a70:	bf96      	itet	ls
 8003a72:	4b05      	ldrls	r3, [pc, #20]	; (8003a88 <seq_chooseScale+0x1c>)
 8003a74:	4a05      	ldrhi	r2, [pc, #20]	; (8003a8c <seq_chooseScale+0x20>)
 8003a76:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
		break;
	default:
		currentScale = (uint8_t*) MIDIscale11;
		break;
	}
	noteGen.currentScale = currentScale;
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <seq_chooseScale+0x24>)
 8003a7c:	659a      	str	r2, [r3, #88]	; 0x58
	noteGen.chRequested = true;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	08015380 	.word	0x08015380
 8003a8c:	080151b7 	.word	0x080151b7
 8003a90:	20003ed8 	.word	0x20003ed8

08003a94 <seq_scale_set>:
		seq_chooseScale(noteGen.scaleIndex);
	}
}
/*-------------------------------------------------------*/
void seq_scale_set(uint8_t val) {
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 8003a94:	ee07 0a90 	vmov	s15, r0
 8003a98:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003a9c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8003ac8 <seq_scale_set+0x34>
void seq_scale_set(uint8_t val) {
 8003aa0:	b507      	push	{r0, r1, r2, lr}
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 8003aa2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003aa6:	f002 fe31 	bl	800670c <rintf>
 8003aaa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003aae:	4b07      	ldr	r3, [pc, #28]	; (8003acc <seq_scale_set+0x38>)
 8003ab0:	edcd 7a01 	vstr	s15, [sp, #4]
 8003ab4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003ab8:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	seq_chooseScale(noteGen.scaleIndex);
}
 8003abc:	b003      	add	sp, #12
 8003abe:	f85d eb04 	ldr.w	lr, [sp], #4
	seq_chooseScale(noteGen.scaleIndex);
 8003ac2:	f7ff bfd3 	b.w	8003a6c <seq_chooseScale>
 8003ac6:	bf00      	nop
 8003ac8:	3de1c387 	.word	0x3de1c387
 8003acc:	20003ed8 	.word	0x20003ed8

08003ad0 <seq_switchMovingSeq>:
	else
		noteGen.automaticON = true;
}
/*-------------------------------------------------------*/
void seq_switchMovingSeq(uint8_t val) {
	if (val > 63)
 8003ad0:	283f      	cmp	r0, #63	; 0x3f
 8003ad2:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <seq_switchMovingSeq+0x10>)
		noteGen.automaticON = true;
 8003ad4:	bf8c      	ite	hi
 8003ad6:	2201      	movhi	r2, #1
	else
		noteGen.automaticON = false;
 8003ad8:	2200      	movls	r2, #0
 8003ada:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
}
 8003ade:	4770      	bx	lr
 8003ae0:	20003ed8 	.word	0x20003ed8

08003ae4 <seq_switchMute>:
	else
		noteGen.someNotesMuted = true;
}
/*-------------------------------------------------------*/
void seq_switchMute(uint8_t val) {
	switch (val) {
 8003ae4:	b130      	cbz	r0, 8003af4 <seq_switchMute+0x10>
 8003ae6:	287f      	cmp	r0, #127	; 0x7f
 8003ae8:	d107      	bne.n	8003afa <seq_switchMute+0x16>
	case MIDI_MAXi:
		noteGen.someNotesMuted = true;
 8003aea:	4b04      	ldr	r3, [pc, #16]	; (8003afc <seq_switchMute+0x18>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		break;
 8003af2:	4770      	bx	lr
	case 0:
		noteGen.someNotesMuted = false;
 8003af4:	4b01      	ldr	r3, [pc, #4]	; (8003afc <seq_switchMute+0x18>)
 8003af6:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
		break;
	}
}
 8003afa:	4770      	bx	lr
 8003afc:	20003ed8 	.word	0x20003ed8

08003b00 <seq_freqMax_set>:
		//pitchGenChangePoints();
	}
}
/*-------------------------------------------------------*/
void seq_freqMax_set(uint8_t val) {
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 8003b00:	ee07 0a90 	vmov	s15, r0
 8003b04:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003b30 <seq_freqMax_set+0x30>
 8003b08:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <seq_freqMax_set+0x34>)
 8003b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void seq_freqMax_set(uint8_t val) {
 8003b0e:	b082      	sub	sp, #8
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 8003b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b18:	edcd 7a01 	vstr	s15, [sp, #4]
 8003b1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b20:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
	noteGen.chRequested = true;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
}
 8003b2a:	b002      	add	sp, #8
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	3d810204 	.word	0x3d810204
 8003b34:	20003ed8 	.word	0x20003ed8

08003b38 <seq_sequence_new>:

/*--------------------------------------------------------------------------------------------*/
void seq_sequence_new(void) {
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int16_t relativeNote;
	int16_t octaveShift;
	int16_t index;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		relativeNote = noteGen.currentScale[lrintf(
 8003b3a:	4d1d      	ldr	r5, [pc, #116]	; (8003bb0 <seq_sequence_new+0x78>)
void seq_sequence_new(void) {
 8003b3c:	ed2d 8b02 	vpush	{d8}
				frand_a_b(1, noteGen.currentScale[0]))];
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8003b40:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8003bb4 <seq_sequence_new+0x7c>
void seq_sequence_new(void) {
 8003b44:	2400      	movs	r4, #0
 8003b46:	462f      	mov	r7, r5
		relativeNote = noteGen.currentScale[lrintf(
 8003b48:	6dae      	ldr	r6, [r5, #88]	; 0x58
 8003b4a:	7833      	ldrb	r3, [r6, #0]
 8003b4c:	ee00 3a90 	vmov	s1, r3
 8003b50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003b54:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8003b58:	f7ff fd36 	bl	80035c8 <frand_a_b>
 8003b5c:	f002 fd96 	bl	800668c <lrintf>
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8003b60:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
		relativeNote = noteGen.currentScale[lrintf(
 8003b64:	5c36      	ldrb	r6, [r6, r0]
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8003b66:	ee00 3a90 	vmov	s1, r3
 8003b6a:	eeb0 0a48 	vmov.f32	s0, s16
 8003b6e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8003b72:	f7ff fd29 	bl	80035c8 <frand_a_b>
 8003b76:	f002 fd89 	bl	800668c <lrintf>
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 8003b7a:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 8003b7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 8003b82:	3b15      	subs	r3, #21
 8003b84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003b88:	4430      	add	r0, r6
 8003b8a:	b200      	sxth	r0, r0

		while (index > MAX_NOTE_INDEX)
 8003b8c:	286a      	cmp	r0, #106	; 0x6a
 8003b8e:	dc09      	bgt.n	8003ba4 <seq_sequence_new+0x6c>
			index -= 12;
		while (index < 0)
 8003b90:	2800      	cmp	r0, #0
 8003b92:	db09      	blt.n	8003ba8 <seq_sequence_new+0x70>
			index += 12;
		seq.track1.note[i] = index; // note frequency is in notesFreq[index]
 8003b94:	f827 0014 	strh.w	r0, [r7, r4, lsl #1]
 8003b98:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8003b9a:	2c10      	cmp	r4, #16
 8003b9c:	d1d4      	bne.n	8003b48 <seq_sequence_new+0x10>
	}
}
 8003b9e:	ecbd 8b02 	vpop	{d8}
 8003ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba4:	380c      	subs	r0, #12
 8003ba6:	e7f0      	b.n	8003b8a <seq_sequence_new+0x52>
 8003ba8:	300c      	adds	r0, #12
 8003baa:	b200      	sxth	r0, r0
 8003bac:	e7f0      	b.n	8003b90 <seq_sequence_new+0x58>
 8003bae:	bf00      	nop
 8003bb0:	20003ed8 	.word	0x20003ed8
 8003bb4:	00000000 	.word	0x00000000

08003bb8 <seq_transpose>:
/*--------------------------------------------------------------------------------------------*/
void seq_transpose(void) {
	int16_t noteIndex;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 8003bb8:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <seq_transpose+0x38>)
void seq_transpose(void) {
 8003bba:	b510      	push	{r4, lr}
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 8003bbc:	f8b2 4060 	ldrh.w	r4, [r2, #96]	; 0x60
 8003bc0:	1e91      	subs	r1, r2, #2
 8003bc2:	f102 001e 	add.w	r0, r2, #30
 8003bc6:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8003bca:	4423      	add	r3, r4
 8003bcc:	b21b      	sxth	r3, r3
		while (noteIndex > MAX_NOTE_INDEX)
 8003bce:	2b6a      	cmp	r3, #106	; 0x6a
 8003bd0:	dc08      	bgt.n	8003be4 <seq_transpose+0x2c>
			noteIndex -= 12;
		while (noteIndex < 0)
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db08      	blt.n	8003be8 <seq_transpose+0x30>
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8003bd6:	4281      	cmp	r1, r0
			noteIndex += 12;
		seq.track1.note[i] = noteIndex;
 8003bd8:	800b      	strh	r3, [r1, #0]
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8003bda:	d1f4      	bne.n	8003bc6 <seq_transpose+0xe>
	}
	noteGen.transpose = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
}
 8003be2:	bd10      	pop	{r4, pc}
 8003be4:	3b0c      	subs	r3, #12
 8003be6:	e7f1      	b.n	8003bcc <seq_transpose+0x14>
 8003be8:	330c      	adds	r3, #12
 8003bea:	b21b      	sxth	r3, r3
 8003bec:	e7f1      	b.n	8003bd2 <seq_transpose+0x1a>
 8003bee:	bf00      	nop
 8003bf0:	20003ed8 	.word	0x20003ed8

08003bf4 <sequencer_init>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_init(void) {
 8003bf4:	b510      	push	{r4, lr}
	seq.tempo = INIT_TEMPO;
 8003bf6:	4c11      	ldr	r4, [pc, #68]	; (8003c3c <sequencer_init+0x48>)
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <sequencer_init+0x4c>)
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003bfa:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003c44 <sequencer_init+0x50>
	seq.tempo = INIT_TEMPO;
 8003bfe:	6423      	str	r3, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003c00:	f002 fd44 	bl	800668c <lrintf>
	seq.smp_count = 0;
 8003c04:	2300      	movs	r3, #0
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003c06:	6460      	str	r0, [r4, #68]	; 0x44
	seq.smp_count = 0;
 8003c08:	64a3      	str	r3, [r4, #72]	; 0x48
	seq.step_idx = 0;
 8003c0a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	seq.gateTime = seq.steptime / 2;

	noteGen.transpose = 0;
	noteGen.automaticON = false;
 8003c0e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	noteGen.glideON = false;
 8003c12:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	noteGen.chRequested = false;
 8003c16:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	noteGen.someNotesMuted = false;
 8003c1a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	noteGen.scaleIndex = 0;
 8003c1e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	noteGen.octaveSpread = 4;
	noteGen.rootNote = 36;
 8003c22:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	seq.gateTime = seq.steptime / 2;
 8003c26:	1040      	asrs	r0, r0, #1
	noteGen.octaveSpread = 4;
 8003c28:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <sequencer_init+0x54>)
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <sequencer_init+0x58>)
	seq.gateTime = seq.steptime / 2;
 8003c2c:	6520      	str	r0, [r4, #80]	; 0x50
	noteGen.octaveSpread = 4;
 8003c2e:	65e2      	str	r2, [r4, #92]	; 0x5c
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 8003c30:	65a3      	str	r3, [r4, #88]	; 0x58

	seq_sequence_new();
}
 8003c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seq_sequence_new();
 8003c36:	f7ff bf7f 	b.w	8003b38 <seq_sequence_new>
 8003c3a:	bf00      	nop
 8003c3c:	20003ed8 	.word	0x20003ed8
 8003c40:	43a00000 	.word	0x43a00000
 8003c44:	46013300 	.word	0x46013300
 8003c48:	00240004 	.word	0x00240004
 8003c4c:	080151cc 	.word	0x080151cc

08003c50 <sequencer_process>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_process(void) // To be called at each sample treatment
{
 8003c50:	b510      	push	{r4, lr}
	/* If we have reached a new step ....  */
	if (seq.smp_count-- <= 0) {
 8003c52:	4c0c      	ldr	r4, [pc, #48]	; (8003c84 <sequencer_process+0x34>)
 8003c54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c56:	1e5a      	subs	r2, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	64a2      	str	r2, [r4, #72]	; 0x48
 8003c5c:	dc11      	bgt.n	8003c82 <sequencer_process+0x32>
		/* If we are at the beginning of a new sequence .... */
		if (seq.step_idx == 0) {
 8003c5e:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 8003c62:	b90b      	cbnz	r3, 8003c68 <sequencer_process+0x18>
			sequencer_newSequence_action();
 8003c64:	f000 fa72 	bl	800414c <sequencer_newSequence_action>
		}
		sequencer_newStep_action();
 8003c68:	f000 f9ce 	bl	8004008 <sequencer_newStep_action>

		seq.smp_count = seq.steptime; // reload the counter
 8003c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c6e:	64a3      	str	r3, [r4, #72]	; 0x48
		seq.step_idx++;
 8003c70:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8003c74:	3301      	adds	r3, #1
 8003c76:	b21b      	sxth	r3, r3
		if (seq.step_idx >= NUMBER_STEPS)
 8003c78:	2b0f      	cmp	r3, #15
			seq.step_idx = 0;
 8003c7a:	bfc8      	it	gt
 8003c7c:	2300      	movgt	r3, #0
 8003c7e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c

	}
}
 8003c82:	bd10      	pop	{r4, pc}
 8003c84:	20003ed8 	.word	0x20003ed8

08003c88 <autoSound_set>:
static enum timbre sound _CCM_;

/*===============================================================================================================*/

void autoSound_set(int8_t val) {
	autoSound = val;
 8003c88:	4b01      	ldr	r3, [pc, #4]	; (8003c90 <autoSound_set+0x8>)
 8003c8a:	7018      	strb	r0, [r3, #0]
}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20003f40 	.word	0x20003f40

08003c94 <soundNumber_get>:
	}
}
/*---------------------------------------------------------*/
uint8_t soundNumber_get(void) {
	return sound;
}
 8003c94:	4b01      	ldr	r3, [pc, #4]	; (8003c9c <soundNumber_get+0x8>)
 8003c96:	7858      	ldrb	r0, [r3, #1]
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20003f40 	.word	0x20003f40

08003ca0 <AmpLFO_amp_set>:
	}
}

/*-------------------------------------------------------*/
void AmpLFO_amp_set(uint8_t val) {
	amp_lfo.amp = val / MIDI_MAX;
 8003ca0:	ee07 0a90 	vmov	s15, r0
 8003ca4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003cb8 <AmpLFO_amp_set+0x18>
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <AmpLFO_amp_set+0x1c>)
 8003caa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb2:	edc3 7a00 	vstr	s15, [r3]
}
 8003cb6:	4770      	bx	lr
 8003cb8:	42fe0000 	.word	0x42fe0000
 8003cbc:	20003e18 	.word	0x20003e18

08003cc0 <AmpLFO_freq_set>:
/*-------------------------------------------------------*/
void AmpLFO_freq_set(uint8_t val) {
	amp_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8003cc0:	ee07 0a90 	vmov	s15, r0
 8003cc4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003cd8 <AmpLFO_freq_set+0x18>
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <AmpLFO_freq_set+0x1c>)
 8003cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cd2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003cd6:	4770      	bx	lr
 8003cd8:	3dc18306 	.word	0x3dc18306
 8003cdc:	20003e18 	.word	0x20003e18

08003ce0 <Filt1LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt1LFO_amp_set(uint8_t val) {
	filt_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 8003ce0:	ee07 0a90 	vmov	s15, r0
 8003ce4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003cf8 <Filt1LFO_amp_set+0x18>
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <Filt1LFO_amp_set+0x1c>)
 8003cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf2:	edc3 7a00 	vstr	s15, [r3]
}
 8003cf6:	4770      	bx	lr
 8003cf8:	3e810204 	.word	0x3e810204
 8003cfc:	20003e58 	.word	0x20003e58

08003d00 <Filt1LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt1LFO_freq_set(uint8_t val) {
	filt_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8003d00:	ee07 0a90 	vmov	s15, r0
 8003d04:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003d18 <Filt1LFO_freq_set+0x18>
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <Filt1LFO_freq_set+0x1c>)
 8003d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d12:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003d16:	4770      	bx	lr
 8003d18:	3dc18306 	.word	0x3dc18306
 8003d1c:	20003e58 	.word	0x20003e58

08003d20 <Filt2LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt2LFO_amp_set(uint8_t val) {
	filt2_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 8003d20:	ee07 0a90 	vmov	s15, r0
 8003d24:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003d38 <Filt2LFO_amp_set+0x18>
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <Filt2LFO_amp_set+0x1c>)
 8003d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d32:	edc3 7a00 	vstr	s15, [r3]
}
 8003d36:	4770      	bx	lr
 8003d38:	3e810204 	.word	0x3e810204
 8003d3c:	20003e38 	.word	0x20003e38

08003d40 <Filt2LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt2LFO_freq_set(uint8_t val) {
	filt2_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8003d40:	ee07 0a90 	vmov	s15, r0
 8003d44:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003d58 <Filt2LFO_freq_set+0x18>
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <Filt2LFO_freq_set+0x1c>)
 8003d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d52:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003d56:	4770      	bx	lr
 8003d58:	3dc18306 	.word	0x3dc18306
 8003d5c:	20003e38 	.word	0x20003e38

08003d60 <VibratoAmp_set>:
	} else
		vibr_lfo.amp = vibr_lfo.last_amp;
}
/*-------------------------------------------------------*/
void VibratoAmp_set(uint8_t val) {
	vibr_lfo.amp = MAX_VIBRATO_AMP / MIDI_MAX * val;
 8003d60:	ee07 0a90 	vmov	s15, r0
 8003d64:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003d78 <VibratoAmp_set+0x18>
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <VibratoAmp_set+0x1c>)
 8003d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d72:	edc3 7a00 	vstr	s15, [r3]
}
 8003d76:	4770      	bx	lr
 8003d78:	3b810204 	.word	0x3b810204
 8003d7c:	20003e78 	.word	0x20003e78

08003d80 <VibratoFreq_set>:
/*-------------------------------------------------------*/
void VibratoFreq_set(uint8_t val) {
	vibr_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8003d80:	ee07 0a90 	vmov	s15, r0
 8003d84:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003d98 <VibratoFreq_set+0x18>
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <VibratoFreq_set+0x1c>)
 8003d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d92:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003d96:	4770      	bx	lr
 8003d98:	3dc18306 	.word	0x3dc18306
 8003d9c:	20003e78 	.word	0x20003e78

08003da0 <Delay_switch>:
		delayON = true;
}
/*-------------------------------------------------------*/
void Delay_switch(uint8_t val) {

	if (val > 63)
 8003da0:	283f      	cmp	r0, #63	; 0x3f
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <Delay_switch+0x14>)
 8003da4:	d902      	bls.n	8003dac <Delay_switch+0xc>
		delayON = true;
 8003da6:	2201      	movs	r2, #1
 8003da8:	709a      	strb	r2, [r3, #2]
	else {
		delayON = false;
		Delay_clean();
	}
}
 8003daa:	4770      	bx	lr
		delayON = false;
 8003dac:	2200      	movs	r2, #0
 8003dae:	709a      	strb	r2, [r3, #2]
		Delay_clean();
 8003db0:	f7fe ba42 	b.w	8002238 <Delay_clean>
 8003db4:	20003f40 	.word	0x20003f40

08003db8 <Filter_Random_switch>:
	else
		autoFilterON = true;
}
/*-------------------------------------------------------*/
void Filter_Random_switch(uint8_t val) {
	if (val > 63)
 8003db8:	283f      	cmp	r0, #63	; 0x3f
 8003dba:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <Filter_Random_switch+0x10>)
		autoFilterON = true;
 8003dbc:	bf8c      	ite	hi
 8003dbe:	2201      	movhi	r2, #1
	else
		autoFilterON = false;
 8003dc0:	2200      	movls	r2, #0
 8003dc2:	70da      	strb	r2, [r3, #3]
}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20003f40 	.word	0x20003f40

08003dcc <Chorus_switch>:
		chorusON = true;
}
/*-------------------------------------------------------*/
void Chorus_switch(uint8_t val) {

	if (val > 63)
 8003dcc:	283f      	cmp	r0, #63	; 0x3f
 8003dce:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <Chorus_switch+0x10>)
		chorusON = true;
 8003dd0:	bf8c      	ite	hi
 8003dd2:	2201      	movhi	r2, #1
	else
		chorusON = false;
 8003dd4:	2200      	movls	r2, #0
 8003dd6:	711a      	strb	r2, [r3, #4]
}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20003f40 	.word	0x20003f40

08003de0 <Phaser_switch>:
/*-------------------------------------------------------*/
void Phaser_switch(uint8_t val) {

	if (val > 63)
 8003de0:	283f      	cmp	r0, #63	; 0x3f
 8003de2:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <Phaser_switch+0x10>)
		phaserON = true;
 8003de4:	bf8c      	ite	hi
 8003de6:	2201      	movhi	r2, #1
	else
		phaserON = false;
 8003de8:	2200      	movls	r2, #0
 8003dea:	715a      	strb	r2, [r3, #5]
}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20003f40 	.word	0x20003f40

08003df4 <Sound_set>:
	else
		sound = 0;
}
/*-------------------------------------------------------*/
void Sound_set(uint8_t val) {
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 8003df4:	ee07 0a90 	vmov	s15, r0
 8003df8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003dfc:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003e30 <Sound_set+0x3c>
void Sound_set(uint8_t val) {
 8003e00:	b507      	push	{r0, r1, r2, lr}
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 8003e02:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003e06:	f002 fc81 	bl	800670c <rintf>
 8003e0a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <Sound_set+0x40>)
 8003e10:	edcd 7a01 	vstr	s15, [sp, #4]
 8003e14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e18:	7053      	strb	r3, [r2, #1]
	if (sound != ADDITIVE)
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d004      	beq.n	8003e28 <Sound_set+0x34>
		AdditiveGen_newWaveform();
}
 8003e1e:	b003      	add	sp, #12
 8003e20:	f85d eb04 	ldr.w	lr, [sp], #4
		AdditiveGen_newWaveform();
 8003e24:	f7ff b942 	b.w	80030ac <AdditiveGen_newWaveform>
}
 8003e28:	b003      	add	sp, #12
 8003e2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e2e:	bf00      	nop
 8003e30:	3df1e3c8 	.word	0x3df1e3c8
 8003e34:	20003f40 	.word	0x20003f40

08003e38 <FM_OP1_freq_set>:
/*******************************************************************************************************************************/

void FM_OP1_freq_set(uint8_t val) {
	FM_op_freq_set(&op1, val);
 8003e38:	4601      	mov	r1, r0
 8003e3a:	4801      	ldr	r0, [pc, #4]	; (8003e40 <FM_OP1_freq_set+0x8>)
 8003e3c:	f7fe bdf2 	b.w	8002a24 <FM_op_freq_set>
 8003e40:	20003da0 	.word	0x20003da0

08003e44 <FM_OP1_modInd_set>:
}
/*-------------------------------------------------------*/
void FM_OP1_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op1, val);
 8003e44:	4601      	mov	r1, r0
 8003e46:	4801      	ldr	r0, [pc, #4]	; (8003e4c <FM_OP1_modInd_set+0x8>)
 8003e48:	f7fe bdfa 	b.w	8002a40 <FM_op_modInd_set>
 8003e4c:	20003da0 	.word	0x20003da0

08003e50 <FM_OP2_freq_set>:
}

/*----------------------------------------------------------------------------------------------------------------------------*/
void FM_OP2_freq_set(uint8_t val) {
 8003e50:	b508      	push	{r3, lr}
	//FM_op_freq_set(&op2, val);
	op2.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op2 is a multiple of the main pitch freq (op1)
 8003e52:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003e68 <FM_OP2_freq_set+0x18>
 8003e56:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003e6c <FM_OP2_freq_set+0x1c>
 8003e5a:	f7fe fd45 	bl	80028e8 <Lin2Exp>
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <FM_OP2_freq_set+0x20>)
 8003e60:	ed83 0a06 	vstr	s0, [r3, #24]
	//op2.mul = roundf(32 * val/MIDI_MAX);
}
 8003e64:	bd08      	pop	{r3, pc}
 8003e66:	bf00      	nop
 8003e68:	42000000 	.word	0x42000000
 8003e6c:	3e4ccccd 	.word	0x3e4ccccd
 8003e70:	20003d80 	.word	0x20003d80

08003e74 <FM_OP2_modInd_set>:
		op2.mul *= 0.99f;
	}
}
/*-------------------------------------------------------*/
void FM_OP2_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op2, val);
 8003e74:	4601      	mov	r1, r0
 8003e76:	4801      	ldr	r0, [pc, #4]	; (8003e7c <FM_OP2_modInd_set+0x8>)
 8003e78:	f7fe bde2 	b.w	8002a40 <FM_op_modInd_set>
 8003e7c:	20003d80 	.word	0x20003d80

08003e80 <FM_OP3_freq_set>:
}

/*------------------------------------------------------------------------------------------------------------------------------*/
void FM_OP3_freq_set(uint8_t val) {
 8003e80:	b508      	push	{r3, lr}
	op3.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op3 is a multiple of the main pitch freq (op1)
 8003e82:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003e98 <FM_OP3_freq_set+0x18>
 8003e86:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003e9c <FM_OP3_freq_set+0x1c>
 8003e8a:	f7fe fd2d 	bl	80028e8 <Lin2Exp>
 8003e8e:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <FM_OP3_freq_set+0x20>)
 8003e90:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8003e94:	bd08      	pop	{r3, pc}
 8003e96:	bf00      	nop
 8003e98:	42000000 	.word	0x42000000
 8003e9c:	3e4ccccd 	.word	0x3e4ccccd
 8003ea0:	20003d60 	.word	0x20003d60

08003ea4 <FM_OP3_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP3_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op3, val);
 8003ea4:	4601      	mov	r1, r0
 8003ea6:	4801      	ldr	r0, [pc, #4]	; (8003eac <FM_OP3_modInd_set+0x8>)
 8003ea8:	f7fe bdca 	b.w	8002a40 <FM_op_modInd_set>
 8003eac:	20003d60 	.word	0x20003d60

08003eb0 <FM_OP4_freq_set>:
		op3.mul *= 0.99f;
	}
}

/*--------------------------------------------------------------------------------------------------------------------------*/
void FM_OP4_freq_set(uint8_t val) {
 8003eb0:	b508      	push	{r3, lr}
	op4.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op4 is a multiple of the main pitch freq (op1)
 8003eb2:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003ec8 <FM_OP4_freq_set+0x18>
 8003eb6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003ecc <FM_OP4_freq_set+0x1c>
 8003eba:	f7fe fd15 	bl	80028e8 <Lin2Exp>
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <FM_OP4_freq_set+0x20>)
 8003ec0:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8003ec4:	bd08      	pop	{r3, pc}
 8003ec6:	bf00      	nop
 8003ec8:	42000000 	.word	0x42000000
 8003ecc:	3e4ccccd 	.word	0x3e4ccccd
 8003ed0:	20003d40 	.word	0x20003d40

08003ed4 <FM_OP4_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP4_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op4, val);
 8003ed4:	4601      	mov	r1, r0
 8003ed6:	4801      	ldr	r0, [pc, #4]	; (8003edc <FM_OP4_modInd_set+0x8>)
 8003ed8:	f7fe bdb2 	b.w	8002a40 <FM_op_modInd_set>
 8003edc:	20003d40 	.word	0x20003d40

08003ee0 <Synth_Init>:
	}
}

/*===============================================================================================================*/

void Synth_Init(void) {
 8003ee0:	b508      	push	{r3, lr}

	vol = env = 1;
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <Synth_Init+0xe0>)
 8003ee4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
void Synth_Init(void) {
 8003ee8:	ed2d 8b02 	vpush	{d8}
	vol = env = 1;
 8003eec:	609a      	str	r2, [r3, #8]
	sound = MORPH_SAW;
 8003eee:	2200      	movs	r2, #0
 8003ef0:	705a      	strb	r2, [r3, #1]
	autoFilterON = false;
 8003ef2:	70da      	strb	r2, [r3, #3]
	autoSound = 0;
 8003ef4:	701a      	strb	r2, [r3, #0]
	chorusON = false;
 8003ef6:	711a      	strb	r2, [r3, #4]
	delayON = false;
 8003ef8:	709a      	strb	r2, [r3, #2]
	phaserON = false;
 8003efa:	715a      	strb	r2, [r3, #5]

	Delay_init();
 8003efc:	f7fe f986 	bl	800220c <Delay_init>
	drifter_init();
 8003f00:	f7fe fb18 	bl	8002534 <drifter_init>
	//pitchGen_init();
	sequencer_init();
 8003f04:	f7ff fe76 	bl	8003bf4 <sequencer_init>
	ADSR_init(&adsr);
 8003f08:	482e      	ldr	r0, [pc, #184]	; (8003fc4 <Synth_Init+0xe4>)
	Chorus_init();
	PhaserInit();
	SVF_init();
	filterFreq = 0.25f;
	filterFreq2 = 0.25f;
	osc_init(&op1, 0.8f, 587.f);
 8003f0a:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8003fc8 <Synth_Init+0xe8>
 8003f0e:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8003fcc <Synth_Init+0xec>
	ADSR_init(&adsr);
 8003f12:	f7fd f887 	bl	8001024 <ADSR_init>
	Chorus_init();
 8003f16:	f7fd ff75 	bl	8001e04 <Chorus_init>
	PhaserInit();
 8003f1a:	f7ff fa63 	bl	80033e4 <PhaserInit>
	SVF_init();
 8003f1e:	f7ff fbe9 	bl	80036f4 <SVF_init>
	filterFreq = 0.25f;
 8003f22:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <Synth_Init+0xf0>)
	osc_init(&op1, 0.8f, 587.f);
 8003f24:	482b      	ldr	r0, [pc, #172]	; (8003fd4 <Synth_Init+0xf4>)
	filterFreq = 0.25f;
 8003f26:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8003f2a:	6013      	str	r3, [r2, #0]
	filterFreq2 = 0.25f;
 8003f2c:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <Synth_Init+0xf8>)
	osc_init(&op1, 0.8f, 587.f);
 8003f2e:	eef0 0a68 	vmov.f32	s1, s17
 8003f32:	eeb0 0a48 	vmov.f32	s0, s16
	filterFreq2 = 0.25f;
 8003f36:	6013      	str	r3, [r2, #0]
	osc_init(&op1, 0.8f, 587.f);
 8003f38:	f7fe fd55 	bl	80029e6 <osc_init>
	osc_init(&op2, 0.8f, 587.f);
 8003f3c:	eef0 0a68 	vmov.f32	s1, s17
 8003f40:	eeb0 0a48 	vmov.f32	s0, s16
 8003f44:	4825      	ldr	r0, [pc, #148]	; (8003fdc <Synth_Init+0xfc>)
 8003f46:	f7fe fd4e 	bl	80029e6 <osc_init>
	osc_init(&op3, 0.8f, 587.f);
 8003f4a:	eef0 0a68 	vmov.f32	s1, s17
 8003f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8003f52:	4823      	ldr	r0, [pc, #140]	; (8003fe0 <Synth_Init+0x100>)
 8003f54:	f7fe fd47 	bl	80029e6 <osc_init>
	osc_init(&op4, 0.8f, 587.f);
 8003f58:	eeb0 0a48 	vmov.f32	s0, s16
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 8003f5c:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8003fe4 <Synth_Init+0x104>
	osc_init(&op4, 0.8f, 587.f);
 8003f60:	4821      	ldr	r0, [pc, #132]	; (8003fe8 <Synth_Init+0x108>)
 8003f62:	eef0 0a68 	vmov.f32	s1, s17
 8003f66:	f7fe fd3e 	bl	80029e6 <osc_init>
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 8003f6a:	eeb0 0a48 	vmov.f32	s0, s16
 8003f6e:	eef1 0a06 	vmov.f32	s1, #22	; 0x40b00000  5.5
 8003f72:	481e      	ldr	r0, [pc, #120]	; (8003fec <Synth_Init+0x10c>)
 8003f74:	f7fe fd37 	bl	80029e6 <osc_init>
	osc_init(&filt_lfo, 0, 0);
 8003f78:	eef0 0a48 	vmov.f32	s1, s16
 8003f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8003f80:	481b      	ldr	r0, [pc, #108]	; (8003ff0 <Synth_Init+0x110>)
 8003f82:	f7fe fd30 	bl	80029e6 <osc_init>
	osc_init(&filt2_lfo, 0, 0);
 8003f86:	eef0 0a48 	vmov.f32	s1, s16
 8003f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8003f8e:	4819      	ldr	r0, [pc, #100]	; (8003ff4 <Synth_Init+0x114>)
 8003f90:	f7fe fd29 	bl	80029e6 <osc_init>
	osc_init(&amp_lfo, 0, 0);
 8003f94:	eef0 0a48 	vmov.f32	s1, s16
 8003f98:	eeb0 0a48 	vmov.f32	s0, s16
 8003f9c:	4816      	ldr	r0, [pc, #88]	; (8003ff8 <Synth_Init+0x118>)
 8003f9e:	f7fe fd22 	bl	80029e6 <osc_init>
	AdditiveGen_newWaveform();
 8003fa2:	f7ff f883 	bl	80030ac <AdditiveGen_newWaveform>
	VCO_blepsaw_Init(&mbSawOsc);
 8003fa6:	4815      	ldr	r0, [pc, #84]	; (8003ffc <Synth_Init+0x11c>)
 8003fa8:	f7fd f9a8 	bl	80012fc <VCO_blepsaw_Init>
	VCO_bleprect_Init(&mbRectOsc);
 8003fac:	4814      	ldr	r0, [pc, #80]	; (8004000 <Synth_Init+0x120>)
 8003fae:	f7fd fa99 	bl	80014e4 <VCO_bleprect_Init>
	VCO_bleptri_Init(&mbTriOsc);
}
 8003fb2:	ecbd 8b02 	vpop	{d8}
	VCO_bleptri_Init(&mbTriOsc);
 8003fb6:	4813      	ldr	r0, [pc, #76]	; (8004004 <Synth_Init+0x124>)
}
 8003fb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	VCO_bleptri_Init(&mbTriOsc);
 8003fbc:	f7fd bc88 	b.w	80018d0 <VCO_bleptri_Init>
 8003fc0:	20003f40 	.word	0x20003f40
 8003fc4:	20000084 	.word	0x20000084
 8003fc8:	4412c000 	.word	0x4412c000
 8003fcc:	3f4ccccd 	.word	0x3f4ccccd
 8003fd0:	20013c10 	.word	0x20013c10
 8003fd4:	20003da0 	.word	0x20003da0
 8003fd8:	20013c14 	.word	0x20013c14
 8003fdc:	20003d80 	.word	0x20003d80
 8003fe0:	20003d60 	.word	0x20003d60
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	20003d40 	.word	0x20003d40
 8003fec:	20003e78 	.word	0x20003e78
 8003ff0:	20003e58 	.word	0x20003e58
 8003ff4:	20003e38 	.word	0x20003e38
 8003ff8:	20003e18 	.word	0x20003e18
 8003ffc:	20000b60 	.word	0x20000b60
 8004000:	20000604 	.word	0x20000604
 8004004:	200000ac 	.word	0x200000ac

08004008 <sequencer_newStep_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newStep_action(void) // User callback function called by sequencer_process()
{
 8004008:	b538      	push	{r3, r4, r5, lr}
	if ((noteGen.automaticON || noteGen.chRequested)) {
 800400a:	4d45      	ldr	r5, [pc, #276]	; (8004120 <sequencer_newStep_action+0x118>)
 800400c:	7bab      	ldrb	r3, [r5, #14]
 800400e:	b90b      	cbnz	r3, 8004014 <sequencer_newStep_action+0xc>
 8004010:	7c2b      	ldrb	r3, [r5, #16]
 8004012:	b12b      	cbz	r3, 8004020 <sequencer_newStep_action+0x18>
		seq_sequence_new();
 8004014:	f7ff fd90 	bl	8003b38 <seq_sequence_new>
		noteGen.chRequested = false;
 8004018:	2300      	movs	r3, #0
 800401a:	742b      	strb	r3, [r5, #16]
		AdditiveGen_newWaveform();
 800401c:	f7ff f846 	bl	80030ac <AdditiveGen_newWaveform>
	}

	if ((noteGen.someNotesMuted) && (rintf(frand_a_b(0.4f, 1)) == 0))
 8004020:	7c6b      	ldrb	r3, [r5, #17]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d040      	beq.n	80040a8 <sequencer_newStep_action+0xa0>
 8004026:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800402a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004124 <sequencer_newStep_action+0x11c>
 800402e:	f7ff facb 	bl	80035c8 <frand_a_b>
 8004032:	f002 fb6b 	bl	800670c <rintf>
 8004036:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800403a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403e:	d133      	bne.n	80040a8 <sequencer_newStep_action+0xa0>
		ADSR_keyOff(&adsr);
 8004040:	4839      	ldr	r0, [pc, #228]	; (8004128 <sequencer_newStep_action+0x120>)
 8004042:	f7fd f80c 	bl	800105e <ADSR_keyOff>
	else
		ADSR_keyOn(&adsr);

	if (autoFilterON)
 8004046:	4c39      	ldr	r4, [pc, #228]	; (800412c <sequencer_newStep_action+0x124>)
 8004048:	78e3      	ldrb	r3, [r4, #3]
 800404a:	b193      	cbz	r3, 8004072 <sequencer_newStep_action+0x6a>
		SVF_directSetFilterValue(&SVFilter,
		Ts * 600.f * powf(5000.f / 600.f, frand_a_b(0, 1)));
 800404c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004050:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004130 <sequencer_newStep_action+0x128>
 8004054:	f7ff fab8 	bl	80035c8 <frand_a_b>
 8004058:	eef0 0a40 	vmov.f32	s1, s0
 800405c:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004134 <sequencer_newStep_action+0x12c>
 8004060:	f002 fbf0 	bl	8006844 <powf>
		SVF_directSetFilterValue(&SVFilter,
 8004064:	eddf 7a34 	vldr	s15, [pc, #208]	; 8004138 <sequencer_newStep_action+0x130>
 8004068:	4834      	ldr	r0, [pc, #208]	; (800413c <sequencer_newStep_action+0x134>)
 800406a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800406e:	f7ff faf7 	bl	8003660 <SVF_directSetFilterValue>

	if (noteGen.transpose != 0) {
 8004072:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004076:	b123      	cbz	r3, 8004082 <sequencer_newStep_action+0x7a>
		noteGen.rootNote += noteGen.transpose;
 8004078:	896a      	ldrh	r2, [r5, #10]
 800407a:	4413      	add	r3, r2
 800407c:	816b      	strh	r3, [r5, #10]
		seq_transpose();
 800407e:	f7ff fd9b 	bl	8003bb8 <seq_transpose>
	}

	if (autoSound == 1) {
 8004082:	f994 3000 	ldrsb.w	r3, [r4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d114      	bne.n	80040b4 <sequencer_newStep_action+0xac>
		switch (rand() % 4) // 4 random timbers
 800408a:	f002 fa15 	bl	80064b8 <rand>
 800408e:	4243      	negs	r3, r0
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	f000 0003 	and.w	r0, r0, #3
 8004098:	bf58      	it	pl
 800409a:	4258      	negpl	r0, r3
 800409c:	2803      	cmp	r0, #3
 800409e:	d809      	bhi.n	80040b4 <sequencer_newStep_action+0xac>
 80040a0:	e8df f000 	tbb	[pc, r0]
 80040a4:	3b393506 	.word	0x3b393506
		ADSR_keyOn(&adsr);
 80040a8:	481f      	ldr	r0, [pc, #124]	; (8004128 <sequencer_newStep_action+0x120>)
 80040aa:	f7fc ffcf 	bl	800104c <ADSR_keyOn>
 80040ae:	e7ca      	b.n	8004046 <sequencer_newStep_action+0x3e>
		{
		case 0:
			sound = CHORD15;
 80040b0:	2309      	movs	r3, #9
			break;
		case 2:
			sound = CHORD13min5;
			break;
		case 3:
			sound = VOICES3;
 80040b2:	7063      	strb	r3, [r4, #1]
			break;
		}
	}
	if (autoSound == 2) {
 80040b4:	f994 3000 	ldrsb.w	r3, [r4]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d115      	bne.n	80040e8 <sequencer_newStep_action+0xe0>
		sound = rand() % LAST_SOUND;
 80040bc:	f002 f9fc 	bl	80064b8 <rand>
 80040c0:	4243      	negs	r3, r0
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	f000 000f 	and.w	r0, r0, #15
 80040ca:	bf58      	it	pl
 80040cc:	4258      	negpl	r0, r3
 80040ce:	b2c0      	uxtb	r0, r0
		if ((sound == CHORD13min5) || (sound == CHORD135))
 80040d0:	f1a0 030a 	sub.w	r3, r0, #10
 80040d4:	2b01      	cmp	r3, #1
			sound = VOICES3;
 80040d6:	bf96      	itet	ls
 80040d8:	230c      	movls	r3, #12
		sound = rand() % LAST_SOUND;
 80040da:	7060      	strbhi	r0, [r4, #1]
			sound = VOICES3;
 80040dc:	7063      	strbls	r3, [r4, #1]
		if (sound == ADDITIVE)
 80040de:	7863      	ldrb	r3, [r4, #1]
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d101      	bne.n	80040e8 <sequencer_newStep_action+0xe0>
			AdditiveGen_newWaveform();
 80040e4:	f7fe ffe2 	bl	80030ac <AdditiveGen_newWaveform>
	}

	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <sequencer_newStep_action+0x138>)
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80040ea:	eddf 0a16 	vldr	s1, [pc, #88]	; 8004144 <sequencer_newStep_action+0x13c>
	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80040ee:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80040f2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004124 <sequencer_newStep_action+0x11c>
	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80040f6:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <sequencer_newStep_action+0x140>)
 80040fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60e3      	str	r3, [r4, #12]
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 8004104:	f7ff fa60 	bl	80035c8 <frand_a_b>
 8004108:	ed84 0a02 	vstr	s0, [r4, #8]
}
 800410c:	bd38      	pop	{r3, r4, r5, pc}
			AdditiveGen_newWaveform();
 800410e:	f7fe ffcd 	bl	80030ac <AdditiveGen_newWaveform>
			sound = ADDITIVE;
 8004112:	2304      	movs	r3, #4
 8004114:	e7cd      	b.n	80040b2 <sequencer_newStep_action+0xaa>
			sound = CHORD13min5;
 8004116:	230b      	movs	r3, #11
 8004118:	e7cb      	b.n	80040b2 <sequencer_newStep_action+0xaa>
			sound = VOICES3;
 800411a:	230c      	movs	r3, #12
 800411c:	e7c9      	b.n	80040b2 <sequencer_newStep_action+0xaa>
 800411e:	bf00      	nop
 8004120:	20003f2c 	.word	0x20003f2c
 8004124:	3ecccccd 	.word	0x3ecccccd
 8004128:	20000084 	.word	0x20000084
 800412c:	20003f40 	.word	0x20003f40
 8004130:	00000000 	.word	0x00000000
 8004134:	41055555 	.word	0x41055555
 8004138:	3c5ee95c 	.word	0x3c5ee95c
 800413c:	20003e98 	.word	0x20003e98
 8004140:	20003ed8 	.word	0x20003ed8
 8004144:	3f4ccccd 	.word	0x3f4ccccd
 8004148:	080151d4 	.word	0x080151d4

0800414c <sequencer_newSequence_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newSequence_action(void) // User callback function called by sequencer_process()
{
 800414c:	b508      	push	{r3, lr}
	/* A new sequence begins ... */
	if ((demoMode == true) && (freeze == false)) {
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <sequencer_newSequence_action+0x20>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b153      	cbz	r3, 800416a <sequencer_newSequence_action+0x1e>
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <sequencer_newSequence_action+0x24>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b93b      	cbnz	r3, 800416a <sequencer_newSequence_action+0x1e>
		MagicPatch(MIDI_MAXi);
 800415a:	207f      	movs	r0, #127	; 0x7f
 800415c:	f7fc fe9e 	bl	8000e9c <MagicPatch>
		MagicFX(MIDI_MAXi);
 8004160:	207f      	movs	r0, #127	; 0x7f
	}
}
 8004162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		MagicFX(MIDI_MAXi);
 8004166:	f7fc be55 	b.w	8000e14 <MagicFX>
}
 800416a:	bd08      	pop	{r3, pc}
 800416c:	20000008 	.word	0x20000008
 8004170:	200129e4 	.word	0x200129e4

08004174 <make_sound>:
/*===============================================================================================================*/

void make_sound(uint16_t *buf, uint16_t length) // To be used with the Sequencer
{
 8004174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004178:	ed2d 8b04 	vpush	{d8-d9}
 800417c:	1d06      	adds	r6, r0, #4

	for (pos = 0; pos < length; pos++) {
		/*--- Sequencer actions and update ---*/
		//sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
		// GRA
		if (sequencerIsOn == true) {
 800417e:	f8df 820c 	ldr.w	r8, [pc, #524]	; 800438c <make_sound+0x218>
 8004182:	4c72      	ldr	r4, [pc, #456]	; (800434c <make_sound+0x1d8>)
 8004184:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{
 8004188:	b082      	sub	sp, #8
 800418a:	1d05      	adds	r5, r0, #4
	for (pos = 0; pos < length; pos++) {
 800418c:	42ae      	cmp	r6, r5
 800418e:	d104      	bne.n	800419a <make_sound+0x26>

		*outp++ = valueL; // left channel sample
		*outp++ = valueR; // right channel sample
	}

}
 8004190:	b002      	add	sp, #8
 8004192:	ecbd 8b04 	vpop	{d8-d9}
 8004196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sequencerIsOn == true) {
 800419a:	f898 3000 	ldrb.w	r3, [r8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80b3 	beq.w	800430a <make_sound+0x196>
			sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
 80041a4:	f7ff fd54 	bl	8003c50 <sequencer_process>
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 80041a8:	4869      	ldr	r0, [pc, #420]	; (8004350 <make_sound+0x1dc>)
		env = ADSR_computeSample(&adsr)
 80041aa:	4f6a      	ldr	r7, [pc, #424]	; (8004354 <make_sound+0x1e0>)
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 80041ac:	f7fe fc8a 	bl	8002ac4 <Osc_WT_SINE_SampleCompute>
 80041b0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80041b4:	edd4 7a03 	vldr	s15, [r4, #12]
		y = waveCompute(sound, f1);
 80041b8:	7860      	ldrb	r0, [r4, #1]
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 80041ba:	ee30 0a28 	vadd.f32	s0, s0, s17
		y = waveCompute(sound, f1);
 80041be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80041c2:	f7ff f811 	bl	80031e8 <waveCompute>
		env = ADSR_computeSample(&adsr)
 80041c6:	4638      	mov	r0, r7
		y = waveCompute(sound, f1);
 80041c8:	eeb0 8a40 	vmov.f32	s16, s0
		env = ADSR_computeSample(&adsr)
 80041cc:	f7fc ffd4 	bl	8001178 <ADSR_computeSample>
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80041d0:	4861      	ldr	r0, [pc, #388]	; (8004358 <make_sound+0x1e4>)
		env = ADSR_computeSample(&adsr)
 80041d2:	eef0 9a40 	vmov.f32	s19, s0
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80041d6:	f7fe fc75 	bl	8002ac4 <Osc_WT_SINE_SampleCompute>
 80041da:	ee30 9a28 	vadd.f32	s18, s0, s17
		y *= vol * env; // apply volume and envelop
 80041de:	ed94 0a02 	vldr	s0, [r4, #8]
		if (sequencerIsOn == true) {
 80041e2:	f898 3000 	ldrb.w	r3, [r8]
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 80041e6:	ee29 9a29 	vmul.f32	s18, s18, s19
		y *= vol * env; // apply volume and envelop
 80041ea:	ee29 9a00 	vmul.f32	s18, s18, s0
 80041ee:	ee29 9a08 	vmul.f32	s18, s18, s16
		if (sequencerIsOn == true) {
 80041f2:	b13b      	cbz	r3, 8004204 <make_sound+0x90>
			if (adsr.cnt_ >= seq.gateTime)
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <make_sound+0x1e8>)
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <make_sound+0x90>
				ADSR_keyOff(&adsr);
 80041fe:	4638      	mov	r0, r7
 8004200:	f7fc ff2d 	bl	800105e <ADSR_keyOff>
		if ((!autoFilterON) && (filt_lfo.amp != 0))
 8004204:	78e3      	ldrb	r3, [r4, #3]
 8004206:	b99b      	cbnz	r3, 8004230 <make_sound+0xbc>
 8004208:	4855      	ldr	r0, [pc, #340]	; (8004360 <make_sound+0x1ec>)
 800420a:	edd0 7a00 	vldr	s15, [r0]
 800420e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004216:	d00b      	beq.n	8004230 <make_sound+0xbc>
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 8004218:	f7fe fd20 	bl	8002c5c <OpSampleCompute7bis>
			SVF_directSetFilterValue(&SVFilter,
 800421c:	4b51      	ldr	r3, [pc, #324]	; (8004364 <make_sound+0x1f0>)
 800421e:	4852      	ldr	r0, [pc, #328]	; (8004368 <make_sound+0x1f4>)
 8004220:	edd3 7a00 	vldr	s15, [r3]
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 8004224:	ee30 0a28 	vadd.f32	s0, s0, s17
			SVF_directSetFilterValue(&SVFilter,
 8004228:	ee20 0a27 	vmul.f32	s0, s0, s15
 800422c:	f7ff fa18 	bl	8003660 <SVF_directSetFilterValue>
		if (filt2_lfo.amp != 0)
 8004230:	484e      	ldr	r0, [pc, #312]	; (800436c <make_sound+0x1f8>)
 8004232:	edd0 7a00 	vldr	s15, [r0]
 8004236:	eef5 7a40 	vcmp.f32	s15, #0.0
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	d00b      	beq.n	8004258 <make_sound+0xe4>
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 8004240:	f7fe fd0c 	bl	8002c5c <OpSampleCompute7bis>
			SVF_directSetFilterValue(&SVFilter2,
 8004244:	4b4a      	ldr	r3, [pc, #296]	; (8004370 <make_sound+0x1fc>)
 8004246:	484b      	ldr	r0, [pc, #300]	; (8004374 <make_sound+0x200>)
 8004248:	edd3 7a00 	vldr	s15, [r3]
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 800424c:	ee30 0a28 	vadd.f32	s0, s0, s17
			SVF_directSetFilterValue(&SVFilter2,
 8004250:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004254:	f7ff fa04 	bl	8003660 <SVF_directSetFilterValue>
						* (SVF_calcSample(&SVFilter, y)
 8004258:	4843      	ldr	r0, [pc, #268]	; (8004368 <make_sound+0x1f4>)
 800425a:	eeb0 0a49 	vmov.f32	s0, s18
 800425e:	f7ff fae9 	bl	8003834 <SVF_calcSample>
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 8004262:	4844      	ldr	r0, [pc, #272]	; (8004374 <make_sound+0x200>)
						* (SVF_calcSample(&SVFilter, y)
 8004264:	eeb0 8a40 	vmov.f32	s16, s0
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 8004268:	eeb0 0a49 	vmov.f32	s0, s18
 800426c:	f7ff fae2 	bl	8003834 <SVF_calcSample>
		if (delayON)
 8004270:	78a3      	ldrb	r3, [r4, #2]
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 8004272:	ee38 0a00 	vadd.f32	s0, s16, s0
		y =
 8004276:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800427a:	ee20 0a27 	vmul.f32	s0, s0, s15
		if (delayON)
 800427e:	b10b      	cbz	r3, 8004284 <make_sound+0x110>
			y = Delay_compute(y);
 8004280:	f7fe f830 	bl	80022e4 <Delay_compute>
		if (phaserON)
 8004284:	7963      	ldrb	r3, [r4, #5]
 8004286:	b10b      	cbz	r3, 800428c <make_sound+0x118>
			y = Phaser_compute(y);
 8004288:	f7ff f916 	bl	80034b8 <Phaser_compute>
		if (chorusON)
 800428c:	7923      	ldrb	r3, [r4, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d051      	beq.n	8004336 <make_sound+0x1c2>
			stereoChorus_compute(&yL, &yR, y);
 8004292:	a901      	add	r1, sp, #4
 8004294:	4668      	mov	r0, sp
 8004296:	f7fd ff99 	bl	80021cc <stereoChorus_compute>
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 800429a:	ed9d 7a00 	vldr	s14, [sp]
 800429e:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	dc4b      	bgt.n	8004340 <make_sound+0x1cc>
		yL = (yL < -1.0f) ? -1.0f : yL;
 80042a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80042ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80042b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b4:	bf48      	it	mi
 80042b6:	eeb0 7a67 	vmovmi.f32	s14, s15
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 80042ba:	eddd 7a01 	vldr	s15, [sp, #4]
		yL = (yL < -1.0f) ? -1.0f : yL;
 80042be:	ed8d 7a00 	vstr	s14, [sp]
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 80042c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	dc3c      	bgt.n	8004346 <make_sound+0x1d2>
		yR = (yR < -1.0f) ? -1.0f : yR;
 80042cc:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80042d0:	eef4 7a66 	vcmp.f32	s15, s13
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf48      	it	mi
 80042da:	eef0 7a66 	vmovmi.f32	s15, s13
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80042de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004378 <make_sound+0x204>
		yR = (yR < -1.0f) ? -1.0f : yR;
 80042e2:	edcd 7a01 	vstr	s15, [sp, #4]
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80042e6:	ee27 7a26 	vmul.f32	s14, s14, s13
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80042ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80042ee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80042f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80042f6:	ee17 3a10 	vmov	r3, s14
 80042fa:	f826 3c04 	strh.w	r3, [r6, #-4]
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80042fe:	ee17 3a90 	vmov	r3, s15
 8004302:	3604      	adds	r6, #4
 8004304:	f826 3c06 	strh.w	r3, [r6, #-6]
 8004308:	e740      	b.n	800418c <make_sound+0x18>
			f0 = notesFreq[currentNote];
 800430a:	4b1c      	ldr	r3, [pc, #112]	; (800437c <make_sound+0x208>)
			vol = (float) velocity / 127.0f;
 800430c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004380 <make_sound+0x20c>
			f0 = notesFreq[currentNote];
 8004310:	f993 2000 	ldrsb.w	r2, [r3]
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <make_sound+0x210>)
 8004316:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60e3      	str	r3, [r4, #12]
			vol = (float) velocity / 127.0f;
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <make_sound+0x214>)
 8004320:	f993 3000 	ldrsb.w	r3, [r3]
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004330:	ed84 7a02 	vstr	s14, [r4, #8]
 8004334:	e738      	b.n	80041a8 <make_sound+0x34>
			yL = yR = y;
 8004336:	ed8d 0a01 	vstr	s0, [sp, #4]
 800433a:	ed8d 0a00 	vstr	s0, [sp]
 800433e:	e7ac      	b.n	800429a <make_sound+0x126>
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 8004340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004344:	e7b9      	b.n	80042ba <make_sound+0x146>
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 8004346:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800434a:	e7c8      	b.n	80042de <make_sound+0x16a>
 800434c:	20003f40 	.word	0x20003f40
 8004350:	20003e78 	.word	0x20003e78
 8004354:	20000084 	.word	0x20000084
 8004358:	20003e18 	.word	0x20003e18
 800435c:	20003ed8 	.word	0x20003ed8
 8004360:	20003e58 	.word	0x20003e58
 8004364:	20013c10 	.word	0x20013c10
 8004368:	20003e98 	.word	0x20003e98
 800436c:	20003e38 	.word	0x20003e38
 8004370:	20013c14 	.word	0x20013c14
 8004374:	20003eb8 	.word	0x20003eb8
 8004378:	46fffe00 	.word	0x46fffe00
 800437c:	20012a2c 	.word	0x20012a2c
 8004380:	42fe0000 	.word	0x42fe0000
 8004384:	080151d4 	.word	0x080151d4
 8004388:	20012a2d 	.word	0x20012a2d
 800438c:	20000009 	.word	0x20000009

08004390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004390:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_MspInit+0x34>)
 8004394:	2100      	movs	r1, #0
 8004396:	9100      	str	r1, [sp, #0]
 8004398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800439e:	645a      	str	r2, [r3, #68]	; 0x44
 80043a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80043a6:	9200      	str	r2, [sp, #0]
 80043a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	9101      	str	r1, [sp, #4]
 80043ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043be:	b002      	add	sp, #8
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800

080043c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	4606      	mov	r6, r0
 80043cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ce:	2214      	movs	r2, #20
 80043d0:	2100      	movs	r1, #0
 80043d2:	a803      	add	r0, sp, #12
 80043d4:	f002 f867 	bl	80064a6 <memset>
  if(hadc->Instance==ADC1)
 80043d8:	6832      	ldr	r2, [r6, #0]
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_ADC_MspInit+0x94>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d13a      	bne.n	8004456 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043e0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80043e4:	2500      	movs	r5, #0
 80043e6:	9501      	str	r5, [sp, #4]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ea:	481d      	ldr	r0, [pc, #116]	; (8004460 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80043ec:	4c1d      	ldr	r4, [pc, #116]	; (8004464 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
 80043f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80043fa:	9201      	str	r2, [sp, #4]
 80043fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fe:	9502      	str	r5, [sp, #8]
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	f042 0204 	orr.w	r2, r2, #4
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	9302      	str	r3, [sp, #8]
 8004410:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004412:	220f      	movs	r2, #15
 8004414:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004416:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004418:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800441c:	f000 fe0c 	bl	8005038 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004422:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004426:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800442a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800442e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004432:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800443a:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800443e:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004440:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004444:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004448:	f000 fc80 	bl	8004d4c <HAL_DMA_Init>
 800444c:	b108      	cbz	r0, 8004452 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 800444e:	f7fe fa49 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004452:	63b4      	str	r4, [r6, #56]	; 0x38
 8004454:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004456:	b008      	add	sp, #32
 8004458:	bd70      	pop	{r4, r5, r6, pc}
 800445a:	bf00      	nop
 800445c:	40012000 	.word	0x40012000
 8004460:	40020800 	.word	0x40020800
 8004464:	20013af8 	.word	0x20013af8
 8004468:	40026410 	.word	0x40026410

0800446c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800446c:	b530      	push	{r4, r5, lr}
 800446e:	4604      	mov	r4, r0
 8004470:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004472:	2214      	movs	r2, #20
 8004474:	2100      	movs	r1, #0
 8004476:	a803      	add	r0, sp, #12
 8004478:	f002 f815 	bl	80064a6 <memset>
  if(hi2c->Instance==I2C2)
 800447c:	6822      	ldr	r2, [r4, #0]
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <HAL_I2C_MspInit+0x68>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d124      	bne.n	80044ce <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004484:	4c14      	ldr	r4, [pc, #80]	; (80044d8 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004486:	4815      	ldr	r0, [pc, #84]	; (80044dc <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004488:	2500      	movs	r5, #0
 800448a:	9501      	str	r5, [sp, #4]
 800448c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800448e:	f043 0302 	orr.w	r3, r3, #2
 8004492:	6323      	str	r3, [r4, #48]	; 0x30
 8004494:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800449e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80044a2:	2312      	movs	r3, #18
 80044a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a8:	2101      	movs	r1, #1
 80044aa:	2303      	movs	r3, #3
 80044ac:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044b0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b6:	f000 fdbf 	bl	8005038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044ba:	9502      	str	r5, [sp, #8]
 80044bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044c2:	6423      	str	r3, [r4, #64]	; 0x40
 80044c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	9302      	str	r3, [sp, #8]
 80044cc:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80044ce:	b009      	add	sp, #36	; 0x24
 80044d0:	bd30      	pop	{r4, r5, pc}
 80044d2:	bf00      	nop
 80044d4:	40005800 	.word	0x40005800
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40020400 	.word	0x40020400

080044e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80044e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e4:	4606      	mov	r6, r0
 80044e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e8:	2214      	movs	r2, #20
 80044ea:	2100      	movs	r1, #0
 80044ec:	a803      	add	r0, sp, #12
 80044ee:	f001 ffda 	bl	80064a6 <memset>
  if(hi2s->Instance==SPI2)
 80044f2:	6832      	ldr	r2, [r6, #0]
 80044f4:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <HAL_I2S_MspInit+0xf0>)
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d167      	bne.n	80045ca <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044fa:	2500      	movs	r5, #0
 80044fc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004500:	9500      	str	r5, [sp, #0]
 8004502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004504:	4833      	ldr	r0, [pc, #204]	; (80045d4 <HAL_I2S_MspInit+0xf4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
 800450c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004512:	9200      	str	r2, [sp, #0]
 8004514:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004516:	9501      	str	r5, [sp, #4]
 8004518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451a:	f042 0202 	orr.w	r2, r2, #2
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
 8004520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004522:	f002 0202 	and.w	r2, r2, #2
 8004526:	9201      	str	r2, [sp, #4]
 8004528:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800452a:	9502      	str	r5, [sp, #8]
 800452c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452e:	f042 0204 	orr.w	r2, r2, #4
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800453e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004540:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800454e:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004552:	f000 fd71 	bl	8005038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800455e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004560:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004562:	481c      	ldr	r0, [pc, #112]	; (80045d4 <HAL_I2S_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004564:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004566:	2740      	movs	r7, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004568:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456c:	f000 fd64 	bl	8005038 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004570:	a903      	add	r1, sp, #12
 8004572:	4819      	ldr	r0, [pc, #100]	; (80045d8 <HAL_I2S_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004574:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457c:	e9cd 5505 	strd	r5, r5, [sp, #20]

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004580:	4c16      	ldr	r4, [pc, #88]	; (80045dc <HAL_I2S_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004582:	f000 fd59 	bl	8005038 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004586:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <HAL_I2S_MspInit+0x100>)
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004588:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800458a:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800458e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004592:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004596:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800459a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800459e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80045a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80045a6:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80045aa:	2304      	movs	r3, #4
 80045ac:	e9c4 0308 	strd	r0, r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80045b0:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80045b2:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045b4:	e9c4 7502 	strd	r7, r5, [r4, #8]
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80045b8:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80045bc:	f000 fbc6 	bl	8004d4c <HAL_DMA_Init>
 80045c0:	b108      	cbz	r0, 80045c6 <HAL_I2S_MspInit+0xe6>
    {
      Error_Handler();
 80045c2:	f7fe f98f 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80045c6:	63b4      	str	r4, [r6, #56]	; 0x38
 80045c8:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80045ca:	b008      	add	sp, #32
 80045cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d0:	40003800 	.word	0x40003800
 80045d4:	40020400 	.word	0x40020400
 80045d8:	40020800 	.word	0x40020800
 80045dc:	20013b68 	.word	0x20013b68
 80045e0:	40026070 	.word	0x40026070

080045e4 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80045e4:	6802      	ldr	r2, [r0, #0]
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RNG_MspInit+0x28>)
 80045e8:	429a      	cmp	r2, r3
{
 80045ea:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 80045ec:	d10b      	bne.n	8004606 <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <HAL_RNG_MspInit+0x2c>)
 80045f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fa:	635a      	str	r2, [r3, #52]	; 0x34
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004606:	b002      	add	sp, #8
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	50060800 	.word	0x50060800
 8004610:	40023800 	.word	0x40023800

08004614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004614:	b510      	push	{r4, lr}
 8004616:	4604      	mov	r4, r0
 8004618:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461a:	2214      	movs	r2, #20
 800461c:	2100      	movs	r1, #0
 800461e:	a803      	add	r0, sp, #12
 8004620:	f001 ff41 	bl	80064a6 <memset>
  if(huart->Instance==USART1)
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <HAL_UART_MspInit+0x64>)
 8004628:	429a      	cmp	r2, r3
 800462a:	d122      	bne.n	8004672 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800462c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004630:	2100      	movs	r1, #0
 8004632:	9101      	str	r1, [sp, #4]
 8004634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004636:	4811      	ldr	r0, [pc, #68]	; (800467c <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004638:	f042 0210 	orr.w	r2, r2, #16
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
 800463e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004640:	f002 0210 	and.w	r2, r2, #16
 8004644:	9201      	str	r2, [sp, #4]
 8004646:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004648:	9102      	str	r1, [sp, #8]
 800464a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464c:	f042 0202 	orr.w	r2, r2, #2
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	9302      	str	r3, [sp, #8]
 800465a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	22c0      	movs	r2, #192	; 0xc0
 800465e:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004660:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004662:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004666:	2307      	movs	r3, #7
 8004668:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800466c:	a903      	add	r1, sp, #12
 800466e:	f000 fce3 	bl	8005038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004672:	b008      	add	sp, #32
 8004674:	bd10      	pop	{r4, pc}
 8004676:	bf00      	nop
 8004678:	40011000 	.word	0x40011000
 800467c:	40020400 	.word	0x40020400

08004680 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004680:	4770      	bx	lr

08004682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004682:	e7fe      	b.n	8004682 <HardFault_Handler>

08004684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004684:	e7fe      	b.n	8004684 <MemManage_Handler>

08004686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004686:	e7fe      	b.n	8004686 <BusFault_Handler>

08004688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004688:	e7fe      	b.n	8004688 <UsageFault_Handler>

0800468a <SVC_Handler>:
 800468a:	4770      	bx	lr

0800468c <DebugMon_Handler>:
 800468c:	4770      	bx	lr

0800468e <PendSV_Handler>:
 800468e:	4770      	bx	lr

08004690 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004690:	f000 b8a2 	b.w	80047d8 <HAL_IncTick>

08004694 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <DMA1_Stream4_IRQHandler+0x8>)
 8004696:	f000 bc11 	b.w	8004ebc <HAL_DMA_IRQHandler>
 800469a:	bf00      	nop
 800469c:	20013b68 	.word	0x20013b68

080046a0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <DMA2_Stream0_IRQHandler+0x8>)
 80046a2:	f000 bc0b 	b.w	8004ebc <HAL_DMA_IRQHandler>
 80046a6:	bf00      	nop
 80046a8:	20013af8 	.word	0x20013af8

080046ac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <_sbrk+0x30>)
 80046ae:	6819      	ldr	r1, [r3, #0]
{
 80046b0:	b510      	push	{r4, lr}
 80046b2:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80046b4:	b909      	cbnz	r1, 80046ba <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80046b6:	490a      	ldr	r1, [pc, #40]	; (80046e0 <_sbrk+0x34>)
 80046b8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	4909      	ldr	r1, [pc, #36]	; (80046e4 <_sbrk+0x38>)
 80046be:	4c0a      	ldr	r4, [pc, #40]	; (80046e8 <_sbrk+0x3c>)
 80046c0:	4402      	add	r2, r0
 80046c2:	1b09      	subs	r1, r1, r4
 80046c4:	428a      	cmp	r2, r1
 80046c6:	d906      	bls.n	80046d6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80046c8:	f001 feb8 	bl	800643c <__errno>
 80046cc:	230c      	movs	r3, #12
 80046ce:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80046d4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80046d6:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80046d8:	e7fc      	b.n	80046d4 <_sbrk+0x28>
 80046da:	bf00      	nop
 80046dc:	20012a20 	.word	0x20012a20
 80046e0:	20013c20 	.word	0x20013c20
 80046e4:	20020000 	.word	0x20020000
 80046e8:	00000400 	.word	0x00000400

080046ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <SystemInit+0x18>)
 80046ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80046f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046fe:	609a      	str	r2, [r3, #8]
#endif
}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004740 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800470c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800470e:	e003      	b.n	8004718 <LoopCopyDataInit>

08004710 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004712:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004714:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004716:	3104      	adds	r1, #4

08004718 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004718:	480b      	ldr	r0, [pc, #44]	; (8004748 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800471c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800471e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004720:	d3f6      	bcc.n	8004710 <CopyDataInit>
  ldr  r2, =_sbss
 8004722:	4a0b      	ldr	r2, [pc, #44]	; (8004750 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004724:	e002      	b.n	800472c <LoopFillZerobss>

08004726 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004726:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004728:	f842 3b04 	str.w	r3, [r2], #4

0800472c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800472e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004730:	d3f9      	bcc.n	8004726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004732:	f7ff ffdb 	bl	80046ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004736:	f001 fe87 	bl	8006448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800473a:	f7fd ff95 	bl	8002668 <main>
  bx  lr    
 800473e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004740:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004744:	080167f0 	.word	0x080167f0
  ldr  r0, =_sdata
 8004748:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800474c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8004750:	20003f50 	.word	0x20003f50
  ldr  r3, = _ebss
 8004754:	20013c20 	.word	0x20013c20

08004758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004758:	e7fe      	b.n	8004758 <ADC_IRQHandler>
	...

0800475c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800475c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800475e:	4a0e      	ldr	r2, [pc, #56]	; (8004798 <HAL_InitTick+0x3c>)
 8004760:	4b0e      	ldr	r3, [pc, #56]	; (800479c <HAL_InitTick+0x40>)
{
 8004762:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004764:	7818      	ldrb	r0, [r3, #0]
 8004766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800476a:	fbb3 f3f0 	udiv	r3, r3, r0
 800476e:	6810      	ldr	r0, [r2, #0]
 8004770:	fbb0 f0f3 	udiv	r0, r0, r3
 8004774:	f000 fabe 	bl	8004cf4 <HAL_SYSTICK_Config>
 8004778:	4604      	mov	r4, r0
 800477a:	b958      	cbnz	r0, 8004794 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800477c:	2d0f      	cmp	r5, #15
 800477e:	d809      	bhi.n	8004794 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004780:	4602      	mov	r2, r0
 8004782:	4629      	mov	r1, r5
 8004784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004788:	f000 fa72 	bl	8004c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <HAL_InitTick+0x44>)
 800478e:	4620      	mov	r0, r4
 8004790:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004792:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004794:	2001      	movs	r0, #1
 8004796:	e7fc      	b.n	8004792 <HAL_InitTick+0x36>
 8004798:	20000010 	.word	0x20000010
 800479c:	20000014 	.word	0x20000014
 80047a0:	20000018 	.word	0x20000018

080047a4 <HAL_Init>:
{
 80047a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_Init+0x30>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c0:	2003      	movs	r0, #3
 80047c2:	f000 fa43 	bl	8004c4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7ff ffc8 	bl	800475c <HAL_InitTick>
  HAL_MspInit();
 80047cc:	f7ff fde0 	bl	8004390 <HAL_MspInit>
}
 80047d0:	2000      	movs	r0, #0
 80047d2:	bd08      	pop	{r3, pc}
 80047d4:	40023c00 	.word	0x40023c00

080047d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80047d8:	4a03      	ldr	r2, [pc, #12]	; (80047e8 <HAL_IncTick+0x10>)
 80047da:	4b04      	ldr	r3, [pc, #16]	; (80047ec <HAL_IncTick+0x14>)
 80047dc:	6811      	ldr	r1, [r2, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	440b      	add	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]
}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20013c18 	.word	0x20013c18
 80047ec:	20000014 	.word	0x20000014

080047f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80047f0:	4b01      	ldr	r3, [pc, #4]	; (80047f8 <HAL_GetTick+0x8>)
 80047f2:	6818      	ldr	r0, [r3, #0]
}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20013c18 	.word	0x20013c18

080047fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff fff6 	bl	80047f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004804:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004806:	bf1c      	itt	ne
 8004808:	4b05      	ldrne	r3, [pc, #20]	; (8004820 <HAL_Delay+0x24>)
 800480a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800480c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800480e:	bf18      	it	ne
 8004810:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004812:	f7ff ffed 	bl	80047f0 <HAL_GetTick>
 8004816:	1b40      	subs	r0, r0, r5
 8004818:	42a0      	cmp	r0, r4
 800481a:	d3fa      	bcc.n	8004812 <HAL_Delay+0x16>
  {
  }
}
 800481c:	bd38      	pop	{r3, r4, r5, pc}
 800481e:	bf00      	nop
 8004820:	20000014 	.word	0x20000014

08004824 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004824:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004826:	4604      	mov	r4, r0
 8004828:	2800      	cmp	r0, #0
 800482a:	f000 809b 	beq.w	8004964 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800482e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004830:	b925      	cbnz	r5, 800483c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004832:	f7ff fdc9 	bl	80043c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004836:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004838:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800483c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800483e:	06db      	lsls	r3, r3, #27
 8004840:	f100 808e 	bmi.w	8004960 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004846:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800484a:	f023 0302 	bic.w	r3, r3, #2
 800484e:	f043 0302 	orr.w	r3, r3, #2
 8004852:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004854:	4b44      	ldr	r3, [pc, #272]	; (8004968 <HAL_ADC_Init+0x144>)
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800485c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	6861      	ldr	r1, [r4, #4]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004866:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004868:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800487a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800487c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800487e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004882:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800488a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800488c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800488e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	430a      	orrs	r2, r1
 8004898:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800489a:	4934      	ldr	r1, [pc, #208]	; (800496c <HAL_ADC_Init+0x148>)
 800489c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800489e:	428a      	cmp	r2, r1
 80048a0:	d052      	beq.n	8004948 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048a2:	6899      	ldr	r1, [r3, #8]
 80048a4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80048a8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048aa:	6899      	ldr	r1, [r3, #8]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048b0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048be:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048c0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048c2:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048c4:	f022 0202 	bic.w	r2, r2, #2
 80048c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80048d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048d2:	f894 2020 	ldrb.w	r2, [r4, #32]
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	d03e      	beq.n	8004958 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048da:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	3901      	subs	r1, #1
 80048f0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048f4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048f8:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	3901      	subs	r1, #1
 8004904:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004908:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800490a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800490c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004910:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800491c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800491e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004920:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004928:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800492a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800492c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004930:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004932:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004940:	2300      	movs	r3, #0
 8004942:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004946:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800494e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004956:	e7b2      	b.n	80048be <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495e:	e7c9      	b.n	80048f4 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8004960:	2001      	movs	r0, #1
 8004962:	e7ed      	b.n	8004940 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8004964:	2001      	movs	r0, #1
 8004966:	e7ee      	b.n	8004946 <HAL_ADC_Init+0x122>
 8004968:	40012300 	.word	0x40012300
 800496c:	0f000001 	.word	0x0f000001

08004970 <HAL_ADC_Start_DMA>:
{
 8004970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004972:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8004974:	2200      	movs	r2, #0
 8004976:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004978:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800497c:	2a01      	cmp	r2, #1
{
 800497e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004980:	d077      	beq.n	8004a72 <HAL_ADC_Start_DMA+0x102>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004982:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8004984:	2201      	movs	r2, #1
 8004986:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800498a:	68aa      	ldr	r2, [r5, #8]
 800498c:	07d0      	lsls	r0, r2, #31
 800498e:	d505      	bpl.n	800499c <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004990:	68aa      	ldr	r2, [r5, #8]
 8004992:	07d2      	lsls	r2, r2, #31
 8004994:	d415      	bmi.n	80049c2 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8004996:	2000      	movs	r0, #0
}
 8004998:	b003      	add	sp, #12
 800499a:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800499c:	68aa      	ldr	r2, [r5, #8]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049a4:	4a34      	ldr	r2, [pc, #208]	; (8004a78 <HAL_ADC_Start_DMA+0x108>)
 80049a6:	6810      	ldr	r0, [r2, #0]
 80049a8:	4a34      	ldr	r2, [pc, #208]	; (8004a7c <HAL_ADC_Start_DMA+0x10c>)
 80049aa:	fbb0 f0f2 	udiv	r0, r0, r2
 80049ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80049b2:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80049b4:	9a01      	ldr	r2, [sp, #4]
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	d0ea      	beq.n	8004990 <HAL_ADC_Start_DMA+0x20>
      counter--;
 80049ba:	9a01      	ldr	r2, [sp, #4]
 80049bc:	3a01      	subs	r2, #1
 80049be:	9201      	str	r2, [sp, #4]
 80049c0:	e7f8      	b.n	80049b4 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80049c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049c4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80049c8:	f020 0001 	bic.w	r0, r0, #1
 80049cc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80049d0:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049d2:	686a      	ldr	r2, [r5, #4]
 80049d4:	0550      	lsls	r0, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80049d6:	bf41      	itttt	mi
 80049d8:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 80049da:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80049de:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80049e2:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80049ec:	bf1c      	itt	ne
 80049ee:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80049f0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80049f4:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80049f6:	2200      	movs	r2, #0
 80049f8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049fc:	4a20      	ldr	r2, [pc, #128]	; (8004a80 <HAL_ADC_Start_DMA+0x110>)
 80049fe:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a00:	4a20      	ldr	r2, [pc, #128]	; (8004a84 <HAL_ADC_Start_DMA+0x114>)
 8004a02:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <HAL_ADC_Start_DMA+0x118>)
 8004a06:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a0c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a0e:	686a      	ldr	r2, [r5, #4]
 8004a10:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004a14:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004a16:	68aa      	ldr	r2, [r5, #8]
 8004a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a1c:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a1e:	460a      	mov	r2, r1
 8004a20:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8004a24:	f000 fa10 	bl	8004e48 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_ADC_Start_DMA+0x11c>)
 8004a2a:	4919      	ldr	r1, [pc, #100]	; (8004a90 <HAL_ADC_Start_DMA+0x120>)
 8004a2c:	6853      	ldr	r3, [r2, #4]
 8004a2e:	f013 0f1f 	tst.w	r3, #31
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	d11a      	bne.n	8004a6c <HAL_ADC_Start_DMA+0xfc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004a36:	428b      	cmp	r3, r1
 8004a38:	d006      	beq.n	8004a48 <HAL_ADC_Start_DMA+0xd8>
 8004a3a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8004a3e:	428b      	cmp	r3, r1
 8004a40:	d10b      	bne.n	8004a5a <HAL_ADC_Start_DMA+0xea>
 8004a42:	6852      	ldr	r2, [r2, #4]
 8004a44:	06d2      	lsls	r2, r2, #27
 8004a46:	d1a6      	bne.n	8004996 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a48:	6898      	ldr	r0, [r3, #8]
 8004a4a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004a4e:	d1a2      	bne.n	8004996 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	e79e      	b.n	8004998 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004a5a:	490e      	ldr	r1, [pc, #56]	; (8004a94 <HAL_ADC_Start_DMA+0x124>)
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	d19a      	bne.n	8004996 <HAL_ADC_Start_DMA+0x26>
 8004a60:	6852      	ldr	r2, [r2, #4]
 8004a62:	f002 021f 	and.w	r2, r2, #31
 8004a66:	2a0f      	cmp	r2, #15
 8004a68:	d9ee      	bls.n	8004a48 <HAL_ADC_Start_DMA+0xd8>
 8004a6a:	e794      	b.n	8004996 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	d192      	bne.n	8004996 <HAL_ADC_Start_DMA+0x26>
 8004a70:	e7ea      	b.n	8004a48 <HAL_ADC_Start_DMA+0xd8>
  __HAL_LOCK(hadc);
 8004a72:	2002      	movs	r0, #2
 8004a74:	e790      	b.n	8004998 <HAL_ADC_Start_DMA+0x28>
 8004a76:	bf00      	nop
 8004a78:	20000010 	.word	0x20000010
 8004a7c:	000f4240 	.word	0x000f4240
 8004a80:	08004abf 	.word	0x08004abf
 8004a84:	08004a9d 	.word	0x08004a9d
 8004a88:	08004aa9 	.word	0x08004aa9
 8004a8c:	40012300 	.word	0x40012300
 8004a90:	40012000 	.word	0x40012000
 8004a94:	40012200 	.word	0x40012200

08004a98 <HAL_ADC_ConvCpltCallback>:
 8004a98:	4770      	bx	lr

08004a9a <HAL_ADC_ConvHalfCpltCallback>:
 8004a9a:	4770      	bx	lr

08004a9c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a9c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004aa0:	f7ff fffb 	bl	8004a9a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aa4:	bd08      	pop	{r3, pc}

08004aa6 <HAL_ADC_ErrorCallback>:
 8004aa6:	4770      	bx	lr

08004aa8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aa8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004aaa:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004aac:	2340      	movs	r3, #64	; 0x40
 8004aae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ab0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ab2:	f043 0304 	orr.w	r3, r3, #4
 8004ab6:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ab8:	f7ff fff5 	bl	8004aa6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004abc:	bd08      	pop	{r3, pc}

08004abe <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004abe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ac2:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8004ac6:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004aca:	d123      	bne.n	8004b14 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	6891      	ldr	r1, [r2, #8]
 8004ad6:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8004ada:	d117      	bne.n	8004b0c <ADC_DMAConvCplt+0x4e>
 8004adc:	7e19      	ldrb	r1, [r3, #24]
 8004ade:	b9a9      	cbnz	r1, 8004b0c <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ae0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ae2:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8004ae6:	d002      	beq.n	8004aee <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ae8:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004aea:	0548      	lsls	r0, r1, #21
 8004aec:	d40e      	bmi.n	8004b0c <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004aee:	6851      	ldr	r1, [r2, #4]
 8004af0:	f021 0120 	bic.w	r1, r1, #32
 8004af4:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b00:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b02:	bf5e      	ittt	pl
 8004b04:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8004b06:	f042 0201 	orrpl.w	r2, r2, #1
 8004b0a:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ffc3 	bl	8004a98 <HAL_ADC_ConvCpltCallback>
}
 8004b12:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b14:	06d2      	lsls	r2, r2, #27
 8004b16:	d503      	bpl.n	8004b20 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ffc4 	bl	8004aa6 <HAL_ADC_ErrorCallback>
 8004b1e:	e7f8      	b.n	8004b12 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b28:	4718      	bx	r3
	...

08004b2c <HAL_ADC_ConfigChannel>:
{
 8004b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004b32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d07e      	beq.n	8004c38 <HAL_ADC_ConfigChannel+0x10c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b3a:	680d      	ldr	r5, [r1, #0]
 8004b3c:	688e      	ldr	r6, [r1, #8]
  __HAL_LOCK(hadc);
 8004b3e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b40:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8004b42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8004b46:	b2ac      	uxth	r4, r5
 8004b48:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b4a:	d929      	bls.n	8004ba0 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b4c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004b50:	68df      	ldr	r7, [r3, #12]
 8004b52:	3a1e      	subs	r2, #30
 8004b54:	f04f 0c07 	mov.w	ip, #7
 8004b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8004b5c:	ea27 070c 	bic.w	r7, r7, ip
 8004b60:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b62:	68df      	ldr	r7, [r3, #12]
 8004b64:	fa06 f202 	lsl.w	r2, r6, r2
 8004b68:	433a      	orrs	r2, r7
 8004b6a:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8004b6c:	6849      	ldr	r1, [r1, #4]
 8004b6e:	2906      	cmp	r1, #6
 8004b70:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004b74:	d824      	bhi.n	8004bc0 <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b78:	3a05      	subs	r2, #5
 8004b7a:	261f      	movs	r6, #31
 8004b7c:	4096      	lsls	r6, r2
 8004b7e:	ea21 0106 	bic.w	r1, r1, r6
 8004b82:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b86:	fa04 f202 	lsl.w	r2, r4, r2
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b8e:	4a2b      	ldr	r2, [pc, #172]	; (8004c3c <HAL_ADC_ConfigChannel+0x110>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d031      	beq.n	8004bf8 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8004b94:	2300      	movs	r3, #0
 8004b96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004b9a:	4618      	mov	r0, r3
}
 8004b9c:	b003      	add	sp, #12
 8004b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ba0:	691f      	ldr	r7, [r3, #16]
 8004ba2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8004ba6:	f04f 0c07 	mov.w	ip, #7
 8004baa:	fa0c fc02 	lsl.w	ip, ip, r2
 8004bae:	ea27 070c 	bic.w	r7, r7, ip
 8004bb2:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bb4:	691f      	ldr	r7, [r3, #16]
 8004bb6:	fa06 f202 	lsl.w	r2, r6, r2
 8004bba:	433a      	orrs	r2, r7
 8004bbc:	611a      	str	r2, [r3, #16]
 8004bbe:	e7d5      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8004bc0:	290c      	cmp	r1, #12
 8004bc2:	f04f 011f 	mov.w	r1, #31
 8004bc6:	d80b      	bhi.n	8004be0 <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004bc8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8004bca:	3a23      	subs	r2, #35	; 0x23
 8004bcc:	4091      	lsls	r1, r2
 8004bce:	ea26 0101 	bic.w	r1, r6, r1
 8004bd2:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bd6:	fa04 f202 	lsl.w	r2, r4, r2
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8004bde:	e7d6      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004be0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8004be2:	3a41      	subs	r2, #65	; 0x41
 8004be4:	4091      	lsls	r1, r2
 8004be6:	ea26 0101 	bic.w	r1, r6, r1
 8004bea:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bee:	fa04 f202 	lsl.w	r2, r4, r2
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bf6:	e7ca      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x62>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004bf8:	2d12      	cmp	r5, #18
 8004bfa:	d104      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0xda>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004bfc:	4a10      	ldr	r2, [pc, #64]	; (8004c40 <HAL_ADC_ConfigChannel+0x114>)
 8004bfe:	6853      	ldr	r3, [r2, #4]
 8004c00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c04:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c06:	f1a5 0310 	sub.w	r3, r5, #16
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d8c2      	bhi.n	8004b94 <HAL_ADC_ConfigChannel+0x68>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <HAL_ADC_ConfigChannel+0x114>)
 8004c10:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004c12:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c18:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004c1a:	d1bb      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x68>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_ADC_ConfigChannel+0x118>)
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <HAL_ADC_ConfigChannel+0x11c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c26:	230a      	movs	r3, #10
 8004c28:	4353      	muls	r3, r2
        counter--;
 8004c2a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004c2c:	9b01      	ldr	r3, [sp, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0b0      	beq.n	8004b94 <HAL_ADC_ConfigChannel+0x68>
        counter--;
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	e7f8      	b.n	8004c2a <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 8004c38:	2002      	movs	r0, #2
 8004c3a:	e7af      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x70>
 8004c3c:	40012000 	.word	0x40012000
 8004c40:	40012300 	.word	0x40012300
 8004c44:	20000010 	.word	0x20000010
 8004c48:	000f4240 	.word	0x000f4240

08004c4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c4c:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004c4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	0c1b      	lsrs	r3, r3, #16
 8004c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c5c:	0200      	lsls	r0, r0, #8
 8004c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c62:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004c66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004c68:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004c6a:	4770      	bx	lr
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c72:	b570      	push	{r4, r5, r6, lr}
 8004c74:	68dc      	ldr	r4, [r3, #12]
 8004c76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c7a:	f1c4 0507 	rsb	r5, r4, #7
 8004c7e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c80:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c84:	bf28      	it	cs
 8004c86:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c88:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c8c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c8e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c92:	bf8c      	ite	hi
 8004c94:	3c03      	subhi	r4, #3
 8004c96:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c98:	ea21 0303 	bic.w	r3, r1, r3
 8004c9c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c9e:	fa06 f404 	lsl.w	r4, r6, r4
 8004ca2:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004ca6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca8:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cac:	bfa8      	it	ge
 8004cae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8004cb2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb6:	bfbc      	itt	lt
 8004cb8:	f000 000f 	andlt.w	r0, r0, #15
 8004cbc:	4a05      	ldrlt	r2, [pc, #20]	; (8004cd4 <HAL_NVIC_SetPriority+0x64>)
 8004cbe:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc0:	bfaa      	itet	ge
 8004cc2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000ed00 	.word	0xe000ed00
 8004cd4:	e000ed14 	.word	0xe000ed14

08004cd8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	db08      	blt.n	8004cee <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cdc:	0942      	lsrs	r2, r0, #5
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f000 001f 	and.w	r0, r0, #31
 8004ce4:	fa03 f000 	lsl.w	r0, r3, r0
 8004ce8:	4b01      	ldr	r3, [pc, #4]	; (8004cf0 <HAL_NVIC_EnableIRQ+0x18>)
 8004cea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004cee:	4770      	bx	lr
 8004cf0:	e000e100 	.word	0xe000e100

08004cf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf4:	3801      	subs	r0, #1
 8004cf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004cfa:	d20a      	bcs.n	8004d12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d00:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d02:	21f0      	movs	r1, #240	; 0xf0
 8004d04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d0a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d0c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004d12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	e000e010 	.word	0xe000e010
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d20:	6803      	ldr	r3, [r0, #0]
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d28:	f023 0303 	bic.w	r3, r3, #3
 8004d2c:	2118      	movs	r1, #24
 8004d2e:	3a10      	subs	r2, #16
 8004d30:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d34:	4904      	ldr	r1, [pc, #16]	; (8004d48 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8004d36:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d38:	bf88      	it	hi
 8004d3a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d3c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d3e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d40:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8004d42:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	080163d8 	.word	0x080163d8

08004d4c <HAL_DMA_Init>:
{
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004d50:	f7ff fd4e 	bl	80047f0 <HAL_GetTick>
 8004d54:	4605      	mov	r5, r0
  if(hdma == NULL)
 8004d56:	2c00      	cmp	r4, #0
 8004d58:	d071      	beq.n	8004e3e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8004d60:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d62:	2302      	movs	r3, #2
 8004d64:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d70:	6821      	ldr	r1, [r4, #0]
 8004d72:	680b      	ldr	r3, [r1, #0]
 8004d74:	07d8      	lsls	r0, r3, #31
 8004d76:	d43c      	bmi.n	8004df2 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8004d78:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d7a:	4d32      	ldr	r5, [pc, #200]	; (8004e44 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d7c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d7e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d80:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	68e2      	ldr	r2, [r4, #12]
 8004d88:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8a:	6922      	ldr	r2, [r4, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	6962      	ldr	r2, [r4, #20]
 8004d90:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d92:	69e2      	ldr	r2, [r4, #28]
 8004d94:	4303      	orrs	r3, r0
 8004d96:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d98:	6a22      	ldr	r2, [r4, #32]
 8004d9a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d9e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004da0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004da4:	bf02      	ittt	eq
 8004da6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8004daa:	4335      	orreq	r5, r6
 8004dac:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8004dae:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8004db0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004db2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004db4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004db8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8004dbe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dc0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8004dc2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dc4:	b13d      	cbz	r5, 8004dd6 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dc6:	b9f8      	cbnz	r0, 8004e08 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8004dc8:	2a01      	cmp	r2, #1
 8004dca:	d02d      	beq.n	8004e28 <HAL_DMA_Init+0xdc>
 8004dcc:	d301      	bcc.n	8004dd2 <HAL_DMA_Init+0x86>
 8004dce:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dd0:	d101      	bne.n	8004dd6 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd2:	01ea      	lsls	r2, r5, #7
 8004dd4:	d42b      	bmi.n	8004e2e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8004dd6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff ffa1 	bl	8004d20 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004de0:	233f      	movs	r3, #63	; 0x3f
 8004de2:	4093      	lsls	r3, r2
 8004de4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004de8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dea:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004dec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004df0:	e009      	b.n	8004e06 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004df2:	f7ff fcfd 	bl	80047f0 <HAL_GetTick>
 8004df6:	1b40      	subs	r0, r0, r5
 8004df8:	2805      	cmp	r0, #5
 8004dfa:	d9b9      	bls.n	8004d70 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e00:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8004e02:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e08:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004e0c:	d113      	bne.n	8004e36 <HAL_DMA_Init+0xea>
    switch (tmp)
 8004e0e:	2a03      	cmp	r2, #3
 8004e10:	d8e1      	bhi.n	8004dd6 <HAL_DMA_Init+0x8a>
 8004e12:	a001      	add	r0, pc, #4	; (adr r0, 8004e18 <HAL_DMA_Init+0xcc>)
 8004e14:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004e18:	08004e2f 	.word	0x08004e2f
 8004e1c:	08004dd3 	.word	0x08004dd3
 8004e20:	08004e2f 	.word	0x08004e2f
 8004e24:	08004e29 	.word	0x08004e29
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e28:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004e2c:	d1d3      	bne.n	8004dd6 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e2e:	2340      	movs	r3, #64	; 0x40
 8004e30:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004e32:	2001      	movs	r0, #1
 8004e34:	e7e5      	b.n	8004e02 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8004e36:	2a02      	cmp	r2, #2
 8004e38:	d9f9      	bls.n	8004e2e <HAL_DMA_Init+0xe2>
 8004e3a:	2a03      	cmp	r2, #3
 8004e3c:	e7c8      	b.n	8004dd0 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8004e3e:	2001      	movs	r0, #1
 8004e40:	e7e1      	b.n	8004e06 <HAL_DMA_Init+0xba>
 8004e42:	bf00      	nop
 8004e44:	f010803f 	.word	0xf010803f

08004e48 <HAL_DMA_Start_IT>:
{
 8004e48:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8004e4a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004e4e:	2c01      	cmp	r4, #1
 8004e50:	d032      	beq.n	8004eb8 <HAL_DMA_Start_IT+0x70>
 8004e52:	2401      	movs	r4, #1
 8004e54:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e58:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e5e:	2c01      	cmp	r4, #1
 8004e60:	f04f 0500 	mov.w	r5, #0
 8004e64:	f04f 0402 	mov.w	r4, #2
 8004e68:	d124      	bne.n	8004eb4 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e6a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e6e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e70:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e72:	6825      	ldr	r5, [r4, #0]
 8004e74:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8004e78:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8004e7a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e7c:	6883      	ldr	r3, [r0, #8]
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8004e80:	bf0e      	itee	eq
 8004e82:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8004e84:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e86:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e88:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8004e8a:	bf08      	it	eq
 8004e8c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e8e:	233f      	movs	r3, #63	; 0x3f
 8004e90:	4093      	lsls	r3, r2
 8004e92:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	f043 0316 	orr.w	r3, r3, #22
 8004e9a:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004e9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e9e:	b11b      	cbz	r3, 8004ea8 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	f043 0308 	orr.w	r3, r3, #8
 8004ea6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb0:	2000      	movs	r0, #0
}
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8004eb4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8004eb8:	2002      	movs	r0, #2
 8004eba:	e7fa      	b.n	8004eb2 <HAL_DMA_Start_IT+0x6a>

08004ebc <HAL_DMA_IRQHandler>:
{
 8004ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ec2:	4b5c      	ldr	r3, [pc, #368]	; (8005034 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ec6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004eca:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ecc:	2208      	movs	r2, #8
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	4232      	tst	r2, r6
{
 8004ed2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ed6:	6801      	ldr	r1, [r0, #0]
 8004ed8:	6808      	ldr	r0, [r1, #0]
 8004eda:	0740      	lsls	r0, r0, #29
 8004edc:	d508      	bpl.n	8004ef0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ede:	6808      	ldr	r0, [r1, #0]
 8004ee0:	f020 0004 	bic.w	r0, r0, #4
 8004ee4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ee6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ee8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	4232      	tst	r2, r6
 8004ef6:	d008      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ef8:	6821      	ldr	r1, [r4, #0]
 8004efa:	6949      	ldr	r1, [r1, #20]
 8004efc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004efe:	bf41      	itttt	mi
 8004f00:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f02:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8004f04:	f042 0202 	orrmi.w	r2, r2, #2
 8004f08:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	4232      	tst	r2, r6
 8004f10:	d008      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f12:	6821      	ldr	r1, [r4, #0]
 8004f14:	6809      	ldr	r1, [r1, #0]
 8004f16:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f18:	bf41      	itttt	mi
 8004f1a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f1c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8004f1e:	f042 0204 	orrmi.w	r2, r2, #4
 8004f22:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f24:	2210      	movs	r2, #16
 8004f26:	409a      	lsls	r2, r3
 8004f28:	4232      	tst	r2, r6
 8004f2a:	d010      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	0709      	lsls	r1, r1, #28
 8004f32:	d50c      	bpl.n	8004f4e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f34:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	0350      	lsls	r0, r2, #13
 8004f3a:	d537      	bpl.n	8004fac <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	0319      	lsls	r1, r3, #12
 8004f40:	d401      	bmi.n	8004f46 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8004f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f44:	e000      	b.n	8004f48 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8004f48:	b10b      	cbz	r3, 8004f4e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f4e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f50:	2220      	movs	r2, #32
 8004f52:	408a      	lsls	r2, r1
 8004f54:	4232      	tst	r2, r6
 8004f56:	d03a      	beq.n	8004fce <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	06c6      	lsls	r6, r0, #27
 8004f5e:	d536      	bpl.n	8004fce <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f60:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f62:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004f66:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f68:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f6a:	d127      	bne.n	8004fbc <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f6c:	f022 0216 	bic.w	r2, r2, #22
 8004f70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f78:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f7c:	b90a      	cbnz	r2, 8004f82 <HAL_DMA_IRQHandler+0xc6>
 8004f7e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004f80:	b11a      	cbz	r2, 8004f8a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	f022 0208 	bic.w	r2, r2, #8
 8004f88:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f8a:	233f      	movs	r3, #63	; 0x3f
 8004f8c:	408b      	lsls	r3, r1
 8004f8e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8004f90:	2300      	movs	r3, #0
 8004f92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004f9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d045      	beq.n	800502e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8004fa2:	4620      	mov	r0, r4
}
 8004fa4:	b003      	add	sp, #12
 8004fa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8004faa:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fb0:	bf5e      	ittt	pl
 8004fb2:	681a      	ldrpl	r2, [r3, #0]
 8004fb4:	f022 0208 	bicpl.w	r2, r2, #8
 8004fb8:	601a      	strpl	r2, [r3, #0]
 8004fba:	e7c2      	b.n	8004f42 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fbc:	0350      	lsls	r0, r2, #13
 8004fbe:	d527      	bpl.n	8005010 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	0319      	lsls	r1, r3, #12
 8004fc4:	d431      	bmi.n	800502a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8004fc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8004fc8:	b10b      	cbz	r3, 8004fce <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8004fca:	4620      	mov	r0, r4
 8004fcc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fd0:	b36b      	cbz	r3, 800502e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fd4:	07da      	lsls	r2, r3, #31
 8004fd6:	d519      	bpl.n	800500c <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fd8:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8004fda:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fdc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004fe0:	6813      	ldr	r3, [r2, #0]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fe8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004fec:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8004ff0:	9b01      	ldr	r3, [sp, #4]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	42bb      	cmp	r3, r7
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	d802      	bhi.n	8005000 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	07db      	lsls	r3, r3, #31
 8004ffe:	d4f7      	bmi.n	8004ff0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8005000:	2300      	movs	r3, #0
 8005002:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005006:	2301      	movs	r3, #1
 8005008:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800500c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800500e:	e7c6      	b.n	8004f9e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005016:	d108      	bne.n	800502a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005018:	6819      	ldr	r1, [r3, #0]
 800501a:	f021 0110 	bic.w	r1, r1, #16
 800501e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005020:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8005022:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005026:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800502a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800502c:	e7cc      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x10c>
}
 800502e:	b003      	add	sp, #12
 8005030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005032:	bf00      	nop
 8005034:	20000010 	.word	0x20000010

08005038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800503e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005040:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80051f0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005044:	4a68      	ldr	r2, [pc, #416]	; (80051e8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005046:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80051f4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800504a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800504e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005050:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8005052:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005054:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8005056:	42ac      	cmp	r4, r5
 8005058:	f040 80b0 	bne.w	80051bc <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800505c:	684c      	ldr	r4, [r1, #4]
 800505e:	f024 0c10 	bic.w	ip, r4, #16
 8005062:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005066:	2603      	movs	r6, #3
 8005068:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 800506c:	fa06 f60e 	lsl.w	r6, r6, lr
 8005070:	2f01      	cmp	r7, #1
 8005072:	ea6f 0606 	mvn.w	r6, r6
 8005076:	d811      	bhi.n	800509c <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8005078:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800507a:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800507e:	68cf      	ldr	r7, [r1, #12]
 8005080:	fa07 f70e 	lsl.w	r7, r7, lr
 8005084:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005088:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800508a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800508c:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005090:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8005094:	409f      	lsls	r7, r3
 8005096:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800509a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800509c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800509e:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050a2:	688f      	ldr	r7, [r1, #8]
 80050a4:	fa07 f70e 	lsl.w	r7, r7, lr
 80050a8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ac:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80050b0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b2:	d116      	bne.n	80050e2 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80050b4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80050b8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050bc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80050c0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80050c8:	f04f 0c0f 	mov.w	ip, #15
 80050cc:	fa0c fc0b 	lsl.w	ip, ip, fp
 80050d0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050d4:	690f      	ldr	r7, [r1, #16]
 80050d6:	fa07 f70b 	lsl.w	r7, r7, fp
 80050da:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80050de:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80050e2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050e4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050e6:	f004 0703 	and.w	r7, r4, #3
 80050ea:	fa07 fe0e 	lsl.w	lr, r7, lr
 80050ee:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80050f2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050f4:	00e6      	lsls	r6, r4, #3
 80050f6:	d561      	bpl.n	80051bc <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f8:	f04f 0b00 	mov.w	fp, #0
 80050fc:	f8cd b00c 	str.w	fp, [sp, #12]
 8005100:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005104:	4e39      	ldr	r6, [pc, #228]	; (80051ec <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005106:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800510a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800510e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8005112:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8005116:	9703      	str	r7, [sp, #12]
 8005118:	9f03      	ldr	r7, [sp, #12]
 800511a:	f023 0703 	bic.w	r7, r3, #3
 800511e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8005122:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005126:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800512a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800512e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005132:	f04f 0c0f 	mov.w	ip, #15
 8005136:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800513a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800513c:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005140:	d043      	beq.n	80051ca <HAL_GPIO_Init+0x192>
 8005142:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005146:	42b0      	cmp	r0, r6
 8005148:	d041      	beq.n	80051ce <HAL_GPIO_Init+0x196>
 800514a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800514e:	42b0      	cmp	r0, r6
 8005150:	d03f      	beq.n	80051d2 <HAL_GPIO_Init+0x19a>
 8005152:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005156:	42b0      	cmp	r0, r6
 8005158:	d03d      	beq.n	80051d6 <HAL_GPIO_Init+0x19e>
 800515a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800515e:	42b0      	cmp	r0, r6
 8005160:	d03b      	beq.n	80051da <HAL_GPIO_Init+0x1a2>
 8005162:	4548      	cmp	r0, r9
 8005164:	d03b      	beq.n	80051de <HAL_GPIO_Init+0x1a6>
 8005166:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800516a:	42b0      	cmp	r0, r6
 800516c:	d039      	beq.n	80051e2 <HAL_GPIO_Init+0x1aa>
 800516e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005172:	42b0      	cmp	r0, r6
 8005174:	bf14      	ite	ne
 8005176:	2608      	movne	r6, #8
 8005178:	2607      	moveq	r6, #7
 800517a:	fa06 f60e 	lsl.w	r6, r6, lr
 800517e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005182:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8005184:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005186:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005188:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800518c:	bf0c      	ite	eq
 800518e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005190:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8005192:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8005194:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005196:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800519a:	bf0c      	ite	eq
 800519c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800519e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80051a0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051a2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051a4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80051a8:	bf0c      	ite	eq
 80051aa:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80051ac:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80051ae:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80051b0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051b2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80051b4:	bf54      	ite	pl
 80051b6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80051b8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80051ba:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051bc:	3301      	adds	r3, #1
 80051be:	2b10      	cmp	r3, #16
 80051c0:	f47f af45 	bne.w	800504e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80051c4:	b005      	add	sp, #20
 80051c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051ca:	465e      	mov	r6, fp
 80051cc:	e7d5      	b.n	800517a <HAL_GPIO_Init+0x142>
 80051ce:	2601      	movs	r6, #1
 80051d0:	e7d3      	b.n	800517a <HAL_GPIO_Init+0x142>
 80051d2:	2602      	movs	r6, #2
 80051d4:	e7d1      	b.n	800517a <HAL_GPIO_Init+0x142>
 80051d6:	2603      	movs	r6, #3
 80051d8:	e7cf      	b.n	800517a <HAL_GPIO_Init+0x142>
 80051da:	2604      	movs	r6, #4
 80051dc:	e7cd      	b.n	800517a <HAL_GPIO_Init+0x142>
 80051de:	2605      	movs	r6, #5
 80051e0:	e7cb      	b.n	800517a <HAL_GPIO_Init+0x142>
 80051e2:	2606      	movs	r6, #6
 80051e4:	e7c9      	b.n	800517a <HAL_GPIO_Init+0x142>
 80051e6:	bf00      	nop
 80051e8:	40013c00 	.word	0x40013c00
 80051ec:	40020000 	.word	0x40020000
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40021400 	.word	0x40021400

080051f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051f8:	b10a      	cbz	r2, 80051fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051fa:	6181      	str	r1, [r0, #24]
  }
}
 80051fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051fe:	0409      	lsls	r1, r1, #16
 8005200:	e7fb      	b.n	80051fa <HAL_GPIO_WritePin+0x2>

08005202 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005202:	6801      	ldr	r1, [r0, #0]
 8005204:	694b      	ldr	r3, [r1, #20]
 8005206:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	d010      	beq.n	8005232 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005210:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005214:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8005216:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005218:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800521a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005222:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005224:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005228:	f043 0304 	orr.w	r3, r3, #4
 800522c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800522e:	2001      	movs	r0, #1
 8005230:	4770      	bx	lr
  }
  return HAL_OK;
 8005232:	4618      	mov	r0, r3
}
 8005234:	4770      	bx	lr

08005236 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523a:	4604      	mov	r4, r0
 800523c:	4616      	mov	r6, r2
 800523e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005240:	b28f      	uxth	r7, r1
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	6968      	ldr	r0, [r5, #20]
 8005246:	ea37 0000 	bics.w	r0, r7, r0
 800524a:	d017      	beq.n	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524c:	696b      	ldr	r3, [r5, #20]
 800524e:	055a      	lsls	r2, r3, #21
 8005250:	d516      	bpl.n	8005280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005252:	682b      	ldr	r3, [r5, #0]
 8005254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005258:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800525e:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005260:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005262:	2300      	movs	r3, #0
 8005264:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005266:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800526e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005270:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005274:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005276:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800527a:	2001      	movs	r0, #1
}
 800527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005280:	1c73      	adds	r3, r6, #1
 8005282:	d0df      	beq.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005284:	f7ff fab4 	bl	80047f0 <HAL_GetTick>
 8005288:	eba0 0008 	sub.w	r0, r0, r8
 800528c:	42b0      	cmp	r0, r6
 800528e:	d801      	bhi.n	8005294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8005290:	2e00      	cmp	r6, #0
 8005292:	d1d6      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005294:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005296:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800529a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052a4:	f042 0220 	orr.w	r2, r2, #32
 80052a8:	e7e4      	b.n	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080052aa <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80052aa:	b570      	push	{r4, r5, r6, lr}
 80052ac:	4604      	mov	r4, r0
 80052ae:	460d      	mov	r5, r1
 80052b0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	075b      	lsls	r3, r3, #29
 80052b8:	d501      	bpl.n	80052be <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80052ba:	2000      	movs	r0, #0
}
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052be:	4620      	mov	r0, r4
 80052c0:	f7ff ff9f 	bl	8005202 <I2C_IsAcknowledgeFailed>
 80052c4:	b9a8      	cbnz	r0, 80052f2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80052c6:	1c6a      	adds	r2, r5, #1
 80052c8:	d0f3      	beq.n	80052b2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7ff fa91 	bl	80047f0 <HAL_GetTick>
 80052ce:	1b80      	subs	r0, r0, r6
 80052d0:	42a8      	cmp	r0, r5
 80052d2:	d801      	bhi.n	80052d8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	d1ec      	bne.n	80052b2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052d8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80052da:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052dc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80052e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052ec:	f042 0220 	orr.w	r2, r2, #32
 80052f0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80052f2:	2001      	movs	r0, #1
 80052f4:	e7e2      	b.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080052f6 <I2C_WaitOnFlagUntilTimeout>:
{
 80052f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fa:	9e08      	ldr	r6, [sp, #32]
 80052fc:	4604      	mov	r4, r0
 80052fe:	4690      	mov	r8, r2
 8005300:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005302:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8005306:	b28d      	uxth	r5, r1
 8005308:	6821      	ldr	r1, [r4, #0]
 800530a:	f1b9 0f01 	cmp.w	r9, #1
 800530e:	bf0c      	ite	eq
 8005310:	694b      	ldreq	r3, [r1, #20]
 8005312:	698b      	ldrne	r3, [r1, #24]
 8005314:	ea35 0303 	bics.w	r3, r5, r3
 8005318:	bf0c      	ite	eq
 800531a:	2301      	moveq	r3, #1
 800531c:	2300      	movne	r3, #0
 800531e:	4598      	cmp	r8, r3
 8005320:	d001      	beq.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8005322:	2000      	movs	r0, #0
 8005324:	e016      	b.n	8005354 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8005326:	1c7b      	adds	r3, r7, #1
 8005328:	d0ef      	beq.n	800530a <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532a:	f7ff fa61 	bl	80047f0 <HAL_GetTick>
 800532e:	1b80      	subs	r0, r0, r6
 8005330:	42b8      	cmp	r0, r7
 8005332:	d801      	bhi.n	8005338 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005334:	2f00      	cmp	r7, #0
 8005336:	d1e7      	bne.n	8005308 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005338:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800533a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800533c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800533e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005342:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005346:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005348:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800534c:	f042 0220 	orr.w	r2, r2, #32
 8005350:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005352:	2001      	movs	r0, #1
}
 8005354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005358 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	4604      	mov	r4, r0
 800535c:	460d      	mov	r5, r1
 800535e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	d501      	bpl.n	800536c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005368:	2000      	movs	r0, #0
}
 800536a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff ff48 	bl	8005202 <I2C_IsAcknowledgeFailed>
 8005372:	b9a8      	cbnz	r0, 80053a0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005374:	1c6a      	adds	r2, r5, #1
 8005376:	d0f3      	beq.n	8005360 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005378:	f7ff fa3a 	bl	80047f0 <HAL_GetTick>
 800537c:	1b80      	subs	r0, r0, r6
 800537e:	42a8      	cmp	r0, r5
 8005380:	d801      	bhi.n	8005386 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005382:	2d00      	cmp	r5, #0
 8005384:	d1ec      	bne.n	8005360 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005386:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005388:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800538a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800538c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005390:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005394:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005396:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800539a:	f042 0220 	orr.w	r2, r2, #32
 800539e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80053a0:	2001      	movs	r0, #1
 80053a2:	e7e2      	b.n	800536a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080053a4 <HAL_I2C_Init>:
{
 80053a4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80053a6:	4604      	mov	r4, r0
 80053a8:	b908      	cbnz	r0, 80053ae <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80053aa:	2001      	movs	r0, #1
}
 80053ac:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80053b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053b6:	b91b      	cbnz	r3, 80053c0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80053b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80053bc:	f7ff f856 	bl	800446c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80053c0:	2324      	movs	r3, #36	; 0x24
 80053c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053de:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053e0:	f000 fe90 	bl	8006104 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053e4:	6863      	ldr	r3, [r4, #4]
 80053e6:	4a41      	ldr	r2, [pc, #260]	; (80054ec <HAL_I2C_Init+0x148>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d84d      	bhi.n	8005488 <HAL_I2C_Init+0xe4>
 80053ec:	4a40      	ldr	r2, [pc, #256]	; (80054f0 <HAL_I2C_Init+0x14c>)
 80053ee:	4290      	cmp	r0, r2
 80053f0:	d9db      	bls.n	80053aa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053f2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80053f4:	493f      	ldr	r1, [pc, #252]	; (80054f4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053f6:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80053f8:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053fc:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8005400:	430d      	orrs	r5, r1
 8005402:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005404:	6a15      	ldr	r5, [r2, #32]
 8005406:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800540a:	3101      	adds	r1, #1
 800540c:	4329      	orrs	r1, r5
 800540e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005410:	69d1      	ldr	r1, [r2, #28]
 8005412:	4d36      	ldr	r5, [pc, #216]	; (80054ec <HAL_I2C_Init+0x148>)
 8005414:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005418:	42ab      	cmp	r3, r5
 800541a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800541e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8005422:	d848      	bhi.n	80054b6 <HAL_I2C_Init+0x112>
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	fbb0 f0f3 	udiv	r0, r0, r3
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005430:	2b04      	cmp	r3, #4
 8005432:	bf38      	it	cc
 8005434:	2304      	movcc	r3, #4
 8005436:	430b      	orrs	r3, r1
 8005438:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800543a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800543e:	6811      	ldr	r1, [r2, #0]
 8005440:	4303      	orrs	r3, r0
 8005442:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005446:	430b      	orrs	r3, r1
 8005448:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800544a:	6891      	ldr	r1, [r2, #8]
 800544c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005450:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005454:	4303      	orrs	r3, r0
 8005456:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800545a:	430b      	orrs	r3, r1
 800545c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800545e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005462:	68d1      	ldr	r1, [r2, #12]
 8005464:	4303      	orrs	r3, r0
 8005466:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800546a:	430b      	orrs	r3, r1
 800546c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005476:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005478:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800547a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800547c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005480:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005482:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005486:	e791      	b.n	80053ac <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005488:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <HAL_I2C_Init+0x154>)
 800548a:	4290      	cmp	r0, r2
 800548c:	d98d      	bls.n	80053aa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800548e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005490:	4e18      	ldr	r6, [pc, #96]	; (80054f4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005492:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005494:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005498:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800549c:	4335      	orrs	r5, r6
 800549e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054a0:	6a15      	ldr	r5, [r2, #32]
 80054a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80054a6:	4371      	muls	r1, r6
 80054a8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80054ac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80054b0:	fbb1 f1f6 	udiv	r1, r1, r6
 80054b4:	e7a9      	b.n	800540a <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054b6:	68a5      	ldr	r5, [r4, #8]
 80054b8:	b955      	cbnz	r5, 80054d0 <HAL_I2C_Init+0x12c>
 80054ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054be:	fbb0 f0f3 	udiv	r0, r0, r3
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c8:	b16b      	cbz	r3, 80054e6 <HAL_I2C_Init+0x142>
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	e7b2      	b.n	8005436 <HAL_I2C_Init+0x92>
 80054d0:	2519      	movs	r5, #25
 80054d2:	436b      	muls	r3, r5
 80054d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054de:	b113      	cbz	r3, 80054e6 <HAL_I2C_Init+0x142>
 80054e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e4:	e7a7      	b.n	8005436 <HAL_I2C_Init+0x92>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e7a5      	b.n	8005436 <HAL_I2C_Init+0x92>
 80054ea:	bf00      	nop
 80054ec:	000186a0 	.word	0x000186a0
 80054f0:	001e847f 	.word	0x001e847f
 80054f4:	000f4240 	.word	0x000f4240
 80054f8:	003d08ff 	.word	0x003d08ff

080054fc <HAL_I2C_Master_Transmit>:
{
 80054fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005500:	4604      	mov	r4, r0
 8005502:	461f      	mov	r7, r3
 8005504:	460d      	mov	r5, r1
 8005506:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005508:	f7ff f972 	bl	80047f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800550c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005510:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005512:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005514:	d004      	beq.n	8005520 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8005516:	2502      	movs	r5, #2
}
 8005518:	4628      	mov	r0, r5
 800551a:	b004      	add	sp, #16
 800551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005520:	9000      	str	r0, [sp, #0]
 8005522:	2319      	movs	r3, #25
 8005524:	2201      	movs	r2, #1
 8005526:	495b      	ldr	r1, [pc, #364]	; (8005694 <HAL_I2C_Master_Transmit+0x198>)
 8005528:	4620      	mov	r0, r4
 800552a:	f7ff fee4 	bl	80052f6 <I2C_WaitOnFlagUntilTimeout>
 800552e:	2800      	cmp	r0, #0
 8005530:	d1f1      	bne.n	8005516 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8005532:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d0ed      	beq.n	8005516 <HAL_I2C_Master_Transmit+0x1a>
 800553a:	2301      	movs	r3, #1
 800553c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005546:	bf5e      	ittt	pl
 8005548:	681a      	ldrpl	r2, [r3, #0]
 800554a:	f042 0201 	orrpl.w	r2, r2, #1
 800554e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005556:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005558:	2221      	movs	r2, #33	; 0x21
 800555a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800555e:	2210      	movs	r2, #16
 8005560:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005564:	2200      	movs	r2, #0
 8005566:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005568:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800556a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800556c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800556e:	4a4a      	ldr	r2, [pc, #296]	; (8005698 <HAL_I2C_Master_Transmit+0x19c>)
 8005570:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005572:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8005574:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005578:	2a08      	cmp	r2, #8
 800557a:	d004      	beq.n	8005586 <HAL_I2C_Master_Transmit+0x8a>
 800557c:	2a01      	cmp	r2, #1
 800557e:	d002      	beq.n	8005586 <HAL_I2C_Master_Transmit+0x8a>
 8005580:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005584:	d104      	bne.n	8005590 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e002      	b.n	8005596 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005590:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005592:	2a12      	cmp	r2, #18
 8005594:	d0f7      	beq.n	8005586 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005596:	2200      	movs	r2, #0
 8005598:	9600      	str	r6, [sp, #0]
 800559a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff fea8 	bl	80052f6 <I2C_WaitOnFlagUntilTimeout>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	b138      	cbz	r0, 80055ba <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ae:	bf44      	itt	mi
 80055b0:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80055b4:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80055b6:	2501      	movs	r5, #1
 80055b8:	e7ae      	b.n	8005518 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ba:	6923      	ldr	r3, [r4, #16]
 80055bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c0:	d121      	bne.n	8005606 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055c2:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80055c6:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055c8:	4633      	mov	r3, r6
 80055ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055cc:	4933      	ldr	r1, [pc, #204]	; (800569c <HAL_I2C_Master_Transmit+0x1a0>)
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7ff fe31 	bl	8005236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d4:	4605      	mov	r5, r0
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d1ed      	bne.n	80055b6 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	9003      	str	r0, [sp, #12]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	9203      	str	r2, [sp, #12]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	9303      	str	r3, [sp, #12]
 80055e6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80055e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055ea:	b9f3      	cbnz	r3, 800562a <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	6821      	ldr	r1, [r4, #0]
 80055ee:	680a      	ldr	r2, [r1, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f4:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	2220      	movs	r2, #32
 80055f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80055fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005600:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005604:	e788      	b.n	8005518 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005606:	11eb      	asrs	r3, r5, #7
 8005608:	f003 0306 	and.w	r3, r3, #6
 800560c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005610:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005612:	4923      	ldr	r1, [pc, #140]	; (80056a0 <HAL_I2C_Master_Transmit+0x1a4>)
 8005614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005616:	4633      	mov	r3, r6
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff fe0c 	bl	8005236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800561e:	2800      	cmp	r0, #0
 8005620:	d1c9      	bne.n	80055b6 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	b2ed      	uxtb	r5, r5
 8005626:	611d      	str	r5, [r3, #16]
 8005628:	e7ce      	b.n	80055c8 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800562a:	4632      	mov	r2, r6
 800562c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800562e:	4620      	mov	r0, r4
 8005630:	f7ff fe92 	bl	8005358 <I2C_WaitOnTXEFlagUntilTimeout>
 8005634:	b140      	cbz	r0, 8005648 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005638:	2b04      	cmp	r3, #4
 800563a:	d1bc      	bne.n	80055b6 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e7b6      	b.n	80055b6 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800564a:	6820      	ldr	r0, [r4, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005652:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8005654:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005656:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005658:	3a01      	subs	r2, #1
 800565a:	b292      	uxth	r2, r2
 800565c:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800565e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005660:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8005662:	1e51      	subs	r1, r2, #1
 8005664:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005666:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8005668:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800566a:	d50a      	bpl.n	8005682 <HAL_I2C_Master_Transmit+0x186>
 800566c:	b149      	cbz	r1, 8005682 <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800566e:	7859      	ldrb	r1, [r3, #1]
 8005670:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8005672:	3302      	adds	r3, #2
 8005674:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005676:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005678:	3b01      	subs	r3, #1
 800567a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800567c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800567e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005680:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005682:	4632      	mov	r2, r6
 8005684:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff fe0f 	bl	80052aa <I2C_WaitOnBTFFlagUntilTimeout>
 800568c:	2800      	cmp	r0, #0
 800568e:	d0ab      	beq.n	80055e8 <HAL_I2C_Master_Transmit+0xec>
 8005690:	e7d1      	b.n	8005636 <HAL_I2C_Master_Transmit+0x13a>
 8005692:	bf00      	nop
 8005694:	00100002 	.word	0x00100002
 8005698:	ffff0000 	.word	0xffff0000
 800569c:	00010002 	.word	0x00010002
 80056a0:	00010008 	.word	0x00010008

080056a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80056a6:	4604      	mov	r4, r0
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d041      	beq.n	8005730 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056b4:	b92b      	cbnz	r3, 80056c2 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80056b6:	4b42      	ldr	r3, [pc, #264]	; (80057c0 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 80056b8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80056bc:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056be:	f7fe ff0f 	bl	80044e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056c2:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056c4:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80056c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056ca:	69d3      	ldr	r3, [r2, #28]
 80056cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80056d0:	f023 030f 	bic.w	r3, r3, #15
 80056d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80056d6:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80056d8:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80056da:	428b      	cmp	r3, r1
 80056dc:	d031      	beq.n	8005742 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80056de:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80056e0:	2b00      	cmp	r3, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80056e2:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 80056e4:	bf14      	ite	ne
 80056e6:	2520      	movne	r5, #32
 80056e8:	2510      	moveq	r5, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80056ea:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80056ec:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80056ee:	bf98      	it	ls
 80056f0:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80056f2:	f000 fdbf 	bl	8006274 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	6961      	ldr	r1, [r4, #20]
 80056fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fe:	d11b      	bne.n	8005738 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	220a      	movs	r2, #10
 8005704:	b1b3      	cbz	r3, 8005734 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005706:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005708:	fbb0 f3f3 	udiv	r3, r0, r3
 800570c:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800570e:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005710:	fbb3 f3f1 	udiv	r3, r3, r1
 8005714:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8005716:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800571a:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800571e:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005720:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005722:	1e99      	subs	r1, r3, #2
 8005724:	29fd      	cmp	r1, #253	; 0xfd
 8005726:	d90e      	bls.n	8005746 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005728:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800572a:	f043 0310 	orr.w	r3, r3, #16
 800572e:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8005730:	2001      	movs	r0, #1
 8005732:	e044      	b.n	80057be <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005734:	00eb      	lsls	r3, r5, #3
 8005736:	e7e7      	b.n	8005708 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005738:	230a      	movs	r3, #10
 800573a:	fbb0 f0f5 	udiv	r0, r0, r5
 800573e:	4343      	muls	r3, r0
 8005740:	e7e5      	b.n	800570e <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8005742:	2200      	movs	r2, #0
 8005744:	e7ed      	b.n	8005722 <HAL_I2S_Init+0x7e>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005746:	4313      	orrs	r3, r2
 8005748:	6922      	ldr	r2, [r4, #16]
 800574a:	6821      	ldr	r1, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800574c:	68e5      	ldr	r5, [r4, #12]
 800574e:	69a0      	ldr	r0, [r4, #24]
 8005750:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80057d0 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005754:	4313      	orrs	r3, r2
 8005756:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005758:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 800575c:	ea46 0203 	orr.w	r2, r6, r3
 8005760:	69cf      	ldr	r7, [r1, #28]
 8005762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005766:	432a      	orrs	r2, r5
 8005768:	4302      	orrs	r2, r0
 800576a:	ea07 070c 	and.w	r7, r7, ip
 800576e:	433a      	orrs	r2, r7
 8005770:	61ca      	str	r2, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005772:	6a22      	ldr	r2, [r4, #32]
 8005774:	2a01      	cmp	r2, #1
 8005776:	d11d      	bne.n	80057b4 <HAL_I2S_Init+0x110>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005778:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <HAL_I2S_Init+0x120>)
 800577a:	6362      	str	r2, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800577c:	4f12      	ldr	r7, [pc, #72]	; (80057c8 <HAL_I2S_Init+0x124>)
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <HAL_I2S_Init+0x128>)
 8005780:	42b9      	cmp	r1, r7
 8005782:	bf18      	it	ne
 8005784:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005788:	432b      	orrs	r3, r5
 800578a:	69d1      	ldr	r1, [r2, #28]
 800578c:	ea01 010c 	and.w	r1, r1, ip
 8005790:	61d1      	str	r1, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005792:	2102      	movs	r1, #2
 8005794:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005796:	69d7      	ldr	r7, [r2, #28]
 8005798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800579c:	4303      	orrs	r3, r0

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
    {
      tmp = I2S_MODE_SLAVE_RX;
 800579e:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 80057a2:	ea43 0307 	orr.w	r3, r3, r7
 80057a6:	bf14      	ite	ne
 80057a8:	2100      	movne	r1, #0
 80057aa:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80057ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80057b0:	430b      	orrs	r3, r1
 80057b2:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80057b4:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80057b6:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80057b8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80057ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 80057be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c0:	080058bd 	.word	0x080058bd
 80057c4:	080059e1 	.word	0x080059e1
 80057c8:	40003800 	.word	0x40003800
 80057cc:	40003400 	.word	0x40003400
 80057d0:	fffff040 	.word	0xfffff040

080057d4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4604      	mov	r4, r0
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80057d8:	2900      	cmp	r1, #0
 80057da:	d04e      	beq.n	800587a <HAL_I2S_Transmit_DMA+0xa6>
 80057dc:	2a00      	cmp	r2, #0
 80057de:	d04c      	beq.n	800587a <HAL_I2S_Transmit_DMA+0xa6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80057e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d00a      	beq.n	80057fe <HAL_I2S_Transmit_DMA+0x2a>
 80057e8:	2301      	movs	r3, #1
 80057ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80057ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_I2S_Transmit_DMA+0x2e>
  {
    __HAL_UNLOCK(hi2s);
 80057fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 80057fe:	2002      	movs	r0, #2
 8005800:	e027      	b.n	8005852 <HAL_I2S_Transmit_DMA+0x7e>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005802:	2003      	movs	r0, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005804:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005806:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800580a:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800580c:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 800580e:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005810:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005814:	4283      	cmp	r3, r0
 8005816:	d001      	beq.n	800581c <HAL_I2S_Transmit_DMA+0x48>
 8005818:	2b05      	cmp	r3, #5
 800581a:	d11b      	bne.n	8005854 <HAL_I2S_Transmit_DMA+0x80>
  {
    hi2s->TxXferSize = (Size << 1U);
 800581c:	0053      	lsls	r3, r2, #1
 800581e:	b29b      	uxth	r3, r3
 8005820:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005822:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->TxXferSize = Size;
    hi2s->TxXferCount = Size;
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005824:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005826:	4b16      	ldr	r3, [pc, #88]	; (8005880 <HAL_I2S_Transmit_DMA+0xac>)
 8005828:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800582a:	4b16      	ldr	r3, [pc, #88]	; (8005884 <HAL_I2S_Transmit_DMA+0xb0>)
 800582c:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800582e:	4b16      	ldr	r3, [pc, #88]	; (8005888 <HAL_I2S_Transmit_DMA+0xb4>)
 8005830:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005832:	f105 020c 	add.w	r2, r5, #12
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8005836:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005838:	f7ff fb06 	bl	8004e48 <HAL_DMA_Start_IT>
 800583c:	b168      	cbz	r0, 800585a <HAL_I2S_Transmit_DMA+0x86>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800583e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005840:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005842:	f043 0308 	orr.w	r3, r3, #8
 8005846:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005848:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
  }

  __HAL_UNLOCK(hi2s);
 800584c:	2300      	movs	r3, #0
 800584e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 8005852:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = Size;
 8005854:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005856:	8562      	strh	r2, [r4, #42]	; 0x2a
 8005858:	e7e4      	b.n	8005824 <HAL_I2S_Transmit_DMA+0x50>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8005860:	bf5e      	ittt	pl
 8005862:	69da      	ldrpl	r2, [r3, #28]
 8005864:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8005868:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800586e:	bf5e      	ittt	pl
 8005870:	685a      	ldrpl	r2, [r3, #4]
 8005872:	f042 0202 	orrpl.w	r2, r2, #2
 8005876:	605a      	strpl	r2, [r3, #4]
 8005878:	e7e8      	b.n	800584c <HAL_I2S_Transmit_DMA+0x78>
    return  HAL_ERROR;
 800587a:	2001      	movs	r0, #1
 800587c:	e7e9      	b.n	8005852 <HAL_I2S_Transmit_DMA+0x7e>
 800587e:	bf00      	nop
 8005880:	0800588d 	.word	0x0800588d
 8005884:	08005897 	.word	0x08005897
 8005888:	080059b7 	.word	0x080059b7

0800588c <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800588c:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800588e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005890:	f7fd f81a 	bl	80028c8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005894:	bd08      	pop	{r3, pc}

08005896 <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8005896:	69c1      	ldr	r1, [r0, #28]
{
 8005898:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800589a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 800589c:	b941      	cbnz	r1, 80058b0 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	6842      	ldr	r2, [r0, #4]
 80058a2:	f022 0202 	bic.w	r2, r2, #2
 80058a6:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80058a8:	2201      	movs	r2, #1
    hi2s->TxXferCount = 0U;
 80058aa:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fc fffb 	bl	80028ac <HAL_I2S_TxCpltCallback>
}
 80058b6:	bd08      	pop	{r3, pc}

080058b8 <HAL_I2S_RxCpltCallback>:
 80058b8:	4770      	bx	lr

080058ba <HAL_I2S_ErrorCallback>:
 80058ba:	4770      	bx	lr

080058bc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80058bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80058be:	6803      	ldr	r3, [r0, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80058c4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80058c8:	2a04      	cmp	r2, #4
{
 80058ca:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80058cc:	d136      	bne.n	800593c <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80058ce:	9a01      	ldr	r2, [sp, #4]
 80058d0:	07d1      	lsls	r1, r2, #31
 80058d2:	d517      	bpl.n	8005904 <I2S_IRQHandler+0x48>
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	0652      	lsls	r2, r2, #25
 80058d8:	d514      	bpl.n	8005904 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80058da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80058dc:	68d9      	ldr	r1, [r3, #12]
 80058de:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80058e2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80058e4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80058e6:	3a01      	subs	r2, #1
 80058e8:	b292      	uxth	r2, r2
 80058ea:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80058ec:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80058ee:	b292      	uxth	r2, r2
 80058f0:	b942      	cbnz	r2, 8005904 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058f8:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8005900:	f7ff ffda 	bl	80058b8 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005904:	9b01      	ldr	r3, [sp, #4]
 8005906:	0659      	lsls	r1, r3, #25
 8005908:	d518      	bpl.n	800593c <I2S_IRQHandler+0x80>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	0692      	lsls	r2, r2, #26
 8005910:	d514      	bpl.n	800593c <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005918:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800591a:	2200      	movs	r2, #0
 800591c:	9202      	str	r2, [sp, #8]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	9202      	str	r2, [sp, #8]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	9302      	str	r3, [sp, #8]
 8005926:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005928:	2301      	movs	r3, #1
 800592a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800592e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff ffbf 	bl	80058ba <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800593c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005940:	2b03      	cmp	r3, #3
 8005942:	d136      	bne.n	80059b2 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005944:	9b01      	ldr	r3, [sp, #4]
 8005946:	079b      	lsls	r3, r3, #30
 8005948:	d519      	bpl.n	800597e <I2S_IRQHandler+0xc2>
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	6853      	ldr	r3, [r2, #4]
 800594e:	0618      	lsls	r0, r3, #24
 8005950:	d515      	bpl.n	800597e <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005954:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005958:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 800595a:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800595c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800595e:	3b01      	subs	r3, #1
 8005960:	b29b      	uxth	r3, r3
 8005962:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005964:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	b94b      	cbnz	r3, 800597e <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800596a:	6853      	ldr	r3, [r2, #4]
 800596c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005970:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005972:	2301      	movs	r3, #1
 8005974:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8005978:	4620      	mov	r0, r4
 800597a:	f7fc ff97 	bl	80028ac <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800597e:	9b01      	ldr	r3, [sp, #4]
 8005980:	0719      	lsls	r1, r3, #28
 8005982:	d516      	bpl.n	80059b2 <I2S_IRQHandler+0xf6>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	0692      	lsls	r2, r2, #26
 800598a:	d512      	bpl.n	80059b2 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005992:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005994:	2200      	movs	r2, #0
 8005996:	9203      	str	r2, [sp, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	9303      	str	r3, [sp, #12]
 800599c:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800599e:	2301      	movs	r3, #1
 80059a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059a6:	f043 0304 	orr.w	r3, r3, #4
 80059aa:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059ac:	4620      	mov	r0, r4
 80059ae:	f7ff ff84 	bl	80058ba <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059b2:	b004      	add	sp, #16
 80059b4:	bd10      	pop	{r4, pc}

080059b6 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80059b8:	6802      	ldr	r2, [r0, #0]
{
 80059ba:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80059bc:	6853      	ldr	r3, [r2, #4]
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80059c8:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80059d2:	f043 0308 	orr.w	r3, r3, #8
 80059d6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80059d8:	f7ff ff6f 	bl	80058ba <HAL_I2S_ErrorCallback>
}
 80059dc:	bd08      	pop	{r3, pc}

080059de <HAL_I2SEx_TxRxCpltCallback>:
 80059de:	4770      	bx	lr

080059e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059e0:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80059e2:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80059e4:	498e      	ldr	r1, [pc, #568]	; (8005c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80059e6:	6893      	ldr	r3, [r2, #8]
{
 80059e8:	b086      	sub	sp, #24
 80059ea:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80059ec:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80059ee:	4b8d      	ldr	r3, [pc, #564]	; (8005c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80059f0:	428a      	cmp	r2, r1
 80059f2:	bf18      	it	ne
 80059f4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80059f8:	6899      	ldr	r1, [r3, #8]
 80059fa:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80059fc:	6851      	ldr	r1, [r2, #4]
 80059fe:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a04:	6841      	ldr	r1, [r0, #4]
 8005a06:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8005a0a:	f040 8093 	bne.w	8005b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005a0e:	9b00      	ldr	r3, [sp, #0]
 8005a10:	0799      	lsls	r1, r3, #30
 8005a12:	d51a      	bpl.n	8005a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8005a14:	9b02      	ldr	r3, [sp, #8]
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	d517      	bpl.n	8005a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a1c:	1c99      	adds	r1, r3, #2
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	6241      	str	r1, [r0, #36]	; 0x24
 8005a22:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8005a24:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a2c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	b95b      	cbnz	r3, 8005a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a32:	6853      	ldr	r3, [r2, #4]
 8005a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a38:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8005a3a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	b923      	cbnz	r3, 8005a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a46:	f7ff ffca 	bl	80059de <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	07d8      	lsls	r0, r3, #31
 8005a4e:	d522      	bpl.n	8005a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	0659      	lsls	r1, r3, #25
 8005a54:	d51f      	bpl.n	8005a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005a56:	6821      	ldr	r1, [r4, #0]
 8005a58:	4a71      	ldr	r2, [pc, #452]	; (8005c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005a5a:	4b72      	ldr	r3, [pc, #456]	; (8005c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005a5c:	4291      	cmp	r1, r2
 8005a5e:	bf18      	it	ne
 8005a60:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005a64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a66:	68d9      	ldr	r1, [r3, #12]
 8005a68:	1c90      	adds	r0, r2, #2
 8005a6a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8005a6c:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8005a6e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005a70:	3a01      	subs	r2, #1
 8005a72:	b292      	uxth	r2, r2
 8005a74:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005a76:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005a78:	b292      	uxth	r2, r2
 8005a7a:	b962      	cbnz	r2, 8005a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	b92b      	cbnz	r3, 8005a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a90:	4620      	mov	r0, r4
 8005a92:	f7ff ffa4 	bl	80059de <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a96:	9b01      	ldr	r3, [sp, #4]
 8005a98:	065a      	lsls	r2, r3, #25
 8005a9a:	d522      	bpl.n	8005ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	069b      	lsls	r3, r3, #26
 8005aa0:	d51f      	bpl.n	8005ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	495e      	ldr	r1, [pc, #376]	; (8005c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005aa6:	4a5f      	ldr	r2, [pc, #380]	; (8005c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005aa8:	428b      	cmp	r3, r1
 8005aaa:	bf18      	it	ne
 8005aac:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8005ab0:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ab2:	6851      	ldr	r1, [r2, #4]
 8005ab4:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005ab8:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ac0:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	9204      	str	r2, [sp, #16]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	9204      	str	r2, [sp, #16]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	9304      	str	r3, [sp, #16]
 8005ace:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ad6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ad8:	f043 0302 	orr.w	r3, r3, #2
 8005adc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005ade:	f7ff feec 	bl	80058ba <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ae2:	9b00      	ldr	r3, [sp, #0]
 8005ae4:	0718      	lsls	r0, r3, #28
 8005ae6:	f140 8098 	bpl.w	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8005aea:	9b02      	ldr	r3, [sp, #8]
 8005aec:	0699      	lsls	r1, r3, #26
 8005aee:	f140 8094 	bpl.w	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005af2:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005af4:	494a      	ldr	r1, [pc, #296]	; (8005c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005afc:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005afe:	4a49      	ldr	r2, [pc, #292]	; (8005c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005b00:	428b      	cmp	r3, r1
 8005b02:	bf18      	it	ne
 8005b04:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005b08:	6851      	ldr	r1, [r2, #4]
 8005b0a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005b0e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b10:	2200      	movs	r2, #0
 8005b12:	9205      	str	r2, [sp, #20]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	9305      	str	r3, [sp, #20]
 8005b18:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005b22:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b24:	f043 0304 	orr.w	r3, r3, #4
 8005b28:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005b2a:	b006      	add	sp, #24
 8005b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8005b30:	f7ff bec3 	b.w	80058ba <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005b34:	9a01      	ldr	r2, [sp, #4]
 8005b36:	0792      	lsls	r2, r2, #30
 8005b38:	d51a      	bpl.n	8005b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8005b3a:	9a03      	ldr	r2, [sp, #12]
 8005b3c:	0611      	lsls	r1, r2, #24
 8005b3e:	d517      	bpl.n	8005b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b40:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005b42:	1c91      	adds	r1, r2, #2
 8005b44:	8812      	ldrh	r2, [r2, #0]
 8005b46:	6241      	str	r1, [r0, #36]	; 0x24
 8005b48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b4a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	b292      	uxth	r2, r2
 8005b50:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005b52:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005b54:	b292      	uxth	r2, r2
 8005b56:	b95a      	cbnz	r2, 8005b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b5e:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8005b60:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	b923      	cbnz	r3, 8005b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b6c:	f7ff ff37 	bl	80059de <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005b70:	9b00      	ldr	r3, [sp, #0]
 8005b72:	07da      	lsls	r2, r3, #31
 8005b74:	d51c      	bpl.n	8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	065b      	lsls	r3, r3, #25
 8005b7a:	d519      	bpl.n	8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	1c98      	adds	r0, r3, #2
 8005b82:	68d1      	ldr	r1, [r2, #12]
 8005b84:	62e0      	str	r0, [r4, #44]	; 0x2c
 8005b86:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8005b88:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8005b90:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	b963      	cbnz	r3, 8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b96:	6853      	ldr	r3, [r2, #4]
 8005b98:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005b9c:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8005b9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b92b      	cbnz	r3, 8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff ff17 	bl	80059de <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bb0:	9b00      	ldr	r3, [sp, #0]
 8005bb2:	0658      	lsls	r0, r3, #25
 8005bb4:	d51b      	bpl.n	8005bee <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	0699      	lsls	r1, r3, #26
 8005bba:	d518      	bpl.n	8005bee <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bbc:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bbe:	4918      	ldr	r1, [pc, #96]	; (8005c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bc0:	6853      	ldr	r3, [r2, #4]
 8005bc2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005bc6:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bc8:	4b16      	ldr	r3, [pc, #88]	; (8005c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005bca:	428a      	cmp	r2, r1
 8005bcc:	bf18      	it	ne
 8005bce:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8005bd2:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bda:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005bea:	f7ff fe66 	bl	80058ba <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005bee:	9b01      	ldr	r3, [sp, #4]
 8005bf0:	071a      	lsls	r2, r3, #28
 8005bf2:	d512      	bpl.n	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8005bf4:	9b03      	ldr	r3, [sp, #12]
 8005bf6:	069b      	lsls	r3, r3, #26
 8005bf8:	d50f      	bpl.n	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	4908      	ldr	r1, [pc, #32]	; (8005c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005bfe:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005c00:	428a      	cmp	r2, r1
 8005c02:	bf18      	it	ne
 8005c04:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8005c0e:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c10:	6853      	ldr	r3, [r2, #4]
 8005c12:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005c16:	6053      	str	r3, [r2, #4]
 8005c18:	e77f      	b.n	8005b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8005c1a:	b006      	add	sp, #24
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	bf00      	nop
 8005c20:	40003800 	.word	0x40003800
 8005c24:	40003400 	.word	0x40003400

08005c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	b908      	cbnz	r0, 8005c34 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8005c30:	2001      	movs	r0, #1
 8005c32:	e03f      	b.n	8005cb4 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c34:	6803      	ldr	r3, [r0, #0]
 8005c36:	07dd      	lsls	r5, r3, #31
 8005c38:	d410      	bmi.n	8005c5c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	0798      	lsls	r0, r3, #30
 8005c3e:	d45a      	bmi.n	8005cf6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	071a      	lsls	r2, r3, #28
 8005c44:	f100 809c 	bmi.w	8005d80 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	075b      	lsls	r3, r3, #29
 8005c4c:	f100 80ba 	bmi.w	8005dc4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c50:	69a0      	ldr	r0, [r4, #24]
 8005c52:	2800      	cmp	r0, #0
 8005c54:	f040 811b 	bne.w	8005e8e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e02b      	b.n	8005cb4 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c5c:	4ba7      	ldr	r3, [pc, #668]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	f002 020c 	and.w	r2, r2, #12
 8005c64:	2a04      	cmp	r2, #4
 8005c66:	d007      	beq.n	8005c78 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c6e:	2a08      	cmp	r2, #8
 8005c70:	d10a      	bne.n	8005c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	0259      	lsls	r1, r3, #9
 8005c76:	d507      	bpl.n	8005c88 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c78:	4ba0      	ldr	r3, [pc, #640]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	039a      	lsls	r2, r3, #14
 8005c7e:	d5dc      	bpl.n	8005c3a <HAL_RCC_OscConfig+0x12>
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1d9      	bne.n	8005c3a <HAL_RCC_OscConfig+0x12>
 8005c86:	e7d3      	b.n	8005c30 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	4d9c      	ldr	r5, [pc, #624]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c90:	d113      	bne.n	8005cba <HAL_RCC_OscConfig+0x92>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005c9a:	f7fe fda9 	bl	80047f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	4d97      	ldr	r5, [pc, #604]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8005ca0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	039b      	lsls	r3, r3, #14
 8005ca6:	d4c8      	bmi.n	8005c3a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca8:	f7fe fda2 	bl	80047f0 <HAL_GetTick>
 8005cac:	1b80      	subs	r0, r0, r6
 8005cae:	2864      	cmp	r0, #100	; 0x64
 8005cb0:	d9f7      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8005cb2:	2003      	movs	r0, #3
}
 8005cb4:	b002      	add	sp, #8
 8005cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cbe:	d104      	bne.n	8005cca <HAL_RCC_OscConfig+0xa2>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	e7e3      	b.n	8005c92 <HAL_RCC_OscConfig+0x6a>
 8005cca:	682a      	ldr	r2, [r5, #0]
 8005ccc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cd0:	602a      	str	r2, [r5, #0]
 8005cd2:	682a      	ldr	r2, [r5, #0]
 8005cd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cd8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1dd      	bne.n	8005c9a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8005cde:	f7fe fd87 	bl	80047f0 <HAL_GetTick>
 8005ce2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	039f      	lsls	r7, r3, #14
 8005ce8:	d5a7      	bpl.n	8005c3a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cea:	f7fe fd81 	bl	80047f0 <HAL_GetTick>
 8005cee:	1b80      	subs	r0, r0, r6
 8005cf0:	2864      	cmp	r0, #100	; 0x64
 8005cf2:	d9f7      	bls.n	8005ce4 <HAL_RCC_OscConfig+0xbc>
 8005cf4:	e7dd      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cf6:	4b81      	ldr	r3, [pc, #516]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	f012 0f0c 	tst.w	r2, #12
 8005cfe:	d007      	beq.n	8005d10 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d06:	2a08      	cmp	r2, #8
 8005d08:	d111      	bne.n	8005d2e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	025e      	lsls	r6, r3, #9
 8005d0e:	d40e      	bmi.n	8005d2e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d10:	4b7a      	ldr	r3, [pc, #488]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	0795      	lsls	r5, r2, #30
 8005d16:	d502      	bpl.n	8005d1e <HAL_RCC_OscConfig+0xf6>
 8005d18:	68e2      	ldr	r2, [r4, #12]
 8005d1a:	2a01      	cmp	r2, #1
 8005d1c:	d188      	bne.n	8005c30 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	6921      	ldr	r1, [r4, #16]
 8005d22:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005d26:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005d2a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d2c:	e788      	b.n	8005c40 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d2e:	68e2      	ldr	r2, [r4, #12]
 8005d30:	4b73      	ldr	r3, [pc, #460]	; (8005f00 <HAL_RCC_OscConfig+0x2d8>)
 8005d32:	b1b2      	cbz	r2, 8005d62 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005d38:	f7fe fd5a 	bl	80047f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3c:	4d6f      	ldr	r5, [pc, #444]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8005d3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	0798      	lsls	r0, r3, #30
 8005d44:	d507      	bpl.n	8005d56 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	6922      	ldr	r2, [r4, #16]
 8005d4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	e774      	b.n	8005c40 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d56:	f7fe fd4b 	bl	80047f0 <HAL_GetTick>
 8005d5a:	1b80      	subs	r0, r0, r6
 8005d5c:	2802      	cmp	r0, #2
 8005d5e:	d9ef      	bls.n	8005d40 <HAL_RCC_OscConfig+0x118>
 8005d60:	e7a7      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8005d62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005d64:	f7fe fd44 	bl	80047f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d68:	4d64      	ldr	r5, [pc, #400]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8005d6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	0799      	lsls	r1, r3, #30
 8005d70:	f57f af66 	bpl.w	8005c40 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d74:	f7fe fd3c 	bl	80047f0 <HAL_GetTick>
 8005d78:	1b80      	subs	r0, r0, r6
 8005d7a:	2802      	cmp	r0, #2
 8005d7c:	d9f6      	bls.n	8005d6c <HAL_RCC_OscConfig+0x144>
 8005d7e:	e798      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d80:	6962      	ldr	r2, [r4, #20]
 8005d82:	4b60      	ldr	r3, [pc, #384]	; (8005f04 <HAL_RCC_OscConfig+0x2dc>)
 8005d84:	b17a      	cbz	r2, 8005da6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005d8a:	f7fe fd31 	bl	80047f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d8e:	4d5b      	ldr	r5, [pc, #364]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8005d90:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005d94:	079f      	lsls	r7, r3, #30
 8005d96:	f53f af57 	bmi.w	8005c48 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9a:	f7fe fd29 	bl	80047f0 <HAL_GetTick>
 8005d9e:	1b80      	subs	r0, r0, r6
 8005da0:	2802      	cmp	r0, #2
 8005da2:	d9f6      	bls.n	8005d92 <HAL_RCC_OscConfig+0x16a>
 8005da4:	e785      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8005da6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005da8:	f7fe fd22 	bl	80047f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dac:	4d53      	ldr	r5, [pc, #332]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8005dae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005db2:	0798      	lsls	r0, r3, #30
 8005db4:	f57f af48 	bpl.w	8005c48 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005db8:	f7fe fd1a 	bl	80047f0 <HAL_GetTick>
 8005dbc:	1b80      	subs	r0, r0, r6
 8005dbe:	2802      	cmp	r0, #2
 8005dc0:	d9f6      	bls.n	8005db0 <HAL_RCC_OscConfig+0x188>
 8005dc2:	e776      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc4:	4b4d      	ldr	r3, [pc, #308]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8005dcc:	d128      	bne.n	8005e20 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dce:	9201      	str	r2, [sp, #4]
 8005dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005de2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de4:	4d48      	ldr	r5, [pc, #288]	; (8005f08 <HAL_RCC_OscConfig+0x2e0>)
 8005de6:	682b      	ldr	r3, [r5, #0]
 8005de8:	05d9      	lsls	r1, r3, #23
 8005dea:	d51b      	bpl.n	8005e24 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dec:	68a3      	ldr	r3, [r4, #8]
 8005dee:	4d43      	ldr	r5, [pc, #268]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d127      	bne.n	8005e44 <HAL_RCC_OscConfig+0x21c>
 8005df4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005dfc:	f7fe fcf8 	bl	80047f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	4d3e      	ldr	r5, [pc, #248]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8005e02:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005e0a:	079b      	lsls	r3, r3, #30
 8005e0c:	d539      	bpl.n	8005e82 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8005e0e:	2e00      	cmp	r6, #0
 8005e10:	f43f af1e 	beq.w	8005c50 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e14:	4a39      	ldr	r2, [pc, #228]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005e16:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1e:	e717      	b.n	8005c50 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8005e20:	2600      	movs	r6, #0
 8005e22:	e7df      	b.n	8005de4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005e2c:	f7fe fce0 	bl	80047f0 <HAL_GetTick>
 8005e30:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e32:	682b      	ldr	r3, [r5, #0]
 8005e34:	05da      	lsls	r2, r3, #23
 8005e36:	d4d9      	bmi.n	8005dec <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e38:	f7fe fcda 	bl	80047f0 <HAL_GetTick>
 8005e3c:	1bc0      	subs	r0, r0, r7
 8005e3e:	2802      	cmp	r0, #2
 8005e40:	d9f7      	bls.n	8005e32 <HAL_RCC_OscConfig+0x20a>
 8005e42:	e736      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d104      	bne.n	8005e52 <HAL_RCC_OscConfig+0x22a>
 8005e48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	672b      	str	r3, [r5, #112]	; 0x70
 8005e50:	e7d0      	b.n	8005df4 <HAL_RCC_OscConfig+0x1cc>
 8005e52:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	672a      	str	r2, [r5, #112]	; 0x70
 8005e5a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005e5c:	f022 0204 	bic.w	r2, r2, #4
 8005e60:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1ca      	bne.n	8005dfc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8005e66:	f7fe fcc3 	bl	80047f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005e6e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005e72:	0798      	lsls	r0, r3, #30
 8005e74:	d5cb      	bpl.n	8005e0e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e76:	f7fe fcbb 	bl	80047f0 <HAL_GetTick>
 8005e7a:	1bc0      	subs	r0, r0, r7
 8005e7c:	4540      	cmp	r0, r8
 8005e7e:	d9f7      	bls.n	8005e70 <HAL_RCC_OscConfig+0x248>
 8005e80:	e717      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f7fe fcb5 	bl	80047f0 <HAL_GetTick>
 8005e86:	1bc0      	subs	r0, r0, r7
 8005e88:	4540      	cmp	r0, r8
 8005e8a:	d9bd      	bls.n	8005e08 <HAL_RCC_OscConfig+0x1e0>
 8005e8c:	e711      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e8e:	4d1b      	ldr	r5, [pc, #108]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
 8005e90:	68ab      	ldr	r3, [r5, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d047      	beq.n	8005f2a <HAL_RCC_OscConfig+0x302>
 8005e9a:	4e1c      	ldr	r6, [pc, #112]	; (8005f0c <HAL_RCC_OscConfig+0x2e4>)
 8005e9c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e9e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005ea0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ea2:	d135      	bne.n	8005f10 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8005ea4:	f7fe fca4 	bl	80047f0 <HAL_GetTick>
 8005ea8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	0199      	lsls	r1, r3, #6
 8005eae:	d41e      	bmi.n	8005eee <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eb0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005eb8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005ebc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ebe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ec2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec4:	4c0d      	ldr	r4, [pc, #52]	; (8005efc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ec6:	0852      	lsrs	r2, r2, #1
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ece:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005ed4:	f7fe fc8c 	bl	80047f0 <HAL_GetTick>
 8005ed8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	019a      	lsls	r2, r3, #6
 8005ede:	f53f aebb 	bmi.w	8005c58 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fe fc85 	bl	80047f0 <HAL_GetTick>
 8005ee6:	1b40      	subs	r0, r0, r5
 8005ee8:	2802      	cmp	r0, #2
 8005eea:	d9f6      	bls.n	8005eda <HAL_RCC_OscConfig+0x2b2>
 8005eec:	e6e1      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eee:	f7fe fc7f 	bl	80047f0 <HAL_GetTick>
 8005ef2:	1bc0      	subs	r0, r0, r7
 8005ef4:	2802      	cmp	r0, #2
 8005ef6:	d9d8      	bls.n	8005eaa <HAL_RCC_OscConfig+0x282>
 8005ef8:	e6db      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	42470000 	.word	0x42470000
 8005f04:	42470e80 	.word	0x42470e80
 8005f08:	40007000 	.word	0x40007000
 8005f0c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8005f10:	f7fe fc6e 	bl	80047f0 <HAL_GetTick>
 8005f14:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	f57f ae9d 	bpl.w	8005c58 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f1e:	f7fe fc67 	bl	80047f0 <HAL_GetTick>
 8005f22:	1b00      	subs	r0, r0, r4
 8005f24:	2802      	cmp	r0, #2
 8005f26:	d9f6      	bls.n	8005f16 <HAL_RCC_OscConfig+0x2ee>
 8005f28:	e6c3      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f2a:	2801      	cmp	r0, #1
 8005f2c:	f43f aec2 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8005f30:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	69e3      	ldr	r3, [r4, #28]
 8005f34:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	f47f ae79 	bne.w	8005c30 <HAL_RCC_OscConfig+0x8>
 8005f3e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f40:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f44:	4293      	cmp	r3, r2
 8005f46:	f47f ae73 	bne.w	8005c30 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f50:	4003      	ands	r3, r0
 8005f52:	4293      	cmp	r3, r2
 8005f54:	f47f ae6c 	bne.w	8005c30 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f5a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	f47f ae66 	bne.w	8005c30 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005f66:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8005f6a:	1ac0      	subs	r0, r0, r3
 8005f6c:	bf18      	it	ne
 8005f6e:	2001      	movne	r0, #1
 8005f70:	e6a0      	b.n	8005cb4 <HAL_RCC_OscConfig+0x8c>
 8005f72:	bf00      	nop

08005f74 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f74:	4913      	ldr	r1, [pc, #76]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005f76:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f78:	688b      	ldr	r3, [r1, #8]
 8005f7a:	f003 030c 	and.w	r3, r3, #12
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d003      	beq.n	8005f8a <HAL_RCC_GetSysClockFreq+0x16>
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d003      	beq.n	8005f8e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f86:	4810      	ldr	r0, [pc, #64]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8005f88:	e000      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8005f8a:	4810      	ldr	r0, [pc, #64]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x58>)
}
 8005f8c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f8e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f90:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f92:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f94:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f98:	bf14      	ite	ne
 8005f9a:	480c      	ldrne	r0, [pc, #48]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f9c:	480a      	ldreq	r0, [pc, #40]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f9e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005fa2:	bf18      	it	ne
 8005fa4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fa6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005faa:	fba1 0100 	umull	r0, r1, r1, r0
 8005fae:	f7fa fdb1 	bl	8000b14 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x50>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005fba:	3301      	adds	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8005fbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8005fc2:	e7e3      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x18>
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	00f42400 	.word	0x00f42400
 8005fcc:	017d7840 	.word	0x017d7840

08005fd0 <HAL_RCC_ClockConfig>:
{
 8005fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	b910      	cbnz	r0, 8005fe0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005fda:	2001      	movs	r0, #1
}
 8005fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe0:	4b43      	ldr	r3, [pc, #268]	; (80060f0 <HAL_RCC_ClockConfig+0x120>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	f002 020f 	and.w	r2, r2, #15
 8005fe8:	428a      	cmp	r2, r1
 8005fea:	d328      	bcc.n	800603e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fec:	6821      	ldr	r1, [r4, #0]
 8005fee:	078f      	lsls	r7, r1, #30
 8005ff0:	d42d      	bmi.n	800604e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff2:	07c8      	lsls	r0, r1, #31
 8005ff4:	d440      	bmi.n	8006078 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <HAL_RCC_ClockConfig+0x120>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	f002 020f 	and.w	r2, r2, #15
 8005ffe:	42aa      	cmp	r2, r5
 8006000:	d865      	bhi.n	80060ce <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	0751      	lsls	r1, r2, #29
 8006006:	d46b      	bmi.n	80060e0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006008:	0713      	lsls	r3, r2, #28
 800600a:	d507      	bpl.n	800601c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800600c:	4a39      	ldr	r2, [pc, #228]	; (80060f4 <HAL_RCC_ClockConfig+0x124>)
 800600e:	6921      	ldr	r1, [r4, #16]
 8006010:	6893      	ldr	r3, [r2, #8]
 8006012:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006016:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800601a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800601c:	f7ff ffaa 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8006020:	4b34      	ldr	r3, [pc, #208]	; (80060f4 <HAL_RCC_ClockConfig+0x124>)
 8006022:	4a35      	ldr	r2, [pc, #212]	; (80060f8 <HAL_RCC_ClockConfig+0x128>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	40d8      	lsrs	r0, r3
 800602e:	4b33      	ldr	r3, [pc, #204]	; (80060fc <HAL_RCC_ClockConfig+0x12c>)
 8006030:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006032:	4b33      	ldr	r3, [pc, #204]	; (8006100 <HAL_RCC_ClockConfig+0x130>)
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	f7fe fb91 	bl	800475c <HAL_InitTick>
  return HAL_OK;
 800603a:	2000      	movs	r0, #0
 800603c:	e7ce      	b.n	8005fdc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603e:	b2ca      	uxtb	r2, r1
 8006040:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	428b      	cmp	r3, r1
 800604a:	d1c6      	bne.n	8005fda <HAL_RCC_ClockConfig+0xa>
 800604c:	e7ce      	b.n	8005fec <HAL_RCC_ClockConfig+0x1c>
 800604e:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006050:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006054:	bf1e      	ittt	ne
 8006056:	689a      	ldrne	r2, [r3, #8]
 8006058:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800605c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006060:	bf42      	ittt	mi
 8006062:	689a      	ldrmi	r2, [r3, #8]
 8006064:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8006068:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68a0      	ldr	r0, [r4, #8]
 800606e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006072:	4302      	orrs	r2, r0
 8006074:	609a      	str	r2, [r3, #8]
 8006076:	e7bc      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006078:	6862      	ldr	r2, [r4, #4]
 800607a:	4b1e      	ldr	r3, [pc, #120]	; (80060f4 <HAL_RCC_ClockConfig+0x124>)
 800607c:	2a01      	cmp	r2, #1
 800607e:	d11c      	bne.n	80060ba <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006086:	d0a8      	beq.n	8005fda <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006088:	4e1a      	ldr	r6, [pc, #104]	; (80060f4 <HAL_RCC_ClockConfig+0x124>)
 800608a:	68b3      	ldr	r3, [r6, #8]
 800608c:	f023 0303 	bic.w	r3, r3, #3
 8006090:	4313      	orrs	r3, r2
 8006092:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006094:	f7fe fbac 	bl	80047f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006098:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800609c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609e:	68b3      	ldr	r3, [r6, #8]
 80060a0:	6862      	ldr	r2, [r4, #4]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80060aa:	d0a4      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ac:	f7fe fba0 	bl	80047f0 <HAL_GetTick>
 80060b0:	1bc0      	subs	r0, r0, r7
 80060b2:	4540      	cmp	r0, r8
 80060b4:	d9f3      	bls.n	800609e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80060b6:	2003      	movs	r0, #3
 80060b8:	e790      	b.n	8005fdc <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ba:	1e91      	subs	r1, r2, #2
 80060bc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060be:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060c0:	d802      	bhi.n	80060c8 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80060c6:	e7de      	b.n	8006086 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c8:	f013 0f02 	tst.w	r3, #2
 80060cc:	e7db      	b.n	8006086 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	b2ea      	uxtb	r2, r5
 80060d0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	42ab      	cmp	r3, r5
 80060da:	f47f af7e 	bne.w	8005fda <HAL_RCC_ClockConfig+0xa>
 80060de:	e790      	b.n	8006002 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e0:	4904      	ldr	r1, [pc, #16]	; (80060f4 <HAL_RCC_ClockConfig+0x124>)
 80060e2:	68e0      	ldr	r0, [r4, #12]
 80060e4:	688b      	ldr	r3, [r1, #8]
 80060e6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80060ea:	4303      	orrs	r3, r0
 80060ec:	608b      	str	r3, [r1, #8]
 80060ee:	e78b      	b.n	8006008 <HAL_RCC_ClockConfig+0x38>
 80060f0:	40023c00 	.word	0x40023c00
 80060f4:	40023800 	.word	0x40023800
 80060f8:	080163c0 	.word	0x080163c0
 80060fc:	20000010 	.word	0x20000010
 8006100:	20000018 	.word	0x20000018

08006104 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006104:	4b04      	ldr	r3, [pc, #16]	; (8006118 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006106:	4a05      	ldr	r2, [pc, #20]	; (800611c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	4a03      	ldr	r2, [pc, #12]	; (8006120 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006112:	6810      	ldr	r0, [r2, #0]
}
 8006114:	40d8      	lsrs	r0, r3
 8006116:	4770      	bx	lr
 8006118:	40023800 	.word	0x40023800
 800611c:	080163d0 	.word	0x080163d0
 8006120:	20000010 	.word	0x20000010

08006124 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006124:	4b04      	ldr	r3, [pc, #16]	; (8006138 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006126:	4a05      	ldr	r2, [pc, #20]	; (800613c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800612e:	5cd3      	ldrb	r3, [r2, r3]
 8006130:	4a03      	ldr	r2, [pc, #12]	; (8006140 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006132:	6810      	ldr	r0, [r2, #0]
}
 8006134:	40d8      	lsrs	r0, r3
 8006136:	4770      	bx	lr
 8006138:	40023800 	.word	0x40023800
 800613c:	080163d0 	.word	0x080163d0
 8006140:	20000010 	.word	0x20000010

08006144 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006144:	6803      	ldr	r3, [r0, #0]
 8006146:	f013 0f05 	tst.w	r3, #5
{
 800614a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614c:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800614e:	d105      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006150:	6828      	ldr	r0, [r5, #0]
 8006152:	f010 0002 	ands.w	r0, r0, #2
 8006156:	d128      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8006158:	b003      	add	sp, #12
 800615a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800615c:	4c41      	ldr	r4, [pc, #260]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800615e:	4e42      	ldr	r6, [pc, #264]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8006160:	2300      	movs	r3, #0
 8006162:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006164:	f7fe fb44 	bl	80047f0 <HAL_GetTick>
 8006168:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800616a:	6833      	ldr	r3, [r6, #0]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	d415      	bmi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006170:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8006174:	071b      	lsls	r3, r3, #28
 8006176:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800617a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800617e:	2301      	movs	r3, #1
 8006180:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006182:	f7fe fb35 	bl	80047f0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006186:	4c38      	ldr	r4, [pc, #224]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8006188:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	0118      	lsls	r0, r3, #4
 800618e:	d4df      	bmi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006190:	f7fe fb2e 	bl	80047f0 <HAL_GetTick>
 8006194:	1b80      	subs	r0, r0, r6
 8006196:	2802      	cmp	r0, #2
 8006198:	d9f7      	bls.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x46>
 800619a:	e004      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800619c:	f7fe fb28 	bl	80047f0 <HAL_GetTick>
 80061a0:	1bc0      	subs	r0, r0, r7
 80061a2:	2802      	cmp	r0, #2
 80061a4:	d9e1      	bls.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 80061a6:	2003      	movs	r0, #3
 80061a8:	e7d6      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	4b2e      	ldr	r3, [pc, #184]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 80061b0:	4c2e      	ldr	r4, [pc, #184]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80061b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ca:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80061cc:	f7fe fb10 	bl	80047f0 <HAL_GetTick>
 80061d0:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	05d9      	lsls	r1, r3, #23
 80061d6:	d51b      	bpl.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061d8:	4c23      	ldr	r4, [pc, #140]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80061da:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061dc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80061e0:	d11c      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061e2:	68eb      	ldr	r3, [r5, #12]
 80061e4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80061e8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80061ee:	d134      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80061f0:	6891      	ldr	r1, [r2, #8]
 80061f2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80061f6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80061fa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80061fe:	4301      	orrs	r1, r0
 8006200:	6091      	str	r1, [r2, #8]
 8006202:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006208:	430b      	orrs	r3, r1
 800620a:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 800620c:	2000      	movs	r0, #0
 800620e:	e7a3      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006210:	f7fe faee 	bl	80047f0 <HAL_GetTick>
 8006214:	1b80      	subs	r0, r0, r6
 8006216:	2802      	cmp	r0, #2
 8006218:	d9db      	bls.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800621a:	e7c4      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800621c:	68ea      	ldr	r2, [r5, #12]
 800621e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006222:	4293      	cmp	r3, r2
 8006224:	d0dd      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006226:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006228:	4a11      	ldr	r2, [pc, #68]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800622a:	2101      	movs	r1, #1
 800622c:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800622e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006232:	2100      	movs	r1, #0
 8006234:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8006236:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006238:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800623a:	07da      	lsls	r2, r3, #31
 800623c:	d5d1      	bpl.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 800623e:	f7fe fad7 	bl	80047f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006242:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006246:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006248:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800624a:	079b      	lsls	r3, r3, #30
 800624c:	d4c9      	bmi.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800624e:	f7fe facf 	bl	80047f0 <HAL_GetTick>
 8006252:	1b80      	subs	r0, r0, r6
 8006254:	42b8      	cmp	r0, r7
 8006256:	d9f7      	bls.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006258:	e7a5      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800625a:	6891      	ldr	r1, [r2, #8]
 800625c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006260:	e7ce      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8006262:	bf00      	nop
 8006264:	42470068 	.word	0x42470068
 8006268:	40023800 	.word	0x40023800
 800626c:	40007000 	.word	0x40007000
 8006270:	42470e40 	.word	0x42470e40

08006274 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8006274:	2801      	cmp	r0, #1
 8006276:	d120      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800627a:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 800627c:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8006280:	d004      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8006282:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006284:	480f      	ldr	r0, [pc, #60]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8006286:	bf18      	it	ne
 8006288:	2000      	movne	r0, #0
 800628a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800628c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800628e:	490c      	ldr	r1, [pc, #48]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006290:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006292:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006294:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006298:	bf4c      	ite	mi
 800629a:	4b0b      	ldrmi	r3, [pc, #44]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800629c:	4b0b      	ldrpl	r3, [pc, #44]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800629e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80062a2:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80062a6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80062aa:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80062ae:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80062b0:	f3c0 7002 	ubfx	r0, r0, #28, #3
 80062b4:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 80062b8:	4770      	bx	lr
          frequency = 0U;
 80062ba:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800
 80062c4:	00bb8000 	.word	0x00bb8000
 80062c8:	017d7840 	.word	0x017d7840
 80062cc:	00f42400 	.word	0x00f42400

080062d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80062d0:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80062d2:	4604      	mov	r4, r0
 80062d4:	b190      	cbz	r0, 80062fc <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80062d6:	7943      	ldrb	r3, [r0, #5]
 80062d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062dc:	b913      	cbnz	r3, 80062e4 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80062de:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062e0:	f7fe f980 	bl	80045e4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062e4:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80062e6:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80062e8:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	f043 0304 	orr.w	r3, r3, #4
 80062f0:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062f2:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 80062f4:	2301      	movs	r3, #1
 80062f6:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062f8:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 80062fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80062fc:	2001      	movs	r0, #1
 80062fe:	e7fc      	b.n	80062fa <HAL_RNG_Init+0x2a>

08006300 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006300:	6803      	ldr	r3, [r0, #0]
 8006302:	68c1      	ldr	r1, [r0, #12]
 8006304:	691a      	ldr	r2, [r3, #16]
{
 8006306:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006308:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 800630c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800630e:	430a      	orrs	r2, r1
 8006310:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006312:	6925      	ldr	r5, [r4, #16]
 8006314:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006316:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006318:	69c0      	ldr	r0, [r0, #28]
 800631a:	432a      	orrs	r2, r5
 800631c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800631e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006322:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8006324:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006328:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800632a:	430a      	orrs	r2, r1
 800632c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800632e:	695a      	ldr	r2, [r3, #20]
 8006330:	69a1      	ldr	r1, [r4, #24]
 8006332:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006336:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006338:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800633c:	615a      	str	r2, [r3, #20]
 800633e:	4a26      	ldr	r2, [pc, #152]	; (80063d8 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006340:	d129      	bne.n	8006396 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006342:	4293      	cmp	r3, r2
 8006344:	d003      	beq.n	800634e <UART_SetConfig+0x4e>
 8006346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800634a:	4293      	cmp	r3, r2
 800634c:	d120      	bne.n	8006390 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800634e:	f7ff fee9 	bl	8006124 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006352:	6862      	ldr	r2, [r4, #4]
 8006354:	2600      	movs	r6, #0
 8006356:	1892      	adds	r2, r2, r2
 8006358:	f04f 0119 	mov.w	r1, #25
 800635c:	eb46 0306 	adc.w	r3, r6, r6
 8006360:	fba0 0101 	umull	r0, r1, r0, r1
 8006364:	f7fa fbd6 	bl	8000b14 <__aeabi_uldivmod>
 8006368:	2164      	movs	r1, #100	; 0x64
 800636a:	fbb0 f5f1 	udiv	r5, r0, r1
 800636e:	fb01 0315 	mls	r3, r1, r5, r0
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	3332      	adds	r3, #50	; 0x32
 8006376:	fbb3 f3f1 	udiv	r3, r3, r1
 800637a:	f003 0207 	and.w	r2, r3, #7
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	6821      	ldr	r1, [r4, #0]
 8006382:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8006386:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800638a:	4413      	add	r3, r2
 800638c:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800638e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8006390:	f7ff feb8 	bl	8006104 <HAL_RCC_GetPCLK1Freq>
 8006394:	e7dd      	b.n	8006352 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006396:	4293      	cmp	r3, r2
 8006398:	d002      	beq.n	80063a0 <UART_SetConfig+0xa0>
 800639a:	4a10      	ldr	r2, [pc, #64]	; (80063dc <UART_SetConfig+0xdc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d117      	bne.n	80063d0 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 80063a0:	f7ff fec0 	bl	8006124 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	2119      	movs	r1, #25
 80063a8:	009a      	lsls	r2, r3, #2
 80063aa:	fba0 0101 	umull	r0, r1, r0, r1
 80063ae:	0f9b      	lsrs	r3, r3, #30
 80063b0:	f7fa fbb0 	bl	8000b14 <__aeabi_uldivmod>
 80063b4:	2264      	movs	r2, #100	; 0x64
 80063b6:	fbb0 f1f2 	udiv	r1, r0, r2
 80063ba:	fb02 0311 	mls	r3, r2, r1, r0
 80063be:	6824      	ldr	r4, [r4, #0]
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	3332      	adds	r3, #50	; 0x32
 80063c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80063cc:	60a3      	str	r3, [r4, #8]
}
 80063ce:	e7de      	b.n	800638e <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 80063d0:	f7ff fe98 	bl	8006104 <HAL_RCC_GetPCLK1Freq>
 80063d4:	e7e6      	b.n	80063a4 <UART_SetConfig+0xa4>
 80063d6:	bf00      	nop
 80063d8:	40011000 	.word	0x40011000
 80063dc:	40011400 	.word	0x40011400

080063e0 <HAL_UART_Init>:
{
 80063e0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80063e2:	4604      	mov	r4, r0
 80063e4:	b340      	cbz	r0, 8006438 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80063e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80063ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063ee:	b91b      	cbnz	r3, 80063f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80063f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80063f4:	f7fe f90e 	bl	8004614 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80063f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80063fa:	2324      	movs	r3, #36	; 0x24
 80063fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006400:	68d3      	ldr	r3, [r2, #12]
 8006402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006406:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006408:	4620      	mov	r0, r4
 800640a:	f7ff ff79 	bl	8006300 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006416:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006418:	695a      	ldr	r2, [r3, #20]
 800641a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800641e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006426:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800642a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800642e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006432:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006436:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006438:	2001      	movs	r0, #1
 800643a:	e7fc      	b.n	8006436 <HAL_UART_Init+0x56>

0800643c <__errno>:
 800643c:	4b01      	ldr	r3, [pc, #4]	; (8006444 <__errno+0x8>)
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000001c 	.word	0x2000001c

08006448 <__libc_init_array>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4e0d      	ldr	r6, [pc, #52]	; (8006480 <__libc_init_array+0x38>)
 800644c:	4c0d      	ldr	r4, [pc, #52]	; (8006484 <__libc_init_array+0x3c>)
 800644e:	1ba4      	subs	r4, r4, r6
 8006450:	10a4      	asrs	r4, r4, #2
 8006452:	2500      	movs	r5, #0
 8006454:	42a5      	cmp	r5, r4
 8006456:	d109      	bne.n	800646c <__libc_init_array+0x24>
 8006458:	4e0b      	ldr	r6, [pc, #44]	; (8006488 <__libc_init_array+0x40>)
 800645a:	4c0c      	ldr	r4, [pc, #48]	; (800648c <__libc_init_array+0x44>)
 800645c:	f001 faf4 	bl	8007a48 <_init>
 8006460:	1ba4      	subs	r4, r4, r6
 8006462:	10a4      	asrs	r4, r4, #2
 8006464:	2500      	movs	r5, #0
 8006466:	42a5      	cmp	r5, r4
 8006468:	d105      	bne.n	8006476 <__libc_init_array+0x2e>
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006470:	4798      	blx	r3
 8006472:	3501      	adds	r5, #1
 8006474:	e7ee      	b.n	8006454 <__libc_init_array+0xc>
 8006476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800647a:	4798      	blx	r3
 800647c:	3501      	adds	r5, #1
 800647e:	e7f2      	b.n	8006466 <__libc_init_array+0x1e>
 8006480:	080167e8 	.word	0x080167e8
 8006484:	080167e8 	.word	0x080167e8
 8006488:	080167e8 	.word	0x080167e8
 800648c:	080167ec 	.word	0x080167ec

08006490 <memcpy>:
 8006490:	b510      	push	{r4, lr}
 8006492:	1e43      	subs	r3, r0, #1
 8006494:	440a      	add	r2, r1
 8006496:	4291      	cmp	r1, r2
 8006498:	d100      	bne.n	800649c <memcpy+0xc>
 800649a:	bd10      	pop	{r4, pc}
 800649c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a4:	e7f7      	b.n	8006496 <memcpy+0x6>

080064a6 <memset>:
 80064a6:	4402      	add	r2, r0
 80064a8:	4603      	mov	r3, r0
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d100      	bne.n	80064b0 <memset+0xa>
 80064ae:	4770      	bx	lr
 80064b0:	f803 1b01 	strb.w	r1, [r3], #1
 80064b4:	e7f9      	b.n	80064aa <memset+0x4>
	...

080064b8 <rand>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <rand+0x50>)
 80064bc:	681c      	ldr	r4, [r3, #0]
 80064be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064c0:	b97b      	cbnz	r3, 80064e2 <rand+0x2a>
 80064c2:	2018      	movs	r0, #24
 80064c4:	f000 f82c 	bl	8006520 <malloc>
 80064c8:	4a10      	ldr	r2, [pc, #64]	; (800650c <rand+0x54>)
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <rand+0x58>)
 80064cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80064ce:	e9c0 2300 	strd	r2, r3, [r0]
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <rand+0x5c>)
 80064d4:	6083      	str	r3, [r0, #8]
 80064d6:	230b      	movs	r3, #11
 80064d8:	8183      	strh	r3, [r0, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	2300      	movs	r3, #0
 80064de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80064e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064e4:	480c      	ldr	r0, [pc, #48]	; (8006518 <rand+0x60>)
 80064e6:	690a      	ldr	r2, [r1, #16]
 80064e8:	694b      	ldr	r3, [r1, #20]
 80064ea:	4c0c      	ldr	r4, [pc, #48]	; (800651c <rand+0x64>)
 80064ec:	4350      	muls	r0, r2
 80064ee:	fb04 0003 	mla	r0, r4, r3, r0
 80064f2:	fba2 2304 	umull	r2, r3, r2, r4
 80064f6:	4403      	add	r3, r0
 80064f8:	1c54      	adds	r4, r2, #1
 80064fa:	f143 0500 	adc.w	r5, r3, #0
 80064fe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8006502:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	2000001c 	.word	0x2000001c
 800650c:	abcd330e 	.word	0xabcd330e
 8006510:	e66d1234 	.word	0xe66d1234
 8006514:	0005deec 	.word	0x0005deec
 8006518:	5851f42d 	.word	0x5851f42d
 800651c:	4c957f2d 	.word	0x4c957f2d

08006520 <malloc>:
 8006520:	4b02      	ldr	r3, [pc, #8]	; (800652c <malloc+0xc>)
 8006522:	4601      	mov	r1, r0
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	f000 b803 	b.w	8006530 <_malloc_r>
 800652a:	bf00      	nop
 800652c:	2000001c 	.word	0x2000001c

08006530 <_malloc_r>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	1ccd      	adds	r5, r1, #3
 8006534:	f025 0503 	bic.w	r5, r5, #3
 8006538:	3508      	adds	r5, #8
 800653a:	2d0c      	cmp	r5, #12
 800653c:	bf38      	it	cc
 800653e:	250c      	movcc	r5, #12
 8006540:	2d00      	cmp	r5, #0
 8006542:	4606      	mov	r6, r0
 8006544:	db01      	blt.n	800654a <_malloc_r+0x1a>
 8006546:	42a9      	cmp	r1, r5
 8006548:	d903      	bls.n	8006552 <_malloc_r+0x22>
 800654a:	230c      	movs	r3, #12
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	2000      	movs	r0, #0
 8006550:	bd70      	pop	{r4, r5, r6, pc}
 8006552:	f000 f857 	bl	8006604 <__malloc_lock>
 8006556:	4a21      	ldr	r2, [pc, #132]	; (80065dc <_malloc_r+0xac>)
 8006558:	6814      	ldr	r4, [r2, #0]
 800655a:	4621      	mov	r1, r4
 800655c:	b991      	cbnz	r1, 8006584 <_malloc_r+0x54>
 800655e:	4c20      	ldr	r4, [pc, #128]	; (80065e0 <_malloc_r+0xb0>)
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	b91b      	cbnz	r3, 800656c <_malloc_r+0x3c>
 8006564:	4630      	mov	r0, r6
 8006566:	f000 f83d 	bl	80065e4 <_sbrk_r>
 800656a:	6020      	str	r0, [r4, #0]
 800656c:	4629      	mov	r1, r5
 800656e:	4630      	mov	r0, r6
 8006570:	f000 f838 	bl	80065e4 <_sbrk_r>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d124      	bne.n	80065c2 <_malloc_r+0x92>
 8006578:	230c      	movs	r3, #12
 800657a:	6033      	str	r3, [r6, #0]
 800657c:	4630      	mov	r0, r6
 800657e:	f000 f842 	bl	8006606 <__malloc_unlock>
 8006582:	e7e4      	b.n	800654e <_malloc_r+0x1e>
 8006584:	680b      	ldr	r3, [r1, #0]
 8006586:	1b5b      	subs	r3, r3, r5
 8006588:	d418      	bmi.n	80065bc <_malloc_r+0x8c>
 800658a:	2b0b      	cmp	r3, #11
 800658c:	d90f      	bls.n	80065ae <_malloc_r+0x7e>
 800658e:	600b      	str	r3, [r1, #0]
 8006590:	50cd      	str	r5, [r1, r3]
 8006592:	18cc      	adds	r4, r1, r3
 8006594:	4630      	mov	r0, r6
 8006596:	f000 f836 	bl	8006606 <__malloc_unlock>
 800659a:	f104 000b 	add.w	r0, r4, #11
 800659e:	1d23      	adds	r3, r4, #4
 80065a0:	f020 0007 	bic.w	r0, r0, #7
 80065a4:	1ac3      	subs	r3, r0, r3
 80065a6:	d0d3      	beq.n	8006550 <_malloc_r+0x20>
 80065a8:	425a      	negs	r2, r3
 80065aa:	50e2      	str	r2, [r4, r3]
 80065ac:	e7d0      	b.n	8006550 <_malloc_r+0x20>
 80065ae:	428c      	cmp	r4, r1
 80065b0:	684b      	ldr	r3, [r1, #4]
 80065b2:	bf16      	itet	ne
 80065b4:	6063      	strne	r3, [r4, #4]
 80065b6:	6013      	streq	r3, [r2, #0]
 80065b8:	460c      	movne	r4, r1
 80065ba:	e7eb      	b.n	8006594 <_malloc_r+0x64>
 80065bc:	460c      	mov	r4, r1
 80065be:	6849      	ldr	r1, [r1, #4]
 80065c0:	e7cc      	b.n	800655c <_malloc_r+0x2c>
 80065c2:	1cc4      	adds	r4, r0, #3
 80065c4:	f024 0403 	bic.w	r4, r4, #3
 80065c8:	42a0      	cmp	r0, r4
 80065ca:	d005      	beq.n	80065d8 <_malloc_r+0xa8>
 80065cc:	1a21      	subs	r1, r4, r0
 80065ce:	4630      	mov	r0, r6
 80065d0:	f000 f808 	bl	80065e4 <_sbrk_r>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d0cf      	beq.n	8006578 <_malloc_r+0x48>
 80065d8:	6025      	str	r5, [r4, #0]
 80065da:	e7db      	b.n	8006594 <_malloc_r+0x64>
 80065dc:	20012a24 	.word	0x20012a24
 80065e0:	20012a28 	.word	0x20012a28

080065e4 <_sbrk_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4c06      	ldr	r4, [pc, #24]	; (8006600 <_sbrk_r+0x1c>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	4605      	mov	r5, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	6023      	str	r3, [r4, #0]
 80065f0:	f7fe f85c 	bl	80046ac <_sbrk>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_sbrk_r+0x1a>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_sbrk_r+0x1a>
 80065fc:	602b      	str	r3, [r5, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	20013c1c 	.word	0x20013c1c

08006604 <__malloc_lock>:
 8006604:	4770      	bx	lr

08006606 <__malloc_unlock>:
 8006606:	4770      	bx	lr

08006608 <floorf>:
 8006608:	ee10 3a10 	vmov	r3, s0
 800660c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006610:	0dca      	lsrs	r2, r1, #23
 8006612:	3a7f      	subs	r2, #127	; 0x7f
 8006614:	2a16      	cmp	r2, #22
 8006616:	dc2a      	bgt.n	800666e <floorf+0x66>
 8006618:	2a00      	cmp	r2, #0
 800661a:	da11      	bge.n	8006640 <floorf+0x38>
 800661c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006680 <floorf+0x78>
 8006620:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006624:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662c:	dd05      	ble.n	800663a <floorf+0x32>
 800662e:	2b00      	cmp	r3, #0
 8006630:	da23      	bge.n	800667a <floorf+0x72>
 8006632:	4a14      	ldr	r2, [pc, #80]	; (8006684 <floorf+0x7c>)
 8006634:	2900      	cmp	r1, #0
 8006636:	bf18      	it	ne
 8006638:	4613      	movne	r3, r2
 800663a:	ee00 3a10 	vmov	s0, r3
 800663e:	4770      	bx	lr
 8006640:	4911      	ldr	r1, [pc, #68]	; (8006688 <floorf+0x80>)
 8006642:	4111      	asrs	r1, r2
 8006644:	420b      	tst	r3, r1
 8006646:	d0fa      	beq.n	800663e <floorf+0x36>
 8006648:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006680 <floorf+0x78>
 800664c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006650:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006658:	ddef      	ble.n	800663a <floorf+0x32>
 800665a:	2b00      	cmp	r3, #0
 800665c:	bfbe      	ittt	lt
 800665e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006662:	fa40 f202 	asrlt.w	r2, r0, r2
 8006666:	189b      	addlt	r3, r3, r2
 8006668:	ea23 0301 	bic.w	r3, r3, r1
 800666c:	e7e5      	b.n	800663a <floorf+0x32>
 800666e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006672:	d3e4      	bcc.n	800663e <floorf+0x36>
 8006674:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006678:	4770      	bx	lr
 800667a:	2300      	movs	r3, #0
 800667c:	e7dd      	b.n	800663a <floorf+0x32>
 800667e:	bf00      	nop
 8006680:	7149f2ca 	.word	0x7149f2ca
 8006684:	bf800000 	.word	0xbf800000
 8006688:	007fffff 	.word	0x007fffff

0800668c <lrintf>:
 800668c:	ee10 3a10 	vmov	r3, s0
 8006690:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006694:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8006698:	281e      	cmp	r0, #30
 800669a:	b082      	sub	sp, #8
 800669c:	dc2e      	bgt.n	80066fc <lrintf+0x70>
 800669e:	1c41      	adds	r1, r0, #1
 80066a0:	da02      	bge.n	80066a8 <lrintf+0x1c>
 80066a2:	2000      	movs	r0, #0
 80066a4:	b002      	add	sp, #8
 80066a6:	4770      	bx	lr
 80066a8:	2816      	cmp	r0, #22
 80066aa:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80066ae:	dd09      	ble.n	80066c4 <lrintf+0x38>
 80066b0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80066b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80066b8:	3a96      	subs	r2, #150	; 0x96
 80066ba:	4090      	lsls	r0, r2
 80066bc:	2900      	cmp	r1, #0
 80066be:	d0f1      	beq.n	80066a4 <lrintf+0x18>
 80066c0:	4240      	negs	r0, r0
 80066c2:	e7ef      	b.n	80066a4 <lrintf+0x18>
 80066c4:	4b10      	ldr	r3, [pc, #64]	; (8006708 <lrintf+0x7c>)
 80066c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80066ca:	ed93 7a00 	vldr	s14, [r3]
 80066ce:	ee37 0a00 	vadd.f32	s0, s14, s0
 80066d2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80066d6:	eddd 7a01 	vldr	s15, [sp, #4]
 80066da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066de:	ee17 3a90 	vmov	r3, s15
 80066e2:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80066e6:	d0dc      	beq.n	80066a2 <lrintf+0x16>
 80066e8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80066ec:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80066f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80066f4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80066f8:	40d8      	lsrs	r0, r3
 80066fa:	e7df      	b.n	80066bc <lrintf+0x30>
 80066fc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006700:	ee17 0a90 	vmov	r0, s15
 8006704:	e7ce      	b.n	80066a4 <lrintf+0x18>
 8006706:	bf00      	nop
 8006708:	080163e0 	.word	0x080163e0

0800670c <rintf>:
 800670c:	b513      	push	{r0, r1, r4, lr}
 800670e:	ee10 1a10 	vmov	r1, s0
 8006712:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006716:	0ddc      	lsrs	r4, r3, #23
 8006718:	3c7f      	subs	r4, #127	; 0x7f
 800671a:	2c16      	cmp	r4, #22
 800671c:	dc46      	bgt.n	80067ac <rintf+0xa0>
 800671e:	b32b      	cbz	r3, 800676c <rintf+0x60>
 8006720:	2c00      	cmp	r4, #0
 8006722:	ee10 2a10 	vmov	r2, s0
 8006726:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800672a:	da21      	bge.n	8006770 <rintf+0x64>
 800672c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8006730:	425b      	negs	r3, r3
 8006732:	4a21      	ldr	r2, [pc, #132]	; (80067b8 <rintf+0xac>)
 8006734:	0a5b      	lsrs	r3, r3, #9
 8006736:	0d09      	lsrs	r1, r1, #20
 8006738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800673c:	0509      	lsls	r1, r1, #20
 800673e:	430b      	orrs	r3, r1
 8006740:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	edd2 6a00 	vldr	s13, [r2]
 800674c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006750:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006754:	eddd 7a01 	vldr	s15, [sp, #4]
 8006758:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800675c:	ee17 3a90 	vmov	r3, s15
 8006760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006764:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006768:	ee00 3a10 	vmov	s0, r3
 800676c:	b002      	add	sp, #8
 800676e:	bd10      	pop	{r4, pc}
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <rintf+0xb0>)
 8006772:	4123      	asrs	r3, r4
 8006774:	4219      	tst	r1, r3
 8006776:	d0f9      	beq.n	800676c <rintf+0x60>
 8006778:	085b      	lsrs	r3, r3, #1
 800677a:	4219      	tst	r1, r3
 800677c:	d006      	beq.n	800678c <rintf+0x80>
 800677e:	ea21 0203 	bic.w	r2, r1, r3
 8006782:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006786:	fa43 f404 	asr.w	r4, r3, r4
 800678a:	4322      	orrs	r2, r4
 800678c:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <rintf+0xac>)
 800678e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006792:	ed90 7a00 	vldr	s14, [r0]
 8006796:	ee07 2a90 	vmov	s15, r2
 800679a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800679e:	edcd 7a01 	vstr	s15, [sp, #4]
 80067a2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80067a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80067aa:	e7df      	b.n	800676c <rintf+0x60>
 80067ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80067b0:	d3dc      	bcc.n	800676c <rintf+0x60>
 80067b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80067b6:	e7d9      	b.n	800676c <rintf+0x60>
 80067b8:	080163e8 	.word	0x080163e8
 80067bc:	007fffff 	.word	0x007fffff

080067c0 <sinf>:
 80067c0:	ee10 3a10 	vmov	r3, s0
 80067c4:	b507      	push	{r0, r1, r2, lr}
 80067c6:	4a1d      	ldr	r2, [pc, #116]	; (800683c <sinf+0x7c>)
 80067c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067cc:	4293      	cmp	r3, r2
 80067ce:	dc05      	bgt.n	80067dc <sinf+0x1c>
 80067d0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006840 <sinf+0x80>
 80067d4:	2000      	movs	r0, #0
 80067d6:	f001 f869 	bl	80078ac <__kernel_sinf>
 80067da:	e004      	b.n	80067e6 <sinf+0x26>
 80067dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80067e0:	db04      	blt.n	80067ec <sinf+0x2c>
 80067e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80067e6:	b003      	add	sp, #12
 80067e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80067ec:	4668      	mov	r0, sp
 80067ee:	f000 fc4d 	bl	800708c <__ieee754_rem_pio2f>
 80067f2:	f000 0003 	and.w	r0, r0, #3
 80067f6:	2801      	cmp	r0, #1
 80067f8:	d008      	beq.n	800680c <sinf+0x4c>
 80067fa:	2802      	cmp	r0, #2
 80067fc:	d00d      	beq.n	800681a <sinf+0x5a>
 80067fe:	b9b0      	cbnz	r0, 800682e <sinf+0x6e>
 8006800:	2001      	movs	r0, #1
 8006802:	eddd 0a01 	vldr	s1, [sp, #4]
 8006806:	ed9d 0a00 	vldr	s0, [sp]
 800680a:	e7e4      	b.n	80067d6 <sinf+0x16>
 800680c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006810:	ed9d 0a00 	vldr	s0, [sp]
 8006814:	f000 fd6a 	bl	80072ec <__kernel_cosf>
 8006818:	e7e5      	b.n	80067e6 <sinf+0x26>
 800681a:	2001      	movs	r0, #1
 800681c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006820:	ed9d 0a00 	vldr	s0, [sp]
 8006824:	f001 f842 	bl	80078ac <__kernel_sinf>
 8006828:	eeb1 0a40 	vneg.f32	s0, s0
 800682c:	e7db      	b.n	80067e6 <sinf+0x26>
 800682e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006832:	ed9d 0a00 	vldr	s0, [sp]
 8006836:	f000 fd59 	bl	80072ec <__kernel_cosf>
 800683a:	e7f5      	b.n	8006828 <sinf+0x68>
 800683c:	3f490fd8 	.word	0x3f490fd8
 8006840:	00000000 	.word	0x00000000

08006844 <powf>:
 8006844:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8006848:	ed2d 8b04 	vpush	{d8-d9}
 800684c:	4ca7      	ldr	r4, [pc, #668]	; (8006aec <powf+0x2a8>)
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	eef0 8a40 	vmov.f32	s17, s0
 8006854:	eeb0 8a60 	vmov.f32	s16, s1
 8006858:	f000 f958 	bl	8006b0c <__ieee754_powf>
 800685c:	f994 5000 	ldrsb.w	r5, [r4]
 8006860:	1c6b      	adds	r3, r5, #1
 8006862:	eeb0 9a40 	vmov.f32	s18, s0
 8006866:	4626      	mov	r6, r4
 8006868:	d05f      	beq.n	800692a <powf+0xe6>
 800686a:	eeb4 8a48 	vcmp.f32	s16, s16
 800686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006872:	d65a      	bvs.n	800692a <powf+0xe6>
 8006874:	eef4 8a68 	vcmp.f32	s17, s17
 8006878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687c:	d721      	bvc.n	80068c2 <powf+0x7e>
 800687e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006886:	d150      	bne.n	800692a <powf+0xe6>
 8006888:	2301      	movs	r3, #1
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	4b98      	ldr	r3, [pc, #608]	; (8006af0 <powf+0x2ac>)
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	ee18 0a90 	vmov	r0, s17
 8006894:	2300      	movs	r3, #0
 8006896:	9308      	str	r3, [sp, #32]
 8006898:	f7f9 fdfa 	bl	8000490 <__aeabi_f2d>
 800689c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a0:	ee18 0a10 	vmov	r0, s16
 80068a4:	f7f9 fdf4 	bl	8000490 <__aeabi_f2d>
 80068a8:	4b92      	ldr	r3, [pc, #584]	; (8006af4 <powf+0x2b0>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	2d02      	cmp	r5, #2
 80068ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068b6:	d032      	beq.n	800691e <powf+0xda>
 80068b8:	4668      	mov	r0, sp
 80068ba:	f001 f83f 	bl	800793c <matherr>
 80068be:	bb40      	cbnz	r0, 8006912 <powf+0xce>
 80068c0:	e065      	b.n	800698e <powf+0x14a>
 80068c2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8006af8 <powf+0x2b4>
 80068c6:	eef4 8a69 	vcmp.f32	s17, s19
 80068ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ce:	d163      	bne.n	8006998 <powf+0x154>
 80068d0:	eeb4 8a69 	vcmp.f32	s16, s19
 80068d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d8:	d12e      	bne.n	8006938 <powf+0xf4>
 80068da:	2301      	movs	r3, #1
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	4b84      	ldr	r3, [pc, #528]	; (8006af0 <powf+0x2ac>)
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	ee18 0a90 	vmov	r0, s17
 80068e6:	2300      	movs	r3, #0
 80068e8:	9308      	str	r3, [sp, #32]
 80068ea:	f7f9 fdd1 	bl	8000490 <__aeabi_f2d>
 80068ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f2:	ee18 0a10 	vmov	r0, s16
 80068f6:	f7f9 fdcb 	bl	8000490 <__aeabi_f2d>
 80068fa:	2200      	movs	r2, #0
 80068fc:	2300      	movs	r3, #0
 80068fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006902:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006906:	2d00      	cmp	r5, #0
 8006908:	d0d6      	beq.n	80068b8 <powf+0x74>
 800690a:	4b7a      	ldr	r3, [pc, #488]	; (8006af4 <powf+0x2b0>)
 800690c:	2200      	movs	r2, #0
 800690e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006912:	9b08      	ldr	r3, [sp, #32]
 8006914:	b11b      	cbz	r3, 800691e <powf+0xda>
 8006916:	f7ff fd91 	bl	800643c <__errno>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	6003      	str	r3, [r0, #0]
 800691e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006922:	f7fa f8a7 	bl	8000a74 <__aeabi_d2f>
 8006926:	ee09 0a10 	vmov	s18, r0
 800692a:	eeb0 0a49 	vmov.f32	s0, s18
 800692e:	b00a      	add	sp, #40	; 0x28
 8006930:	ecbd 8b04 	vpop	{d8-d9}
 8006934:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006938:	eeb0 0a48 	vmov.f32	s0, s16
 800693c:	f001 f807 	bl	800794e <finitef>
 8006940:	2800      	cmp	r0, #0
 8006942:	d0f2      	beq.n	800692a <powf+0xe6>
 8006944:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800694c:	d5ed      	bpl.n	800692a <powf+0xe6>
 800694e:	2301      	movs	r3, #1
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	4b67      	ldr	r3, [pc, #412]	; (8006af0 <powf+0x2ac>)
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	ee18 0a90 	vmov	r0, s17
 800695a:	2300      	movs	r3, #0
 800695c:	9308      	str	r3, [sp, #32]
 800695e:	f7f9 fd97 	bl	8000490 <__aeabi_f2d>
 8006962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006966:	ee18 0a10 	vmov	r0, s16
 800696a:	f7f9 fd91 	bl	8000490 <__aeabi_f2d>
 800696e:	f994 3000 	ldrsb.w	r3, [r4]
 8006972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006976:	b923      	cbnz	r3, 8006982 <powf+0x13e>
 8006978:	2200      	movs	r2, #0
 800697a:	2300      	movs	r3, #0
 800697c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006980:	e79a      	b.n	80068b8 <powf+0x74>
 8006982:	495e      	ldr	r1, [pc, #376]	; (8006afc <powf+0x2b8>)
 8006984:	2000      	movs	r0, #0
 8006986:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d194      	bne.n	80068b8 <powf+0x74>
 800698e:	f7ff fd55 	bl	800643c <__errno>
 8006992:	2321      	movs	r3, #33	; 0x21
 8006994:	6003      	str	r3, [r0, #0]
 8006996:	e7bc      	b.n	8006912 <powf+0xce>
 8006998:	f000 ffd9 	bl	800794e <finitef>
 800699c:	4605      	mov	r5, r0
 800699e:	2800      	cmp	r0, #0
 80069a0:	d173      	bne.n	8006a8a <powf+0x246>
 80069a2:	eeb0 0a68 	vmov.f32	s0, s17
 80069a6:	f000 ffd2 	bl	800794e <finitef>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d06d      	beq.n	8006a8a <powf+0x246>
 80069ae:	eeb0 0a48 	vmov.f32	s0, s16
 80069b2:	f000 ffcc 	bl	800794e <finitef>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d067      	beq.n	8006a8a <powf+0x246>
 80069ba:	ee18 0a90 	vmov	r0, s17
 80069be:	f7f9 fd67 	bl	8000490 <__aeabi_f2d>
 80069c2:	4680      	mov	r8, r0
 80069c4:	ee18 0a10 	vmov	r0, s16
 80069c8:	4689      	mov	r9, r1
 80069ca:	f7f9 fd61 	bl	8000490 <__aeabi_f2d>
 80069ce:	eeb4 9a49 	vcmp.f32	s18, s18
 80069d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d6:	f994 4000 	ldrsb.w	r4, [r4]
 80069da:	4b45      	ldr	r3, [pc, #276]	; (8006af0 <powf+0x2ac>)
 80069dc:	d713      	bvc.n	8006a06 <powf+0x1c2>
 80069de:	2201      	movs	r2, #1
 80069e0:	e9cd 2300 	strd	r2, r3, [sp]
 80069e4:	9508      	str	r5, [sp, #32]
 80069e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80069ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	d0c2      	beq.n	8006978 <powf+0x134>
 80069f2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80069f6:	ee17 0a90 	vmov	r0, s15
 80069fa:	f7f9 fd49 	bl	8000490 <__aeabi_f2d>
 80069fe:	2c02      	cmp	r4, #2
 8006a00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a04:	e7c2      	b.n	800698c <powf+0x148>
 8006a06:	2203      	movs	r2, #3
 8006a08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8006a10:	9508      	str	r5, [sp, #32]
 8006a12:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006a16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a1a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006a1e:	b9fc      	cbnz	r4, 8006a60 <powf+0x21c>
 8006a20:	4b37      	ldr	r3, [pc, #220]	; (8006b00 <powf+0x2bc>)
 8006a22:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006a26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a32:	d553      	bpl.n	8006adc <powf+0x298>
 8006a34:	eeb0 0a48 	vmov.f32	s0, s16
 8006a38:	f7ff fe68 	bl	800670c <rintf>
 8006a3c:	eeb4 0a48 	vcmp.f32	s0, s16
 8006a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a44:	d004      	beq.n	8006a50 <powf+0x20c>
 8006a46:	4b2f      	ldr	r3, [pc, #188]	; (8006b04 <powf+0x2c0>)
 8006a48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a50:	f996 3000 	ldrsb.w	r3, [r6]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d141      	bne.n	8006adc <powf+0x298>
 8006a58:	f7ff fcf0 	bl	800643c <__errno>
 8006a5c:	2322      	movs	r3, #34	; 0x22
 8006a5e:	e799      	b.n	8006994 <powf+0x150>
 8006a60:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <powf+0x2c4>)
 8006a62:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006a66:	2200      	movs	r2, #0
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a70:	d5ee      	bpl.n	8006a50 <powf+0x20c>
 8006a72:	eeb0 0a48 	vmov.f32	s0, s16
 8006a76:	f7ff fe49 	bl	800670c <rintf>
 8006a7a:	eeb4 0a48 	vcmp.f32	s0, s16
 8006a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a82:	d0e5      	beq.n	8006a50 <powf+0x20c>
 8006a84:	2200      	movs	r2, #0
 8006a86:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <powf+0x2b8>)
 8006a88:	e7e0      	b.n	8006a4c <powf+0x208>
 8006a8a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a92:	f47f af4a 	bne.w	800692a <powf+0xe6>
 8006a96:	eeb0 0a68 	vmov.f32	s0, s17
 8006a9a:	f000 ff58 	bl	800794e <finitef>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f43f af43 	beq.w	800692a <powf+0xe6>
 8006aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8006aa8:	f000 ff51 	bl	800794e <finitef>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f43f af3c 	beq.w	800692a <powf+0xe6>
 8006ab2:	2304      	movs	r3, #4
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <powf+0x2ac>)
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	ee18 0a90 	vmov	r0, s17
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9308      	str	r3, [sp, #32]
 8006ac2:	f7f9 fce5 	bl	8000490 <__aeabi_f2d>
 8006ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aca:	ee18 0a10 	vmov	r0, s16
 8006ace:	f7f9 fcdf 	bl	8000490 <__aeabi_f2d>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e7b7      	b.n	8006a4c <powf+0x208>
 8006adc:	4668      	mov	r0, sp
 8006ade:	f000 ff2d 	bl	800793c <matherr>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	f47f af15 	bne.w	8006912 <powf+0xce>
 8006ae8:	e7b6      	b.n	8006a58 <powf+0x214>
 8006aea:	bf00      	nop
 8006aec:	20000080 	.word	0x20000080
 8006af0:	080163f0 	.word	0x080163f0
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	00000000 	.word	0x00000000
 8006afc:	fff00000 	.word	0xfff00000
 8006b00:	47efffff 	.word	0x47efffff
 8006b04:	c7efffff 	.word	0xc7efffff
 8006b08:	7ff00000 	.word	0x7ff00000

08006b0c <__ieee754_powf>:
 8006b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	ee10 5a90 	vmov	r5, s1
 8006b14:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006b18:	ed2d 8b02 	vpush	{d8}
 8006b1c:	eeb0 8a40 	vmov.f32	s16, s0
 8006b20:	eef0 8a60 	vmov.f32	s17, s1
 8006b24:	f000 8293 	beq.w	800704e <__ieee754_powf+0x542>
 8006b28:	ee10 8a10 	vmov	r8, s0
 8006b2c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8006b30:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006b34:	dc06      	bgt.n	8006b44 <__ieee754_powf+0x38>
 8006b36:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006b3a:	dd0a      	ble.n	8006b52 <__ieee754_powf+0x46>
 8006b3c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006b40:	f000 8285 	beq.w	800704e <__ieee754_powf+0x542>
 8006b44:	ecbd 8b02 	vpop	{d8}
 8006b48:	48d9      	ldr	r0, [pc, #868]	; (8006eb0 <__ieee754_powf+0x3a4>)
 8006b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4e:	f000 bf09 	b.w	8007964 <nanf>
 8006b52:	f1b8 0f00 	cmp.w	r8, #0
 8006b56:	da1d      	bge.n	8006b94 <__ieee754_powf+0x88>
 8006b58:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006b5c:	da2c      	bge.n	8006bb8 <__ieee754_powf+0xac>
 8006b5e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006b62:	db30      	blt.n	8006bc6 <__ieee754_powf+0xba>
 8006b64:	15fb      	asrs	r3, r7, #23
 8006b66:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006b6a:	fa47 f603 	asr.w	r6, r7, r3
 8006b6e:	fa06 f303 	lsl.w	r3, r6, r3
 8006b72:	42bb      	cmp	r3, r7
 8006b74:	d127      	bne.n	8006bc6 <__ieee754_powf+0xba>
 8006b76:	f006 0601 	and.w	r6, r6, #1
 8006b7a:	f1c6 0602 	rsb	r6, r6, #2
 8006b7e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006b82:	d122      	bne.n	8006bca <__ieee754_powf+0xbe>
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	f280 8268 	bge.w	800705a <__ieee754_powf+0x54e>
 8006b8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006b8e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006b92:	e00d      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8006b94:	2600      	movs	r6, #0
 8006b96:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006b9a:	d1f0      	bne.n	8006b7e <__ieee754_powf+0x72>
 8006b9c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006ba0:	f000 8255 	beq.w	800704e <__ieee754_powf+0x542>
 8006ba4:	dd0a      	ble.n	8006bbc <__ieee754_powf+0xb0>
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	f280 8254 	bge.w	8007054 <__ieee754_powf+0x548>
 8006bac:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8006eb4 <__ieee754_powf+0x3a8>
 8006bb0:	ecbd 8b02 	vpop	{d8}
 8006bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb8:	2602      	movs	r6, #2
 8006bba:	e7ec      	b.n	8006b96 <__ieee754_powf+0x8a>
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	daf5      	bge.n	8006bac <__ieee754_powf+0xa0>
 8006bc0:	eeb1 0a68 	vneg.f32	s0, s17
 8006bc4:	e7f4      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	e7d9      	b.n	8006b7e <__ieee754_powf+0x72>
 8006bca:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006bce:	d102      	bne.n	8006bd6 <__ieee754_powf+0xca>
 8006bd0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006bd4:	e7ec      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8006bd6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8006bda:	eeb0 0a48 	vmov.f32	s0, s16
 8006bde:	d108      	bne.n	8006bf2 <__ieee754_powf+0xe6>
 8006be0:	f1b8 0f00 	cmp.w	r8, #0
 8006be4:	db05      	blt.n	8006bf2 <__ieee754_powf+0xe6>
 8006be6:	ecbd 8b02 	vpop	{d8}
 8006bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	f000 bb79 	b.w	80072e4 <__ieee754_sqrtf>
 8006bf2:	f000 fea5 	bl	8007940 <fabsf>
 8006bf6:	b124      	cbz	r4, 8006c02 <__ieee754_powf+0xf6>
 8006bf8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006bfc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006c00:	d117      	bne.n	8006c32 <__ieee754_powf+0x126>
 8006c02:	2d00      	cmp	r5, #0
 8006c04:	bfbc      	itt	lt
 8006c06:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006c0a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006c0e:	f1b8 0f00 	cmp.w	r8, #0
 8006c12:	dacd      	bge.n	8006bb0 <__ieee754_powf+0xa4>
 8006c14:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006c18:	ea54 0306 	orrs.w	r3, r4, r6
 8006c1c:	d104      	bne.n	8006c28 <__ieee754_powf+0x11c>
 8006c1e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006c22:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006c26:	e7c3      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8006c28:	2e01      	cmp	r6, #1
 8006c2a:	d1c1      	bne.n	8006bb0 <__ieee754_powf+0xa4>
 8006c2c:	eeb1 0a40 	vneg.f32	s0, s0
 8006c30:	e7be      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8006c32:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8006c36:	3801      	subs	r0, #1
 8006c38:	ea56 0300 	orrs.w	r3, r6, r0
 8006c3c:	d104      	bne.n	8006c48 <__ieee754_powf+0x13c>
 8006c3e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006c42:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006c46:	e7b3      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8006c48:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006c4c:	dd6d      	ble.n	8006d2a <__ieee754_powf+0x21e>
 8006c4e:	4b9a      	ldr	r3, [pc, #616]	; (8006eb8 <__ieee754_powf+0x3ac>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	dc06      	bgt.n	8006c62 <__ieee754_powf+0x156>
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	daa9      	bge.n	8006bac <__ieee754_powf+0xa0>
 8006c58:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8006ebc <__ieee754_powf+0x3b0>
 8006c5c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c60:	e7a6      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8006c62:	4b97      	ldr	r3, [pc, #604]	; (8006ec0 <__ieee754_powf+0x3b4>)
 8006c64:	429c      	cmp	r4, r3
 8006c66:	dd02      	ble.n	8006c6e <__ieee754_powf+0x162>
 8006c68:	2d00      	cmp	r5, #0
 8006c6a:	dcf5      	bgt.n	8006c58 <__ieee754_powf+0x14c>
 8006c6c:	e79e      	b.n	8006bac <__ieee754_powf+0xa0>
 8006c6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006c72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006c76:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006ec4 <__ieee754_powf+0x3b8>
 8006c7a:	eef1 6a40 	vneg.f32	s13, s0
 8006c7e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006c82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006c8a:	eee7 7a40 	vfms.f32	s15, s14, s0
 8006c8e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8006c92:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8006ec8 <__ieee754_powf+0x3bc>
 8006c96:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8006c9a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8006ecc <__ieee754_powf+0x3c0>
 8006c9e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8006ca2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006ca6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006ed0 <__ieee754_powf+0x3c4>
 8006caa:	eeb0 6a67 	vmov.f32	s12, s15
 8006cae:	eea0 6a07 	vfma.f32	s12, s0, s14
 8006cb2:	ee16 3a10 	vmov	r3, s12
 8006cb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006cba:	f023 030f 	bic.w	r3, r3, #15
 8006cbe:	ee00 3a90 	vmov	s1, r3
 8006cc2:	eee6 0a87 	vfma.f32	s1, s13, s14
 8006cc6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006cca:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006cce:	f025 050f 	bic.w	r5, r5, #15
 8006cd2:	ee07 5a10 	vmov	s14, r5
 8006cd6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006cda:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006ce6:	3e01      	subs	r6, #1
 8006ce8:	ea56 0200 	orrs.w	r2, r6, r0
 8006cec:	ee07 5a10 	vmov	s14, r5
 8006cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cf4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006cf8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006cfc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006d00:	ee17 4a10 	vmov	r4, s14
 8006d04:	bf08      	it	eq
 8006d06:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006d10:	f340 8184 	ble.w	800701c <__ieee754_powf+0x510>
 8006d14:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006d18:	f340 80fc 	ble.w	8006f14 <__ieee754_powf+0x408>
 8006d1c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006ebc <__ieee754_powf+0x3b0>
 8006d20:	ee28 0a27 	vmul.f32	s0, s16, s15
 8006d24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006d28:	e742      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8006d2a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8006d2e:	bfbf      	itttt	lt
 8006d30:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8006ed4 <__ieee754_powf+0x3c8>
 8006d34:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006d38:	f06f 0217 	mvnlt.w	r2, #23
 8006d3c:	ee17 4a90 	vmovlt	r4, s15
 8006d40:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006d44:	bfa8      	it	ge
 8006d46:	2200      	movge	r2, #0
 8006d48:	3b7f      	subs	r3, #127	; 0x7f
 8006d4a:	4413      	add	r3, r2
 8006d4c:	4a62      	ldr	r2, [pc, #392]	; (8006ed8 <__ieee754_powf+0x3cc>)
 8006d4e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006d52:	4294      	cmp	r4, r2
 8006d54:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8006d58:	dd06      	ble.n	8006d68 <__ieee754_powf+0x25c>
 8006d5a:	4a60      	ldr	r2, [pc, #384]	; (8006edc <__ieee754_powf+0x3d0>)
 8006d5c:	4294      	cmp	r4, r2
 8006d5e:	f340 80a5 	ble.w	8006eac <__ieee754_powf+0x3a0>
 8006d62:	3301      	adds	r3, #1
 8006d64:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006d68:	2400      	movs	r4, #0
 8006d6a:	4a5d      	ldr	r2, [pc, #372]	; (8006ee0 <__ieee754_powf+0x3d4>)
 8006d6c:	00a7      	lsls	r7, r4, #2
 8006d6e:	443a      	add	r2, r7
 8006d70:	ee07 1a90 	vmov	s15, r1
 8006d74:	ed92 7a00 	vldr	s14, [r2]
 8006d78:	4a5a      	ldr	r2, [pc, #360]	; (8006ee4 <__ieee754_powf+0x3d8>)
 8006d7a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006d7e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006d82:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8006d86:	1049      	asrs	r1, r1, #1
 8006d88:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006d8c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006d90:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006d94:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006d98:	ee06 1a10 	vmov	s12, r1
 8006d9c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8006da0:	ee14 ca90 	vmov	ip, s9
 8006da4:	ea02 0c0c 	and.w	ip, r2, ip
 8006da8:	ee05 ca10 	vmov	s10, ip
 8006dac:	eeb1 4a45 	vneg.f32	s8, s10
 8006db0:	eee4 5a06 	vfma.f32	s11, s8, s12
 8006db4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006db8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006ee8 <__ieee754_powf+0x3dc>
 8006dbc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8006dc0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006dc4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8006dc8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8006dcc:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8006dd0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8006eec <__ieee754_powf+0x3e0>
 8006dd4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8006dd8:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ef0 <__ieee754_powf+0x3e4>
 8006ddc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006de0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006ec4 <__ieee754_powf+0x3b8>
 8006de4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006de8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006ef4 <__ieee754_powf+0x3e8>
 8006dec:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006df0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006ef8 <__ieee754_powf+0x3ec>
 8006df4:	ee75 6a24 	vadd.f32	s13, s10, s9
 8006df8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006dfc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006e00:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8006e04:	eef0 7a65 	vmov.f32	s15, s11
 8006e08:	eee3 6a87 	vfma.f32	s13, s7, s14
 8006e0c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8006e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e14:	ee17 1a90 	vmov	r1, s15
 8006e18:	4011      	ands	r1, r2
 8006e1a:	ee07 1a90 	vmov	s15, r1
 8006e1e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8006e22:	eddf 5a36 	vldr	s11, [pc, #216]	; 8006efc <__ieee754_powf+0x3f0>
 8006e26:	eea4 7a05 	vfma.f32	s14, s8, s10
 8006e2a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006e2e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006e32:	eea7 7a86 	vfma.f32	s14, s15, s12
 8006e36:	eeb0 6a47 	vmov.f32	s12, s14
 8006e3a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8006e3e:	ee16 1a10 	vmov	r1, s12
 8006e42:	4011      	ands	r1, r2
 8006e44:	ee06 1a90 	vmov	s13, r1
 8006e48:	eee4 6a27 	vfma.f32	s13, s8, s15
 8006e4c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006f00 <__ieee754_powf+0x3f4>
 8006e50:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006e54:	ee06 1a10 	vmov	s12, r1
 8006e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e5c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8006f04 <__ieee754_powf+0x3f8>
 8006e60:	4929      	ldr	r1, [pc, #164]	; (8006f08 <__ieee754_powf+0x3fc>)
 8006e62:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006e66:	4439      	add	r1, r7
 8006e68:	edd1 7a00 	vldr	s15, [r1]
 8006e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef0 0a47 	vmov.f32	s1, s14
 8006e78:	4b24      	ldr	r3, [pc, #144]	; (8006f0c <__ieee754_powf+0x400>)
 8006e7a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8006e7e:	443b      	add	r3, r7
 8006e80:	ed93 5a00 	vldr	s10, [r3]
 8006e84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006e88:	ee70 0a85 	vadd.f32	s1, s1, s10
 8006e8c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8006e90:	ee17 3a90 	vmov	r3, s15
 8006e94:	4013      	ands	r3, r2
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e9e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006ea2:	eee6 7a65 	vfms.f32	s15, s12, s11
 8006ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eaa:	e70e      	b.n	8006cca <__ieee754_powf+0x1be>
 8006eac:	2401      	movs	r4, #1
 8006eae:	e75c      	b.n	8006d6a <__ieee754_powf+0x25e>
 8006eb0:	080163f4 	.word	0x080163f4
 8006eb4:	00000000 	.word	0x00000000
 8006eb8:	3f7ffff7 	.word	0x3f7ffff7
 8006ebc:	7149f2ca 	.word	0x7149f2ca
 8006ec0:	3f800007 	.word	0x3f800007
 8006ec4:	3eaaaaab 	.word	0x3eaaaaab
 8006ec8:	36eca570 	.word	0x36eca570
 8006ecc:	3fb8aa3b 	.word	0x3fb8aa3b
 8006ed0:	3fb8aa00 	.word	0x3fb8aa00
 8006ed4:	4b800000 	.word	0x4b800000
 8006ed8:	001cc471 	.word	0x001cc471
 8006edc:	005db3d6 	.word	0x005db3d6
 8006ee0:	080163f8 	.word	0x080163f8
 8006ee4:	fffff000 	.word	0xfffff000
 8006ee8:	3e6c3255 	.word	0x3e6c3255
 8006eec:	3e53f142 	.word	0x3e53f142
 8006ef0:	3e8ba305 	.word	0x3e8ba305
 8006ef4:	3edb6db7 	.word	0x3edb6db7
 8006ef8:	3f19999a 	.word	0x3f19999a
 8006efc:	3f763800 	.word	0x3f763800
 8006f00:	3f76384f 	.word	0x3f76384f
 8006f04:	369dc3a0 	.word	0x369dc3a0
 8006f08:	08016408 	.word	0x08016408
 8006f0c:	08016400 	.word	0x08016400
 8006f10:	3338aa3c 	.word	0x3338aa3c
 8006f14:	f040 8092 	bne.w	800703c <__ieee754_powf+0x530>
 8006f18:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006f10 <__ieee754_powf+0x404>
 8006f1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f20:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006f24:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2c:	f73f aef6 	bgt.w	8006d1c <__ieee754_powf+0x210>
 8006f30:	15db      	asrs	r3, r3, #23
 8006f32:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006f36:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f3a:	4103      	asrs	r3, r0
 8006f3c:	4423      	add	r3, r4
 8006f3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006f42:	4947      	ldr	r1, [pc, #284]	; (8007060 <__ieee754_powf+0x554>)
 8006f44:	3a7f      	subs	r2, #127	; 0x7f
 8006f46:	4111      	asrs	r1, r2
 8006f48:	ea23 0101 	bic.w	r1, r3, r1
 8006f4c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006f50:	ee07 1a10 	vmov	s14, r1
 8006f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006f58:	f1c2 0217 	rsb	r2, r2, #23
 8006f5c:	4110      	asrs	r0, r2
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f64:	bfb8      	it	lt
 8006f66:	4240      	neglt	r0, r0
 8006f68:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006f6c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007064 <__ieee754_powf+0x558>
 8006f70:	ee17 3a10 	vmov	r3, s14
 8006f74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f78:	f023 030f 	bic.w	r3, r3, #15
 8006f7c:	ee07 3a10 	vmov	s14, r3
 8006f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f84:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006f88:	eddf 7a37 	vldr	s15, [pc, #220]	; 8007068 <__ieee754_powf+0x55c>
 8006f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f90:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006f94:	eddf 6a35 	vldr	s13, [pc, #212]	; 800706c <__ieee754_powf+0x560>
 8006f98:	eeb0 0a67 	vmov.f32	s0, s15
 8006f9c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006fa0:	eeb0 6a40 	vmov.f32	s12, s0
 8006fa4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006fa8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006fac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006fb0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007070 <__ieee754_powf+0x564>
 8006fb4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007074 <__ieee754_powf+0x568>
 8006fb8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006fbc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007078 <__ieee754_powf+0x56c>
 8006fc0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006fc4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800707c <__ieee754_powf+0x570>
 8006fc8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006fcc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8007080 <__ieee754_powf+0x574>
 8006fd0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006fd4:	eeb0 6a40 	vmov.f32	s12, s0
 8006fd8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006fdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006fe0:	eeb0 7a46 	vmov.f32	s14, s12
 8006fe4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006fe8:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006fec:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006ff0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ff8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ffc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007000:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007004:	ee10 3a10 	vmov	r3, s0
 8007008:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800700c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007010:	da1a      	bge.n	8007048 <__ieee754_powf+0x53c>
 8007012:	f000 fcad 	bl	8007970 <scalbnf>
 8007016:	ee20 0a08 	vmul.f32	s0, s0, s16
 800701a:	e5c9      	b.n	8006bb0 <__ieee754_powf+0xa4>
 800701c:	4a19      	ldr	r2, [pc, #100]	; (8007084 <__ieee754_powf+0x578>)
 800701e:	4293      	cmp	r3, r2
 8007020:	dd02      	ble.n	8007028 <__ieee754_powf+0x51c>
 8007022:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007088 <__ieee754_powf+0x57c>
 8007026:	e67b      	b.n	8006d20 <__ieee754_powf+0x214>
 8007028:	d108      	bne.n	800703c <__ieee754_powf+0x530>
 800702a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800702e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007036:	f6ff af7b 	blt.w	8006f30 <__ieee754_powf+0x424>
 800703a:	e7f2      	b.n	8007022 <__ieee754_powf+0x516>
 800703c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007040:	f73f af76 	bgt.w	8006f30 <__ieee754_powf+0x424>
 8007044:	2000      	movs	r0, #0
 8007046:	e78f      	b.n	8006f68 <__ieee754_powf+0x45c>
 8007048:	ee00 3a10 	vmov	s0, r3
 800704c:	e7e3      	b.n	8007016 <__ieee754_powf+0x50a>
 800704e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007052:	e5ad      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8007054:	eeb0 0a68 	vmov.f32	s0, s17
 8007058:	e5aa      	b.n	8006bb0 <__ieee754_powf+0xa4>
 800705a:	eeb0 0a48 	vmov.f32	s0, s16
 800705e:	e5a7      	b.n	8006bb0 <__ieee754_powf+0xa4>
 8007060:	007fffff 	.word	0x007fffff
 8007064:	3f317218 	.word	0x3f317218
 8007068:	35bfbe8c 	.word	0x35bfbe8c
 800706c:	3f317200 	.word	0x3f317200
 8007070:	3331bb4c 	.word	0x3331bb4c
 8007074:	b5ddea0e 	.word	0xb5ddea0e
 8007078:	388ab355 	.word	0x388ab355
 800707c:	bb360b61 	.word	0xbb360b61
 8007080:	3e2aaaab 	.word	0x3e2aaaab
 8007084:	43160000 	.word	0x43160000
 8007088:	0da24260 	.word	0x0da24260

0800708c <__ieee754_rem_pio2f>:
 800708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708e:	ee10 6a10 	vmov	r6, s0
 8007092:	4b86      	ldr	r3, [pc, #536]	; (80072ac <__ieee754_rem_pio2f+0x220>)
 8007094:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007098:	429c      	cmp	r4, r3
 800709a:	b087      	sub	sp, #28
 800709c:	4605      	mov	r5, r0
 800709e:	dc05      	bgt.n	80070ac <__ieee754_rem_pio2f+0x20>
 80070a0:	2300      	movs	r3, #0
 80070a2:	ed85 0a00 	vstr	s0, [r5]
 80070a6:	6043      	str	r3, [r0, #4]
 80070a8:	2000      	movs	r0, #0
 80070aa:	e020      	b.n	80070ee <__ieee754_rem_pio2f+0x62>
 80070ac:	4b80      	ldr	r3, [pc, #512]	; (80072b0 <__ieee754_rem_pio2f+0x224>)
 80070ae:	429c      	cmp	r4, r3
 80070b0:	dc38      	bgt.n	8007124 <__ieee754_rem_pio2f+0x98>
 80070b2:	2e00      	cmp	r6, #0
 80070b4:	f024 040f 	bic.w	r4, r4, #15
 80070b8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80072b4 <__ieee754_rem_pio2f+0x228>
 80070bc:	4b7e      	ldr	r3, [pc, #504]	; (80072b8 <__ieee754_rem_pio2f+0x22c>)
 80070be:	dd18      	ble.n	80070f2 <__ieee754_rem_pio2f+0x66>
 80070c0:	429c      	cmp	r4, r3
 80070c2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80070c6:	bf09      	itett	eq
 80070c8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80072bc <__ieee754_rem_pio2f+0x230>
 80070cc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80072c0 <__ieee754_rem_pio2f+0x234>
 80070d0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80070d4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80072c4 <__ieee754_rem_pio2f+0x238>
 80070d8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80070dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070e0:	edc0 6a00 	vstr	s13, [r0]
 80070e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070e8:	edc0 7a01 	vstr	s15, [r0, #4]
 80070ec:	2001      	movs	r0, #1
 80070ee:	b007      	add	sp, #28
 80070f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f2:	429c      	cmp	r4, r3
 80070f4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80070f8:	bf09      	itett	eq
 80070fa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80072bc <__ieee754_rem_pio2f+0x230>
 80070fe:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80072c0 <__ieee754_rem_pio2f+0x234>
 8007102:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007106:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80072c4 <__ieee754_rem_pio2f+0x238>
 800710a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800710e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007112:	edc0 6a00 	vstr	s13, [r0]
 8007116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800711a:	edc0 7a01 	vstr	s15, [r0, #4]
 800711e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007122:	e7e4      	b.n	80070ee <__ieee754_rem_pio2f+0x62>
 8007124:	4b68      	ldr	r3, [pc, #416]	; (80072c8 <__ieee754_rem_pio2f+0x23c>)
 8007126:	429c      	cmp	r4, r3
 8007128:	dc71      	bgt.n	800720e <__ieee754_rem_pio2f+0x182>
 800712a:	f000 fc09 	bl	8007940 <fabsf>
 800712e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80072cc <__ieee754_rem_pio2f+0x240>
 8007132:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007136:	eee0 7a07 	vfma.f32	s15, s0, s14
 800713a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800713e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007142:	ee17 0a90 	vmov	r0, s15
 8007146:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80072b4 <__ieee754_rem_pio2f+0x228>
 800714a:	eeb1 7a46 	vneg.f32	s14, s12
 800714e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007152:	281f      	cmp	r0, #31
 8007154:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80072c0 <__ieee754_rem_pio2f+0x234>
 8007158:	ee66 7a27 	vmul.f32	s15, s12, s15
 800715c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007160:	ee16 3a90 	vmov	r3, s13
 8007164:	dc1c      	bgt.n	80071a0 <__ieee754_rem_pio2f+0x114>
 8007166:	1e47      	subs	r7, r0, #1
 8007168:	4959      	ldr	r1, [pc, #356]	; (80072d0 <__ieee754_rem_pio2f+0x244>)
 800716a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800716e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8007172:	428a      	cmp	r2, r1
 8007174:	d014      	beq.n	80071a0 <__ieee754_rem_pio2f+0x114>
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	ed95 7a00 	vldr	s14, [r5]
 800717c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007180:	2e00      	cmp	r6, #0
 8007182:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007186:	ed85 0a01 	vstr	s0, [r5, #4]
 800718a:	dab0      	bge.n	80070ee <__ieee754_rem_pio2f+0x62>
 800718c:	eeb1 7a47 	vneg.f32	s14, s14
 8007190:	eeb1 0a40 	vneg.f32	s0, s0
 8007194:	ed85 7a00 	vstr	s14, [r5]
 8007198:	ed85 0a01 	vstr	s0, [r5, #4]
 800719c:	4240      	negs	r0, r0
 800719e:	e7a6      	b.n	80070ee <__ieee754_rem_pio2f+0x62>
 80071a0:	15e4      	asrs	r4, r4, #23
 80071a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80071a6:	1aa2      	subs	r2, r4, r2
 80071a8:	2a08      	cmp	r2, #8
 80071aa:	dde4      	ble.n	8007176 <__ieee754_rem_pio2f+0xea>
 80071ac:	eddf 7a43 	vldr	s15, [pc, #268]	; 80072bc <__ieee754_rem_pio2f+0x230>
 80071b0:	eef0 6a40 	vmov.f32	s13, s0
 80071b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80071b8:	ee30 0a66 	vsub.f32	s0, s0, s13
 80071bc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80071c0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80072c4 <__ieee754_rem_pio2f+0x238>
 80071c4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80071c8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80071cc:	eef0 7a40 	vmov.f32	s15, s0
 80071d0:	ee15 3a90 	vmov	r3, s11
 80071d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80071d8:	1aa4      	subs	r4, r4, r2
 80071da:	2c19      	cmp	r4, #25
 80071dc:	dc04      	bgt.n	80071e8 <__ieee754_rem_pio2f+0x15c>
 80071de:	edc5 5a00 	vstr	s11, [r5]
 80071e2:	eeb0 0a66 	vmov.f32	s0, s13
 80071e6:	e7c7      	b.n	8007178 <__ieee754_rem_pio2f+0xec>
 80071e8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80072d4 <__ieee754_rem_pio2f+0x248>
 80071ec:	eeb0 0a66 	vmov.f32	s0, s13
 80071f0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80071f4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80071f8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80071fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80072d8 <__ieee754_rem_pio2f+0x24c>
 8007200:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8007204:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007208:	ed85 7a00 	vstr	s14, [r5]
 800720c:	e7b4      	b.n	8007178 <__ieee754_rem_pio2f+0xec>
 800720e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007212:	db06      	blt.n	8007222 <__ieee754_rem_pio2f+0x196>
 8007214:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007218:	edc0 7a01 	vstr	s15, [r0, #4]
 800721c:	edc0 7a00 	vstr	s15, [r0]
 8007220:	e742      	b.n	80070a8 <__ieee754_rem_pio2f+0x1c>
 8007222:	15e2      	asrs	r2, r4, #23
 8007224:	3a86      	subs	r2, #134	; 0x86
 8007226:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007232:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80072dc <__ieee754_rem_pio2f+0x250>
 8007236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800723a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800723e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007242:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007246:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800724a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800724e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007252:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007256:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800725a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800725e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007262:	edcd 7a05 	vstr	s15, [sp, #20]
 8007266:	d11e      	bne.n	80072a6 <__ieee754_rem_pio2f+0x21a>
 8007268:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800726c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007270:	bf0c      	ite	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	2302      	movne	r3, #2
 8007276:	491a      	ldr	r1, [pc, #104]	; (80072e0 <__ieee754_rem_pio2f+0x254>)
 8007278:	9101      	str	r1, [sp, #4]
 800727a:	2102      	movs	r1, #2
 800727c:	9100      	str	r1, [sp, #0]
 800727e:	a803      	add	r0, sp, #12
 8007280:	4629      	mov	r1, r5
 8007282:	f000 f891 	bl	80073a8 <__kernel_rem_pio2f>
 8007286:	2e00      	cmp	r6, #0
 8007288:	f6bf af31 	bge.w	80070ee <__ieee754_rem_pio2f+0x62>
 800728c:	edd5 7a00 	vldr	s15, [r5]
 8007290:	eef1 7a67 	vneg.f32	s15, s15
 8007294:	edc5 7a00 	vstr	s15, [r5]
 8007298:	edd5 7a01 	vldr	s15, [r5, #4]
 800729c:	eef1 7a67 	vneg.f32	s15, s15
 80072a0:	edc5 7a01 	vstr	s15, [r5, #4]
 80072a4:	e77a      	b.n	800719c <__ieee754_rem_pio2f+0x110>
 80072a6:	2303      	movs	r3, #3
 80072a8:	e7e5      	b.n	8007276 <__ieee754_rem_pio2f+0x1ea>
 80072aa:	bf00      	nop
 80072ac:	3f490fd8 	.word	0x3f490fd8
 80072b0:	4016cbe3 	.word	0x4016cbe3
 80072b4:	3fc90f80 	.word	0x3fc90f80
 80072b8:	3fc90fd0 	.word	0x3fc90fd0
 80072bc:	37354400 	.word	0x37354400
 80072c0:	37354443 	.word	0x37354443
 80072c4:	2e85a308 	.word	0x2e85a308
 80072c8:	43490f80 	.word	0x43490f80
 80072cc:	3f22f984 	.word	0x3f22f984
 80072d0:	08016410 	.word	0x08016410
 80072d4:	2e85a300 	.word	0x2e85a300
 80072d8:	248d3132 	.word	0x248d3132
 80072dc:	43800000 	.word	0x43800000
 80072e0:	08016490 	.word	0x08016490

080072e4 <__ieee754_sqrtf>:
 80072e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80072e8:	4770      	bx	lr
	...

080072ec <__kernel_cosf>:
 80072ec:	ee10 3a10 	vmov	r3, s0
 80072f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80072f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fc:	da05      	bge.n	800730a <__kernel_cosf+0x1e>
 80072fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007302:	ee17 2a90 	vmov	r2, s15
 8007306:	2a00      	cmp	r2, #0
 8007308:	d03b      	beq.n	8007382 <__kernel_cosf+0x96>
 800730a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800730e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007312:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007388 <__kernel_cosf+0x9c>
 8007316:	4a1d      	ldr	r2, [pc, #116]	; (800738c <__kernel_cosf+0xa0>)
 8007318:	ee66 7a07 	vmul.f32	s15, s12, s14
 800731c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007390 <__kernel_cosf+0xa4>
 8007320:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007324:	4293      	cmp	r3, r2
 8007326:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007394 <__kernel_cosf+0xa8>
 800732a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800732e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007398 <__kernel_cosf+0xac>
 8007332:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007336:	eddf 5a19 	vldr	s11, [pc, #100]	; 800739c <__kernel_cosf+0xb0>
 800733a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800733e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80073a0 <__kernel_cosf+0xb4>
 8007342:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007346:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800734a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800734e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8007352:	dc04      	bgt.n	800735e <__kernel_cosf+0x72>
 8007354:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8007358:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800735c:	4770      	bx	lr
 800735e:	4a11      	ldr	r2, [pc, #68]	; (80073a4 <__kernel_cosf+0xb8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	bfda      	itte	le
 8007364:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007368:	ee07 3a10 	vmovle	s14, r3
 800736c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007370:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007374:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007378:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800737c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007380:	4770      	bx	lr
 8007382:	eeb0 0a66 	vmov.f32	s0, s13
 8007386:	4770      	bx	lr
 8007388:	ad47d74e 	.word	0xad47d74e
 800738c:	3e999999 	.word	0x3e999999
 8007390:	310f74f6 	.word	0x310f74f6
 8007394:	b493f27c 	.word	0xb493f27c
 8007398:	37d00d01 	.word	0x37d00d01
 800739c:	bab60b61 	.word	0xbab60b61
 80073a0:	3d2aaaab 	.word	0x3d2aaaab
 80073a4:	3f480000 	.word	0x3f480000

080073a8 <__kernel_rem_pio2f>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	ed2d 8b04 	vpush	{d8-d9}
 80073b0:	b0d7      	sub	sp, #348	; 0x15c
 80073b2:	469b      	mov	fp, r3
 80073b4:	460e      	mov	r6, r1
 80073b6:	4bbe      	ldr	r3, [pc, #760]	; (80076b0 <__kernel_rem_pio2f+0x308>)
 80073b8:	9964      	ldr	r1, [sp, #400]	; 0x190
 80073ba:	9002      	str	r0, [sp, #8]
 80073bc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80073c0:	9865      	ldr	r0, [sp, #404]	; 0x194
 80073c2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80076c0 <__kernel_rem_pio2f+0x318>
 80073c6:	1ed1      	subs	r1, r2, #3
 80073c8:	2308      	movs	r3, #8
 80073ca:	fb91 f1f3 	sdiv	r1, r1, r3
 80073ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80073d2:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 80073d6:	1c4c      	adds	r4, r1, #1
 80073d8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80073dc:	eba1 050a 	sub.w	r5, r1, sl
 80073e0:	aa1a      	add	r2, sp, #104	; 0x68
 80073e2:	eb09 070a 	add.w	r7, r9, sl
 80073e6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80073ea:	4696      	mov	lr, r2
 80073ec:	2300      	movs	r3, #0
 80073ee:	42bb      	cmp	r3, r7
 80073f0:	dd0f      	ble.n	8007412 <__kernel_rem_pio2f+0x6a>
 80073f2:	af42      	add	r7, sp, #264	; 0x108
 80073f4:	2200      	movs	r2, #0
 80073f6:	454a      	cmp	r2, r9
 80073f8:	dc27      	bgt.n	800744a <__kernel_rem_pio2f+0xa2>
 80073fa:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80073fe:	eb0b 0302 	add.w	r3, fp, r2
 8007402:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8007406:	9d02      	ldr	r5, [sp, #8]
 8007408:	eddf 7aad 	vldr	s15, [pc, #692]	; 80076c0 <__kernel_rem_pio2f+0x318>
 800740c:	f04f 0c00 	mov.w	ip, #0
 8007410:	e015      	b.n	800743e <__kernel_rem_pio2f+0x96>
 8007412:	42dd      	cmn	r5, r3
 8007414:	bf5d      	ittte	pl
 8007416:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800741a:	ee07 2a90 	vmovpl	s15, r2
 800741e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007422:	eef0 7a47 	vmovmi.f32	s15, s14
 8007426:	ecee 7a01 	vstmia	lr!, {s15}
 800742a:	3301      	adds	r3, #1
 800742c:	e7df      	b.n	80073ee <__kernel_rem_pio2f+0x46>
 800742e:	ecf5 6a01 	vldmia	r5!, {s13}
 8007432:	ed33 7a01 	vldmdb	r3!, {s14}
 8007436:	eee6 7a87 	vfma.f32	s15, s13, s14
 800743a:	f10c 0c01 	add.w	ip, ip, #1
 800743e:	45d4      	cmp	ip, sl
 8007440:	ddf5      	ble.n	800742e <__kernel_rem_pio2f+0x86>
 8007442:	ece7 7a01 	vstmia	r7!, {s15}
 8007446:	3201      	adds	r2, #1
 8007448:	e7d5      	b.n	80073f6 <__kernel_rem_pio2f+0x4e>
 800744a:	ab06      	add	r3, sp, #24
 800744c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80076bc <__kernel_rem_pio2f+0x314>
 8007456:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80076b8 <__kernel_rem_pio2f+0x310>
 800745a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	464d      	mov	r5, r9
 8007462:	ab56      	add	r3, sp, #344	; 0x158
 8007464:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007468:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800746c:	3f01      	subs	r7, #1
 800746e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007472:	00bf      	lsls	r7, r7, #2
 8007474:	ab56      	add	r3, sp, #344	; 0x158
 8007476:	19da      	adds	r2, r3, r7
 8007478:	3a4c      	subs	r2, #76	; 0x4c
 800747a:	2300      	movs	r3, #0
 800747c:	1ae9      	subs	r1, r5, r3
 800747e:	2900      	cmp	r1, #0
 8007480:	dc4c      	bgt.n	800751c <__kernel_rem_pio2f+0x174>
 8007482:	4620      	mov	r0, r4
 8007484:	f000 fa74 	bl	8007970 <scalbnf>
 8007488:	eeb0 8a40 	vmov.f32	s16, s0
 800748c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007490:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007494:	f7ff f8b8 	bl	8006608 <floorf>
 8007498:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800749c:	eea0 8a67 	vfms.f32	s16, s0, s15
 80074a0:	2c00      	cmp	r4, #0
 80074a2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80074a6:	edcd 7a01 	vstr	s15, [sp, #4]
 80074aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ae:	ee38 8a67 	vsub.f32	s16, s16, s15
 80074b2:	dd48      	ble.n	8007546 <__kernel_rem_pio2f+0x19e>
 80074b4:	1e69      	subs	r1, r5, #1
 80074b6:	ab06      	add	r3, sp, #24
 80074b8:	f1c4 0008 	rsb	r0, r4, #8
 80074bc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80074c0:	9a01      	ldr	r2, [sp, #4]
 80074c2:	fa4c f300 	asr.w	r3, ip, r0
 80074c6:	441a      	add	r2, r3
 80074c8:	4083      	lsls	r3, r0
 80074ca:	9201      	str	r2, [sp, #4]
 80074cc:	ebac 0203 	sub.w	r2, ip, r3
 80074d0:	ab06      	add	r3, sp, #24
 80074d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80074d6:	f1c4 0307 	rsb	r3, r4, #7
 80074da:	fa42 f803 	asr.w	r8, r2, r3
 80074de:	f1b8 0f00 	cmp.w	r8, #0
 80074e2:	dd41      	ble.n	8007568 <__kernel_rem_pio2f+0x1c0>
 80074e4:	9b01      	ldr	r3, [sp, #4]
 80074e6:	2000      	movs	r0, #0
 80074e8:	3301      	adds	r3, #1
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	4601      	mov	r1, r0
 80074ee:	4285      	cmp	r5, r0
 80074f0:	dc6d      	bgt.n	80075ce <__kernel_rem_pio2f+0x226>
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	dd04      	ble.n	8007500 <__kernel_rem_pio2f+0x158>
 80074f6:	2c01      	cmp	r4, #1
 80074f8:	d07e      	beq.n	80075f8 <__kernel_rem_pio2f+0x250>
 80074fa:	2c02      	cmp	r4, #2
 80074fc:	f000 8086 	beq.w	800760c <__kernel_rem_pio2f+0x264>
 8007500:	f1b8 0f02 	cmp.w	r8, #2
 8007504:	d130      	bne.n	8007568 <__kernel_rem_pio2f+0x1c0>
 8007506:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800750a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800750e:	b359      	cbz	r1, 8007568 <__kernel_rem_pio2f+0x1c0>
 8007510:	4620      	mov	r0, r4
 8007512:	f000 fa2d 	bl	8007970 <scalbnf>
 8007516:	ee38 8a40 	vsub.f32	s16, s16, s0
 800751a:	e025      	b.n	8007568 <__kernel_rem_pio2f+0x1c0>
 800751c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007520:	a806      	add	r0, sp, #24
 8007522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800752a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800752e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007532:	ee10 1a10 	vmov	r1, s0
 8007536:	ed32 0a01 	vldmdb	r2!, {s0}
 800753a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800753e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007542:	3301      	adds	r3, #1
 8007544:	e79a      	b.n	800747c <__kernel_rem_pio2f+0xd4>
 8007546:	d106      	bne.n	8007556 <__kernel_rem_pio2f+0x1ae>
 8007548:	1e6b      	subs	r3, r5, #1
 800754a:	aa06      	add	r2, sp, #24
 800754c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007550:	ea4f 2822 	mov.w	r8, r2, asr #8
 8007554:	e7c3      	b.n	80074de <__kernel_rem_pio2f+0x136>
 8007556:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800755a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800755e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007562:	da31      	bge.n	80075c8 <__kernel_rem_pio2f+0x220>
 8007564:	f04f 0800 	mov.w	r8, #0
 8007568:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007570:	f040 80a8 	bne.w	80076c4 <__kernel_rem_pio2f+0x31c>
 8007574:	1e6b      	subs	r3, r5, #1
 8007576:	4618      	mov	r0, r3
 8007578:	2200      	movs	r2, #0
 800757a:	4548      	cmp	r0, r9
 800757c:	da4d      	bge.n	800761a <__kernel_rem_pio2f+0x272>
 800757e:	2a00      	cmp	r2, #0
 8007580:	f000 8087 	beq.w	8007692 <__kernel_rem_pio2f+0x2ea>
 8007584:	aa06      	add	r2, sp, #24
 8007586:	3c08      	subs	r4, #8
 8007588:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800758c:	2900      	cmp	r1, #0
 800758e:	f000 808d 	beq.w	80076ac <__kernel_rem_pio2f+0x304>
 8007592:	4620      	mov	r0, r4
 8007594:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007598:	9302      	str	r3, [sp, #8]
 800759a:	f000 f9e9 	bl	8007970 <scalbnf>
 800759e:	9b02      	ldr	r3, [sp, #8]
 80075a0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80076bc <__kernel_rem_pio2f+0x314>
 80075a4:	0099      	lsls	r1, r3, #2
 80075a6:	aa42      	add	r2, sp, #264	; 0x108
 80075a8:	1850      	adds	r0, r2, r1
 80075aa:	1d05      	adds	r5, r0, #4
 80075ac:	461c      	mov	r4, r3
 80075ae:	2c00      	cmp	r4, #0
 80075b0:	f280 80b8 	bge.w	8007724 <__kernel_rem_pio2f+0x37c>
 80075b4:	2500      	movs	r5, #0
 80075b6:	1b5c      	subs	r4, r3, r5
 80075b8:	2c00      	cmp	r4, #0
 80075ba:	f2c0 80d8 	blt.w	800776e <__kernel_rem_pio2f+0x3c6>
 80075be:	4f3d      	ldr	r7, [pc, #244]	; (80076b4 <__kernel_rem_pio2f+0x30c>)
 80075c0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80076c0 <__kernel_rem_pio2f+0x318>
 80075c4:	2400      	movs	r4, #0
 80075c6:	e0c6      	b.n	8007756 <__kernel_rem_pio2f+0x3ae>
 80075c8:	f04f 0802 	mov.w	r8, #2
 80075cc:	e78a      	b.n	80074e4 <__kernel_rem_pio2f+0x13c>
 80075ce:	ab06      	add	r3, sp, #24
 80075d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80075d4:	b949      	cbnz	r1, 80075ea <__kernel_rem_pio2f+0x242>
 80075d6:	b12b      	cbz	r3, 80075e4 <__kernel_rem_pio2f+0x23c>
 80075d8:	aa06      	add	r2, sp, #24
 80075da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80075de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80075e2:	2301      	movs	r3, #1
 80075e4:	3001      	adds	r0, #1
 80075e6:	4619      	mov	r1, r3
 80075e8:	e781      	b.n	80074ee <__kernel_rem_pio2f+0x146>
 80075ea:	aa06      	add	r2, sp, #24
 80075ec:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80075f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80075f4:	460b      	mov	r3, r1
 80075f6:	e7f5      	b.n	80075e4 <__kernel_rem_pio2f+0x23c>
 80075f8:	1e68      	subs	r0, r5, #1
 80075fa:	ab06      	add	r3, sp, #24
 80075fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007604:	aa06      	add	r2, sp, #24
 8007606:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800760a:	e779      	b.n	8007500 <__kernel_rem_pio2f+0x158>
 800760c:	1e68      	subs	r0, r5, #1
 800760e:	ab06      	add	r3, sp, #24
 8007610:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007618:	e7f4      	b.n	8007604 <__kernel_rem_pio2f+0x25c>
 800761a:	a906      	add	r1, sp, #24
 800761c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007620:	3801      	subs	r0, #1
 8007622:	430a      	orrs	r2, r1
 8007624:	e7a9      	b.n	800757a <__kernel_rem_pio2f+0x1d2>
 8007626:	f10c 0c01 	add.w	ip, ip, #1
 800762a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800762e:	2a00      	cmp	r2, #0
 8007630:	d0f9      	beq.n	8007626 <__kernel_rem_pio2f+0x27e>
 8007632:	eb0b 0305 	add.w	r3, fp, r5
 8007636:	aa1a      	add	r2, sp, #104	; 0x68
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	1898      	adds	r0, r3, r2
 800763c:	3004      	adds	r0, #4
 800763e:	1c69      	adds	r1, r5, #1
 8007640:	3704      	adds	r7, #4
 8007642:	2200      	movs	r2, #0
 8007644:	4465      	add	r5, ip
 8007646:	9005      	str	r0, [sp, #20]
 8007648:	428d      	cmp	r5, r1
 800764a:	f6ff af0a 	blt.w	8007462 <__kernel_rem_pio2f+0xba>
 800764e:	a81a      	add	r0, sp, #104	; 0x68
 8007650:	eb02 0c03 	add.w	ip, r2, r3
 8007654:	4484      	add	ip, r0
 8007656:	9803      	ldr	r0, [sp, #12]
 8007658:	f8dd e008 	ldr.w	lr, [sp, #8]
 800765c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007660:	9001      	str	r0, [sp, #4]
 8007662:	ee07 0a90 	vmov	s15, r0
 8007666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766a:	9805      	ldr	r0, [sp, #20]
 800766c:	edcc 7a00 	vstr	s15, [ip]
 8007670:	eddf 7a13 	vldr	s15, [pc, #76]	; 80076c0 <__kernel_rem_pio2f+0x318>
 8007674:	eb00 0802 	add.w	r8, r0, r2
 8007678:	f04f 0c00 	mov.w	ip, #0
 800767c:	45d4      	cmp	ip, sl
 800767e:	dd0c      	ble.n	800769a <__kernel_rem_pio2f+0x2f2>
 8007680:	eb02 0c07 	add.w	ip, r2, r7
 8007684:	a842      	add	r0, sp, #264	; 0x108
 8007686:	4484      	add	ip, r0
 8007688:	edcc 7a01 	vstr	s15, [ip, #4]
 800768c:	3101      	adds	r1, #1
 800768e:	3204      	adds	r2, #4
 8007690:	e7da      	b.n	8007648 <__kernel_rem_pio2f+0x2a0>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	f04f 0c01 	mov.w	ip, #1
 8007698:	e7c7      	b.n	800762a <__kernel_rem_pio2f+0x282>
 800769a:	ecfe 6a01 	vldmia	lr!, {s13}
 800769e:	ed38 7a01 	vldmdb	r8!, {s14}
 80076a2:	f10c 0c01 	add.w	ip, ip, #1
 80076a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80076aa:	e7e7      	b.n	800767c <__kernel_rem_pio2f+0x2d4>
 80076ac:	3b01      	subs	r3, #1
 80076ae:	e769      	b.n	8007584 <__kernel_rem_pio2f+0x1dc>
 80076b0:	080167d4 	.word	0x080167d4
 80076b4:	080167a8 	.word	0x080167a8
 80076b8:	43800000 	.word	0x43800000
 80076bc:	3b800000 	.word	0x3b800000
 80076c0:	00000000 	.word	0x00000000
 80076c4:	4260      	negs	r0, r4
 80076c6:	eeb0 0a48 	vmov.f32	s0, s16
 80076ca:	f000 f951 	bl	8007970 <scalbnf>
 80076ce:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80076b8 <__kernel_rem_pio2f+0x310>
 80076d2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80076d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076da:	db1a      	blt.n	8007712 <__kernel_rem_pio2f+0x36a>
 80076dc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80076bc <__kernel_rem_pio2f+0x314>
 80076e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80076e4:	aa06      	add	r2, sp, #24
 80076e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076ea:	a906      	add	r1, sp, #24
 80076ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f0:	3408      	adds	r4, #8
 80076f2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80076f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80076fe:	ee10 3a10 	vmov	r3, s0
 8007702:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007706:	1c6b      	adds	r3, r5, #1
 8007708:	ee17 2a90 	vmov	r2, s15
 800770c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007710:	e73f      	b.n	8007592 <__kernel_rem_pio2f+0x1ea>
 8007712:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007716:	aa06      	add	r2, sp, #24
 8007718:	ee10 3a10 	vmov	r3, s0
 800771c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007720:	462b      	mov	r3, r5
 8007722:	e736      	b.n	8007592 <__kernel_rem_pio2f+0x1ea>
 8007724:	aa06      	add	r2, sp, #24
 8007726:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800772a:	9202      	str	r2, [sp, #8]
 800772c:	ee07 2a90 	vmov	s15, r2
 8007730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007734:	3c01      	subs	r4, #1
 8007736:	ee67 7a80 	vmul.f32	s15, s15, s0
 800773a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800773e:	ed65 7a01 	vstmdb	r5!, {s15}
 8007742:	e734      	b.n	80075ae <__kernel_rem_pio2f+0x206>
 8007744:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007748:	ecf7 6a01 	vldmia	r7!, {s13}
 800774c:	ed9c 7a00 	vldr	s14, [ip]
 8007750:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007754:	3401      	adds	r4, #1
 8007756:	454c      	cmp	r4, r9
 8007758:	dc01      	bgt.n	800775e <__kernel_rem_pio2f+0x3b6>
 800775a:	42a5      	cmp	r5, r4
 800775c:	daf2      	bge.n	8007744 <__kernel_rem_pio2f+0x39c>
 800775e:	aa56      	add	r2, sp, #344	; 0x158
 8007760:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007764:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007768:	3501      	adds	r5, #1
 800776a:	3804      	subs	r0, #4
 800776c:	e723      	b.n	80075b6 <__kernel_rem_pio2f+0x20e>
 800776e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007770:	2a03      	cmp	r2, #3
 8007772:	d84d      	bhi.n	8007810 <__kernel_rem_pio2f+0x468>
 8007774:	e8df f002 	tbb	[pc, r2]
 8007778:	021f1f3e 	.word	0x021f1f3e
 800777c:	aa56      	add	r2, sp, #344	; 0x158
 800777e:	4411      	add	r1, r2
 8007780:	399c      	subs	r1, #156	; 0x9c
 8007782:	4608      	mov	r0, r1
 8007784:	461c      	mov	r4, r3
 8007786:	2c00      	cmp	r4, #0
 8007788:	dc5f      	bgt.n	800784a <__kernel_rem_pio2f+0x4a2>
 800778a:	4608      	mov	r0, r1
 800778c:	461c      	mov	r4, r3
 800778e:	2c01      	cmp	r4, #1
 8007790:	dc6b      	bgt.n	800786a <__kernel_rem_pio2f+0x4c2>
 8007792:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80076c0 <__kernel_rem_pio2f+0x318>
 8007796:	2b01      	cmp	r3, #1
 8007798:	dc77      	bgt.n	800788a <__kernel_rem_pio2f+0x4e2>
 800779a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800779e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80077a2:	f1b8 0f00 	cmp.w	r8, #0
 80077a6:	d176      	bne.n	8007896 <__kernel_rem_pio2f+0x4ee>
 80077a8:	edc6 6a00 	vstr	s13, [r6]
 80077ac:	ed86 7a01 	vstr	s14, [r6, #4]
 80077b0:	edc6 7a02 	vstr	s15, [r6, #8]
 80077b4:	e02c      	b.n	8007810 <__kernel_rem_pio2f+0x468>
 80077b6:	aa56      	add	r2, sp, #344	; 0x158
 80077b8:	4411      	add	r1, r2
 80077ba:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80076c0 <__kernel_rem_pio2f+0x318>
 80077be:	399c      	subs	r1, #156	; 0x9c
 80077c0:	4618      	mov	r0, r3
 80077c2:	2800      	cmp	r0, #0
 80077c4:	da32      	bge.n	800782c <__kernel_rem_pio2f+0x484>
 80077c6:	f1b8 0f00 	cmp.w	r8, #0
 80077ca:	d035      	beq.n	8007838 <__kernel_rem_pio2f+0x490>
 80077cc:	eef1 7a47 	vneg.f32	s15, s14
 80077d0:	edc6 7a00 	vstr	s15, [r6]
 80077d4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80077d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077dc:	a82f      	add	r0, sp, #188	; 0xbc
 80077de:	2101      	movs	r1, #1
 80077e0:	428b      	cmp	r3, r1
 80077e2:	da2c      	bge.n	800783e <__kernel_rem_pio2f+0x496>
 80077e4:	f1b8 0f00 	cmp.w	r8, #0
 80077e8:	d001      	beq.n	80077ee <__kernel_rem_pio2f+0x446>
 80077ea:	eef1 7a67 	vneg.f32	s15, s15
 80077ee:	edc6 7a01 	vstr	s15, [r6, #4]
 80077f2:	e00d      	b.n	8007810 <__kernel_rem_pio2f+0x468>
 80077f4:	aa56      	add	r2, sp, #344	; 0x158
 80077f6:	4411      	add	r1, r2
 80077f8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80076c0 <__kernel_rem_pio2f+0x318>
 80077fc:	399c      	subs	r1, #156	; 0x9c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da0e      	bge.n	8007820 <__kernel_rem_pio2f+0x478>
 8007802:	f1b8 0f00 	cmp.w	r8, #0
 8007806:	d001      	beq.n	800780c <__kernel_rem_pio2f+0x464>
 8007808:	eef1 7a67 	vneg.f32	s15, s15
 800780c:	edc6 7a00 	vstr	s15, [r6]
 8007810:	9b01      	ldr	r3, [sp, #4]
 8007812:	f003 0007 	and.w	r0, r3, #7
 8007816:	b057      	add	sp, #348	; 0x15c
 8007818:	ecbd 8b04 	vpop	{d8-d9}
 800781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007820:	ed31 7a01 	vldmdb	r1!, {s14}
 8007824:	3b01      	subs	r3, #1
 8007826:	ee77 7a87 	vadd.f32	s15, s15, s14
 800782a:	e7e8      	b.n	80077fe <__kernel_rem_pio2f+0x456>
 800782c:	ed71 7a01 	vldmdb	r1!, {s15}
 8007830:	3801      	subs	r0, #1
 8007832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007836:	e7c4      	b.n	80077c2 <__kernel_rem_pio2f+0x41a>
 8007838:	eef0 7a47 	vmov.f32	s15, s14
 800783c:	e7c8      	b.n	80077d0 <__kernel_rem_pio2f+0x428>
 800783e:	ecb0 7a01 	vldmia	r0!, {s14}
 8007842:	3101      	adds	r1, #1
 8007844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007848:	e7ca      	b.n	80077e0 <__kernel_rem_pio2f+0x438>
 800784a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800784e:	ed70 6a01 	vldmdb	r0!, {s13}
 8007852:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007856:	3c01      	subs	r4, #1
 8007858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800785c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007864:	edc0 7a00 	vstr	s15, [r0]
 8007868:	e78d      	b.n	8007786 <__kernel_rem_pio2f+0x3de>
 800786a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800786e:	ed70 6a01 	vldmdb	r0!, {s13}
 8007872:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007876:	3c01      	subs	r4, #1
 8007878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800787c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007884:	edc0 7a00 	vstr	s15, [r0]
 8007888:	e781      	b.n	800778e <__kernel_rem_pio2f+0x3e6>
 800788a:	ed31 7a01 	vldmdb	r1!, {s14}
 800788e:	3b01      	subs	r3, #1
 8007890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007894:	e77f      	b.n	8007796 <__kernel_rem_pio2f+0x3ee>
 8007896:	eef1 6a66 	vneg.f32	s13, s13
 800789a:	eeb1 7a47 	vneg.f32	s14, s14
 800789e:	edc6 6a00 	vstr	s13, [r6]
 80078a2:	ed86 7a01 	vstr	s14, [r6, #4]
 80078a6:	eef1 7a67 	vneg.f32	s15, s15
 80078aa:	e781      	b.n	80077b0 <__kernel_rem_pio2f+0x408>

080078ac <__kernel_sinf>:
 80078ac:	ee10 3a10 	vmov	r3, s0
 80078b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80078b8:	da04      	bge.n	80078c4 <__kernel_sinf+0x18>
 80078ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80078be:	ee17 3a90 	vmov	r3, s15
 80078c2:	b35b      	cbz	r3, 800791c <__kernel_sinf+0x70>
 80078c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80078c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007920 <__kernel_sinf+0x74>
 80078cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007924 <__kernel_sinf+0x78>
 80078d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80078d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007928 <__kernel_sinf+0x7c>
 80078d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80078dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800792c <__kernel_sinf+0x80>
 80078e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80078e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007930 <__kernel_sinf+0x84>
 80078e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80078ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80078f0:	b930      	cbnz	r0, 8007900 <__kernel_sinf+0x54>
 80078f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007934 <__kernel_sinf+0x88>
 80078f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80078fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80078fe:	4770      	bx	lr
 8007900:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007904:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007908:	eee0 7a86 	vfma.f32	s15, s1, s12
 800790c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007910:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007938 <__kernel_sinf+0x8c>
 8007914:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007918:	ee30 0a60 	vsub.f32	s0, s0, s1
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	2f2ec9d3 	.word	0x2f2ec9d3
 8007924:	b2d72f34 	.word	0xb2d72f34
 8007928:	3638ef1b 	.word	0x3638ef1b
 800792c:	b9500d01 	.word	0xb9500d01
 8007930:	3c088889 	.word	0x3c088889
 8007934:	be2aaaab 	.word	0xbe2aaaab
 8007938:	3e2aaaab 	.word	0x3e2aaaab

0800793c <matherr>:
 800793c:	2000      	movs	r0, #0
 800793e:	4770      	bx	lr

08007940 <fabsf>:
 8007940:	ee10 3a10 	vmov	r3, s0
 8007944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007948:	ee00 3a10 	vmov	s0, r3
 800794c:	4770      	bx	lr

0800794e <finitef>:
 800794e:	ee10 3a10 	vmov	r3, s0
 8007952:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007956:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800795a:	bfac      	ite	ge
 800795c:	2000      	movge	r0, #0
 800795e:	2001      	movlt	r0, #1
 8007960:	4770      	bx	lr
	...

08007964 <nanf>:
 8007964:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800796c <nanf+0x8>
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	7fc00000 	.word	0x7fc00000

08007970 <scalbnf>:
 8007970:	b508      	push	{r3, lr}
 8007972:	ee10 2a10 	vmov	r2, s0
 8007976:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800797a:	ed2d 8b02 	vpush	{d8}
 800797e:	eef0 0a40 	vmov.f32	s1, s0
 8007982:	d004      	beq.n	800798e <scalbnf+0x1e>
 8007984:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007988:	d306      	bcc.n	8007998 <scalbnf+0x28>
 800798a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800798e:	ecbd 8b02 	vpop	{d8}
 8007992:	eeb0 0a60 	vmov.f32	s0, s1
 8007996:	bd08      	pop	{r3, pc}
 8007998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800799c:	d21c      	bcs.n	80079d8 <scalbnf+0x68>
 800799e:	4b1f      	ldr	r3, [pc, #124]	; (8007a1c <scalbnf+0xac>)
 80079a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007a20 <scalbnf+0xb0>
 80079a4:	4298      	cmp	r0, r3
 80079a6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80079aa:	db10      	blt.n	80079ce <scalbnf+0x5e>
 80079ac:	ee10 2a90 	vmov	r2, s1
 80079b0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80079b4:	3b19      	subs	r3, #25
 80079b6:	4403      	add	r3, r0
 80079b8:	2bfe      	cmp	r3, #254	; 0xfe
 80079ba:	dd0f      	ble.n	80079dc <scalbnf+0x6c>
 80079bc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007a24 <scalbnf+0xb4>
 80079c0:	eeb0 0a48 	vmov.f32	s0, s16
 80079c4:	f000 f834 	bl	8007a30 <copysignf>
 80079c8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80079cc:	e7df      	b.n	800798e <scalbnf+0x1e>
 80079ce:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007a28 <scalbnf+0xb8>
 80079d2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80079d6:	e7da      	b.n	800798e <scalbnf+0x1e>
 80079d8:	0ddb      	lsrs	r3, r3, #23
 80079da:	e7ec      	b.n	80079b6 <scalbnf+0x46>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dd06      	ble.n	80079ee <scalbnf+0x7e>
 80079e0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80079e4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80079e8:	ee00 3a90 	vmov	s1, r3
 80079ec:	e7cf      	b.n	800798e <scalbnf+0x1e>
 80079ee:	f113 0f16 	cmn.w	r3, #22
 80079f2:	da06      	bge.n	8007a02 <scalbnf+0x92>
 80079f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80079f8:	4298      	cmp	r0, r3
 80079fa:	dcdf      	bgt.n	80079bc <scalbnf+0x4c>
 80079fc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007a28 <scalbnf+0xb8>
 8007a00:	e7de      	b.n	80079c0 <scalbnf+0x50>
 8007a02:	3319      	adds	r3, #25
 8007a04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007a08:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007a0c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007a2c <scalbnf+0xbc>
 8007a10:	ee07 3a10 	vmov	s14, r3
 8007a14:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007a18:	e7b9      	b.n	800798e <scalbnf+0x1e>
 8007a1a:	bf00      	nop
 8007a1c:	ffff3cb0 	.word	0xffff3cb0
 8007a20:	4c000000 	.word	0x4c000000
 8007a24:	7149f2ca 	.word	0x7149f2ca
 8007a28:	0da24260 	.word	0x0da24260
 8007a2c:	33000000 	.word	0x33000000

08007a30 <copysignf>:
 8007a30:	ee10 3a10 	vmov	r3, s0
 8007a34:	ee10 2a90 	vmov	r2, s1
 8007a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a3c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007a40:	4313      	orrs	r3, r2
 8007a42:	ee00 3a10 	vmov	s0, r3
 8007a46:	4770      	bx	lr

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
