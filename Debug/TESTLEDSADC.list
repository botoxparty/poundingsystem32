
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d4  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008028  08008028  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08008028  08008028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008030  08008030  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008030  08008030  00018030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008038  08008038  00018038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800803c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  20000110  0800814c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012e8  0800814c  000212e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027cf1  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055ec  00000000  00000000  00047e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e05d  00000000  00000000  0004d41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000011d0  00000000  00000000  0005b480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016e0  00000000  00000000  0005c650  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000284d9  00000000  00000000  0005dd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001508d  00000000  00000000  00086209  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000cd377  00000000  00000000  0009b296  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016860d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004168  00000000  00000000  00168688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800663c 	.word	0x0800663c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800663c 	.word	0x0800663c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <_ZN3LCD10invertTextEb>:
        write(LCD_DISPLAY_NORMAL, LCD_COMMAND);
    }
}
void LCD::invertText(bool mode)
{
    display.inverttext = mode;
 8000f38:	f880 11fc 	strb.w	r1, [r0, #508]	; 0x1fc
}
 8000f3c:	4770      	bx	lr

08000f3e <_ZN3LCD4sendEh>:
void LCD::setFont(const uint8_t *f)
{
}

void LCD::send(uint8_t val)
{
 8000f3e:	b510      	push	{r4, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	ac02      	add	r4, sp, #8
 8000f44:	f804 1d01 	strb.w	r1, [r4, #-1]!
    HAL_SPI_Transmit(gpio->SPICH, &val, 0x01, 1000);
 8000f48:	6800      	ldr	r0, [r0, #0]
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4621      	mov	r1, r4
 8000f52:	6980      	ldr	r0, [r0, #24]
 8000f54:	f002 fe05 	bl	8003b62 <HAL_SPI_Transmit>
};
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd10      	pop	{r4, pc}

08000f5c <_ZN3LCD5writeEhh>:
void LCD::write(uint8_t data, uint8_t mode)
{
 8000f5c:	b538      	push	{r3, r4, r5, lr}
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460d      	mov	r5, r1
    if (mode == LCD_COMMAND)
 8000f62:	b1b2      	cbz	r2, 8000f92 <_ZN3LCD5writeEhh+0x36>
        send(data);
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
    }
    else
    {
        HAL_GPIO_WritePin(gpio->DCPORT, gpio->DCPIN, GPIO_PIN_SET);
 8000f64:	6803      	ldr	r3, [r0, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	8999      	ldrh	r1, [r3, #12]
 8000f6a:	6898      	ldr	r0, [r3, #8]
 8000f6c:	f001 fcc2 	bl	80028f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_RESET);
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	8899      	ldrh	r1, [r3, #4]
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	f001 fcbc 	bl	80028f4 <HAL_GPIO_WritePin>
        send(data);
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f7ff ffdd 	bl	8000f3e <_ZN3LCD4sendEh>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	2201      	movs	r2, #1
 8000f88:	8899      	ldrh	r1, [r3, #4]
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f001 fcb2 	bl	80028f4 <HAL_GPIO_WritePin>
    }
}
 8000f90:	bd38      	pop	{r3, r4, r5, pc}
        HAL_GPIO_WritePin(gpio->DCPORT, gpio->DCPIN, GPIO_PIN_RESET);
 8000f92:	6803      	ldr	r3, [r0, #0]
 8000f94:	8999      	ldrh	r1, [r3, #12]
 8000f96:	6898      	ldr	r0, [r3, #8]
 8000f98:	f001 fcac 	bl	80028f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_RESET);
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	8899      	ldrh	r1, [r3, #4]
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	f001 fca6 	bl	80028f4 <HAL_GPIO_WritePin>
        send(data);
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff ffc7 	bl	8000f3e <_ZN3LCD4sendEh>
        HAL_GPIO_WritePin(gpio->CEPORT, gpio->CEPIN, GPIO_PIN_SET);
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	8899      	ldrh	r1, [r3, #4]
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	f001 fc9c 	bl	80028f4 <HAL_GPIO_WritePin>
 8000fbc:	e7e8      	b.n	8000f90 <_ZN3LCD5writeEhh+0x34>

08000fbe <_ZN3LCD6clrScrEv>:
{
 8000fbe:	b538      	push	{r3, r4, r5, lr}
 8000fc0:	4605      	mov	r5, r0
    for (int i = 0; i < 504; i++)
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8000fc8:	da09      	bge.n	8000fde <_ZN3LCD6clrScrEv+0x20>
        write(0x00, LCD_DATA);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4628      	mov	r0, r5
 8000fd0:	f7ff ffc4 	bl	8000f5c <_ZN3LCD5writeEhh>
        display.buffer[i] = 0;
 8000fd4:	192b      	adds	r3, r5, r4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 504; i++)
 8000fda:	3401      	adds	r4, #1
 8000fdc:	e7f2      	b.n	8000fc4 <_ZN3LCD6clrScrEv+0x6>
}
 8000fde:	bd38      	pop	{r3, r4, r5, pc}

08000fe0 <_ZN3LCD4goXYEhh>:
{
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	4615      	mov	r5, r2
    write(0x80 | x, LCD_COMMAND); //Column.
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000fec:	f7ff ffb6 	bl	8000f5c <_ZN3LCD5writeEhh>
    write(0x40 | y, LCD_COMMAND); //Row.
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f7ff ffb0 	bl	8000f5c <_ZN3LCD5writeEhh>
};
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
	...

08001000 <_ZN3LCD7putCharEc>:
{
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	4605      	mov	r5, r0
 8001004:	460e      	mov	r6, r1
    for (int i = 0; i < 6; i++)
 8001006:	2400      	movs	r4, #0
 8001008:	e00e      	b.n	8001028 <_ZN3LCD7putCharEc+0x28>
            write(~(ASCII[c - 0x20][i]), LCD_DATA);
 800100a:	f1a6 0320 	sub.w	r3, r6, #32
 800100e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001012:	005a      	lsls	r2, r3, #1
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <_ZN3LCD7putCharEc+0x50>)
 8001016:	4413      	add	r3, r2
 8001018:	5d19      	ldrb	r1, [r3, r4]
 800101a:	43c9      	mvns	r1, r1
 800101c:	2201      	movs	r2, #1
 800101e:	b2c9      	uxtb	r1, r1
 8001020:	4628      	mov	r0, r5
 8001022:	f7ff ff9b 	bl	8000f5c <_ZN3LCD5writeEhh>
    for (int i = 0; i < 6; i++)
 8001026:	3401      	adds	r4, #1
 8001028:	2c05      	cmp	r4, #5
 800102a:	dc10      	bgt.n	800104e <_ZN3LCD7putCharEc+0x4e>
        if (display.inverttext != true)
 800102c:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ea      	bne.n	800100a <_ZN3LCD7putCharEc+0xa>
            write(ASCII[c - 0x20][i], LCD_DATA);
 8001034:	f1a6 0320 	sub.w	r3, r6, #32
 8001038:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800103c:	005a      	lsls	r2, r3, #1
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <_ZN3LCD7putCharEc+0x50>)
 8001040:	4413      	add	r3, r2
 8001042:	2201      	movs	r2, #1
 8001044:	5d19      	ldrb	r1, [r3, r4]
 8001046:	4628      	mov	r0, r5
 8001048:	f7ff ff88 	bl	8000f5c <_ZN3LCD5writeEhh>
 800104c:	e7eb      	b.n	8001026 <_ZN3LCD7putCharEc+0x26>
}
 800104e:	bd70      	pop	{r4, r5, r6, pc}
 8001050:	08006654 	.word	0x08006654

08001054 <_ZN3LCD5printEPchh>:
{
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4605      	mov	r5, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4611      	mov	r1, r2
    goXY(x, y);
 800105c:	461a      	mov	r2, r3
 800105e:	f7ff ffbf 	bl	8000fe0 <_ZN3LCD4goXYEhh>
    while (*str)
 8001062:	7821      	ldrb	r1, [r4, #0]
 8001064:	b121      	cbz	r1, 8001070 <_ZN3LCD5printEPchh+0x1c>
        putChar(*str++);
 8001066:	3401      	adds	r4, #1
 8001068:	4628      	mov	r0, r5
 800106a:	f7ff ffc9 	bl	8001000 <_ZN3LCD7putCharEc>
    while (*str)
 800106e:	e7f8      	b.n	8001062 <_ZN3LCD5printEPchh+0xe>
};
 8001070:	bd38      	pop	{r3, r4, r5, pc}

08001072 <_ZN3LCD4initEv>:
{
 8001072:	b510      	push	{r4, lr}
 8001074:	4604      	mov	r4, r0
    write(0x21, LCD_COMMAND);               //LCD extended commands.
 8001076:	2200      	movs	r2, #0
 8001078:	2121      	movs	r1, #33	; 0x21
 800107a:	f7ff ff6f 	bl	8000f5c <_ZN3LCD5writeEhh>
    write(0xBE, LCD_COMMAND);               //set LCD Vop(Contrast).
 800107e:	2200      	movs	r2, #0
 8001080:	21be      	movs	r1, #190	; 0xbe
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff ff6a 	bl	8000f5c <_ZN3LCD5writeEhh>
    write(0x04, LCD_COMMAND);               //set temp coefficent.
 8001088:	2200      	movs	r2, #0
 800108a:	2104      	movs	r1, #4
 800108c:	4620      	mov	r0, r4
 800108e:	f7ff ff65 	bl	8000f5c <_ZN3LCD5writeEhh>
    write(0x14, LCD_COMMAND);               //LCD bias mode 1:40.
 8001092:	2200      	movs	r2, #0
 8001094:	2114      	movs	r1, #20
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff ff60 	bl	8000f5c <_ZN3LCD5writeEhh>
    write(0x20, LCD_COMMAND);               //LCD basic commands.
 800109c:	2200      	movs	r2, #0
 800109e:	2120      	movs	r1, #32
 80010a0:	4620      	mov	r0, r4
 80010a2:	f7ff ff5b 	bl	8000f5c <_ZN3LCD5writeEhh>
    write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 80010a6:	2200      	movs	r2, #0
 80010a8:	210c      	movs	r1, #12
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff ff56 	bl	8000f5c <_ZN3LCD5writeEhh>
    clrScr();
 80010b0:	4620      	mov	r0, r4
 80010b2:	f7ff ff84 	bl	8000fbe <_ZN3LCD6clrScrEv>
    display.inverttext = false;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80010bc:	bd10      	pop	{r4, pc}

080010be <_ZN3LCDC1EP8LCD_GPIO>:
LCD::LCD(LCD_GPIO *hgpio)
 80010be:	b510      	push	{r4, lr}
 80010c0:	4604      	mov	r4, r0
 80010c2:	460b      	mov	r3, r1
    gpio = hgpio;
 80010c4:	6021      	str	r1, [r4, #0]
    HAL_GPIO_WritePin(gpio->BLPORT, gpio->BLPIN, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	8a89      	ldrh	r1, [r1, #20]
 80010ca:	6918      	ldr	r0, [r3, #16]
 80010cc:	f001 fc12 	bl	80028f4 <HAL_GPIO_WritePin>
    init();
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ffce 	bl	8001072 <_ZN3LCD4initEv>
}
 80010d6:	4620      	mov	r0, r4
 80010d8:	bd10      	pop	{r4, pc}

080010da <_ZN3LCD10refreshScrEv>:
void LCD::refreshScr()
{
 80010da:	b570      	push	{r4, r5, r6, lr}
 80010dc:	4605      	mov	r5, r0
    goXY(LCD_SETXADDR, LCD_SETYADDR);
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	f7ff ff7d 	bl	8000fe0 <_ZN3LCD4goXYEhh>
    for (int i = 0; i < 6; i++)
 80010e6:	2600      	movs	r6, #0
 80010e8:	e000      	b.n	80010ec <_ZN3LCD10refreshScrEv+0x12>
 80010ea:	3601      	adds	r6, #1
 80010ec:	2e05      	cmp	r6, #5
 80010ee:	dc0d      	bgt.n	800110c <_ZN3LCD10refreshScrEv+0x32>
    {
        for (int j = 0; j < LCD_WIDTH; j++)
 80010f0:	2400      	movs	r4, #0
 80010f2:	2c53      	cmp	r4, #83	; 0x53
 80010f4:	dcf9      	bgt.n	80010ea <_ZN3LCD10refreshScrEv+0x10>
        {
            write(display.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 80010f6:	2354      	movs	r3, #84	; 0x54
 80010f8:	fb03 4306 	mla	r3, r3, r6, r4
 80010fc:	442b      	add	r3, r5
 80010fe:	2201      	movs	r2, #1
 8001100:	7919      	ldrb	r1, [r3, #4]
 8001102:	4628      	mov	r0, r5
 8001104:	f7ff ff2a 	bl	8000f5c <_ZN3LCD5writeEhh>
        for (int j = 0; j < LCD_WIDTH; j++)
 8001108:	3401      	adds	r4, #1
 800110a:	e7f2      	b.n	80010f2 <_ZN3LCD10refreshScrEv+0x18>
        }
    }
};
 800110c:	bd70      	pop	{r4, r5, r6, pc}

0800110e <_ZN3LCD9drawHLineEiii>:

void LCD::drawHLine(int x, int y, int l)
{
    int by, bi;

    if ((x >= 0) && (x < LCD_WIDTH) && (y >= 0) && (y < LCD_HEIGHT))
 800110e:	2953      	cmp	r1, #83	; 0x53
 8001110:	d823      	bhi.n	800115a <_ZN3LCD9drawHLineEiii+0x4c>
 8001112:	2a00      	cmp	r2, #0
 8001114:	db21      	blt.n	800115a <_ZN3LCD9drawHLineEiii+0x4c>
 8001116:	2a2f      	cmp	r2, #47	; 0x2f
 8001118:	dc1f      	bgt.n	800115a <_ZN3LCD9drawHLineEiii+0x4c>
{
 800111a:	b4f0      	push	{r4, r5, r6, r7}
    {
        for (int cx = 0; cx < l; cx++)
 800111c:	2500      	movs	r5, #0
 800111e:	e013      	b.n	8001148 <_ZN3LCD9drawHLineEiii+0x3a>
        {
            by = ((y / 8) * 84) + x;
 8001120:	10e4      	asrs	r4, r4, #3
 8001122:	2654      	movs	r6, #84	; 0x54
 8001124:	fb06 1404 	mla	r4, r6, r4, r1
            bi = y % 8;
 8001128:	4256      	negs	r6, r2
 800112a:	f002 0707 	and.w	r7, r2, #7
 800112e:	f006 0607 	and.w	r6, r6, #7
 8001132:	bf58      	it	pl
 8001134:	4277      	negpl	r7, r6
            display.buffer[by + cx] |= (1 << bi);
 8001136:	442c      	add	r4, r5
 8001138:	2601      	movs	r6, #1
 800113a:	fa06 f707 	lsl.w	r7, r6, r7
 800113e:	4404      	add	r4, r0
 8001140:	7926      	ldrb	r6, [r4, #4]
 8001142:	433e      	orrs	r6, r7
 8001144:	7126      	strb	r6, [r4, #4]
        for (int cx = 0; cx < l; cx++)
 8001146:	3501      	adds	r5, #1
 8001148:	429d      	cmp	r5, r3
 800114a:	da04      	bge.n	8001156 <_ZN3LCD9drawHLineEiii+0x48>
            by = ((y / 8) * 84) + x;
 800114c:	4614      	mov	r4, r2
 800114e:	2a00      	cmp	r2, #0
 8001150:	dae6      	bge.n	8001120 <_ZN3LCD9drawHLineEiii+0x12>
 8001152:	1dd4      	adds	r4, r2, #7
 8001154:	e7e4      	b.n	8001120 <_ZN3LCD9drawHLineEiii+0x12>
        }
    }
};
 8001156:	bcf0      	pop	{r4, r5, r6, r7}
 8001158:	4770      	bx	lr
 800115a:	4770      	bx	lr

0800115c <_ZN10AudioCodec8Read_RegEh>:
}

uint16_t AudioCodec::Read_Reg(uint8_t reg)
{
    return WM8978_REGVAL[reg];
}
 800115c:	4b01      	ldr	r3, [pc, #4]	; (8001164 <_ZN10AudioCodec8Read_RegEh+0x8>)
 800115e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001162:	4770      	bx	lr
 8001164:	20000000 	.word	0x20000000

08001168 <_ZN10AudioCodec9Write_RegEht>:

uint8_t AudioCodec::Write_Reg(uint8_t reg, uint16_t val)
{
 8001168:	b530      	push	{r4, r5, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	460d      	mov	r5, r1
 800116e:	4614      	mov	r4, r2
    uint8_t res;
    uint8_t RegAddr;
    uint8_t RegValue;
    RegAddr = (reg << 1) | ((uint8_t)((val >> 8) & 0x01)); //reg address + data highest bit
 8001170:	f3c2 2300 	ubfx	r3, r2, #8, #1
 8001174:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

    HAL_StatusTypeDef status = HAL_OK;
    uint8_t data[2];

    //     /* Assemble 2-byte data in WM8731 format */
    data[0] = RegAddr;  // 0x0C in your example
 8001178:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = RegValue; // MSB byte of 16bit data
 800117c:	f88d 200d 	strb.w	r2, [sp, #13]

    status = HAL_I2C_Master_Transmit(i2c, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 8001180:	6840      	ldr	r0, [r0, #4]
 8001182:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2302      	movs	r3, #2
 800118a:	aa03      	add	r2, sp, #12
 800118c:	2134      	movs	r1, #52	; 0x34
 800118e:	f001 fd41 	bl	8002c14 <HAL_I2C_Master_Transmit>
                                                                                       //     /* Check the communication status */
    if (status != HAL_OK)
 8001192:	b928      	cbnz	r0, 80011a0 <_ZN10AudioCodec9Write_RegEht+0x38>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
        // Error handling, for example re-initialization of the I2C peripheral
        // Error_Handler();
    }

    WM8978_REGVAL[reg] = val;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <_ZN10AudioCodec9Write_RegEht+0x48>)
 8001196:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
    return res;
}
 800119a:	2000      	movs	r0, #0
 800119c:	b005      	add	sp, #20
 800119e:	bd30      	pop	{r4, r5, pc}
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <_ZN10AudioCodec9Write_RegEht+0x4c>)
 80011a8:	f001 fba4 	bl	80028f4 <HAL_GPIO_WritePin>
 80011ac:	e7f2      	b.n	8001194 <_ZN10AudioCodec9Write_RegEht+0x2c>
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000
 80011b4:	40020800 	.word	0x40020800

080011b8 <_ZN10AudioCodec8ADDA_CfgEhh>:
    HAL_I2S_Transmit_DMA(i2s, (uint16_t *)&audiobuff[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
    return 0;
}

void AudioCodec::ADDA_Cfg(uint8_t dacen, uint8_t adcen)
{
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	4604      	mov	r4, r0
 80011bc:	460e      	mov	r6, r1
 80011be:	4615      	mov	r5, r2
    uint16_t regval;
    regval = Read_Reg(3); //read R3
 80011c0:	2103      	movs	r1, #3
 80011c2:	f7ff ffcb 	bl	800115c <_ZN10AudioCodec8Read_RegEh>
    if (dacen)
 80011c6:	b19e      	cbz	r6, 80011f0 <_ZN10AudioCodec8ADDA_CfgEhh+0x38>
        regval |= 3 << 0; //R3 set lowest 2 bits to 1,enable DACR&DACL
 80011c8:	f040 0203 	orr.w	r2, r0, #3
 80011cc:	b292      	uxth	r2, r2
    else
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
    Write_Reg(3, regval);
 80011ce:	2103      	movs	r1, #3
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff ffc9 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(2); //read R2
 80011d6:	2102      	movs	r1, #2
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff ffbf 	bl	800115c <_ZN10AudioCodec8Read_RegEh>
    if (adcen)
 80011de:	b95d      	cbnz	r5, 80011f8 <_ZN10AudioCodec8ADDA_CfgEhh+0x40>
        regval |= 3 << 0; //R2 set lowest bits to 1, enable ADCR&ADCL
    else
        regval &= ~(3 << 0); //R2 set lowest bits to 0, disable ADCR&ADCL.
 80011e0:	f020 0203 	bic.w	r2, r0, #3
 80011e4:	b292      	uxth	r2, r2
    Write_Reg(2, regval);    //R2
 80011e6:	2102      	movs	r1, #2
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff ffbd 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
}
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
 80011f0:	f020 0203 	bic.w	r2, r0, #3
 80011f4:	b292      	uxth	r2, r2
 80011f6:	e7ea      	b.n	80011ce <_ZN10AudioCodec8ADDA_CfgEhh+0x16>
        regval |= 3 << 0; //R2 set lowest bits to 1, enable ADCR&ADCL
 80011f8:	f040 0203 	orr.w	r2, r0, #3
 80011fc:	b292      	uxth	r2, r2
 80011fe:	e7f2      	b.n	80011e6 <_ZN10AudioCodec8ADDA_CfgEhh+0x2e>

08001200 <_ZN10AudioCodec11LINEIN_GainEh>:
}

//WM8978 L2/R2(Line In)db config(L2/R2-->ADC input db)
//gain:0~7,0 means channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void AudioCodec::LINEIN_Gain(uint8_t gain)
{
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4605      	mov	r5, r0
    uint16_t regval;
    gain &= 0X07;
 8001204:	f001 0407 	and.w	r4, r1, #7
    regval = Read_Reg(47);
 8001208:	212f      	movs	r1, #47	; 0x2f
 800120a:	f7ff ffa7 	bl	800115c <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 4); //reset old config
 800120e:	f020 0270 	bic.w	r2, r0, #112	; 0x70
 8001212:	b292      	uxth	r2, r2
    Write_Reg(47, regval | gain << 4);
 8001214:	0124      	lsls	r4, r4, #4
 8001216:	4322      	orrs	r2, r4
 8001218:	212f      	movs	r1, #47	; 0x2f
 800121a:	4628      	mov	r0, r5
 800121c:	f7ff ffa4 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(48);
 8001220:	2130      	movs	r1, #48	; 0x30
 8001222:	4628      	mov	r0, r5
 8001224:	f7ff ff9a 	bl	800115c <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 4); //reset old config
 8001228:	f020 0270 	bic.w	r2, r0, #112	; 0x70
 800122c:	b292      	uxth	r2, r2
    Write_Reg(48, regval | gain << 4);
 800122e:	4322      	orrs	r2, r4
 8001230:	2130      	movs	r1, #48	; 0x30
 8001232:	4628      	mov	r0, r5
 8001234:	f7ff ff98 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
}
 8001238:	bd38      	pop	{r3, r4, r5, pc}

0800123a <_ZN10AudioCodec8AUX_GainEh>:
//WM8978 AUXR,AUXL(PWM audio config)db config(AUXR/L-->ADC input db)
//gain:0~7,0 channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void AudioCodec::AUX_Gain(uint8_t gain)
{
 800123a:	b538      	push	{r3, r4, r5, lr}
 800123c:	4605      	mov	r5, r0
    uint16_t regval;
    gain &= 0X07;
 800123e:	f001 0407 	and.w	r4, r1, #7
    regval = Read_Reg(47);
 8001242:	212f      	movs	r1, #47	; 0x2f
 8001244:	f7ff ff8a 	bl	800115c <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 0); //reset old config
 8001248:	f020 0207 	bic.w	r2, r0, #7
 800124c:	b292      	uxth	r2, r2
    Write_Reg(47, regval | gain << 0);
 800124e:	b2a4      	uxth	r4, r4
 8001250:	4322      	orrs	r2, r4
 8001252:	212f      	movs	r1, #47	; 0x2f
 8001254:	4628      	mov	r0, r5
 8001256:	f7ff ff87 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(48);
 800125a:	2130      	movs	r1, #48	; 0x30
 800125c:	4628      	mov	r0, r5
 800125e:	f7ff ff7d 	bl	800115c <_ZN10AudioCodec8Read_RegEh>
    regval &= ~(7 << 0); //reset old config
 8001262:	f020 0207 	bic.w	r2, r0, #7
 8001266:	b292      	uxth	r2, r2
    Write_Reg(48, regval | gain << 0);
 8001268:	4322      	orrs	r2, r4
 800126a:	2130      	movs	r1, #48	; 0x30
 800126c:	4628      	mov	r0, r5
 800126e:	f7ff ff7b 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
}
 8001272:	bd38      	pop	{r3, r4, r5, pc}

08001274 <_ZN10AudioCodec9Input_CfgEhhh>:
{
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	4604      	mov	r4, r0
 8001278:	460f      	mov	r7, r1
 800127a:	4616      	mov	r6, r2
 800127c:	461d      	mov	r5, r3
    regval = Read_Reg(2);
 800127e:	2102      	movs	r1, #2
 8001280:	f7ff ff6c 	bl	800115c <_ZN10AudioCodec8Read_RegEh>
    if (micen)
 8001284:	b1ef      	cbz	r7, 80012c2 <_ZN10AudioCodec9Input_CfgEhhh+0x4e>
        regval |= 3 << 2; //open INPPGAENR,INPPGAENL(MIC��PGA�Ŵ�)
 8001286:	f040 020c 	orr.w	r2, r0, #12
 800128a:	b292      	uxth	r2, r2
    Write_Reg(2, regval);
 800128c:	2102      	movs	r1, #2
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff ff6a 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    regval = Read_Reg(44);
 8001294:	212c      	movs	r1, #44	; 0x2c
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff ff60 	bl	800115c <_ZN10AudioCodec8Read_RegEh>
    if (micen)
 800129c:	b1af      	cbz	r7, 80012ca <_ZN10AudioCodec9Input_CfgEhhh+0x56>
        regval |= 3 << 4 | 3 << 0; //enable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 800129e:	f040 0233 	orr.w	r2, r0, #51	; 0x33
 80012a2:	b292      	uxth	r2, r2
    Write_Reg(44, regval);
 80012a4:	212c      	movs	r1, #44	; 0x2c
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ff5e 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    if (lineinen)
 80012ac:	b18e      	cbz	r6, 80012d2 <_ZN10AudioCodec9Input_CfgEhhh+0x5e>
        LINEIN_Gain(5); //LINE IN 0dB
 80012ae:	2105      	movs	r1, #5
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff ffa5 	bl	8001200 <_ZN10AudioCodec11LINEIN_GainEh>
    if (auxen)
 80012b6:	b98d      	cbnz	r5, 80012dc <_ZN10AudioCodec9Input_CfgEhhh+0x68>
        AUX_Gain(0); //disable AUX input
 80012b8:	2100      	movs	r1, #0
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff ffbd 	bl	800123a <_ZN10AudioCodec8AUX_GainEh>
}
 80012c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        regval &= ~(3 << 2); //close INPPGAENR,INPPGAENL.
 80012c2:	f020 020c 	bic.w	r2, r0, #12
 80012c6:	b292      	uxth	r2, r2
 80012c8:	e7e0      	b.n	800128c <_ZN10AudioCodec9Input_CfgEhhh+0x18>
        regval &= ~(3 << 4 | 3 << 0); //disable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 80012ca:	f020 0233 	bic.w	r2, r0, #51	; 0x33
 80012ce:	b292      	uxth	r2, r2
 80012d0:	e7e8      	b.n	80012a4 <_ZN10AudioCodec9Input_CfgEhhh+0x30>
        LINEIN_Gain(0); //disable LINE IN
 80012d2:	2100      	movs	r1, #0
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff ff93 	bl	8001200 <_ZN10AudioCodec11LINEIN_GainEh>
 80012da:	e7ec      	b.n	80012b6 <_ZN10AudioCodec9Input_CfgEhhh+0x42>
        AUX_Gain(7); //AUX 6dB
 80012dc:	2107      	movs	r1, #7
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff ffab 	bl	800123a <_ZN10AudioCodec8AUX_GainEh>
 80012e4:	e7ec      	b.n	80012c0 <_ZN10AudioCodec9Input_CfgEhhh+0x4c>

080012e6 <_ZN10AudioCodec10Output_CfgEhh>:

//WM8978 output setting
//dacen:DAC output enabled(1)/disabled(0)
//bpsen:Bypass output(record,include MIC,LINE IN,AUX��) enabled(1)/disabled(0)
void AudioCodec::Output_Cfg(uint8_t dacen, uint8_t bpsen)
{
 80012e6:	b538      	push	{r3, r4, r5, lr}
 80012e8:	4605      	mov	r5, r0
    uint16_t regval = 0;
    if (dacen)
 80012ea:	b971      	cbnz	r1, 800130a <_ZN10AudioCodec10Output_CfgEhh+0x24>
    uint16_t regval = 0;
 80012ec:	2400      	movs	r4, #0
        regval |= 1 << 0; //DAC output enabled
    if (bpsen)
 80012ee:	b10a      	cbz	r2, 80012f4 <_ZN10AudioCodec10Output_CfgEhh+0xe>
    {
        regval |= 1 << 1; //BYPASS enabled
        regval |= 5 << 2; //0dB
 80012f0:	f044 0416 	orr.w	r4, r4, #22
    }
    Write_Reg(50, regval);
 80012f4:	4622      	mov	r2, r4
 80012f6:	2132      	movs	r1, #50	; 0x32
 80012f8:	4628      	mov	r0, r5
 80012fa:	f7ff ff35 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(51, regval);
 80012fe:	4622      	mov	r2, r4
 8001300:	2133      	movs	r1, #51	; 0x33
 8001302:	4628      	mov	r0, r5
 8001304:	f7ff ff30 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
}
 8001308:	bd38      	pop	{r3, r4, r5, pc}
        regval |= 1 << 0; //DAC output enabled
 800130a:	2401      	movs	r4, #1
 800130c:	e7ef      	b.n	80012ee <_ZN10AudioCodec10Output_CfgEhh+0x8>

0800130e <_ZN10AudioCodec9HPvol_SetEhh>:

//Headphone volume
void AudioCodec::HPvol_Set(uint8_t voll, uint8_t volr)
{
 800130e:	b538      	push	{r3, r4, r5, lr}
 8001310:	4605      	mov	r5, r0
    HP_Volume = voll;
 8001312:	7001      	strb	r1, [r0, #0]

    voll &= 0X3F;
    volr &= 0X3F;
 8001314:	f002 043f 	and.w	r4, r2, #63	; 0x3f
    if (voll == 0)
 8001318:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
 800131c:	d101      	bne.n	8001322 <_ZN10AudioCodec9HPvol_SetEhh+0x14>
        voll |= 1 << 6; //volume is 0, mute on
 800131e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    if (volr == 0)
 8001322:	b90c      	cbnz	r4, 8001328 <_ZN10AudioCodec9HPvol_SetEhh+0x1a>
        volr |= 1 << 6;             //volume is 0, mute on
 8001324:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    Write_Reg(52, voll);            //R52, left channel volume
 8001328:	2134      	movs	r1, #52	; 0x34
 800132a:	4628      	mov	r0, r5
 800132c:	f7ff ff1c 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(53, volr | (1 << 8)); //R53, right channel volume
 8001330:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 8001334:	2135      	movs	r1, #53	; 0x35
 8001336:	4628      	mov	r0, r5
 8001338:	f7ff ff16 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
}
 800133c:	bd38      	pop	{r3, r4, r5, pc}

0800133e <_ZN10AudioCodec10SPKvol_SetEh>:

//speaker volume
//voll:left channel volume(0~63)
void AudioCodec::SPKvol_Set(uint8_t volx)
{
 800133e:	b538      	push	{r3, r4, r5, lr}
 8001340:	4605      	mov	r5, r0
    SPK_Volume = volx;
 8001342:	7041      	strb	r1, [r0, #1]
    volx &= 0X3F;
    if (volx == 0)
 8001344:	f011 043f 	ands.w	r4, r1, #63	; 0x3f
 8001348:	d101      	bne.n	800134e <_ZN10AudioCodec10SPKvol_SetEh+0x10>
        volx |= 1 << 6;             //volume is 0, mute on
 800134a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    Write_Reg(54, volx);            //R54, left channel audio volume
 800134e:	4622      	mov	r2, r4
 8001350:	2136      	movs	r1, #54	; 0x36
 8001352:	4628      	mov	r0, r5
 8001354:	f7ff ff08 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(55, volx | (1 << 8)); //R55, right channel audio volume
 8001358:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 800135c:	2137      	movs	r1, #55	; 0x37
 800135e:	4628      	mov	r0, r5
 8001360:	f7ff ff02 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
}
 8001364:	bd38      	pop	{r3, r4, r5, pc}

08001366 <_ZN10AudioCodec7I2S_CfgEhh>:

//I2S working mode
//fmt:0,LSB;1,MSB;2,I2S;3,PCM/DSP;
//len:0,16bist;1,20bits;2,24bits;3,32bits;
void AudioCodec::I2S_Cfg(uint8_t fmt, uint8_t len)
{
 8001366:	b508      	push	{r3, lr}
    fmt &= 0x02;
 8001368:	f001 0102 	and.w	r1, r1, #2
    len &= 0x03;
 800136c:	f002 0203 	and.w	r2, r2, #3
    Write_Reg(4, (fmt << 3) | (len << 5)); //R4,WM8978 working mode
 8001370:	0152      	lsls	r2, r2, #5
 8001372:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001376:	2104      	movs	r1, #4
 8001378:	f7ff fef6 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
}
 800137c:	bd08      	pop	{r3, pc}
	...

08001380 <_ZN10AudioCodec4InitEv>:
{
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4604      	mov	r4, r0
    Res = Write_Reg(0, 0); //soft reset WM8978
 8001384:	2200      	movs	r2, #0
 8001386:	4611      	mov	r1, r2
 8001388:	f7ff feee 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    if (Res)
 800138c:	b110      	cbz	r0, 8001394 <_ZN10AudioCodec4InitEv+0x14>
        return 1; //reset failed, WM8978 exception
 800138e:	2501      	movs	r5, #1
}
 8001390:	4628      	mov	r0, r5
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	4605      	mov	r5, r0
    Write_Reg(1, 0X1B);  //R1,MICEN 1(MIC enabled),BIASEN 1(emu on),VMIDSEL[1:0]:11(5K) R1,MICEN设置为1(MIC使能)，BIASEN设置为1(模拟工作，VMIDSEL[1:0]设置为：11（5）)
 8001396:	221b      	movs	r2, #27
 8001398:	2101      	movs	r1, #1
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fee4 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(2, 0X1B0); //R2, ROUT1,LOUT1 output enabled(headphone),BOOSTENR,BOOSTENL enabled.
 80013a0:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80013a4:	2102      	movs	r1, #2
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7ff fede 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(3, 0X6C);  //R3, LOUT2,ROUT2 output enabled(speaker on),RMIX,LMIX enabled
 80013ac:	226c      	movs	r2, #108	; 0x6c
 80013ae:	2103      	movs	r1, #3
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff fed9 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(6, 0); //R6, MCLK from out
 80013b6:	2200      	movs	r2, #0
 80013b8:	2106      	movs	r1, #6
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff fed4 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(43, 1 << 4); //R43,INVROUT2 inverted, drive speaker
 80013c0:	2210      	movs	r2, #16
 80013c2:	212b      	movs	r1, #43	; 0x2b
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fecf 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(47, 1 << 8); //R47,PGABOOSTL,left MIC got 20 db
 80013ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ce:	212f      	movs	r1, #47	; 0x2f
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff fec9 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(48, 1 << 8); //R48,PGABOOSTR, right MIC got 20 db
 80013d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013da:	2130      	movs	r1, #48	; 0x30
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fec3 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(49, 1 << 1); //R49,TSDEN, open hot protecting
 80013e2:	2202      	movs	r2, #2
 80013e4:	2131      	movs	r1, #49	; 0x31
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff febe 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(10, 1 << 3); //R10,SOFTMUTE closed,128x sample rate, best SNR
 80013ec:	2208      	movs	r2, #8
 80013ee:	210a      	movs	r1, #10
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff feb9 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    Write_Reg(14, 1 << 3); //R14,ADC 128x sample rate
 80013f6:	2208      	movs	r2, #8
 80013f8:	210e      	movs	r1, #14
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff feb4 	bl	8001168 <_ZN10AudioCodec9Write_RegEht>
    ADDA_Cfg(1, 1);     //open DAC
 8001400:	2201      	movs	r2, #1
 8001402:	4611      	mov	r1, r2
 8001404:	4620      	mov	r0, r4
 8001406:	f7ff fed7 	bl	80011b8 <_ZN10AudioCodec8ADDA_CfgEhh>
    Input_Cfg(1, 0, 0); //close input channel
 800140a:	2300      	movs	r3, #0
 800140c:	461a      	mov	r2, r3
 800140e:	2101      	movs	r1, #1
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ff2f 	bl	8001274 <_ZN10AudioCodec9Input_CfgEhhh>
    Output_Cfg(1, 0);   //open DAC output
 8001416:	2200      	movs	r2, #0
 8001418:	2101      	movs	r1, #1
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff ff63 	bl	80012e6 <_ZN10AudioCodec10Output_CfgEhh>
    I2S_Cfg(2, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2102      	movs	r1, #2
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff ff9e 	bl	8001366 <_ZN10AudioCodec7I2S_CfgEhh>
    HPvol_Set(HP_Volume, HP_Volume);
 800142a:	7821      	ldrb	r1, [r4, #0]
 800142c:	460a      	mov	r2, r1
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff ff6d 	bl	800130e <_ZN10AudioCodec9HPvol_SetEhh>
    SPKvol_Set(SPK_Volume);
 8001434:	7861      	ldrb	r1, [r4, #1]
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff ff81 	bl	800133e <_ZN10AudioCodec10SPKvol_SetEh>
    HAL_I2S_Transmit_DMA(i2s, (uint16_t *)&audiobuff[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
 800143c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001440:	4902      	ldr	r1, [pc, #8]	; (800144c <_ZN10AudioCodec4InitEv+0xcc>)
 8001442:	68a0      	ldr	r0, [r4, #8]
 8001444:	f001 fd52 	bl	8002eec <HAL_I2S_Transmit_DMA>
    return 0;
 8001448:	e7a2      	b.n	8001390 <_ZN10AudioCodec4InitEv+0x10>
 800144a:	bf00      	nop
 800144c:	20000130 	.word	0x20000130

08001450 <_ZN10AudioCodecC1EP17I2C_HandleTypeDefP19__I2S_HandleTypeDef>:
AudioCodec::AudioCodec(I2C_HandleTypeDef *hi2c, I2S_HandleTypeDef *hi2s)
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
    i2c = hi2c;
 8001454:	6041      	str	r1, [r0, #4]
    i2s = hi2s;
 8001456:	6082      	str	r2, [r0, #8]
    Init();
 8001458:	f7ff ff92 	bl	8001380 <_ZN10AudioCodec4InitEv>
}
 800145c:	4620      	mov	r0, r4
 800145e:	bd10      	pop	{r4, pc}

08001460 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001460:	2801      	cmp	r0, #1
 8001462:	d000      	beq.n	8001466 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8001464:	4770      	bx	lr
 8001466:	b508      	push	{r3, lr}
 8001468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146c:	4299      	cmp	r1, r3
 800146e:	d000      	beq.n	8001472 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8001470:	bd08      	pop	{r3, pc}
Synth *synth = Synth::getInstance();
 8001472:	f002 fed9 	bl	8004228 <_ZN5Synth11getInstanceEv>
 8001476:	4b01      	ldr	r3, [pc, #4]	; (800147c <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 8001478:	6018      	str	r0, [r3, #0]
 800147a:	e7f9      	b.n	8001470 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800147c:	200010d8 	.word	0x200010d8

08001480 <maincpp>:
{
 8001480:	b500      	push	{lr}
 8001482:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8001486:	4606      	mov	r6, r0
  LCD lcd(lcdGpio);
 8001488:	4611      	mov	r1, r2
 800148a:	a806      	add	r0, sp, #24
 800148c:	f7ff fe17 	bl	80010be <_ZN3LCDC1EP8LCD_GPIO>
  MenuSystem m(&lcd);
 8001490:	ad05      	add	r5, sp, #20
 8001492:	a906      	add	r1, sp, #24
 8001494:	4628      	mov	r0, r5
 8001496:	f000 f8b5 	bl	8001604 <_ZN10MenuSystemC1EP3LCD>
  menu = &m;
 800149a:	4c07      	ldr	r4, [pc, #28]	; (80014b8 <maincpp+0x38>)
 800149c:	6025      	str	r5, [r4, #0]
  AudioCodec a(comms->i2c, comms->i2s);
 800149e:	ad01      	add	r5, sp, #4
 80014a0:	6872      	ldr	r2, [r6, #4]
 80014a2:	6831      	ldr	r1, [r6, #0]
 80014a4:	4628      	mov	r0, r5
 80014a6:	f7ff ffd3 	bl	8001450 <_ZN10AudioCodecC1EP17I2C_HandleTypeDefP19__I2S_HandleTypeDef>
  audio = &a;
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <maincpp+0x3c>)
 80014ac:	601d      	str	r5, [r3, #0]
  menu->MainMenu();
 80014ae:	6820      	ldr	r0, [r4, #0]
 80014b0:	f000 f8aa 	bl	8001608 <_ZN10MenuSystem8MainMenuEv>
 80014b4:	e7fe      	b.n	80014b4 <maincpp+0x34>
 80014b6:	bf00      	nop
 80014b8:	200010d0 	.word	0x200010d0
 80014bc:	2000012c 	.word	0x2000012c

080014c0 <HAL_I2S_TxCpltCallback>:
{
 80014c0:	b508      	push	{r3, lr}
  if (hi2s->Instance == SPI2)
 80014c2:	6802      	ldr	r2, [r0, #0]
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_I2S_TxCpltCallback+0x1c>)
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d000      	beq.n	80014cc <HAL_I2S_TxCpltCallback+0xc>
}
 80014ca:	bd08      	pop	{r3, pc}
    synth->make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
 80014cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014d0:	4903      	ldr	r1, [pc, #12]	; (80014e0 <HAL_I2S_TxCpltCallback+0x20>)
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <HAL_I2S_TxCpltCallback+0x24>)
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	f002 fecb 	bl	8004270 <_ZN5Synth10make_soundEPtt>
}
 80014da:	e7f6      	b.n	80014ca <HAL_I2S_TxCpltCallback+0xa>
 80014dc:	40003800 	.word	0x40003800
 80014e0:	20000900 	.word	0x20000900
 80014e4:	200010d8 	.word	0x200010d8

080014e8 <HAL_I2S_TxHalfCpltCallback>:
{
 80014e8:	b508      	push	{r3, lr}
  if (hi2s->Instance == SPI2)
 80014ea:	6802      	ldr	r2, [r0, #0]
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d000      	beq.n	80014f4 <HAL_I2S_TxHalfCpltCallback+0xc>
}
 80014f2:	bd08      	pop	{r3, pc}
    synth->make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
 80014f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014f8:	4903      	ldr	r1, [pc, #12]	; (8001508 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_I2S_TxHalfCpltCallback+0x24>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	f002 feb7 	bl	8004270 <_ZN5Synth10make_soundEPtt>
}
 8001502:	e7f6      	b.n	80014f2 <HAL_I2S_TxHalfCpltCallback+0xa>
 8001504:	40003800 	.word	0x40003800
 8001508:	20000130 	.word	0x20000130
 800150c:	200010d8 	.word	0x200010d8

08001510 <EXTI15_10_IRQHandler>:
{
 8001510:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <EXTI15_10_IRQHandler+0x84>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800151a:	d008      	beq.n	800152e <EXTI15_10_IRQHandler+0x1e>
    if (sw1bon)
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <EXTI15_10_IRQHandler+0x88>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b353      	cbz	r3, 8001578 <EXTI15_10_IRQHandler+0x68>
      sw1dir = true;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <EXTI15_10_IRQHandler+0x8c>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
      sw1bon = false;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <EXTI15_10_IRQHandler+0x88>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <EXTI15_10_IRQHandler+0x84>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001536:	d00d      	beq.n	8001554 <EXTI15_10_IRQHandler+0x44>
    if (sw1aon)
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <EXTI15_10_IRQHandler+0x90>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b303      	cbz	r3, 8001580 <EXTI15_10_IRQHandler+0x70>
      sw1dir = false;
 800153e:	2300      	movs	r3, #0
 8001540:	4a16      	ldr	r2, [pc, #88]	; (800159c <EXTI15_10_IRQHandler+0x8c>)
 8001542:	7013      	strb	r3, [r2, #0]
      sw1aon = false;
 8001544:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <EXTI15_10_IRQHandler+0x90>)
 8001546:	7013      	strb	r3, [r2, #0]
    menu->TriggerEncoder(sw1dir);
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <EXTI15_10_IRQHandler+0x8c>)
 800154a:	7819      	ldrb	r1, [r3, #0]
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <EXTI15_10_IRQHandler+0x94>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	f000 fa9c 	bl	8001a8c <_ZN10MenuSystem14TriggerEncoderEb>
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <EXTI15_10_IRQHandler+0x84>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800155c:	d114      	bne.n	8001588 <EXTI15_10_IRQHandler+0x78>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800155e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001562:	f001 f9cd 	bl	8002900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001566:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800156a:	f001 f9c9 	bl	8002900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800156e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001572:	f001 f9c5 	bl	8002900 <HAL_GPIO_EXTI_IRQHandler>
 8001576:	bd08      	pop	{r3, pc}
      sw1aon = true;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <EXTI15_10_IRQHandler+0x90>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e7d6      	b.n	800152e <EXTI15_10_IRQHandler+0x1e>
      sw1bon = true;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <EXTI15_10_IRQHandler+0x88>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e7df      	b.n	8001548 <EXTI15_10_IRQHandler+0x38>
    menu->TriggerPushEncoder();
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <EXTI15_10_IRQHandler+0x94>)
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	f000 fa7a 	bl	8001a84 <_ZN10MenuSystem18TriggerPushEncoderEv>
 8001590:	e7e5      	b.n	800155e <EXTI15_10_IRQHandler+0x4e>
 8001592:	bf00      	nop
 8001594:	40013c00 	.word	0x40013c00
 8001598:	200010d5 	.word	0x200010d5
 800159c:	200010d6 	.word	0x200010d6
 80015a0:	200010d4 	.word	0x200010d4
 80015a4:	200010d0 	.word	0x200010d0

080015a8 <_GLOBAL__sub_I_audiobuff>:
 80015a8:	b508      	push	{r3, lr}
 80015aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff ff56 	bl	8001460 <_Z41__static_initialization_and_destruction_0ii>
 80015b4:	bd08      	pop	{r3, pc}
	...

080015b8 <_Z9intToChari>:

extern uint8_t WM8978_SPK_Volume;
extern AudioCodec *audio;

char *intToChar(int i)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4605      	mov	r5, r0
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }
 80015be:	f7fe ffa9 	bl	8000514 <__aeabi_i2d>
 80015c2:	ec41 0b10 	vmov	d0, r0, r1
 80015c6:	f002 ff49 	bl	800445c <log10>
    int length = (log10(i) + 1);
 80015ca:	2200      	movs	r2, #0
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <_Z9intToChari+0x44>)
 80015ce:	ec51 0b10 	vmov	r0, r1, d0
 80015d2:	f7fe fe53 	bl	800027c <__adddf3>
 80015d6:	f7ff fab7 	bl	8000b48 <__aeabi_d2iz>
 80015da:	4604      	mov	r4, r0

    char chararray[length];
 80015dc:	1dc3      	adds	r3, r0, #7
 80015de:	f023 0307 	bic.w	r3, r3, #7
 80015e2:	ebad 0d03 	sub.w	sp, sp, r3
    sprintf(chararray, "%d", i);
 80015e6:	462a      	mov	r2, r5
 80015e8:	4905      	ldr	r1, [pc, #20]	; (8001600 <_Z9intToChari+0x48>)
 80015ea:	4668      	mov	r0, sp
 80015ec:	f004 fcd8 	bl	8005fa0 <siprintf>
    chararray[length] = '\0';
 80015f0:	2000      	movs	r0, #0
 80015f2:	f80d 0004 	strb.w	r0, [sp, r4]

    return chararray;
}
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bdb0      	pop	{r4, r5, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	3ff00000 	.word	0x3ff00000
 8001600:	08006894 	.word	0x08006894

08001604 <_ZN10MenuSystemC1EP3LCD>:

MenuSystem::MenuSystem(LCD *hlcd)
{
    lcd = hlcd;
 8001604:	6001      	str	r1, [r0, #0]
}
 8001606:	4770      	bx	lr

08001608 <_ZN10MenuSystem8MainMenuEv>:

/**
  * @brief Main Menu
  */
void MenuSystem::MainMenu()
{
 8001608:	b510      	push	{r4, lr}
 800160a:	4604      	mov	r4, r0
    currentMenu = MAIN_MENU;
 800160c:	4b57      	ldr	r3, [pc, #348]	; (800176c <_ZN10MenuSystem8MainMenuEv+0x164>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    activeItemCount = 3;
 8001612:	4b57      	ldr	r3, [pc, #348]	; (8001770 <_ZN10MenuSystem8MainMenuEv+0x168>)
 8001614:	2203      	movs	r2, #3
 8001616:	601a      	str	r2, [r3, #0]
    switch (activeItem)
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <_ZN10MenuSystem8MainMenuEv+0x16c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d03b      	beq.n	8001698 <_ZN10MenuSystem8MainMenuEv+0x90>
 8001620:	2b02      	cmp	r3, #2
 8001622:	d071      	beq.n	8001708 <_ZN10MenuSystem8MainMenuEv+0x100>
 8001624:	b103      	cbz	r3, 8001628 <_ZN10MenuSystem8MainMenuEv+0x20>
        lcd->print("<  >     MIXER", 0, 5);
        break;
    default:
        break;
    }
}
 8001626:	bd10      	pop	{r4, pc}
        lcd->print(SoundGenerator::soundNames[synth->sound], 0, 0);
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <_ZN10MenuSystem8MainMenuEv+0x170>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	7f18      	ldrb	r0, [r3, #28]
 800162e:	2300      	movs	r3, #0
 8001630:	461a      	mov	r2, r3
 8001632:	4952      	ldr	r1, [pc, #328]	; (800177c <_ZN10MenuSystem8MainMenuEv+0x174>)
 8001634:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001638:	6820      	ldr	r0, [r4, #0]
 800163a:	f7ff fd0b 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("Freq       440", 0, 1);
 800163e:	2301      	movs	r3, #1
 8001640:	2200      	movs	r2, #0
 8001642:	494f      	ldr	r1, [pc, #316]	; (8001780 <_ZN10MenuSystem8MainMenuEv+0x178>)
 8001644:	6820      	ldr	r0, [r4, #0]
 8001646:	f7ff fd05 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("Mod        100", 0, 2);
 800164a:	2302      	movs	r3, #2
 800164c:	2200      	movs	r2, #0
 800164e:	494d      	ldr	r1, [pc, #308]	; (8001784 <_ZN10MenuSystem8MainMenuEv+0x17c>)
 8001650:	6820      	ldr	r0, [r4, #0]
 8001652:	f7ff fcff 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("Rate      1200", 0, 3);
 8001656:	2303      	movs	r3, #3
 8001658:	2200      	movs	r2, #0
 800165a:	494b      	ldr	r1, [pc, #300]	; (8001788 <_ZN10MenuSystem8MainMenuEv+0x180>)
 800165c:	6820      	ldr	r0, [r4, #0]
 800165e:	f7ff fcf9 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("- - - -       ", 0, 4);
 8001662:	2304      	movs	r3, #4
 8001664:	2200      	movs	r2, #0
 8001666:	4949      	ldr	r1, [pc, #292]	; (800178c <_ZN10MenuSystem8MainMenuEv+0x184>)
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	f7ff fcf3 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("         MIXER", 0, 5);
 800166e:	2305      	movs	r3, #5
 8001670:	2200      	movs	r2, #0
 8001672:	4947      	ldr	r1, [pc, #284]	; (8001790 <_ZN10MenuSystem8MainMenuEv+0x188>)
 8001674:	6820      	ldr	r0, [r4, #0]
 8001676:	f7ff fced 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->invertText(true);
 800167a:	2101      	movs	r1, #1
 800167c:	6820      	ldr	r0, [r4, #0]
 800167e:	f7ff fc5b 	bl	8000f38 <_ZN3LCD10invertTextEb>
        lcd->print("<  >", 0, 5);
 8001682:	2305      	movs	r3, #5
 8001684:	2200      	movs	r2, #0
 8001686:	4943      	ldr	r1, [pc, #268]	; (8001794 <_ZN10MenuSystem8MainMenuEv+0x18c>)
 8001688:	6820      	ldr	r0, [r4, #0]
 800168a:	f7ff fce3 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 800168e:	2100      	movs	r1, #0
 8001690:	6820      	ldr	r0, [r4, #0]
 8001692:	f7ff fc51 	bl	8000f38 <_ZN3LCD10invertTextEb>
        break;
 8001696:	e7c6      	b.n	8001626 <_ZN10MenuSystem8MainMenuEv+0x1e>
        lcd->print(SoundGenerator::soundNames[synth->sound], 0, 0);
 8001698:	4b37      	ldr	r3, [pc, #220]	; (8001778 <_ZN10MenuSystem8MainMenuEv+0x170>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	7f18      	ldrb	r0, [r3, #28]
 800169e:	2300      	movs	r3, #0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4936      	ldr	r1, [pc, #216]	; (800177c <_ZN10MenuSystem8MainMenuEv+0x174>)
 80016a4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80016a8:	6820      	ldr	r0, [r4, #0]
 80016aa:	f7ff fcd3 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("Freq       440", 0, 1);
 80016ae:	2301      	movs	r3, #1
 80016b0:	2200      	movs	r2, #0
 80016b2:	4933      	ldr	r1, [pc, #204]	; (8001780 <_ZN10MenuSystem8MainMenuEv+0x178>)
 80016b4:	6820      	ldr	r0, [r4, #0]
 80016b6:	f7ff fccd 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("Mod        100", 0, 2);
 80016ba:	2302      	movs	r3, #2
 80016bc:	2200      	movs	r2, #0
 80016be:	4931      	ldr	r1, [pc, #196]	; (8001784 <_ZN10MenuSystem8MainMenuEv+0x17c>)
 80016c0:	6820      	ldr	r0, [r4, #0]
 80016c2:	f7ff fcc7 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("Rate      1200", 0, 3);
 80016c6:	2303      	movs	r3, #3
 80016c8:	2200      	movs	r2, #0
 80016ca:	492f      	ldr	r1, [pc, #188]	; (8001788 <_ZN10MenuSystem8MainMenuEv+0x180>)
 80016cc:	6820      	ldr	r0, [r4, #0]
 80016ce:	f7ff fcc1 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("- - - -       ", 0, 4);
 80016d2:	2304      	movs	r3, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	492d      	ldr	r1, [pc, #180]	; (800178c <_ZN10MenuSystem8MainMenuEv+0x184>)
 80016d8:	6820      	ldr	r0, [r4, #0]
 80016da:	f7ff fcbb 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("<  >", 0, 5);
 80016de:	2305      	movs	r3, #5
 80016e0:	2200      	movs	r2, #0
 80016e2:	492c      	ldr	r1, [pc, #176]	; (8001794 <_ZN10MenuSystem8MainMenuEv+0x18c>)
 80016e4:	6820      	ldr	r0, [r4, #0]
 80016e6:	f7ff fcb5 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->invertText(true);
 80016ea:	2101      	movs	r1, #1
 80016ec:	6820      	ldr	r0, [r4, #0]
 80016ee:	f7ff fc23 	bl	8000f38 <_ZN3LCD10invertTextEb>
        lcd->print("MIXER", 54, 5);
 80016f2:	2305      	movs	r3, #5
 80016f4:	2236      	movs	r2, #54	; 0x36
 80016f6:	4928      	ldr	r1, [pc, #160]	; (8001798 <_ZN10MenuSystem8MainMenuEv+0x190>)
 80016f8:	6820      	ldr	r0, [r4, #0]
 80016fa:	f7ff fcab 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 80016fe:	2100      	movs	r1, #0
 8001700:	6820      	ldr	r0, [r4, #0]
 8001702:	f7ff fc19 	bl	8000f38 <_ZN3LCD10invertTextEb>
        break;
 8001706:	e78e      	b.n	8001626 <_ZN10MenuSystem8MainMenuEv+0x1e>
        lcd->invertText(true);
 8001708:	2101      	movs	r1, #1
 800170a:	6800      	ldr	r0, [r0, #0]
 800170c:	f7ff fc14 	bl	8000f38 <_ZN3LCD10invertTextEb>
        lcd->print(SoundGenerator::soundNames[synth->sound], 0, 0);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <_ZN10MenuSystem8MainMenuEv+0x170>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	7f18      	ldrb	r0, [r3, #28]
 8001716:	2300      	movs	r3, #0
 8001718:	461a      	mov	r2, r3
 800171a:	4918      	ldr	r1, [pc, #96]	; (800177c <_ZN10MenuSystem8MainMenuEv+0x174>)
 800171c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	f7ff fc97 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 8001726:	2100      	movs	r1, #0
 8001728:	6820      	ldr	r0, [r4, #0]
 800172a:	f7ff fc05 	bl	8000f38 <_ZN3LCD10invertTextEb>
        lcd->print("Freq       440", 0, 1);
 800172e:	2301      	movs	r3, #1
 8001730:	2200      	movs	r2, #0
 8001732:	4913      	ldr	r1, [pc, #76]	; (8001780 <_ZN10MenuSystem8MainMenuEv+0x178>)
 8001734:	6820      	ldr	r0, [r4, #0]
 8001736:	f7ff fc8d 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("Mod        100", 0, 2);
 800173a:	2302      	movs	r3, #2
 800173c:	2200      	movs	r2, #0
 800173e:	4911      	ldr	r1, [pc, #68]	; (8001784 <_ZN10MenuSystem8MainMenuEv+0x17c>)
 8001740:	6820      	ldr	r0, [r4, #0]
 8001742:	f7ff fc87 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("Rate      1200", 0, 3);
 8001746:	2303      	movs	r3, #3
 8001748:	2200      	movs	r2, #0
 800174a:	490f      	ldr	r1, [pc, #60]	; (8001788 <_ZN10MenuSystem8MainMenuEv+0x180>)
 800174c:	6820      	ldr	r0, [r4, #0]
 800174e:	f7ff fc81 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("- - - -       ", 0, 4);
 8001752:	2304      	movs	r3, #4
 8001754:	2200      	movs	r2, #0
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <_ZN10MenuSystem8MainMenuEv+0x184>)
 8001758:	6820      	ldr	r0, [r4, #0]
 800175a:	f7ff fc7b 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->print("<  >     MIXER", 0, 5);
 800175e:	2305      	movs	r3, #5
 8001760:	2200      	movs	r2, #0
 8001762:	490e      	ldr	r1, [pc, #56]	; (800179c <_ZN10MenuSystem8MainMenuEv+0x194>)
 8001764:	6820      	ldr	r0, [r4, #0]
 8001766:	f7ff fc75 	bl	8001054 <_ZN3LCD5printEPchh>
}
 800176a:	e75c      	b.n	8001626 <_ZN10MenuSystem8MainMenuEv+0x1e>
 800176c:	200010e0 	.word	0x200010e0
 8001770:	20000074 	.word	0x20000074
 8001774:	200010dc 	.word	0x200010dc
 8001778:	200010d8 	.word	0x200010d8
 800177c:	20000088 	.word	0x20000088
 8001780:	080068a8 	.word	0x080068a8
 8001784:	080068b8 	.word	0x080068b8
 8001788:	080068c8 	.word	0x080068c8
 800178c:	080068d8 	.word	0x080068d8
 8001790:	080068e8 	.word	0x080068e8
 8001794:	080068f8 	.word	0x080068f8
 8001798:	08006900 	.word	0x08006900
 800179c:	08006908 	.word	0x08006908

080017a0 <_ZN10MenuSystem9MixerMenuEv>:

/**
  * @brief Mixer
  */
void MenuSystem::MixerMenu()
{
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	4604      	mov	r4, r0
    currentMenu = MIXER_MENU;
 80017a4:	2501      	movs	r5, #1
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <_ZN10MenuSystem9MixerMenuEv+0xa4>)
 80017a8:	701d      	strb	r5, [r3, #0]

    lcd->drawHLine(0, 9, 83);
 80017aa:	2353      	movs	r3, #83	; 0x53
 80017ac:	2209      	movs	r2, #9
 80017ae:	2100      	movs	r1, #0
 80017b0:	6800      	ldr	r0, [r0, #0]
 80017b2:	f7ff fcac 	bl	800110e <_ZN3LCD9drawHLineEiii>
    lcd->refreshScr();
 80017b6:	6820      	ldr	r0, [r4, #0]
 80017b8:	f7ff fc8f 	bl	80010da <_ZN3LCD10refreshScrEv>

    lcd->invertText(true);
 80017bc:	4629      	mov	r1, r5
 80017be:	6820      	ldr	r0, [r4, #0]
 80017c0:	f7ff fbba 	bl	8000f38 <_ZN3LCD10invertTextEb>
    lcd->print("             X", 0, 0);
 80017c4:	2300      	movs	r3, #0
 80017c6:	461a      	mov	r2, r3
 80017c8:	491f      	ldr	r1, [pc, #124]	; (8001848 <_ZN10MenuSystem9MixerMenuEv+0xa8>)
 80017ca:	6820      	ldr	r0, [r4, #0]
 80017cc:	f7ff fc42 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->invertText(false);
 80017d0:	2100      	movs	r1, #0
 80017d2:	6820      	ldr	r0, [r4, #0]
 80017d4:	f7ff fbb0 	bl	8000f38 <_ZN3LCD10invertTextEb>
    lcd->print("MIXER        ", 0, 0);
 80017d8:	2300      	movs	r3, #0
 80017da:	461a      	mov	r2, r3
 80017dc:	491b      	ldr	r1, [pc, #108]	; (800184c <_ZN10MenuSystem9MixerMenuEv+0xac>)
 80017de:	6820      	ldr	r0, [r4, #0]
 80017e0:	f7ff fc38 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print("Headphones   ", 0, 2);
 80017e4:	2302      	movs	r3, #2
 80017e6:	2200      	movs	r2, #0
 80017e8:	4919      	ldr	r1, [pc, #100]	; (8001850 <_ZN10MenuSystem9MixerMenuEv+0xb0>)
 80017ea:	6820      	ldr	r0, [r4, #0]
 80017ec:	f7ff fc32 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print(intToChar(audio->HP_Volume), 60, 1);
 80017f0:	6827      	ldr	r7, [r4, #0]
 80017f2:	4e18      	ldr	r6, [pc, #96]	; (8001854 <_ZN10MenuSystem9MixerMenuEv+0xb4>)
 80017f4:	6833      	ldr	r3, [r6, #0]
 80017f6:	7818      	ldrb	r0, [r3, #0]
 80017f8:	f7ff fede 	bl	80015b8 <_Z9intToChari>
 80017fc:	462b      	mov	r3, r5
 80017fe:	223c      	movs	r2, #60	; 0x3c
 8001800:	4601      	mov	r1, r0
 8001802:	4638      	mov	r0, r7
 8001804:	f7ff fc26 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print("LineOut      ", 0, 3);
 8001808:	2303      	movs	r3, #3
 800180a:	2200      	movs	r2, #0
 800180c:	4912      	ldr	r1, [pc, #72]	; (8001858 <_ZN10MenuSystem9MixerMenuEv+0xb8>)
 800180e:	6820      	ldr	r0, [r4, #0]
 8001810:	f7ff fc20 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print(intToChar(audio->SPK_Volume), 60, 2);
 8001814:	6825      	ldr	r5, [r4, #0]
 8001816:	6833      	ldr	r3, [r6, #0]
 8001818:	7858      	ldrb	r0, [r3, #1]
 800181a:	f7ff fecd 	bl	80015b8 <_Z9intToChari>
 800181e:	2302      	movs	r3, #2
 8001820:	223c      	movs	r2, #60	; 0x3c
 8001822:	4601      	mov	r1, r0
 8001824:	4628      	mov	r0, r5
 8001826:	f7ff fc15 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print("LineIn      --", 0, 4);
 800182a:	2304      	movs	r3, #4
 800182c:	2200      	movs	r2, #0
 800182e:	490b      	ldr	r1, [pc, #44]	; (800185c <_ZN10MenuSystem9MixerMenuEv+0xbc>)
 8001830:	6820      	ldr	r0, [r4, #0]
 8001832:	f7ff fc0f 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print("Mic         --", 0, 5);
 8001836:	2305      	movs	r3, #5
 8001838:	2200      	movs	r2, #0
 800183a:	4909      	ldr	r1, [pc, #36]	; (8001860 <_ZN10MenuSystem9MixerMenuEv+0xc0>)
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	f7ff fc09 	bl	8001054 <_ZN3LCD5printEPchh>
}
 8001842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001844:	200010e0 	.word	0x200010e0
 8001848:	08006968 	.word	0x08006968
 800184c:	08006978 	.word	0x08006978
 8001850:	08006988 	.word	0x08006988
 8001854:	2000012c 	.word	0x2000012c
 8001858:	08006998 	.word	0x08006998
 800185c:	080069a8 	.word	0x080069a8
 8001860:	080069b8 	.word	0x080069b8

08001864 <_ZN10MenuSystem9SoundMenuEv>:
/**
  * @brief Sound select Menu
  */
void MenuSystem::SoundMenu()
{
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	4606      	mov	r6, r0
    currentMenu = SOUND_MENU;
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <_ZN10MenuSystem9SoundMenuEv+0x80>)
 800186a:	2202      	movs	r2, #2
 800186c:	701a      	strb	r2, [r3, #0]
    looping = false;
 800186e:	2400      	movs	r4, #0
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <_ZN10MenuSystem9SoundMenuEv+0x84>)
 8001872:	701c      	strb	r4, [r3, #0]

    activeItemCount = SoundGenerator::soundscount;
 8001874:	2208      	movs	r2, #8
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <_ZN10MenuSystem9SoundMenuEv+0x88>)
 8001878:	601a      	str	r2, [r3, #0]

    lcd->drawHLine(0, 8, 83);
 800187a:	2353      	movs	r3, #83	; 0x53
 800187c:	4621      	mov	r1, r4
 800187e:	6800      	ldr	r0, [r0, #0]
 8001880:	f7ff fc45 	bl	800110e <_ZN3LCD9drawHLineEiii>
    lcd->refreshScr();
 8001884:	6830      	ldr	r0, [r6, #0]
 8001886:	f7ff fc28 	bl	80010da <_ZN3LCD10refreshScrEv>
    lcd->print("SOUND        X", 0, 0);
 800188a:	4623      	mov	r3, r4
 800188c:	4622      	mov	r2, r4
 800188e:	4918      	ldr	r1, [pc, #96]	; (80018f0 <_ZN10MenuSystem9SoundMenuEv+0x8c>)
 8001890:	6830      	ldr	r0, [r6, #0]
 8001892:	f7ff fbdf 	bl	8001054 <_ZN3LCD5printEPchh>

    for (int i = activeItem < 5 ? 0 : activeItem - 4, j = 1; j < 6; i++, j++)
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <_ZN10MenuSystem9SoundMenuEv+0x90>)
 8001898:	681c      	ldr	r4, [r3, #0]
 800189a:	2c04      	cmp	r4, #4
 800189c:	bfb8      	it	lt
 800189e:	2404      	movlt	r4, #4
 80018a0:	3c04      	subs	r4, #4
 80018a2:	2501      	movs	r5, #1
 80018a4:	e006      	b.n	80018b4 <_ZN10MenuSystem9SoundMenuEv+0x50>
    {
    	if(i == activeItem) {
    		lcd->invertText(true);
 80018a6:	2101      	movs	r1, #1
 80018a8:	6830      	ldr	r0, [r6, #0]
 80018aa:	f7ff fb45 	bl	8000f38 <_ZN3LCD10invertTextEb>
 80018ae:	e007      	b.n	80018c0 <_ZN10MenuSystem9SoundMenuEv+0x5c>
    for (int i = activeItem < 5 ? 0 : activeItem - 4, j = 1; j < 6; i++, j++)
 80018b0:	3401      	adds	r4, #1
 80018b2:	3501      	adds	r5, #1
 80018b4:	2d05      	cmp	r5, #5
 80018b6:	dc14      	bgt.n	80018e2 <_ZN10MenuSystem9SoundMenuEv+0x7e>
    	if(i == activeItem) {
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <_ZN10MenuSystem9SoundMenuEv+0x90>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	42a3      	cmp	r3, r4
 80018be:	d0f2      	beq.n	80018a6 <_ZN10MenuSystem9SoundMenuEv+0x42>
    	}
        lcd->print(SoundGenerator::soundNames[i], 0, j);
 80018c0:	b2eb      	uxtb	r3, r5
 80018c2:	2200      	movs	r2, #0
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <_ZN10MenuSystem9SoundMenuEv+0x94>)
 80018c6:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80018ca:	6830      	ldr	r0, [r6, #0]
 80018cc:	f7ff fbc2 	bl	8001054 <_ZN3LCD5printEPchh>
    	if(i == activeItem) {
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <_ZN10MenuSystem9SoundMenuEv+0x90>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	42a3      	cmp	r3, r4
 80018d6:	d1eb      	bne.n	80018b0 <_ZN10MenuSystem9SoundMenuEv+0x4c>
    		lcd->invertText(false);
 80018d8:	2100      	movs	r1, #0
 80018da:	6830      	ldr	r0, [r6, #0]
 80018dc:	f7ff fb2c 	bl	8000f38 <_ZN3LCD10invertTextEb>
 80018e0:	e7e6      	b.n	80018b0 <_ZN10MenuSystem9SoundMenuEv+0x4c>
    	}
    }
}
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
 80018e4:	200010e0 	.word	0x200010e0
 80018e8:	20000078 	.word	0x20000078
 80018ec:	20000074 	.word	0x20000074
 80018f0:	080069c8 	.word	0x080069c8
 80018f4:	200010dc 	.word	0x200010dc
 80018f8:	20000088 	.word	0x20000088

080018fc <_ZN10MenuSystem9DelayMenuEv>:

/**
  * @brief Delay Menu
  */
void MenuSystem::DelayMenu()
{
 80018fc:	b510      	push	{r4, lr}
 80018fe:	4604      	mov	r4, r0
    lcd->drawHLine(0, 8, 83);
 8001900:	2353      	movs	r3, #83	; 0x53
 8001902:	2208      	movs	r2, #8
 8001904:	2100      	movs	r1, #0
 8001906:	6800      	ldr	r0, [r0, #0]
 8001908:	f7ff fc01 	bl	800110e <_ZN3LCD9drawHLineEiii>
    lcd->refreshScr();
 800190c:	6820      	ldr	r0, [r4, #0]
 800190e:	f7ff fbe4 	bl	80010da <_ZN3LCD10refreshScrEv>
    lcd->print("DELAY         ", 0, 0);
 8001912:	2300      	movs	r3, #0
 8001914:	461a      	mov	r2, r3
 8001916:	4911      	ldr	r1, [pc, #68]	; (800195c <_ZN10MenuSystem9DelayMenuEv+0x60>)
 8001918:	6820      	ldr	r0, [r4, #0]
 800191a:	f7ff fb9b 	bl	8001054 <_ZN3LCD5printEPchh>
    //  lcd->goXY(0,20);
    lcd->print("Speed       90", 0, 1);
 800191e:	2301      	movs	r3, #1
 8001920:	2200      	movs	r2, #0
 8001922:	490f      	ldr	r1, [pc, #60]	; (8001960 <_ZN10MenuSystem9DelayMenuEv+0x64>)
 8001924:	6820      	ldr	r0, [r4, #0]
 8001926:	f7ff fb95 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print("Feedback   100", 0, 2);
 800192a:	2302      	movs	r3, #2
 800192c:	2200      	movs	r2, #0
 800192e:	490d      	ldr	r1, [pc, #52]	; (8001964 <_ZN10MenuSystem9DelayMenuEv+0x68>)
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	f7ff fb8f 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print("Filter      --", 0, 3);
 8001936:	2303      	movs	r3, #3
 8001938:	2200      	movs	r2, #0
 800193a:	490b      	ldr	r1, [pc, #44]	; (8001968 <_ZN10MenuSystem9DelayMenuEv+0x6c>)
 800193c:	6820      	ldr	r0, [r4, #0]
 800193e:	f7ff fb89 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print("            --", 0, 4);
 8001942:	2304      	movs	r3, #4
 8001944:	2200      	movs	r2, #0
 8001946:	4909      	ldr	r1, [pc, #36]	; (800196c <_ZN10MenuSystem9DelayMenuEv+0x70>)
 8001948:	6820      	ldr	r0, [r4, #0]
 800194a:	f7ff fb83 	bl	8001054 <_ZN3LCD5printEPchh>
    lcd->print("<  >     MIXER", 0, 5);
 800194e:	2305      	movs	r3, #5
 8001950:	2200      	movs	r2, #0
 8001952:	4907      	ldr	r1, [pc, #28]	; (8001970 <_ZN10MenuSystem9DelayMenuEv+0x74>)
 8001954:	6820      	ldr	r0, [r4, #0]
 8001956:	f7ff fb7d 	bl	8001054 <_ZN3LCD5printEPchh>
}
 800195a:	bd10      	pop	{r4, pc}
 800195c:	08006918 	.word	0x08006918
 8001960:	08006928 	.word	0x08006928
 8001964:	08006938 	.word	0x08006938
 8001968:	08006948 	.word	0x08006948
 800196c:	08006958 	.word	0x08006958
 8001970:	08006908 	.word	0x08006908

08001974 <_ZN10MenuSystem11RefreshMenuEv>:
{
 8001974:	b510      	push	{r4, lr}
 8001976:	4604      	mov	r4, r0
    lcd->clrScr();
 8001978:	6800      	ldr	r0, [r0, #0]
 800197a:	f7ff fb20 	bl	8000fbe <_ZN3LCD6clrScrEv>
    switch (currentMenu)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_ZN10MenuSystem11RefreshMenuEv+0x60>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d806      	bhi.n	8001994 <_ZN10MenuSystem11RefreshMenuEv+0x20>
 8001986:	e8df f003 	tbb	[pc, r3]
 800198a:	0902      	.short	0x0902
 800198c:	110d      	.short	0x110d
        MainMenu();
 800198e:	4620      	mov	r0, r4
 8001990:	f7ff fe3a 	bl	8001608 <_ZN10MenuSystem8MainMenuEv>
    if (scrollMode)
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <_ZN10MenuSystem11RefreshMenuEv+0x64>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b963      	cbnz	r3, 80019b4 <_ZN10MenuSystem11RefreshMenuEv+0x40>
}
 800199a:	bd10      	pop	{r4, pc}
        MixerMenu();
 800199c:	4620      	mov	r0, r4
 800199e:	f7ff feff 	bl	80017a0 <_ZN10MenuSystem9MixerMenuEv>
        break;
 80019a2:	e7f7      	b.n	8001994 <_ZN10MenuSystem11RefreshMenuEv+0x20>
        SoundMenu();
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff ff5d 	bl	8001864 <_ZN10MenuSystem9SoundMenuEv>
        break;
 80019aa:	e7f3      	b.n	8001994 <_ZN10MenuSystem11RefreshMenuEv+0x20>
        DelayMenu();
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff ffa5 	bl	80018fc <_ZN10MenuSystem9DelayMenuEv>
 80019b2:	e7ef      	b.n	8001994 <_ZN10MenuSystem11RefreshMenuEv+0x20>
        lcd->invertText(true);
 80019b4:	2101      	movs	r1, #1
 80019b6:	6820      	ldr	r0, [r4, #0]
 80019b8:	f7ff fabe 	bl	8000f38 <_ZN3LCD10invertTextEb>
        lcd->print("<            >", 0, 5);
 80019bc:	2305      	movs	r3, #5
 80019be:	2200      	movs	r2, #0
 80019c0:	4906      	ldr	r1, [pc, #24]	; (80019dc <_ZN10MenuSystem11RefreshMenuEv+0x68>)
 80019c2:	6820      	ldr	r0, [r4, #0]
 80019c4:	f7ff fb46 	bl	8001054 <_ZN3LCD5printEPchh>
        lcd->invertText(false);
 80019c8:	2100      	movs	r1, #0
 80019ca:	6820      	ldr	r0, [r4, #0]
 80019cc:	f7ff fab4 	bl	8000f38 <_ZN3LCD10invertTextEb>
}
 80019d0:	e7e3      	b.n	800199a <_ZN10MenuSystem11RefreshMenuEv+0x26>
 80019d2:	bf00      	nop
 80019d4:	200010e0 	.word	0x200010e0
 80019d8:	200010e1 	.word	0x200010e1
 80019dc:	08006898 	.word	0x08006898

080019e0 <_ZN10MenuSystem7SetMenuE7PSMenus>:
{
 80019e0:	b508      	push	{r3, lr}
    currentMenu = menu;
 80019e2:	4b02      	ldr	r3, [pc, #8]	; (80019ec <_ZN10MenuSystem7SetMenuE7PSMenus+0xc>)
 80019e4:	7019      	strb	r1, [r3, #0]
    RefreshMenu();
 80019e6:	f7ff ffc5 	bl	8001974 <_ZN10MenuSystem11RefreshMenuEv>
}
 80019ea:	bd08      	pop	{r3, pc}
 80019ec:	200010e0 	.word	0x200010e0

080019f0 <_ZN10MenuSystem10MenuSelectEv>:
{
 80019f0:	b510      	push	{r4, lr}
 80019f2:	4604      	mov	r4, r0
    if (scrollMode)
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <_ZN10MenuSystem10MenuSelectEv+0x84>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b983      	cbnz	r3, 8001a1c <_ZN10MenuSystem10MenuSelectEv+0x2c>
    switch (currentMenu)
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <_ZN10MenuSystem10MenuSelectEv+0x88>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d012      	beq.n	8001a28 <_ZN10MenuSystem10MenuSelectEv+0x38>
 8001a02:	b1c3      	cbz	r3, 8001a36 <_ZN10MenuSystem10MenuSelectEv+0x46>
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d023      	beq.n	8001a50 <_ZN10MenuSystem10MenuSelectEv+0x60>
    switch (activeItem)
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <_ZN10MenuSystem10MenuSelectEv+0x8c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	b35b      	cbz	r3, 8001a66 <_ZN10MenuSystem10MenuSelectEv+0x76>
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d109      	bne.n	8001a26 <_ZN10MenuSystem10MenuSelectEv+0x36>
        SetMenu(MIXER_MENU);
 8001a12:	2101      	movs	r1, #1
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff ffe3 	bl	80019e0 <_ZN10MenuSystem7SetMenuE7PSMenus>
        break;
 8001a1a:	e004      	b.n	8001a26 <_ZN10MenuSystem10MenuSelectEv+0x36>
        scrollMode = false;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_ZN10MenuSystem10MenuSelectEv+0x84>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
        RefreshMenu();
 8001a22:	f7ff ffa7 	bl	8001974 <_ZN10MenuSystem11RefreshMenuEv>
}
 8001a26:	bd10      	pop	{r4, pc}
        activeItem = 1;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <_ZN10MenuSystem10MenuSelectEv+0x8c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
        SetMenu(MAIN_MENU);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f7ff ffd6 	bl	80019e0 <_ZN10MenuSystem7SetMenuE7PSMenus>
        return;
 8001a34:	e7f7      	b.n	8001a26 <_ZN10MenuSystem10MenuSelectEv+0x36>
        if (activeItem == 2)
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_ZN10MenuSystem10MenuSelectEv+0x8c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d1e4      	bne.n	8001a08 <_ZN10MenuSystem10MenuSelectEv+0x18>
            activeItem = synth->sound;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_ZN10MenuSystem10MenuSelectEv+0x90>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	7f1a      	ldrb	r2, [r3, #28]
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <_ZN10MenuSystem10MenuSelectEv+0x8c>)
 8001a46:	601a      	str	r2, [r3, #0]
            SetMenu(SOUND_MENU);
 8001a48:	2102      	movs	r1, #2
 8001a4a:	f7ff ffc9 	bl	80019e0 <_ZN10MenuSystem7SetMenuE7PSMenus>
            return;
 8001a4e:	e7ea      	b.n	8001a26 <_ZN10MenuSystem10MenuSelectEv+0x36>
        synth->sound = Sounds(activeItem);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <_ZN10MenuSystem10MenuSelectEv+0x90>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <_ZN10MenuSystem10MenuSelectEv+0x8c>)
 8001a56:	7819      	ldrb	r1, [r3, #0]
 8001a58:	7711      	strb	r1, [r2, #28]
        activeItem = 2;
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	601a      	str	r2, [r3, #0]
        SetMenu(MAIN_MENU);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f7ff ffbe 	bl	80019e0 <_ZN10MenuSystem7SetMenuE7PSMenus>
        break;
 8001a64:	e7d0      	b.n	8001a08 <_ZN10MenuSystem10MenuSelectEv+0x18>
        scrollMode = true;
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <_ZN10MenuSystem10MenuSelectEv+0x84>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
        RefreshMenu();
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff ff81 	bl	8001974 <_ZN10MenuSystem11RefreshMenuEv>
        break;
 8001a72:	e7d8      	b.n	8001a26 <_ZN10MenuSystem10MenuSelectEv+0x36>
 8001a74:	200010e1 	.word	0x200010e1
 8001a78:	200010e0 	.word	0x200010e0
 8001a7c:	200010dc 	.word	0x200010dc
 8001a80:	200010d8 	.word	0x200010d8

08001a84 <_ZN10MenuSystem18TriggerPushEncoderEv>:
{
 8001a84:	b508      	push	{r3, lr}
    MenuSelect();
 8001a86:	f7ff ffb3 	bl	80019f0 <_ZN10MenuSystem10MenuSelectEv>
}
 8001a8a:	bd08      	pop	{r3, pc}

08001a8c <_ZN10MenuSystem14TriggerEncoderEb>:
{
 8001a8c:	b508      	push	{r3, lr}
    if (scrollMode)
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <_ZN10MenuSystem14TriggerEncoderEb+0x74>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b17b      	cbz	r3, 8001ab4 <_ZN10MenuSystem14TriggerEncoderEb+0x28>
        int newmenu = (int)currentMenu;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <_ZN10MenuSystem14TriggerEncoderEb+0x78>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
        if (direction)
 8001a98:	b139      	cbz	r1, 8001aaa <_ZN10MenuSystem14TriggerEncoderEb+0x1e>
            newmenu--;
 8001a9a:	1e59      	subs	r1, r3, #1
            if (newmenu > 3)
 8001a9c:	2903      	cmp	r1, #3
 8001a9e:	dd00      	ble.n	8001aa2 <_ZN10MenuSystem14TriggerEncoderEb+0x16>
                newmenu = 3;
 8001aa0:	2103      	movs	r1, #3
        SetMenu((PSMenus)newmenu);
 8001aa2:	b2c9      	uxtb	r1, r1
 8001aa4:	f7ff ff9c 	bl	80019e0 <_ZN10MenuSystem7SetMenuE7PSMenus>
}
 8001aa8:	bd08      	pop	{r3, pc}
            newmenu++;
 8001aaa:	1c59      	adds	r1, r3, #1
            if (newmenu > 3)
 8001aac:	2903      	cmp	r1, #3
 8001aae:	ddf8      	ble.n	8001aa2 <_ZN10MenuSystem14TriggerEncoderEb+0x16>
                newmenu = 0;
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	e7f6      	b.n	8001aa2 <_ZN10MenuSystem14TriggerEncoderEb+0x16>
    if (direction)
 8001ab4:	b179      	cbz	r1, 8001ad6 <_ZN10MenuSystem14TriggerEncoderEb+0x4a>
        activeItem++;
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <_ZN10MenuSystem14TriggerEncoderEb+0x7c>)
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
        if (activeItem > activeItemCount - 1)
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <_ZN10MenuSystem14TriggerEncoderEb+0x80>)
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	dd0c      	ble.n	8001ae2 <_ZN10MenuSystem14TriggerEncoderEb+0x56>
            activeItem = looping ? 0 : activeItemCount - 1;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <_ZN10MenuSystem14TriggerEncoderEb+0x84>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b103      	cbz	r3, 8001ad0 <_ZN10MenuSystem14TriggerEncoderEb+0x44>
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <_ZN10MenuSystem14TriggerEncoderEb+0x7c>)
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e005      	b.n	8001ae2 <_ZN10MenuSystem14TriggerEncoderEb+0x56>
        activeItem--;
 8001ad6:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <_ZN10MenuSystem14TriggerEncoderEb+0x7c>)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6013      	str	r3, [r2, #0]
        if (activeItem < 0)
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db02      	blt.n	8001ae8 <_ZN10MenuSystem14TriggerEncoderEb+0x5c>
    RefreshMenu();
 8001ae2:	f7ff ff47 	bl	8001974 <_ZN10MenuSystem11RefreshMenuEv>
 8001ae6:	e7df      	b.n	8001aa8 <_ZN10MenuSystem14TriggerEncoderEb+0x1c>
            activeItem = looping ? activeItemCount - 1 : 0;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <_ZN10MenuSystem14TriggerEncoderEb+0x84>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b12b      	cbz	r3, 8001afa <_ZN10MenuSystem14TriggerEncoderEb+0x6e>
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <_ZN10MenuSystem14TriggerEncoderEb+0x80>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <_ZN10MenuSystem14TriggerEncoderEb+0x7c>)
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e7f3      	b.n	8001ae2 <_ZN10MenuSystem14TriggerEncoderEb+0x56>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e7fa      	b.n	8001af4 <_ZN10MenuSystem14TriggerEncoderEb+0x68>
 8001afe:	bf00      	nop
 8001b00:	200010e1 	.word	0x200010e1
 8001b04:	200010e0 	.word	0x200010e0
 8001b08:	200010dc 	.word	0x200010dc
 8001b0c:	20000074 	.word	0x20000074
 8001b10:	20000078 	.word	0x20000078

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	2410      	movs	r4, #16
{
 8001b18:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	a80e      	add	r0, sp, #56	; 0x38
 8001b20:	f004 f93a 	bl	8005d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	2214      	movs	r2, #20
 8001b26:	2100      	movs	r1, #0
 8001b28:	a807      	add	r0, sp, #28
 8001b2a:	f004 f935 	bl	8005d98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b2e:	4622      	mov	r2, r4
 8001b30:	2100      	movs	r1, #0
 8001b32:	a803      	add	r0, sp, #12
 8001b34:	f004 f930 	bl	8005d98 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	2400      	movs	r4, #0
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <SystemClock_Config+0xac>)
 8001b3c:	9401      	str	r4, [sp, #4]
 8001b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <SystemClock_Config+0xb0>)
 8001b52:	9402      	str	r4, [sp, #8]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b66:	2601      	movs	r6, #1
 8001b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b6e:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b76:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b78:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b80:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b84:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b86:	2307      	movs	r3, #7
 8001b88:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b8a:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8c:	f001 fbd8 	bl	8003340 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b90:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b92:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b96:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9e:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ba2:	a807      	add	r0, sp, #28
 8001ba4:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ba8:	f001 fd9e 	bl	80036e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 144;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8001bac:	2303      	movs	r3, #3
 8001bae:	2090      	movs	r0, #144	; 0x90
 8001bb0:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb4:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001bb6:	9603      	str	r6, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb8:	f001 fe50 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001bbc:	b018      	add	sp, #96	; 0x60
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40007000 	.word	0x40007000

08001bc8 <main>:
{
 8001bc8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001bcc:	b097      	sub	sp, #92	; 0x5c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	2400      	movs	r4, #0
 8001bd0:	4e9a      	ldr	r6, [pc, #616]	; (8001e3c <main+0x274>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001bd2:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8001e74 <main+0x2ac>
  hi2c2.Instance = I2C2;
 8001bd6:	4f9a      	ldr	r7, [pc, #616]	; (8001e40 <main+0x278>)
  huart1.Instance = USART1;
 8001bd8:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8001e78 <main+0x2b0>
  HAL_Init();
 8001bdc:	f000 fb88 	bl	80022f0 <HAL_Init>
  SystemClock_Config();
 8001be0:	f7ff ff98 	bl	8001b14 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	2214      	movs	r2, #20
 8001be6:	2100      	movs	r1, #0
 8001be8:	a80d      	add	r0, sp, #52	; 0x34
 8001bea:	f004 f8d5 	bl	8005d98 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	9405      	str	r4, [sp, #20]
 8001bf0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6333      	str	r3, [r6, #48]	; 0x30
 8001bf8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	9305      	str	r3, [sp, #20]
 8001c00:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c02:	9406      	str	r4, [sp, #24]
 8001c04:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0a:	6333      	str	r3, [r6, #48]	; 0x30
 8001c0c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	9306      	str	r3, [sp, #24]
 8001c14:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	9407      	str	r4, [sp, #28]
 8001c18:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6333      	str	r3, [r6, #48]	; 0x30
 8001c20:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	9307      	str	r3, [sp, #28]
 8001c28:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	9408      	str	r4, [sp, #32]
 8001c2c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001c2e:	f043 0302 	orr.w	r3, r3, #2
 8001c32:	6333      	str	r3, [r6, #48]	; 0x30
 8001c34:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	210c      	movs	r1, #12
 8001c40:	4658      	mov	r0, fp
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001c44:	f000 fe56 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001c48:	4b7e      	ldr	r3, [pc, #504]	; (8001e44 <main+0x27c>)
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	4622      	mov	r2, r4
 8001c50:	2102      	movs	r1, #2
 8001c52:	f000 fe4f 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, GPIO_PIN_RESET);
 8001c56:	4622      	mov	r2, r4
 8001c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c5c:	487a      	ldr	r0, [pc, #488]	; (8001e48 <main+0x280>)
 8001c5e:	f000 fe49 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_A_Pin SW1_B_Pin SW1_BTN_Pin */
  GPIO_InitStruct.Pin = SW1_A_Pin|SW1_B_Pin|SW1_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c62:	4a7a      	ldr	r2, [pc, #488]	; (8001e4c <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	4878      	ldr	r0, [pc, #480]	; (8001e48 <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c66:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c70:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001c74:	250c      	movs	r5, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c76:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7a:	f000 fd5b 	bl	8002734 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	a90d      	add	r1, sp, #52	; 0x34
 8001c80:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	e9cd 590d 	strd	r5, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f000 fd53 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001c8e:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	e9cd 390d 	strd	r3, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001c94:	9b01      	ldr	r3, [sp, #4]
 8001c96:	a90d      	add	r1, sp, #52	; 0x34
 8001c98:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f000 fd49 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_BTN_Pin */
  GPIO_InitStruct.Pin = FIRE_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ca2:	4a6b      	ldr	r2, [pc, #428]	; (8001e50 <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(FIRE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	4868      	ldr	r0, [pc, #416]	; (8001e48 <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(FIRE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	a90d      	add	r1, sp, #52	; 0x34
 8001cb2:	f000 fd3f 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_LED_Pin */
  GPIO_InitStruct.Pin = FIRE_LED_Pin;
 8001cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8001cba:	a90d      	add	r1, sp, #52	; 0x34
 8001cbc:	4862      	ldr	r0, [pc, #392]	; (8001e48 <main+0x280>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	e9cd 290d 	strd	r2, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f000 fd35 	bl	8002734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cca:	4622      	mov	r2, r4
 8001ccc:	4621      	mov	r1, r4
 8001cce:	2017      	movs	r0, #23
 8001cd0:	f000 fb4c 	bl	800236c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cd4:	2017      	movs	r0, #23
 8001cd6:	f000 fb7d 	bl	80023d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cda:	4622      	mov	r2, r4
 8001cdc:	4621      	mov	r1, r4
 8001cde:	2028      	movs	r0, #40	; 0x28
 8001ce0:	f000 fb44 	bl	800236c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ce4:	2028      	movs	r0, #40	; 0x28
 8001ce6:	f000 fb75 	bl	80023d4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cea:	9404      	str	r4, [sp, #16]
 8001cec:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8001cee:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001cf2:	6332      	str	r2, [r6, #48]	; 0x30
 8001cf4:	6b32      	ldr	r2, [r6, #48]	; 0x30
  hi2s2.Instance = SPI2;
 8001cf6:	4e57      	ldr	r6, [pc, #348]	; (8001e54 <main+0x28c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cf8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cfc:	9204      	str	r2, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001cfe:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d00:	9a04      	ldr	r2, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001d02:	200f      	movs	r0, #15
 8001d04:	4622      	mov	r2, r4
 8001d06:	f000 fb31 	bl	800236c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d0a:	200f      	movs	r0, #15
 8001d0c:	f000 fb62 	bl	80023d4 <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 100000;
 8001d10:	4851      	ldr	r0, [pc, #324]	; (8001e58 <main+0x290>)
 8001d12:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <main+0x294>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d14:	623c      	str	r4, [r7, #32]
  hi2c2.Init.ClockSpeed = 100000;
 8001d16:	e9c7 0200 	strd	r0, r2, [r7]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d1e:	4638      	mov	r0, r7
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d20:	e9c7 2404 	strd	r2, r4, [r7, #16]
  hi2c2.Init.OwnAddress1 = 0;
 8001d24:	e9c7 4402 	strd	r4, r4, [r7, #8]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d28:	e9c7 4406 	strd	r4, r4, [r7, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d2c:	f000 fec6 	bl	8002abc <HAL_I2C_Init>
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001d30:	4a4b      	ldr	r2, [pc, #300]	; (8001e60 <main+0x298>)
 8001d32:	f44f 7a00 	mov.w	sl, #512	; 0x200
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001d36:	f64b 3180 	movw	r1, #48000	; 0xbb80
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001d3a:	4630      	mov	r0, r6
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001d3c:	e9c6 2a00 	strd	r2, sl, [r6]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001d40:	f8c6 a010 	str.w	sl, [r6, #16]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001d44:	e9c6 1405 	strd	r1, r4, [r6, #20]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d48:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001d4c:	e9c6 4907 	strd	r4, r9, [r6, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001d50:	f001 f834 	bl	8002dbc <HAL_I2S_Init>
  huart1.Init.BaudRate = 115200;
 8001d54:	f8df c124 	ldr.w	ip, [pc, #292]	; 8001e7c <main+0x2b4>
 8001d58:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d5c:	4640      	mov	r0, r8
  huart1.Init.BaudRate = 115200;
 8001d5e:	e9c8 c100 	strd	ip, r1, [r8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d62:	e9c8 4504 	strd	r4, r5, [r8, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d66:	e9c8 4402 	strd	r4, r4, [r8, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6a:	e9c8 4406 	strd	r4, r4, [r8, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d6e:	f002 f927 	bl	8003fc0 <HAL_UART_Init>
  hrng.Instance = RNG;
 8001d72:	483c      	ldr	r0, [pc, #240]	; (8001e64 <main+0x29c>)
 8001d74:	493c      	ldr	r1, [pc, #240]	; (8001e68 <main+0x2a0>)
  hspi3.Instance = SPI3;
 8001d76:	4d3d      	ldr	r5, [pc, #244]	; (8001e6c <main+0x2a4>)
  hrng.Instance = RNG;
 8001d78:	6001      	str	r1, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001d7a:	f001 fe35 	bl	80039e8 <HAL_RNG_Init>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d7e:	f8df e100 	ldr.w	lr, [pc, #256]	; 8001e80 <main+0x2b8>
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d82:	f8c5 a018 	str.w	sl, [r5, #24]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001d8a:	e9c5 e100 	strd	lr, r1, [r5]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d8e:	f04f 0a18 	mov.w	sl, #24
  hspi3.Init.CRCPolynomial = 10;
 8001d92:	210a      	movs	r1, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d94:	4628      	mov	r0, r5
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d96:	e9c5 a407 	strd	sl, r4, [r5, #28]
  hspi3.Init.CRCPolynomial = 10;
 8001d9a:	62e9      	str	r1, [r5, #44]	; 0x2c
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d9c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da0:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da4:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001da8:	f001 fe9e 	bl	8003ae8 <HAL_SPI_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dac:	4652      	mov	r2, sl
 8001dae:	4621      	mov	r1, r4
 8001db0:	a810      	add	r0, sp, #64	; 0x40
 8001db2:	f003 fff1 	bl	8005d98 <memset>
  htim1.Instance = TIM1;
 8001db6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8001e84 <main+0x2bc>
 8001dba:	492d      	ldr	r1, [pc, #180]	; (8001e70 <main+0x2a8>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	f8ca 4008 	str.w	r4, [sl, #8]
  htim1.Init.Prescaler = 0;
 8001dc0:	e9ca 1400 	strd	r1, r4, [sl]
  htim1.Init.Period = 65535;
 8001dc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001dc8:	2302      	movs	r3, #2
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	e9ca 1403 	strd	r1, r4, [sl, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001dce:	2103      	movs	r1, #3
 8001dd0:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001dd4:	4650      	mov	r0, sl
 8001dd6:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd8:	e9cd 3912 	strd	r3, r9, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	e9ca 4405 	strd	r4, r4, [sl, #20]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001de4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001de8:	f001 ffec 	bl	8003dc4 <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dec:	a909      	add	r1, sp, #36	; 0x24
 8001dee:	4650      	mov	r0, sl
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df4:	f002 f832 	bl	8003e5c <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001df8:	213c      	movs	r1, #60	; 0x3c
 8001dfa:	4650      	mov	r0, sl
 8001dfc:	f001 ff59 	bl	8003cb2 <HAL_TIM_Encoder_Start>
  lcd.CEPIN = LCD_CS_Pin;
 8001e00:	2204      	movs	r2, #4
  lcd.BLPORT = LCD_BL_GPIO_Port;
 8001e02:	9b01      	ldr	r3, [sp, #4]
  lcd.CEPIN = LCD_CS_Pin;
 8001e04:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  lcd.DCPIN = LCD_DC_Pin;
 8001e08:	2208      	movs	r2, #8
 8001e0a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  lcd.BLPORT = LCD_BL_GPIO_Port;
 8001e0e:	9311      	str	r3, [sp, #68]	; 0x44
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 8001e10:	aa0d      	add	r2, sp, #52	; 0x34
  lcd.BLPIN = LCD_BL_Pin;
 8001e12:	f04f 0302 	mov.w	r3, #2
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 8001e16:	a903      	add	r1, sp, #12
 8001e18:	a809      	add	r0, sp, #36	; 0x24
  comms.i2s = &hi2s2;
 8001e1a:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
  comms.uart = &huart1;
 8001e1e:	e9cd 580b 	strd	r5, r8, [sp, #44]	; 0x2c
  enc.tim1 = &htim1;
 8001e22:	f8cd a00c 	str.w	sl, [sp, #12]
  lcd.CEPORT = LCD_CS_GPIO_Port;
 8001e26:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  lcd.DCPORT = LCD_DC_GPIO_Port;
 8001e2a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  lcd.BLPIN = LCD_BL_Pin;
 8001e2e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  lcd.SPICH = &hspi3;
 8001e32:	9513      	str	r5, [sp, #76]	; 0x4c
  maincpp(&comms, &enc, &lcd); /// we can't use c++ reference here
 8001e34:	f7ff fb24 	bl	8001480 <maincpp>
 8001e38:	e7fe      	b.n	8001e38 <main+0x270>
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	200010fc 	.word	0x200010fc
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	10110000 	.word	0x10110000
 8001e50:	10310000 	.word	0x10310000
 8001e54:	20001298 	.word	0x20001298
 8001e58:	40005800 	.word	0x40005800
 8001e5c:	000186a0 	.word	0x000186a0
 8001e60:	40003800 	.word	0x40003800
 8001e64:	20001228 	.word	0x20001228
 8001e68:	50060800 	.word	0x50060800
 8001e6c:	20001150 	.word	0x20001150
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40020000 	.word	0x40020000
 8001e78:	200011a8 	.word	0x200011a8
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40003c00 	.word	0x40003c00
 8001e84:	200011e8 	.word	0x200011e8

08001e88 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_MspInit+0x34>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	9100      	str	r1, [sp, #0]
 8001e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e9e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	9101      	str	r1, [sp, #4]
 8001ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	b002      	add	sp, #8
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b530      	push	{r4, r5, lr}
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	2214      	movs	r2, #20
 8001ecc:	2100      	movs	r1, #0
 8001ece:	a803      	add	r0, sp, #12
 8001ed0:	f003 ff62 	bl	8005d98 <memset>
  if(hi2c->Instance==I2C2)
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_I2C_MspInit+0x68>)
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d124      	bne.n	8001f26 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	4c14      	ldr	r4, [pc, #80]	; (8001f30 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	4815      	ldr	r0, [pc, #84]	; (8001f34 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	9501      	str	r5, [sp, #4]
 8001ee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	6323      	str	r3, [r4, #48]	; 0x30
 8001eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001efa:	2312      	movs	r3, #18
 8001efc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2101      	movs	r1, #1
 8001f02:	2303      	movs	r3, #3
 8001f04:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f08:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f0c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f000 fc11 	bl	8002734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f12:	9502      	str	r5, [sp, #8]
 8001f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f1a:	6423      	str	r3, [r4, #64]	; 0x40
 8001f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f26:	b009      	add	sp, #36	; 0x24
 8001f28:	bd30      	pop	{r4, r5, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40005800 	.word	0x40005800
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020400 	.word	0x40020400

08001f38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	2214      	movs	r2, #20
 8001f42:	2100      	movs	r1, #0
 8001f44:	a803      	add	r0, sp, #12
 8001f46:	f003 ff27 	bl	8005d98 <memset>
  if(hi2s->Instance==SPI2)
 8001f4a:	6832      	ldr	r2, [r6, #0]
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_I2S_MspInit+0xf0>)
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d167      	bne.n	8002022 <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f52:	2500      	movs	r5, #0
 8001f54:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001f58:	9500      	str	r5, [sp, #0]
 8001f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	4833      	ldr	r0, [pc, #204]	; (800202c <HAL_I2S_MspInit+0xf4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
 8001f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f66:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f6a:	9200      	str	r2, [sp, #0]
 8001f6c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	9501      	str	r5, [sp, #4]
 8001f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f72:	f042 0202 	orr.w	r2, r2, #2
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
 8001f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7a:	f002 0202 	and.w	r2, r2, #2
 8001f7e:	9201      	str	r2, [sp, #4]
 8001f80:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f82:	9502      	str	r5, [sp, #8]
 8001f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f86:	f042 0204 	orr.w	r2, r2, #4
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f98:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fa6:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f000 fbc3 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001fb8:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	481c      	ldr	r0, [pc, #112]	; (800202c <HAL_I2S_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001fbc:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fbe:	2740      	movs	r7, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f000 fbb6 	bl	8002734 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc8:	a903      	add	r1, sp, #12
 8001fca:	4819      	ldr	r0, [pc, #100]	; (8002030 <HAL_I2S_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fcc:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	e9cd 5505 	strd	r5, r5, [sp, #20]

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001fd8:	4c16      	ldr	r4, [pc, #88]	; (8002034 <HAL_I2S_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	f000 fbab 	bl	8002734 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_I2S_MspInit+0x100>)
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001fe0:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001fe2:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fee:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ffa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001ffe:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002002:	2304      	movs	r3, #4
 8002004:	e9c4 0308 	strd	r0, r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002008:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800200a:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800200c:	e9c4 7502 	strd	r7, r5, [r4, #8]
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002010:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002014:	f000 fa18 	bl	8002448 <HAL_DMA_Init>
 8002018:	b108      	cbz	r0, 800201e <HAL_I2S_MspInit+0xe6>
    {
      Error_Handler();
 800201a:	f7ff ff35 	bl	8001e88 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800201e:	63b4      	str	r4, [r6, #56]	; 0x38
 8002020:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002022:	b008      	add	sp, #32
 8002024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002028:	40003800 	.word	0x40003800
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	20001238 	.word	0x20001238
 8002038:	40026070 	.word	0x40026070

0800203c <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 800203c:	6802      	ldr	r2, [r0, #0]
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RNG_MspInit+0x28>)
 8002040:	429a      	cmp	r2, r3
{
 8002042:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8002044:	d10b      	bne.n	800205e <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_RNG_MspInit+0x2c>)
 800204c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002052:	635a      	str	r2, [r3, #52]	; 0x34
 8002054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800205e:	b002      	add	sp, #8
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	50060800 	.word	0x50060800
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800206c:	b510      	push	{r4, lr}
 800206e:	4604      	mov	r4, r0
 8002070:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	2214      	movs	r2, #20
 8002074:	2100      	movs	r1, #0
 8002076:	a803      	add	r0, sp, #12
 8002078:	f003 fe8e 	bl	8005d98 <memset>
  if(hspi->Instance==SPI3)
 800207c:	6822      	ldr	r2, [r4, #0]
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_SPI_MspInit+0x64>)
 8002080:	429a      	cmp	r2, r3
 8002082:	d123      	bne.n	80020cc <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002084:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002088:	2100      	movs	r1, #0
 800208a:	9101      	str	r1, [sp, #4]
 800208c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	4811      	ldr	r0, [pc, #68]	; (80020d4 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
 8002096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002098:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800209c:	9201      	str	r2, [sp, #4]
 800209e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a0:	9102      	str	r1, [sp, #8]
 80020a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a4:	f042 0204 	orr.w	r2, r2, #4
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	9302      	str	r3, [sp, #8]
 80020b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80020b8:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020ba:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020c0:	2306      	movs	r3, #6
 80020c2:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	a903      	add	r1, sp, #12
 80020c8:	f000 fb34 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020cc:	b008      	add	sp, #32
 80020ce:	bd10      	pop	{r4, pc}
 80020d0:	40003c00 	.word	0x40003c00
 80020d4:	40020800 	.word	0x40020800

080020d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020d8:	b510      	push	{r4, lr}
 80020da:	4604      	mov	r4, r0
 80020dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	2214      	movs	r2, #20
 80020e0:	2100      	movs	r1, #0
 80020e2:	a803      	add	r0, sp, #12
 80020e4:	f003 fe58 	bl	8005d98 <memset>
  if(htim_encoder->Instance==TIM1)
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_TIM_Encoder_MspInit+0x64>)
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d122      	bne.n	8002136 <HAL_TIM_Encoder_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020f0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80020f4:	2100      	movs	r1, #0
 80020f6:	9101      	str	r1, [sp, #4]
 80020f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	4811      	ldr	r0, [pc, #68]	; (8002140 <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
 8002102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002104:	f002 0201 	and.w	r2, r2, #1
 8002108:	9201      	str	r2, [sp, #4]
 800210a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	9102      	str	r1, [sp, #8]
 800210e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002124:	2302      	movs	r3, #2
 8002126:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800212c:	2301      	movs	r3, #1
 800212e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002130:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f000 faff 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002136:	b008      	add	sp, #32
 8002138:	bd10      	pop	{r4, pc}
 800213a:	bf00      	nop
 800213c:	40010000 	.word	0x40010000
 8002140:	40020000 	.word	0x40020000

08002144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002144:	b510      	push	{r4, lr}
 8002146:	4604      	mov	r4, r0
 8002148:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	2214      	movs	r2, #20
 800214c:	2100      	movs	r1, #0
 800214e:	a803      	add	r0, sp, #12
 8002150:	f003 fe22 	bl	8005d98 <memset>
  if(huart->Instance==USART1)
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_UART_MspInit+0x64>)
 8002158:	429a      	cmp	r2, r3
 800215a:	d122      	bne.n	80021a2 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800215c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002160:	2100      	movs	r1, #0
 8002162:	9101      	str	r1, [sp, #4]
 8002164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	4811      	ldr	r0, [pc, #68]	; (80021ac <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002168:	f042 0210 	orr.w	r2, r2, #16
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
 800216e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002170:	f002 0210 	and.w	r2, r2, #16
 8002174:	9201      	str	r2, [sp, #4]
 8002176:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002178:	9102      	str	r1, [sp, #8]
 800217a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217c:	f042 0202 	orr.w	r2, r2, #2
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	9302      	str	r3, [sp, #8]
 800218a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	22c0      	movs	r2, #192	; 0xc0
 800218e:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002190:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002196:	2307      	movs	r3, #7
 8002198:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	a903      	add	r1, sp, #12
 800219e:	f000 fac9 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021a2:	b008      	add	sp, #32
 80021a4:	bd10      	pop	{r4, pc}
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	40020400 	.word	0x40020400

080021b0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021b0:	4770      	bx	lr

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	e7fe      	b.n	80021b4 <MemManage_Handler>

080021b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b6:	e7fe      	b.n	80021b6 <BusFault_Handler>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	e7fe      	b.n	80021b8 <UsageFault_Handler>

080021ba <SVC_Handler>:
 80021ba:	4770      	bx	lr

080021bc <DebugMon_Handler>:
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:
 80021be:	4770      	bx	lr

080021c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c0:	f000 b8b0 	b.w	8002324 <HAL_IncTick>

080021c4 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80021c4:	4801      	ldr	r0, [pc, #4]	; (80021cc <DMA1_Stream4_IRQHandler+0x8>)
 80021c6:	f000 b9f7 	b.w	80025b8 <HAL_DMA_IRQHandler>
 80021ca:	bf00      	nop
 80021cc:	20001238 	.word	0x20001238

080021d0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  // TriggerSound();
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021d0:	2080      	movs	r0, #128	; 0x80
 80021d2:	f000 bb95 	b.w	8002900 <HAL_GPIO_EXTI_IRQHandler>

080021d6 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80021d6:	2001      	movs	r0, #1
 80021d8:	4770      	bx	lr

080021da <_kill>:

int _kill(int pid, int sig)
{
 80021da:	b508      	push	{r3, lr}
	errno = EINVAL;
 80021dc:	f003 fdaa 	bl	8005d34 <__errno>
 80021e0:	2316      	movs	r3, #22
 80021e2:	6003      	str	r3, [r0, #0]
	return -1;
}
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021e8:	bd08      	pop	{r3, pc}

080021ea <_exit>:

void _exit (int status)
{
 80021ea:	b508      	push	{r3, lr}
	errno = EINVAL;
 80021ec:	f003 fda2 	bl	8005d34 <__errno>
 80021f0:	2316      	movs	r3, #22
 80021f2:	6003      	str	r3, [r0, #0]
 80021f4:	e7fe      	b.n	80021f4 <_exit+0xa>
	...

080021f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <_sbrk+0x30>)
 80021fa:	6819      	ldr	r1, [r3, #0]
{
 80021fc:	b510      	push	{r4, lr}
 80021fe:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8002200:	b909      	cbnz	r1, 8002206 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002202:	490a      	ldr	r1, [pc, #40]	; (800222c <_sbrk+0x34>)
 8002204:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	4909      	ldr	r1, [pc, #36]	; (8002230 <_sbrk+0x38>)
 800220a:	4c0a      	ldr	r4, [pc, #40]	; (8002234 <_sbrk+0x3c>)
 800220c:	4402      	add	r2, r0
 800220e:	1b09      	subs	r1, r1, r4
 8002210:	428a      	cmp	r2, r1
 8002212:	d906      	bls.n	8002222 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002214:	f003 fd8e 	bl	8005d34 <__errno>
 8002218:	230c      	movs	r3, #12
 800221a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800221c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002220:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002222:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8002224:	e7fc      	b.n	8002220 <_sbrk+0x28>
 8002226:	bf00      	nop
 8002228:	200010e4 	.word	0x200010e4
 800222c:	200012e8 	.word	0x200012e8
 8002230:	20020000 	.word	0x20020000
 8002234:	00000400 	.word	0x00000400

08002238 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SystemInit+0x18>)
 800223a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800223e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800224a:	609a      	str	r2, [r3, #8]
#endif
}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800228c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002258:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800225a:	e003      	b.n	8002264 <LoopCopyDataInit>

0800225c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800225e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002260:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002262:	3104      	adds	r1, #4

08002264 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002264:	480b      	ldr	r0, [pc, #44]	; (8002294 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002268:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800226a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800226c:	d3f6      	bcc.n	800225c <CopyDataInit>
  ldr  r2, =_sbss
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002270:	e002      	b.n	8002278 <LoopFillZerobss>

08002272 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002272:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002274:	f842 3b04 	str.w	r3, [r2], #4

08002278 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800227a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800227c:	d3f9      	bcc.n	8002272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800227e:	f7ff ffdb 	bl	8002238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f003 fd5d 	bl	8005d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002286:	f7ff fc9f 	bl	8001bc8 <main>
  bx  lr    
 800228a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800228c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002290:	0800803c 	.word	0x0800803c
  ldr  r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002298:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 800229c:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 80022a0:	200012e8 	.word	0x200012e8

080022a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC_IRQHandler>
	...

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_InitTick+0x3c>)
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_InitTick+0x40>)
{
 80022ae:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	7818      	ldrb	r0, [r3, #0]
 80022b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b6:	fbb3 f3f0 	udiv	r3, r3, r0
 80022ba:	6810      	ldr	r0, [r2, #0]
 80022bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80022c0:	f000 f896 	bl	80023f0 <HAL_SYSTICK_Config>
 80022c4:	4604      	mov	r4, r0
 80022c6:	b958      	cbnz	r0, 80022e0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c8:	2d0f      	cmp	r5, #15
 80022ca:	d809      	bhi.n	80022e0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	4602      	mov	r2, r0
 80022ce:	4629      	mov	r1, r5
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d4:	f000 f84a 	bl	800236c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <HAL_InitTick+0x44>)
 80022da:	4620      	mov	r0, r4
 80022dc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80022de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80022e0:	2001      	movs	r0, #1
 80022e2:	e7fc      	b.n	80022de <HAL_InitTick+0x36>
 80022e4:	2000007c 	.word	0x2000007c
 80022e8:	20000080 	.word	0x20000080
 80022ec:	20000084 	.word	0x20000084

080022f0 <HAL_Init>:
{
 80022f0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_Init+0x30>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002302:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 f81b 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff ffc8 	bl	80022a8 <HAL_InitTick>
  HAL_MspInit();
 8002318:	f7ff fdb8 	bl	8001e8c <HAL_MspInit>
}
 800231c:	2000      	movs	r0, #0
 800231e:	bd08      	pop	{r3, pc}
 8002320:	40023c00 	.word	0x40023c00

08002324 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002324:	4a03      	ldr	r2, [pc, #12]	; (8002334 <HAL_IncTick+0x10>)
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <HAL_IncTick+0x14>)
 8002328:	6811      	ldr	r1, [r2, #0]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	440b      	add	r3, r1
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200012e0 	.word	0x200012e0
 8002338:	20000080 	.word	0x20000080

0800233c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800233c:	4b01      	ldr	r3, [pc, #4]	; (8002344 <HAL_GetTick+0x8>)
 800233e:	6818      	ldr	r0, [r3, #0]
}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200012e0 	.word	0x200012e0

08002348 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800234a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	0200      	lsls	r0, r0, #8
 800235a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002362:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002364:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236e:	b570      	push	{r4, r5, r6, lr}
 8002370:	68dc      	ldr	r4, [r3, #12]
 8002372:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002376:	f1c4 0507 	rsb	r5, r4, #7
 800237a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	bf28      	it	cs
 8002382:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002388:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	bf8c      	ite	hi
 8002390:	3c03      	subhi	r4, #3
 8002392:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	ea21 0303 	bic.w	r3, r1, r3
 8002398:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239a:	fa06 f404 	lsl.w	r4, r6, r4
 800239e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80023a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	bfa8      	it	ge
 80023aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80023ae:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	bfbc      	itt	lt
 80023b4:	f000 000f 	andlt.w	r0, r0, #15
 80023b8:	4a05      	ldrlt	r2, [pc, #20]	; (80023d0 <HAL_NVIC_SetPriority+0x64>)
 80023ba:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	bfaa      	itet	ge
 80023be:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	e000ed14 	.word	0xe000ed14

080023d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80023d4:	2800      	cmp	r0, #0
 80023d6:	db08      	blt.n	80023ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d8:	0942      	lsrs	r2, r0, #5
 80023da:	2301      	movs	r3, #1
 80023dc:	f000 001f 	and.w	r0, r0, #31
 80023e0:	fa03 f000 	lsl.w	r0, r3, r0
 80023e4:	4b01      	ldr	r3, [pc, #4]	; (80023ec <HAL_NVIC_EnableIRQ+0x18>)
 80023e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	3801      	subs	r0, #1
 80023f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023f6:	d20a      	bcs.n	800240e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	21f0      	movs	r1, #240	; 0xf0
 8002400:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800241c:	6803      	ldr	r3, [r0, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	2118      	movs	r1, #24
 800242a:	3a10      	subs	r2, #16
 800242c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002430:	4904      	ldr	r1, [pc, #16]	; (8002444 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002432:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002434:	bf88      	it	hi
 8002436:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002438:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800243a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800243c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800243e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	08007ba0 	.word	0x08007ba0

08002448 <HAL_DMA_Init>:
{
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff ff76 	bl	800233c <HAL_GetTick>
 8002450:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002452:	2c00      	cmp	r4, #0
 8002454:	d071      	beq.n	800253a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8002456:	2300      	movs	r3, #0
 8002458:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800245c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800245e:	2302      	movs	r3, #2
 8002460:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002464:	6813      	ldr	r3, [r2, #0]
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246c:	6821      	ldr	r1, [r4, #0]
 800246e:	680b      	ldr	r3, [r1, #0]
 8002470:	07d8      	lsls	r0, r3, #31
 8002472:	d43c      	bmi.n	80024ee <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8002474:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002476:	4d32      	ldr	r5, [pc, #200]	; (8002540 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002478:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800247a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002480:	4313      	orrs	r3, r2
 8002482:	68e2      	ldr	r2, [r4, #12]
 8002484:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	6922      	ldr	r2, [r4, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	6962      	ldr	r2, [r4, #20]
 800248c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	69e2      	ldr	r2, [r4, #28]
 8002490:	4303      	orrs	r3, r0
 8002492:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002494:	6a22      	ldr	r2, [r4, #32]
 8002496:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002498:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800249a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024a0:	bf02      	ittt	eq
 80024a2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80024a6:	4335      	orreq	r5, r6
 80024a8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80024aa:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80024ac:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ae:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80024b4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b8:	d10b      	bne.n	80024d2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80024ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024bc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80024be:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c0:	b13d      	cbz	r5, 80024d2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024c2:	b9f8      	cbnz	r0, 8002504 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80024c4:	2a01      	cmp	r2, #1
 80024c6:	d02d      	beq.n	8002524 <HAL_DMA_Init+0xdc>
 80024c8:	d301      	bcc.n	80024ce <HAL_DMA_Init+0x86>
 80024ca:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024cc:	d101      	bne.n	80024d2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ce:	01ea      	lsls	r2, r5, #7
 80024d0:	d42b      	bmi.n	800252a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80024d2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff ffa1 	bl	800241c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024dc:	233f      	movs	r3, #63	; 0x3f
 80024de:	4093      	lsls	r3, r2
 80024e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80024e4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80024e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80024ec:	e009      	b.n	8002502 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ee:	f7ff ff25 	bl	800233c <HAL_GetTick>
 80024f2:	1b40      	subs	r0, r0, r5
 80024f4:	2805      	cmp	r0, #5
 80024f6:	d9b9      	bls.n	800246c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f8:	2320      	movs	r3, #32
 80024fa:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80024fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002502:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002504:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002508:	d113      	bne.n	8002532 <HAL_DMA_Init+0xea>
    switch (tmp)
 800250a:	2a03      	cmp	r2, #3
 800250c:	d8e1      	bhi.n	80024d2 <HAL_DMA_Init+0x8a>
 800250e:	a001      	add	r0, pc, #4	; (adr r0, 8002514 <HAL_DMA_Init+0xcc>)
 8002510:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002514:	0800252b 	.word	0x0800252b
 8002518:	080024cf 	.word	0x080024cf
 800251c:	0800252b 	.word	0x0800252b
 8002520:	08002525 	.word	0x08002525
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002524:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002528:	d1d3      	bne.n	80024d2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800252a:	2340      	movs	r3, #64	; 0x40
 800252c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800252e:	2001      	movs	r0, #1
 8002530:	e7e5      	b.n	80024fe <HAL_DMA_Init+0xb6>
    switch (tmp)
 8002532:	2a02      	cmp	r2, #2
 8002534:	d9f9      	bls.n	800252a <HAL_DMA_Init+0xe2>
 8002536:	2a03      	cmp	r2, #3
 8002538:	e7c8      	b.n	80024cc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800253a:	2001      	movs	r0, #1
 800253c:	e7e1      	b.n	8002502 <HAL_DMA_Init+0xba>
 800253e:	bf00      	nop
 8002540:	f010803f 	.word	0xf010803f

08002544 <HAL_DMA_Start_IT>:
{
 8002544:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002546:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800254a:	2c01      	cmp	r4, #1
 800254c:	d032      	beq.n	80025b4 <HAL_DMA_Start_IT+0x70>
 800254e:	2401      	movs	r4, #1
 8002550:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002554:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002558:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800255a:	2c01      	cmp	r4, #1
 800255c:	f04f 0500 	mov.w	r5, #0
 8002560:	f04f 0402 	mov.w	r4, #2
 8002564:	d124      	bne.n	80025b0 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002566:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800256a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800256e:	6825      	ldr	r5, [r4, #0]
 8002570:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002574:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002576:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002578:	6883      	ldr	r3, [r0, #8]
 800257a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800257c:	bf0e      	itee	eq
 800257e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002580:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002582:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002584:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002586:	bf08      	it	eq
 8002588:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258a:	233f      	movs	r3, #63	; 0x3f
 800258c:	4093      	lsls	r3, r2
 800258e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	f043 0316 	orr.w	r3, r3, #22
 8002596:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002598:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800259a:	b11b      	cbz	r3, 80025a4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2000      	movs	r0, #0
}
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80025b0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80025b4:	2002      	movs	r0, #2
 80025b6:	e7fa      	b.n	80025ae <HAL_DMA_Start_IT+0x6a>

080025b8 <HAL_DMA_IRQHandler>:
{
 80025b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025be:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80025c2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80025c6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c8:	2208      	movs	r2, #8
 80025ca:	409a      	lsls	r2, r3
 80025cc:	4232      	tst	r2, r6
{
 80025ce:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d0:	d00c      	beq.n	80025ec <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025d2:	6801      	ldr	r1, [r0, #0]
 80025d4:	6808      	ldr	r0, [r1, #0]
 80025d6:	0740      	lsls	r0, r0, #29
 80025d8:	d508      	bpl.n	80025ec <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025da:	6808      	ldr	r0, [r1, #0]
 80025dc:	f020 0004 	bic.w	r0, r0, #4
 80025e0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025e2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ec:	2201      	movs	r2, #1
 80025ee:	409a      	lsls	r2, r3
 80025f0:	4232      	tst	r2, r6
 80025f2:	d008      	beq.n	8002606 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025f4:	6821      	ldr	r1, [r4, #0]
 80025f6:	6949      	ldr	r1, [r1, #20]
 80025f8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025fa:	bf41      	itttt	mi
 80025fc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025fe:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002600:	f042 0202 	orrmi.w	r2, r2, #2
 8002604:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002606:	2204      	movs	r2, #4
 8002608:	409a      	lsls	r2, r3
 800260a:	4232      	tst	r2, r6
 800260c:	d008      	beq.n	8002620 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800260e:	6821      	ldr	r1, [r4, #0]
 8002610:	6809      	ldr	r1, [r1, #0]
 8002612:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002614:	bf41      	itttt	mi
 8002616:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002618:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800261a:	f042 0204 	orrmi.w	r2, r2, #4
 800261e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	2210      	movs	r2, #16
 8002622:	409a      	lsls	r2, r3
 8002624:	4232      	tst	r2, r6
 8002626:	d010      	beq.n	800264a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	0709      	lsls	r1, r1, #28
 800262e:	d50c      	bpl.n	800264a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002630:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	0350      	lsls	r0, r2, #13
 8002636:	d537      	bpl.n	80026a8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0319      	lsls	r1, r3, #12
 800263c:	d401      	bmi.n	8002642 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800263e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002640:	e000      	b.n	8002644 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002642:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002644:	b10b      	cbz	r3, 800264a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002646:	4620      	mov	r0, r4
 8002648:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800264a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800264c:	2220      	movs	r2, #32
 800264e:	408a      	lsls	r2, r1
 8002650:	4232      	tst	r2, r6
 8002652:	d03a      	beq.n	80026ca <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	06c6      	lsls	r6, r0, #27
 800265a:	d536      	bpl.n	80026ca <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800265c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800265e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002662:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002664:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002666:	d127      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002668:	f022 0216 	bic.w	r2, r2, #22
 800266c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002674:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002676:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002678:	b90a      	cbnz	r2, 800267e <HAL_DMA_IRQHandler+0xc6>
 800267a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800267c:	b11a      	cbz	r2, 8002686 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f022 0208 	bic.w	r2, r2, #8
 8002684:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002686:	233f      	movs	r3, #63	; 0x3f
 8002688:	408b      	lsls	r3, r1
 800268a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002692:	2301      	movs	r3, #1
 8002694:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002698:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800269a:	2b00      	cmp	r3, #0
 800269c:	d045      	beq.n	800272a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800269e:	4620      	mov	r0, r4
}
 80026a0:	b003      	add	sp, #12
 80026a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80026a6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ac:	bf5e      	ittt	pl
 80026ae:	681a      	ldrpl	r2, [r3, #0]
 80026b0:	f022 0208 	bicpl.w	r2, r2, #8
 80026b4:	601a      	strpl	r2, [r3, #0]
 80026b6:	e7c2      	b.n	800263e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b8:	0350      	lsls	r0, r2, #13
 80026ba:	d527      	bpl.n	800270c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0319      	lsls	r1, r3, #12
 80026c0:	d431      	bmi.n	8002726 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80026c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80026c4:	b10b      	cbz	r3, 80026ca <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80026c6:	4620      	mov	r0, r4
 80026c8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026cc:	b36b      	cbz	r3, 800272a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026d0:	07da      	lsls	r2, r3, #31
 80026d2:	d519      	bpl.n	8002708 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 80026d4:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80026d6:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80026d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80026dc:	6813      	ldr	r3, [r2, #0]
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80026e8:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80026ec:	9b01      	ldr	r3, [sp, #4]
 80026ee:	3301      	adds	r3, #1
 80026f0:	42bb      	cmp	r3, r7
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	d802      	bhi.n	80026fc <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026f6:	6813      	ldr	r3, [r2, #0]
 80026f8:	07db      	lsls	r3, r3, #31
 80026fa:	d4f7      	bmi.n	80026ec <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80026fc:	2300      	movs	r3, #0
 80026fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002702:	2301      	movs	r3, #1
 8002704:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002708:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800270a:	e7c6      	b.n	800269a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002712:	d108      	bne.n	8002726 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	f021 0110 	bic.w	r1, r1, #16
 800271a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800271c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800271e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002722:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002728:	e7cc      	b.n	80026c4 <HAL_DMA_IRQHandler+0x10c>
}
 800272a:	b003      	add	sp, #12
 800272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272e:	bf00      	nop
 8002730:	2000007c 	.word	0x2000007c

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002738:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80028ec <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002740:	4a68      	ldr	r2, [pc, #416]	; (80028e4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002742:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80028f0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002748:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800274a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800274e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002750:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8002752:	42ac      	cmp	r4, r5
 8002754:	f040 80b0 	bne.w	80028b8 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002758:	684c      	ldr	r4, [r1, #4]
 800275a:	f024 0c10 	bic.w	ip, r4, #16
 800275e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002762:	2603      	movs	r6, #3
 8002764:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 8002768:	fa06 f60e 	lsl.w	r6, r6, lr
 800276c:	2f01      	cmp	r7, #1
 800276e:	ea6f 0606 	mvn.w	r6, r6
 8002772:	d811      	bhi.n	8002798 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8002774:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002776:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277a:	68cf      	ldr	r7, [r1, #12]
 800277c:	fa07 f70e 	lsl.w	r7, r7, lr
 8002780:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002784:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002786:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002788:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800278c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002790:	409f      	lsls	r7, r3
 8002792:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002796:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002798:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800279a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279e:	688f      	ldr	r7, [r1, #8]
 80027a0:	fa07 f70e 	lsl.w	r7, r7, lr
 80027a4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80027ac:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ae:	d116      	bne.n	80027de <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80027b0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80027b4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80027bc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80027c4:	f04f 0c0f 	mov.w	ip, #15
 80027c8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80027cc:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d0:	690f      	ldr	r7, [r1, #16]
 80027d2:	fa07 f70b 	lsl.w	r7, r7, fp
 80027d6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80027da:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80027de:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e2:	f004 0703 	and.w	r7, r4, #3
 80027e6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80027ea:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80027ee:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f0:	00e6      	lsls	r6, r4, #3
 80027f2:	d561      	bpl.n	80028b8 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f4:	f04f 0b00 	mov.w	fp, #0
 80027f8:	f8cd b00c 	str.w	fp, [sp, #12]
 80027fc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002800:	4e39      	ldr	r6, [pc, #228]	; (80028e8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002806:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800280a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800280e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002812:	9703      	str	r7, [sp, #12]
 8002814:	9f03      	ldr	r7, [sp, #12]
 8002816:	f023 0703 	bic.w	r7, r3, #3
 800281a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800281e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002822:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002826:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800282a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800282e:	f04f 0c0f 	mov.w	ip, #15
 8002832:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002836:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002838:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283c:	d043      	beq.n	80028c6 <HAL_GPIO_Init+0x192>
 800283e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002842:	42b0      	cmp	r0, r6
 8002844:	d041      	beq.n	80028ca <HAL_GPIO_Init+0x196>
 8002846:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800284a:	42b0      	cmp	r0, r6
 800284c:	d03f      	beq.n	80028ce <HAL_GPIO_Init+0x19a>
 800284e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002852:	42b0      	cmp	r0, r6
 8002854:	d03d      	beq.n	80028d2 <HAL_GPIO_Init+0x19e>
 8002856:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800285a:	42b0      	cmp	r0, r6
 800285c:	d03b      	beq.n	80028d6 <HAL_GPIO_Init+0x1a2>
 800285e:	4548      	cmp	r0, r9
 8002860:	d03b      	beq.n	80028da <HAL_GPIO_Init+0x1a6>
 8002862:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002866:	42b0      	cmp	r0, r6
 8002868:	d039      	beq.n	80028de <HAL_GPIO_Init+0x1aa>
 800286a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800286e:	42b0      	cmp	r0, r6
 8002870:	bf14      	ite	ne
 8002872:	2608      	movne	r6, #8
 8002874:	2607      	moveq	r6, #7
 8002876:	fa06 f60e 	lsl.w	r6, r6, lr
 800287a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800287e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8002880:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002882:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002884:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002888:	bf0c      	ite	eq
 800288a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800288c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800288e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8002890:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002892:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002896:	bf0c      	ite	eq
 8002898:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800289a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800289c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80028a4:	bf0c      	ite	eq
 80028a6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80028a8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80028aa:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80028ac:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ae:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80028b0:	bf54      	ite	pl
 80028b2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80028b4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80028b6:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b8:	3301      	adds	r3, #1
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	f47f af45 	bne.w	800274a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80028c0:	b005      	add	sp, #20
 80028c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c6:	465e      	mov	r6, fp
 80028c8:	e7d5      	b.n	8002876 <HAL_GPIO_Init+0x142>
 80028ca:	2601      	movs	r6, #1
 80028cc:	e7d3      	b.n	8002876 <HAL_GPIO_Init+0x142>
 80028ce:	2602      	movs	r6, #2
 80028d0:	e7d1      	b.n	8002876 <HAL_GPIO_Init+0x142>
 80028d2:	2603      	movs	r6, #3
 80028d4:	e7cf      	b.n	8002876 <HAL_GPIO_Init+0x142>
 80028d6:	2604      	movs	r6, #4
 80028d8:	e7cd      	b.n	8002876 <HAL_GPIO_Init+0x142>
 80028da:	2605      	movs	r6, #5
 80028dc:	e7cb      	b.n	8002876 <HAL_GPIO_Init+0x142>
 80028de:	2606      	movs	r6, #6
 80028e0:	e7c9      	b.n	8002876 <HAL_GPIO_Init+0x142>
 80028e2:	bf00      	nop
 80028e4:	40013c00 	.word	0x40013c00
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40021400 	.word	0x40021400

080028f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f4:	b10a      	cbz	r2, 80028fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028f6:	6181      	str	r1, [r0, #24]
  }
}
 80028f8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028fa:	0409      	lsls	r1, r1, #16
 80028fc:	e7fb      	b.n	80028f6 <HAL_GPIO_WritePin+0x2>

080028fe <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028fe:	4770      	bx	lr

08002900 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002900:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002904:	6959      	ldr	r1, [r3, #20]
 8002906:	4201      	tst	r1, r0
 8002908:	d002      	beq.n	8002910 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800290c:	f7ff fff7 	bl	80028fe <HAL_GPIO_EXTI_Callback>
}
 8002910:	bd08      	pop	{r3, pc}
 8002912:	bf00      	nop
 8002914:	40013c00 	.word	0x40013c00

08002918 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002918:	6801      	ldr	r1, [r0, #0]
 800291a:	694b      	ldr	r3, [r1, #20]
 800291c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	d010      	beq.n	8002948 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800292a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800292e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002930:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002938:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002944:	2001      	movs	r0, #1
 8002946:	4770      	bx	lr
  }
  return HAL_OK;
 8002948:	4618      	mov	r0, r3
}
 800294a:	4770      	bx	lr

0800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002950:	4604      	mov	r4, r0
 8002952:	4616      	mov	r6, r2
 8002954:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002956:	b28f      	uxth	r7, r1
 8002958:	6825      	ldr	r5, [r4, #0]
 800295a:	6968      	ldr	r0, [r5, #20]
 800295c:	ea37 0000 	bics.w	r0, r7, r0
 8002960:	d017      	beq.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002962:	696b      	ldr	r3, [r5, #20]
 8002964:	055a      	lsls	r2, r3, #21
 8002966:	d516      	bpl.n	8002996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800296e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002970:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002974:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002976:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002978:	2300      	movs	r3, #0
 800297a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800297c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002980:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002984:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002986:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800298c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002990:	2001      	movs	r0, #1
}
 8002992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002996:	1c73      	adds	r3, r6, #1
 8002998:	d0df      	beq.n	800295a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7ff fccf 	bl	800233c <HAL_GetTick>
 800299e:	eba0 0008 	sub.w	r0, r0, r8
 80029a2:	42b0      	cmp	r0, r6
 80029a4:	d801      	bhi.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 80029a6:	2e00      	cmp	r6, #0
 80029a8:	d1d6      	bne.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029aa:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029ba:	f042 0220 	orr.w	r2, r2, #32
 80029be:	e7e4      	b.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080029c0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	4604      	mov	r4, r0
 80029c4:	460d      	mov	r5, r1
 80029c6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	075b      	lsls	r3, r3, #29
 80029ce:	d501      	bpl.n	80029d4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80029d0:	2000      	movs	r0, #0
}
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff ff9f 	bl	8002918 <I2C_IsAcknowledgeFailed>
 80029da:	b9a8      	cbnz	r0, 8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80029dc:	1c6a      	adds	r2, r5, #1
 80029de:	d0f3      	beq.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e0:	f7ff fcac 	bl	800233c <HAL_GetTick>
 80029e4:	1b80      	subs	r0, r0, r6
 80029e6:	42a8      	cmp	r0, r5
 80029e8:	d801      	bhi.n	80029ee <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80029ea:	2d00      	cmp	r5, #0
 80029ec:	d1ec      	bne.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029ee:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80029f0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029f2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80029fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	f042 0220 	orr.w	r2, r2, #32
 8002a06:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002a08:	2001      	movs	r0, #1
 8002a0a:	e7e2      	b.n	80029d2 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002a0c <I2C_WaitOnFlagUntilTimeout>:
{
 8002a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a10:	9e08      	ldr	r6, [sp, #32]
 8002a12:	4604      	mov	r4, r0
 8002a14:	4690      	mov	r8, r2
 8002a16:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a18:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8002a1c:	b28d      	uxth	r5, r1
 8002a1e:	6821      	ldr	r1, [r4, #0]
 8002a20:	f1b9 0f01 	cmp.w	r9, #1
 8002a24:	bf0c      	ite	eq
 8002a26:	694b      	ldreq	r3, [r1, #20]
 8002a28:	698b      	ldrne	r3, [r1, #24]
 8002a2a:	ea35 0303 	bics.w	r3, r5, r3
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	4598      	cmp	r8, r3
 8002a36:	d001      	beq.n	8002a3c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e016      	b.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	1c7b      	adds	r3, r7, #1
 8002a3e:	d0ef      	beq.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a40:	f7ff fc7c 	bl	800233c <HAL_GetTick>
 8002a44:	1b80      	subs	r0, r0, r6
 8002a46:	42b8      	cmp	r0, r7
 8002a48:	d801      	bhi.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002a4a:	2f00      	cmp	r7, #0
 8002a4c:	d1e7      	bne.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a4e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a50:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a52:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a54:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a58:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a68:	2001      	movs	r0, #1
}
 8002a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002a6e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002a6e:	b570      	push	{r4, r5, r6, lr}
 8002a70:	4604      	mov	r4, r0
 8002a72:	460d      	mov	r5, r1
 8002a74:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	061b      	lsls	r3, r3, #24
 8002a7c:	d501      	bpl.n	8002a82 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002a7e:	2000      	movs	r0, #0
}
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff ff48 	bl	8002918 <I2C_IsAcknowledgeFailed>
 8002a88:	b9a8      	cbnz	r0, 8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	1c6a      	adds	r2, r5, #1
 8002a8c:	d0f3      	beq.n	8002a76 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7ff fc55 	bl	800233c <HAL_GetTick>
 8002a92:	1b80      	subs	r0, r0, r6
 8002a94:	42a8      	cmp	r0, r5
 8002a96:	d801      	bhi.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002a98:	2d00      	cmp	r5, #0
 8002a9a:	d1ec      	bne.n	8002a76 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a9c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a9e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aa0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aa2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aaa:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002aac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	f042 0220 	orr.w	r2, r2, #32
 8002ab4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	e7e2      	b.n	8002a80 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08002abc <HAL_I2C_Init>:
{
 8002abc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002abe:	4604      	mov	r4, r0
 8002ac0:	b908      	cbnz	r0, 8002ac6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002ac2:	2001      	movs	r0, #1
}
 8002ac4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002aca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ace:	b91b      	cbnz	r3, 8002ad8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002ad0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002ad4:	f7ff f9f6 	bl	8001ec4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad8:	2324      	movs	r3, #36	; 0x24
 8002ada:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af8:	f000 fe90 	bl	800381c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002afc:	6863      	ldr	r3, [r4, #4]
 8002afe:	4a41      	ldr	r2, [pc, #260]	; (8002c04 <HAL_I2C_Init+0x148>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d84d      	bhi.n	8002ba0 <HAL_I2C_Init+0xe4>
 8002b04:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <HAL_I2C_Init+0x14c>)
 8002b06:	4290      	cmp	r0, r2
 8002b08:	d9db      	bls.n	8002ac2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b0a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002b0c:	493f      	ldr	r1, [pc, #252]	; (8002c0c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b0e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002b10:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b14:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002b18:	430d      	orrs	r5, r1
 8002b1a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b1c:	6a15      	ldr	r5, [r2, #32]
 8002b1e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002b22:	3101      	adds	r1, #1
 8002b24:	4329      	orrs	r1, r5
 8002b26:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b28:	69d1      	ldr	r1, [r2, #28]
 8002b2a:	4d36      	ldr	r5, [pc, #216]	; (8002c04 <HAL_I2C_Init+0x148>)
 8002b2c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002b30:	42ab      	cmp	r3, r5
 8002b32:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002b36:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8002b3a:	d848      	bhi.n	8002bce <HAL_I2C_Init+0x112>
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b42:	1c43      	adds	r3, r0, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	bf38      	it	cc
 8002b4c:	2304      	movcc	r3, #4
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b52:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002b56:	6811      	ldr	r1, [r2, #0]
 8002b58:	4303      	orrs	r3, r0
 8002b5a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b62:	6891      	ldr	r1, [r2, #8]
 8002b64:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002b68:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002b6c:	4303      	orrs	r3, r0
 8002b6e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b76:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002b7a:	68d1      	ldr	r1, [r2, #12]
 8002b7c:	4303      	orrs	r3, r0
 8002b7e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002b82:	430b      	orrs	r3, r1
 8002b84:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002b86:	6813      	ldr	r3, [r2, #0]
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b92:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b98:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002b9e:	e791      	b.n	8002ac4 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <HAL_I2C_Init+0x154>)
 8002ba2:	4290      	cmp	r0, r2
 8002ba4:	d98d      	bls.n	8002ac2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ba6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002ba8:	4e18      	ldr	r6, [pc, #96]	; (8002c0c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002baa:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002bac:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bb0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002bb4:	4335      	orrs	r5, r6
 8002bb6:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bb8:	6a15      	ldr	r5, [r2, #32]
 8002bba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002bbe:	4371      	muls	r1, r6
 8002bc0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002bc4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002bc8:	fbb1 f1f6 	udiv	r1, r1, r6
 8002bcc:	e7a9      	b.n	8002b22 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bce:	68a5      	ldr	r5, [r4, #8]
 8002bd0:	b955      	cbnz	r5, 8002be8 <HAL_I2C_Init+0x12c>
 8002bd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002bd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bda:	1c43      	adds	r3, r0, #1
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	b16b      	cbz	r3, 8002bfe <HAL_I2C_Init+0x142>
 8002be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be6:	e7b2      	b.n	8002b4e <HAL_I2C_Init+0x92>
 8002be8:	2519      	movs	r5, #25
 8002bea:	436b      	muls	r3, r5
 8002bec:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf6:	b113      	cbz	r3, 8002bfe <HAL_I2C_Init+0x142>
 8002bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfc:	e7a7      	b.n	8002b4e <HAL_I2C_Init+0x92>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e7a5      	b.n	8002b4e <HAL_I2C_Init+0x92>
 8002c02:	bf00      	nop
 8002c04:	000186a0 	.word	0x000186a0
 8002c08:	001e847f 	.word	0x001e847f
 8002c0c:	000f4240 	.word	0x000f4240
 8002c10:	003d08ff 	.word	0x003d08ff

08002c14 <HAL_I2C_Master_Transmit>:
{
 8002c14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002c18:	4604      	mov	r4, r0
 8002c1a:	461f      	mov	r7, r3
 8002c1c:	460d      	mov	r5, r1
 8002c1e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff fb8c 	bl	800233c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c24:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002c28:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002c2a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2c:	d004      	beq.n	8002c38 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002c2e:	2502      	movs	r5, #2
}
 8002c30:	4628      	mov	r0, r5
 8002c32:	b004      	add	sp, #16
 8002c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c38:	9000      	str	r0, [sp, #0]
 8002c3a:	2319      	movs	r3, #25
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	495b      	ldr	r1, [pc, #364]	; (8002dac <HAL_I2C_Master_Transmit+0x198>)
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff fee3 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d1f1      	bne.n	8002c2e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8002c4a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d0ed      	beq.n	8002c2e <HAL_I2C_Master_Transmit+0x1a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002c5e:	bf5e      	ittt	pl
 8002c60:	681a      	ldrpl	r2, [r3, #0]
 8002c62:	f042 0201 	orrpl.w	r2, r2, #1
 8002c66:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c70:	2221      	movs	r2, #33	; 0x21
 8002c72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c76:	2210      	movs	r2, #16
 8002c78:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002c80:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c84:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c86:	4a4a      	ldr	r2, [pc, #296]	; (8002db0 <HAL_I2C_Master_Transmit+0x19c>)
 8002c88:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002c8c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c90:	2a08      	cmp	r2, #8
 8002c92:	d004      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x8a>
 8002c94:	2a01      	cmp	r2, #1
 8002c96:	d002      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x8a>
 8002c98:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002c9c:	d104      	bne.n	8002ca8 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e002      	b.n	8002cae <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ca8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002caa:	2a12      	cmp	r2, #18
 8002cac:	d0f7      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	9600      	str	r6, [sp, #0]
 8002cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff fea7 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	b138      	cbz	r0, 8002cd2 <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc2:	6813      	ldr	r3, [r2, #0]
 8002cc4:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc6:	bf44      	itt	mi
 8002cc8:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8002ccc:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002cce:	2501      	movs	r5, #1
 8002cd0:	e7ae      	b.n	8002c30 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd2:	6923      	ldr	r3, [r4, #16]
 8002cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd8:	d121      	bne.n	8002d1e <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cda:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002cde:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ce0:	4633      	mov	r3, r6
 8002ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ce4:	4933      	ldr	r1, [pc, #204]	; (8002db4 <HAL_I2C_Master_Transmit+0x1a0>)
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f7ff fe30 	bl	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cec:	4605      	mov	r5, r0
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d1ed      	bne.n	8002cce <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	9003      	str	r0, [sp, #12]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	9203      	str	r2, [sp, #12]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002d00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002d02:	b9f3      	cbnz	r3, 8002d42 <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	6821      	ldr	r1, [r4, #0]
 8002d06:	680a      	ldr	r2, [r1, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002d14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002d1c:	e788      	b.n	8002c30 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d1e:	11eb      	asrs	r3, r5, #7
 8002d20:	f003 0306 	and.w	r3, r3, #6
 8002d24:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002d28:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d2a:	4923      	ldr	r1, [pc, #140]	; (8002db8 <HAL_I2C_Master_Transmit+0x1a4>)
 8002d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d2e:	4633      	mov	r3, r6
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff fe0b 	bl	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d1c9      	bne.n	8002cce <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	b2ed      	uxtb	r5, r5
 8002d3e:	611d      	str	r5, [r3, #16]
 8002d40:	e7ce      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d42:	4632      	mov	r2, r6
 8002d44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff fe91 	bl	8002a6e <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4c:	b140      	cbz	r0, 8002d60 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d1bc      	bne.n	8002cce <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	6813      	ldr	r3, [r2, #0]
 8002d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e7b6      	b.n	8002cce <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d62:	6820      	ldr	r0, [r4, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002d6a:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8002d6c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002d6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d70:	3a01      	subs	r2, #1
 8002d72:	b292      	uxth	r2, r2
 8002d74:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002d76:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d78:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8002d7a:	1e51      	subs	r1, r2, #1
 8002d7c:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d7e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002d80:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d82:	d50a      	bpl.n	8002d9a <HAL_I2C_Master_Transmit+0x186>
 8002d84:	b149      	cbz	r1, 8002d9a <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d86:	7859      	ldrb	r1, [r3, #1]
 8002d88:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002d8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002d94:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002d96:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002d98:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9a:	4632      	mov	r2, r6
 8002d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff fe0e 	bl	80029c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d0ab      	beq.n	8002d00 <HAL_I2C_Master_Transmit+0xec>
 8002da8:	e7d1      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x13a>
 8002daa:	bf00      	nop
 8002dac:	00100002 	.word	0x00100002
 8002db0:	ffff0000 	.word	0xffff0000
 8002db4:	00010002 	.word	0x00010002
 8002db8:	00010008 	.word	0x00010008

08002dbc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d041      	beq.n	8002e48 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002dc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002dc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dcc:	b92b      	cbnz	r3, 8002dda <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002dce:	4b42      	ldr	r3, [pc, #264]	; (8002ed8 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8002dd0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002dd4:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002dd6:	f7ff f8af 	bl	8001f38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002dda:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ddc:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002dde:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002de2:	69d3      	ldr	r3, [r2, #28]
 8002de4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002de8:	f023 030f 	bic.w	r3, r3, #15
 8002dec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002dee:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8002df0:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002df2:	428b      	cmp	r3, r1
 8002df4:	d031      	beq.n	8002e5a <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002df6:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002df8:	2b00      	cmp	r3, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002dfa:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8002dfc:	bf14      	ite	ne
 8002dfe:	2520      	movne	r5, #32
 8002e00:	2510      	moveq	r5, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e02:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e04:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002e06:	bf98      	it	ls
 8002e08:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e0a:	f000 fdbf 	bl	800398c <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e0e:	6923      	ldr	r3, [r4, #16]
 8002e10:	6961      	ldr	r1, [r4, #20]
 8002e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e16:	d11b      	bne.n	8002e50 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e18:	68e3      	ldr	r3, [r4, #12]
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	b1b3      	cbz	r3, 8002e4c <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e1e:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e24:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e26:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2c:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002e2e:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e32:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e36:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e38:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e3a:	1e99      	subs	r1, r3, #2
 8002e3c:	29fd      	cmp	r1, #253	; 0xfd
 8002e3e:	d90e      	bls.n	8002e5e <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e42:	f043 0310 	orr.w	r3, r3, #16
 8002e46:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8002e48:	2001      	movs	r0, #1
 8002e4a:	e044      	b.n	8002ed6 <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e4c:	00eb      	lsls	r3, r5, #3
 8002e4e:	e7e7      	b.n	8002e20 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e50:	230a      	movs	r3, #10
 8002e52:	fbb0 f0f5 	udiv	r0, r0, r5
 8002e56:	4343      	muls	r3, r0
 8002e58:	e7e5      	b.n	8002e26 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	e7ed      	b.n	8002e3a <HAL_I2S_Init+0x7e>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	6922      	ldr	r2, [r4, #16]
 8002e62:	6821      	ldr	r1, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e64:	68e5      	ldr	r5, [r4, #12]
 8002e66:	69a0      	ldr	r0, [r4, #24]
 8002e68:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8002ee8 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e70:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8002e74:	ea46 0203 	orr.w	r2, r6, r3
 8002e78:	69cf      	ldr	r7, [r1, #28]
 8002e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e7e:	432a      	orrs	r2, r5
 8002e80:	4302      	orrs	r2, r0
 8002e82:	ea07 070c 	and.w	r7, r7, ip
 8002e86:	433a      	orrs	r2, r7
 8002e88:	61ca      	str	r2, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e8a:	6a22      	ldr	r2, [r4, #32]
 8002e8c:	2a01      	cmp	r2, #1
 8002e8e:	d11d      	bne.n	8002ecc <HAL_I2S_Init+0x110>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e90:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_I2S_Init+0x120>)
 8002e92:	6362      	str	r2, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e94:	4f12      	ldr	r7, [pc, #72]	; (8002ee0 <HAL_I2S_Init+0x124>)
 8002e96:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <HAL_I2S_Init+0x128>)
 8002e98:	42b9      	cmp	r1, r7
 8002e9a:	bf18      	it	ne
 8002e9c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002ea0:	432b      	orrs	r3, r5
 8002ea2:	69d1      	ldr	r1, [r2, #28]
 8002ea4:	ea01 010c 	and.w	r1, r1, ip
 8002ea8:	61d1      	str	r1, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002eaa:	2102      	movs	r1, #2
 8002eac:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002eae:	69d7      	ldr	r7, [r2, #28]
 8002eb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eb4:	4303      	orrs	r3, r0

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002eb6:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8002eba:	ea43 0307 	orr.w	r3, r3, r7
 8002ebe:	bf14      	ite	ne
 8002ec0:	2100      	movne	r1, #0
 8002ec2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8002ec6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ecc:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ece:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ed0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ed2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8002ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed8:	08002fd5 	.word	0x08002fd5
 8002edc:	080030f9 	.word	0x080030f9
 8002ee0:	40003800 	.word	0x40003800
 8002ee4:	40003400 	.word	0x40003400
 8002ee8:	fffff040 	.word	0xfffff040

08002eec <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4604      	mov	r4, r0
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	d04e      	beq.n	8002f92 <HAL_I2S_Transmit_DMA+0xa6>
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	d04c      	beq.n	8002f92 <HAL_I2S_Transmit_DMA+0xa6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002ef8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d00a      	beq.n	8002f16 <HAL_I2S_Transmit_DMA+0x2a>
 8002f00:	2301      	movs	r3, #1
 8002f02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002f06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_I2S_Transmit_DMA+0x2e>
  {
    __HAL_UNLOCK(hi2s);
 8002f12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8002f16:	2002      	movs	r0, #2
 8002f18:	e027      	b.n	8002f6a <HAL_I2S_Transmit_DMA+0x7e>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002f1a:	2003      	movs	r0, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f1c:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002f1e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f22:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f24:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 8002f26:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f28:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002f2c:	4283      	cmp	r3, r0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2S_Transmit_DMA+0x48>
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d11b      	bne.n	8002f6c <HAL_I2S_Transmit_DMA+0x80>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002f34:	0053      	lsls	r3, r2, #1
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002f3a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->TxXferSize = Size;
    hi2s->TxXferCount = Size;
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002f3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_I2S_Transmit_DMA+0xac>)
 8002f40:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_I2S_Transmit_DMA+0xb0>)
 8002f44:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_I2S_Transmit_DMA+0xb4>)
 8002f48:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002f4a:	f105 020c 	add.w	r2, r5, #12
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8002f4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002f50:	f7ff faf8 	bl	8002544 <HAL_DMA_Start_IT>
 8002f54:	b168      	cbz	r0, 8002f72 <HAL_I2S_Transmit_DMA+0x86>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f56:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002f58:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f5a:	f043 0308 	orr.w	r3, r3, #8
 8002f5e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002f60:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
  }

  __HAL_UNLOCK(hi2s);
 8002f64:	2300      	movs	r3, #0
 8002f66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = Size;
 8002f6c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002f6e:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002f70:	e7e4      	b.n	8002f3c <HAL_I2S_Transmit_DMA+0x50>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8002f78:	bf5e      	ittt	pl
 8002f7a:	69da      	ldrpl	r2, [r3, #28]
 8002f7c:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002f80:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f86:	bf5e      	ittt	pl
 8002f88:	685a      	ldrpl	r2, [r3, #4]
 8002f8a:	f042 0202 	orrpl.w	r2, r2, #2
 8002f8e:	605a      	strpl	r2, [r3, #4]
 8002f90:	e7e8      	b.n	8002f64 <HAL_I2S_Transmit_DMA+0x78>
    return  HAL_ERROR;
 8002f92:	2001      	movs	r0, #1
 8002f94:	e7e9      	b.n	8002f6a <HAL_I2S_Transmit_DMA+0x7e>
 8002f96:	bf00      	nop
 8002f98:	08002fa5 	.word	0x08002fa5
 8002f9c:	08002faf 	.word	0x08002faf
 8002fa0:	080030cf 	.word	0x080030cf

08002fa4 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002fa6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002fa8:	f7fe fa9e 	bl	80014e8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002fac:	bd08      	pop	{r3, pc}

08002fae <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8002fae:	69c1      	ldr	r1, [r0, #28]
{
 8002fb0:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002fb4:	b941      	cbnz	r1, 8002fc8 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	6842      	ldr	r2, [r0, #4]
 8002fba:	f022 0202 	bic.w	r2, r2, #2
 8002fbe:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002fc0:	2201      	movs	r2, #1
    hi2s->TxXferCount = 0U;
 8002fc2:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fa79 	bl	80014c0 <HAL_I2S_TxCpltCallback>
}
 8002fce:	bd08      	pop	{r3, pc}

08002fd0 <HAL_I2S_RxCpltCallback>:
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_I2S_ErrorCallback>:
 8002fd2:	4770      	bx	lr

08002fd4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002fd6:	6803      	ldr	r3, [r0, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002fdc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002fe0:	2a04      	cmp	r2, #4
{
 8002fe2:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002fe4:	d136      	bne.n	8003054 <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002fe6:	9a01      	ldr	r2, [sp, #4]
 8002fe8:	07d1      	lsls	r1, r2, #31
 8002fea:	d517      	bpl.n	800301c <I2S_IRQHandler+0x48>
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	0652      	lsls	r2, r2, #25
 8002ff0:	d514      	bpl.n	800301c <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ff2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002ff4:	68d9      	ldr	r1, [r3, #12]
 8002ff6:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8002ffa:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ffc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002ffe:	3a01      	subs	r2, #1
 8003000:	b292      	uxth	r2, r2
 8003002:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003004:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8003006:	b292      	uxth	r2, r2
 8003008:	b942      	cbnz	r2, 800301c <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003010:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003012:	2301      	movs	r3, #1
 8003014:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8003018:	f7ff ffda 	bl	8002fd0 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800301c:	9b01      	ldr	r3, [sp, #4]
 800301e:	0659      	lsls	r1, r3, #25
 8003020:	d518      	bpl.n	8003054 <I2S_IRQHandler+0x80>
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	0692      	lsls	r2, r2, #26
 8003028:	d514      	bpl.n	8003054 <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003030:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003032:	2200      	movs	r2, #0
 8003034:	9202      	str	r2, [sp, #8]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	9202      	str	r2, [sp, #8]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003040:	2301      	movs	r3, #1
 8003042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003046:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff ffbf 	bl	8002fd2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003054:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003058:	2b03      	cmp	r3, #3
 800305a:	d136      	bne.n	80030ca <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800305c:	9b01      	ldr	r3, [sp, #4]
 800305e:	079b      	lsls	r3, r3, #30
 8003060:	d519      	bpl.n	8003096 <I2S_IRQHandler+0xc2>
 8003062:	6822      	ldr	r2, [r4, #0]
 8003064:	6853      	ldr	r3, [r2, #4]
 8003066:	0618      	lsls	r0, r3, #24
 8003068:	d515      	bpl.n	8003096 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800306a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800306c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003070:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8003072:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8003074:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003076:	3b01      	subs	r3, #1
 8003078:	b29b      	uxth	r3, r3
 800307a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800307c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	b94b      	cbnz	r3, 8003096 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003082:	6853      	ldr	r3, [r2, #4]
 8003084:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003088:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800308a:	2301      	movs	r3, #1
 800308c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8003090:	4620      	mov	r0, r4
 8003092:	f7fe fa15 	bl	80014c0 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003096:	9b01      	ldr	r3, [sp, #4]
 8003098:	0719      	lsls	r1, r3, #28
 800309a:	d516      	bpl.n	80030ca <I2S_IRQHandler+0xf6>
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	0692      	lsls	r2, r2, #26
 80030a2:	d512      	bpl.n	80030ca <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030aa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030ac:	2200      	movs	r2, #0
 80030ae:	9203      	str	r2, [sp, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	9303      	str	r3, [sp, #12]
 80030b4:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff ff84 	bl	8002fd2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030ca:	b004      	add	sp, #16
 80030cc:	bd10      	pop	{r4, pc}

080030ce <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80030d0:	6802      	ldr	r2, [r0, #0]
{
 80030d2:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80030d4:	6853      	ldr	r3, [r2, #4]
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80030e0:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80030e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030ea:	f043 0308 	orr.w	r3, r3, #8
 80030ee:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80030f0:	f7ff ff6f 	bl	8002fd2 <HAL_I2S_ErrorCallback>
}
 80030f4:	bd08      	pop	{r3, pc}

080030f6 <HAL_I2SEx_TxRxCpltCallback>:
 80030f6:	4770      	bx	lr

080030f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80030f8:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80030fa:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80030fc:	498e      	ldr	r1, [pc, #568]	; (8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80030fe:	6893      	ldr	r3, [r2, #8]
{
 8003100:	b086      	sub	sp, #24
 8003102:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003104:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003106:	4b8d      	ldr	r3, [pc, #564]	; (800333c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003108:	428a      	cmp	r2, r1
 800310a:	bf18      	it	ne
 800310c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003110:	6899      	ldr	r1, [r3, #8]
 8003112:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003114:	6851      	ldr	r1, [r2, #4]
 8003116:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800311c:	6841      	ldr	r1, [r0, #4]
 800311e:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8003122:	f040 8093 	bne.w	800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003126:	9b00      	ldr	r3, [sp, #0]
 8003128:	0799      	lsls	r1, r3, #30
 800312a:	d51a      	bpl.n	8003162 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 800312c:	9b02      	ldr	r3, [sp, #8]
 800312e:	061b      	lsls	r3, r3, #24
 8003130:	d517      	bpl.n	8003162 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003132:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003134:	1c99      	adds	r1, r3, #2
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	6241      	str	r1, [r0, #36]	; 0x24
 800313a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800313c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800313e:	3b01      	subs	r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003144:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	b95b      	cbnz	r3, 8003162 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800314a:	6853      	ldr	r3, [r2, #4]
 800314c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003150:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8003152:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003154:	b29b      	uxth	r3, r3
 8003156:	b923      	cbnz	r3, 8003162 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003158:	2301      	movs	r3, #1
 800315a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800315e:	f7ff ffca 	bl	80030f6 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003162:	9b01      	ldr	r3, [sp, #4]
 8003164:	07d8      	lsls	r0, r3, #31
 8003166:	d522      	bpl.n	80031ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8003168:	9b03      	ldr	r3, [sp, #12]
 800316a:	0659      	lsls	r1, r3, #25
 800316c:	d51f      	bpl.n	80031ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800316e:	6821      	ldr	r1, [r4, #0]
 8003170:	4a71      	ldr	r2, [pc, #452]	; (8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8003172:	4b72      	ldr	r3, [pc, #456]	; (800333c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003174:	4291      	cmp	r1, r2
 8003176:	bf18      	it	ne
 8003178:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800317c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800317e:	68d9      	ldr	r1, [r3, #12]
 8003180:	1c90      	adds	r0, r2, #2
 8003182:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003184:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8003186:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003188:	3a01      	subs	r2, #1
 800318a:	b292      	uxth	r2, r2
 800318c:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800318e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003190:	b292      	uxth	r2, r2
 8003192:	b962      	cbnz	r2, 80031ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800319a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800319c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	b92b      	cbnz	r3, 80031ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff ffa4 	bl	80030f6 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031ae:	9b01      	ldr	r3, [sp, #4]
 80031b0:	065a      	lsls	r2, r3, #25
 80031b2:	d522      	bpl.n	80031fa <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 80031b4:	9b03      	ldr	r3, [sp, #12]
 80031b6:	069b      	lsls	r3, r3, #26
 80031b8:	d51f      	bpl.n	80031fa <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	495e      	ldr	r1, [pc, #376]	; (8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80031be:	4a5f      	ldr	r2, [pc, #380]	; (800333c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80031c0:	428b      	cmp	r3, r1
 80031c2:	bf18      	it	ne
 80031c4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80031c8:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031ca:	6851      	ldr	r1, [r2, #4]
 80031cc:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80031d0:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031d8:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031da:	2200      	movs	r2, #0
 80031dc:	9204      	str	r2, [sp, #16]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	9204      	str	r2, [sp, #16]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	9304      	str	r3, [sp, #16]
 80031e6:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80031f6:	f7ff feec 	bl	8002fd2 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031fa:	9b00      	ldr	r3, [sp, #0]
 80031fc:	0718      	lsls	r0, r3, #28
 80031fe:	f140 8098 	bpl.w	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8003202:	9b02      	ldr	r3, [sp, #8]
 8003204:	0699      	lsls	r1, r3, #26
 8003206:	f140 8094 	bpl.w	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800320a:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800320c:	494a      	ldr	r1, [pc, #296]	; (8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003214:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003216:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003218:	428b      	cmp	r3, r1
 800321a:	bf18      	it	ne
 800321c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8003220:	6851      	ldr	r1, [r2, #4]
 8003222:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003226:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003228:	2200      	movs	r2, #0
 800322a:	9205      	str	r2, [sp, #20]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	9305      	str	r3, [sp, #20]
 8003230:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8003232:	2301      	movs	r3, #1
 8003234:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003238:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800323a:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003242:	b006      	add	sp, #24
 8003244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8003248:	f7ff bec3 	b.w	8002fd2 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800324c:	9a01      	ldr	r2, [sp, #4]
 800324e:	0792      	lsls	r2, r2, #30
 8003250:	d51a      	bpl.n	8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8003252:	9a03      	ldr	r2, [sp, #12]
 8003254:	0611      	lsls	r1, r2, #24
 8003256:	d517      	bpl.n	8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003258:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800325a:	1c91      	adds	r1, r2, #2
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	6241      	str	r1, [r0, #36]	; 0x24
 8003260:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003262:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003264:	3a01      	subs	r2, #1
 8003266:	b292      	uxth	r2, r2
 8003268:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800326a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800326c:	b292      	uxth	r2, r2
 800326e:	b95a      	cbnz	r2, 8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003276:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8003278:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800327a:	b29b      	uxth	r3, r3
 800327c:	b923      	cbnz	r3, 8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 800327e:	2301      	movs	r3, #1
 8003280:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003284:	f7ff ff37 	bl	80030f6 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003288:	9b00      	ldr	r3, [sp, #0]
 800328a:	07da      	lsls	r2, r3, #31
 800328c:	d51c      	bpl.n	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	065b      	lsls	r3, r3, #25
 8003292:	d519      	bpl.n	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003294:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	1c98      	adds	r0, r3, #2
 800329a:	68d1      	ldr	r1, [r2, #12]
 800329c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800329e:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80032a0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80032a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	b963      	cbnz	r3, 80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032ae:	6853      	ldr	r3, [r2, #4]
 80032b0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80032b4:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80032b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	b92b      	cbnz	r3, 80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 80032bc:	2301      	movs	r3, #1
 80032be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7ff ff17 	bl	80030f6 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032c8:	9b00      	ldr	r3, [sp, #0]
 80032ca:	0658      	lsls	r0, r3, #25
 80032cc:	d51b      	bpl.n	8003306 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 80032ce:	9b02      	ldr	r3, [sp, #8]
 80032d0:	0699      	lsls	r1, r3, #26
 80032d2:	d518      	bpl.n	8003306 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032d4:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032d6:	4918      	ldr	r1, [pc, #96]	; (8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032d8:	6853      	ldr	r3, [r2, #4]
 80032da:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80032de:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032e0:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80032e2:	428a      	cmp	r2, r1
 80032e4:	bf18      	it	ne
 80032e6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80032ea:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032f2:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003302:	f7ff fe66 	bl	8002fd2 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	071a      	lsls	r2, r3, #28
 800330a:	d512      	bpl.n	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	069b      	lsls	r3, r3, #26
 8003310:	d50f      	bpl.n	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	4908      	ldr	r1, [pc, #32]	; (8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003318:	428a      	cmp	r2, r1
 800331a:	bf18      	it	ne
 800331c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8003326:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003328:	6853      	ldr	r3, [r2, #4]
 800332a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800332e:	6053      	str	r3, [r2, #4]
 8003330:	e77f      	b.n	8003232 <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8003332:	b006      	add	sp, #24
 8003334:	bd10      	pop	{r4, pc}
 8003336:	bf00      	nop
 8003338:	40003800 	.word	0x40003800
 800333c:	40003400 	.word	0x40003400

08003340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003344:	4604      	mov	r4, r0
 8003346:	b908      	cbnz	r0, 800334c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003348:	2001      	movs	r0, #1
 800334a:	e03f      	b.n	80033cc <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334c:	6803      	ldr	r3, [r0, #0]
 800334e:	07dd      	lsls	r5, r3, #31
 8003350:	d410      	bmi.n	8003374 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	0798      	lsls	r0, r3, #30
 8003356:	d45a      	bmi.n	800340e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	071a      	lsls	r2, r3, #28
 800335c:	f100 809c 	bmi.w	8003498 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	075b      	lsls	r3, r3, #29
 8003364:	f100 80ba 	bmi.w	80034dc <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003368:	69a0      	ldr	r0, [r4, #24]
 800336a:	2800      	cmp	r0, #0
 800336c:	f040 811b 	bne.w	80035a6 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003370:	2000      	movs	r0, #0
 8003372:	e02b      	b.n	80033cc <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003374:	4ba7      	ldr	r3, [pc, #668]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	f002 020c 	and.w	r2, r2, #12
 800337c:	2a04      	cmp	r2, #4
 800337e:	d007      	beq.n	8003390 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003386:	2a08      	cmp	r2, #8
 8003388:	d10a      	bne.n	80033a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	0259      	lsls	r1, r3, #9
 800338e:	d507      	bpl.n	80033a0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4ba0      	ldr	r3, [pc, #640]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	039a      	lsls	r2, r3, #14
 8003396:	d5dc      	bpl.n	8003352 <HAL_RCC_OscConfig+0x12>
 8003398:	6863      	ldr	r3, [r4, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1d9      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
 800339e:	e7d3      	b.n	8003348 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	6863      	ldr	r3, [r4, #4]
 80033a2:	4d9c      	ldr	r5, [pc, #624]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d113      	bne.n	80033d2 <HAL_RCC_OscConfig+0x92>
 80033aa:	682b      	ldr	r3, [r5, #0]
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033b2:	f7fe ffc3 	bl	800233c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4d97      	ldr	r5, [pc, #604]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80033b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	682b      	ldr	r3, [r5, #0]
 80033bc:	039b      	lsls	r3, r3, #14
 80033be:	d4c8      	bmi.n	8003352 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe ffbc 	bl	800233c <HAL_GetTick>
 80033c4:	1b80      	subs	r0, r0, r6
 80033c6:	2864      	cmp	r0, #100	; 0x64
 80033c8:	d9f7      	bls.n	80033ba <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80033ca:	2003      	movs	r0, #3
}
 80033cc:	b002      	add	sp, #8
 80033ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d6:	d104      	bne.n	80033e2 <HAL_RCC_OscConfig+0xa2>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	e7e3      	b.n	80033aa <HAL_RCC_OscConfig+0x6a>
 80033e2:	682a      	ldr	r2, [r5, #0]
 80033e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033e8:	602a      	str	r2, [r5, #0]
 80033ea:	682a      	ldr	r2, [r5, #0]
 80033ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033f0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1dd      	bne.n	80033b2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80033f6:	f7fe ffa1 	bl	800233c <HAL_GetTick>
 80033fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	039f      	lsls	r7, r3, #14
 8003400:	d5a7      	bpl.n	8003352 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003402:	f7fe ff9b 	bl	800233c <HAL_GetTick>
 8003406:	1b80      	subs	r0, r0, r6
 8003408:	2864      	cmp	r0, #100	; 0x64
 800340a:	d9f7      	bls.n	80033fc <HAL_RCC_OscConfig+0xbc>
 800340c:	e7dd      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	4b81      	ldr	r3, [pc, #516]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	f012 0f0c 	tst.w	r2, #12
 8003416:	d007      	beq.n	8003428 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	2a08      	cmp	r2, #8
 8003420:	d111      	bne.n	8003446 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	025e      	lsls	r6, r3, #9
 8003426:	d40e      	bmi.n	8003446 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003428:	4b7a      	ldr	r3, [pc, #488]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	0795      	lsls	r5, r2, #30
 800342e:	d502      	bpl.n	8003436 <HAL_RCC_OscConfig+0xf6>
 8003430:	68e2      	ldr	r2, [r4, #12]
 8003432:	2a01      	cmp	r2, #1
 8003434:	d188      	bne.n	8003348 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	6921      	ldr	r1, [r4, #16]
 800343a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800343e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003442:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003444:	e788      	b.n	8003358 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003446:	68e2      	ldr	r2, [r4, #12]
 8003448:	4b73      	ldr	r3, [pc, #460]	; (8003618 <HAL_RCC_OscConfig+0x2d8>)
 800344a:	b1b2      	cbz	r2, 800347a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003450:	f7fe ff74 	bl	800233c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4d6f      	ldr	r5, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8003456:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	0798      	lsls	r0, r3, #30
 800345c:	d507      	bpl.n	800346e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	682b      	ldr	r3, [r5, #0]
 8003460:	6922      	ldr	r2, [r4, #16]
 8003462:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003466:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800346a:	602b      	str	r3, [r5, #0]
 800346c:	e774      	b.n	8003358 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346e:	f7fe ff65 	bl	800233c <HAL_GetTick>
 8003472:	1b80      	subs	r0, r0, r6
 8003474:	2802      	cmp	r0, #2
 8003476:	d9ef      	bls.n	8003458 <HAL_RCC_OscConfig+0x118>
 8003478:	e7a7      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800347a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800347c:	f7fe ff5e 	bl	800233c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003480:	4d64      	ldr	r5, [pc, #400]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8003482:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	0799      	lsls	r1, r3, #30
 8003488:	f57f af66 	bpl.w	8003358 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348c:	f7fe ff56 	bl	800233c <HAL_GetTick>
 8003490:	1b80      	subs	r0, r0, r6
 8003492:	2802      	cmp	r0, #2
 8003494:	d9f6      	bls.n	8003484 <HAL_RCC_OscConfig+0x144>
 8003496:	e798      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003498:	6962      	ldr	r2, [r4, #20]
 800349a:	4b60      	ldr	r3, [pc, #384]	; (800361c <HAL_RCC_OscConfig+0x2dc>)
 800349c:	b17a      	cbz	r2, 80034be <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80034a2:	f7fe ff4b 	bl	800233c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	4d5b      	ldr	r5, [pc, #364]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80034a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80034ac:	079f      	lsls	r7, r3, #30
 80034ae:	f53f af57 	bmi.w	8003360 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fe ff43 	bl	800233c <HAL_GetTick>
 80034b6:	1b80      	subs	r0, r0, r6
 80034b8:	2802      	cmp	r0, #2
 80034ba:	d9f6      	bls.n	80034aa <HAL_RCC_OscConfig+0x16a>
 80034bc:	e785      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80034be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80034c0:	f7fe ff3c 	bl	800233c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	4d53      	ldr	r5, [pc, #332]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80034c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80034ca:	0798      	lsls	r0, r3, #30
 80034cc:	f57f af48 	bpl.w	8003360 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe ff34 	bl	800233c <HAL_GetTick>
 80034d4:	1b80      	subs	r0, r0, r6
 80034d6:	2802      	cmp	r0, #2
 80034d8:	d9f6      	bls.n	80034c8 <HAL_RCC_OscConfig+0x188>
 80034da:	e776      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034dc:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 80034de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80034e4:	d128      	bne.n	8003538 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	9201      	str	r2, [sp, #4]
 80034e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80034fa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4d48      	ldr	r5, [pc, #288]	; (8003620 <HAL_RCC_OscConfig+0x2e0>)
 80034fe:	682b      	ldr	r3, [r5, #0]
 8003500:	05d9      	lsls	r1, r3, #23
 8003502:	d51b      	bpl.n	800353c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003504:	68a3      	ldr	r3, [r4, #8]
 8003506:	4d43      	ldr	r5, [pc, #268]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 8003508:	2b01      	cmp	r3, #1
 800350a:	d127      	bne.n	800355c <HAL_RCC_OscConfig+0x21c>
 800350c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003514:	f7fe ff12 	bl	800233c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	4d3e      	ldr	r5, [pc, #248]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800351a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003522:	079b      	lsls	r3, r3, #30
 8003524:	d539      	bpl.n	800359a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8003526:	2e00      	cmp	r6, #0
 8003528:	f43f af1e 	beq.w	8003368 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4a39      	ldr	r2, [pc, #228]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 800352e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	e717      	b.n	8003368 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8003538:	2600      	movs	r6, #0
 800353a:	e7df      	b.n	80034fc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003544:	f7fe fefa 	bl	800233c <HAL_GetTick>
 8003548:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	682b      	ldr	r3, [r5, #0]
 800354c:	05da      	lsls	r2, r3, #23
 800354e:	d4d9      	bmi.n	8003504 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003550:	f7fe fef4 	bl	800233c <HAL_GetTick>
 8003554:	1bc0      	subs	r0, r0, r7
 8003556:	2802      	cmp	r0, #2
 8003558:	d9f7      	bls.n	800354a <HAL_RCC_OscConfig+0x20a>
 800355a:	e736      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355c:	2b05      	cmp	r3, #5
 800355e:	d104      	bne.n	800356a <HAL_RCC_OscConfig+0x22a>
 8003560:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	672b      	str	r3, [r5, #112]	; 0x70
 8003568:	e7d0      	b.n	800350c <HAL_RCC_OscConfig+0x1cc>
 800356a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	672a      	str	r2, [r5, #112]	; 0x70
 8003572:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003574:	f022 0204 	bic.w	r2, r2, #4
 8003578:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ca      	bne.n	8003514 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800357e:	f7fe fedd 	bl	800233c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003586:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800358a:	0798      	lsls	r0, r3, #30
 800358c:	d5cb      	bpl.n	8003526 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe fed5 	bl	800233c <HAL_GetTick>
 8003592:	1bc0      	subs	r0, r0, r7
 8003594:	4540      	cmp	r0, r8
 8003596:	d9f7      	bls.n	8003588 <HAL_RCC_OscConfig+0x248>
 8003598:	e717      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fe fecf 	bl	800233c <HAL_GetTick>
 800359e:	1bc0      	subs	r0, r0, r7
 80035a0:	4540      	cmp	r0, r8
 80035a2:	d9bd      	bls.n	8003520 <HAL_RCC_OscConfig+0x1e0>
 80035a4:	e711      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a6:	4d1b      	ldr	r5, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
 80035a8:	68ab      	ldr	r3, [r5, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d047      	beq.n	8003642 <HAL_RCC_OscConfig+0x302>
 80035b2:	4e1c      	ldr	r6, [pc, #112]	; (8003624 <HAL_RCC_OscConfig+0x2e4>)
 80035b4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80035b8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ba:	d135      	bne.n	8003628 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80035bc:	f7fe febe 	bl	800233c <HAL_GetTick>
 80035c0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	682b      	ldr	r3, [r5, #0]
 80035c4:	0199      	lsls	r1, r3, #6
 80035c6:	d41e      	bmi.n	8003606 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035c8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80035d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80035da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	4c0d      	ldr	r4, [pc, #52]	; (8003614 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035de:	0852      	lsrs	r2, r2, #1
 80035e0:	3a01      	subs	r2, #1
 80035e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035e6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80035e8:	2301      	movs	r3, #1
 80035ea:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80035ec:	f7fe fea6 	bl	800233c <HAL_GetTick>
 80035f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	019a      	lsls	r2, r3, #6
 80035f6:	f53f aebb 	bmi.w	8003370 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fa:	f7fe fe9f 	bl	800233c <HAL_GetTick>
 80035fe:	1b40      	subs	r0, r0, r5
 8003600:	2802      	cmp	r0, #2
 8003602:	d9f6      	bls.n	80035f2 <HAL_RCC_OscConfig+0x2b2>
 8003604:	e6e1      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003606:	f7fe fe99 	bl	800233c <HAL_GetTick>
 800360a:	1bc0      	subs	r0, r0, r7
 800360c:	2802      	cmp	r0, #2
 800360e:	d9d8      	bls.n	80035c2 <HAL_RCC_OscConfig+0x282>
 8003610:	e6db      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	42470000 	.word	0x42470000
 800361c:	42470e80 	.word	0x42470e80
 8003620:	40007000 	.word	0x40007000
 8003624:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8003628:	f7fe fe88 	bl	800233c <HAL_GetTick>
 800362c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	f57f ae9d 	bpl.w	8003370 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe fe81 	bl	800233c <HAL_GetTick>
 800363a:	1b00      	subs	r0, r0, r4
 800363c:	2802      	cmp	r0, #2
 800363e:	d9f6      	bls.n	800362e <HAL_RCC_OscConfig+0x2ee>
 8003640:	e6c3      	b.n	80033ca <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003642:	2801      	cmp	r0, #1
 8003644:	f43f aec2 	beq.w	80033cc <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8003648:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	69e3      	ldr	r3, [r4, #28]
 800364c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8003650:	429a      	cmp	r2, r3
 8003652:	f47f ae79 	bne.w	8003348 <HAL_RCC_OscConfig+0x8>
 8003656:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003658:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365c:	4293      	cmp	r3, r2
 800365e:	f47f ae73 	bne.w	8003348 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003662:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003668:	4003      	ands	r3, r0
 800366a:	4293      	cmp	r3, r2
 800366c:	f47f ae6c 	bne.w	8003348 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003670:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003672:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003676:	4293      	cmp	r3, r2
 8003678:	f47f ae66 	bne.w	8003348 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800367c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800367e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8003682:	1ac0      	subs	r0, r0, r3
 8003684:	bf18      	it	ne
 8003686:	2001      	movne	r0, #1
 8003688:	e6a0      	b.n	80033cc <HAL_RCC_OscConfig+0x8c>
 800368a:	bf00      	nop

0800368c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800368c:	4913      	ldr	r1, [pc, #76]	; (80036dc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800368e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003690:	688b      	ldr	r3, [r1, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x16>
 800369a:	2b08      	cmp	r3, #8
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369e:	4810      	ldr	r0, [pc, #64]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80036a2:	4810      	ldr	r0, [pc, #64]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x58>)
}
 80036a4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036a8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036aa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b0:	bf14      	ite	ne
 80036b2:	480c      	ldrne	r0, [pc, #48]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b4:	480a      	ldreq	r0, [pc, #40]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80036ba:	bf18      	it	ne
 80036bc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c2:	fba1 0100 	umull	r0, r1, r1, r0
 80036c6:	f7fd fab7 	bl	8000c38 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RCC_GetSysClockFreq+0x50>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80036d2:	3301      	adds	r3, #1
 80036d4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80036d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80036da:	e7e3      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x18>
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	017d7840 	.word	0x017d7840

080036e8 <HAL_RCC_ClockConfig>:
{
 80036e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80036ee:	4604      	mov	r4, r0
 80036f0:	b910      	cbnz	r0, 80036f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80036f2:	2001      	movs	r0, #1
}
 80036f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCC_ClockConfig+0x120>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	f002 020f 	and.w	r2, r2, #15
 8003700:	428a      	cmp	r2, r1
 8003702:	d328      	bcc.n	8003756 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	6821      	ldr	r1, [r4, #0]
 8003706:	078f      	lsls	r7, r1, #30
 8003708:	d42d      	bmi.n	8003766 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370a:	07c8      	lsls	r0, r1, #31
 800370c:	d440      	bmi.n	8003790 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370e:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <HAL_RCC_ClockConfig+0x120>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	f002 020f 	and.w	r2, r2, #15
 8003716:	42aa      	cmp	r2, r5
 8003718:	d865      	bhi.n	80037e6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	0751      	lsls	r1, r2, #29
 800371e:	d46b      	bmi.n	80037f8 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	0713      	lsls	r3, r2, #28
 8003722:	d507      	bpl.n	8003734 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003724:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_RCC_ClockConfig+0x124>)
 8003726:	6921      	ldr	r1, [r4, #16]
 8003728:	6893      	ldr	r3, [r2, #8]
 800372a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800372e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003732:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003734:	f7ff ffaa 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8003738:	4b34      	ldr	r3, [pc, #208]	; (800380c <HAL_RCC_ClockConfig+0x124>)
 800373a:	4a35      	ldr	r2, [pc, #212]	; (8003810 <HAL_RCC_ClockConfig+0x128>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	40d8      	lsrs	r0, r3
 8003746:	4b33      	ldr	r3, [pc, #204]	; (8003814 <HAL_RCC_ClockConfig+0x12c>)
 8003748:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <HAL_RCC_ClockConfig+0x130>)
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	f7fe fdab 	bl	80022a8 <HAL_InitTick>
  return HAL_OK;
 8003752:	2000      	movs	r0, #0
 8003754:	e7ce      	b.n	80036f4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	b2ca      	uxtb	r2, r1
 8003758:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	428b      	cmp	r3, r1
 8003762:	d1c6      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xa>
 8003764:	e7ce      	b.n	8003704 <HAL_RCC_ClockConfig+0x1c>
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	bf1e      	ittt	ne
 800376e:	689a      	ldrne	r2, [r3, #8]
 8003770:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8003774:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003778:	bf42      	ittt	mi
 800377a:	689a      	ldrmi	r2, [r3, #8]
 800377c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8003780:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68a0      	ldr	r0, [r4, #8]
 8003786:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800378a:	4302      	orrs	r2, r0
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	e7bc      	b.n	800370a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003790:	6862      	ldr	r2, [r4, #4]
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_RCC_ClockConfig+0x124>)
 8003794:	2a01      	cmp	r2, #1
 8003796:	d11c      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	d0a8      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a0:	4e1a      	ldr	r6, [pc, #104]	; (800380c <HAL_RCC_ClockConfig+0x124>)
 80037a2:	68b3      	ldr	r3, [r6, #8]
 80037a4:	f023 0303 	bic.w	r3, r3, #3
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80037ac:	f7fe fdc6 	bl	800233c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80037b4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	68b3      	ldr	r3, [r6, #8]
 80037b8:	6862      	ldr	r2, [r4, #4]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80037c2:	d0a4      	beq.n	800370e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fe fdba 	bl	800233c <HAL_GetTick>
 80037c8:	1bc0      	subs	r0, r0, r7
 80037ca:	4540      	cmp	r0, r8
 80037cc:	d9f3      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80037ce:	2003      	movs	r0, #3
 80037d0:	e790      	b.n	80036f4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	1e91      	subs	r1, r2, #2
 80037d4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d8:	d802      	bhi.n	80037e0 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037de:	e7de      	b.n	800379e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	f013 0f02 	tst.w	r3, #2
 80037e4:	e7db      	b.n	800379e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	b2ea      	uxtb	r2, r5
 80037e8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	42ab      	cmp	r3, r5
 80037f2:	f47f af7e 	bne.w	80036f2 <HAL_RCC_ClockConfig+0xa>
 80037f6:	e790      	b.n	800371a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4904      	ldr	r1, [pc, #16]	; (800380c <HAL_RCC_ClockConfig+0x124>)
 80037fa:	68e0      	ldr	r0, [r4, #12]
 80037fc:	688b      	ldr	r3, [r1, #8]
 80037fe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003802:	4303      	orrs	r3, r0
 8003804:	608b      	str	r3, [r1, #8]
 8003806:	e78b      	b.n	8003720 <HAL_RCC_ClockConfig+0x38>
 8003808:	40023c00 	.word	0x40023c00
 800380c:	40023800 	.word	0x40023800
 8003810:	08007b88 	.word	0x08007b88
 8003814:	2000007c 	.word	0x2000007c
 8003818:	20000084 	.word	0x20000084

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x14>)
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	4a03      	ldr	r2, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800382a:	6810      	ldr	r0, [r2, #0]
}
 800382c:	40d8      	lsrs	r0, r3
 800382e:	4770      	bx	lr
 8003830:	40023800 	.word	0x40023800
 8003834:	08007b98 	.word	0x08007b98
 8003838:	2000007c 	.word	0x2000007c

0800383c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x14>)
 800383e:	4a05      	ldr	r2, [pc, #20]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003846:	5cd3      	ldrb	r3, [r2, r3]
 8003848:	4a03      	ldr	r2, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800384a:	6810      	ldr	r0, [r2, #0]
}
 800384c:	40d8      	lsrs	r0, r3
 800384e:	4770      	bx	lr
 8003850:	40023800 	.word	0x40023800
 8003854:	08007b98 	.word	0x08007b98
 8003858:	2000007c 	.word	0x2000007c

0800385c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800385c:	6803      	ldr	r3, [r0, #0]
 800385e:	f013 0f05 	tst.w	r3, #5
{
 8003862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003864:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003866:	d105      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003868:	6828      	ldr	r0, [r5, #0]
 800386a:	f010 0002 	ands.w	r0, r0, #2
 800386e:	d128      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8003870:	b003      	add	sp, #12
 8003872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003874:	4c41      	ldr	r4, [pc, #260]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003876:	4e42      	ldr	r6, [pc, #264]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003878:	2300      	movs	r3, #0
 800387a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800387c:	f7fe fd5e 	bl	800233c <HAL_GetTick>
 8003880:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003882:	6833      	ldr	r3, [r6, #0]
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	d415      	bmi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003888:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003892:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003896:	2301      	movs	r3, #1
 8003898:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800389a:	f7fe fd4f 	bl	800233c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800389e:	4c38      	ldr	r4, [pc, #224]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 80038a0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	0118      	lsls	r0, r3, #4
 80038a6:	d4df      	bmi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038a8:	f7fe fd48 	bl	800233c <HAL_GetTick>
 80038ac:	1b80      	subs	r0, r0, r6
 80038ae:	2802      	cmp	r0, #2
 80038b0:	d9f7      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 80038b2:	e004      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038b4:	f7fe fd42 	bl	800233c <HAL_GetTick>
 80038b8:	1bc0      	subs	r0, r0, r7
 80038ba:	2802      	cmp	r0, #2
 80038bc:	d9e1      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 80038be:	2003      	movs	r0, #3
 80038c0:	e7d6      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 80038c8:	4c2e      	ldr	r4, [pc, #184]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80038e4:	f7fe fd2a 	bl	800233c <HAL_GetTick>
 80038e8:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	05d9      	lsls	r1, r3, #23
 80038ee:	d51b      	bpl.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f0:	4c23      	ldr	r4, [pc, #140]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80038f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80038f8:	d11c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038fa:	68eb      	ldr	r3, [r5, #12]
 80038fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003900:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003904:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003906:	d134      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003908:	6891      	ldr	r1, [r2, #8]
 800390a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800390e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003912:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003916:	4301      	orrs	r1, r0
 8003918:	6091      	str	r1, [r2, #8]
 800391a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800391c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003920:	430b      	orrs	r3, r1
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8003924:	2000      	movs	r0, #0
 8003926:	e7a3      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003928:	f7fe fd08 	bl	800233c <HAL_GetTick>
 800392c:	1b80      	subs	r0, r0, r6
 800392e:	2802      	cmp	r0, #2
 8003930:	d9db      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8003932:	e7c4      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003934:	68ea      	ldr	r2, [r5, #12]
 8003936:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800393a:	4293      	cmp	r3, r2
 800393c:	d0dd      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800393e:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003942:	2101      	movs	r1, #1
 8003944:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800394a:	2100      	movs	r1, #0
 800394c:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800394e:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003950:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003952:	07da      	lsls	r2, r3, #31
 8003954:	d5d1      	bpl.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8003956:	f7fe fcf1 	bl	800233c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800395e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003962:	079b      	lsls	r3, r3, #30
 8003964:	d4c9      	bmi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fe fce9 	bl	800233c <HAL_GetTick>
 800396a:	1b80      	subs	r0, r0, r6
 800396c:	42b8      	cmp	r0, r7
 800396e:	d9f7      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003970:	e7a5      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003972:	6891      	ldr	r1, [r2, #8]
 8003974:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003978:	e7ce      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 800397a:	bf00      	nop
 800397c:	42470068 	.word	0x42470068
 8003980:	40023800 	.word	0x40023800
 8003984:	40007000 	.word	0x40007000
 8003988:	42470e40 	.word	0x42470e40

0800398c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800398c:	2801      	cmp	r0, #1
 800398e:	d120      	bne.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8003992:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8003994:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8003998:	d004      	beq.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 800399a:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800399c:	480f      	ldr	r0, [pc, #60]	; (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800399e:	bf18      	it	ne
 80039a0:	2000      	movne	r0, #0
 80039a2:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039a4:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80039a6:	490c      	ldr	r1, [pc, #48]	; (80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039a8:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039aa:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80039ac:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039b0:	bf4c      	ite	mi
 80039b2:	4b0b      	ldrmi	r3, [pc, #44]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039b4:	4b0b      	ldrpl	r3, [pc, #44]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039ba:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80039be:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80039c2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80039c6:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80039c8:	f3c0 7002 	ubfx	r0, r0, #28, #3
 80039cc:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 80039d0:	4770      	bx	lr
          frequency = 0U;
 80039d2:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	00bb8000 	.word	0x00bb8000
 80039e0:	017d7840 	.word	0x017d7840
 80039e4:	00f42400 	.word	0x00f42400

080039e8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80039e8:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80039ea:	4604      	mov	r4, r0
 80039ec:	b190      	cbz	r0, 8003a14 <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80039ee:	7943      	ldrb	r3, [r0, #5]
 80039f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039f4:	b913      	cbnz	r3, 80039fc <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80039f6:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80039f8:	f7fe fb20 	bl	800203c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80039fc:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80039fe:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8003a00:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003a0a:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003a10:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 8003a12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a14:	2001      	movs	r0, #1
 8003a16:	e7fc      	b.n	8003a12 <HAL_RNG_Init+0x2a>

08003a18 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	460e      	mov	r6, r1
 8003a1e:	4615      	mov	r5, r2
 8003a20:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a22:	6821      	ldr	r1, [r4, #0]
 8003a24:	688a      	ldr	r2, [r1, #8]
 8003a26:	ea36 0302 	bics.w	r3, r6, r2
 8003a2a:	d001      	beq.n	8003a30 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e02d      	b.n	8003a8c <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8003a30:	1c6b      	adds	r3, r5, #1
 8003a32:	d0f7      	beq.n	8003a24 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003a34:	f7fe fc82 	bl	800233c <HAL_GetTick>
 8003a38:	1bc0      	subs	r0, r0, r7
 8003a3a:	4285      	cmp	r5, r0
 8003a3c:	d8f1      	bhi.n	8003a22 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a46:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a48:	6862      	ldr	r2, [r4, #4]
 8003a4a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003a4e:	d10a      	bne.n	8003a66 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 8003a50:	68a2      	ldr	r2, [r4, #8]
 8003a52:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003a56:	d002      	beq.n	8003a5e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a58:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003a5c:	d103      	bne.n	8003a66 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a64:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a68:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003a6c:	d107      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a7c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003a84:	2300      	movs	r3, #0
 8003a86:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003a8a:	2003      	movs	r0, #3
}
 8003a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a92:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a94:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <SPI_EndRxTxTransaction+0x50>)
 8003a96:	4e13      	ldr	r6, [pc, #76]	; (8003ae4 <SPI_EndRxTxTransaction+0x54>)
 8003a98:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a9a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a9c:	fbb5 f6f6 	udiv	r6, r5, r6
 8003aa0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003aa4:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8003aaa:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003aac:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aae:	d10b      	bne.n	8003ac8 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab0:	460a      	mov	r2, r1
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	f7ff ffb0 	bl	8003a18 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8003ab8:	b178      	cbz	r0, 8003ada <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003abc:	f043 0320 	orr.w	r3, r3, #32
 8003ac0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ac2:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8003ac8:	9b01      	ldr	r3, [sp, #4]
 8003aca:	b133      	cbz	r3, 8003ada <SPI_EndRxTxTransaction+0x4a>
      count--;
 8003acc:	9b01      	ldr	r3, [sp, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	d4f6      	bmi.n	8003ac8 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8003ada:	2000      	movs	r0, #0
 8003adc:	e7f2      	b.n	8003ac4 <SPI_EndRxTxTransaction+0x34>
 8003ade:	bf00      	nop
 8003ae0:	2000007c 	.word	0x2000007c
 8003ae4:	016e3600 	.word	0x016e3600

08003ae8 <HAL_SPI_Init>:
{
 8003ae8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003aea:	4604      	mov	r4, r0
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d036      	beq.n	8003b5e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003af4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003af8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003afc:	b91b      	cbnz	r3, 8003b06 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8003afe:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003b02:	f7fe fab3 	bl	800206c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003b06:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b08:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003b10:	680b      	ldr	r3, [r1, #0]
 8003b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b16:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b18:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8003b1c:	4303      	orrs	r3, r0
 8003b1e:	68e0      	ldr	r0, [r4, #12]
 8003b20:	4303      	orrs	r3, r0
 8003b22:	6920      	ldr	r0, [r4, #16]
 8003b24:	4303      	orrs	r3, r0
 8003b26:	6960      	ldr	r0, [r4, #20]
 8003b28:	4303      	orrs	r3, r0
 8003b2a:	69e0      	ldr	r0, [r4, #28]
 8003b2c:	4303      	orrs	r3, r0
 8003b2e:	6a20      	ldr	r0, [r4, #32]
 8003b30:	4303      	orrs	r3, r0
 8003b32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003b34:	4303      	orrs	r3, r0
 8003b36:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8003b3a:	4303      	orrs	r3, r0
 8003b3c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b3e:	0c12      	lsrs	r2, r2, #16
 8003b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b42:	f002 0204 	and.w	r2, r2, #4
 8003b46:	431a      	orrs	r2, r3
 8003b48:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b4a:	69cb      	ldr	r3, [r1, #28]
 8003b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b50:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b52:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003b54:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b56:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b58:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003b5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
 8003b60:	e7fc      	b.n	8003b5c <HAL_SPI_Init+0x74>

08003b62 <HAL_SPI_Transmit>:
{
 8003b62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003b66:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003b68:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003b6c:	2b01      	cmp	r3, #1
{
 8003b6e:	4604      	mov	r4, r0
 8003b70:	460d      	mov	r5, r1
 8003b72:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8003b74:	f000 809b 	beq.w	8003cae <HAL_SPI_Transmit+0x14c>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003b7e:	f7fe fbdd 	bl	800233c <HAL_GetTick>
 8003b82:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003b84:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8003b88:	b2c0      	uxtb	r0, r0
 8003b8a:	2801      	cmp	r0, #1
 8003b8c:	f040 808d 	bne.w	8003caa <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8003b90:	2d00      	cmp	r5, #0
 8003b92:	d05d      	beq.n	8003c50 <HAL_SPI_Transmit+0xee>
 8003b94:	f1b8 0f00 	cmp.w	r8, #0
 8003b98:	d05a      	beq.n	8003c50 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba0:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba2:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ba6:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003ba8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8003bac:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bae:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003bb0:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8003bb4:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bb6:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8003bbc:	bf08      	it	eq
 8003bbe:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8003bc0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8003bc4:	bf04      	itt	eq
 8003bc6:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8003bca:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bcc:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bce:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003bd2:	bf5e      	ittt	pl
 8003bd4:	6803      	ldrpl	r3, [r0, #0]
 8003bd6:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003bda:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bdc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003be0:	6863      	ldr	r3, [r4, #4]
 8003be2:	d13e      	bne.n	8003c62 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be4:	b113      	cbz	r3, 8003bec <HAL_SPI_Transmit+0x8a>
 8003be6:	f1b8 0f01 	cmp.w	r8, #1
 8003bea:	d107      	bne.n	8003bfc <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bec:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003bf0:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf2:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003bf4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003bfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	b9a3      	cbnz	r3, 8003c2c <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c02:	463a      	mov	r2, r7
 8003c04:	4631      	mov	r1, r6
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7ff ff42 	bl	8003a90 <SPI_EndRxTxTransaction>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d149      	bne.n	8003ca4 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c10:	68a3      	ldr	r3, [r4, #8]
 8003c12:	b933      	cbnz	r3, 8003c22 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	9201      	str	r2, [sp, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c22:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003c24:	3000      	adds	r0, #0
 8003c26:	bf18      	it	ne
 8003c28:	2001      	movne	r0, #1
error:
 8003c2a:	e011      	b.n	8003c50 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	6893      	ldr	r3, [r2, #8]
 8003c30:	0798      	lsls	r0, r3, #30
 8003c32:	d505      	bpl.n	8003c40 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c36:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003c3a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	6323      	str	r3, [r4, #48]	; 0x30
 8003c3e:	e7d9      	b.n	8003bf4 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c40:	f7fe fb7c 	bl	800233c <HAL_GetTick>
 8003c44:	1bc0      	subs	r0, r0, r7
 8003c46:	42b0      	cmp	r0, r6
 8003c48:	d3d8      	bcc.n	8003bfc <HAL_SPI_Transmit+0x9a>
 8003c4a:	1c71      	adds	r1, r6, #1
 8003c4c:	d0d6      	beq.n	8003bfc <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8003c4e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003c5c:	b002      	add	sp, #8
 8003c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c62:	b113      	cbz	r3, 8003c6a <HAL_SPI_Transmit+0x108>
 8003c64:	f1b8 0f01 	cmp.w	r8, #1
 8003c68:	d108      	bne.n	8003c7c <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c6a:	782b      	ldrb	r3, [r5, #0]
 8003c6c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c70:	3301      	adds	r3, #1
 8003c72:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003c74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003c7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0be      	beq.n	8003c02 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	0792      	lsls	r2, r2, #30
 8003c8a:	d503      	bpl.n	8003c94 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c8e:	7812      	ldrb	r2, [r2, #0]
 8003c90:	731a      	strb	r2, [r3, #12]
 8003c92:	e7ec      	b.n	8003c6e <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c94:	f7fe fb52 	bl	800233c <HAL_GetTick>
 8003c98:	1bc0      	subs	r0, r0, r7
 8003c9a:	42b0      	cmp	r0, r6
 8003c9c:	d3ee      	bcc.n	8003c7c <HAL_SPI_Transmit+0x11a>
 8003c9e:	1c73      	adds	r3, r6, #1
 8003ca0:	d0ec      	beq.n	8003c7c <HAL_SPI_Transmit+0x11a>
 8003ca2:	e7d4      	b.n	8003c4e <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	6563      	str	r3, [r4, #84]	; 0x54
 8003ca8:	e7b2      	b.n	8003c10 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8003caa:	2002      	movs	r0, #2
 8003cac:	e7d0      	b.n	8003c50 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8003cae:	2002      	movs	r0, #2
 8003cb0:	e7d4      	b.n	8003c5c <HAL_SPI_Transmit+0xfa>

08003cb2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb2:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003cb4:	b189      	cbz	r1, 8003cda <HAL_TIM_Encoder_Start+0x28>
 8003cb6:	2904      	cmp	r1, #4
 8003cb8:	d007      	beq.n	8003cca <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8003cca:	6a1a      	ldr	r2, [r3, #32]
 8003ccc:	f022 0210 	bic.w	r2, r2, #16
 8003cd0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	f042 0210 	orr.w	r2, r2, #16
 8003cd8:	e006      	b.n	8003ce8 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	4770      	bx	lr
	...

08003cf8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf8:	4a30      	ldr	r2, [pc, #192]	; (8003dbc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003cfa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cfc:	4290      	cmp	r0, r2
 8003cfe:	d012      	beq.n	8003d26 <TIM_Base_SetConfig+0x2e>
 8003d00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d04:	d00f      	beq.n	8003d26 <TIM_Base_SetConfig+0x2e>
 8003d06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003d0a:	4290      	cmp	r0, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0x2e>
 8003d0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d12:	4290      	cmp	r0, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0x2e>
 8003d16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d1a:	4290      	cmp	r0, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0x2e>
 8003d1e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d22:	4290      	cmp	r0, r2
 8003d24:	d119      	bne.n	8003d5a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8003d26:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <TIM_Base_SetConfig+0xc4>)
 8003d30:	4290      	cmp	r0, r2
 8003d32:	d029      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d38:	d026      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d3a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003d3e:	4290      	cmp	r0, r2
 8003d40:	d022      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d46:	4290      	cmp	r0, r2
 8003d48:	d01e      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d4e:	4290      	cmp	r0, r2
 8003d50:	d01a      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d52:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d56:	4290      	cmp	r0, r2
 8003d58:	d016      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d5a:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <TIM_Base_SetConfig+0xc8>)
 8003d5c:	4290      	cmp	r0, r2
 8003d5e:	d013      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d64:	4290      	cmp	r0, r2
 8003d66:	d00f      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d6c:	4290      	cmp	r0, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d70:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003d74:	4290      	cmp	r0, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d7c:	4290      	cmp	r0, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x90>
 8003d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d84:	4290      	cmp	r0, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d88:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d90:	694a      	ldr	r2, [r1, #20]
 8003d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d96:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d98:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d9a:	688b      	ldr	r3, [r1, #8]
 8003d9c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d9e:	680b      	ldr	r3, [r1, #0]
 8003da0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <TIM_Base_SetConfig+0xc4>)
 8003da4:	4298      	cmp	r0, r3
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0xb8>
 8003da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dac:	4298      	cmp	r0, r3
 8003dae:	d101      	bne.n	8003db4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	690b      	ldr	r3, [r1, #16]
 8003db2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003db4:	2301      	movs	r3, #1
 8003db6:	6143      	str	r3, [r0, #20]
}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40014000 	.word	0x40014000

08003dc4 <HAL_TIM_Encoder_Init>:
{
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	460c      	mov	r4, r1
  if (htim == NULL)
 8003dc8:	4605      	mov	r5, r0
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	d043      	beq.n	8003e56 <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003dd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dd6:	b91b      	cbnz	r3, 8003de0 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8003dd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003ddc:	f7fe f97c 	bl	80020d8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003de0:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8003de2:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003de4:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dec:	6883      	ldr	r3, [r0, #8]
 8003dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df2:	f023 0307 	bic.w	r3, r3, #7
 8003df6:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df8:	f7ff ff7e 	bl	8003cf8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003dfc:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8003dfe:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003e02:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e04:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8003e06:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003e08:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e0a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e10:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e14:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003e18:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e1a:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e1e:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e20:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003e28:	68e1      	ldr	r1, [r4, #12]
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e2e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e32:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003e36:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e38:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e3a:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e3e:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8003e40:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e42:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8003e46:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e48:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 8003e4a:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8003e4c:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8003e4e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8003e52:	2000      	movs	r0, #0
}
 8003e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003e56:	2001      	movs	r0, #1
 8003e58:	e7fc      	b.n	8003e54 <HAL_TIM_Encoder_Init+0x90>
	...

08003e5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
{
 8003e62:	b530      	push	{r4, r5, lr}
 8003e64:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003e68:	d035      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e70:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8003e72:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e74:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8003e78:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7a:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8003e7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e82:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	4c15      	ldr	r4, [pc, #84]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8003e86:	42a3      	cmp	r3, r4
 8003e88:	d01a      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d017      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003e90:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	d013      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003e98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	d00f      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003ea0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003ea8:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d007      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003eb0:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003eb4:	42a3      	cmp	r3, r4
 8003eb6:	d003      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003eb8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	d104      	bne.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ec8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003ed6:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003ed8:	bd30      	pop	{r4, r5, pc}
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000

08003ee0 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee0:	6803      	ldr	r3, [r0, #0]
 8003ee2:	68c1      	ldr	r1, [r0, #12]
 8003ee4:	691a      	ldr	r2, [r3, #16]
{
 8003ee6:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8003eec:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ef2:	6925      	ldr	r5, [r4, #16]
 8003ef4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ef6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ef8:	69c0      	ldr	r0, [r0, #28]
 8003efa:	432a      	orrs	r2, r5
 8003efc:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003efe:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f02:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8003f04:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f08:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	69a1      	ldr	r1, [r4, #24]
 8003f12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f16:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f1c:	615a      	str	r2, [r3, #20]
 8003f1e:	4a26      	ldr	r2, [pc, #152]	; (8003fb8 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f20:	d129      	bne.n	8003f76 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <UART_SetConfig+0x4e>
 8003f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d120      	bne.n	8003f70 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f2e:	f7ff fc85 	bl	800383c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f32:	6862      	ldr	r2, [r4, #4]
 8003f34:	2600      	movs	r6, #0
 8003f36:	1892      	adds	r2, r2, r2
 8003f38:	f04f 0119 	mov.w	r1, #25
 8003f3c:	eb46 0306 	adc.w	r3, r6, r6
 8003f40:	fba0 0101 	umull	r0, r1, r0, r1
 8003f44:	f7fc fe78 	bl	8000c38 <__aeabi_uldivmod>
 8003f48:	2164      	movs	r1, #100	; 0x64
 8003f4a:	fbb0 f5f1 	udiv	r5, r0, r1
 8003f4e:	fb01 0315 	mls	r3, r1, r5, r0
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	3332      	adds	r3, #50	; 0x32
 8003f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f5a:	f003 0207 	and.w	r2, r3, #7
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	6821      	ldr	r1, [r4, #0]
 8003f62:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8003f66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f6a:	4413      	add	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f70:	f7ff fc54 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8003f74:	e7dd      	b.n	8003f32 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d002      	beq.n	8003f80 <UART_SetConfig+0xa0>
 8003f7a:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <UART_SetConfig+0xdc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d117      	bne.n	8003fb0 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f80:	f7ff fc5c 	bl	800383c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f84:	6863      	ldr	r3, [r4, #4]
 8003f86:	2119      	movs	r1, #25
 8003f88:	009a      	lsls	r2, r3, #2
 8003f8a:	fba0 0101 	umull	r0, r1, r0, r1
 8003f8e:	0f9b      	lsrs	r3, r3, #30
 8003f90:	f7fc fe52 	bl	8000c38 <__aeabi_uldivmod>
 8003f94:	2264      	movs	r2, #100	; 0x64
 8003f96:	fbb0 f1f2 	udiv	r1, r0, r2
 8003f9a:	fb02 0311 	mls	r3, r2, r1, r0
 8003f9e:	6824      	ldr	r4, [r4, #0]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	3332      	adds	r3, #50	; 0x32
 8003fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fa8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003fac:	60a3      	str	r3, [r4, #8]
}
 8003fae:	e7de      	b.n	8003f6e <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7ff fc34 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8003fb4:	e7e6      	b.n	8003f84 <UART_SetConfig+0xa4>
 8003fb6:	bf00      	nop
 8003fb8:	40011000 	.word	0x40011000
 8003fbc:	40011400 	.word	0x40011400

08003fc0 <HAL_UART_Init>:
{
 8003fc0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	b340      	cbz	r0, 8004018 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003fca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fce:	b91b      	cbnz	r3, 8003fd8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003fd0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003fd4:	f7fe f8b6 	bl	8002144 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003fd8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003fda:	2324      	movs	r3, #36	; 0x24
 8003fdc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003fe0:	68d3      	ldr	r3, [r2, #12]
 8003fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7ff ff79 	bl	8003ee0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004006:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800400a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800400e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004012:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8004016:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
 800401a:	e7fc      	b.n	8004016 <HAL_UART_Init+0x56>

0800401c <_ZN10OscillatorC1Eff>:
#include "oscillator.h"

Oscillator::Oscillator(float_t a, float_t f)
{
    amp = a;
 800401c:	ed80 0a00 	vstr	s0, [r0]
    last_amp = a;
 8004020:	ed80 0a01 	vstr	s0, [r0, #4]
    freq = f;
 8004024:	edc0 0a02 	vstr	s1, [r0, #8]
    Init();
};

void Oscillator::Init()
{
    phase = 0;
 8004028:	2200      	movs	r2, #0
 800402a:	60c2      	str	r2, [r0, #12]
    out = 0;
 800402c:	61c2      	str	r2, [r0, #28]
    modInd = 0;
 800402e:	6142      	str	r2, [r0, #20]
    mul = 1;
 8004030:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004034:	6182      	str	r2, [r0, #24]
};
 8004036:	4770      	bx	lr

08004038 <_ZN14SoundGenerator4SineEP10Oscillator>:

char *SoundGenerator::soundNames[8] = {"Sine", "Sine2", "Sawtooth",
											 "Square", "Saxxx", "Jappy", "Star", "Microwave"};

float SoundGenerator::Sine(Oscillator *osc)
{
 8004038:	b510      	push	{r4, lr}
 800403a:	ed2d 8b02 	vpush	{d8}
 800403e:	4604      	mov	r4, r0
	float_t z;

	while (osc->phase < 0) // keep phase in [0, 2pi]
 8004040:	edd0 7a03 	vldr	s15, [r0, #12]
 8004044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404c:	d50a      	bpl.n	8004064 <_ZN14SoundGenerator4SineEP10Oscillator+0x2c>
		osc->phase += _2PI;
 800404e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80040c4 <_ZN14SoundGenerator4SineEP10Oscillator+0x8c>
 8004052:	ee77 7a87 	vadd.f32	s15, s15, s14
	while (osc->phase < 0) // keep phase in [0, 2pi]
 8004056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	d4f8      	bmi.n	8004052 <_ZN14SoundGenerator4SineEP10Oscillator+0x1a>
 8004060:	edc4 7a03 	vstr	s15, [r4, #12]
	while (osc->phase >= _2PI)
 8004064:	ed94 8a03 	vldr	s16, [r4, #12]
 8004068:	eddf 7a16 	vldr	s15, [pc, #88]	; 80040c4 <_ZN14SoundGenerator4SineEP10Oscillator+0x8c>
 800406c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004074:	db06      	blt.n	8004084 <_ZN14SoundGenerator4SineEP10Oscillator+0x4c>
		osc->phase -= _2PI;
 8004076:	ee38 8a67 	vsub.f32	s16, s16, s15
	while (osc->phase >= _2PI)
 800407a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004082:	daf8      	bge.n	8004076 <_ZN14SoundGenerator4SineEP10Oscillator+0x3e>

	z = sinf(osc->phase);
 8004084:	eeb0 0a48 	vmov.f32	s0, s16
 8004088:	f000 f9a6 	bl	80043d8 <sinf>
	osc->out = osc->amp * z * z * z * z * z;
 800408c:	edd4 7a00 	vldr	s15, [r4]
 8004090:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004094:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004098:	ee67 7a80 	vmul.f32	s15, s15, s0
 800409c:	ee67 7a80 	vmul.f32	s15, s15, s0
 80040a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80040a4:	ed84 0a07 	vstr	s0, [r4, #28]

	osc->phase += _2PI * Ts * osc->freq; // increment phase
 80040a8:	edd4 7a02 	vldr	s15, [r4, #8]
 80040ac:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80040c8 <_ZN14SoundGenerator4SineEP10Oscillator+0x90>
 80040b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b4:	ee37 8a88 	vadd.f32	s16, s15, s16
 80040b8:	ed84 8a03 	vstr	s16, [r4, #12]
	return osc->out;
}
 80040bc:	ecbd 8b02 	vpop	{d8}
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	bf00      	nop
 80040c4:	40c90fdb 	.word	0x40c90fdb
 80040c8:	39156592 	.word	0x39156592

080040cc <_ZN14SoundGenerator9SineTableEP10Oscillator>:

float_t SoundGenerator::SineTable(Oscillator *op) // Complex waveform : +/- |sin(phi)|^alpha(freq), tends to a sine at high freqs
{
 80040cc:	b510      	push	{r4, lr}
 80040ce:	ed2d 8b02 	vpush	{d8}
 80040d2:	4604      	mov	r4, r0
	float_t z, x, alpha;

	while (op->phase < 0) // keep phase in [0, 2pi]
 80040d4:	edd0 7a03 	vldr	s15, [r0, #12]
 80040d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e0:	d50a      	bpl.n	80040f8 <_ZN14SoundGenerator9SineTableEP10Oscillator+0x2c>
		op->phase += _2PI;
 80040e2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80041ac <_ZN14SoundGenerator9SineTableEP10Oscillator+0xe0>
 80040e6:	ee77 7a87 	vadd.f32	s15, s15, s14
	while (op->phase < 0) // keep phase in [0, 2pi]
 80040ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f2:	d4f8      	bmi.n	80040e6 <_ZN14SoundGenerator9SineTableEP10Oscillator+0x1a>
 80040f4:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase >= _2PI)
 80040f8:	edd4 7a03 	vldr	s15, [r4, #12]
 80040fc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80041ac <_ZN14SoundGenerator9SineTableEP10Oscillator+0xe0>
 8004100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	db08      	blt.n	800411c <_ZN14SoundGenerator9SineTableEP10Oscillator+0x50>
		op->phase -= _2PI;
 800410a:	ee77 7ac7 	vsub.f32	s15, s15, s14
	while (op->phase >= _2PI)
 800410e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	daf8      	bge.n	800410a <_ZN14SoundGenerator9SineTableEP10Oscillator+0x3e>
 8004118:	edc4 7a03 	vstr	s15, [r4, #12]

	x = op->freq;
 800411c:	ed94 8a02 	vldr	s16, [r4, #8]
	alpha = 81.096f + x * (-.037f + .582E-5f * x - .311E-9f * x * x); //alpha varies from 80 to 1 with freq from 30Hz to 8000Hz
	//alpha = 60.695f -.023f * x + .31E-5f * x*x -.141E-9f * x*x*x ;
	//alpha = (50.f-1)/(30.f-8000)*(x - 8000) + 1 ;
	//z = powf(fabsf(sinf(op->phase )), alpha) ;

	z = powf(fabsf(sinetable[lrintf(ALPHA * (op->phase))]), alpha);
 8004120:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80041b0 <_ZN14SoundGenerator9SineTableEP10Oscillator+0xe4>
 8004124:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004128:	f000 f916 	bl	8004358 <lrintf>
	alpha = 81.096f + x * (-.037f + .582E-5f * x - .311E-9f * x * x); //alpha varies from 80 to 1 with freq from 30Hz to 8000Hz
 800412c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80041b4 <_ZN14SoundGenerator9SineTableEP10Oscillator+0xe8>
 8004130:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004134:	eddf 0a20 	vldr	s1, [pc, #128]	; 80041b8 <_ZN14SoundGenerator9SineTableEP10Oscillator+0xec>
 8004138:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800413c:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80041bc <_ZN14SoundGenerator9SineTableEP10Oscillator+0xf0>
 8004140:	ee68 0a20 	vmul.f32	s1, s16, s1
 8004144:	ee60 0a88 	vmul.f32	s1, s1, s16
 8004148:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800414c:	ee67 7a88 	vmul.f32	s15, s15, s16
	z = powf(fabsf(sinetable[lrintf(ALPHA * (op->phase))]), alpha);
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <_ZN14SoundGenerator9SineTableEP10Oscillator+0xf4>)
 8004152:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004156:	ed90 0a00 	vldr	s0, [r0]
 800415a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80041c4 <_ZN14SoundGenerator9SineTableEP10Oscillator+0xf8>
 800415e:	ee77 0aa0 	vadd.f32	s1, s15, s1
 8004162:	eeb0 0ac0 	vabs.f32	s0, s0
 8004166:	f000 f9f9 	bl	800455c <powf>

	if (op->phase < _PI)
 800416a:	ed94 7a03 	vldr	s14, [r4, #12]
 800416e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80041c8 <_ZN14SoundGenerator9SineTableEP10Oscillator+0xfc>
 8004172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		op->out = op->amp * z;
 800417a:	edd4 7a00 	vldr	s15, [r4]
 800417e:	bf4c      	ite	mi
 8004180:	ee27 0a80 	vmulmi.f32	s0, s15, s0
	else
		op->out = -op->amp * z;
 8004184:	ee27 0ac0 	vnmulpl.f32	s0, s15, s0
 8004188:	ed84 0a07 	vstr	s0, [r4, #28]

	op->phase += _2PI * Ts * op->freq; // increment phase
 800418c:	edd4 7a02 	vldr	s15, [r4, #8]
 8004190:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80041cc <_ZN14SoundGenerator9SineTableEP10Oscillator+0x100>
 8004194:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800419c:	edc4 7a03 	vstr	s15, [r4, #12]

	return op->out;
 80041a0:	ed94 0a07 	vldr	s0, [r4, #28]
 80041a4:	ecbd 8b02 	vpop	{d8}
 80041a8:	bd10      	pop	{r4, pc}
 80041aa:	bf00      	nop
 80041ac:	40c90fdb 	.word	0x40c90fdb
 80041b0:	4322f983 	.word	0x4322f983
 80041b4:	36c3496b 	.word	0x36c3496b
 80041b8:	3d178d50 	.word	0x3d178d50
 80041bc:	2faaf95c 	.word	0x2faaf95c
 80041c0:	080069d8 	.word	0x080069d8
 80041c4:	42a23127 	.word	0x42a23127
 80041c8:	40490fdb 	.word	0x40490fdb
 80041cc:	39156592 	.word	0x39156592

080041d0 <_ZN5SynthC1Ev>:
        inst_ = new Synth();
    }
    return (inst_);
}

Synth::Synth()
 80041d0:	b510      	push	{r4, lr}
 80041d2:	ed2d 8b02 	vpush	{d8}
 80041d6:	b088      	sub	sp, #32
 80041d8:	4604      	mov	r4, r0
 80041da:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8004224 <_ZN5SynthC1Ev+0x54>
 80041de:	eef0 0a48 	vmov.f32	s1, s16
 80041e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041e6:	3020      	adds	r0, #32
 80041e8:	f7ff ff18 	bl	800401c <_ZN10OscillatorC1Eff>
{
    static float f0 _CCM_;
    vol = env = 1;
 80041ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041f0:	ed84 0a04 	vstr	s0, [r4, #16]
 80041f4:	ed84 0a03 	vstr	s0, [r4, #12]
    sound = SINE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	7723      	strb	r3, [r4, #28]
    autoFilterON = false;
 80041fc:	7023      	strb	r3, [r4, #0]
    autoSound = 0;
 80041fe:	7123      	strb	r3, [r4, #4]
    chorusON = false;
 8004200:	70e3      	strb	r3, [r4, #3]
    delayON = false;
 8004202:	7063      	strb	r3, [r4, #1]
    phaserON = true;
 8004204:	2301      	movs	r3, #1
 8004206:	70a3      	strb	r3, [r4, #2]
    currentNote = 50;
 8004208:	2332      	movs	r3, #50	; 0x32
 800420a:	6163      	str	r3, [r4, #20]
    velocity = 127;
 800420c:	237f      	movs	r3, #127	; 0x7f
 800420e:	61a3      	str	r3, [r4, #24]
    Oscillator osc1;
 8004210:	eef0 0a48 	vmov.f32	s1, s16
 8004214:	4668      	mov	r0, sp
 8004216:	f7ff ff01 	bl	800401c <_ZN10OscillatorC1Eff>
}
 800421a:	4620      	mov	r0, r4
 800421c:	b008      	add	sp, #32
 800421e:	ecbd 8b02 	vpop	{d8}
 8004222:	bd10      	pop	{r4, pc}
 8004224:	43fa0000 	.word	0x43fa0000

08004228 <_ZN5Synth11getInstanceEv>:
    if (inst_ == NULL)
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <_ZN5Synth11getInstanceEv+0x24>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	b113      	cbz	r3, 8004234 <_ZN5Synth11getInstanceEv+0xc>
}
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <_ZN5Synth11getInstanceEv+0x24>)
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	4770      	bx	lr
{
 8004234:	b510      	push	{r4, lr}
        inst_ = new Synth();
 8004236:	2040      	movs	r0, #64	; 0x40
 8004238:	f000 f874 	bl	8004324 <_Znwj>
 800423c:	4604      	mov	r4, r0
 800423e:	f7ff ffc7 	bl	80041d0 <_ZN5SynthC1Ev>
 8004242:	4b02      	ldr	r3, [pc, #8]	; (800424c <_ZN5Synth11getInstanceEv+0x24>)
 8004244:	601c      	str	r4, [r3, #0]
}
 8004246:	4b01      	ldr	r3, [pc, #4]	; (800424c <_ZN5Synth11getInstanceEv+0x24>)
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	bd10      	pop	{r4, pc}
 800424c:	200010e8 	.word	0x200010e8

08004250 <_ZN5Synth17generate_waveformEf>:
        *outp++ = valueR; // right channel sample
    }
}

float Synth::generate_waveform(float freq)
{
 8004250:	b510      	push	{r4, lr}
 8004252:	4604      	mov	r4, r0
    float y;

    // Set osc1 frequency
    osc1.freq = freq;
 8004254:	ed80 0a0a 	vstr	s0, [r0, #40]	; 0x28

    switch (sound)
 8004258:	7f03      	ldrb	r3, [r0, #28]
 800425a:	b12b      	cbz	r3, 8004268 <_ZN5Synth17generate_waveformEf+0x18>
    {
    case SINE:
        y = SoundGenerator::Sine(&osc1);
        break;
    default:
        y = SoundGenerator::SineTable(&osc1);
 800425c:	3020      	adds	r0, #32
 800425e:	f7ff ff35 	bl	80040cc <_ZN14SoundGenerator9SineTableEP10Oscillator>
    //     y = 0;
    //     break;
    // }

    return osc1.out;
}
 8004262:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8004266:	bd10      	pop	{r4, pc}
        y = SoundGenerator::Sine(&osc1);
 8004268:	3020      	adds	r0, #32
 800426a:	f7ff fee5 	bl	8004038 <_ZN14SoundGenerator4SineEP10Oscillator>
        break;
 800426e:	e7f8      	b.n	8004262 <_ZN5Synth17generate_waveformEf+0x12>

08004270 <_ZN5Synth10make_soundEPtt>:
    for (pos = 0; pos < length; pos++)
 8004270:	2a00      	cmp	r2, #0
 8004272:	d04d      	beq.n	8004310 <_ZN5Synth10make_soundEPtt+0xa0>
{
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	ed2d 8b02 	vpush	{d8}
 800427a:	4604      	mov	r4, r0
 800427c:	1d0d      	adds	r5, r1, #4
 800427e:	1e56      	subs	r6, r2, #1
 8004280:	b2b6      	uxth	r6, r6
 8004282:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8004286:	f101 0608 	add.w	r6, r1, #8
        f0 = notesFreq[currentNote];
 800428a:	4f22      	ldr	r7, [pc, #136]	; (8004314 <_ZN5Synth10make_soundEPtt+0xa4>)
        vol = (float)velocity / 127.0f;
 800428c:	eddf 8a22 	vldr	s17, [pc, #136]	; 8004318 <_ZN5Synth10make_soundEPtt+0xa8>
        valueL = (uint16_t)((int16_t)((32767.0f) * yL)); // conversion float -> int
 8004290:	ed9f 8a22 	vldr	s16, [pc, #136]	; 800431c <_ZN5Synth10make_soundEPtt+0xac>
 8004294:	e016      	b.n	80042c4 <_ZN5Synth10make_soundEPtt+0x54>
        yL = (yL < -1.0f) ? -1.0f : yL;
 8004296:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800429a:	eeb4 0a67 	vcmp.f32	s0, s15
 800429e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a2:	bf48      	it	mi
 80042a4:	eeb0 0a67 	vmovmi.f32	s0, s15
        valueL = (uint16_t)((int16_t)((32767.0f) * yL)); // conversion float -> int
 80042a8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80042ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80042b0:	ee10 3a10 	vmov	r3, s0
 80042b4:	b29b      	uxth	r3, r3
        *outp++ = valueL; // left channel sample
 80042b6:	f825 3c04 	strh.w	r3, [r5, #-4]
        *outp++ = valueR; // right channel sample
 80042ba:	f825 3c02 	strh.w	r3, [r5, #-2]
 80042be:	3504      	adds	r5, #4
    for (pos = 0; pos < length; pos++)
 80042c0:	42b5      	cmp	r5, r6
 80042c2:	d022      	beq.n	800430a <_ZN5Synth10make_soundEPtt+0x9a>
        f0 = notesFreq[currentNote];
 80042c4:	6963      	ldr	r3, [r4, #20]
 80042c6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80042ca:	ed93 0a00 	vldr	s0, [r3]
 80042ce:	ed84 0a02 	vstr	s0, [r4, #8]
        vol = (float)velocity / 127.0f;
 80042d2:	edd4 7a06 	vldr	s15, [r4, #24]
 80042d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042da:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80042de:	ed84 7a03 	vstr	s14, [r4, #12]
        y = generate_waveform(f0);
 80042e2:	4620      	mov	r0, r4
 80042e4:	f7ff ffb4 	bl	8004250 <_ZN5Synth17generate_waveformEf>
        globaly = y;
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <_ZN5Synth10make_soundEPtt+0xb0>)
 80042ea:	ed83 0a00 	vstr	s0, [r3]
        y *= vol; // apply volume and envelop
 80042ee:	edd4 7a03 	vldr	s15, [r4, #12]
 80042f2:	ee20 0a27 	vmul.f32	s0, s0, s15
        yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 80042f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80042fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	ddc8      	ble.n	8004296 <_ZN5Synth10make_soundEPtt+0x26>
 8004304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004308:	e7ce      	b.n	80042a8 <_ZN5Synth10make_soundEPtt+0x38>
}
 800430a:	ecbd 8b02 	vpop	{d8}
 800430e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	080079dc 	.word	0x080079dc
 8004318:	42fe0000 	.word	0x42fe0000
 800431c:	46fffe00 	.word	0x46fffe00
 8004320:	200010ec 	.word	0x200010ec

08004324 <_Znwj>:
 8004324:	b510      	push	{r4, lr}
 8004326:	2800      	cmp	r0, #0
 8004328:	bf14      	ite	ne
 800432a:	4604      	movne	r4, r0
 800432c:	2401      	moveq	r4, #1
 800432e:	4620      	mov	r0, r4
 8004330:	f001 fd2a 	bl	8005d88 <malloc>
 8004334:	b930      	cbnz	r0, 8004344 <_Znwj+0x20>
 8004336:	f000 f807 	bl	8004348 <_ZSt15get_new_handlerv>
 800433a:	b908      	cbnz	r0, 8004340 <_Znwj+0x1c>
 800433c:	f001 fcf2 	bl	8005d24 <abort>
 8004340:	4780      	blx	r0
 8004342:	e7f4      	b.n	800432e <_Znwj+0xa>
 8004344:	bd10      	pop	{r4, pc}
	...

08004348 <_ZSt15get_new_handlerv>:
 8004348:	4b02      	ldr	r3, [pc, #8]	; (8004354 <_ZSt15get_new_handlerv+0xc>)
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	f3bf 8f5b 	dmb	ish
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	200010f0 	.word	0x200010f0

08004358 <lrintf>:
 8004358:	ee10 3a10 	vmov	r3, s0
 800435c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004360:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8004364:	281e      	cmp	r0, #30
 8004366:	b082      	sub	sp, #8
 8004368:	dc2e      	bgt.n	80043c8 <lrintf+0x70>
 800436a:	1c41      	adds	r1, r0, #1
 800436c:	da02      	bge.n	8004374 <lrintf+0x1c>
 800436e:	2000      	movs	r0, #0
 8004370:	b002      	add	sp, #8
 8004372:	4770      	bx	lr
 8004374:	2816      	cmp	r0, #22
 8004376:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800437a:	dd09      	ble.n	8004390 <lrintf+0x38>
 800437c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8004380:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004384:	3a96      	subs	r2, #150	; 0x96
 8004386:	4090      	lsls	r0, r2
 8004388:	2900      	cmp	r1, #0
 800438a:	d0f1      	beq.n	8004370 <lrintf+0x18>
 800438c:	4240      	negs	r0, r0
 800438e:	e7ef      	b.n	8004370 <lrintf+0x18>
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <lrintf+0x7c>)
 8004392:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004396:	ed93 7a00 	vldr	s14, [r3]
 800439a:	ee37 0a00 	vadd.f32	s0, s14, s0
 800439e:	ed8d 0a01 	vstr	s0, [sp, #4]
 80043a2:	eddd 7a01 	vldr	s15, [sp, #4]
 80043a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043aa:	ee17 3a90 	vmov	r3, s15
 80043ae:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80043b2:	d0dc      	beq.n	800436e <lrintf+0x16>
 80043b4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80043b8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80043bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80043c0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80043c4:	40d8      	lsrs	r0, r3
 80043c6:	e7df      	b.n	8004388 <lrintf+0x30>
 80043c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80043cc:	ee17 0a90 	vmov	r0, s15
 80043d0:	e7ce      	b.n	8004370 <lrintf+0x18>
 80043d2:	bf00      	nop
 80043d4:	08007bf0 	.word	0x08007bf0

080043d8 <sinf>:
 80043d8:	ee10 3a10 	vmov	r3, s0
 80043dc:	b507      	push	{r0, r1, r2, lr}
 80043de:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <sinf+0x7c>)
 80043e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043e4:	4293      	cmp	r3, r2
 80043e6:	dc05      	bgt.n	80043f4 <sinf+0x1c>
 80043e8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004458 <sinf+0x80>
 80043ec:	2000      	movs	r0, #0
 80043ee:	f001 f975 	bl	80056dc <__kernel_sinf>
 80043f2:	e004      	b.n	80043fe <sinf+0x26>
 80043f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80043f8:	db04      	blt.n	8004404 <sinf+0x2c>
 80043fa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80043fe:	b003      	add	sp, #12
 8004400:	f85d fb04 	ldr.w	pc, [sp], #4
 8004404:	4668      	mov	r0, sp
 8004406:	f000 fd59 	bl	8004ebc <__ieee754_rem_pio2f>
 800440a:	f000 0003 	and.w	r0, r0, #3
 800440e:	2801      	cmp	r0, #1
 8004410:	d008      	beq.n	8004424 <sinf+0x4c>
 8004412:	2802      	cmp	r0, #2
 8004414:	d00d      	beq.n	8004432 <sinf+0x5a>
 8004416:	b9b0      	cbnz	r0, 8004446 <sinf+0x6e>
 8004418:	2001      	movs	r0, #1
 800441a:	eddd 0a01 	vldr	s1, [sp, #4]
 800441e:	ed9d 0a00 	vldr	s0, [sp]
 8004422:	e7e4      	b.n	80043ee <sinf+0x16>
 8004424:	eddd 0a01 	vldr	s1, [sp, #4]
 8004428:	ed9d 0a00 	vldr	s0, [sp]
 800442c:	f000 fe76 	bl	800511c <__kernel_cosf>
 8004430:	e7e5      	b.n	80043fe <sinf+0x26>
 8004432:	2001      	movs	r0, #1
 8004434:	eddd 0a01 	vldr	s1, [sp, #4]
 8004438:	ed9d 0a00 	vldr	s0, [sp]
 800443c:	f001 f94e 	bl	80056dc <__kernel_sinf>
 8004440:	eeb1 0a40 	vneg.f32	s0, s0
 8004444:	e7db      	b.n	80043fe <sinf+0x26>
 8004446:	eddd 0a01 	vldr	s1, [sp, #4]
 800444a:	ed9d 0a00 	vldr	s0, [sp]
 800444e:	f000 fe65 	bl	800511c <__kernel_cosf>
 8004452:	e7f5      	b.n	8004440 <sinf+0x68>
 8004454:	3f490fd8 	.word	0x3f490fd8
 8004458:	00000000 	.word	0x00000000

0800445c <log10>:
 800445c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445e:	ed2d 8b02 	vpush	{d8}
 8004462:	b08b      	sub	sp, #44	; 0x2c
 8004464:	ec55 4b10 	vmov	r4, r5, d0
 8004468:	f000 f9de 	bl	8004828 <__ieee754_log10>
 800446c:	4b36      	ldr	r3, [pc, #216]	; (8004548 <log10+0xec>)
 800446e:	eeb0 8a40 	vmov.f32	s16, s0
 8004472:	eef0 8a60 	vmov.f32	s17, s1
 8004476:	f993 6000 	ldrsb.w	r6, [r3]
 800447a:	1c73      	adds	r3, r6, #1
 800447c:	d05c      	beq.n	8004538 <log10+0xdc>
 800447e:	4622      	mov	r2, r4
 8004480:	462b      	mov	r3, r5
 8004482:	4620      	mov	r0, r4
 8004484:	4629      	mov	r1, r5
 8004486:	f7fc fb49 	bl	8000b1c <__aeabi_dcmpun>
 800448a:	4607      	mov	r7, r0
 800448c:	2800      	cmp	r0, #0
 800448e:	d153      	bne.n	8004538 <log10+0xdc>
 8004490:	2200      	movs	r2, #0
 8004492:	2300      	movs	r3, #0
 8004494:	4620      	mov	r0, r4
 8004496:	4629      	mov	r1, r5
 8004498:	f7fc fb22 	bl	8000ae0 <__aeabi_dcmple>
 800449c:	2800      	cmp	r0, #0
 800449e:	d04b      	beq.n	8004538 <log10+0xdc>
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <log10+0xf0>)
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	9708      	str	r7, [sp, #32]
 80044a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80044ae:	b9a6      	cbnz	r6, 80044da <log10+0x7e>
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <log10+0xf4>)
 80044b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80044b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80044ba:	4620      	mov	r0, r4
 80044bc:	2200      	movs	r2, #0
 80044be:	2300      	movs	r3, #0
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7fc faf9 	bl	8000ab8 <__aeabi_dcmpeq>
 80044c6:	bb40      	cbnz	r0, 800451a <log10+0xbe>
 80044c8:	2301      	movs	r3, #1
 80044ca:	2e02      	cmp	r6, #2
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	d119      	bne.n	8004504 <log10+0xa8>
 80044d0:	f001 fc30 	bl	8005d34 <__errno>
 80044d4:	2321      	movs	r3, #33	; 0x21
 80044d6:	6003      	str	r3, [r0, #0]
 80044d8:	e019      	b.n	800450e <log10+0xb2>
 80044da:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <log10+0xf8>)
 80044dc:	2200      	movs	r2, #0
 80044de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80044e2:	4620      	mov	r0, r4
 80044e4:	2200      	movs	r2, #0
 80044e6:	2300      	movs	r3, #0
 80044e8:	4629      	mov	r1, r5
 80044ea:	f7fc fae5 	bl	8000ab8 <__aeabi_dcmpeq>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d0ea      	beq.n	80044c8 <log10+0x6c>
 80044f2:	2302      	movs	r3, #2
 80044f4:	429e      	cmp	r6, r3
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	d111      	bne.n	800451e <log10+0xc2>
 80044fa:	f001 fc1b 	bl	8005d34 <__errno>
 80044fe:	2322      	movs	r3, #34	; 0x22
 8004500:	6003      	str	r3, [r0, #0]
 8004502:	e011      	b.n	8004528 <log10+0xcc>
 8004504:	4668      	mov	r0, sp
 8004506:	f001 f931 	bl	800576c <matherr>
 800450a:	2800      	cmp	r0, #0
 800450c:	d0e0      	beq.n	80044d0 <log10+0x74>
 800450e:	4812      	ldr	r0, [pc, #72]	; (8004558 <log10+0xfc>)
 8004510:	f001 f92e 	bl	8005770 <nan>
 8004514:	ed8d 0b06 	vstr	d0, [sp, #24]
 8004518:	e006      	b.n	8004528 <log10+0xcc>
 800451a:	2302      	movs	r3, #2
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	4668      	mov	r0, sp
 8004520:	f001 f924 	bl	800576c <matherr>
 8004524:	2800      	cmp	r0, #0
 8004526:	d0e8      	beq.n	80044fa <log10+0x9e>
 8004528:	9b08      	ldr	r3, [sp, #32]
 800452a:	b11b      	cbz	r3, 8004534 <log10+0xd8>
 800452c:	f001 fc02 	bl	8005d34 <__errno>
 8004530:	9b08      	ldr	r3, [sp, #32]
 8004532:	6003      	str	r3, [r0, #0]
 8004534:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004538:	eeb0 0a48 	vmov.f32	s0, s16
 800453c:	eef0 0a68 	vmov.f32	s1, s17
 8004540:	b00b      	add	sp, #44	; 0x2c
 8004542:	ecbd 8b02 	vpop	{d8}
 8004546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004548:	200000a8 	.word	0x200000a8
 800454c:	08007bf8 	.word	0x08007bf8
 8004550:	c7efffff 	.word	0xc7efffff
 8004554:	fff00000 	.word	0xfff00000
 8004558:	08007ff9 	.word	0x08007ff9

0800455c <powf>:
 800455c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8004560:	ed2d 8b04 	vpush	{d8-d9}
 8004564:	4ca7      	ldr	r4, [pc, #668]	; (8004804 <powf+0x2a8>)
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	eef0 8a40 	vmov.f32	s17, s0
 800456c:	eeb0 8a60 	vmov.f32	s16, s1
 8004570:	f000 f9e4 	bl	800493c <__ieee754_powf>
 8004574:	f994 5000 	ldrsb.w	r5, [r4]
 8004578:	1c6b      	adds	r3, r5, #1
 800457a:	eeb0 9a40 	vmov.f32	s18, s0
 800457e:	4626      	mov	r6, r4
 8004580:	d05f      	beq.n	8004642 <powf+0xe6>
 8004582:	eeb4 8a48 	vcmp.f32	s16, s16
 8004586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458a:	d65a      	bvs.n	8004642 <powf+0xe6>
 800458c:	eef4 8a68 	vcmp.f32	s17, s17
 8004590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004594:	d721      	bvc.n	80045da <powf+0x7e>
 8004596:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459e:	d150      	bne.n	8004642 <powf+0xe6>
 80045a0:	2301      	movs	r3, #1
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4b98      	ldr	r3, [pc, #608]	; (8004808 <powf+0x2ac>)
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	ee18 0a90 	vmov	r0, s17
 80045ac:	2300      	movs	r3, #0
 80045ae:	9308      	str	r3, [sp, #32]
 80045b0:	f7fb ffc2 	bl	8000538 <__aeabi_f2d>
 80045b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045b8:	ee18 0a10 	vmov	r0, s16
 80045bc:	f7fb ffbc 	bl	8000538 <__aeabi_f2d>
 80045c0:	4b92      	ldr	r3, [pc, #584]	; (800480c <powf+0x2b0>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	2d02      	cmp	r5, #2
 80045c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045ce:	d032      	beq.n	8004636 <powf+0xda>
 80045d0:	4668      	mov	r0, sp
 80045d2:	f001 f8cb 	bl	800576c <matherr>
 80045d6:	bb40      	cbnz	r0, 800462a <powf+0xce>
 80045d8:	e065      	b.n	80046a6 <powf+0x14a>
 80045da:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8004810 <powf+0x2b4>
 80045de:	eef4 8a69 	vcmp.f32	s17, s19
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e6:	d163      	bne.n	80046b0 <powf+0x154>
 80045e8:	eeb4 8a69 	vcmp.f32	s16, s19
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	d12e      	bne.n	8004650 <powf+0xf4>
 80045f2:	2301      	movs	r3, #1
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4b84      	ldr	r3, [pc, #528]	; (8004808 <powf+0x2ac>)
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	ee18 0a90 	vmov	r0, s17
 80045fe:	2300      	movs	r3, #0
 8004600:	9308      	str	r3, [sp, #32]
 8004602:	f7fb ff99 	bl	8000538 <__aeabi_f2d>
 8004606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800460a:	ee18 0a10 	vmov	r0, s16
 800460e:	f7fb ff93 	bl	8000538 <__aeabi_f2d>
 8004612:	2200      	movs	r2, #0
 8004614:	2300      	movs	r3, #0
 8004616:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800461a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800461e:	2d00      	cmp	r5, #0
 8004620:	d0d6      	beq.n	80045d0 <powf+0x74>
 8004622:	4b7a      	ldr	r3, [pc, #488]	; (800480c <powf+0x2b0>)
 8004624:	2200      	movs	r2, #0
 8004626:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800462a:	9b08      	ldr	r3, [sp, #32]
 800462c:	b11b      	cbz	r3, 8004636 <powf+0xda>
 800462e:	f001 fb81 	bl	8005d34 <__errno>
 8004632:	9b08      	ldr	r3, [sp, #32]
 8004634:	6003      	str	r3, [r0, #0]
 8004636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800463a:	f7fc faad 	bl	8000b98 <__aeabi_d2f>
 800463e:	ee09 0a10 	vmov	s18, r0
 8004642:	eeb0 0a49 	vmov.f32	s0, s18
 8004646:	b00a      	add	sp, #40	; 0x28
 8004648:	ecbd 8b04 	vpop	{d8-d9}
 800464c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004650:	eeb0 0a48 	vmov.f32	s0, s16
 8004654:	f001 f89b 	bl	800578e <finitef>
 8004658:	2800      	cmp	r0, #0
 800465a:	d0f2      	beq.n	8004642 <powf+0xe6>
 800465c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004664:	d5ed      	bpl.n	8004642 <powf+0xe6>
 8004666:	2301      	movs	r3, #1
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	4b67      	ldr	r3, [pc, #412]	; (8004808 <powf+0x2ac>)
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	ee18 0a90 	vmov	r0, s17
 8004672:	2300      	movs	r3, #0
 8004674:	9308      	str	r3, [sp, #32]
 8004676:	f7fb ff5f 	bl	8000538 <__aeabi_f2d>
 800467a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800467e:	ee18 0a10 	vmov	r0, s16
 8004682:	f7fb ff59 	bl	8000538 <__aeabi_f2d>
 8004686:	f994 3000 	ldrsb.w	r3, [r4]
 800468a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800468e:	b923      	cbnz	r3, 800469a <powf+0x13e>
 8004690:	2200      	movs	r2, #0
 8004692:	2300      	movs	r3, #0
 8004694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004698:	e79a      	b.n	80045d0 <powf+0x74>
 800469a:	495e      	ldr	r1, [pc, #376]	; (8004814 <powf+0x2b8>)
 800469c:	2000      	movs	r0, #0
 800469e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d194      	bne.n	80045d0 <powf+0x74>
 80046a6:	f001 fb45 	bl	8005d34 <__errno>
 80046aa:	2321      	movs	r3, #33	; 0x21
 80046ac:	6003      	str	r3, [r0, #0]
 80046ae:	e7bc      	b.n	800462a <powf+0xce>
 80046b0:	f001 f86d 	bl	800578e <finitef>
 80046b4:	4605      	mov	r5, r0
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d173      	bne.n	80047a2 <powf+0x246>
 80046ba:	eeb0 0a68 	vmov.f32	s0, s17
 80046be:	f001 f866 	bl	800578e <finitef>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d06d      	beq.n	80047a2 <powf+0x246>
 80046c6:	eeb0 0a48 	vmov.f32	s0, s16
 80046ca:	f001 f860 	bl	800578e <finitef>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d067      	beq.n	80047a2 <powf+0x246>
 80046d2:	ee18 0a90 	vmov	r0, s17
 80046d6:	f7fb ff2f 	bl	8000538 <__aeabi_f2d>
 80046da:	4680      	mov	r8, r0
 80046dc:	ee18 0a10 	vmov	r0, s16
 80046e0:	4689      	mov	r9, r1
 80046e2:	f7fb ff29 	bl	8000538 <__aeabi_f2d>
 80046e6:	eeb4 9a49 	vcmp.f32	s18, s18
 80046ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ee:	f994 4000 	ldrsb.w	r4, [r4]
 80046f2:	4b45      	ldr	r3, [pc, #276]	; (8004808 <powf+0x2ac>)
 80046f4:	d713      	bvc.n	800471e <powf+0x1c2>
 80046f6:	2201      	movs	r2, #1
 80046f8:	e9cd 2300 	strd	r2, r3, [sp]
 80046fc:	9508      	str	r5, [sp, #32]
 80046fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004706:	2c00      	cmp	r4, #0
 8004708:	d0c2      	beq.n	8004690 <powf+0x134>
 800470a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800470e:	ee17 0a90 	vmov	r0, s15
 8004712:	f7fb ff11 	bl	8000538 <__aeabi_f2d>
 8004716:	2c02      	cmp	r4, #2
 8004718:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800471c:	e7c2      	b.n	80046a4 <powf+0x148>
 800471e:	2203      	movs	r2, #3
 8004720:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004724:	e9cd 2300 	strd	r2, r3, [sp]
 8004728:	9508      	str	r5, [sp, #32]
 800472a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800472e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004732:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004736:	b9fc      	cbnz	r4, 8004778 <powf+0x21c>
 8004738:	4b37      	ldr	r3, [pc, #220]	; (8004818 <powf+0x2bc>)
 800473a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800473e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800474a:	d553      	bpl.n	80047f4 <powf+0x298>
 800474c:	eeb0 0a48 	vmov.f32	s0, s16
 8004750:	f001 f870 	bl	8005834 <rintf>
 8004754:	eeb4 0a48 	vcmp.f32	s0, s16
 8004758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475c:	d004      	beq.n	8004768 <powf+0x20c>
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <powf+0x2c0>)
 8004760:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004764:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004768:	f996 3000 	ldrsb.w	r3, [r6]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d141      	bne.n	80047f4 <powf+0x298>
 8004770:	f001 fae0 	bl	8005d34 <__errno>
 8004774:	2322      	movs	r3, #34	; 0x22
 8004776:	e799      	b.n	80046ac <powf+0x150>
 8004778:	4b29      	ldr	r3, [pc, #164]	; (8004820 <powf+0x2c4>)
 800477a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800477e:	2200      	movs	r2, #0
 8004780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004784:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004788:	d5ee      	bpl.n	8004768 <powf+0x20c>
 800478a:	eeb0 0a48 	vmov.f32	s0, s16
 800478e:	f001 f851 	bl	8005834 <rintf>
 8004792:	eeb4 0a48 	vcmp.f32	s0, s16
 8004796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479a:	d0e5      	beq.n	8004768 <powf+0x20c>
 800479c:	2200      	movs	r2, #0
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <powf+0x2b8>)
 80047a0:	e7e0      	b.n	8004764 <powf+0x208>
 80047a2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80047a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047aa:	f47f af4a 	bne.w	8004642 <powf+0xe6>
 80047ae:	eeb0 0a68 	vmov.f32	s0, s17
 80047b2:	f000 ffec 	bl	800578e <finitef>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f43f af43 	beq.w	8004642 <powf+0xe6>
 80047bc:	eeb0 0a48 	vmov.f32	s0, s16
 80047c0:	f000 ffe5 	bl	800578e <finitef>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f43f af3c 	beq.w	8004642 <powf+0xe6>
 80047ca:	2304      	movs	r3, #4
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <powf+0x2ac>)
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	ee18 0a90 	vmov	r0, s17
 80047d6:	2300      	movs	r3, #0
 80047d8:	9308      	str	r3, [sp, #32]
 80047da:	f7fb fead 	bl	8000538 <__aeabi_f2d>
 80047de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047e2:	ee18 0a10 	vmov	r0, s16
 80047e6:	f7fb fea7 	bl	8000538 <__aeabi_f2d>
 80047ea:	2200      	movs	r2, #0
 80047ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047f0:	2300      	movs	r3, #0
 80047f2:	e7b7      	b.n	8004764 <powf+0x208>
 80047f4:	4668      	mov	r0, sp
 80047f6:	f000 ffb9 	bl	800576c <matherr>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	f47f af15 	bne.w	800462a <powf+0xce>
 8004800:	e7b6      	b.n	8004770 <powf+0x214>
 8004802:	bf00      	nop
 8004804:	200000a8 	.word	0x200000a8
 8004808:	08007bfe 	.word	0x08007bfe
 800480c:	3ff00000 	.word	0x3ff00000
 8004810:	00000000 	.word	0x00000000
 8004814:	fff00000 	.word	0xfff00000
 8004818:	47efffff 	.word	0x47efffff
 800481c:	c7efffff 	.word	0xc7efffff
 8004820:	7ff00000 	.word	0x7ff00000
 8004824:	00000000 	.word	0x00000000

08004828 <__ieee754_log10>:
 8004828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800482c:	ec55 4b10 	vmov	r4, r5, d0
 8004830:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8004834:	462b      	mov	r3, r5
 8004836:	da2f      	bge.n	8004898 <__ieee754_log10+0x70>
 8004838:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800483c:	4322      	orrs	r2, r4
 800483e:	d10a      	bne.n	8004856 <__ieee754_log10+0x2e>
 8004840:	493b      	ldr	r1, [pc, #236]	; (8004930 <__ieee754_log10+0x108>)
 8004842:	2200      	movs	r2, #0
 8004844:	2300      	movs	r3, #0
 8004846:	2000      	movs	r0, #0
 8004848:	f7fb fff8 	bl	800083c <__aeabi_ddiv>
 800484c:	ec41 0b10 	vmov	d0, r0, r1
 8004850:	b003      	add	sp, #12
 8004852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004856:	2d00      	cmp	r5, #0
 8004858:	da08      	bge.n	800486c <__ieee754_log10+0x44>
 800485a:	ee10 2a10 	vmov	r2, s0
 800485e:	4620      	mov	r0, r4
 8004860:	4629      	mov	r1, r5
 8004862:	f7fb fd09 	bl	8000278 <__aeabi_dsub>
 8004866:	2200      	movs	r2, #0
 8004868:	2300      	movs	r3, #0
 800486a:	e7ed      	b.n	8004848 <__ieee754_log10+0x20>
 800486c:	2200      	movs	r2, #0
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <__ieee754_log10+0x10c>)
 8004870:	4629      	mov	r1, r5
 8004872:	ee10 0a10 	vmov	r0, s0
 8004876:	f7fb feb7 	bl	80005e8 <__aeabi_dmul>
 800487a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800487e:	4604      	mov	r4, r0
 8004880:	460d      	mov	r5, r1
 8004882:	460b      	mov	r3, r1
 8004884:	492c      	ldr	r1, [pc, #176]	; (8004938 <__ieee754_log10+0x110>)
 8004886:	428b      	cmp	r3, r1
 8004888:	dd08      	ble.n	800489c <__ieee754_log10+0x74>
 800488a:	4622      	mov	r2, r4
 800488c:	462b      	mov	r3, r5
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fb fcf3 	bl	800027c <__adddf3>
 8004896:	e7d9      	b.n	800484c <__ieee754_log10+0x24>
 8004898:	2200      	movs	r2, #0
 800489a:	e7f3      	b.n	8004884 <__ieee754_log10+0x5c>
 800489c:	1518      	asrs	r0, r3, #20
 800489e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80048a2:	4410      	add	r0, r2
 80048a4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80048a8:	4448      	add	r0, r9
 80048aa:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80048ae:	f7fb fe31 	bl	8000514 <__aeabi_i2d>
 80048b2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80048b6:	3303      	adds	r3, #3
 80048b8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80048bc:	ec45 4b10 	vmov	d0, r4, r5
 80048c0:	4606      	mov	r6, r0
 80048c2:	460f      	mov	r7, r1
 80048c4:	f001 f870 	bl	80059a8 <__ieee754_log>
 80048c8:	a313      	add	r3, pc, #76	; (adr r3, 8004918 <__ieee754_log10+0xf0>)
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	4630      	mov	r0, r6
 80048d0:	4639      	mov	r1, r7
 80048d2:	ed8d 0b00 	vstr	d0, [sp]
 80048d6:	f7fb fe87 	bl	80005e8 <__aeabi_dmul>
 80048da:	ed9d 0b00 	vldr	d0, [sp]
 80048de:	4604      	mov	r4, r0
 80048e0:	460d      	mov	r5, r1
 80048e2:	a30f      	add	r3, pc, #60	; (adr r3, 8004920 <__ieee754_log10+0xf8>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	ec51 0b10 	vmov	r0, r1, d0
 80048ec:	f7fb fe7c 	bl	80005e8 <__aeabi_dmul>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4620      	mov	r0, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	f7fb fcc0 	bl	800027c <__adddf3>
 80048fc:	a30a      	add	r3, pc, #40	; (adr r3, 8004928 <__ieee754_log10+0x100>)
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	4604      	mov	r4, r0
 8004904:	460d      	mov	r5, r1
 8004906:	4630      	mov	r0, r6
 8004908:	4639      	mov	r1, r7
 800490a:	f7fb fe6d 	bl	80005e8 <__aeabi_dmul>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4620      	mov	r0, r4
 8004914:	4629      	mov	r1, r5
 8004916:	e7bc      	b.n	8004892 <__ieee754_log10+0x6a>
 8004918:	11f12b36 	.word	0x11f12b36
 800491c:	3d59fef3 	.word	0x3d59fef3
 8004920:	1526e50e 	.word	0x1526e50e
 8004924:	3fdbcb7b 	.word	0x3fdbcb7b
 8004928:	509f6000 	.word	0x509f6000
 800492c:	3fd34413 	.word	0x3fd34413
 8004930:	c3500000 	.word	0xc3500000
 8004934:	43500000 	.word	0x43500000
 8004938:	7fefffff 	.word	0x7fefffff

0800493c <__ieee754_powf>:
 800493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004940:	ee10 5a90 	vmov	r5, s1
 8004944:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8004948:	ed2d 8b02 	vpush	{d8}
 800494c:	eeb0 8a40 	vmov.f32	s16, s0
 8004950:	eef0 8a60 	vmov.f32	s17, s1
 8004954:	f000 8293 	beq.w	8004e7e <__ieee754_powf+0x542>
 8004958:	ee10 8a10 	vmov	r8, s0
 800495c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8004960:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004964:	dc06      	bgt.n	8004974 <__ieee754_powf+0x38>
 8004966:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800496a:	dd0a      	ble.n	8004982 <__ieee754_powf+0x46>
 800496c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004970:	f000 8285 	beq.w	8004e7e <__ieee754_powf+0x542>
 8004974:	ecbd 8b02 	vpop	{d8}
 8004978:	48d9      	ldr	r0, [pc, #868]	; (8004ce0 <__ieee754_powf+0x3a4>)
 800497a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800497e:	f000 bf53 	b.w	8005828 <nanf>
 8004982:	f1b8 0f00 	cmp.w	r8, #0
 8004986:	da1d      	bge.n	80049c4 <__ieee754_powf+0x88>
 8004988:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800498c:	da2c      	bge.n	80049e8 <__ieee754_powf+0xac>
 800498e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8004992:	db30      	blt.n	80049f6 <__ieee754_powf+0xba>
 8004994:	15fb      	asrs	r3, r7, #23
 8004996:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800499a:	fa47 f603 	asr.w	r6, r7, r3
 800499e:	fa06 f303 	lsl.w	r3, r6, r3
 80049a2:	42bb      	cmp	r3, r7
 80049a4:	d127      	bne.n	80049f6 <__ieee754_powf+0xba>
 80049a6:	f006 0601 	and.w	r6, r6, #1
 80049aa:	f1c6 0602 	rsb	r6, r6, #2
 80049ae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80049b2:	d122      	bne.n	80049fa <__ieee754_powf+0xbe>
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	f280 8268 	bge.w	8004e8a <__ieee754_powf+0x54e>
 80049ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80049be:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80049c2:	e00d      	b.n	80049e0 <__ieee754_powf+0xa4>
 80049c4:	2600      	movs	r6, #0
 80049c6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80049ca:	d1f0      	bne.n	80049ae <__ieee754_powf+0x72>
 80049cc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80049d0:	f000 8255 	beq.w	8004e7e <__ieee754_powf+0x542>
 80049d4:	dd0a      	ble.n	80049ec <__ieee754_powf+0xb0>
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	f280 8254 	bge.w	8004e84 <__ieee754_powf+0x548>
 80049dc:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8004ce4 <__ieee754_powf+0x3a8>
 80049e0:	ecbd 8b02 	vpop	{d8}
 80049e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e8:	2602      	movs	r6, #2
 80049ea:	e7ec      	b.n	80049c6 <__ieee754_powf+0x8a>
 80049ec:	2d00      	cmp	r5, #0
 80049ee:	daf5      	bge.n	80049dc <__ieee754_powf+0xa0>
 80049f0:	eeb1 0a68 	vneg.f32	s0, s17
 80049f4:	e7f4      	b.n	80049e0 <__ieee754_powf+0xa4>
 80049f6:	2600      	movs	r6, #0
 80049f8:	e7d9      	b.n	80049ae <__ieee754_powf+0x72>
 80049fa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80049fe:	d102      	bne.n	8004a06 <__ieee754_powf+0xca>
 8004a00:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004a04:	e7ec      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004a06:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8004a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8004a0e:	d108      	bne.n	8004a22 <__ieee754_powf+0xe6>
 8004a10:	f1b8 0f00 	cmp.w	r8, #0
 8004a14:	db05      	blt.n	8004a22 <__ieee754_powf+0xe6>
 8004a16:	ecbd 8b02 	vpop	{d8}
 8004a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	f000 bb79 	b.w	8005114 <__ieee754_sqrtf>
 8004a22:	f000 fead 	bl	8005780 <fabsf>
 8004a26:	b124      	cbz	r4, 8004a32 <__ieee754_powf+0xf6>
 8004a28:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8004a2c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004a30:	d117      	bne.n	8004a62 <__ieee754_powf+0x126>
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	bfbc      	itt	lt
 8004a36:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8004a3a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004a3e:	f1b8 0f00 	cmp.w	r8, #0
 8004a42:	dacd      	bge.n	80049e0 <__ieee754_powf+0xa4>
 8004a44:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8004a48:	ea54 0306 	orrs.w	r3, r4, r6
 8004a4c:	d104      	bne.n	8004a58 <__ieee754_powf+0x11c>
 8004a4e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004a52:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004a56:	e7c3      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004a58:	2e01      	cmp	r6, #1
 8004a5a:	d1c1      	bne.n	80049e0 <__ieee754_powf+0xa4>
 8004a5c:	eeb1 0a40 	vneg.f32	s0, s0
 8004a60:	e7be      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004a62:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8004a66:	3801      	subs	r0, #1
 8004a68:	ea56 0300 	orrs.w	r3, r6, r0
 8004a6c:	d104      	bne.n	8004a78 <__ieee754_powf+0x13c>
 8004a6e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004a72:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004a76:	e7b3      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004a78:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8004a7c:	dd6d      	ble.n	8004b5a <__ieee754_powf+0x21e>
 8004a7e:	4b9a      	ldr	r3, [pc, #616]	; (8004ce8 <__ieee754_powf+0x3ac>)
 8004a80:	429c      	cmp	r4, r3
 8004a82:	dc06      	bgt.n	8004a92 <__ieee754_powf+0x156>
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	daa9      	bge.n	80049dc <__ieee754_powf+0xa0>
 8004a88:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8004cec <__ieee754_powf+0x3b0>
 8004a8c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004a90:	e7a6      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004a92:	4b97      	ldr	r3, [pc, #604]	; (8004cf0 <__ieee754_powf+0x3b4>)
 8004a94:	429c      	cmp	r4, r3
 8004a96:	dd02      	ble.n	8004a9e <__ieee754_powf+0x162>
 8004a98:	2d00      	cmp	r5, #0
 8004a9a:	dcf5      	bgt.n	8004a88 <__ieee754_powf+0x14c>
 8004a9c:	e79e      	b.n	80049dc <__ieee754_powf+0xa0>
 8004a9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004aa2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004aa6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8004cf4 <__ieee754_powf+0x3b8>
 8004aaa:	eef1 6a40 	vneg.f32	s13, s0
 8004aae:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8004ab2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ab6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004aba:	eee7 7a40 	vfms.f32	s15, s14, s0
 8004abe:	ee60 0a00 	vmul.f32	s1, s0, s0
 8004ac2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8004cf8 <__ieee754_powf+0x3bc>
 8004ac6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8004aca:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8004cfc <__ieee754_powf+0x3c0>
 8004ace:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8004ad2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004ad6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004d00 <__ieee754_powf+0x3c4>
 8004ada:	eeb0 6a67 	vmov.f32	s12, s15
 8004ade:	eea0 6a07 	vfma.f32	s12, s0, s14
 8004ae2:	ee16 3a10 	vmov	r3, s12
 8004ae6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004aea:	f023 030f 	bic.w	r3, r3, #15
 8004aee:	ee00 3a90 	vmov	s1, r3
 8004af2:	eee6 0a87 	vfma.f32	s1, s13, s14
 8004af6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004afa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8004afe:	f025 050f 	bic.w	r5, r5, #15
 8004b02:	ee07 5a10 	vmov	s14, r5
 8004b06:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8004b0a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eee7 0a27 	vfma.f32	s1, s14, s15
 8004b16:	3e01      	subs	r6, #1
 8004b18:	ea56 0200 	orrs.w	r2, r6, r0
 8004b1c:	ee07 5a10 	vmov	s14, r5
 8004b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b24:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004b28:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004b2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004b30:	ee17 4a10 	vmov	r4, s14
 8004b34:	bf08      	it	eq
 8004b36:	eeb0 8a40 	vmoveq.f32	s16, s0
 8004b3a:	2c00      	cmp	r4, #0
 8004b3c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004b40:	f340 8184 	ble.w	8004e4c <__ieee754_powf+0x510>
 8004b44:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8004b48:	f340 80fc 	ble.w	8004d44 <__ieee754_powf+0x408>
 8004b4c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8004cec <__ieee754_powf+0x3b0>
 8004b50:	ee28 0a27 	vmul.f32	s0, s16, s15
 8004b54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004b58:	e742      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004b5a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8004b5e:	bfbf      	itttt	lt
 8004b60:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8004d04 <__ieee754_powf+0x3c8>
 8004b64:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004b68:	f06f 0217 	mvnlt.w	r2, #23
 8004b6c:	ee17 4a90 	vmovlt	r4, s15
 8004b70:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8004b74:	bfa8      	it	ge
 8004b76:	2200      	movge	r2, #0
 8004b78:	3b7f      	subs	r3, #127	; 0x7f
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4a62      	ldr	r2, [pc, #392]	; (8004d08 <__ieee754_powf+0x3cc>)
 8004b7e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8004b82:	4294      	cmp	r4, r2
 8004b84:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8004b88:	dd06      	ble.n	8004b98 <__ieee754_powf+0x25c>
 8004b8a:	4a60      	ldr	r2, [pc, #384]	; (8004d0c <__ieee754_powf+0x3d0>)
 8004b8c:	4294      	cmp	r4, r2
 8004b8e:	f340 80a5 	ble.w	8004cdc <__ieee754_powf+0x3a0>
 8004b92:	3301      	adds	r3, #1
 8004b94:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8004b98:	2400      	movs	r4, #0
 8004b9a:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <__ieee754_powf+0x3d4>)
 8004b9c:	00a7      	lsls	r7, r4, #2
 8004b9e:	443a      	add	r2, r7
 8004ba0:	ee07 1a90 	vmov	s15, r1
 8004ba4:	ed92 7a00 	vldr	s14, [r2]
 8004ba8:	4a5a      	ldr	r2, [pc, #360]	; (8004d14 <__ieee754_powf+0x3d8>)
 8004baa:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004bae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004bb2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8004bb6:	1049      	asrs	r1, r1, #1
 8004bb8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004bbc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004bc0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8004bc4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004bc8:	ee06 1a10 	vmov	s12, r1
 8004bcc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8004bd0:	ee14 ca90 	vmov	ip, s9
 8004bd4:	ea02 0c0c 	and.w	ip, r2, ip
 8004bd8:	ee05 ca10 	vmov	s10, ip
 8004bdc:	eeb1 4a45 	vneg.f32	s8, s10
 8004be0:	eee4 5a06 	vfma.f32	s11, s8, s12
 8004be4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004be8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004d18 <__ieee754_powf+0x3dc>
 8004bec:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8004bf0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8004bf4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8004bf8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8004bfc:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8004c00:	eddf 5a46 	vldr	s11, [pc, #280]	; 8004d1c <__ieee754_powf+0x3e0>
 8004c04:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004c08:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d20 <__ieee754_powf+0x3e4>
 8004c0c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004c10:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004cf4 <__ieee754_powf+0x3b8>
 8004c14:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004c18:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004d24 <__ieee754_powf+0x3e8>
 8004c1c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004c20:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004d28 <__ieee754_powf+0x3ec>
 8004c24:	ee75 6a24 	vadd.f32	s13, s10, s9
 8004c28:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004c2c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004c30:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8004c34:	eef0 7a65 	vmov.f32	s15, s11
 8004c38:	eee3 6a87 	vfma.f32	s13, s7, s14
 8004c3c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8004c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c44:	ee17 1a90 	vmov	r1, s15
 8004c48:	4011      	ands	r1, r2
 8004c4a:	ee07 1a90 	vmov	s15, r1
 8004c4e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8004c52:	eddf 5a36 	vldr	s11, [pc, #216]	; 8004d2c <__ieee754_powf+0x3f0>
 8004c56:	eea4 7a05 	vfma.f32	s14, s8, s10
 8004c5a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004c5e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004c62:	eea7 7a86 	vfma.f32	s14, s15, s12
 8004c66:	eeb0 6a47 	vmov.f32	s12, s14
 8004c6a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8004c6e:	ee16 1a10 	vmov	r1, s12
 8004c72:	4011      	ands	r1, r2
 8004c74:	ee06 1a90 	vmov	s13, r1
 8004c78:	eee4 6a27 	vfma.f32	s13, s8, s15
 8004c7c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8004d30 <__ieee754_powf+0x3f4>
 8004c80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004c84:	ee06 1a10 	vmov	s12, r1
 8004c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c8c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8004d34 <__ieee754_powf+0x3f8>
 8004c90:	4929      	ldr	r1, [pc, #164]	; (8004d38 <__ieee754_powf+0x3fc>)
 8004c92:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004c96:	4439      	add	r1, r7
 8004c98:	edd1 7a00 	vldr	s15, [r1]
 8004c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ca0:	ee07 3a90 	vmov	s15, r3
 8004ca4:	eef0 0a47 	vmov.f32	s1, s14
 8004ca8:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <__ieee754_powf+0x400>)
 8004caa:	eee6 0a25 	vfma.f32	s1, s12, s11
 8004cae:	443b      	add	r3, r7
 8004cb0:	ed93 5a00 	vldr	s10, [r3]
 8004cb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cb8:	ee70 0a85 	vadd.f32	s1, s1, s10
 8004cbc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8004cc0:	ee17 3a90 	vmov	r3, s15
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004cce:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004cd2:	eee6 7a65 	vfms.f32	s15, s12, s11
 8004cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cda:	e70e      	b.n	8004afa <__ieee754_powf+0x1be>
 8004cdc:	2401      	movs	r4, #1
 8004cde:	e75c      	b.n	8004b9a <__ieee754_powf+0x25e>
 8004ce0:	08007ff9 	.word	0x08007ff9
 8004ce4:	00000000 	.word	0x00000000
 8004ce8:	3f7ffff7 	.word	0x3f7ffff7
 8004cec:	7149f2ca 	.word	0x7149f2ca
 8004cf0:	3f800007 	.word	0x3f800007
 8004cf4:	3eaaaaab 	.word	0x3eaaaaab
 8004cf8:	36eca570 	.word	0x36eca570
 8004cfc:	3fb8aa3b 	.word	0x3fb8aa3b
 8004d00:	3fb8aa00 	.word	0x3fb8aa00
 8004d04:	4b800000 	.word	0x4b800000
 8004d08:	001cc471 	.word	0x001cc471
 8004d0c:	005db3d6 	.word	0x005db3d6
 8004d10:	08007c04 	.word	0x08007c04
 8004d14:	fffff000 	.word	0xfffff000
 8004d18:	3e6c3255 	.word	0x3e6c3255
 8004d1c:	3e53f142 	.word	0x3e53f142
 8004d20:	3e8ba305 	.word	0x3e8ba305
 8004d24:	3edb6db7 	.word	0x3edb6db7
 8004d28:	3f19999a 	.word	0x3f19999a
 8004d2c:	3f763800 	.word	0x3f763800
 8004d30:	3f76384f 	.word	0x3f76384f
 8004d34:	369dc3a0 	.word	0x369dc3a0
 8004d38:	08007c14 	.word	0x08007c14
 8004d3c:	08007c0c 	.word	0x08007c0c
 8004d40:	3338aa3c 	.word	0x3338aa3c
 8004d44:	f040 8092 	bne.w	8004e6c <__ieee754_powf+0x530>
 8004d48:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8004d40 <__ieee754_powf+0x404>
 8004d4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d50:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8004d54:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5c:	f73f aef6 	bgt.w	8004b4c <__ieee754_powf+0x210>
 8004d60:	15db      	asrs	r3, r3, #23
 8004d62:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8004d66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d6a:	4103      	asrs	r3, r0
 8004d6c:	4423      	add	r3, r4
 8004d6e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d72:	4947      	ldr	r1, [pc, #284]	; (8004e90 <__ieee754_powf+0x554>)
 8004d74:	3a7f      	subs	r2, #127	; 0x7f
 8004d76:	4111      	asrs	r1, r2
 8004d78:	ea23 0101 	bic.w	r1, r3, r1
 8004d7c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8004d80:	ee07 1a10 	vmov	s14, r1
 8004d84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004d88:	f1c2 0217 	rsb	r2, r2, #23
 8004d8c:	4110      	asrs	r0, r2
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d94:	bfb8      	it	lt
 8004d96:	4240      	neglt	r0, r0
 8004d98:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8004d9c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e94 <__ieee754_powf+0x558>
 8004da0:	ee17 3a10 	vmov	r3, s14
 8004da4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004da8:	f023 030f 	bic.w	r3, r3, #15
 8004dac:	ee07 3a10 	vmov	s14, r3
 8004db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004db4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8004db8:	eddf 7a37 	vldr	s15, [pc, #220]	; 8004e98 <__ieee754_powf+0x55c>
 8004dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8004dc4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8004e9c <__ieee754_powf+0x560>
 8004dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dcc:	eea7 0a26 	vfma.f32	s0, s14, s13
 8004dd0:	eeb0 6a40 	vmov.f32	s12, s0
 8004dd4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004dd8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004ddc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004de0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004ea0 <__ieee754_powf+0x564>
 8004de4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8004ea4 <__ieee754_powf+0x568>
 8004de8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004dec:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8004ea8 <__ieee754_powf+0x56c>
 8004df0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004df4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8004eac <__ieee754_powf+0x570>
 8004df8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004dfc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8004eb0 <__ieee754_powf+0x574>
 8004e00:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004e04:	eeb0 6a40 	vmov.f32	s12, s0
 8004e08:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004e0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004e10:	eeb0 7a46 	vmov.f32	s14, s12
 8004e14:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004e18:	ee20 6a06 	vmul.f32	s12, s0, s12
 8004e1c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8004e20:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004e2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004e30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004e34:	ee10 3a10 	vmov	r3, s0
 8004e38:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e40:	da1a      	bge.n	8004e78 <__ieee754_powf+0x53c>
 8004e42:	f000 fd51 	bl	80058e8 <scalbnf>
 8004e46:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004e4a:	e5c9      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004e4c:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <__ieee754_powf+0x578>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	dd02      	ble.n	8004e58 <__ieee754_powf+0x51c>
 8004e52:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004eb8 <__ieee754_powf+0x57c>
 8004e56:	e67b      	b.n	8004b50 <__ieee754_powf+0x214>
 8004e58:	d108      	bne.n	8004e6c <__ieee754_powf+0x530>
 8004e5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e5e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8004e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e66:	f6ff af7b 	blt.w	8004d60 <__ieee754_powf+0x424>
 8004e6a:	e7f2      	b.n	8004e52 <__ieee754_powf+0x516>
 8004e6c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8004e70:	f73f af76 	bgt.w	8004d60 <__ieee754_powf+0x424>
 8004e74:	2000      	movs	r0, #0
 8004e76:	e78f      	b.n	8004d98 <__ieee754_powf+0x45c>
 8004e78:	ee00 3a10 	vmov	s0, r3
 8004e7c:	e7e3      	b.n	8004e46 <__ieee754_powf+0x50a>
 8004e7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004e82:	e5ad      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004e84:	eeb0 0a68 	vmov.f32	s0, s17
 8004e88:	e5aa      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004e8a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e8e:	e5a7      	b.n	80049e0 <__ieee754_powf+0xa4>
 8004e90:	007fffff 	.word	0x007fffff
 8004e94:	3f317218 	.word	0x3f317218
 8004e98:	35bfbe8c 	.word	0x35bfbe8c
 8004e9c:	3f317200 	.word	0x3f317200
 8004ea0:	3331bb4c 	.word	0x3331bb4c
 8004ea4:	b5ddea0e 	.word	0xb5ddea0e
 8004ea8:	388ab355 	.word	0x388ab355
 8004eac:	bb360b61 	.word	0xbb360b61
 8004eb0:	3e2aaaab 	.word	0x3e2aaaab
 8004eb4:	43160000 	.word	0x43160000
 8004eb8:	0da24260 	.word	0x0da24260

08004ebc <__ieee754_rem_pio2f>:
 8004ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebe:	ee10 6a10 	vmov	r6, s0
 8004ec2:	4b86      	ldr	r3, [pc, #536]	; (80050dc <__ieee754_rem_pio2f+0x220>)
 8004ec4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	b087      	sub	sp, #28
 8004ecc:	4605      	mov	r5, r0
 8004ece:	dc05      	bgt.n	8004edc <__ieee754_rem_pio2f+0x20>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	ed85 0a00 	vstr	s0, [r5]
 8004ed6:	6043      	str	r3, [r0, #4]
 8004ed8:	2000      	movs	r0, #0
 8004eda:	e020      	b.n	8004f1e <__ieee754_rem_pio2f+0x62>
 8004edc:	4b80      	ldr	r3, [pc, #512]	; (80050e0 <__ieee754_rem_pio2f+0x224>)
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	dc38      	bgt.n	8004f54 <__ieee754_rem_pio2f+0x98>
 8004ee2:	2e00      	cmp	r6, #0
 8004ee4:	f024 040f 	bic.w	r4, r4, #15
 8004ee8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80050e4 <__ieee754_rem_pio2f+0x228>
 8004eec:	4b7e      	ldr	r3, [pc, #504]	; (80050e8 <__ieee754_rem_pio2f+0x22c>)
 8004eee:	dd18      	ble.n	8004f22 <__ieee754_rem_pio2f+0x66>
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004ef6:	bf09      	itett	eq
 8004ef8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80050ec <__ieee754_rem_pio2f+0x230>
 8004efc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80050f0 <__ieee754_rem_pio2f+0x234>
 8004f00:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004f04:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80050f4 <__ieee754_rem_pio2f+0x238>
 8004f08:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004f0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f10:	edc0 6a00 	vstr	s13, [r0]
 8004f14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f18:	edc0 7a01 	vstr	s15, [r0, #4]
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	b007      	add	sp, #28
 8004f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f22:	429c      	cmp	r4, r3
 8004f24:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004f28:	bf09      	itett	eq
 8004f2a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80050ec <__ieee754_rem_pio2f+0x230>
 8004f2e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80050f0 <__ieee754_rem_pio2f+0x234>
 8004f32:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004f36:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80050f4 <__ieee754_rem_pio2f+0x238>
 8004f3a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004f3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f42:	edc0 6a00 	vstr	s13, [r0]
 8004f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f4a:	edc0 7a01 	vstr	s15, [r0, #4]
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f52:	e7e4      	b.n	8004f1e <__ieee754_rem_pio2f+0x62>
 8004f54:	4b68      	ldr	r3, [pc, #416]	; (80050f8 <__ieee754_rem_pio2f+0x23c>)
 8004f56:	429c      	cmp	r4, r3
 8004f58:	dc71      	bgt.n	800503e <__ieee754_rem_pio2f+0x182>
 8004f5a:	f000 fc11 	bl	8005780 <fabsf>
 8004f5e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80050fc <__ieee754_rem_pio2f+0x240>
 8004f62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004f66:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f6e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004f72:	ee17 0a90 	vmov	r0, s15
 8004f76:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80050e4 <__ieee754_rem_pio2f+0x228>
 8004f7a:	eeb1 7a46 	vneg.f32	s14, s12
 8004f7e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004f82:	281f      	cmp	r0, #31
 8004f84:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80050f0 <__ieee754_rem_pio2f+0x234>
 8004f88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f8c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004f90:	ee16 3a90 	vmov	r3, s13
 8004f94:	dc1c      	bgt.n	8004fd0 <__ieee754_rem_pio2f+0x114>
 8004f96:	1e47      	subs	r7, r0, #1
 8004f98:	4959      	ldr	r1, [pc, #356]	; (8005100 <__ieee754_rem_pio2f+0x244>)
 8004f9a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004f9e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8004fa2:	428a      	cmp	r2, r1
 8004fa4:	d014      	beq.n	8004fd0 <__ieee754_rem_pio2f+0x114>
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	ed95 7a00 	vldr	s14, [r5]
 8004fac:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004fb0:	2e00      	cmp	r6, #0
 8004fb2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004fb6:	ed85 0a01 	vstr	s0, [r5, #4]
 8004fba:	dab0      	bge.n	8004f1e <__ieee754_rem_pio2f+0x62>
 8004fbc:	eeb1 7a47 	vneg.f32	s14, s14
 8004fc0:	eeb1 0a40 	vneg.f32	s0, s0
 8004fc4:	ed85 7a00 	vstr	s14, [r5]
 8004fc8:	ed85 0a01 	vstr	s0, [r5, #4]
 8004fcc:	4240      	negs	r0, r0
 8004fce:	e7a6      	b.n	8004f1e <__ieee754_rem_pio2f+0x62>
 8004fd0:	15e4      	asrs	r4, r4, #23
 8004fd2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004fd6:	1aa2      	subs	r2, r4, r2
 8004fd8:	2a08      	cmp	r2, #8
 8004fda:	dde4      	ble.n	8004fa6 <__ieee754_rem_pio2f+0xea>
 8004fdc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80050ec <__ieee754_rem_pio2f+0x230>
 8004fe0:	eef0 6a40 	vmov.f32	s13, s0
 8004fe4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fe8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004fec:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004ff0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80050f4 <__ieee754_rem_pio2f+0x238>
 8004ff4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8004ff8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8004ffc:	eef0 7a40 	vmov.f32	s15, s0
 8005000:	ee15 3a90 	vmov	r3, s11
 8005004:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005008:	1aa4      	subs	r4, r4, r2
 800500a:	2c19      	cmp	r4, #25
 800500c:	dc04      	bgt.n	8005018 <__ieee754_rem_pio2f+0x15c>
 800500e:	edc5 5a00 	vstr	s11, [r5]
 8005012:	eeb0 0a66 	vmov.f32	s0, s13
 8005016:	e7c7      	b.n	8004fa8 <__ieee754_rem_pio2f+0xec>
 8005018:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005104 <__ieee754_rem_pio2f+0x248>
 800501c:	eeb0 0a66 	vmov.f32	s0, s13
 8005020:	eea7 0a25 	vfma.f32	s0, s14, s11
 8005024:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005028:	eee7 7a25 	vfma.f32	s15, s14, s11
 800502c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005108 <__ieee754_rem_pio2f+0x24c>
 8005030:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8005034:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005038:	ed85 7a00 	vstr	s14, [r5]
 800503c:	e7b4      	b.n	8004fa8 <__ieee754_rem_pio2f+0xec>
 800503e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005042:	db06      	blt.n	8005052 <__ieee754_rem_pio2f+0x196>
 8005044:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005048:	edc0 7a01 	vstr	s15, [r0, #4]
 800504c:	edc0 7a00 	vstr	s15, [r0]
 8005050:	e742      	b.n	8004ed8 <__ieee754_rem_pio2f+0x1c>
 8005052:	15e2      	asrs	r2, r4, #23
 8005054:	3a86      	subs	r2, #134	; 0x86
 8005056:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005062:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800510c <__ieee754_rem_pio2f+0x250>
 8005066:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800506a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800506e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005072:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005076:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800507a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800507e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005082:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005086:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800508a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	edcd 7a05 	vstr	s15, [sp, #20]
 8005096:	d11e      	bne.n	80050d6 <__ieee754_rem_pio2f+0x21a>
 8005098:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2302      	movne	r3, #2
 80050a6:	491a      	ldr	r1, [pc, #104]	; (8005110 <__ieee754_rem_pio2f+0x254>)
 80050a8:	9101      	str	r1, [sp, #4]
 80050aa:	2102      	movs	r1, #2
 80050ac:	9100      	str	r1, [sp, #0]
 80050ae:	a803      	add	r0, sp, #12
 80050b0:	4629      	mov	r1, r5
 80050b2:	f000 f891 	bl	80051d8 <__kernel_rem_pio2f>
 80050b6:	2e00      	cmp	r6, #0
 80050b8:	f6bf af31 	bge.w	8004f1e <__ieee754_rem_pio2f+0x62>
 80050bc:	edd5 7a00 	vldr	s15, [r5]
 80050c0:	eef1 7a67 	vneg.f32	s15, s15
 80050c4:	edc5 7a00 	vstr	s15, [r5]
 80050c8:	edd5 7a01 	vldr	s15, [r5, #4]
 80050cc:	eef1 7a67 	vneg.f32	s15, s15
 80050d0:	edc5 7a01 	vstr	s15, [r5, #4]
 80050d4:	e77a      	b.n	8004fcc <__ieee754_rem_pio2f+0x110>
 80050d6:	2303      	movs	r3, #3
 80050d8:	e7e5      	b.n	80050a6 <__ieee754_rem_pio2f+0x1ea>
 80050da:	bf00      	nop
 80050dc:	3f490fd8 	.word	0x3f490fd8
 80050e0:	4016cbe3 	.word	0x4016cbe3
 80050e4:	3fc90f80 	.word	0x3fc90f80
 80050e8:	3fc90fd0 	.word	0x3fc90fd0
 80050ec:	37354400 	.word	0x37354400
 80050f0:	37354443 	.word	0x37354443
 80050f4:	2e85a308 	.word	0x2e85a308
 80050f8:	43490f80 	.word	0x43490f80
 80050fc:	3f22f984 	.word	0x3f22f984
 8005100:	08007c1c 	.word	0x08007c1c
 8005104:	2e85a300 	.word	0x2e85a300
 8005108:	248d3132 	.word	0x248d3132
 800510c:	43800000 	.word	0x43800000
 8005110:	08007c9c 	.word	0x08007c9c

08005114 <__ieee754_sqrtf>:
 8005114:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005118:	4770      	bx	lr
	...

0800511c <__kernel_cosf>:
 800511c:	ee10 3a10 	vmov	r3, s0
 8005120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005124:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512c:	da05      	bge.n	800513a <__kernel_cosf+0x1e>
 800512e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005132:	ee17 2a90 	vmov	r2, s15
 8005136:	2a00      	cmp	r2, #0
 8005138:	d03b      	beq.n	80051b2 <__kernel_cosf+0x96>
 800513a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800513e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005142:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80051b8 <__kernel_cosf+0x9c>
 8005146:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <__kernel_cosf+0xa0>)
 8005148:	ee66 7a07 	vmul.f32	s15, s12, s14
 800514c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80051c0 <__kernel_cosf+0xa4>
 8005150:	eea6 7a25 	vfma.f32	s14, s12, s11
 8005154:	4293      	cmp	r3, r2
 8005156:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80051c4 <__kernel_cosf+0xa8>
 800515a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800515e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80051c8 <__kernel_cosf+0xac>
 8005162:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005166:	eddf 5a19 	vldr	s11, [pc, #100]	; 80051cc <__kernel_cosf+0xb0>
 800516a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800516e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80051d0 <__kernel_cosf+0xb4>
 8005172:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005176:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800517a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800517e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8005182:	dc04      	bgt.n	800518e <__kernel_cosf+0x72>
 8005184:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8005188:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800518c:	4770      	bx	lr
 800518e:	4a11      	ldr	r2, [pc, #68]	; (80051d4 <__kernel_cosf+0xb8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	bfda      	itte	le
 8005194:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005198:	ee07 3a10 	vmovle	s14, r3
 800519c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80051a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051a4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80051a8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80051ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80051b0:	4770      	bx	lr
 80051b2:	eeb0 0a66 	vmov.f32	s0, s13
 80051b6:	4770      	bx	lr
 80051b8:	ad47d74e 	.word	0xad47d74e
 80051bc:	3e999999 	.word	0x3e999999
 80051c0:	310f74f6 	.word	0x310f74f6
 80051c4:	b493f27c 	.word	0xb493f27c
 80051c8:	37d00d01 	.word	0x37d00d01
 80051cc:	bab60b61 	.word	0xbab60b61
 80051d0:	3d2aaaab 	.word	0x3d2aaaab
 80051d4:	3f480000 	.word	0x3f480000

080051d8 <__kernel_rem_pio2f>:
 80051d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	ed2d 8b04 	vpush	{d8-d9}
 80051e0:	b0d7      	sub	sp, #348	; 0x15c
 80051e2:	469b      	mov	fp, r3
 80051e4:	460e      	mov	r6, r1
 80051e6:	4bbe      	ldr	r3, [pc, #760]	; (80054e0 <__kernel_rem_pio2f+0x308>)
 80051e8:	9964      	ldr	r1, [sp, #400]	; 0x190
 80051ea:	9002      	str	r0, [sp, #8]
 80051ec:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80051f0:	9865      	ldr	r0, [sp, #404]	; 0x194
 80051f2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80054f0 <__kernel_rem_pio2f+0x318>
 80051f6:	1ed1      	subs	r1, r2, #3
 80051f8:	2308      	movs	r3, #8
 80051fa:	fb91 f1f3 	sdiv	r1, r1, r3
 80051fe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005202:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8005206:	1c4c      	adds	r4, r1, #1
 8005208:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800520c:	eba1 050a 	sub.w	r5, r1, sl
 8005210:	aa1a      	add	r2, sp, #104	; 0x68
 8005212:	eb09 070a 	add.w	r7, r9, sl
 8005216:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800521a:	4696      	mov	lr, r2
 800521c:	2300      	movs	r3, #0
 800521e:	42bb      	cmp	r3, r7
 8005220:	dd0f      	ble.n	8005242 <__kernel_rem_pio2f+0x6a>
 8005222:	af42      	add	r7, sp, #264	; 0x108
 8005224:	2200      	movs	r2, #0
 8005226:	454a      	cmp	r2, r9
 8005228:	dc27      	bgt.n	800527a <__kernel_rem_pio2f+0xa2>
 800522a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800522e:	eb0b 0302 	add.w	r3, fp, r2
 8005232:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8005236:	9d02      	ldr	r5, [sp, #8]
 8005238:	eddf 7aad 	vldr	s15, [pc, #692]	; 80054f0 <__kernel_rem_pio2f+0x318>
 800523c:	f04f 0c00 	mov.w	ip, #0
 8005240:	e015      	b.n	800526e <__kernel_rem_pio2f+0x96>
 8005242:	42dd      	cmn	r5, r3
 8005244:	bf5d      	ittte	pl
 8005246:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800524a:	ee07 2a90 	vmovpl	s15, r2
 800524e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005252:	eef0 7a47 	vmovmi.f32	s15, s14
 8005256:	ecee 7a01 	vstmia	lr!, {s15}
 800525a:	3301      	adds	r3, #1
 800525c:	e7df      	b.n	800521e <__kernel_rem_pio2f+0x46>
 800525e:	ecf5 6a01 	vldmia	r5!, {s13}
 8005262:	ed33 7a01 	vldmdb	r3!, {s14}
 8005266:	eee6 7a87 	vfma.f32	s15, s13, s14
 800526a:	f10c 0c01 	add.w	ip, ip, #1
 800526e:	45d4      	cmp	ip, sl
 8005270:	ddf5      	ble.n	800525e <__kernel_rem_pio2f+0x86>
 8005272:	ece7 7a01 	vstmia	r7!, {s15}
 8005276:	3201      	adds	r2, #1
 8005278:	e7d5      	b.n	8005226 <__kernel_rem_pio2f+0x4e>
 800527a:	ab06      	add	r3, sp, #24
 800527c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80054ec <__kernel_rem_pio2f+0x314>
 8005286:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80054e8 <__kernel_rem_pio2f+0x310>
 800528a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800528e:	9303      	str	r3, [sp, #12]
 8005290:	464d      	mov	r5, r9
 8005292:	ab56      	add	r3, sp, #344	; 0x158
 8005294:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8005298:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800529c:	3f01      	subs	r7, #1
 800529e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80052a2:	00bf      	lsls	r7, r7, #2
 80052a4:	ab56      	add	r3, sp, #344	; 0x158
 80052a6:	19da      	adds	r2, r3, r7
 80052a8:	3a4c      	subs	r2, #76	; 0x4c
 80052aa:	2300      	movs	r3, #0
 80052ac:	1ae9      	subs	r1, r5, r3
 80052ae:	2900      	cmp	r1, #0
 80052b0:	dc4c      	bgt.n	800534c <__kernel_rem_pio2f+0x174>
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 fb18 	bl	80058e8 <scalbnf>
 80052b8:	eeb0 8a40 	vmov.f32	s16, s0
 80052bc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80052c0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80052c4:	f000 fa6e 	bl	80057a4 <floorf>
 80052c8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80052cc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80052d0:	2c00      	cmp	r4, #0
 80052d2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80052d6:	edcd 7a01 	vstr	s15, [sp, #4]
 80052da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052de:	ee38 8a67 	vsub.f32	s16, s16, s15
 80052e2:	dd48      	ble.n	8005376 <__kernel_rem_pio2f+0x19e>
 80052e4:	1e69      	subs	r1, r5, #1
 80052e6:	ab06      	add	r3, sp, #24
 80052e8:	f1c4 0008 	rsb	r0, r4, #8
 80052ec:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80052f0:	9a01      	ldr	r2, [sp, #4]
 80052f2:	fa4c f300 	asr.w	r3, ip, r0
 80052f6:	441a      	add	r2, r3
 80052f8:	4083      	lsls	r3, r0
 80052fa:	9201      	str	r2, [sp, #4]
 80052fc:	ebac 0203 	sub.w	r2, ip, r3
 8005300:	ab06      	add	r3, sp, #24
 8005302:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8005306:	f1c4 0307 	rsb	r3, r4, #7
 800530a:	fa42 f803 	asr.w	r8, r2, r3
 800530e:	f1b8 0f00 	cmp.w	r8, #0
 8005312:	dd41      	ble.n	8005398 <__kernel_rem_pio2f+0x1c0>
 8005314:	9b01      	ldr	r3, [sp, #4]
 8005316:	2000      	movs	r0, #0
 8005318:	3301      	adds	r3, #1
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	4601      	mov	r1, r0
 800531e:	4285      	cmp	r5, r0
 8005320:	dc6d      	bgt.n	80053fe <__kernel_rem_pio2f+0x226>
 8005322:	2c00      	cmp	r4, #0
 8005324:	dd04      	ble.n	8005330 <__kernel_rem_pio2f+0x158>
 8005326:	2c01      	cmp	r4, #1
 8005328:	d07e      	beq.n	8005428 <__kernel_rem_pio2f+0x250>
 800532a:	2c02      	cmp	r4, #2
 800532c:	f000 8086 	beq.w	800543c <__kernel_rem_pio2f+0x264>
 8005330:	f1b8 0f02 	cmp.w	r8, #2
 8005334:	d130      	bne.n	8005398 <__kernel_rem_pio2f+0x1c0>
 8005336:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800533a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800533e:	b359      	cbz	r1, 8005398 <__kernel_rem_pio2f+0x1c0>
 8005340:	4620      	mov	r0, r4
 8005342:	f000 fad1 	bl	80058e8 <scalbnf>
 8005346:	ee38 8a40 	vsub.f32	s16, s16, s0
 800534a:	e025      	b.n	8005398 <__kernel_rem_pio2f+0x1c0>
 800534c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005350:	a806      	add	r0, sp, #24
 8005352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800535a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800535e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005362:	ee10 1a10 	vmov	r1, s0
 8005366:	ed32 0a01 	vldmdb	r2!, {s0}
 800536a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800536e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005372:	3301      	adds	r3, #1
 8005374:	e79a      	b.n	80052ac <__kernel_rem_pio2f+0xd4>
 8005376:	d106      	bne.n	8005386 <__kernel_rem_pio2f+0x1ae>
 8005378:	1e6b      	subs	r3, r5, #1
 800537a:	aa06      	add	r2, sp, #24
 800537c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005380:	ea4f 2822 	mov.w	r8, r2, asr #8
 8005384:	e7c3      	b.n	800530e <__kernel_rem_pio2f+0x136>
 8005386:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800538a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005392:	da31      	bge.n	80053f8 <__kernel_rem_pio2f+0x220>
 8005394:	f04f 0800 	mov.w	r8, #0
 8005398:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	f040 80a8 	bne.w	80054f4 <__kernel_rem_pio2f+0x31c>
 80053a4:	1e6b      	subs	r3, r5, #1
 80053a6:	4618      	mov	r0, r3
 80053a8:	2200      	movs	r2, #0
 80053aa:	4548      	cmp	r0, r9
 80053ac:	da4d      	bge.n	800544a <__kernel_rem_pio2f+0x272>
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	f000 8087 	beq.w	80054c2 <__kernel_rem_pio2f+0x2ea>
 80053b4:	aa06      	add	r2, sp, #24
 80053b6:	3c08      	subs	r4, #8
 80053b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053bc:	2900      	cmp	r1, #0
 80053be:	f000 808d 	beq.w	80054dc <__kernel_rem_pio2f+0x304>
 80053c2:	4620      	mov	r0, r4
 80053c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80053c8:	9302      	str	r3, [sp, #8]
 80053ca:	f000 fa8d 	bl	80058e8 <scalbnf>
 80053ce:	9b02      	ldr	r3, [sp, #8]
 80053d0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80054ec <__kernel_rem_pio2f+0x314>
 80053d4:	0099      	lsls	r1, r3, #2
 80053d6:	aa42      	add	r2, sp, #264	; 0x108
 80053d8:	1850      	adds	r0, r2, r1
 80053da:	1d05      	adds	r5, r0, #4
 80053dc:	461c      	mov	r4, r3
 80053de:	2c00      	cmp	r4, #0
 80053e0:	f280 80b8 	bge.w	8005554 <__kernel_rem_pio2f+0x37c>
 80053e4:	2500      	movs	r5, #0
 80053e6:	1b5c      	subs	r4, r3, r5
 80053e8:	2c00      	cmp	r4, #0
 80053ea:	f2c0 80d8 	blt.w	800559e <__kernel_rem_pio2f+0x3c6>
 80053ee:	4f3d      	ldr	r7, [pc, #244]	; (80054e4 <__kernel_rem_pio2f+0x30c>)
 80053f0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80054f0 <__kernel_rem_pio2f+0x318>
 80053f4:	2400      	movs	r4, #0
 80053f6:	e0c6      	b.n	8005586 <__kernel_rem_pio2f+0x3ae>
 80053f8:	f04f 0802 	mov.w	r8, #2
 80053fc:	e78a      	b.n	8005314 <__kernel_rem_pio2f+0x13c>
 80053fe:	ab06      	add	r3, sp, #24
 8005400:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005404:	b949      	cbnz	r1, 800541a <__kernel_rem_pio2f+0x242>
 8005406:	b12b      	cbz	r3, 8005414 <__kernel_rem_pio2f+0x23c>
 8005408:	aa06      	add	r2, sp, #24
 800540a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800540e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005412:	2301      	movs	r3, #1
 8005414:	3001      	adds	r0, #1
 8005416:	4619      	mov	r1, r3
 8005418:	e781      	b.n	800531e <__kernel_rem_pio2f+0x146>
 800541a:	aa06      	add	r2, sp, #24
 800541c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005420:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005424:	460b      	mov	r3, r1
 8005426:	e7f5      	b.n	8005414 <__kernel_rem_pio2f+0x23c>
 8005428:	1e68      	subs	r0, r5, #1
 800542a:	ab06      	add	r3, sp, #24
 800542c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005434:	aa06      	add	r2, sp, #24
 8005436:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800543a:	e779      	b.n	8005330 <__kernel_rem_pio2f+0x158>
 800543c:	1e68      	subs	r0, r5, #1
 800543e:	ab06      	add	r3, sp, #24
 8005440:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005448:	e7f4      	b.n	8005434 <__kernel_rem_pio2f+0x25c>
 800544a:	a906      	add	r1, sp, #24
 800544c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005450:	3801      	subs	r0, #1
 8005452:	430a      	orrs	r2, r1
 8005454:	e7a9      	b.n	80053aa <__kernel_rem_pio2f+0x1d2>
 8005456:	f10c 0c01 	add.w	ip, ip, #1
 800545a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800545e:	2a00      	cmp	r2, #0
 8005460:	d0f9      	beq.n	8005456 <__kernel_rem_pio2f+0x27e>
 8005462:	eb0b 0305 	add.w	r3, fp, r5
 8005466:	aa1a      	add	r2, sp, #104	; 0x68
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	1898      	adds	r0, r3, r2
 800546c:	3004      	adds	r0, #4
 800546e:	1c69      	adds	r1, r5, #1
 8005470:	3704      	adds	r7, #4
 8005472:	2200      	movs	r2, #0
 8005474:	4465      	add	r5, ip
 8005476:	9005      	str	r0, [sp, #20]
 8005478:	428d      	cmp	r5, r1
 800547a:	f6ff af0a 	blt.w	8005292 <__kernel_rem_pio2f+0xba>
 800547e:	a81a      	add	r0, sp, #104	; 0x68
 8005480:	eb02 0c03 	add.w	ip, r2, r3
 8005484:	4484      	add	ip, r0
 8005486:	9803      	ldr	r0, [sp, #12]
 8005488:	f8dd e008 	ldr.w	lr, [sp, #8]
 800548c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8005490:	9001      	str	r0, [sp, #4]
 8005492:	ee07 0a90 	vmov	s15, r0
 8005496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549a:	9805      	ldr	r0, [sp, #20]
 800549c:	edcc 7a00 	vstr	s15, [ip]
 80054a0:	eddf 7a13 	vldr	s15, [pc, #76]	; 80054f0 <__kernel_rem_pio2f+0x318>
 80054a4:	eb00 0802 	add.w	r8, r0, r2
 80054a8:	f04f 0c00 	mov.w	ip, #0
 80054ac:	45d4      	cmp	ip, sl
 80054ae:	dd0c      	ble.n	80054ca <__kernel_rem_pio2f+0x2f2>
 80054b0:	eb02 0c07 	add.w	ip, r2, r7
 80054b4:	a842      	add	r0, sp, #264	; 0x108
 80054b6:	4484      	add	ip, r0
 80054b8:	edcc 7a01 	vstr	s15, [ip, #4]
 80054bc:	3101      	adds	r1, #1
 80054be:	3204      	adds	r2, #4
 80054c0:	e7da      	b.n	8005478 <__kernel_rem_pio2f+0x2a0>
 80054c2:	9b04      	ldr	r3, [sp, #16]
 80054c4:	f04f 0c01 	mov.w	ip, #1
 80054c8:	e7c7      	b.n	800545a <__kernel_rem_pio2f+0x282>
 80054ca:	ecfe 6a01 	vldmia	lr!, {s13}
 80054ce:	ed38 7a01 	vldmdb	r8!, {s14}
 80054d2:	f10c 0c01 	add.w	ip, ip, #1
 80054d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80054da:	e7e7      	b.n	80054ac <__kernel_rem_pio2f+0x2d4>
 80054dc:	3b01      	subs	r3, #1
 80054de:	e769      	b.n	80053b4 <__kernel_rem_pio2f+0x1dc>
 80054e0:	08007fe0 	.word	0x08007fe0
 80054e4:	08007fb4 	.word	0x08007fb4
 80054e8:	43800000 	.word	0x43800000
 80054ec:	3b800000 	.word	0x3b800000
 80054f0:	00000000 	.word	0x00000000
 80054f4:	4260      	negs	r0, r4
 80054f6:	eeb0 0a48 	vmov.f32	s0, s16
 80054fa:	f000 f9f5 	bl	80058e8 <scalbnf>
 80054fe:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80054e8 <__kernel_rem_pio2f+0x310>
 8005502:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	db1a      	blt.n	8005542 <__kernel_rem_pio2f+0x36a>
 800550c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80054ec <__kernel_rem_pio2f+0x314>
 8005510:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005514:	aa06      	add	r2, sp, #24
 8005516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800551a:	a906      	add	r1, sp, #24
 800551c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005520:	3408      	adds	r4, #8
 8005522:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800552a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800552e:	ee10 3a10 	vmov	r3, s0
 8005532:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005536:	1c6b      	adds	r3, r5, #1
 8005538:	ee17 2a90 	vmov	r2, s15
 800553c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005540:	e73f      	b.n	80053c2 <__kernel_rem_pio2f+0x1ea>
 8005542:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005546:	aa06      	add	r2, sp, #24
 8005548:	ee10 3a10 	vmov	r3, s0
 800554c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005550:	462b      	mov	r3, r5
 8005552:	e736      	b.n	80053c2 <__kernel_rem_pio2f+0x1ea>
 8005554:	aa06      	add	r2, sp, #24
 8005556:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800555a:	9202      	str	r2, [sp, #8]
 800555c:	ee07 2a90 	vmov	s15, r2
 8005560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005564:	3c01      	subs	r4, #1
 8005566:	ee67 7a80 	vmul.f32	s15, s15, s0
 800556a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800556e:	ed65 7a01 	vstmdb	r5!, {s15}
 8005572:	e734      	b.n	80053de <__kernel_rem_pio2f+0x206>
 8005574:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8005578:	ecf7 6a01 	vldmia	r7!, {s13}
 800557c:	ed9c 7a00 	vldr	s14, [ip]
 8005580:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005584:	3401      	adds	r4, #1
 8005586:	454c      	cmp	r4, r9
 8005588:	dc01      	bgt.n	800558e <__kernel_rem_pio2f+0x3b6>
 800558a:	42a5      	cmp	r5, r4
 800558c:	daf2      	bge.n	8005574 <__kernel_rem_pio2f+0x39c>
 800558e:	aa56      	add	r2, sp, #344	; 0x158
 8005590:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8005594:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8005598:	3501      	adds	r5, #1
 800559a:	3804      	subs	r0, #4
 800559c:	e723      	b.n	80053e6 <__kernel_rem_pio2f+0x20e>
 800559e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80055a0:	2a03      	cmp	r2, #3
 80055a2:	d84d      	bhi.n	8005640 <__kernel_rem_pio2f+0x468>
 80055a4:	e8df f002 	tbb	[pc, r2]
 80055a8:	021f1f3e 	.word	0x021f1f3e
 80055ac:	aa56      	add	r2, sp, #344	; 0x158
 80055ae:	4411      	add	r1, r2
 80055b0:	399c      	subs	r1, #156	; 0x9c
 80055b2:	4608      	mov	r0, r1
 80055b4:	461c      	mov	r4, r3
 80055b6:	2c00      	cmp	r4, #0
 80055b8:	dc5f      	bgt.n	800567a <__kernel_rem_pio2f+0x4a2>
 80055ba:	4608      	mov	r0, r1
 80055bc:	461c      	mov	r4, r3
 80055be:	2c01      	cmp	r4, #1
 80055c0:	dc6b      	bgt.n	800569a <__kernel_rem_pio2f+0x4c2>
 80055c2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80054f0 <__kernel_rem_pio2f+0x318>
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	dc77      	bgt.n	80056ba <__kernel_rem_pio2f+0x4e2>
 80055ca:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80055ce:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80055d2:	f1b8 0f00 	cmp.w	r8, #0
 80055d6:	d176      	bne.n	80056c6 <__kernel_rem_pio2f+0x4ee>
 80055d8:	edc6 6a00 	vstr	s13, [r6]
 80055dc:	ed86 7a01 	vstr	s14, [r6, #4]
 80055e0:	edc6 7a02 	vstr	s15, [r6, #8]
 80055e4:	e02c      	b.n	8005640 <__kernel_rem_pio2f+0x468>
 80055e6:	aa56      	add	r2, sp, #344	; 0x158
 80055e8:	4411      	add	r1, r2
 80055ea:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80054f0 <__kernel_rem_pio2f+0x318>
 80055ee:	399c      	subs	r1, #156	; 0x9c
 80055f0:	4618      	mov	r0, r3
 80055f2:	2800      	cmp	r0, #0
 80055f4:	da32      	bge.n	800565c <__kernel_rem_pio2f+0x484>
 80055f6:	f1b8 0f00 	cmp.w	r8, #0
 80055fa:	d035      	beq.n	8005668 <__kernel_rem_pio2f+0x490>
 80055fc:	eef1 7a47 	vneg.f32	s15, s14
 8005600:	edc6 7a00 	vstr	s15, [r6]
 8005604:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005608:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800560c:	a82f      	add	r0, sp, #188	; 0xbc
 800560e:	2101      	movs	r1, #1
 8005610:	428b      	cmp	r3, r1
 8005612:	da2c      	bge.n	800566e <__kernel_rem_pio2f+0x496>
 8005614:	f1b8 0f00 	cmp.w	r8, #0
 8005618:	d001      	beq.n	800561e <__kernel_rem_pio2f+0x446>
 800561a:	eef1 7a67 	vneg.f32	s15, s15
 800561e:	edc6 7a01 	vstr	s15, [r6, #4]
 8005622:	e00d      	b.n	8005640 <__kernel_rem_pio2f+0x468>
 8005624:	aa56      	add	r2, sp, #344	; 0x158
 8005626:	4411      	add	r1, r2
 8005628:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80054f0 <__kernel_rem_pio2f+0x318>
 800562c:	399c      	subs	r1, #156	; 0x9c
 800562e:	2b00      	cmp	r3, #0
 8005630:	da0e      	bge.n	8005650 <__kernel_rem_pio2f+0x478>
 8005632:	f1b8 0f00 	cmp.w	r8, #0
 8005636:	d001      	beq.n	800563c <__kernel_rem_pio2f+0x464>
 8005638:	eef1 7a67 	vneg.f32	s15, s15
 800563c:	edc6 7a00 	vstr	s15, [r6]
 8005640:	9b01      	ldr	r3, [sp, #4]
 8005642:	f003 0007 	and.w	r0, r3, #7
 8005646:	b057      	add	sp, #348	; 0x15c
 8005648:	ecbd 8b04 	vpop	{d8-d9}
 800564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005650:	ed31 7a01 	vldmdb	r1!, {s14}
 8005654:	3b01      	subs	r3, #1
 8005656:	ee77 7a87 	vadd.f32	s15, s15, s14
 800565a:	e7e8      	b.n	800562e <__kernel_rem_pio2f+0x456>
 800565c:	ed71 7a01 	vldmdb	r1!, {s15}
 8005660:	3801      	subs	r0, #1
 8005662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005666:	e7c4      	b.n	80055f2 <__kernel_rem_pio2f+0x41a>
 8005668:	eef0 7a47 	vmov.f32	s15, s14
 800566c:	e7c8      	b.n	8005600 <__kernel_rem_pio2f+0x428>
 800566e:	ecb0 7a01 	vldmia	r0!, {s14}
 8005672:	3101      	adds	r1, #1
 8005674:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005678:	e7ca      	b.n	8005610 <__kernel_rem_pio2f+0x438>
 800567a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800567e:	ed70 6a01 	vldmdb	r0!, {s13}
 8005682:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005686:	3c01      	subs	r4, #1
 8005688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800568c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8005690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005694:	edc0 7a00 	vstr	s15, [r0]
 8005698:	e78d      	b.n	80055b6 <__kernel_rem_pio2f+0x3de>
 800569a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800569e:	ed70 6a01 	vldmdb	r0!, {s13}
 80056a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80056a6:	3c01      	subs	r4, #1
 80056a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056ac:	ed00 7a01 	vstr	s14, [r0, #-4]
 80056b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b4:	edc0 7a00 	vstr	s15, [r0]
 80056b8:	e781      	b.n	80055be <__kernel_rem_pio2f+0x3e6>
 80056ba:	ed31 7a01 	vldmdb	r1!, {s14}
 80056be:	3b01      	subs	r3, #1
 80056c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056c4:	e77f      	b.n	80055c6 <__kernel_rem_pio2f+0x3ee>
 80056c6:	eef1 6a66 	vneg.f32	s13, s13
 80056ca:	eeb1 7a47 	vneg.f32	s14, s14
 80056ce:	edc6 6a00 	vstr	s13, [r6]
 80056d2:	ed86 7a01 	vstr	s14, [r6, #4]
 80056d6:	eef1 7a67 	vneg.f32	s15, s15
 80056da:	e781      	b.n	80055e0 <__kernel_rem_pio2f+0x408>

080056dc <__kernel_sinf>:
 80056dc:	ee10 3a10 	vmov	r3, s0
 80056e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80056e8:	da04      	bge.n	80056f4 <__kernel_sinf+0x18>
 80056ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80056ee:	ee17 3a90 	vmov	r3, s15
 80056f2:	b35b      	cbz	r3, 800574c <__kernel_sinf+0x70>
 80056f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80056f8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005750 <__kernel_sinf+0x74>
 80056fc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005754 <__kernel_sinf+0x78>
 8005700:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005704:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005758 <__kernel_sinf+0x7c>
 8005708:	eee6 7a07 	vfma.f32	s15, s12, s14
 800570c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800575c <__kernel_sinf+0x80>
 8005710:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005714:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005760 <__kernel_sinf+0x84>
 8005718:	ee60 6a07 	vmul.f32	s13, s0, s14
 800571c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005720:	b930      	cbnz	r0, 8005730 <__kernel_sinf+0x54>
 8005722:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005764 <__kernel_sinf+0x88>
 8005726:	eea7 6a27 	vfma.f32	s12, s14, s15
 800572a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800572e:	4770      	bx	lr
 8005730:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005734:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005738:	eee0 7a86 	vfma.f32	s15, s1, s12
 800573c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005740:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005768 <__kernel_sinf+0x8c>
 8005744:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005748:	ee30 0a60 	vsub.f32	s0, s0, s1
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	2f2ec9d3 	.word	0x2f2ec9d3
 8005754:	b2d72f34 	.word	0xb2d72f34
 8005758:	3638ef1b 	.word	0x3638ef1b
 800575c:	b9500d01 	.word	0xb9500d01
 8005760:	3c088889 	.word	0x3c088889
 8005764:	be2aaaab 	.word	0xbe2aaaab
 8005768:	3e2aaaab 	.word	0x3e2aaaab

0800576c <matherr>:
 800576c:	2000      	movs	r0, #0
 800576e:	4770      	bx	lr

08005770 <nan>:
 8005770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005778 <nan+0x8>
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	00000000 	.word	0x00000000
 800577c:	7ff80000 	.word	0x7ff80000

08005780 <fabsf>:
 8005780:	ee10 3a10 	vmov	r3, s0
 8005784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005788:	ee00 3a10 	vmov	s0, r3
 800578c:	4770      	bx	lr

0800578e <finitef>:
 800578e:	ee10 3a10 	vmov	r3, s0
 8005792:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8005796:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800579a:	bfac      	ite	ge
 800579c:	2000      	movge	r0, #0
 800579e:	2001      	movlt	r0, #1
 80057a0:	4770      	bx	lr
	...

080057a4 <floorf>:
 80057a4:	ee10 3a10 	vmov	r3, s0
 80057a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057ac:	0dca      	lsrs	r2, r1, #23
 80057ae:	3a7f      	subs	r2, #127	; 0x7f
 80057b0:	2a16      	cmp	r2, #22
 80057b2:	dc2a      	bgt.n	800580a <floorf+0x66>
 80057b4:	2a00      	cmp	r2, #0
 80057b6:	da11      	bge.n	80057dc <floorf+0x38>
 80057b8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800581c <floorf+0x78>
 80057bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80057c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c8:	dd05      	ble.n	80057d6 <floorf+0x32>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da23      	bge.n	8005816 <floorf+0x72>
 80057ce:	4a14      	ldr	r2, [pc, #80]	; (8005820 <floorf+0x7c>)
 80057d0:	2900      	cmp	r1, #0
 80057d2:	bf18      	it	ne
 80057d4:	4613      	movne	r3, r2
 80057d6:	ee00 3a10 	vmov	s0, r3
 80057da:	4770      	bx	lr
 80057dc:	4911      	ldr	r1, [pc, #68]	; (8005824 <floorf+0x80>)
 80057de:	4111      	asrs	r1, r2
 80057e0:	420b      	tst	r3, r1
 80057e2:	d0fa      	beq.n	80057da <floorf+0x36>
 80057e4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800581c <floorf+0x78>
 80057e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80057f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f4:	ddef      	ble.n	80057d6 <floorf+0x32>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfbe      	ittt	lt
 80057fa:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80057fe:	fa40 f202 	asrlt.w	r2, r0, r2
 8005802:	189b      	addlt	r3, r3, r2
 8005804:	ea23 0301 	bic.w	r3, r3, r1
 8005808:	e7e5      	b.n	80057d6 <floorf+0x32>
 800580a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800580e:	d3e4      	bcc.n	80057da <floorf+0x36>
 8005810:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005814:	4770      	bx	lr
 8005816:	2300      	movs	r3, #0
 8005818:	e7dd      	b.n	80057d6 <floorf+0x32>
 800581a:	bf00      	nop
 800581c:	7149f2ca 	.word	0x7149f2ca
 8005820:	bf800000 	.word	0xbf800000
 8005824:	007fffff 	.word	0x007fffff

08005828 <nanf>:
 8005828:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005830 <nanf+0x8>
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	7fc00000 	.word	0x7fc00000

08005834 <rintf>:
 8005834:	b513      	push	{r0, r1, r4, lr}
 8005836:	ee10 1a10 	vmov	r1, s0
 800583a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800583e:	0ddc      	lsrs	r4, r3, #23
 8005840:	3c7f      	subs	r4, #127	; 0x7f
 8005842:	2c16      	cmp	r4, #22
 8005844:	dc46      	bgt.n	80058d4 <rintf+0xa0>
 8005846:	b32b      	cbz	r3, 8005894 <rintf+0x60>
 8005848:	2c00      	cmp	r4, #0
 800584a:	ee10 2a10 	vmov	r2, s0
 800584e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8005852:	da21      	bge.n	8005898 <rintf+0x64>
 8005854:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8005858:	425b      	negs	r3, r3
 800585a:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <rintf+0xac>)
 800585c:	0a5b      	lsrs	r3, r3, #9
 800585e:	0d09      	lsrs	r1, r1, #20
 8005860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005864:	0509      	lsls	r1, r1, #20
 8005866:	430b      	orrs	r3, r1
 8005868:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800586c:	ee07 3a90 	vmov	s15, r3
 8005870:	edd2 6a00 	vldr	s13, [r2]
 8005874:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8005878:	ed8d 7a01 	vstr	s14, [sp, #4]
 800587c:	eddd 7a01 	vldr	s15, [sp, #4]
 8005880:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005884:	ee17 3a90 	vmov	r3, s15
 8005888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800588c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8005890:	ee00 3a10 	vmov	s0, r3
 8005894:	b002      	add	sp, #8
 8005896:	bd10      	pop	{r4, pc}
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <rintf+0xb0>)
 800589a:	4123      	asrs	r3, r4
 800589c:	4219      	tst	r1, r3
 800589e:	d0f9      	beq.n	8005894 <rintf+0x60>
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	4219      	tst	r1, r3
 80058a4:	d006      	beq.n	80058b4 <rintf+0x80>
 80058a6:	ea21 0203 	bic.w	r2, r1, r3
 80058aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058ae:	fa43 f404 	asr.w	r4, r3, r4
 80058b2:	4322      	orrs	r2, r4
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <rintf+0xac>)
 80058b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80058ba:	ed90 7a00 	vldr	s14, [r0]
 80058be:	ee07 2a90 	vmov	s15, r2
 80058c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80058ca:	ed9d 0a01 	vldr	s0, [sp, #4]
 80058ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 80058d2:	e7df      	b.n	8005894 <rintf+0x60>
 80058d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80058d8:	d3dc      	bcc.n	8005894 <rintf+0x60>
 80058da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80058de:	e7d9      	b.n	8005894 <rintf+0x60>
 80058e0:	08007fec 	.word	0x08007fec
 80058e4:	007fffff 	.word	0x007fffff

080058e8 <scalbnf>:
 80058e8:	b508      	push	{r3, lr}
 80058ea:	ee10 2a10 	vmov	r2, s0
 80058ee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80058f2:	ed2d 8b02 	vpush	{d8}
 80058f6:	eef0 0a40 	vmov.f32	s1, s0
 80058fa:	d004      	beq.n	8005906 <scalbnf+0x1e>
 80058fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005900:	d306      	bcc.n	8005910 <scalbnf+0x28>
 8005902:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005906:	ecbd 8b02 	vpop	{d8}
 800590a:	eeb0 0a60 	vmov.f32	s0, s1
 800590e:	bd08      	pop	{r3, pc}
 8005910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005914:	d21c      	bcs.n	8005950 <scalbnf+0x68>
 8005916:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <scalbnf+0xac>)
 8005918:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005998 <scalbnf+0xb0>
 800591c:	4298      	cmp	r0, r3
 800591e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005922:	db10      	blt.n	8005946 <scalbnf+0x5e>
 8005924:	ee10 2a90 	vmov	r2, s1
 8005928:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800592c:	3b19      	subs	r3, #25
 800592e:	4403      	add	r3, r0
 8005930:	2bfe      	cmp	r3, #254	; 0xfe
 8005932:	dd0f      	ble.n	8005954 <scalbnf+0x6c>
 8005934:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800599c <scalbnf+0xb4>
 8005938:	eeb0 0a48 	vmov.f32	s0, s16
 800593c:	f000 f9e6 	bl	8005d0c <copysignf>
 8005940:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005944:	e7df      	b.n	8005906 <scalbnf+0x1e>
 8005946:	eddf 7a16 	vldr	s15, [pc, #88]	; 80059a0 <scalbnf+0xb8>
 800594a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800594e:	e7da      	b.n	8005906 <scalbnf+0x1e>
 8005950:	0ddb      	lsrs	r3, r3, #23
 8005952:	e7ec      	b.n	800592e <scalbnf+0x46>
 8005954:	2b00      	cmp	r3, #0
 8005956:	dd06      	ble.n	8005966 <scalbnf+0x7e>
 8005958:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800595c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005960:	ee00 3a90 	vmov	s1, r3
 8005964:	e7cf      	b.n	8005906 <scalbnf+0x1e>
 8005966:	f113 0f16 	cmn.w	r3, #22
 800596a:	da06      	bge.n	800597a <scalbnf+0x92>
 800596c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005970:	4298      	cmp	r0, r3
 8005972:	dcdf      	bgt.n	8005934 <scalbnf+0x4c>
 8005974:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80059a0 <scalbnf+0xb8>
 8005978:	e7de      	b.n	8005938 <scalbnf+0x50>
 800597a:	3319      	adds	r3, #25
 800597c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005980:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005984:	eddf 7a07 	vldr	s15, [pc, #28]	; 80059a4 <scalbnf+0xbc>
 8005988:	ee07 3a10 	vmov	s14, r3
 800598c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005990:	e7b9      	b.n	8005906 <scalbnf+0x1e>
 8005992:	bf00      	nop
 8005994:	ffff3cb0 	.word	0xffff3cb0
 8005998:	4c000000 	.word	0x4c000000
 800599c:	7149f2ca 	.word	0x7149f2ca
 80059a0:	0da24260 	.word	0x0da24260
 80059a4:	33000000 	.word	0x33000000

080059a8 <__ieee754_log>:
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	ec51 0b10 	vmov	r0, r1, d0
 80059b0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80059b4:	b087      	sub	sp, #28
 80059b6:	460d      	mov	r5, r1
 80059b8:	da27      	bge.n	8005a0a <__ieee754_log+0x62>
 80059ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059be:	4303      	orrs	r3, r0
 80059c0:	ee10 2a10 	vmov	r2, s0
 80059c4:	d10a      	bne.n	80059dc <__ieee754_log+0x34>
 80059c6:	49cc      	ldr	r1, [pc, #816]	; (8005cf8 <__ieee754_log+0x350>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	2300      	movs	r3, #0
 80059cc:	2000      	movs	r0, #0
 80059ce:	f7fa ff35 	bl	800083c <__aeabi_ddiv>
 80059d2:	ec41 0b10 	vmov	d0, r0, r1
 80059d6:	b007      	add	sp, #28
 80059d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059dc:	2900      	cmp	r1, #0
 80059de:	da05      	bge.n	80059ec <__ieee754_log+0x44>
 80059e0:	460b      	mov	r3, r1
 80059e2:	f7fa fc49 	bl	8000278 <__aeabi_dsub>
 80059e6:	2200      	movs	r2, #0
 80059e8:	2300      	movs	r3, #0
 80059ea:	e7f0      	b.n	80059ce <__ieee754_log+0x26>
 80059ec:	4bc3      	ldr	r3, [pc, #780]	; (8005cfc <__ieee754_log+0x354>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	f7fa fdfa 	bl	80005e8 <__aeabi_dmul>
 80059f4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80059f8:	460d      	mov	r5, r1
 80059fa:	4ac1      	ldr	r2, [pc, #772]	; (8005d00 <__ieee754_log+0x358>)
 80059fc:	4295      	cmp	r5, r2
 80059fe:	dd06      	ble.n	8005a0e <__ieee754_log+0x66>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	f7fa fc3a 	bl	800027c <__adddf3>
 8005a08:	e7e3      	b.n	80059d2 <__ieee754_log+0x2a>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e7f5      	b.n	80059fa <__ieee754_log+0x52>
 8005a0e:	152c      	asrs	r4, r5, #20
 8005a10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a14:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005a18:	441c      	add	r4, r3
 8005a1a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005a1e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a26:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005a2a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005a2e:	ea42 0105 	orr.w	r1, r2, r5
 8005a32:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005a36:	2200      	movs	r2, #0
 8005a38:	4bb2      	ldr	r3, [pc, #712]	; (8005d04 <__ieee754_log+0x35c>)
 8005a3a:	f7fa fc1d 	bl	8000278 <__aeabi_dsub>
 8005a3e:	1cab      	adds	r3, r5, #2
 8005a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	4682      	mov	sl, r0
 8005a48:	468b      	mov	fp, r1
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	dc53      	bgt.n	8005af8 <__ieee754_log+0x150>
 8005a50:	2300      	movs	r3, #0
 8005a52:	f7fb f831 	bl	8000ab8 <__aeabi_dcmpeq>
 8005a56:	b1d0      	cbz	r0, 8005a8e <__ieee754_log+0xe6>
 8005a58:	2c00      	cmp	r4, #0
 8005a5a:	f000 8120 	beq.w	8005c9e <__ieee754_log+0x2f6>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7fa fd58 	bl	8000514 <__aeabi_i2d>
 8005a64:	a390      	add	r3, pc, #576	; (adr r3, 8005ca8 <__ieee754_log+0x300>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	f7fa fdbb 	bl	80005e8 <__aeabi_dmul>
 8005a72:	a38f      	add	r3, pc, #572	; (adr r3, 8005cb0 <__ieee754_log+0x308>)
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	4604      	mov	r4, r0
 8005a7a:	460d      	mov	r5, r1
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	4639      	mov	r1, r7
 8005a80:	f7fa fdb2 	bl	80005e8 <__aeabi_dmul>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4620      	mov	r0, r4
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	e7ba      	b.n	8005a04 <__ieee754_log+0x5c>
 8005a8e:	a38a      	add	r3, pc, #552	; (adr r3, 8005cb8 <__ieee754_log+0x310>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	4650      	mov	r0, sl
 8005a96:	4659      	mov	r1, fp
 8005a98:	f7fa fda6 	bl	80005e8 <__aeabi_dmul>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	4999      	ldr	r1, [pc, #612]	; (8005d08 <__ieee754_log+0x360>)
 8005aa4:	f7fa fbe8 	bl	8000278 <__aeabi_dsub>
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460f      	mov	r7, r1
 8005aae:	465b      	mov	r3, fp
 8005ab0:	4650      	mov	r0, sl
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	f7fa fd98 	bl	80005e8 <__aeabi_dmul>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fa fd92 	bl	80005e8 <__aeabi_dmul>
 8005ac4:	4606      	mov	r6, r0
 8005ac6:	460f      	mov	r7, r1
 8005ac8:	b914      	cbnz	r4, 8005ad0 <__ieee754_log+0x128>
 8005aca:	4632      	mov	r2, r6
 8005acc:	463b      	mov	r3, r7
 8005ace:	e0a0      	b.n	8005c12 <__ieee754_log+0x26a>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f7fa fd1f 	bl	8000514 <__aeabi_i2d>
 8005ad6:	a374      	add	r3, pc, #464	; (adr r3, 8005ca8 <__ieee754_log+0x300>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	4680      	mov	r8, r0
 8005ade:	4689      	mov	r9, r1
 8005ae0:	f7fa fd82 	bl	80005e8 <__aeabi_dmul>
 8005ae4:	a372      	add	r3, pc, #456	; (adr r3, 8005cb0 <__ieee754_log+0x308>)
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	4604      	mov	r4, r0
 8005aec:	460d      	mov	r5, r1
 8005aee:	4640      	mov	r0, r8
 8005af0:	4649      	mov	r1, r9
 8005af2:	f7fa fd79 	bl	80005e8 <__aeabi_dmul>
 8005af6:	e0a5      	b.n	8005c44 <__ieee754_log+0x29c>
 8005af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005afc:	f7fa fbbe 	bl	800027c <__adddf3>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4650      	mov	r0, sl
 8005b06:	4659      	mov	r1, fp
 8005b08:	f7fa fe98 	bl	800083c <__aeabi_ddiv>
 8005b0c:	e9cd 0100 	strd	r0, r1, [sp]
 8005b10:	4620      	mov	r0, r4
 8005b12:	f7fa fcff 	bl	8000514 <__aeabi_i2d>
 8005b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	f7fa fd61 	bl	80005e8 <__aeabi_dmul>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b2e:	f7fa fd5b 	bl	80005e8 <__aeabi_dmul>
 8005b32:	a363      	add	r3, pc, #396	; (adr r3, 8005cc0 <__ieee754_log+0x318>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	4680      	mov	r8, r0
 8005b3a:	4689      	mov	r9, r1
 8005b3c:	f7fa fd54 	bl	80005e8 <__aeabi_dmul>
 8005b40:	a361      	add	r3, pc, #388	; (adr r3, 8005cc8 <__ieee754_log+0x320>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f7fa fb99 	bl	800027c <__adddf3>
 8005b4a:	4642      	mov	r2, r8
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	f7fa fd4b 	bl	80005e8 <__aeabi_dmul>
 8005b52:	a35f      	add	r3, pc, #380	; (adr r3, 8005cd0 <__ieee754_log+0x328>)
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	f7fa fb90 	bl	800027c <__adddf3>
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	f7fa fd42 	bl	80005e8 <__aeabi_dmul>
 8005b64:	a35c      	add	r3, pc, #368	; (adr r3, 8005cd8 <__ieee754_log+0x330>)
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f7fa fb87 	bl	800027c <__adddf3>
 8005b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b72:	f7fa fd39 	bl	80005e8 <__aeabi_dmul>
 8005b76:	a35a      	add	r3, pc, #360	; (adr r3, 8005ce0 <__ieee754_log+0x338>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b80:	4640      	mov	r0, r8
 8005b82:	4649      	mov	r1, r9
 8005b84:	f7fa fd30 	bl	80005e8 <__aeabi_dmul>
 8005b88:	a357      	add	r3, pc, #348	; (adr r3, 8005ce8 <__ieee754_log+0x340>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fb75 	bl	800027c <__adddf3>
 8005b92:	4642      	mov	r2, r8
 8005b94:	464b      	mov	r3, r9
 8005b96:	f7fa fd27 	bl	80005e8 <__aeabi_dmul>
 8005b9a:	a355      	add	r3, pc, #340	; (adr r3, 8005cf0 <__ieee754_log+0x348>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa fb6c 	bl	800027c <__adddf3>
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	f7fa fd1e 	bl	80005e8 <__aeabi_dmul>
 8005bac:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005bb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bbc:	f7fa fb5e 	bl	800027c <__adddf3>
 8005bc0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8005bc4:	3551      	adds	r5, #81	; 0x51
 8005bc6:	4335      	orrs	r5, r6
 8005bc8:	2d00      	cmp	r5, #0
 8005bca:	4680      	mov	r8, r0
 8005bcc:	4689      	mov	r9, r1
 8005bce:	dd48      	ble.n	8005c62 <__ieee754_log+0x2ba>
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4b4d      	ldr	r3, [pc, #308]	; (8005d08 <__ieee754_log+0x360>)
 8005bd4:	4650      	mov	r0, sl
 8005bd6:	4659      	mov	r1, fp
 8005bd8:	f7fa fd06 	bl	80005e8 <__aeabi_dmul>
 8005bdc:	4652      	mov	r2, sl
 8005bde:	465b      	mov	r3, fp
 8005be0:	f7fa fd02 	bl	80005e8 <__aeabi_dmul>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4606      	mov	r6, r0
 8005bea:	460f      	mov	r7, r1
 8005bec:	4640      	mov	r0, r8
 8005bee:	4649      	mov	r1, r9
 8005bf0:	f7fa fb44 	bl	800027c <__adddf3>
 8005bf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bf8:	f7fa fcf6 	bl	80005e8 <__aeabi_dmul>
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	4689      	mov	r9, r1
 8005c00:	b964      	cbnz	r4, 8005c1c <__ieee754_log+0x274>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4630      	mov	r0, r6
 8005c08:	4639      	mov	r1, r7
 8005c0a:	f7fa fb35 	bl	8000278 <__aeabi_dsub>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4650      	mov	r0, sl
 8005c14:	4659      	mov	r1, fp
 8005c16:	f7fa fb2f 	bl	8000278 <__aeabi_dsub>
 8005c1a:	e6da      	b.n	80059d2 <__ieee754_log+0x2a>
 8005c1c:	a322      	add	r3, pc, #136	; (adr r3, 8005ca8 <__ieee754_log+0x300>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c26:	f7fa fcdf 	bl	80005e8 <__aeabi_dmul>
 8005c2a:	a321      	add	r3, pc, #132	; (adr r3, 8005cb0 <__ieee754_log+0x308>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	4604      	mov	r4, r0
 8005c32:	460d      	mov	r5, r1
 8005c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c38:	f7fa fcd6 	bl	80005e8 <__aeabi_dmul>
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	f7fa fb1c 	bl	800027c <__adddf3>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4630      	mov	r0, r6
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa fb14 	bl	8000278 <__aeabi_dsub>
 8005c50:	4652      	mov	r2, sl
 8005c52:	465b      	mov	r3, fp
 8005c54:	f7fa fb10 	bl	8000278 <__aeabi_dsub>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	e7d9      	b.n	8005c16 <__ieee754_log+0x26e>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4650      	mov	r0, sl
 8005c68:	4659      	mov	r1, fp
 8005c6a:	f7fa fb05 	bl	8000278 <__aeabi_dsub>
 8005c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c72:	f7fa fcb9 	bl	80005e8 <__aeabi_dmul>
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	2c00      	cmp	r4, #0
 8005c7c:	f43f af25 	beq.w	8005aca <__ieee754_log+0x122>
 8005c80:	a309      	add	r3, pc, #36	; (adr r3, 8005ca8 <__ieee754_log+0x300>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8a:	f7fa fcad 	bl	80005e8 <__aeabi_dmul>
 8005c8e:	a308      	add	r3, pc, #32	; (adr r3, 8005cb0 <__ieee754_log+0x308>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	4604      	mov	r4, r0
 8005c96:	460d      	mov	r5, r1
 8005c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9c:	e729      	b.n	8005af2 <__ieee754_log+0x14a>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	e696      	b.n	80059d2 <__ieee754_log+0x2a>
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	fee00000 	.word	0xfee00000
 8005cac:	3fe62e42 	.word	0x3fe62e42
 8005cb0:	35793c76 	.word	0x35793c76
 8005cb4:	3dea39ef 	.word	0x3dea39ef
 8005cb8:	55555555 	.word	0x55555555
 8005cbc:	3fd55555 	.word	0x3fd55555
 8005cc0:	df3e5244 	.word	0xdf3e5244
 8005cc4:	3fc2f112 	.word	0x3fc2f112
 8005cc8:	96cb03de 	.word	0x96cb03de
 8005ccc:	3fc74664 	.word	0x3fc74664
 8005cd0:	94229359 	.word	0x94229359
 8005cd4:	3fd24924 	.word	0x3fd24924
 8005cd8:	55555593 	.word	0x55555593
 8005cdc:	3fe55555 	.word	0x3fe55555
 8005ce0:	d078c69f 	.word	0xd078c69f
 8005ce4:	3fc39a09 	.word	0x3fc39a09
 8005ce8:	1d8e78af 	.word	0x1d8e78af
 8005cec:	3fcc71c5 	.word	0x3fcc71c5
 8005cf0:	9997fa04 	.word	0x9997fa04
 8005cf4:	3fd99999 	.word	0x3fd99999
 8005cf8:	c3500000 	.word	0xc3500000
 8005cfc:	43500000 	.word	0x43500000
 8005d00:	7fefffff 	.word	0x7fefffff
 8005d04:	3ff00000 	.word	0x3ff00000
 8005d08:	3fe00000 	.word	0x3fe00000

08005d0c <copysignf>:
 8005d0c:	ee10 3a10 	vmov	r3, s0
 8005d10:	ee10 2a90 	vmov	r2, s1
 8005d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d18:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	ee00 3a10 	vmov	s0, r3
 8005d22:	4770      	bx	lr

08005d24 <abort>:
 8005d24:	b508      	push	{r3, lr}
 8005d26:	2006      	movs	r0, #6
 8005d28:	f000 f91e 	bl	8005f68 <raise>
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f7fc fa5c 	bl	80021ea <_exit>
	...

08005d34 <__errno>:
 8005d34:	4b01      	ldr	r3, [pc, #4]	; (8005d3c <__errno+0x8>)
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	200000ac 	.word	0x200000ac

08005d40 <__libc_init_array>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	4e0d      	ldr	r6, [pc, #52]	; (8005d78 <__libc_init_array+0x38>)
 8005d44:	4c0d      	ldr	r4, [pc, #52]	; (8005d7c <__libc_init_array+0x3c>)
 8005d46:	1ba4      	subs	r4, r4, r6
 8005d48:	10a4      	asrs	r4, r4, #2
 8005d4a:	2500      	movs	r5, #0
 8005d4c:	42a5      	cmp	r5, r4
 8005d4e:	d109      	bne.n	8005d64 <__libc_init_array+0x24>
 8005d50:	4e0b      	ldr	r6, [pc, #44]	; (8005d80 <__libc_init_array+0x40>)
 8005d52:	4c0c      	ldr	r4, [pc, #48]	; (8005d84 <__libc_init_array+0x44>)
 8005d54:	f000 fc72 	bl	800663c <_init>
 8005d58:	1ba4      	subs	r4, r4, r6
 8005d5a:	10a4      	asrs	r4, r4, #2
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	42a5      	cmp	r5, r4
 8005d60:	d105      	bne.n	8005d6e <__libc_init_array+0x2e>
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d68:	4798      	blx	r3
 8005d6a:	3501      	adds	r5, #1
 8005d6c:	e7ee      	b.n	8005d4c <__libc_init_array+0xc>
 8005d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d72:	4798      	blx	r3
 8005d74:	3501      	adds	r5, #1
 8005d76:	e7f2      	b.n	8005d5e <__libc_init_array+0x1e>
 8005d78:	08008030 	.word	0x08008030
 8005d7c:	08008030 	.word	0x08008030
 8005d80:	08008030 	.word	0x08008030
 8005d84:	08008038 	.word	0x08008038

08005d88 <malloc>:
 8005d88:	4b02      	ldr	r3, [pc, #8]	; (8005d94 <malloc+0xc>)
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	f000 b859 	b.w	8005e44 <_malloc_r>
 8005d92:	bf00      	nop
 8005d94:	200000ac 	.word	0x200000ac

08005d98 <memset>:
 8005d98:	4402      	add	r2, r0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d100      	bne.n	8005da2 <memset+0xa>
 8005da0:	4770      	bx	lr
 8005da2:	f803 1b01 	strb.w	r1, [r3], #1
 8005da6:	e7f9      	b.n	8005d9c <memset+0x4>

08005da8 <_free_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4605      	mov	r5, r0
 8005dac:	2900      	cmp	r1, #0
 8005dae:	d045      	beq.n	8005e3c <_free_r+0x94>
 8005db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db4:	1f0c      	subs	r4, r1, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfb8      	it	lt
 8005dba:	18e4      	addlt	r4, r4, r3
 8005dbc:	f000 f910 	bl	8005fe0 <__malloc_lock>
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <_free_r+0x98>)
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	b933      	cbnz	r3, 8005dd6 <_free_r+0x2e>
 8005dc8:	6063      	str	r3, [r4, #4]
 8005dca:	6014      	str	r4, [r2, #0]
 8005dcc:	4628      	mov	r0, r5
 8005dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd2:	f000 b906 	b.w	8005fe2 <__malloc_unlock>
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	d90c      	bls.n	8005df4 <_free_r+0x4c>
 8005dda:	6821      	ldr	r1, [r4, #0]
 8005ddc:	1862      	adds	r2, r4, r1
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bf04      	itt	eq
 8005de2:	681a      	ldreq	r2, [r3, #0]
 8005de4:	685b      	ldreq	r3, [r3, #4]
 8005de6:	6063      	str	r3, [r4, #4]
 8005de8:	bf04      	itt	eq
 8005dea:	1852      	addeq	r2, r2, r1
 8005dec:	6022      	streq	r2, [r4, #0]
 8005dee:	6004      	str	r4, [r0, #0]
 8005df0:	e7ec      	b.n	8005dcc <_free_r+0x24>
 8005df2:	4613      	mov	r3, r2
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	b10a      	cbz	r2, 8005dfc <_free_r+0x54>
 8005df8:	42a2      	cmp	r2, r4
 8005dfa:	d9fa      	bls.n	8005df2 <_free_r+0x4a>
 8005dfc:	6819      	ldr	r1, [r3, #0]
 8005dfe:	1858      	adds	r0, r3, r1
 8005e00:	42a0      	cmp	r0, r4
 8005e02:	d10b      	bne.n	8005e1c <_free_r+0x74>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	4401      	add	r1, r0
 8005e08:	1858      	adds	r0, r3, r1
 8005e0a:	4282      	cmp	r2, r0
 8005e0c:	6019      	str	r1, [r3, #0]
 8005e0e:	d1dd      	bne.n	8005dcc <_free_r+0x24>
 8005e10:	6810      	ldr	r0, [r2, #0]
 8005e12:	6852      	ldr	r2, [r2, #4]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	4401      	add	r1, r0
 8005e18:	6019      	str	r1, [r3, #0]
 8005e1a:	e7d7      	b.n	8005dcc <_free_r+0x24>
 8005e1c:	d902      	bls.n	8005e24 <_free_r+0x7c>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	e7d3      	b.n	8005dcc <_free_r+0x24>
 8005e24:	6820      	ldr	r0, [r4, #0]
 8005e26:	1821      	adds	r1, r4, r0
 8005e28:	428a      	cmp	r2, r1
 8005e2a:	bf04      	itt	eq
 8005e2c:	6811      	ldreq	r1, [r2, #0]
 8005e2e:	6852      	ldreq	r2, [r2, #4]
 8005e30:	6062      	str	r2, [r4, #4]
 8005e32:	bf04      	itt	eq
 8005e34:	1809      	addeq	r1, r1, r0
 8005e36:	6021      	streq	r1, [r4, #0]
 8005e38:	605c      	str	r4, [r3, #4]
 8005e3a:	e7c7      	b.n	8005dcc <_free_r+0x24>
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	200010f4 	.word	0x200010f4

08005e44 <_malloc_r>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	1ccd      	adds	r5, r1, #3
 8005e48:	f025 0503 	bic.w	r5, r5, #3
 8005e4c:	3508      	adds	r5, #8
 8005e4e:	2d0c      	cmp	r5, #12
 8005e50:	bf38      	it	cc
 8005e52:	250c      	movcc	r5, #12
 8005e54:	2d00      	cmp	r5, #0
 8005e56:	4606      	mov	r6, r0
 8005e58:	db01      	blt.n	8005e5e <_malloc_r+0x1a>
 8005e5a:	42a9      	cmp	r1, r5
 8005e5c:	d903      	bls.n	8005e66 <_malloc_r+0x22>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	6033      	str	r3, [r6, #0]
 8005e62:	2000      	movs	r0, #0
 8005e64:	bd70      	pop	{r4, r5, r6, pc}
 8005e66:	f000 f8bb 	bl	8005fe0 <__malloc_lock>
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <_malloc_r+0xac>)
 8005e6c:	6814      	ldr	r4, [r2, #0]
 8005e6e:	4621      	mov	r1, r4
 8005e70:	b991      	cbnz	r1, 8005e98 <_malloc_r+0x54>
 8005e72:	4c20      	ldr	r4, [pc, #128]	; (8005ef4 <_malloc_r+0xb0>)
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	b91b      	cbnz	r3, 8005e80 <_malloc_r+0x3c>
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 f83d 	bl	8005ef8 <_sbrk_r>
 8005e7e:	6020      	str	r0, [r4, #0]
 8005e80:	4629      	mov	r1, r5
 8005e82:	4630      	mov	r0, r6
 8005e84:	f000 f838 	bl	8005ef8 <_sbrk_r>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d124      	bne.n	8005ed6 <_malloc_r+0x92>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	4630      	mov	r0, r6
 8005e92:	f000 f8a6 	bl	8005fe2 <__malloc_unlock>
 8005e96:	e7e4      	b.n	8005e62 <_malloc_r+0x1e>
 8005e98:	680b      	ldr	r3, [r1, #0]
 8005e9a:	1b5b      	subs	r3, r3, r5
 8005e9c:	d418      	bmi.n	8005ed0 <_malloc_r+0x8c>
 8005e9e:	2b0b      	cmp	r3, #11
 8005ea0:	d90f      	bls.n	8005ec2 <_malloc_r+0x7e>
 8005ea2:	600b      	str	r3, [r1, #0]
 8005ea4:	50cd      	str	r5, [r1, r3]
 8005ea6:	18cc      	adds	r4, r1, r3
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f000 f89a 	bl	8005fe2 <__malloc_unlock>
 8005eae:	f104 000b 	add.w	r0, r4, #11
 8005eb2:	1d23      	adds	r3, r4, #4
 8005eb4:	f020 0007 	bic.w	r0, r0, #7
 8005eb8:	1ac3      	subs	r3, r0, r3
 8005eba:	d0d3      	beq.n	8005e64 <_malloc_r+0x20>
 8005ebc:	425a      	negs	r2, r3
 8005ebe:	50e2      	str	r2, [r4, r3]
 8005ec0:	e7d0      	b.n	8005e64 <_malloc_r+0x20>
 8005ec2:	428c      	cmp	r4, r1
 8005ec4:	684b      	ldr	r3, [r1, #4]
 8005ec6:	bf16      	itet	ne
 8005ec8:	6063      	strne	r3, [r4, #4]
 8005eca:	6013      	streq	r3, [r2, #0]
 8005ecc:	460c      	movne	r4, r1
 8005ece:	e7eb      	b.n	8005ea8 <_malloc_r+0x64>
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	6849      	ldr	r1, [r1, #4]
 8005ed4:	e7cc      	b.n	8005e70 <_malloc_r+0x2c>
 8005ed6:	1cc4      	adds	r4, r0, #3
 8005ed8:	f024 0403 	bic.w	r4, r4, #3
 8005edc:	42a0      	cmp	r0, r4
 8005ede:	d005      	beq.n	8005eec <_malloc_r+0xa8>
 8005ee0:	1a21      	subs	r1, r4, r0
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 f808 	bl	8005ef8 <_sbrk_r>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d0cf      	beq.n	8005e8c <_malloc_r+0x48>
 8005eec:	6025      	str	r5, [r4, #0]
 8005eee:	e7db      	b.n	8005ea8 <_malloc_r+0x64>
 8005ef0:	200010f4 	.word	0x200010f4
 8005ef4:	200010f8 	.word	0x200010f8

08005ef8 <_sbrk_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4c06      	ldr	r4, [pc, #24]	; (8005f14 <_sbrk_r+0x1c>)
 8005efc:	2300      	movs	r3, #0
 8005efe:	4605      	mov	r5, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	f7fc f978 	bl	80021f8 <_sbrk>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_sbrk_r+0x1a>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_sbrk_r+0x1a>
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	200012e4 	.word	0x200012e4

08005f18 <_raise_r>:
 8005f18:	291f      	cmp	r1, #31
 8005f1a:	b538      	push	{r3, r4, r5, lr}
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	460d      	mov	r5, r1
 8005f20:	d904      	bls.n	8005f2c <_raise_r+0x14>
 8005f22:	2316      	movs	r3, #22
 8005f24:	6003      	str	r3, [r0, #0]
 8005f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f2e:	b112      	cbz	r2, 8005f36 <_raise_r+0x1e>
 8005f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f34:	b94b      	cbnz	r3, 8005f4a <_raise_r+0x32>
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 f830 	bl	8005f9c <_getpid_r>
 8005f3c:	462a      	mov	r2, r5
 8005f3e:	4601      	mov	r1, r0
 8005f40:	4620      	mov	r0, r4
 8005f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f46:	f000 b817 	b.w	8005f78 <_kill_r>
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d00a      	beq.n	8005f64 <_raise_r+0x4c>
 8005f4e:	1c59      	adds	r1, r3, #1
 8005f50:	d103      	bne.n	8005f5a <_raise_r+0x42>
 8005f52:	2316      	movs	r3, #22
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	2001      	movs	r0, #1
 8005f58:	e7e7      	b.n	8005f2a <_raise_r+0x12>
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f60:	4628      	mov	r0, r5
 8005f62:	4798      	blx	r3
 8005f64:	2000      	movs	r0, #0
 8005f66:	e7e0      	b.n	8005f2a <_raise_r+0x12>

08005f68 <raise>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <raise+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f7ff bfd3 	b.w	8005f18 <_raise_r>
 8005f72:	bf00      	nop
 8005f74:	200000ac 	.word	0x200000ac

08005f78 <_kill_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4c07      	ldr	r4, [pc, #28]	; (8005f98 <_kill_r+0x20>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4605      	mov	r5, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	f7fc f928 	bl	80021da <_kill>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	d102      	bne.n	8005f94 <_kill_r+0x1c>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	b103      	cbz	r3, 8005f94 <_kill_r+0x1c>
 8005f92:	602b      	str	r3, [r5, #0]
 8005f94:	bd38      	pop	{r3, r4, r5, pc}
 8005f96:	bf00      	nop
 8005f98:	200012e4 	.word	0x200012e4

08005f9c <_getpid_r>:
 8005f9c:	f7fc b91b 	b.w	80021d6 <_getpid>

08005fa0 <siprintf>:
 8005fa0:	b40e      	push	{r1, r2, r3}
 8005fa2:	b500      	push	{lr}
 8005fa4:	b09c      	sub	sp, #112	; 0x70
 8005fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8005fa8:	9002      	str	r0, [sp, #8]
 8005faa:	9006      	str	r0, [sp, #24]
 8005fac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fb0:	4809      	ldr	r0, [pc, #36]	; (8005fd8 <siprintf+0x38>)
 8005fb2:	9107      	str	r1, [sp, #28]
 8005fb4:	9104      	str	r1, [sp, #16]
 8005fb6:	4909      	ldr	r1, [pc, #36]	; (8005fdc <siprintf+0x3c>)
 8005fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fbc:	9105      	str	r1, [sp, #20]
 8005fbe:	6800      	ldr	r0, [r0, #0]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	a902      	add	r1, sp, #8
 8005fc4:	f000 f868 	bl	8006098 <_svfiprintf_r>
 8005fc8:	9b02      	ldr	r3, [sp, #8]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	b01c      	add	sp, #112	; 0x70
 8005fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fd4:	b003      	add	sp, #12
 8005fd6:	4770      	bx	lr
 8005fd8:	200000ac 	.word	0x200000ac
 8005fdc:	ffff0208 	.word	0xffff0208

08005fe0 <__malloc_lock>:
 8005fe0:	4770      	bx	lr

08005fe2 <__malloc_unlock>:
 8005fe2:	4770      	bx	lr

08005fe4 <__ssputs_r>:
 8005fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	688e      	ldr	r6, [r1, #8]
 8005fea:	429e      	cmp	r6, r3
 8005fec:	4682      	mov	sl, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	4690      	mov	r8, r2
 8005ff2:	4699      	mov	r9, r3
 8005ff4:	d837      	bhi.n	8006066 <__ssputs_r+0x82>
 8005ff6:	898a      	ldrh	r2, [r1, #12]
 8005ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ffc:	d031      	beq.n	8006062 <__ssputs_r+0x7e>
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	6909      	ldr	r1, [r1, #16]
 8006002:	1a6f      	subs	r7, r5, r1
 8006004:	6965      	ldr	r5, [r4, #20]
 8006006:	2302      	movs	r3, #2
 8006008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800600c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006010:	f109 0301 	add.w	r3, r9, #1
 8006014:	443b      	add	r3, r7
 8006016:	429d      	cmp	r5, r3
 8006018:	bf38      	it	cc
 800601a:	461d      	movcc	r5, r3
 800601c:	0553      	lsls	r3, r2, #21
 800601e:	d530      	bpl.n	8006082 <__ssputs_r+0x9e>
 8006020:	4629      	mov	r1, r5
 8006022:	f7ff ff0f 	bl	8005e44 <_malloc_r>
 8006026:	4606      	mov	r6, r0
 8006028:	b950      	cbnz	r0, 8006040 <__ssputs_r+0x5c>
 800602a:	230c      	movs	r3, #12
 800602c:	f8ca 3000 	str.w	r3, [sl]
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	463a      	mov	r2, r7
 8006042:	6921      	ldr	r1, [r4, #16]
 8006044:	f000 faa8 	bl	8006598 <memcpy>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	6126      	str	r6, [r4, #16]
 8006056:	6165      	str	r5, [r4, #20]
 8006058:	443e      	add	r6, r7
 800605a:	1bed      	subs	r5, r5, r7
 800605c:	6026      	str	r6, [r4, #0]
 800605e:	60a5      	str	r5, [r4, #8]
 8006060:	464e      	mov	r6, r9
 8006062:	454e      	cmp	r6, r9
 8006064:	d900      	bls.n	8006068 <__ssputs_r+0x84>
 8006066:	464e      	mov	r6, r9
 8006068:	4632      	mov	r2, r6
 800606a:	4641      	mov	r1, r8
 800606c:	6820      	ldr	r0, [r4, #0]
 800606e:	f000 fa9e 	bl	80065ae <memmove>
 8006072:	68a3      	ldr	r3, [r4, #8]
 8006074:	1b9b      	subs	r3, r3, r6
 8006076:	60a3      	str	r3, [r4, #8]
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	441e      	add	r6, r3
 800607c:	6026      	str	r6, [r4, #0]
 800607e:	2000      	movs	r0, #0
 8006080:	e7dc      	b.n	800603c <__ssputs_r+0x58>
 8006082:	462a      	mov	r2, r5
 8006084:	f000 faac 	bl	80065e0 <_realloc_r>
 8006088:	4606      	mov	r6, r0
 800608a:	2800      	cmp	r0, #0
 800608c:	d1e2      	bne.n	8006054 <__ssputs_r+0x70>
 800608e:	6921      	ldr	r1, [r4, #16]
 8006090:	4650      	mov	r0, sl
 8006092:	f7ff fe89 	bl	8005da8 <_free_r>
 8006096:	e7c8      	b.n	800602a <__ssputs_r+0x46>

08006098 <_svfiprintf_r>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	461d      	mov	r5, r3
 800609e:	898b      	ldrh	r3, [r1, #12]
 80060a0:	061f      	lsls	r7, r3, #24
 80060a2:	b09d      	sub	sp, #116	; 0x74
 80060a4:	4680      	mov	r8, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	4616      	mov	r6, r2
 80060aa:	d50f      	bpl.n	80060cc <_svfiprintf_r+0x34>
 80060ac:	690b      	ldr	r3, [r1, #16]
 80060ae:	b96b      	cbnz	r3, 80060cc <_svfiprintf_r+0x34>
 80060b0:	2140      	movs	r1, #64	; 0x40
 80060b2:	f7ff fec7 	bl	8005e44 <_malloc_r>
 80060b6:	6020      	str	r0, [r4, #0]
 80060b8:	6120      	str	r0, [r4, #16]
 80060ba:	b928      	cbnz	r0, 80060c8 <_svfiprintf_r+0x30>
 80060bc:	230c      	movs	r3, #12
 80060be:	f8c8 3000 	str.w	r3, [r8]
 80060c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060c6:	e0c8      	b.n	800625a <_svfiprintf_r+0x1c2>
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	6163      	str	r3, [r4, #20]
 80060cc:	2300      	movs	r3, #0
 80060ce:	9309      	str	r3, [sp, #36]	; 0x24
 80060d0:	2320      	movs	r3, #32
 80060d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060d6:	2330      	movs	r3, #48	; 0x30
 80060d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060dc:	9503      	str	r5, [sp, #12]
 80060de:	f04f 0b01 	mov.w	fp, #1
 80060e2:	4637      	mov	r7, r6
 80060e4:	463d      	mov	r5, r7
 80060e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060ea:	b10b      	cbz	r3, 80060f0 <_svfiprintf_r+0x58>
 80060ec:	2b25      	cmp	r3, #37	; 0x25
 80060ee:	d13e      	bne.n	800616e <_svfiprintf_r+0xd6>
 80060f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80060f4:	d00b      	beq.n	800610e <_svfiprintf_r+0x76>
 80060f6:	4653      	mov	r3, sl
 80060f8:	4632      	mov	r2, r6
 80060fa:	4621      	mov	r1, r4
 80060fc:	4640      	mov	r0, r8
 80060fe:	f7ff ff71 	bl	8005fe4 <__ssputs_r>
 8006102:	3001      	adds	r0, #1
 8006104:	f000 80a4 	beq.w	8006250 <_svfiprintf_r+0x1b8>
 8006108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800610a:	4453      	add	r3, sl
 800610c:	9309      	str	r3, [sp, #36]	; 0x24
 800610e:	783b      	ldrb	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 809d 	beq.w	8006250 <_svfiprintf_r+0x1b8>
 8006116:	2300      	movs	r3, #0
 8006118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800611c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	9307      	str	r3, [sp, #28]
 8006124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006128:	931a      	str	r3, [sp, #104]	; 0x68
 800612a:	462f      	mov	r7, r5
 800612c:	2205      	movs	r2, #5
 800612e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006132:	4850      	ldr	r0, [pc, #320]	; (8006274 <_svfiprintf_r+0x1dc>)
 8006134:	f7fa f84c 	bl	80001d0 <memchr>
 8006138:	9b04      	ldr	r3, [sp, #16]
 800613a:	b9d0      	cbnz	r0, 8006172 <_svfiprintf_r+0xda>
 800613c:	06d9      	lsls	r1, r3, #27
 800613e:	bf44      	itt	mi
 8006140:	2220      	movmi	r2, #32
 8006142:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006146:	071a      	lsls	r2, r3, #28
 8006148:	bf44      	itt	mi
 800614a:	222b      	movmi	r2, #43	; 0x2b
 800614c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006150:	782a      	ldrb	r2, [r5, #0]
 8006152:	2a2a      	cmp	r2, #42	; 0x2a
 8006154:	d015      	beq.n	8006182 <_svfiprintf_r+0xea>
 8006156:	9a07      	ldr	r2, [sp, #28]
 8006158:	462f      	mov	r7, r5
 800615a:	2000      	movs	r0, #0
 800615c:	250a      	movs	r5, #10
 800615e:	4639      	mov	r1, r7
 8006160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006164:	3b30      	subs	r3, #48	; 0x30
 8006166:	2b09      	cmp	r3, #9
 8006168:	d94d      	bls.n	8006206 <_svfiprintf_r+0x16e>
 800616a:	b1b8      	cbz	r0, 800619c <_svfiprintf_r+0x104>
 800616c:	e00f      	b.n	800618e <_svfiprintf_r+0xf6>
 800616e:	462f      	mov	r7, r5
 8006170:	e7b8      	b.n	80060e4 <_svfiprintf_r+0x4c>
 8006172:	4a40      	ldr	r2, [pc, #256]	; (8006274 <_svfiprintf_r+0x1dc>)
 8006174:	1a80      	subs	r0, r0, r2
 8006176:	fa0b f000 	lsl.w	r0, fp, r0
 800617a:	4318      	orrs	r0, r3
 800617c:	9004      	str	r0, [sp, #16]
 800617e:	463d      	mov	r5, r7
 8006180:	e7d3      	b.n	800612a <_svfiprintf_r+0x92>
 8006182:	9a03      	ldr	r2, [sp, #12]
 8006184:	1d11      	adds	r1, r2, #4
 8006186:	6812      	ldr	r2, [r2, #0]
 8006188:	9103      	str	r1, [sp, #12]
 800618a:	2a00      	cmp	r2, #0
 800618c:	db01      	blt.n	8006192 <_svfiprintf_r+0xfa>
 800618e:	9207      	str	r2, [sp, #28]
 8006190:	e004      	b.n	800619c <_svfiprintf_r+0x104>
 8006192:	4252      	negs	r2, r2
 8006194:	f043 0302 	orr.w	r3, r3, #2
 8006198:	9207      	str	r2, [sp, #28]
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	783b      	ldrb	r3, [r7, #0]
 800619e:	2b2e      	cmp	r3, #46	; 0x2e
 80061a0:	d10c      	bne.n	80061bc <_svfiprintf_r+0x124>
 80061a2:	787b      	ldrb	r3, [r7, #1]
 80061a4:	2b2a      	cmp	r3, #42	; 0x2a
 80061a6:	d133      	bne.n	8006210 <_svfiprintf_r+0x178>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	9203      	str	r2, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bfb8      	it	lt
 80061b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061b8:	3702      	adds	r7, #2
 80061ba:	9305      	str	r3, [sp, #20]
 80061bc:	4d2e      	ldr	r5, [pc, #184]	; (8006278 <_svfiprintf_r+0x1e0>)
 80061be:	7839      	ldrb	r1, [r7, #0]
 80061c0:	2203      	movs	r2, #3
 80061c2:	4628      	mov	r0, r5
 80061c4:	f7fa f804 	bl	80001d0 <memchr>
 80061c8:	b138      	cbz	r0, 80061da <_svfiprintf_r+0x142>
 80061ca:	2340      	movs	r3, #64	; 0x40
 80061cc:	1b40      	subs	r0, r0, r5
 80061ce:	fa03 f000 	lsl.w	r0, r3, r0
 80061d2:	9b04      	ldr	r3, [sp, #16]
 80061d4:	4303      	orrs	r3, r0
 80061d6:	3701      	adds	r7, #1
 80061d8:	9304      	str	r3, [sp, #16]
 80061da:	7839      	ldrb	r1, [r7, #0]
 80061dc:	4827      	ldr	r0, [pc, #156]	; (800627c <_svfiprintf_r+0x1e4>)
 80061de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e2:	2206      	movs	r2, #6
 80061e4:	1c7e      	adds	r6, r7, #1
 80061e6:	f7f9 fff3 	bl	80001d0 <memchr>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d038      	beq.n	8006260 <_svfiprintf_r+0x1c8>
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <_svfiprintf_r+0x1e8>)
 80061f0:	bb13      	cbnz	r3, 8006238 <_svfiprintf_r+0x1a0>
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	3307      	adds	r3, #7
 80061f6:	f023 0307 	bic.w	r3, r3, #7
 80061fa:	3308      	adds	r3, #8
 80061fc:	9303      	str	r3, [sp, #12]
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	444b      	add	r3, r9
 8006202:	9309      	str	r3, [sp, #36]	; 0x24
 8006204:	e76d      	b.n	80060e2 <_svfiprintf_r+0x4a>
 8006206:	fb05 3202 	mla	r2, r5, r2, r3
 800620a:	2001      	movs	r0, #1
 800620c:	460f      	mov	r7, r1
 800620e:	e7a6      	b.n	800615e <_svfiprintf_r+0xc6>
 8006210:	2300      	movs	r3, #0
 8006212:	3701      	adds	r7, #1
 8006214:	9305      	str	r3, [sp, #20]
 8006216:	4619      	mov	r1, r3
 8006218:	250a      	movs	r5, #10
 800621a:	4638      	mov	r0, r7
 800621c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006220:	3a30      	subs	r2, #48	; 0x30
 8006222:	2a09      	cmp	r2, #9
 8006224:	d903      	bls.n	800622e <_svfiprintf_r+0x196>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0c8      	beq.n	80061bc <_svfiprintf_r+0x124>
 800622a:	9105      	str	r1, [sp, #20]
 800622c:	e7c6      	b.n	80061bc <_svfiprintf_r+0x124>
 800622e:	fb05 2101 	mla	r1, r5, r1, r2
 8006232:	2301      	movs	r3, #1
 8006234:	4607      	mov	r7, r0
 8006236:	e7f0      	b.n	800621a <_svfiprintf_r+0x182>
 8006238:	ab03      	add	r3, sp, #12
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	4622      	mov	r2, r4
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <_svfiprintf_r+0x1ec>)
 8006240:	a904      	add	r1, sp, #16
 8006242:	4640      	mov	r0, r8
 8006244:	f3af 8000 	nop.w
 8006248:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800624c:	4681      	mov	r9, r0
 800624e:	d1d6      	bne.n	80061fe <_svfiprintf_r+0x166>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	065b      	lsls	r3, r3, #25
 8006254:	f53f af35 	bmi.w	80060c2 <_svfiprintf_r+0x2a>
 8006258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800625a:	b01d      	add	sp, #116	; 0x74
 800625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006260:	ab03      	add	r3, sp, #12
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	4622      	mov	r2, r4
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <_svfiprintf_r+0x1ec>)
 8006268:	a904      	add	r1, sp, #16
 800626a:	4640      	mov	r0, r8
 800626c:	f000 f882 	bl	8006374 <_printf_i>
 8006270:	e7ea      	b.n	8006248 <_svfiprintf_r+0x1b0>
 8006272:	bf00      	nop
 8006274:	08007ff4 	.word	0x08007ff4
 8006278:	08007ffa 	.word	0x08007ffa
 800627c:	08007ffe 	.word	0x08007ffe
 8006280:	00000000 	.word	0x00000000
 8006284:	08005fe5 	.word	0x08005fe5

08006288 <_printf_common>:
 8006288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	4691      	mov	r9, r2
 800628e:	461f      	mov	r7, r3
 8006290:	688a      	ldr	r2, [r1, #8]
 8006292:	690b      	ldr	r3, [r1, #16]
 8006294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006298:	4293      	cmp	r3, r2
 800629a:	bfb8      	it	lt
 800629c:	4613      	movlt	r3, r2
 800629e:	f8c9 3000 	str.w	r3, [r9]
 80062a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a6:	4606      	mov	r6, r0
 80062a8:	460c      	mov	r4, r1
 80062aa:	b112      	cbz	r2, 80062b2 <_printf_common+0x2a>
 80062ac:	3301      	adds	r3, #1
 80062ae:	f8c9 3000 	str.w	r3, [r9]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062bc:	3302      	addmi	r3, #2
 80062be:	f8c9 3000 	strmi.w	r3, [r9]
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	f015 0506 	ands.w	r5, r5, #6
 80062c8:	d107      	bne.n	80062da <_printf_common+0x52>
 80062ca:	f104 0a19 	add.w	sl, r4, #25
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	f8d9 2000 	ldr.w	r2, [r9]
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	42ab      	cmp	r3, r5
 80062d8:	dc28      	bgt.n	800632c <_printf_common+0xa4>
 80062da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	3300      	adds	r3, #0
 80062e2:	bf18      	it	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	0692      	lsls	r2, r2, #26
 80062e8:	d42d      	bmi.n	8006346 <_printf_common+0xbe>
 80062ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062ee:	4639      	mov	r1, r7
 80062f0:	4630      	mov	r0, r6
 80062f2:	47c0      	blx	r8
 80062f4:	3001      	adds	r0, #1
 80062f6:	d020      	beq.n	800633a <_printf_common+0xb2>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	68e5      	ldr	r5, [r4, #12]
 80062fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006300:	f003 0306 	and.w	r3, r3, #6
 8006304:	2b04      	cmp	r3, #4
 8006306:	bf08      	it	eq
 8006308:	1aad      	subeq	r5, r5, r2
 800630a:	68a3      	ldr	r3, [r4, #8]
 800630c:	6922      	ldr	r2, [r4, #16]
 800630e:	bf0c      	ite	eq
 8006310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006314:	2500      	movne	r5, #0
 8006316:	4293      	cmp	r3, r2
 8006318:	bfc4      	itt	gt
 800631a:	1a9b      	subgt	r3, r3, r2
 800631c:	18ed      	addgt	r5, r5, r3
 800631e:	f04f 0900 	mov.w	r9, #0
 8006322:	341a      	adds	r4, #26
 8006324:	454d      	cmp	r5, r9
 8006326:	d11a      	bne.n	800635e <_printf_common+0xd6>
 8006328:	2000      	movs	r0, #0
 800632a:	e008      	b.n	800633e <_printf_common+0xb6>
 800632c:	2301      	movs	r3, #1
 800632e:	4652      	mov	r2, sl
 8006330:	4639      	mov	r1, r7
 8006332:	4630      	mov	r0, r6
 8006334:	47c0      	blx	r8
 8006336:	3001      	adds	r0, #1
 8006338:	d103      	bne.n	8006342 <_printf_common+0xba>
 800633a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006342:	3501      	adds	r5, #1
 8006344:	e7c3      	b.n	80062ce <_printf_common+0x46>
 8006346:	18e1      	adds	r1, r4, r3
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	2030      	movs	r0, #48	; 0x30
 800634c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006350:	4422      	add	r2, r4
 8006352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800635a:	3302      	adds	r3, #2
 800635c:	e7c5      	b.n	80062ea <_printf_common+0x62>
 800635e:	2301      	movs	r3, #1
 8006360:	4622      	mov	r2, r4
 8006362:	4639      	mov	r1, r7
 8006364:	4630      	mov	r0, r6
 8006366:	47c0      	blx	r8
 8006368:	3001      	adds	r0, #1
 800636a:	d0e6      	beq.n	800633a <_printf_common+0xb2>
 800636c:	f109 0901 	add.w	r9, r9, #1
 8006370:	e7d8      	b.n	8006324 <_printf_common+0x9c>
	...

08006374 <_printf_i>:
 8006374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006378:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800637c:	460c      	mov	r4, r1
 800637e:	7e09      	ldrb	r1, [r1, #24]
 8006380:	b085      	sub	sp, #20
 8006382:	296e      	cmp	r1, #110	; 0x6e
 8006384:	4617      	mov	r7, r2
 8006386:	4606      	mov	r6, r0
 8006388:	4698      	mov	r8, r3
 800638a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800638c:	f000 80b3 	beq.w	80064f6 <_printf_i+0x182>
 8006390:	d822      	bhi.n	80063d8 <_printf_i+0x64>
 8006392:	2963      	cmp	r1, #99	; 0x63
 8006394:	d036      	beq.n	8006404 <_printf_i+0x90>
 8006396:	d80a      	bhi.n	80063ae <_printf_i+0x3a>
 8006398:	2900      	cmp	r1, #0
 800639a:	f000 80b9 	beq.w	8006510 <_printf_i+0x19c>
 800639e:	2958      	cmp	r1, #88	; 0x58
 80063a0:	f000 8083 	beq.w	80064aa <_printf_i+0x136>
 80063a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063ac:	e032      	b.n	8006414 <_printf_i+0xa0>
 80063ae:	2964      	cmp	r1, #100	; 0x64
 80063b0:	d001      	beq.n	80063b6 <_printf_i+0x42>
 80063b2:	2969      	cmp	r1, #105	; 0x69
 80063b4:	d1f6      	bne.n	80063a4 <_printf_i+0x30>
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	6813      	ldr	r3, [r2, #0]
 80063ba:	0605      	lsls	r5, r0, #24
 80063bc:	f103 0104 	add.w	r1, r3, #4
 80063c0:	d52a      	bpl.n	8006418 <_printf_i+0xa4>
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6011      	str	r1, [r2, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da03      	bge.n	80063d2 <_printf_i+0x5e>
 80063ca:	222d      	movs	r2, #45	; 0x2d
 80063cc:	425b      	negs	r3, r3
 80063ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063d2:	486f      	ldr	r0, [pc, #444]	; (8006590 <_printf_i+0x21c>)
 80063d4:	220a      	movs	r2, #10
 80063d6:	e039      	b.n	800644c <_printf_i+0xd8>
 80063d8:	2973      	cmp	r1, #115	; 0x73
 80063da:	f000 809d 	beq.w	8006518 <_printf_i+0x1a4>
 80063de:	d808      	bhi.n	80063f2 <_printf_i+0x7e>
 80063e0:	296f      	cmp	r1, #111	; 0x6f
 80063e2:	d020      	beq.n	8006426 <_printf_i+0xb2>
 80063e4:	2970      	cmp	r1, #112	; 0x70
 80063e6:	d1dd      	bne.n	80063a4 <_printf_i+0x30>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	f043 0320 	orr.w	r3, r3, #32
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	e003      	b.n	80063fa <_printf_i+0x86>
 80063f2:	2975      	cmp	r1, #117	; 0x75
 80063f4:	d017      	beq.n	8006426 <_printf_i+0xb2>
 80063f6:	2978      	cmp	r1, #120	; 0x78
 80063f8:	d1d4      	bne.n	80063a4 <_printf_i+0x30>
 80063fa:	2378      	movs	r3, #120	; 0x78
 80063fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006400:	4864      	ldr	r0, [pc, #400]	; (8006594 <_printf_i+0x220>)
 8006402:	e055      	b.n	80064b0 <_printf_i+0x13c>
 8006404:	6813      	ldr	r3, [r2, #0]
 8006406:	1d19      	adds	r1, r3, #4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6011      	str	r1, [r2, #0]
 800640c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006414:	2301      	movs	r3, #1
 8006416:	e08c      	b.n	8006532 <_printf_i+0x1be>
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6011      	str	r1, [r2, #0]
 800641c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006420:	bf18      	it	ne
 8006422:	b21b      	sxthne	r3, r3
 8006424:	e7cf      	b.n	80063c6 <_printf_i+0x52>
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	6825      	ldr	r5, [r4, #0]
 800642a:	1d18      	adds	r0, r3, #4
 800642c:	6010      	str	r0, [r2, #0]
 800642e:	0628      	lsls	r0, r5, #24
 8006430:	d501      	bpl.n	8006436 <_printf_i+0xc2>
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	e002      	b.n	800643c <_printf_i+0xc8>
 8006436:	0668      	lsls	r0, r5, #25
 8006438:	d5fb      	bpl.n	8006432 <_printf_i+0xbe>
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	4854      	ldr	r0, [pc, #336]	; (8006590 <_printf_i+0x21c>)
 800643e:	296f      	cmp	r1, #111	; 0x6f
 8006440:	bf14      	ite	ne
 8006442:	220a      	movne	r2, #10
 8006444:	2208      	moveq	r2, #8
 8006446:	2100      	movs	r1, #0
 8006448:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800644c:	6865      	ldr	r5, [r4, #4]
 800644e:	60a5      	str	r5, [r4, #8]
 8006450:	2d00      	cmp	r5, #0
 8006452:	f2c0 8095 	blt.w	8006580 <_printf_i+0x20c>
 8006456:	6821      	ldr	r1, [r4, #0]
 8006458:	f021 0104 	bic.w	r1, r1, #4
 800645c:	6021      	str	r1, [r4, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d13d      	bne.n	80064de <_printf_i+0x16a>
 8006462:	2d00      	cmp	r5, #0
 8006464:	f040 808e 	bne.w	8006584 <_printf_i+0x210>
 8006468:	4665      	mov	r5, ip
 800646a:	2a08      	cmp	r2, #8
 800646c:	d10b      	bne.n	8006486 <_printf_i+0x112>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	07db      	lsls	r3, r3, #31
 8006472:	d508      	bpl.n	8006486 <_printf_i+0x112>
 8006474:	6923      	ldr	r3, [r4, #16]
 8006476:	6862      	ldr	r2, [r4, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	bfde      	ittt	le
 800647c:	2330      	movle	r3, #48	; 0x30
 800647e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006482:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006486:	ebac 0305 	sub.w	r3, ip, r5
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	f8cd 8000 	str.w	r8, [sp]
 8006490:	463b      	mov	r3, r7
 8006492:	aa03      	add	r2, sp, #12
 8006494:	4621      	mov	r1, r4
 8006496:	4630      	mov	r0, r6
 8006498:	f7ff fef6 	bl	8006288 <_printf_common>
 800649c:	3001      	adds	r0, #1
 800649e:	d14d      	bne.n	800653c <_printf_i+0x1c8>
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064a4:	b005      	add	sp, #20
 80064a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064aa:	4839      	ldr	r0, [pc, #228]	; (8006590 <_printf_i+0x21c>)
 80064ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	6821      	ldr	r1, [r4, #0]
 80064b4:	1d1d      	adds	r5, r3, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6015      	str	r5, [r2, #0]
 80064ba:	060a      	lsls	r2, r1, #24
 80064bc:	d50b      	bpl.n	80064d6 <_printf_i+0x162>
 80064be:	07ca      	lsls	r2, r1, #31
 80064c0:	bf44      	itt	mi
 80064c2:	f041 0120 	orrmi.w	r1, r1, #32
 80064c6:	6021      	strmi	r1, [r4, #0]
 80064c8:	b91b      	cbnz	r3, 80064d2 <_printf_i+0x15e>
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	f022 0220 	bic.w	r2, r2, #32
 80064d0:	6022      	str	r2, [r4, #0]
 80064d2:	2210      	movs	r2, #16
 80064d4:	e7b7      	b.n	8006446 <_printf_i+0xd2>
 80064d6:	064d      	lsls	r5, r1, #25
 80064d8:	bf48      	it	mi
 80064da:	b29b      	uxthmi	r3, r3
 80064dc:	e7ef      	b.n	80064be <_printf_i+0x14a>
 80064de:	4665      	mov	r5, ip
 80064e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e4:	fb02 3311 	mls	r3, r2, r1, r3
 80064e8:	5cc3      	ldrb	r3, [r0, r3]
 80064ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064ee:	460b      	mov	r3, r1
 80064f0:	2900      	cmp	r1, #0
 80064f2:	d1f5      	bne.n	80064e0 <_printf_i+0x16c>
 80064f4:	e7b9      	b.n	800646a <_printf_i+0xf6>
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	6825      	ldr	r5, [r4, #0]
 80064fa:	6961      	ldr	r1, [r4, #20]
 80064fc:	1d18      	adds	r0, r3, #4
 80064fe:	6010      	str	r0, [r2, #0]
 8006500:	0628      	lsls	r0, r5, #24
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	d501      	bpl.n	800650a <_printf_i+0x196>
 8006506:	6019      	str	r1, [r3, #0]
 8006508:	e002      	b.n	8006510 <_printf_i+0x19c>
 800650a:	066a      	lsls	r2, r5, #25
 800650c:	d5fb      	bpl.n	8006506 <_printf_i+0x192>
 800650e:	8019      	strh	r1, [r3, #0]
 8006510:	2300      	movs	r3, #0
 8006512:	6123      	str	r3, [r4, #16]
 8006514:	4665      	mov	r5, ip
 8006516:	e7b9      	b.n	800648c <_printf_i+0x118>
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	1d19      	adds	r1, r3, #4
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	681d      	ldr	r5, [r3, #0]
 8006520:	6862      	ldr	r2, [r4, #4]
 8006522:	2100      	movs	r1, #0
 8006524:	4628      	mov	r0, r5
 8006526:	f7f9 fe53 	bl	80001d0 <memchr>
 800652a:	b108      	cbz	r0, 8006530 <_printf_i+0x1bc>
 800652c:	1b40      	subs	r0, r0, r5
 800652e:	6060      	str	r0, [r4, #4]
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	6123      	str	r3, [r4, #16]
 8006534:	2300      	movs	r3, #0
 8006536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653a:	e7a7      	b.n	800648c <_printf_i+0x118>
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	462a      	mov	r2, r5
 8006540:	4639      	mov	r1, r7
 8006542:	4630      	mov	r0, r6
 8006544:	47c0      	blx	r8
 8006546:	3001      	adds	r0, #1
 8006548:	d0aa      	beq.n	80064a0 <_printf_i+0x12c>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	079b      	lsls	r3, r3, #30
 800654e:	d413      	bmi.n	8006578 <_printf_i+0x204>
 8006550:	68e0      	ldr	r0, [r4, #12]
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	4298      	cmp	r0, r3
 8006556:	bfb8      	it	lt
 8006558:	4618      	movlt	r0, r3
 800655a:	e7a3      	b.n	80064a4 <_printf_i+0x130>
 800655c:	2301      	movs	r3, #1
 800655e:	464a      	mov	r2, r9
 8006560:	4639      	mov	r1, r7
 8006562:	4630      	mov	r0, r6
 8006564:	47c0      	blx	r8
 8006566:	3001      	adds	r0, #1
 8006568:	d09a      	beq.n	80064a0 <_printf_i+0x12c>
 800656a:	3501      	adds	r5, #1
 800656c:	68e3      	ldr	r3, [r4, #12]
 800656e:	9a03      	ldr	r2, [sp, #12]
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	42ab      	cmp	r3, r5
 8006574:	dcf2      	bgt.n	800655c <_printf_i+0x1e8>
 8006576:	e7eb      	b.n	8006550 <_printf_i+0x1dc>
 8006578:	2500      	movs	r5, #0
 800657a:	f104 0919 	add.w	r9, r4, #25
 800657e:	e7f5      	b.n	800656c <_printf_i+0x1f8>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1ac      	bne.n	80064de <_printf_i+0x16a>
 8006584:	7803      	ldrb	r3, [r0, #0]
 8006586:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800658a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800658e:	e76c      	b.n	800646a <_printf_i+0xf6>
 8006590:	08008005 	.word	0x08008005
 8006594:	08008016 	.word	0x08008016

08006598 <memcpy>:
 8006598:	b510      	push	{r4, lr}
 800659a:	1e43      	subs	r3, r0, #1
 800659c:	440a      	add	r2, r1
 800659e:	4291      	cmp	r1, r2
 80065a0:	d100      	bne.n	80065a4 <memcpy+0xc>
 80065a2:	bd10      	pop	{r4, pc}
 80065a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ac:	e7f7      	b.n	800659e <memcpy+0x6>

080065ae <memmove>:
 80065ae:	4288      	cmp	r0, r1
 80065b0:	b510      	push	{r4, lr}
 80065b2:	eb01 0302 	add.w	r3, r1, r2
 80065b6:	d807      	bhi.n	80065c8 <memmove+0x1a>
 80065b8:	1e42      	subs	r2, r0, #1
 80065ba:	4299      	cmp	r1, r3
 80065bc:	d00a      	beq.n	80065d4 <memmove+0x26>
 80065be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065c6:	e7f8      	b.n	80065ba <memmove+0xc>
 80065c8:	4283      	cmp	r3, r0
 80065ca:	d9f5      	bls.n	80065b8 <memmove+0xa>
 80065cc:	1881      	adds	r1, r0, r2
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	42d3      	cmn	r3, r2
 80065d2:	d100      	bne.n	80065d6 <memmove+0x28>
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065de:	e7f7      	b.n	80065d0 <memmove+0x22>

080065e0 <_realloc_r>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	4607      	mov	r7, r0
 80065e4:	4614      	mov	r4, r2
 80065e6:	460e      	mov	r6, r1
 80065e8:	b921      	cbnz	r1, 80065f4 <_realloc_r+0x14>
 80065ea:	4611      	mov	r1, r2
 80065ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065f0:	f7ff bc28 	b.w	8005e44 <_malloc_r>
 80065f4:	b922      	cbnz	r2, 8006600 <_realloc_r+0x20>
 80065f6:	f7ff fbd7 	bl	8005da8 <_free_r>
 80065fa:	4625      	mov	r5, r4
 80065fc:	4628      	mov	r0, r5
 80065fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006600:	f000 f814 	bl	800662c <_malloc_usable_size_r>
 8006604:	42a0      	cmp	r0, r4
 8006606:	d20f      	bcs.n	8006628 <_realloc_r+0x48>
 8006608:	4621      	mov	r1, r4
 800660a:	4638      	mov	r0, r7
 800660c:	f7ff fc1a 	bl	8005e44 <_malloc_r>
 8006610:	4605      	mov	r5, r0
 8006612:	2800      	cmp	r0, #0
 8006614:	d0f2      	beq.n	80065fc <_realloc_r+0x1c>
 8006616:	4631      	mov	r1, r6
 8006618:	4622      	mov	r2, r4
 800661a:	f7ff ffbd 	bl	8006598 <memcpy>
 800661e:	4631      	mov	r1, r6
 8006620:	4638      	mov	r0, r7
 8006622:	f7ff fbc1 	bl	8005da8 <_free_r>
 8006626:	e7e9      	b.n	80065fc <_realloc_r+0x1c>
 8006628:	4635      	mov	r5, r6
 800662a:	e7e7      	b.n	80065fc <_realloc_r+0x1c>

0800662c <_malloc_usable_size_r>:
 800662c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006630:	1f18      	subs	r0, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfbc      	itt	lt
 8006636:	580b      	ldrlt	r3, [r1, r0]
 8006638:	18c0      	addlt	r0, r0, r3
 800663a:	4770      	bx	lr

0800663c <_init>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr

08006648 <_fini>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	bf00      	nop
 800664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664e:	bc08      	pop	{r3}
 8006650:	469e      	mov	lr, r3
 8006652:	4770      	bx	lr
