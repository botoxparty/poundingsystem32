
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a4c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ed54  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017928  08017928  00033f4c  2**0
                  CONTENTS
  4 .ARM          00000008  08017928  08017928  00027928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017930  08017930  00033f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017930  08017930  00027930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017934  08017934  00027934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08017938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00003ecc  20000080  080179b8  00030080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000fc9c  20003f4c  0801b884  00033f4c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013be8  0801b884  00043be8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00033f4c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002667d  00000000  00000000  00033f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005866  00000000  00000000  0005a5f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000c132  00000000  00000000  0005fe5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000015d8  00000000  00000000  0006bf98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014d8  00000000  00000000  0006d570  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024ced  00000000  00000000  0006ea48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000178c1  00000000  00000000  00093735  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c3a1c  00000000  00000000  000aaff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0016ea12  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003fec  00000000  00000000  0016ea90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20003f4c 	.word	0x20003f4c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bbc 	.word	0x08008bbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20003f50 	.word	0x20003f50
 80001c4:	08008bbc 	.word	0x08008bbc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <PS_Application>:
 * @brief  Main routine for application, looped in main.c
 * @param  None
 * @retval none
 */
void PS_Application(void)
{
 8000e14:	b508      	push	{r3, lr}
	bpm_led_state = !bpm_led_state;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <PS_Application+0x30>)
 8000e18:	881a      	ldrh	r2, [r3, #0]
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	0952      	lsrs	r2, r2, #5
 8000e20:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(PS_BPM_LED_GPIO, PS_BPM_LED, bpm_led_state);
 8000e22:	2104      	movs	r1, #4
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <PS_Application+0x34>)
 8000e26:	f004 ffdc 	bl	8005de2 <HAL_GPIO_WritePin>
	int delay = (shift / 48000) * 10000;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <PS_Application+0x38>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4808      	ldr	r0, [pc, #32]	; (8000e50 <PS_Application+0x3c>)
 8000e30:	fba0 2303 	umull	r2, r3, r0, r3
 8000e34:	0a9b      	lsrs	r3, r3, #10
	HAL_Delay(delay);
 8000e36:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e3a:	fb00 f003 	mul.w	r0, r0, r3
 8000e3e:	f004 f9c7 	bl	80051d0 <HAL_Delay>
}
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	20003f68 	.word	0x20003f68
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	200139e0 	.word	0x200139e0
 8000e50:	057619f1 	.word	0x057619f1

08000e54 <MagicFX>:

/*-----------------------------------------------------------------------------*/
void MagicFX(uint8_t val) /* random effects parameters */
{
	if (val == MIDI_MAXi)
 8000e54:	287f      	cmp	r0, #127	; 0x7f
 8000e56:	d000      	beq.n	8000e5a <MagicFX+0x6>
 8000e58:	4770      	bx	lr
{
 8000e5a:	b508      	push	{r3, lr}
	{
		Delay_switch(MIDI_MAXi);
 8000e5c:	f003 fb2e 	bl	80044bc <Delay_switch>
		Delay_time_set(MIDIrandVal());
 8000e60:	f002 fef8 	bl	8003c54 <MIDIrandVal>
 8000e64:	f001 fc1a 	bl	800269c <Delay_time_set>
		DelayWet_set(MIDIrandVal());
 8000e68:	f002 fef4 	bl	8003c54 <MIDIrandVal>
 8000e6c:	f001 fc54 	bl	8002718 <DelayWet_set>
		DelayFeedback_set(MIDIrandVal());
 8000e70:	f002 fef0 	bl	8003c54 <MIDIrandVal>
 8000e74:	f001 fc40 	bl	80026f8 <DelayFeedback_set>

		Chorus_switch(MIDI_MAXi);
 8000e78:	207f      	movs	r0, #127	; 0x7f
 8000e7a:	f003 fb3b 	bl	80044f4 <Chorus_switch>
		ChorusRate_set(MIDIrandVal());
 8000e7e:	f002 fee9 	bl	8003c54 <MIDIrandVal>
 8000e82:	f001 f981 	bl	8002188 <ChorusRate_set>
		ChorusSecondRate_set(MIDIrandVal());
 8000e86:	f002 fee5 	bl	8003c54 <MIDIrandVal>
 8000e8a:	f001 f99d 	bl	80021c8 <ChorusSecondRate_set>
		ChorusDelay_set(MIDIrandVal());
 8000e8e:	f002 fee1 	bl	8003c54 <MIDIrandVal>
 8000e92:	f001 f9b9 	bl	8002208 <ChorusDelay_set>
		ChorusSweep_set(MIDIrandVal());
 8000e96:	f002 fedd 	bl	8003c54 <MIDIrandVal>
 8000e9a:	f001 f9eb 	bl	8002274 <ChorusSweep_set>
		ChorusFeedback_set(MIDIrandVal());
 8000e9e:	f002 fed9 	bl	8003c54 <MIDIrandVal>
 8000ea2:	f001 f9cb 	bl	800223c <ChorusFeedback_set>
		ChorusMode_switch(MIDIrandVal());
 8000ea6:	f002 fed5 	bl	8003c54 <MIDIrandVal>
 8000eaa:	f001 f9f5 	bl	8002298 <ChorusMode_switch>
		ChorusFDBsign_switch(MIDIrandVal());
 8000eae:	f002 fed1 	bl	8003c54 <MIDIrandVal>
 8000eb2:	f001 fa09 	bl	80022c8 <ChorusFDBsign_switch>

		Phaser_switch(MIDI_MAXi);
 8000eb6:	207f      	movs	r0, #127	; 0x7f
 8000eb8:	f003 fb28 	bl	800450c <Phaser_switch>
		Phaser_Rate_set(MIDIrandVal());
 8000ebc:	f002 feca 	bl	8003c54 <MIDIrandVal>
 8000ec0:	f002 fdde 	bl	8003a80 <Phaser_Rate_set>
		Phaser_Feedback_set(MIDIrandVal());
 8000ec4:	f002 fec6 	bl	8003c54 <MIDIrandVal>
 8000ec8:	f002 fdfc 	bl	8003ac4 <Phaser_Feedback_set>
		Phaser_Wet_set(MIDIrandVal());
 8000ecc:	f002 fec2 	bl	8003c54 <MIDIrandVal>
 8000ed0:	f002 fe0e 	bl	8003af0 <Phaser_Wet_set>
	}
}
 8000ed4:	bd08      	pop	{r3, pc}
	...

08000ed8 <MagicPatch>:
/*-----------------------------------------------------------------------------*/
void MagicPatch(uint8_t val) /* random sound parameters */
{
	if (val == MIDI_MAXi)
 8000ed8:	287f      	cmp	r0, #127	; 0x7f
 8000eda:	d000      	beq.n	8000ede <MagicPatch+0x6>
 8000edc:	4770      	bx	lr
{
 8000ede:	b508      	push	{r3, lr}
	{
		seq_tempo_set(MIDIrandVal());
 8000ee0:	f002 feb8 	bl	8003c54 <MIDIrandVal>
 8000ee4:	f003 f8ba 	bl	800405c <seq_tempo_set>
		seq_freqMax_set(MIDIrandVal());
 8000ee8:	f002 feb4 	bl	8003c54 <MIDIrandVal>
 8000eec:	f003 f98a 	bl	8004204 <seq_freqMax_set>
		seq_scale_set(MIDIrandVal());
 8000ef0:	f002 feb0 	bl	8003c54 <MIDIrandVal>
 8000ef4:	f003 f94a 	bl	800418c <seq_scale_set>
		seq_switchMovingSeq(MIDIrandVal());
 8000ef8:	f002 feac 	bl	8003c54 <MIDIrandVal>
 8000efc:	f003 f964 	bl	80041c8 <seq_switchMovingSeq>
		seq_switchMute(MIDIrandVal());
 8000f00:	f002 fea8 	bl	8003c54 <MIDIrandVal>
 8000f04:	f003 f96e 	bl	80041e4 <seq_switchMute>
		seq_gateTime_set(MIDIrandVal());
 8000f08:	f002 fea4 	bl	8003c54 <MIDIrandVal>
 8000f0c:	f003 f8ca 	bl	80040a4 <seq_gateTime_set>
		autoSound_set(rand() % 3);
 8000f10:	f006 fb8c 	bl	800762c <rand>
 8000f14:	4b51      	ldr	r3, [pc, #324]	; (800105c <MagicPatch+0x184>)
 8000f16:	fb83 2300 	smull	r2, r3, r3, r0
 8000f1a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8000f1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f22:	1ac3      	subs	r3, r0, r3
 8000f24:	b258      	sxtb	r0, r3
 8000f26:	f003 fa3d 	bl	80043a4 <autoSound_set>
		Sound_set(MIDIrandVal());
 8000f2a:	f002 fe93 	bl	8003c54 <MIDIrandVal>
 8000f2e:	f003 fb07 	bl	8004540 <Sound_set>
		uint8_t snd = soundNumber_get();
 8000f32:	f003 fa3d 	bl	80043b0 <soundNumber_get>

		if (snd == FM2)
 8000f36:	280e      	cmp	r0, #14
 8000f38:	d05d      	beq.n	8000ff6 <MagicPatch+0x11e>
			FM_OP3_freq_set(MIDIrandVal());
			FM_OP3_modInd_set(MIDIrandVal());
			FM_OP4_freq_set(MIDIrandVal());
			FM_OP4_modInd_set(MIDIrandVal());
		}
		else if (snd == DRIFTERS)
 8000f3a:	280d      	cmp	r0, #13
 8000f3c:	d07c      	beq.n	8001038 <MagicPatch+0x160>
			Drifter_minFreq_set(MIDIrandVal());
			Drifter_maxFreq_set(MIDIrandVal());
			Drifter_centralFreq_set(MIDIrandVal());
		}

		Filter1Freq_set(MIDIrandVal());
 8000f3e:	f002 fe89 	bl	8003c54 <MIDIrandVal>
 8000f42:	f002 ff0f 	bl	8003d64 <Filter1Freq_set>
		Filter1Res_set(MIDIrandVal());
 8000f46:	f002 fe85 	bl	8003c54 <MIDIrandVal>
 8000f4a:	f002 ff27 	bl	8003d9c <Filter1Res_set>
		Filter1Drive_set(MIDIrandVal());
 8000f4e:	f002 fe81 	bl	8003c54 <MIDIrandVal>
 8000f52:	f002 ff35 	bl	8003dc0 <Filter1Drive_set>
		Filter1Type_set(MIDIrandVal());
 8000f56:	f002 fe7d 	bl	8003c54 <MIDIrandVal>
 8000f5a:	f002 ff39 	bl	8003dd0 <Filter1Type_set>
		Filt1LFO_amp_set(MIDIrandVal());
 8000f5e:	f002 fe79 	bl	8003c54 <MIDIrandVal>
 8000f62:	f003 fa4b 	bl	80043fc <Filt1LFO_amp_set>
		Filt1LFO_freq_set(MIDIrandVal());
 8000f66:	f002 fe75 	bl	8003c54 <MIDIrandVal>
 8000f6a:	f003 fa57 	bl	800441c <Filt1LFO_freq_set>

		Filter2Freq_set(MIDIrandVal());
 8000f6e:	f002 fe71 	bl	8003c54 <MIDIrandVal>
 8000f72:	f002 ff41 	bl	8003df8 <Filter2Freq_set>
		Filter2Res_set(MIDIrandVal());
 8000f76:	f002 fe6d 	bl	8003c54 <MIDIrandVal>
 8000f7a:	f002 ff59 	bl	8003e30 <Filter2Res_set>
		Filter2Drive_set(MIDIrandVal());
 8000f7e:	f002 fe69 	bl	8003c54 <MIDIrandVal>
 8000f82:	f002 ff67 	bl	8003e54 <Filter2Drive_set>
		Filter2Type_set(MIDIrandVal());
 8000f86:	f002 fe65 	bl	8003c54 <MIDIrandVal>
 8000f8a:	f002 ff6b 	bl	8003e64 <Filter2Type_set>
		Filt2LFO_amp_set(MIDIrandVal());
 8000f8e:	f002 fe61 	bl	8003c54 <MIDIrandVal>
 8000f92:	f003 fa53 	bl	800443c <Filt2LFO_amp_set>
		Filt2LFO_freq_set(MIDIrandVal());
 8000f96:	f002 fe5d 	bl	8003c54 <MIDIrandVal>
 8000f9a:	f003 fa5f 	bl	800445c <Filt2LFO_freq_set>

		Filter_Random_switch(MIDIrandVal());
 8000f9e:	f002 fe59 	bl	8003c54 <MIDIrandVal>
 8000fa2:	f003 fa9b 	bl	80044dc <Filter_Random_switch>

		AttTime_set((uint8_t)lrintf(frand_a_b(0, MIDI_MAX / 10)));
 8000fa6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8001060 <MagicPatch+0x188>
 8000faa:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001064 <MagicPatch+0x18c>
 8000fae:	f002 fe35 	bl	8003c1c <frand_a_b>
 8000fb2:	f006 fc25 	bl	8007800 <lrintf>
 8000fb6:	b2c0      	uxtb	r0, r0
 8000fb8:	f000 f98a 	bl	80012d0 <AttTime_set>
		DecTime_set(MIDIrandVal());
 8000fbc:	f002 fe4a 	bl	8003c54 <MIDIrandVal>
 8000fc0:	f000 f99e 	bl	8001300 <DecTime_set>
		SustLevel_set(MIDIrandVal());
 8000fc4:	f002 fe46 	bl	8003c54 <MIDIrandVal>
 8000fc8:	f000 f9c4 	bl	8001354 <SustLevel_set>
		RelTime_set(MIDIrandVal());
 8000fcc:	f002 fe42 	bl	8003c54 <MIDIrandVal>
 8000fd0:	f000 f9d2 	bl	8001378 <RelTime_set>

		VibratoAmp_set(MIDIrandVal());
 8000fd4:	f002 fe3e 	bl	8003c54 <MIDIrandVal>
 8000fd8:	f003 fa50 	bl	800447c <VibratoAmp_set>
		VibratoFreq_set(MIDIrandVal());
 8000fdc:	f002 fe3a 	bl	8003c54 <MIDIrandVal>
 8000fe0:	f003 fa5c 	bl	800449c <VibratoFreq_set>

		AmpLFO_amp_set(MIDIrandVal());
 8000fe4:	f002 fe36 	bl	8003c54 <MIDIrandVal>
 8000fe8:	f003 f9e8 	bl	80043bc <AmpLFO_amp_set>
		AmpLFO_freq_set(MIDIrandVal());
 8000fec:	f002 fe32 	bl	8003c54 <MIDIrandVal>
 8000ff0:	f003 f9f4 	bl	80043dc <AmpLFO_freq_set>
	}
}
 8000ff4:	bd08      	pop	{r3, pc}
			FM_OP1_freq_set(MIDIrandVal());
 8000ff6:	f002 fe2d 	bl	8003c54 <MIDIrandVal>
 8000ffa:	f003 fac1 	bl	8004580 <FM_OP1_freq_set>
			FM_OP1_modInd_set(MIDIrandVal());
 8000ffe:	f002 fe29 	bl	8003c54 <MIDIrandVal>
 8001002:	f003 fac5 	bl	8004590 <FM_OP1_modInd_set>
			FM_OP2_freq_set(MIDIrandVal());
 8001006:	f002 fe25 	bl	8003c54 <MIDIrandVal>
 800100a:	f003 fac9 	bl	80045a0 <FM_OP2_freq_set>
			FM_OP2_modInd_set(MIDIrandVal());
 800100e:	f002 fe21 	bl	8003c54 <MIDIrandVal>
 8001012:	f003 fad7 	bl	80045c4 <FM_OP2_modInd_set>
			FM_OP3_freq_set(MIDIrandVal());
 8001016:	f002 fe1d 	bl	8003c54 <MIDIrandVal>
 800101a:	f003 fadb 	bl	80045d4 <FM_OP3_freq_set>
			FM_OP3_modInd_set(MIDIrandVal());
 800101e:	f002 fe19 	bl	8003c54 <MIDIrandVal>
 8001022:	f003 fae9 	bl	80045f8 <FM_OP3_modInd_set>
			FM_OP4_freq_set(MIDIrandVal());
 8001026:	f002 fe15 	bl	8003c54 <MIDIrandVal>
 800102a:	f003 faed 	bl	8004608 <FM_OP4_freq_set>
			FM_OP4_modInd_set(MIDIrandVal());
 800102e:	f002 fe11 	bl	8003c54 <MIDIrandVal>
 8001032:	f003 fafb 	bl	800462c <FM_OP4_modInd_set>
 8001036:	e782      	b.n	8000f3e <MagicPatch+0x66>
			Drifter_amp_set(MIDIrandVal());
 8001038:	f002 fe0c 	bl	8003c54 <MIDIrandVal>
 800103c:	f001 fbe0 	bl	8002800 <Drifter_amp_set>
			Drifter_minFreq_set(MIDIrandVal());
 8001040:	f002 fe08 	bl	8003c54 <MIDIrandVal>
 8001044:	f001 fbf2 	bl	800282c <Drifter_minFreq_set>
			Drifter_maxFreq_set(MIDIrandVal());
 8001048:	f002 fe04 	bl	8003c54 <MIDIrandVal>
 800104c:	f001 fc0c 	bl	8002868 <Drifter_maxFreq_set>
			Drifter_centralFreq_set(MIDIrandVal());
 8001050:	f002 fe00 	bl	8003c54 <MIDIrandVal>
 8001054:	f001 ff32 	bl	8002ebc <Drifter_centralFreq_set>
 8001058:	e771      	b.n	8000f3e <MagicPatch+0x66>
 800105a:	bf00      	nop
 800105c:	55555556 	.word	0x55555556
 8001060:	414b3333 	.word	0x414b3333
 8001064:	00000000 	.word	0x00000000

08001068 <HAL_I2S_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001068:	b508      	push	{r3, lr}
  if(hi2s->Instance == SPI2)
 800106a:	6802      	ldr	r2, [r0, #0]
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_I2S_TxCpltCallback+0x18>)
 800106e:	429a      	cmp	r2, r3
 8001070:	d000      	beq.n	8001074 <HAL_I2S_TxCpltCallback+0xc>
  {
    /* Call the user function which will manage directly transfer complete */
	  make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
  }
}
 8001072:	bd08      	pop	{r3, pc}
	  make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
 8001074:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <HAL_I2S_TxCpltCallback+0x1c>)
 800107a:	f003 fc3f 	bl	80048fc <make_sound>
}
 800107e:	e7f8      	b.n	8001072 <HAL_I2S_TxCpltCallback+0xa>
 8001080:	40003800 	.word	0x40003800
 8001084:	2001320c 	.word	0x2001320c

08001088 <HAL_I2S_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001088:	b508      	push	{r3, lr}
  if(hi2s->Instance == SPI2)
 800108a:	6802      	ldr	r2, [r0, #0]
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <HAL_I2S_TxHalfCpltCallback+0x18>)
 800108e:	429a      	cmp	r2, r3
 8001090:	d000      	beq.n	8001094 <HAL_I2S_TxHalfCpltCallback+0xc>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  	make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
  }
}
 8001092:	bd08      	pop	{r3, pc}
  	make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
 8001094:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 800109a:	f003 fc2f 	bl	80048fc <make_sound>
}
 800109e:	e7f8      	b.n	8001092 <HAL_I2S_TxHalfCpltCallback+0xa>
 80010a0:	40003800 	.word	0x40003800
 80010a4:	20012a3c 	.word	0x20012a3c

080010a8 <PS_Interface_Loop>:
//        velocity = 0;
//        triggered = 0;
//    }

    // HAL_GPIO_WritePin(PS_TRIG_LED_GPIO, PS_TRIG_LED, triggered);
}
 80010a8:	4770      	bx	lr
	...

080010ac <Trigger>:
 * @brief  Trigger the sound on
 * @param  None
 * @retval none
 */
void Trigger(void)
{
 80010ac:	b508      	push	{r3, lr}

         if (triggered)
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <Trigger+0x38>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b97b      	cbnz	r3, 80010d4 <Trigger+0x28>
             velocity = 0;
             ADSR_keyOff(&adsr);
         }
         else
         {
             velocity = 127;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <Trigger+0x3c>)
 80010b6:	227f      	movs	r2, #127	; 0x7f
 80010b8:	701a      	strb	r2, [r3, #0]
             ADSR_keyOn(&adsr);
 80010ba:	480c      	ldr	r0, [pc, #48]	; (80010ec <Trigger+0x40>)
 80010bc:	f000 f8c8 	bl	8001250 <ADSR_keyOn>
            //  MagicPatch(MIDI_MAXi);
         }

         triggered = !triggered;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <Trigger+0x38>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	f082 0201 	eor.w	r2, r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]

     HAL_GPIO_WritePin(PS_TRIG_LED_GPIO, PS_TRIG_LED, triggered);
 80010ca:	2110      	movs	r1, #16
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <Trigger+0x44>)
 80010ce:	f004 fe88 	bl	8005de2 <HAL_GPIO_WritePin>
}
 80010d2:	bd08      	pop	{r3, pc}
             velocity = 0;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <Trigger+0x3c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
             ADSR_keyOff(&adsr);
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <Trigger+0x40>)
 80010dc:	f000 f8c1 	bl	8001262 <ADSR_keyOff>
 80010e0:	e7ee      	b.n	80010c0 <Trigger+0x14>
 80010e2:	bf00      	nop
 80010e4:	20003f6a 	.word	0x20003f6a
 80010e8:	20012a3b 	.word	0x20012a3b
 80010ec:	20000080 	.word	0x20000080
 80010f0:	40020000 	.word	0x40020000

080010f4 <ButtonPressed_action>:

void ButtonPressed_action(void)
{ // User butter toggles sequencer
    Toggle_Hold(true);
}
 80010f4:	4770      	bx	lr

080010f6 <ButtonReleased_action>:

void ButtonReleased_action(void)
{ // User butter toggles sequencer
    Toggle_Hold(false);
}
 80010f6:	4770      	bx	lr

080010f8 <PS_StartPots>:
 * @brief  Starts reading the pots
 * @param  None
 * @retval none
 */
void PS_StartPots(void)
{
 80010f8:	b508      	push	{r3, lr}
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValArray, 4);
 80010fa:	2204      	movs	r2, #4
 80010fc:	4902      	ldr	r1, [pc, #8]	; (8001108 <PS_StartPots+0x10>)
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <PS_StartPots+0x14>)
 8001100:	f004 f940 	bl	8005384 <HAL_ADC_Start_DMA>
}
 8001104:	bd08      	pop	{r3, pc}
 8001106:	bf00      	nop
 8001108:	20012a30 	.word	0x20012a30
 800110c:	20013a38 	.word	0x20013a38

08001110 <PS_Interface_Init>:
{
 8001110:	b508      	push	{r3, lr}
    PS_StartPots();
 8001112:	f7ff fff1 	bl	80010f8 <PS_StartPots>
}
 8001116:	bd08      	pop	{r3, pc}

08001118 <map>:

float map(float val, float I_Min, float I_Max, float O_Min, float O_Max)
	{
		return O_Max - (((val-I_Min)*((O_Max-O_Min)/(I_Max-I_Min)))+O_Min);
 8001118:	ee30 0a60 	vsub.f32	s0, s0, s1
 800111c:	ee32 7a61 	vsub.f32	s14, s4, s3
 8001120:	ee31 1a60 	vsub.f32	s2, s2, s1
 8001124:	eec7 7a01 	vdiv.f32	s15, s14, s2
 8001128:	ee20 0a27 	vmul.f32	s0, s0, s15
 800112c:	ee30 0a21 	vadd.f32	s0, s0, s3
}
 8001130:	ee32 0a40 	vsub.f32	s0, s4, s0
 8001134:	4770      	bx	lr
	...

08001138 <HAL_ADC_ConvCpltCallback>:
 * @brief  ADC data receive callback.
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001138:	b510      	push	{r4, lr}
 800113a:	ed2d 8b04 	vpush	{d8-d9}
 800113e:	b082      	sub	sp, #8
	// set frequency
    currentFreq = map(adcValArray[1], 0, 4096, 20, 12600);
 8001140:	4c32      	ldr	r4, [pc, #200]	; (800120c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001142:	8863      	ldrh	r3, [r4, #2]
 8001144:	ee09 3a10 	vmov	s18, r3
 8001148:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 800114c:	eddf 8a30 	vldr	s17, [pc, #192]	; 8001210 <HAL_ADC_ConvCpltCallback+0xd8>
 8001150:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8001214 <HAL_ADC_ConvCpltCallback+0xdc>
 8001154:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8001218 <HAL_ADC_ConvCpltCallback+0xe0>
 8001158:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 800115c:	eeb0 1a68 	vmov.f32	s2, s17
 8001160:	eef0 0a48 	vmov.f32	s1, s16
 8001164:	eeb0 0a49 	vmov.f32	s0, s18
 8001168:	f7ff ffd6 	bl	8001118 <map>
 800116c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001172:	ee10 2a10 	vmov	r2, s0
 8001176:	801a      	strh	r2, [r3, #0]
    currentNote = map(adcValArray[1],  0, 4096, 0, 107);
 8001178:	eddf 9a29 	vldr	s19, [pc, #164]	; 8001220 <HAL_ADC_ConvCpltCallback+0xe8>
 800117c:	eeb0 2a69 	vmov.f32	s4, s19
 8001180:	eef0 1a48 	vmov.f32	s3, s16
 8001184:	eeb0 1a68 	vmov.f32	s2, s17
 8001188:	eef0 0a48 	vmov.f32	s1, s16
 800118c:	eeb0 0a49 	vmov.f32	s0, s18
 8001190:	f7ff ffc2 	bl	8001118 <map>
 8001194:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001198:	ee17 2a90 	vmov	r2, s15
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_ADC_ConvCpltCallback+0xec>)
 800119e:	701a      	strb	r2, [r3, #0]

    VibratoFreq_set(map(adcValArray[2],  0, 4096, 0, 107));
 80011a0:	88a3      	ldrh	r3, [r4, #4]
 80011a2:	ee00 3a10 	vmov	s0, r3
 80011a6:	eeb0 2a69 	vmov.f32	s4, s19
 80011aa:	eef0 1a48 	vmov.f32	s3, s16
 80011ae:	eeb0 1a68 	vmov.f32	s2, s17
 80011b2:	eef0 0a48 	vmov.f32	s1, s16
 80011b6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80011ba:	f7ff ffad 	bl	8001118 <map>
 80011be:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80011c2:	edcd 7a01 	vstr	s15, [sp, #4]
 80011c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80011ca:	f003 f967 	bl	800449c <VibratoFreq_set>
    VibratoAmp_set(MIDI_MAX);
 80011ce:	207f      	movs	r0, #127	; 0x7f
 80011d0:	f003 f954 	bl	800447c <VibratoAmp_set>
    // VibratoFreq_set(map(adcValArray[0],  0, 4096, 0, MIDI_MAX));
    // seq_tempo_set(map(adcValArray[3],  0, 4096, 0, MIDI_MAX));
    FM_OP1_modInd_set(map(adcValArray[2],  0, 4096, 0, 107));
 80011d4:	88a3      	ldrh	r3, [r4, #4]
 80011d6:	ee00 3a10 	vmov	s0, r3
 80011da:	eeb0 2a69 	vmov.f32	s4, s19
 80011de:	eef0 1a48 	vmov.f32	s3, s16
 80011e2:	eeb0 1a68 	vmov.f32	s2, s17
 80011e6:	eef0 0a48 	vmov.f32	s1, s16
 80011ea:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80011ee:	f7ff ff93 	bl	8001118 <map>
 80011f2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80011f6:	edcd 7a01 	vstr	s15, [sp, #4]
 80011fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80011fe:	f003 f9c7 	bl	8004590 <FM_OP1_modInd_set>
    // FM_OP1_freq_set(map(adcValArray[0],  0, 4096, 0, MIDI_MAX));
    // Delay_time_set(map(adcValArray[3],  0, 4096, 0, MIDI_MAX));
}
 8001202:	b002      	add	sp, #8
 8001204:	ecbd 8b04 	vpop	{d8-d9}
 8001208:	bd10      	pop	{r4, pc}
 800120a:	bf00      	nop
 800120c:	20012a30 	.word	0x20012a30
 8001210:	45800000 	.word	0x45800000
 8001214:	00000000 	.word	0x00000000
 8001218:	4644e000 	.word	0x4644e000
 800121c:	20012a38 	.word	0x20012a38
 8001220:	42d60000 	.word	0x42d60000
 8001224:	20012a3a 	.word	0x20012a3a

08001228 <ADSR_init>:

/*---------------------------------------------------------------------------*/

void ADSR_init(ADSR_t *env)
{
  env->target_ = 0.0;
 8001228:	2300      	movs	r3, #0
 800122a:	6183      	str	r3, [r0, #24]
  env->value_ = 0.0;
 800122c:	6103      	str	r3, [r0, #16]
  env->attackRate_ = 0.001;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <ADSR_init+0x20>)
 8001230:	6003      	str	r3, [r0, #0]
  env->decayRate_ = 0.001;
 8001232:	6043      	str	r3, [r0, #4]
  env->sustainLevel_ = 0.5;
 8001234:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001238:	6083      	str	r3, [r0, #8]
  env->releaseRate_ = 0.01;
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <ADSR_init+0x24>)
 800123c:	60c3      	str	r3, [r0, #12]
  env->state_ = ATTACK;
 800123e:	2300      	movs	r3, #0
 8001240:	6203      	str	r3, [r0, #32]
  env->cnt_ = 0;
 8001242:	6243      	str	r3, [r0, #36]	; 0x24
  //env->gateTime_ = 10000;
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	3a83126f 	.word	0x3a83126f
 800124c:	3c23d70a 	.word	0x3c23d70a

08001250 <ADSR_keyOn>:

void ADSR_keyOn(ADSR_t *env)
{
	env->cnt_ = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	6243      	str	r3, [r0, #36]	; 0x24
	env->target_ = 1.0f;
 8001254:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001258:	6182      	str	r2, [r0, #24]
	env->rate_ = 	env->attackRate_;
 800125a:	6802      	ldr	r2, [r0, #0]
 800125c:	61c2      	str	r2, [r0, #28]
	env->state_ = ATTACK;
 800125e:	6203      	str	r3, [r0, #32]
}
 8001260:	4770      	bx	lr

08001262 <ADSR_keyOff>:

void ADSR_keyOff(ADSR_t *env)
{
	env->cnt_ = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	6243      	str	r3, [r0, #36]	; 0x24
	env->target_ = 0.0;
 8001266:	2300      	movs	r3, #0
 8001268:	6183      	str	r3, [r0, #24]
	env->rate_ = 	env->releaseRate_;
 800126a:	68c3      	ldr	r3, [r0, #12]
 800126c:	61c3      	str	r3, [r0, #28]
	env->state_ = RELEASE;
 800126e:	2303      	movs	r3, #3
 8001270:	6203      	str	r3, [r0, #32]
}
 8001272:	4770      	bx	lr

08001274 <ADSR_setSustainLevel>:
	env->decayRate_ = rate;
}

void ADSR_setSustainLevel(ADSR_t *env, float level)
{
	env->sustainLevel_ = level;
 8001274:	ed80 0a02 	vstr	s0, [r0, #8]
}
 8001278:	4770      	bx	lr
	...

0800127c <ADSR_setAttackTime>:
	env->releaseRate_ = rate;
}

void ADSR_setAttackTime(ADSR_t *env, float time)
{
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 800127c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001294 <ADSR_setAttackTime+0x18>
 8001280:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001288:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800128c:	edc0 7a00 	vstr	s15, [r0]
}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	472c4400 	.word	0x472c4400

08001298 <ADSR_setDecayTime>:

void ADSR_setDecayTime(ADSR_t *env, float time)
{
	env->decayRate_ = 1.0 / ( time * SAMPLERATE );
 8001298:	eddf 7a05 	vldr	s15, [pc, #20]	; 80012b0 <ADSR_setDecayTime+0x18>
 800129c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80012a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80012a8:	edc0 7a01 	vstr	s15, [r0, #4]
}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	472c4400 	.word	0x472c4400

080012b4 <ADSR_setReleaseTime>:

void ADSR_setReleaseTime(ADSR_t *env, float time)
{
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 80012b4:	ed90 7a02 	vldr	s14, [r0, #8]
 80012b8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80012cc <ADSR_setReleaseTime+0x18>
 80012bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80012c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80012c4:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	472c4400 	.word	0x472c4400

080012d0 <AttTime_set>:
{
  return env->state_;
}

void AttTime_set(uint8_t val)
{
 80012d0:	b508      	push	{r3, lr}
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 80012d2:	ee07 0a90 	vmov	s15, r0
 80012d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012da:	eddf 7a06 	vldr	s15, [pc, #24]	; 80012f4 <AttTime_set+0x24>
 80012de:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80012e2:	eddf 7a05 	vldr	s15, [pc, #20]	; 80012f8 <AttTime_set+0x28>
 80012e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <AttTime_set+0x2c>)
 80012ec:	f7ff ffc6 	bl	800127c <ADSR_setAttackTime>
}
 80012f0:	bd08      	pop	{r3, pc}
 80012f2:	bf00      	nop
 80012f4:	42fe0000 	.word	0x42fe0000
 80012f8:	38d1b717 	.word	0x38d1b717
 80012fc:	20000080 	.word	0x20000080

08001300 <DecTime_set>:
void DecTime_set(uint8_t val)
{
 8001300:	b508      	push	{r3, lr}
	ADSR_setDecayTime(&adsr, .2*val/MIDI_MAX + 0.0001f);
 8001302:	f7ff f8b3 	bl	800046c <__aeabi_i2d>
 8001306:	a30d      	add	r3, pc, #52	; (adr r3, 800133c <DecTime_set+0x3c>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f918 	bl	8000540 <__aeabi_dmul>
 8001310:	a30c      	add	r3, pc, #48	; (adr r3, 8001344 <DecTime_set+0x44>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff fa3d 	bl	8000794 <__aeabi_ddiv>
 800131a:	a30c      	add	r3, pc, #48	; (adr r3, 800134c <DecTime_set+0x4c>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7fe ff58 	bl	80001d4 <__adddf3>
 8001324:	f7ff fba6 	bl	8000a74 <__aeabi_d2f>
 8001328:	ee00 0a10 	vmov	s0, r0
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <DecTime_set+0x38>)
 800132e:	f7ff ffb3 	bl	8001298 <ADSR_setDecayTime>
}
 8001332:	bd08      	pop	{r3, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	20000080 	.word	0x20000080
 800133c:	9999999a 	.word	0x9999999a
 8001340:	3fc99999 	.word	0x3fc99999
 8001344:	00000000 	.word	0x00000000
 8001348:	405fc000 	.word	0x405fc000
 800134c:	e0000000 	.word	0xe0000000
 8001350:	3f1a36e2 	.word	0x3f1a36e2

08001354 <SustLevel_set>:
void SustLevel_set(uint8_t val)
{
 8001354:	b508      	push	{r3, lr}
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 8001356:	ee07 0a90 	vmov	s15, r0
 800135a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800135e:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001370 <SustLevel_set+0x1c>
 8001362:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <SustLevel_set+0x20>)
 8001368:	f7ff ff84 	bl	8001274 <ADSR_setSustainLevel>
}
 800136c:	bd08      	pop	{r3, pc}
 800136e:	bf00      	nop
 8001370:	42fe0000 	.word	0x42fe0000
 8001374:	20000080 	.word	0x20000080

08001378 <RelTime_set>:
void RelTime_set(uint8_t val)
{
 8001378:	b508      	push	{r3, lr}
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 800137a:	ee07 0a90 	vmov	s15, r0
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013a4 <RelTime_set+0x2c>
 800138e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001392:	eddf 7a05 	vldr	s15, [pc, #20]	; 80013a8 <RelTime_set+0x30>
 8001396:	ee30 0a27 	vadd.f32	s0, s0, s15
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <RelTime_set+0x34>)
 800139c:	f7ff ff8a 	bl	80012b4 <ADSR_setReleaseTime>
}
 80013a0:	bd08      	pop	{r3, pc}
 80013a2:	bf00      	nop
 80013a4:	42fe0000 	.word	0x42fe0000
 80013a8:	38d1b717 	.word	0x38d1b717
 80013ac:	20000080 	.word	0x20000080

080013b0 <ADSR_computeSample>:
/*--------------------------------------------------------------------------------------*/
float ADSR_computeSample(ADSR_t *env)
{
	(env->cnt_)++;
 80013b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013b2:	3301      	adds	r3, #1
 80013b4:	6243      	str	r3, [r0, #36]	; 0x24

	switch (env->state_) {
 80013b6:	6a03      	ldr	r3, [r0, #32]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d01f      	beq.n	80013fc <ADSR_computeSample+0x4c>
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d033      	beq.n	8001428 <ADSR_computeSample+0x78>
 80013c0:	b123      	cbz	r3, 80013cc <ADSR_computeSample+0x1c>
    	env->value_ =  0.0f;
    	env->state_ = DONE;
    }
  }

  env->lastOutput_ = env->value_;
 80013c2:	ed90 0a04 	vldr	s0, [r0, #16]
 80013c6:	ed80 0a05 	vstr	s0, [r0, #20]
  return env->value_;
}
 80013ca:	4770      	bx	lr
	  env->value_ += env->rate_;
 80013cc:	edd0 7a07 	vldr	s15, [r0, #28]
 80013d0:	ed90 7a04 	vldr	s14, [r0, #16]
 80013d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d8:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ >= env->target_)
 80013dc:	ed90 7a06 	vldr	s14, [r0, #24]
 80013e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e8:	dbeb      	blt.n	80013c2 <ADSR_computeSample+0x12>
    	env->value_ = env->target_;
 80013ea:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->rate_ = env->decayRate_;
 80013ee:	6843      	ldr	r3, [r0, #4]
 80013f0:	61c3      	str	r3, [r0, #28]
    	env->target_ = env->sustainLevel_;
 80013f2:	6883      	ldr	r3, [r0, #8]
 80013f4:	6183      	str	r3, [r0, #24]
    	env->state_ = DECAY;
 80013f6:	2301      	movs	r3, #1
 80013f8:	6203      	str	r3, [r0, #32]
 80013fa:	e7e2      	b.n	80013c2 <ADSR_computeSample+0x12>
	  env->value_ -= env->decayRate_;
 80013fc:	ed90 7a01 	vldr	s14, [r0, #4]
 8001400:	edd0 7a04 	vldr	s15, [r0, #16]
 8001404:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001408:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ <= env->sustainLevel_)
 800140c:	ed90 7a02 	vldr	s14, [r0, #8]
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	d8d3      	bhi.n	80013c2 <ADSR_computeSample+0x12>
    	env->value_ = env->sustainLevel_;
 800141a:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->rate_ = 0.0f;
 800141e:	2300      	movs	r3, #0
 8001420:	61c3      	str	r3, [r0, #28]
    	env->state_ = SUSTAIN;
 8001422:	2302      	movs	r3, #2
 8001424:	6203      	str	r3, [r0, #32]
 8001426:	e7cc      	b.n	80013c2 <ADSR_computeSample+0x12>
	  env->value_ -= env->releaseRate_;
 8001428:	ed90 7a03 	vldr	s14, [r0, #12]
 800142c:	edd0 7a04 	vldr	s15, [r0, #16]
 8001430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001434:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ <= 0.0f)
 8001438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	d8bf      	bhi.n	80013c2 <ADSR_computeSample+0x12>
    	env->value_ =  0.0f;
 8001442:	2300      	movs	r3, #0
 8001444:	6103      	str	r3, [r0, #16]
    	env->state_ = DONE;
 8001446:	2304      	movs	r3, #4
 8001448:	6203      	str	r3, [r0, #32]
 800144a:	e7ba      	b.n	80013c2 <ADSR_computeSample+0x12>

0800144c <place_step_dd>:

/**======================================================================================================**/


void place_step_dd(float *buffer, int index, float phase, float w, float scale)
{
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	ed2d 8b02 	vpush	{d8}
 8001452:	4605      	mov	r5, r0
 8001454:	460c      	mov	r4, r1
 8001456:	eef0 8a41 	vmov.f32	s17, s2
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 800145a:	eddf 7a19 	vldr	s15, [pc, #100]	; 80014c0 <place_step_dd+0x74>
 800145e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001462:	ee80 8a20 	vdiv.f32	s16, s0, s1
	i = lrintf(r - 0.5f);
 8001466:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800146a:	ee38 0a40 	vsub.f32	s0, s16, s0
 800146e:	f006 f9c7 	bl	8007800 <lrintf>
	r -= (float)i;
 8001472:	ee07 0a90 	vmov	s15, r0
 8001476:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800147a:	ee78 6a66 	vsub.f32	s13, s16, s13
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 800147e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	 *    i += MINBLEP_PHASES;
	 *    index++;
	 *  }
	 */

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 8001482:	e016      	b.n	80014b2 <place_step_dd+0x66>
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 8001484:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <place_step_dd+0x78>)
 800148a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	ed93 7a01 	vldr	s14, [r3, #4]
 8001496:	ee27 7a26 	vmul.f32	s14, s14, s13
 800149a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800149e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80014a2:	ed92 7a00 	vldr	s14, [r2]
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	edc2 7a00 	vstr	s15, [r2]
		i += MINBLEP_PHASES;
 80014ae:	3040      	adds	r0, #64	; 0x40
		index++;
 80014b0:	3401      	adds	r4, #1
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 80014b2:	f5b0 5f90 	cmp.w	r0, #4608	; 0x1200
 80014b6:	dbe5      	blt.n	8001484 <place_step_dd+0x38>
	}
}
 80014b8:	ecbd 8b02 	vpop	{d8}
 80014bc:	bd38      	pop	{r3, r4, r5, pc}
 80014be:	bf00      	nop
 80014c0:	42800000 	.word	0x42800000
 80014c4:	0800d2d8 	.word	0x0800d2d8

080014c8 <place_slope_dd>:
//----------------------------------------------------------------------------------------------------------

void place_slope_dd(float *buffer, int index, float phase, float w, float slope_delta)
{
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	ed2d 8b04 	vpush	{d8-d9}
 80014ce:	4605      	mov	r5, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	eeb0 8a60 	vmov.f32	s16, s1
 80014d6:	eeb0 9a41 	vmov.f32	s18, s2
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 80014da:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800154c <place_slope_dd+0x84>
 80014de:	ee20 0a27 	vmul.f32	s0, s0, s15
 80014e2:	eec0 8a20 	vdiv.f32	s17, s0, s1
	i = lrintf(r - 0.5f);
 80014e6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80014ea:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80014ee:	f006 f987 	bl	8007800 <lrintf>
	r -= (float)i;
 80014f2:	ee07 0a90 	vmov	s15, r0
 80014f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014fa:	ee78 6ae6 	vsub.f32	s13, s17, s13
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80014fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f

	slope_delta *= w;
 8001502:	ee28 1a09 	vmul.f32	s2, s16, s18

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 8001506:	e01b      	b.n	8001540 <place_slope_dd+0x78>
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 8001508:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <place_slope_dd+0x88>)
 800150e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8001512:	edd1 7a00 	vldr	s15, [r1]
 8001516:	1c41      	adds	r1, r0, #1
 8001518:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800151c:	ed93 7a00 	vldr	s14, [r3]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152c:	ee67 7a81 	vmul.f32	s15, s15, s2
 8001530:	ed92 7a00 	vldr	s14, [r2]
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	edc2 7a00 	vstr	s15, [r2]
		i += MINBLEP_PHASES;
 800153c:	3040      	adds	r0, #64	; 0x40
		index++;
 800153e:	3401      	adds	r4, #1
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 8001540:	f5b0 5f8e 	cmp.w	r0, #4544	; 0x11c0
 8001544:	dbe0      	blt.n	8001508 <place_slope_dd+0x40>
	}
}
 8001546:	ecbd 8b04 	vpop	{d8-d9}
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	42800000 	.word	0x42800000
 8001550:	08008bd4 	.word	0x08008bd4

08001554 <VCO_blepsaw_Init>:
//----------------------------------------------------------------------------------------------------------

/* ==== hard-sync-capable sawtooth oscillator ==== */

void VCO_blepsaw_Init(VCO_blepsaw_t *vco)
{
 8001554:	b508      	push	{r3, lr}
	vco->_init = true;
 8001556:	2301      	movs	r3, #1
 8001558:	f880 3548 	strb.w	r3, [r0, #1352]	; 0x548
	vco->amp = 1.0f;
 800155c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001560:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <VCO_blepsaw_Init+0x2c>)
 8001564:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
 8001566:	2300      	movs	r3, #0
 8001568:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 800156a:	6203      	str	r3, [r0, #32]
	vco->_j = 0;
 800156c:	2100      	movs	r1, #0
 800156e:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001572:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001576:	3024      	adds	r0, #36	; 0x24
 8001578:	f006 f84f 	bl	800761a <memset>
}
 800157c:	bd08      	pop	{r3, pc}
 800157e:	bf00      	nop
 8001580:	43dc0000 	.word	0x43dc0000
 8001584:	00000000 	.word	0x00000000

08001588 <VCO_blepsaw_SampleCompute>:

//----------------------------------------------------------------------------------------------------------

float VCO_blepsaw_SampleCompute(VCO_blepsaw_t *vco)
{
 8001588:	b538      	push	{r3, r4, r5, lr}
 800158a:	ed2d 8b06 	vpush	{d8-d10}
 800158e:	4604      	mov	r4, r0
	int    j;
	float  freq, syncin;
	float  a, p, t, w, dw, z;
	syncin  = vco->syncin;
 8001590:	edd0 aa04 	vldr	s21, [r0, #16]
	freq = vco->freq;
 8001594:	ed90 8a03 	vldr	s16, [r0, #12]

	p = vco->_p;  /* phase [0, 1) */
 8001598:	edd0 8a06 	vldr	s17, [r0, #24]
	w = vco->_w;  /* phase increment */
 800159c:	edd0 9a07 	vldr	s19, [r0, #28]
	z = vco->_z;  /* low pass filter state */
 80015a0:	ed90 aa08 	vldr	s20, [r0, #32]
	j = vco->_j;  /* index into buffer _f */
 80015a4:	f8d0 5544 	ldr.w	r5, [r0, #1348]	; 0x544

	if (vco->_init) {
 80015a8:	f890 3548 	ldrb.w	r3, [r0, #1352]	; 0x548
 80015ac:	b1eb      	cbz	r3, 80015ea <VCO_blepsaw_SampleCompute+0x62>
		p = 0.5f;
		w = freq / SAMPLERATE;
 80015ae:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8001758 <VCO_blepsaw_SampleCompute+0x1d0>
 80015b2:	eec8 9a27 	vdiv.f32	s19, s16, s15
		if (w < 1e-5) w = 1e-5;
 80015b6:	ee19 0a90 	vmov	r0, s19
 80015ba:	f7fe ff69 	bl	8000490 <__aeabi_f2d>
 80015be:	a364      	add	r3, pc, #400	; (adr r3, 8001750 <VCO_blepsaw_SampleCompute+0x1c8>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff fa2e 	bl	8000a24 <__aeabi_dcmplt>
 80015c8:	b108      	cbz	r0, 80015ce <VCO_blepsaw_SampleCompute+0x46>
 80015ca:	eddf 9a64 	vldr	s19, [pc, #400]	; 800175c <VCO_blepsaw_SampleCompute+0x1d4>
		if (w > 0.5) w = 0.5;
 80015ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80015d2:	eef4 9ae7 	vcmpe.f32	s19, s15
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	dd01      	ble.n	80015e0 <VCO_blepsaw_SampleCompute+0x58>
 80015dc:	eef0 9a67 	vmov.f32	s19, s15
		/* if we valued alias-free startup over low startup time, we could do:
		 *   p -= w;
		 *   place_slope_dd(_f, j, 0.0f, w, -1.0f); */
		vco->_init = false;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		p = 0.5f;
 80015e6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	}

	//a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
 80015ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001758 <VCO_blepsaw_SampleCompute+0x1d0>
 80015ee:	ee88 9a27 	vdiv.f32	s18, s16, s15
	if (t < 1e-5) t = 1e-5;
 80015f2:	ee19 0a10 	vmov	r0, s18
 80015f6:	f7fe ff4b 	bl	8000490 <__aeabi_f2d>
 80015fa:	a355      	add	r3, pc, #340	; (adr r3, 8001750 <VCO_blepsaw_SampleCompute+0x1c8>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7ff fa10 	bl	8000a24 <__aeabi_dcmplt>
 8001604:	b108      	cbz	r0, 800160a <VCO_blepsaw_SampleCompute+0x82>
 8001606:	ed9f 9a55 	vldr	s18, [pc, #340]	; 800175c <VCO_blepsaw_SampleCompute+0x1d4>
	if (t > 0.5) t = 0.5;
 800160a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800160e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001616:	dd01      	ble.n	800161c <VCO_blepsaw_SampleCompute+0x94>
 8001618:	eeb0 9a67 	vmov.f32	s18, s15
	dw = (t - w); // n= 1
 800161c:	ee39 9a69 	vsub.f32	s18, s18, s19
	w += dw;
 8001620:	ee39 9a89 	vadd.f32	s18, s19, s18
	p += w;
 8001624:	ee78 8a89 	vadd.f32	s17, s17, s18

	if (syncin >= 1e-20f) {  /* sync to master */
 8001628:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8001760 <VCO_blepsaw_SampleCompute+0x1d8>
 800162c:	eef4 aae7 	vcmpe.f32	s21, s15
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	db58      	blt.n	80016e8 <VCO_blepsaw_SampleCompute+0x160>

		float eof_offset = (syncin - 1e-20f) * w;
 8001636:	ee7a 9ae7 	vsub.f32	s19, s21, s15
 800163a:	ee69 9a89 	vmul.f32	s19, s19, s18
		float p_at_reset = p - eof_offset;
 800163e:	ee78 8ae9 	vsub.f32	s17, s17, s19
		p = eof_offset;

		/* place any DD that may have occurred in subsample before reset */
		if (p_at_reset >= 1.0f) {
 8001642:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001646:	eef4 8ae7 	vcmpe.f32	s17, s15
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	da3d      	bge.n	80016cc <VCO_blepsaw_SampleCompute+0x144>
			p_at_reset -= 1.0f;
			place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
		}

		/* now place reset DD */
		place_step_dd(vco->_f, j, p, w, p_at_reset);
 8001650:	eeb0 1a68 	vmov.f32	s2, s17
 8001654:	eef0 0a49 	vmov.f32	s1, s18
 8001658:	eeb0 0a69 	vmov.f32	s0, s19
 800165c:	4629      	mov	r1, r5
 800165e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001662:	f7ff fef3 	bl	800144c <place_step_dd>

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001666:	edc4 aa05 	vstr	s21, [r4, #20]

	} else {

		vco->syncout = 0.0f;
	}
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 800166a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800166e:	ee77 6a69 	vsub.f32	s13, s14, s19
 8001672:	f105 030c 	add.w	r3, r5, #12
 8001676:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800167a:	edd3 7a01 	vldr	s15, [r3, #4]
 800167e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001682:	edc3 7a01 	vstr	s15, [r3, #4]

	z += a * (vco->_f[j] - z); // LP filtering
 8001686:	f105 0308 	add.w	r3, r5, #8
 800168a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800168e:	ed93 8a01 	vldr	s16, [r3, #4]
 8001692:	ee38 8a4a 	vsub.f32	s16, s16, s20
 8001696:	ee28 8a07 	vmul.f32	s16, s16, s14
 800169a:	ee38 8a0a 	vadd.f32	s16, s16, s20
	vco->out = vco->amp * z;
 800169e:	edd4 8a01 	vldr	s17, [r4, #4]
 80016a2:	ee68 8a88 	vmul.f32	s17, s17, s16
 80016a6:	edc4 8a00 	vstr	s17, [r4]

	if (++j == FILLEN)
 80016aa:	3501      	adds	r5, #1
 80016ac:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80016b0:	d03c      	beq.n	800172c <VCO_blepsaw_SampleCompute+0x1a4>
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
	}

	vco->_p = p;
 80016b2:	edc4 9a06 	vstr	s19, [r4, #24]
	vco->_w = w;
 80016b6:	ed84 9a07 	vstr	s18, [r4, #28]
	vco->_z = z;
 80016ba:	ed84 8a08 	vstr	s16, [r4, #32]
	vco->_j = j;
 80016be:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544

	return vco->out;
}
 80016c2:	eeb0 0a68 	vmov.f32	s0, s17
 80016c6:	ecbd 8b06 	vpop	{d8-d10}
 80016ca:	bd38      	pop	{r3, r4, r5, pc}
			p_at_reset -= 1.0f;
 80016cc:	eeb0 1a67 	vmov.f32	s2, s15
 80016d0:	ee78 8ae7 	vsub.f32	s17, s17, s15
			place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 80016d4:	eef0 0a49 	vmov.f32	s1, s18
 80016d8:	ee39 0aa8 	vadd.f32	s0, s19, s17
 80016dc:	4629      	mov	r1, r5
 80016de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80016e2:	f7ff feb3 	bl	800144c <place_step_dd>
 80016e6:	e7b3      	b.n	8001650 <VCO_blepsaw_SampleCompute+0xc8>
	} else if (p >= 1.0f) {  /* normal phase reset */
 80016e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80016ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	da04      	bge.n	8001700 <VCO_blepsaw_SampleCompute+0x178>
		vco->syncout = 0.0f;
 80016f6:	2300      	movs	r3, #0
 80016f8:	6163      	str	r3, [r4, #20]
	p += w;
 80016fa:	eef0 9a68 	vmov.f32	s19, s17
 80016fe:	e7b4      	b.n	800166a <VCO_blepsaw_SampleCompute+0xe2>
		p -= 1.0f;
 8001700:	eeb0 1a67 	vmov.f32	s2, s15
 8001704:	ee78 9ae7 	vsub.f32	s19, s17, s15
		vco->syncout = p / w + 1e-20f;
 8001708:	eec9 7a89 	vdiv.f32	s15, s19, s18
 800170c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001760 <VCO_blepsaw_SampleCompute+0x1d8>
 8001710:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001714:	edc4 7a05 	vstr	s15, [r4, #20]
		place_step_dd(vco->_f, j, p, w, 1.0f);
 8001718:	eef0 0a49 	vmov.f32	s1, s18
 800171c:	eeb0 0a69 	vmov.f32	s0, s19
 8001720:	4629      	mov	r1, r5
 8001722:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001726:	f7ff fe91 	bl	800144c <place_step_dd>
 800172a:	e79e      	b.n	800166a <VCO_blepsaw_SampleCompute+0xe2>
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 800172c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001730:	f204 4124 	addw	r1, r4, #1060	; 0x424
 8001734:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001738:	f005 ff64 	bl	8007604 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 800173c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001740:	2100      	movs	r1, #0
 8001742:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8001746:	f005 ff68 	bl	800761a <memset>
		j = 0;
 800174a:	2500      	movs	r5, #0
 800174c:	e7b1      	b.n	80016b2 <VCO_blepsaw_SampleCompute+0x12a>
 800174e:	bf00      	nop
 8001750:	88e368f1 	.word	0x88e368f1
 8001754:	3ee4f8b5 	.word	0x3ee4f8b5
 8001758:	472c4400 	.word	0x472c4400
 800175c:	3727c5ac 	.word	0x3727c5ac
 8001760:	1e3ce508 	.word	0x1e3ce508

08001764 <VCO_bleprect_Init>:

//----------------------------------------------------------------------------------------------------------
/* ==== variable-width, hard-sync-capable rectangular oscillator ==== */

void VCO_bleprect_Init(VCO_bleprect_t *vco)
{
 8001764:	b508      	push	{r3, lr}
	vco->_init = true;
 8001766:	2301      	movs	r3, #1
 8001768:	f880 3558 	strb.w	r3, [r0, #1368]	; 0x558
	vco->amp = 1.0f;
 800176c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001770:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <VCO_bleprect_Init+0x2c>)
 8001774:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
 8001776:	2300      	movs	r3, #0
 8001778:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 800177a:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 800177c:	62c3      	str	r3, [r0, #44]	; 0x2c
	vco->_j = 0;
 800177e:	2100      	movs	r1, #0
 8001780:	f8c0 1550 	str.w	r1, [r0, #1360]	; 0x550
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001784:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001788:	3030      	adds	r0, #48	; 0x30
 800178a:	f005 ff46 	bl	800761a <memset>
}
 800178e:	bd08      	pop	{r3, pc}
 8001790:	43dc0000 	.word	0x43dc0000
 8001794:	00000000 	.word	0x00000000

08001798 <VCO_bleprect_SampleCompute>:
////----------------------------------------------------------------------------------------------------------

float VCO_bleprect_SampleCompute(VCO_bleprect_t *vco)
{
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	ed2d 8b08 	vpush	{d8-d11}
 800179e:	4604      	mov	r4, r0
	int    j, k;
	float  freq, syncin;
	float  a, b, db, p, t, w, dw, x, z;

	syncin  = vco->syncin;
 80017a0:	ed90 8a05 	vldr	s16, [r0, #20]
	freq = vco->freq;
 80017a4:	edd0 ba03 	vldr	s23, [r0, #12]
	p = vco->_p;  /* phase [0, 1) */
 80017a8:	ed90 9a07 	vldr	s18, [r0, #28]
	w = vco->_w;  /* phase increment */
 80017ac:	edd0 8a08 	vldr	s17, [r0, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 80017b0:	ed90 ba09 	vldr	s22, [r0, #36]	; 0x24
	x = vco->_x;  /* temporary output variable */
 80017b4:	edd0 aa0a 	vldr	s21, [r0, #40]	; 0x28
	z = vco->_z;  /* low pass filter state */
 80017b8:	ed90 aa0b 	vldr	s20, [r0, #44]	; 0x2c
	j = vco->_j;  /* index into buffer _f */
 80017bc:	f8d0 5550 	ldr.w	r5, [r0, #1360]	; 0x550
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80017c0:	f8d0 6554 	ldr.w	r6, [r0, #1364]	; 0x554
	//
	if (vco->_init) {
 80017c4:	f890 3558 	ldrb.w	r3, [r0, #1368]	; 0x558
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d040      	beq.n	800184e <VCO_bleprect_SampleCompute+0xb6>
		p = 0.0f;

		w = freq / SAMPLERATE;
 80017cc:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8001b60 <VCO_bleprect_SampleCompute+0x3c8>
 80017d0:	eecb 8aa7 	vdiv.f32	s17, s23, s15
		if (w < 1e-5) w = 1e-5;
 80017d4:	ee18 0a90 	vmov	r0, s17
 80017d8:	f7fe fe5a 	bl	8000490 <__aeabi_f2d>
 80017dc:	a3de      	add	r3, pc, #888	; (adr r3, 8001b58 <VCO_bleprect_SampleCompute+0x3c0>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7ff f91f 	bl	8000a24 <__aeabi_dcmplt>
 80017e6:	b108      	cbz	r0, 80017ec <VCO_bleprect_SampleCompute+0x54>
 80017e8:	eddf 8ade 	vldr	s17, [pc, #888]	; 8001b64 <VCO_bleprect_SampleCompute+0x3cc>
		if (w > 0.5) w = 0.5;
 80017ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80017f0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	dd01      	ble.n	80017fe <VCO_bleprect_SampleCompute+0x66>
 80017fa:	eef0 8a67 	vmov.f32	s17, s15
		b = 0.5 * (1.0 + vco->waveform );
 80017fe:	6920      	ldr	r0, [r4, #16]
 8001800:	f7fe fe46 	bl	8000490 <__aeabi_f2d>
 8001804:	2200      	movs	r2, #0
 8001806:	4bd8      	ldr	r3, [pc, #864]	; (8001b68 <VCO_bleprect_SampleCompute+0x3d0>)
 8001808:	f7fe fce4 	bl	80001d4 <__adddf3>
 800180c:	2200      	movs	r2, #0
 800180e:	4bd7      	ldr	r3, [pc, #860]	; (8001b6c <VCO_bleprect_SampleCompute+0x3d4>)
 8001810:	f7fe fe96 	bl	8000540 <__aeabi_dmul>
 8001814:	f7ff f92e 	bl	8000a74 <__aeabi_d2f>
 8001818:	ee07 0a10 	vmov	s14, r0
		if (b < w) b = w;
 800181c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	dd01      	ble.n	800182a <VCO_bleprect_SampleCompute+0x92>
 8001826:	eeb0 7a68 	vmov.f32	s14, s17
		if (b > 1.0f - w) b = 1.0f - w;
 800182a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800182e:	ee3b ba68 	vsub.f32	s22, s22, s17
 8001832:	eeb4 bac7 	vcmpe.f32	s22, s14
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	d401      	bmi.n	8001840 <VCO_bleprect_SampleCompute+0xa8>
 800183c:	eeb0 ba47 	vmov.f32	s22, s14
		x = 0.5f;
		/* if we valued alias-free startup over low startup time, we could do:
		 *   p -= w;
		 *   place_step_dd(_f, j, 0.0f, w, 0.5f); */
		k = 0;
		vco->_init = false;
 8001840:	2600      	movs	r6, #0
 8001842:	f884 6558 	strb.w	r6, [r4, #1368]	; 0x558
		x = 0.5f;
 8001846:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		p = 0.0f;
 800184a:	ed9f 9ac9 	vldr	s18, [pc, #804]	; 8001b70 <VCO_bleprect_SampleCompute+0x3d8>
	}
	//
	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
 800184e:	eddf 7ac4 	vldr	s15, [pc, #784]	; 8001b60 <VCO_bleprect_SampleCompute+0x3c8>
 8001852:	eecb 9aa7 	vdiv.f32	s19, s23, s15
	if (t < 1e-5) t = 1e-5;
 8001856:	ee19 0a90 	vmov	r0, s19
 800185a:	f7fe fe19 	bl	8000490 <__aeabi_f2d>
 800185e:	a3be      	add	r3, pc, #760	; (adr r3, 8001b58 <VCO_bleprect_SampleCompute+0x3c0>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7ff f8de 	bl	8000a24 <__aeabi_dcmplt>
 8001868:	b108      	cbz	r0, 800186e <VCO_bleprect_SampleCompute+0xd6>
 800186a:	eddf 9abe 	vldr	s19, [pc, #760]	; 8001b64 <VCO_bleprect_SampleCompute+0x3cc>
	if (t > 0.5) t = 0.5;
 800186e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001872:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	dd01      	ble.n	8001880 <VCO_bleprect_SampleCompute+0xe8>
 800187c:	eef0 9a67 	vmov.f32	s19, s15
	dw = (t - w) ;
 8001880:	ee79 9ae8 	vsub.f32	s19, s19, s17
	t = 0.5 * (1.0 + vco->waveform );
 8001884:	6920      	ldr	r0, [r4, #16]
 8001886:	f7fe fe03 	bl	8000490 <__aeabi_f2d>
 800188a:	2200      	movs	r2, #0
 800188c:	4bb6      	ldr	r3, [pc, #728]	; (8001b68 <VCO_bleprect_SampleCompute+0x3d0>)
 800188e:	f7fe fca1 	bl	80001d4 <__adddf3>
 8001892:	2200      	movs	r2, #0
 8001894:	4bb5      	ldr	r3, [pc, #724]	; (8001b6c <VCO_bleprect_SampleCompute+0x3d4>)
 8001896:	f7fe fe53 	bl	8000540 <__aeabi_dmul>
 800189a:	f7ff f8eb 	bl	8000a74 <__aeabi_d2f>
 800189e:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 80018a2:	eef4 8ac7 	vcmpe.f32	s17, s14
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	dd01      	ble.n	80018b0 <VCO_bleprect_SampleCompute+0x118>
 80018ac:	eeb0 7a68 	vmov.f32	s14, s17
	if (t > 1.0f - w) t = 1.0f - w;
 80018b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80018b4:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80018b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d401      	bmi.n	80018c6 <VCO_bleprect_SampleCompute+0x12e>
 80018c2:	eef0 7a47 	vmov.f32	s15, s14
	db = (t - b) ;
 80018c6:	ee77 7acb 	vsub.f32	s15, s15, s22

	w += dw;
 80018ca:	ee78 8aa9 	vadd.f32	s17, s17, s19
	b += db;
 80018ce:	ee3b ba27 	vadd.f32	s22, s22, s15
	p += w;
 80018d2:	ee39 9a28 	vadd.f32	s18, s18, s17

	if (syncin >= 1e-20f) {  /* sync to master */
 80018d6:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8001b74 <VCO_bleprect_SampleCompute+0x3dc>
 80018da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	f2c0 80c0 	blt.w	8001a66 <VCO_bleprect_SampleCompute+0x2ce>
		//
		float eof_offset = (syncin - 1e-20f) * w;
 80018e6:	ee78 9a67 	vsub.f32	s19, s16, s15
 80018ea:	ee69 9aa8 	vmul.f32	s19, s19, s17
		float p_at_reset = p - eof_offset;
 80018ee:	ee39 9a69 	vsub.f32	s18, s18, s19
		p = eof_offset;

		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 80018f2:	2e00      	cmp	r6, #0
 80018f4:	d17b      	bne.n	80019ee <VCO_bleprect_SampleCompute+0x256>
			if (p_at_reset >= b) {
 80018f6:	eeb4 bac9 	vcmpe.f32	s22, s18
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	d955      	bls.n	80019ac <VCO_bleprect_SampleCompute+0x214>
 8001900:	4633      	mov	r3, r6
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
				k = 1;
				x = -0.5f;
			}
			if (p_at_reset >= 1.0f) {
 8001902:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001906:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	da5e      	bge.n	80019ce <VCO_bleprect_SampleCompute+0x236>
 8001910:	461e      	mov	r6, r3
				x = -0.5f;
			}
		}

		/* now place reset DD */
		if (k) {
 8001912:	b16e      	cbz	r6, 8001930 <VCO_bleprect_SampleCompute+0x198>
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001914:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001918:	eef0 0a68 	vmov.f32	s1, s17
 800191c:	eeb0 0a69 	vmov.f32	s0, s19
 8001920:	4629      	mov	r1, r5
 8001922:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001926:	f7ff fd91 	bl	800144c <place_step_dd>
			k = 0;
			x = 0.5f;
 800192a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			k = 0;
 800192e:	2600      	movs	r6, #0
		}
		if (p >= b) {
 8001930:	eeb4 bae9 	vcmpe.f32	s22, s19
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	f240 8086 	bls.w	8001a48 <VCO_bleprect_SampleCompute+0x2b0>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
			k = 1;
			x = -0.5f;
		}

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 800193c:	ed84 8a06 	vstr	s16, [r4, #24]
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
			k = 1;
			x = -0.5f;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001940:	f105 0310 	add.w	r3, r5, #16
 8001944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8001950:	edc3 7a00 	vstr	s15, [r3]

	z += a * (vco->_f[j] - z);
 8001954:	f105 030c 	add.w	r3, r5, #12
 8001958:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800195c:	ed93 8a00 	vldr	s16, [r3]
 8001960:	ee38 8a4a 	vsub.f32	s16, s16, s20
 8001964:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001968:	ee28 8a27 	vmul.f32	s16, s16, s15
 800196c:	ee38 8a0a 	vadd.f32	s16, s16, s20
	vco->out = vco->amp * z;
 8001970:	ed94 9a01 	vldr	s18, [r4, #4]
 8001974:	ee29 9a08 	vmul.f32	s18, s18, s16
 8001978:	ed84 9a00 	vstr	s18, [r4]

	if (++j == FILLEN)
 800197c:	3501      	adds	r5, #1
 800197e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001982:	f000 80f9 	beq.w	8001b78 <VCO_bleprect_SampleCompute+0x3e0>
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
	}

	vco->_p = p;
 8001986:	edc4 9a07 	vstr	s19, [r4, #28]
	vco->_w = w;
 800198a:	edc4 8a08 	vstr	s17, [r4, #32]
	vco->_b = b;
 800198e:	ed84 ba09 	vstr	s22, [r4, #36]	; 0x24
	vco->_x = x;
 8001992:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
	vco->_z = z;
 8001996:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
	vco->_j = j;
 800199a:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
	vco->_k = k;
 800199e:	f8c4 6554 	str.w	r6, [r4, #1364]	; 0x554

	return vco->out;

}
 80019a2:	eeb0 0a49 	vmov.f32	s0, s18
 80019a6:	ecbd 8b08 	vpop	{d8-d11}
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 80019ac:	ee39 0a4b 	vsub.f32	s0, s18, s22
 80019b0:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80019b4:	eef0 0a68 	vmov.f32	s1, s17
 80019b8:	ee30 0a29 	vadd.f32	s0, s0, s19
 80019bc:	4629      	mov	r1, r5
 80019be:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80019c2:	f7ff fd43 	bl	800144c <place_step_dd>
				x = -0.5f;
 80019c6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e799      	b.n	8001902 <VCO_bleprect_SampleCompute+0x16a>
				p_at_reset -= 1.0f;
 80019ce:	eeb0 1a67 	vmov.f32	s2, s15
 80019d2:	ee39 9a67 	vsub.f32	s18, s18, s15
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 80019d6:	eef0 0a68 	vmov.f32	s1, s17
 80019da:	ee39 0a89 	vadd.f32	s0, s19, s18
 80019de:	4629      	mov	r1, r5
 80019e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80019e4:	f7ff fd32 	bl	800144c <place_step_dd>
				x = 0.5f;
 80019e8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80019ec:	e7a0      	b.n	8001930 <VCO_bleprect_SampleCompute+0x198>
			if (p_at_reset >= 1.0f) {
 80019ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80019f2:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	da14      	bge.n	8001a26 <VCO_bleprect_SampleCompute+0x28e>
			if (!k && p_at_reset >= b) {
 80019fc:	2e00      	cmp	r6, #0
 80019fe:	d188      	bne.n	8001912 <VCO_bleprect_SampleCompute+0x17a>
 8001a00:	eeb4 9acb 	vcmpe.f32	s18, s22
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	db83      	blt.n	8001912 <VCO_bleprect_SampleCompute+0x17a>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 8001a0a:	ee39 9a4b 	vsub.f32	s18, s18, s22
 8001a0e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001a12:	eef0 0a68 	vmov.f32	s1, s17
 8001a16:	ee39 0a29 	vadd.f32	s0, s18, s19
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001a20:	f7ff fd14 	bl	800144c <place_step_dd>
 8001a24:	e776      	b.n	8001914 <VCO_bleprect_SampleCompute+0x17c>
				p_at_reset -= 1.0f;
 8001a26:	eeb0 1a67 	vmov.f32	s2, s15
 8001a2a:	ee39 9a67 	vsub.f32	s18, s18, s15
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001a2e:	eef0 0a68 	vmov.f32	s1, s17
 8001a32:	ee39 0a89 	vadd.f32	s0, s19, s18
 8001a36:	4629      	mov	r1, r5
 8001a38:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001a3c:	f7ff fd06 	bl	800144c <place_step_dd>
				x = 0.5f;
 8001a40:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
				k = 0;
 8001a44:	2600      	movs	r6, #0
 8001a46:	e7d9      	b.n	80019fc <VCO_bleprect_SampleCompute+0x264>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001a48:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001a4c:	eef0 0a68 	vmov.f32	s1, s17
 8001a50:	ee39 0acb 	vsub.f32	s0, s19, s22
 8001a54:	4629      	mov	r1, r5
 8001a56:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001a5a:	f7ff fcf7 	bl	800144c <place_step_dd>
			x = -0.5f;
 8001a5e:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
			k = 1;
 8001a62:	2601      	movs	r6, #1
 8001a64:	e76a      	b.n	800193c <VCO_bleprect_SampleCompute+0x1a4>
	} else if (!k) {  /* normal operation, signal currently high */
 8001a66:	bbce      	cbnz	r6, 8001adc <VCO_bleprect_SampleCompute+0x344>
		if (p >= b) {
 8001a68:	eeb4 bac9 	vcmpe.f32	s22, s18
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	d90d      	bls.n	8001a8e <VCO_bleprect_SampleCompute+0x2f6>
 8001a72:	4633      	mov	r3, r6
		if (p >= 1.0f) {
 8001a74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001a78:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	da14      	bge.n	8001aac <VCO_bleprect_SampleCompute+0x314>
			vco->syncout = 0.0f;
 8001a82:	2200      	movs	r2, #0
 8001a84:	61a2      	str	r2, [r4, #24]
	p += w;
 8001a86:	eef0 9a49 	vmov.f32	s19, s18
			vco->syncout = 0.0f;
 8001a8a:	461e      	mov	r6, r3
 8001a8c:	e758      	b.n	8001940 <VCO_bleprect_SampleCompute+0x1a8>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001a8e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001a92:	eef0 0a68 	vmov.f32	s1, s17
 8001a96:	ee39 0a4b 	vsub.f32	s0, s18, s22
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001aa0:	f7ff fcd4 	bl	800144c <place_step_dd>
			x = -0.5f;
 8001aa4:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
			k = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e7e3      	b.n	8001a74 <VCO_bleprect_SampleCompute+0x2dc>
			p -= 1.0f;
 8001aac:	eeb0 1a67 	vmov.f32	s2, s15
 8001ab0:	ee79 9a67 	vsub.f32	s19, s18, s15
			vco->syncout = p / w + 1e-20f;
 8001ab4:	eec9 7aa8 	vdiv.f32	s15, s19, s17
 8001ab8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001b74 <VCO_bleprect_SampleCompute+0x3dc>
 8001abc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ac0:	edc4 7a06 	vstr	s15, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001ac4:	eef0 0a68 	vmov.f32	s1, s17
 8001ac8:	eeb0 0a69 	vmov.f32	s0, s19
 8001acc:	4629      	mov	r1, r5
 8001ace:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001ad2:	f7ff fcbb 	bl	800144c <place_step_dd>
			x = 0.5f;
 8001ad6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8001ada:	e731      	b.n	8001940 <VCO_bleprect_SampleCompute+0x1a8>
		if (p >= 1.0f) {
 8001adc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ae0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	da1b      	bge.n	8001b22 <VCO_bleprect_SampleCompute+0x38a>
			vco->syncout = 0.0f;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61a3      	str	r3, [r4, #24]
	p += w;
 8001aee:	eef0 9a49 	vmov.f32	s19, s18
		if (!k && p >= b) {
 8001af2:	2e00      	cmp	r6, #0
 8001af4:	f47f af24 	bne.w	8001940 <VCO_bleprect_SampleCompute+0x1a8>
 8001af8:	eef4 9acb 	vcmpe.f32	s19, s22
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	f6ff af1e 	blt.w	8001940 <VCO_bleprect_SampleCompute+0x1a8>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001b04:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001b08:	eef0 0a68 	vmov.f32	s1, s17
 8001b0c:	ee39 0acb 	vsub.f32	s0, s19, s22
 8001b10:	4629      	mov	r1, r5
 8001b12:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001b16:	f7ff fc99 	bl	800144c <place_step_dd>
			x = -0.5f;
 8001b1a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
			k = 1;
 8001b1e:	2601      	movs	r6, #1
 8001b20:	e70e      	b.n	8001940 <VCO_bleprect_SampleCompute+0x1a8>
			p -= 1.0f;
 8001b22:	eeb0 1a67 	vmov.f32	s2, s15
 8001b26:	ee79 9a67 	vsub.f32	s19, s18, s15
			vco->syncout = p / w + 1e-20f;
 8001b2a:	eec9 7aa8 	vdiv.f32	s15, s19, s17
 8001b2e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001b74 <VCO_bleprect_SampleCompute+0x3dc>
 8001b32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b36:	edc4 7a06 	vstr	s15, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001b3a:	eef0 0a68 	vmov.f32	s1, s17
 8001b3e:	eeb0 0a69 	vmov.f32	s0, s19
 8001b42:	4629      	mov	r1, r5
 8001b44:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001b48:	f7ff fc80 	bl	800144c <place_step_dd>
			x = 0.5f;
 8001b4c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			k = 0;
 8001b50:	2600      	movs	r6, #0
 8001b52:	e7ce      	b.n	8001af2 <VCO_bleprect_SampleCompute+0x35a>
 8001b54:	f3af 8000 	nop.w
 8001b58:	88e368f1 	.word	0x88e368f1
 8001b5c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001b60:	472c4400 	.word	0x472c4400
 8001b64:	3727c5ac 	.word	0x3727c5ac
 8001b68:	3ff00000 	.word	0x3ff00000
 8001b6c:	3fe00000 	.word	0x3fe00000
 8001b70:	00000000 	.word	0x00000000
 8001b74:	1e3ce508 	.word	0x1e3ce508
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001b78:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001b7c:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8001b80:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001b84:	f005 fd3e 	bl	8007604 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001b92:	f005 fd42 	bl	800761a <memset>
		j = 0;
 8001b96:	2500      	movs	r5, #0
 8001b98:	e6f5      	b.n	8001986 <VCO_bleprect_SampleCompute+0x1ee>
 8001b9a:	bf00      	nop

08001b9c <VCO_bleptri_Init>:
//----------------------------------------------------------------------------------------------------------

///* ==== variable-slope, hard-sync-capable triangle oscillator ==== */

void VCO_bleptri_Init(VCO_bleptri_t *vco)
{
 8001b9c:	b508      	push	{r3, lr}
	vco->amp = 1.0f;
 8001b9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ba2:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <VCO_bleptri_Init+0x2c>)
 8001ba6:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 8001bac:	6103      	str	r3, [r0, #16]
	vco->_init = true;
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f880 2554 	strb.w	r2, [r0, #1364]	; 0x554
	vco->_z = 0.0f;
 8001bb4:	6283      	str	r3, [r0, #40]	; 0x28
	vco->_j = 0;
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001bbc:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001bc0:	302c      	adds	r0, #44	; 0x2c
 8001bc2:	f005 fd2a 	bl	800761a <memset>
}
 8001bc6:	bd08      	pop	{r3, pc}
 8001bc8:	43dc0000 	.word	0x43dc0000
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <VCO_bleptri_SampleCompute>:
////----------------------------------------------------------------------------------------------------------

float VCO_bleptri_SampleCompute(VCO_bleptri_t *vco)
{
 8001bd0:	b570      	push	{r4, r5, r6, lr}
 8001bd2:	ed2d 8b08 	vpush	{d8-d11}
 8001bd6:	4604      	mov	r4, r0
	int    j, k;
	float  freq, syncin;
	float  a, b, b1, db, p, t, w, dw, x, z;

	syncin  = vco->syncin;
 8001bd8:	edd0 8a05 	vldr	s17, [r0, #20]
	freq = vco->freq;
 8001bdc:	ed90 ba03 	vldr	s22, [r0, #12]
	p = vco->_p;  /* phase [0, 1) */
 8001be0:	ed90 aa07 	vldr	s20, [r0, #28]
	w = vco->_w;  /* phase increment */
 8001be4:	ed90 9a08 	vldr	s18, [r0, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001be8:	ed90 8a09 	vldr	s16, [r0, #36]	; 0x24
	z = vco->_z;  /* low pass filter state */
 8001bec:	edd0 aa0a 	vldr	s21, [r0, #40]	; 0x28
	j = vco->_j;  /* index into buffer _f */
 8001bf0:	f8d0 554c 	ldr.w	r5, [r0, #1356]	; 0x54c
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8001bf4:	f8d0 6550 	ldr.w	r6, [r0, #1360]	; 0x550

	if (vco->_init) {
 8001bf8:	f890 3554 	ldrb.w	r3, [r0, #1364]	; 0x554
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d040      	beq.n	8001c82 <VCO_bleptri_SampleCompute+0xb2>
		//		w = (exp2ap (freq[1] + vco->_port[OCTN] + vco->_port[TUNE] + expm[1] * vco->_port[EXPG] + 8.03136)
		//				+ 1e3 * linm[1] * vco->_port[LING]) / SAMPLERATE;
		w = freq / SAMPLERATE;
 8001c00:	eddf 7ae5 	vldr	s15, [pc, #916]	; 8001f98 <VCO_bleptri_SampleCompute+0x3c8>
 8001c04:	ee8b 9a27 	vdiv.f32	s18, s22, s15
		if (w < 1e-5) w = 1e-5;
 8001c08:	ee19 0a10 	vmov	r0, s18
 8001c0c:	f7fe fc40 	bl	8000490 <__aeabi_f2d>
 8001c10:	a3df      	add	r3, pc, #892	; (adr r3, 8001f90 <VCO_bleptri_SampleCompute+0x3c0>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe ff05 	bl	8000a24 <__aeabi_dcmplt>
 8001c1a:	b108      	cbz	r0, 8001c20 <VCO_bleptri_SampleCompute+0x50>
 8001c1c:	ed9f 9adf 	vldr	s18, [pc, #892]	; 8001f9c <VCO_bleptri_SampleCompute+0x3cc>
		if (w > 0.5) w = 0.5;
 8001c20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001c24:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	dd01      	ble.n	8001c32 <VCO_bleptri_SampleCompute+0x62>
 8001c2e:	eeb0 9a67 	vmov.f32	s18, s15
		b = 0.5 * (1.0 + vco->waveform);
 8001c32:	6920      	ldr	r0, [r4, #16]
 8001c34:	f7fe fc2c 	bl	8000490 <__aeabi_f2d>
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4bd9      	ldr	r3, [pc, #868]	; (8001fa0 <VCO_bleptri_SampleCompute+0x3d0>)
 8001c3c:	f7fe faca 	bl	80001d4 <__adddf3>
 8001c40:	2200      	movs	r2, #0
 8001c42:	4bd8      	ldr	r3, [pc, #864]	; (8001fa4 <VCO_bleptri_SampleCompute+0x3d4>)
 8001c44:	f7fe fc7c 	bl	8000540 <__aeabi_dmul>
 8001c48:	f7fe ff14 	bl	8000a74 <__aeabi_d2f>
 8001c4c:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8001c50:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	dd01      	ble.n	8001c5e <VCO_bleptri_SampleCompute+0x8e>
 8001c5a:	eef0 7a49 	vmov.f32	s15, s18
		if (b > 1.0f - w) b = 1.0f - w;
 8001c5e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8001c62:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001c66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d401      	bmi.n	8001c74 <VCO_bleptri_SampleCompute+0xa4>
 8001c70:	eeb0 8a67 	vmov.f32	s16, s15
		p = 0.5f * b;
 8001c74:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8001c78:	ee28 aa29 	vmul.f32	s20, s16, s19
		/* if we valued alias-free startup over low startup time, we could do:
		 *   p -= w;
		 *   place_slope_dd(_f, j, 0.0f, w, 1.0f / b); */
		k = 0;
		vco->_init = false;
 8001c7c:	2600      	movs	r6, #0
 8001c7e:	f884 6554 	strb.w	r6, [r4, #1364]	; 0x554
	}

	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
 8001c82:	eddf 7ac5 	vldr	s15, [pc, #788]	; 8001f98 <VCO_bleptri_SampleCompute+0x3c8>
 8001c86:	eecb 9a27 	vdiv.f32	s19, s22, s15
	if (t < 1e-5) t = 1e-5;
 8001c8a:	ee19 0a90 	vmov	r0, s19
 8001c8e:	f7fe fbff 	bl	8000490 <__aeabi_f2d>
 8001c92:	a3bf      	add	r3, pc, #764	; (adr r3, 8001f90 <VCO_bleptri_SampleCompute+0x3c0>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fec4 	bl	8000a24 <__aeabi_dcmplt>
 8001c9c:	b108      	cbz	r0, 8001ca2 <VCO_bleptri_SampleCompute+0xd2>
 8001c9e:	eddf 9abf 	vldr	s19, [pc, #764]	; 8001f9c <VCO_bleptri_SampleCompute+0x3cc>
	if (t > 0.5) t = 0.5;
 8001ca2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001ca6:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dd01      	ble.n	8001cb4 <VCO_bleptri_SampleCompute+0xe4>
 8001cb0:	eef0 9a67 	vmov.f32	s19, s15
	dw = (t - w) ;
 8001cb4:	ee79 9ac9 	vsub.f32	s19, s19, s18
	t = 0.5 * (1.0 + vco->waveform );
 8001cb8:	6920      	ldr	r0, [r4, #16]
 8001cba:	f7fe fbe9 	bl	8000490 <__aeabi_f2d>
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4bb7      	ldr	r3, [pc, #732]	; (8001fa0 <VCO_bleptri_SampleCompute+0x3d0>)
 8001cc2:	f7fe fa87 	bl	80001d4 <__adddf3>
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4bb6      	ldr	r3, [pc, #728]	; (8001fa4 <VCO_bleptri_SampleCompute+0x3d4>)
 8001cca:	f7fe fc39 	bl	8000540 <__aeabi_dmul>
 8001cce:	f7fe fed1 	bl	8000a74 <__aeabi_d2f>
 8001cd2:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 8001cd6:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd01      	ble.n	8001ce4 <VCO_bleptri_SampleCompute+0x114>
 8001ce0:	eeb0 7a49 	vmov.f32	s14, s18
	if (t > 1.0f - w) t = 1.0f - w;
 8001ce4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ce8:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8001cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d401      	bmi.n	8001cfa <VCO_bleptri_SampleCompute+0x12a>
 8001cf6:	eef0 7a47 	vmov.f32	s15, s14
	db = (t - b) ;
 8001cfa:	ee77 7ac8 	vsub.f32	s15, s15, s16

	w += dw;
 8001cfe:	ee39 9a29 	vadd.f32	s18, s18, s19
	b += db;
 8001d02:	ee38 8a27 	vadd.f32	s16, s16, s15
	b1 = 1.0f - b;
 8001d06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d0a:	ee77 bac8 	vsub.f32	s23, s15, s16
	p += w;
 8001d0e:	ee7a 9a09 	vadd.f32	s19, s20, s18

	if (syncin >= 1e-20f) {  /* sync to master */
 8001d12:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8001fa8 <VCO_bleptri_SampleCompute+0x3d8>
 8001d16:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	f2c0 811a 	blt.w	8001f56 <VCO_bleptri_SampleCompute+0x386>

		float eof_offset = (syncin - 1e-20f) * w;
 8001d22:	ee38 bae7 	vsub.f32	s22, s17, s15
 8001d26:	ee2b ba09 	vmul.f32	s22, s22, s18
		float p_at_reset = p - eof_offset;
 8001d2a:	ee79 9acb 	vsub.f32	s19, s19, s22
		p = eof_offset;
		//
		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 8001d2e:	2e00      	cmp	r6, #0
 8001d30:	f040 80aa 	bne.w	8001e88 <VCO_bleptri_SampleCompute+0x2b8>
			x = -0.5f + p_at_reset / b;
 8001d34:	ee89 aa88 	vdiv.f32	s20, s19, s16
 8001d38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001d3c:	ee3a aa67 	vsub.f32	s20, s20, s15
			if (p_at_reset >= b) {
 8001d40:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	d969      	bls.n	8001e1e <VCO_bleptri_SampleCompute+0x24e>
				x = 0.5f - (p_at_reset - b) / b1;
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
				k = 1;
			}
			if (p_at_reset >= 1.0f) {
 8001d4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d4e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	da7f      	bge.n	8001e58 <VCO_bleptri_SampleCompute+0x288>
				k = 1;
			}
		}

		/* now place reset DDs */
		if (k)
 8001d58:	b186      	cbz	r6, 8001d7c <VCO_bleptri_SampleCompute+0x1ac>
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001d5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d5e:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8001d62:	ee87 7aab 	vdiv.f32	s14, s15, s23
 8001d66:	ee31 1a07 	vadd.f32	s2, s2, s14
 8001d6a:	eef0 0a49 	vmov.f32	s1, s18
 8001d6e:	eeb0 0a4b 	vmov.f32	s0, s22
 8001d72:	4629      	mov	r1, r5
 8001d74:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001d78:	f7ff fba6 	bl	80014c8 <place_slope_dd>
		place_step_dd(vco->_f, j, p, w, -0.5f - x);
 8001d7c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8001d80:	eebe 1a00 	vmov.f32	s2, #224	; 0xbf000000 -0.5
 8001d84:	ee31 1a4a 	vsub.f32	s2, s2, s20
 8001d88:	eef0 0a49 	vmov.f32	s1, s18
 8001d8c:	eeb0 0a4b 	vmov.f32	s0, s22
 8001d90:	4629      	mov	r1, r5
 8001d92:	4630      	mov	r0, r6
 8001d94:	f7ff fb5a 	bl	800144c <place_step_dd>
		x = -0.5f + p / b;
 8001d98:	ee8b aa08 	vdiv.f32	s20, s22, s16
 8001d9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001da0:	ee3a aa67 	vsub.f32	s20, s20, s15
		k = 0;
		if (p >= b) {
 8001da4:	eeb4 8acb 	vcmpe.f32	s16, s22
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	f240 80b9 	bls.w	8001f22 <VCO_bleptri_SampleCompute+0x352>
		k = 0;
 8001db0:	2600      	movs	r6, #0
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001db2:	edc4 8a06 	vstr	s17, [r4, #24]
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001db6:	f105 030e 	add.w	r3, r5, #14
 8001dba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dc2:	ee37 aa8a 	vadd.f32	s20, s15, s20
 8001dc6:	ed83 aa01 	vstr	s20, [r3, #4]

	z += a * (vco->_f[j] - z);
 8001dca:	f105 030a 	add.w	r3, r5, #10
 8001dce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dd2:	edd3 8a01 	vldr	s17, [r3, #4]
 8001dd6:	ee78 8aea 	vsub.f32	s17, s17, s21
 8001dda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001dde:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001de2:	ee78 8aaa 	vadd.f32	s17, s17, s21
	vco->out = vco->amp * z;
 8001de6:	edd4 9a01 	vldr	s19, [r4, #4]
 8001dea:	ee69 9aa8 	vmul.f32	s19, s19, s17
 8001dee:	edc4 9a00 	vstr	s19, [r4]

	if (++j == FILLEN)
 8001df2:	3501      	adds	r5, #1
 8001df4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001df8:	f000 816b 	beq.w	80020d2 <VCO_bleptri_SampleCompute+0x502>
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
	}

	vco->_p = p;
 8001dfc:	ed84 ba07 	vstr	s22, [r4, #28]
	vco->_w = w;
 8001e00:	ed84 9a08 	vstr	s18, [r4, #32]
	vco->_b = b;
 8001e04:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
	vco->_z = z;
 8001e08:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	vco->_j = j;
 8001e0c:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
	vco->_k = k;
 8001e10:	f8c4 6550 	str.w	r6, [r4, #1360]	; 0x550

	return vco->out;

}
 8001e14:	eeb0 0a69 	vmov.f32	s0, s19
 8001e18:	ecbd 8b08 	vpop	{d8-d11}
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
				x = 0.5f - (p_at_reset - b) / b1;
 8001e1e:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8001e22:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001e26:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001e2a:	ee3a aa67 	vsub.f32	s20, s20, s15
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001e2e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001e32:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e3a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001e3e:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001e42:	eef0 0a49 	vmov.f32	s1, s18
 8001e46:	ee30 0a0b 	vadd.f32	s0, s0, s22
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001e50:	f7ff fb3a 	bl	80014c8 <place_slope_dd>
				k = 1;
 8001e54:	2601      	movs	r6, #1
 8001e56:	e778      	b.n	8001d4a <VCO_bleptri_SampleCompute+0x17a>
				p_at_reset -= 1.0f;
 8001e58:	ee39 0ae7 	vsub.f32	s0, s19, s15
				x = -0.5f + p_at_reset / b;
 8001e5c:	ee80 aa08 	vdiv.f32	s20, s0, s16
 8001e60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e64:	ee3a aa47 	vsub.f32	s20, s20, s14
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001e68:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8001e6c:	ee87 7aab 	vdiv.f32	s14, s15, s23
 8001e70:	ee31 1a07 	vadd.f32	s2, s2, s14
 8001e74:	eef0 0a49 	vmov.f32	s1, s18
 8001e78:	ee3b 0a00 	vadd.f32	s0, s22, s0
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001e82:	f7ff fb21 	bl	80014c8 <place_slope_dd>
 8001e86:	e779      	b.n	8001d7c <VCO_bleptri_SampleCompute+0x1ac>
			x = 0.5f - (p_at_reset - b) / b1;
 8001e88:	ee39 7ac8 	vsub.f32	s14, s19, s16
 8001e8c:	eec7 7a2b 	vdiv.f32	s15, s14, s23
 8001e90:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001e94:	ee3a aa67 	vsub.f32	s20, s20, s15
			if (p_at_reset >= 1.0f) {
 8001e98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001e9c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	da24      	bge.n	8001ef0 <VCO_bleptri_SampleCompute+0x320>
			if (!k && p_at_reset >= b) {
 8001ea6:	2e00      	cmp	r6, #0
 8001ea8:	f47f af56 	bne.w	8001d58 <VCO_bleptri_SampleCompute+0x188>
 8001eac:	eef4 9ac8 	vcmpe.f32	s19, s16
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	f6ff af50 	blt.w	8001d58 <VCO_bleptri_SampleCompute+0x188>
				x = 0.5f - (p_at_reset - b) / b1;
 8001eb8:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8001ebc:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001ec0:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001ec4:	ee3a aa67 	vsub.f32	s20, s20, s15
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001ec8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001ecc:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ed4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001ed8:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001edc:	eef0 0a49 	vmov.f32	s1, s18
 8001ee0:	ee30 0a0b 	vadd.f32	s0, s0, s22
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001eea:	f7ff faed 	bl	80014c8 <place_slope_dd>
 8001eee:	e734      	b.n	8001d5a <VCO_bleptri_SampleCompute+0x18a>
				p_at_reset -= 1.0f;
 8001ef0:	ee79 9ae7 	vsub.f32	s19, s19, s15
				x = -0.5f + p_at_reset / b;
 8001ef4:	ee89 aa88 	vdiv.f32	s20, s19, s16
 8001ef8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001efc:	ee3a aa47 	vsub.f32	s20, s20, s14
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001f00:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8001f04:	ee87 7aab 	vdiv.f32	s14, s15, s23
 8001f08:	ee31 1a07 	vadd.f32	s2, s2, s14
 8001f0c:	eef0 0a49 	vmov.f32	s1, s18
 8001f10:	ee3b 0a29 	vadd.f32	s0, s22, s19
 8001f14:	4629      	mov	r1, r5
 8001f16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001f1a:	f7ff fad5 	bl	80014c8 <place_slope_dd>
				k = 0;
 8001f1e:	2600      	movs	r6, #0
 8001f20:	e7c1      	b.n	8001ea6 <VCO_bleptri_SampleCompute+0x2d6>
			x = 0.5f - (p - b) / b1;
 8001f22:	ee3b 0a48 	vsub.f32	s0, s22, s16
 8001f26:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001f2a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001f2e:	ee3a aa67 	vsub.f32	s20, s20, s15
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001f32:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001f36:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f3e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001f42:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001f46:	eef0 0a49 	vmov.f32	s1, s18
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	f7ff fabb 	bl	80014c8 <place_slope_dd>
			k = 1;
 8001f52:	2601      	movs	r6, #1
 8001f54:	e72d      	b.n	8001db2 <VCO_bleptri_SampleCompute+0x1e2>
	} else if (!k) {  /* normal operation, slope currently up */
 8001f56:	2e00      	cmp	r6, #0
 8001f58:	d163      	bne.n	8002022 <VCO_bleptri_SampleCompute+0x452>
		x = -0.5f + p / b;
 8001f5a:	ee89 aa88 	vdiv.f32	s20, s19, s16
 8001f5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001f62:	ee3a aa67 	vsub.f32	s20, s20, s15
		if (p >= b) {
 8001f66:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	d91d      	bls.n	8001fac <VCO_bleptri_SampleCompute+0x3dc>
 8001f70:	4633      	mov	r3, r6
		if (p >= 1.0f) {
 8001f72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001f76:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	da30      	bge.n	8001fe2 <VCO_bleptri_SampleCompute+0x412>
			vco->syncout = 0.0f;
 8001f80:	2200      	movs	r2, #0
 8001f82:	61a2      	str	r2, [r4, #24]
	p += w;
 8001f84:	eeb0 ba69 	vmov.f32	s22, s19
			vco->syncout = 0.0f;
 8001f88:	461e      	mov	r6, r3
 8001f8a:	e714      	b.n	8001db6 <VCO_bleptri_SampleCompute+0x1e6>
 8001f8c:	f3af 8000 	nop.w
 8001f90:	88e368f1 	.word	0x88e368f1
 8001f94:	3ee4f8b5 	.word	0x3ee4f8b5
 8001f98:	472c4400 	.word	0x472c4400
 8001f9c:	3727c5ac 	.word	0x3727c5ac
 8001fa0:	3ff00000 	.word	0x3ff00000
 8001fa4:	3fe00000 	.word	0x3fe00000
 8001fa8:	1e3ce508 	.word	0x1e3ce508
			x = 0.5f - (p - b) / b1;
 8001fac:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8001fb0:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8001fb4:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001fb8:	ee3a aa67 	vsub.f32	s20, s20, s15
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001fbc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001fc0:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8001fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fc8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001fcc:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001fd0:	eef0 0a49 	vmov.f32	s1, s18
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001fda:	f7ff fa75 	bl	80014c8 <place_slope_dd>
			k = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e7c7      	b.n	8001f72 <VCO_bleptri_SampleCompute+0x3a2>
			p -= 1.0f;
 8001fe2:	ee39 bae7 	vsub.f32	s22, s19, s15
			vco->syncout = p / w + 1e-20f;
 8001fe6:	ee8b 7a09 	vdiv.f32	s14, s22, s18
 8001fea:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8001fa8 <VCO_bleptri_SampleCompute+0x3d8>
 8001fee:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001ff2:	ed84 7a06 	vstr	s14, [r4, #24]
			x = -0.5f + p / b;
 8001ff6:	ee8b aa08 	vdiv.f32	s20, s22, s16
 8001ffa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ffe:	ee3a aa47 	vsub.f32	s20, s20, s14
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8002002:	ee87 1a88 	vdiv.f32	s2, s15, s16
 8002006:	ee87 7aab 	vdiv.f32	s14, s15, s23
 800200a:	ee31 1a07 	vadd.f32	s2, s2, s14
 800200e:	eef0 0a49 	vmov.f32	s1, s18
 8002012:	eeb0 0a4b 	vmov.f32	s0, s22
 8002016:	4629      	mov	r1, r5
 8002018:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800201c:	f7ff fa54 	bl	80014c8 <place_slope_dd>
 8002020:	e6c9      	b.n	8001db6 <VCO_bleptri_SampleCompute+0x1e6>
		x = 0.5f - (p - b) / b1;
 8002022:	ee39 7ac8 	vsub.f32	s14, s19, s16
 8002026:	eec7 7a2b 	vdiv.f32	s15, s14, s23
 800202a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800202e:	ee3a aa67 	vsub.f32	s20, s20, s15
		if (p >= 1.0f) {
 8002032:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002036:	eef4 9ae7 	vcmpe.f32	s19, s15
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	da27      	bge.n	8002090 <VCO_bleptri_SampleCompute+0x4c0>
			vco->syncout = 0.0f;
 8002040:	2300      	movs	r3, #0
 8002042:	61a3      	str	r3, [r4, #24]
	p += w;
 8002044:	eeb0 ba69 	vmov.f32	s22, s19
		if (!k && p >= b) {
 8002048:	2e00      	cmp	r6, #0
 800204a:	f47f aeb4 	bne.w	8001db6 <VCO_bleptri_SampleCompute+0x1e6>
 800204e:	eeb4 bac8 	vcmpe.f32	s22, s16
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	f6ff aeae 	blt.w	8001db6 <VCO_bleptri_SampleCompute+0x1e6>
			x = 0.5f - (p - b) / b1;
 800205a:	ee3b 0a48 	vsub.f32	s0, s22, s16
 800205e:	eec0 7a2b 	vdiv.f32	s15, s0, s23
 8002062:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8002066:	ee3a aa67 	vsub.f32	s20, s20, s15
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 800206a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800206e:	ee87 1aab 	vdiv.f32	s2, s15, s23
 8002072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002076:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800207a:	ee31 1a67 	vsub.f32	s2, s2, s15
 800207e:	eef0 0a49 	vmov.f32	s1, s18
 8002082:	4629      	mov	r1, r5
 8002084:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002088:	f7ff fa1e 	bl	80014c8 <place_slope_dd>
			k = 1;
 800208c:	2601      	movs	r6, #1
 800208e:	e692      	b.n	8001db6 <VCO_bleptri_SampleCompute+0x1e6>
			p -= 1.0f;
 8002090:	ee39 bae7 	vsub.f32	s22, s19, s15
			vco->syncout = p / w + 1e-20f;
 8002094:	ee8b 7a09 	vdiv.f32	s14, s22, s18
 8002098:	ed5f 6a3d 	vldr	s13, [pc, #-244]	; 8001fa8 <VCO_bleptri_SampleCompute+0x3d8>
 800209c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80020a0:	ed84 7a06 	vstr	s14, [r4, #24]
			x = -0.5f + p / b;
 80020a4:	ee8b aa08 	vdiv.f32	s20, s22, s16
 80020a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020ac:	ee3a aa47 	vsub.f32	s20, s20, s14
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 80020b0:	ee87 1a88 	vdiv.f32	s2, s15, s16
 80020b4:	ee87 7aab 	vdiv.f32	s14, s15, s23
 80020b8:	ee31 1a07 	vadd.f32	s2, s2, s14
 80020bc:	eef0 0a49 	vmov.f32	s1, s18
 80020c0:	eeb0 0a4b 	vmov.f32	s0, s22
 80020c4:	4629      	mov	r1, r5
 80020c6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80020ca:	f7ff f9fd 	bl	80014c8 <place_slope_dd>
			k = 0;
 80020ce:	2600      	movs	r6, #0
 80020d0:	e7ba      	b.n	8002048 <VCO_bleptri_SampleCompute+0x478>
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 80020d2:	f44f 7290 	mov.w	r2, #288	; 0x120
 80020d6:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80020da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80020de:	f005 fa91 	bl	8007604 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 80020e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e6:	2100      	movs	r1, #0
 80020e8:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 80020ec:	f005 fa95 	bl	800761a <memset>
		j = 0;
 80020f0:	2500      	movs	r5, #0
 80020f2:	e683      	b.n	8001dfc <VCO_bleptri_SampleCompute+0x22c>

080020f4 <Lfo_SampleCompute>:
static monochorus_t		delR  _CCM_ , delL  _CCM_ ; // 2 fractional delay lines
float rateCoeff;

/*-------------------------------------------------------------------------------------------*/
float Lfo_SampleCompute(Lfo_t * op) // ! returns a positive value between 0 and op.amp !
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4604      	mov	r4, r0
	float z;

	op->phase += _2PI * Ts * op->freq; // increment phase
 80020f8:	edd0 7a01 	vldr	s15, [r0, #4]
 80020fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002178 <Lfo_SampleCompute+0x84>
 8002100:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002104:	edd0 7a02 	vldr	s15, [r0, #8]
 8002108:	ee77 7a87 	vadd.f32	s15, s15, s14
 800210c:	edc0 7a02 	vstr	s15, [r0, #8]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002110:	e005      	b.n	800211e <Lfo_SampleCompute+0x2a>
		op->phase += _2PI;
 8002112:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800217c <Lfo_SampleCompute+0x88>
 8002116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800211a:	edc4 7a02 	vstr	s15, [r4, #8]
	while (op->phase < 0) // keep phase in [0, 2pi]
 800211e:	edd4 7a02 	vldr	s15, [r4, #8]
 8002122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	d4f2      	bmi.n	8002112 <Lfo_SampleCompute+0x1e>
 800212c:	e005      	b.n	800213a <Lfo_SampleCompute+0x46>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 800212e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800217c <Lfo_SampleCompute+0x88>
 8002132:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002136:	edc4 7a02 	vstr	s15, [r4, #8]
	while (op->phase >= _2PI)
 800213a:	edd4 7a02 	vldr	s15, [r4, #8]
 800213e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800217c <Lfo_SampleCompute+0x88>
 8002142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	daf0      	bge.n	800212e <Lfo_SampleCompute+0x3a>

	z = sinetable[lrintf(ALPHA * (op->phase))];
 800214c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002180 <Lfo_SampleCompute+0x8c>
 8002150:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002154:	f005 fb54 	bl	8007800 <lrintf>
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <Lfo_SampleCompute+0x90>)
 800215a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800215e:	edd0 7a00 	vldr	s15, [r0]
	op->out = op->amp * (z + 1); // returns a positive value between 0 and op.amp
 8002162:	ed94 0a00 	vldr	s0, [r4]
 8002166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800216a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800216e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002172:	ed84 0a03 	vstr	s0, [r4, #12]

	return op->out;
}
 8002176:	bd10      	pop	{r4, pc}
 8002178:	39156592 	.word	0x39156592
 800217c:	40c90fdb 	.word	0x40c90fdb
 8002180:	4322f983 	.word	0x4322f983
 8002184:	080164f0 	.word	0x080164f0

08002188 <ChorusRate_set>:
}
/*---------------------------------------------------------------------------------------------*/
void ChorusRate_set(uint8_t val)
{
	float rate;
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8002188:	ee07 0a90 	vmov	s15, r0
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002190:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80021b8 <ChorusRate_set+0x30>
 8002194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002198:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80021bc <ChorusRate_set+0x34>
 800219c:	ee77 7a87 	vadd.f32	s15, s15, s14
	lfoL.freq = rate;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <ChorusRate_set+0x38>)
 80021a2:	edc3 7a01 	vstr	s15, [r3, #4]
	//lfoR.freq = 0.98f * rate;
	lfoR.freq = rateCoeff * rate;
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <ChorusRate_set+0x3c>)
 80021a8:	ed92 7a00 	vldr	s14, [r2]
 80021ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b0:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	3d61c387 	.word	0x3d61c387
 80021bc:	3ca3d70a 	.word	0x3ca3d70a
 80021c0:	200010a8 	.word	0x200010a8
 80021c4:	200139dc 	.word	0x200139dc

080021c8 <ChorusSecondRate_set>:
/*---------------------------------------------------------------------------------------------*/
void ChorusSecondRate_set(uint8_t val)
{
	rateCoeff = 0.9f / MIDI_MAX * val + 0.1f; // from 10 % to 100 % of lfoL rate
 80021c8:	ee07 0a90 	vmov	s15, r0
 80021cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80021f8 <ChorusSecondRate_set+0x30>
 80021d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80021fc <ChorusSecondRate_set+0x34>
 80021dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <ChorusSecondRate_set+0x38>)
 80021e2:	edc3 7a00 	vstr	s15, [r3]
	lfoR.freq = rateCoeff * lfoL.freq;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <ChorusSecondRate_set+0x3c>)
 80021e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f0:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	3be836d4 	.word	0x3be836d4
 80021fc:	3dcccccd 	.word	0x3dcccccd
 8002200:	200139dc 	.word	0x200139dc
 8002204:	200010a8 	.word	0x200010a8

08002208 <ChorusDelay_set>:
}
/*---------------------------------------------------------------------------------------------*/
void ChorusDelay_set(uint8_t val)
{
	float d;
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 8002208:	ee07 0a90 	vmov	s15, r0
 800220c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002210:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002230 <ChorusDelay_set+0x28>
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
	delL.baseDelay = d;
 8002218:	f241 51f0 	movw	r1, #5616	; 0x15f0
 800221c:	4a05      	ldr	r2, [pc, #20]	; (8002234 <ChorusDelay_set+0x2c>)
 800221e:	440a      	add	r2, r1
 8002220:	edc2 7a00 	vstr	s15, [r2]
	delR.baseDelay = d;
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <ChorusDelay_set+0x30>)
 8002226:	440b      	add	r3, r1
 8002228:	edc3 7a00 	vstr	s15, [r3]
}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40b060c2 	.word	0x40b060c2
 8002234:	200010c8 	.word	0x200010c8
 8002238:	200026c0 	.word	0x200026c0

0800223c <ChorusFeedback_set>:
}
/*---------------------------------------------------------------------------------------------*/
void ChorusFeedback_set(uint8_t val)
{
	float_t fb;
	fb = 0.95f * val / MIDI_MAX;
 800223c:	ee07 0a90 	vmov	s15, r0
 8002240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002244:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002264 <ChorusFeedback_set+0x28>
 8002248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002268 <ChorusFeedback_set+0x2c>
 8002250:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	delL.fb = fb;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <ChorusFeedback_set+0x30>)
 8002256:	ed83 7a01 	vstr	s14, [r3, #4]
	delR.fb = fb;
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <ChorusFeedback_set+0x34>)
 800225c:	ed83 7a01 	vstr	s14, [r3, #4]
}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	3f733333 	.word	0x3f733333
 8002268:	42fe0000 	.word	0x42fe0000
 800226c:	200010c8 	.word	0x200010c8
 8002270:	200026c0 	.word	0x200026c0

08002274 <ChorusSweep_set>:
}
/*---------------------------------------------------------------------------------------------*/
void ChorusSweep_set(uint8_t val)
{
	float sw;
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 8002274:	ee07 0a90 	vmov	s15, r0
 8002278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002290 <ChorusSweep_set+0x1c>
 8002280:	ee67 7a87 	vmul.f32	s15, s15, s14
	lfoL.amp = sw;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <ChorusSweep_set+0x20>)
 8002286:	edc3 7a00 	vstr	s15, [r3]
	lfoR.amp = sw;
 800228a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800228e:	4770      	bx	lr
 8002290:	3f8c7f66 	.word	0x3f8c7f66
 8002294:	200010a8 	.word	0x200010a8

08002298 <ChorusMode_switch>:
	delR.mode *= -1 ;//
}
/*---------------------------------------------------------------------------------------------*/
void ChorusMode_switch(uint8_t val)
{
	switch (val)
 8002298:	b148      	cbz	r0, 80022ae <ChorusMode_switch+0x16>
 800229a:	287f      	cmp	r0, #127	; 0x7f
 800229c:	d10e      	bne.n	80022bc <ChorusMode_switch+0x24>
		{
		case 127 : 	delR.mode = delL.mode = -1 ; break;
 800229e:	f241 53f4 	movw	r3, #5620	; 0x15f4
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	4906      	ldr	r1, [pc, #24]	; (80022c0 <ChorusMode_switch+0x28>)
 80022a6:	54ca      	strb	r2, [r1, r3]
 80022a8:	4906      	ldr	r1, [pc, #24]	; (80022c4 <ChorusMode_switch+0x2c>)
 80022aa:	54ca      	strb	r2, [r1, r3]
 80022ac:	4770      	bx	lr
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 80022ae:	f241 53f4 	movw	r3, #5620	; 0x15f4
 80022b2:	2201      	movs	r2, #1
 80022b4:	4902      	ldr	r1, [pc, #8]	; (80022c0 <ChorusMode_switch+0x28>)
 80022b6:	54ca      	strb	r2, [r1, r3]
 80022b8:	4902      	ldr	r1, [pc, #8]	; (80022c4 <ChorusMode_switch+0x2c>)
 80022ba:	54ca      	strb	r2, [r1, r3]
		}
}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	200010c8 	.word	0x200010c8
 80022c4:	200026c0 	.word	0x200026c0

080022c8 <ChorusFDBsign_switch>:
	delR.fb *= -1.f ;//
}
/*---------------------------------------------------------------------------------------------*/
void ChorusFDBsign_switch(uint8_t val)
{
	switch (val)
 80022c8:	b180      	cbz	r0, 80022ec <ChorusFDBsign_switch+0x24>
 80022ca:	287f      	cmp	r0, #127	; 0x7f
 80022cc:	d120      	bne.n	8002310 <ChorusFDBsign_switch+0x48>
		{
		case 127 : 	delR.fb = fabsf(delR.fb); delL.fb = fabsf(delL.fb); break; // positive feedback;
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <ChorusFDBsign_switch+0x4c>)
 80022d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80022d4:	eef0 7ae7 	vabs.f32	s15, s15
 80022d8:	edc3 7a01 	vstr	s15, [r3, #4]
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <ChorusFDBsign_switch+0x50>)
 80022de:	edd3 7a01 	vldr	s15, [r3, #4]
 80022e2:	eef0 7ae7 	vabs.f32	s15, s15
 80022e6:	edc3 7a01 	vstr	s15, [r3, #4]
 80022ea:	4770      	bx	lr
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <ChorusFDBsign_switch+0x4c>)
 80022ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80022f2:	eef0 7ae7 	vabs.f32	s15, s15
 80022f6:	eef1 7a67 	vneg.f32	s15, s15
 80022fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <ChorusFDBsign_switch+0x50>)
 8002300:	edd3 7a01 	vldr	s15, [r3, #4]
 8002304:	eef0 7ae7 	vabs.f32	s15, s15
 8002308:	eef1 7a67 	vneg.f32	s15, s15
 800230c:	edc3 7a01 	vstr	s15, [r3, #4]
		}
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200026c0 	.word	0x200026c0
 8002318:	200010c8 	.word	0x200010c8

0800231c <Delay_set_delay>:
/*-------------------------------------------------------------------------------------------*/
void Delay_set_delay(monochorus_t *del, float delay)
{
	del->baseDelay = delay;
 800231c:	f500 50af 	add.w	r0, r0, #5600	; 0x15e0
 8002320:	ed80 0a04 	vstr	s0, [r0, #16]
}
 8002324:	4770      	bx	lr

08002326 <Delay_set_fb>:
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fb(monochorus_t *del, float val)
{
	del->fb = val;
 8002326:	ed80 0a01 	vstr	s0, [r0, #4]
}
 800232a:	4770      	bx	lr

0800232c <Delay_set_fw>:
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fw(monochorus_t *del, float val)
{
	del->fw = val;
 800232c:	ed80 0a02 	vstr	s0, [r0, #8]
}
 8002330:	4770      	bx	lr

08002332 <Delay_set_mix>:
/*-------------------------------------------------------------------------------------------*/
void Delay_set_mix(monochorus_t *del, float val)
{
	del->mix = val;
 8002332:	ed80 0a00 	vstr	s0, [r0]
}
 8002336:	4770      	bx	lr

08002338 <ChorusDelay_init>:
{
 8002338:	b510      	push	{r4, lr}
 800233a:	ed2d 8b04 	vpush	{d8-d9}
 800233e:	4604      	mov	r4, r0
 8002340:	eeb0 8a40 	vmov.f32	s16, s0
 8002344:	eeb0 9a41 	vmov.f32	s18, s2
 8002348:	eef0 8a61 	vmov.f32	s17, s3
	Delay_set_fb(del, dfb);
 800234c:	eeb0 0a60 	vmov.f32	s0, s1
 8002350:	f7ff ffe9 	bl	8002326 <Delay_set_fb>
	Delay_set_fw(del, dfw);
 8002354:	eeb0 0a49 	vmov.f32	s0, s18
 8002358:	4620      	mov	r0, r4
 800235a:	f7ff ffe7 	bl	800232c <Delay_set_fw>
	Delay_set_mix(del, dmix);
 800235e:	eeb0 0a68 	vmov.f32	s0, s17
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ffe5 	bl	8002332 <Delay_set_mix>
	Delay_set_delay(del, delay);
 8002368:	eeb0 0a48 	vmov.f32	s0, s16
 800236c:	4620      	mov	r0, r4
 800236e:	f7ff ffd5 	bl	800231c <Delay_set_delay>
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8002372:	f240 5377 	movw	r3, #1399	; 0x577
 8002376:	60e3      	str	r3, [r4, #12]
	del->mode = 1;
 8002378:	f241 53f4 	movw	r3, #5620	; 0x15f4
 800237c:	2201      	movs	r2, #1
 800237e:	54e2      	strb	r2, [r4, r3]
}
 8002380:	ecbd 8b04 	vpop	{d8-d9}
 8002384:	bd10      	pop	{r4, pc}
	...

08002388 <Chorus_init>:
{
 8002388:	b508      	push	{r3, lr}
 800238a:	ed2d 8b02 	vpush	{d8}
	ChorusDelay_init(&delL, LEFT_DELAY, FEEDBACK, FORWARD, MIX);
 800238e:	eddf 8a1e 	vldr	s17, [pc, #120]	; 8002408 <Chorus_init+0x80>
 8002392:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 800240c <Chorus_init+0x84>
 8002396:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800239a:	eeb0 1a61 	vmov.f32	s2, s3
 800239e:	eef0 0a68 	vmov.f32	s1, s17
 80023a2:	eeb0 0a48 	vmov.f32	s0, s16
 80023a6:	481a      	ldr	r0, [pc, #104]	; (8002410 <Chorus_init+0x88>)
 80023a8:	f7ff ffc6 	bl	8002338 <ChorusDelay_init>
	ChorusDelay_init(&delR, RIGHT_DELAY, FEEDBACK, FORWARD, MIX);
 80023ac:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80023b0:	eeb0 1a61 	vmov.f32	s2, s3
 80023b4:	eef0 0a68 	vmov.f32	s1, s17
 80023b8:	eeb0 0a48 	vmov.f32	s0, s16
 80023bc:	4815      	ldr	r0, [pc, #84]	; (8002414 <Chorus_init+0x8c>)
 80023be:	f7ff ffbb 	bl	8002338 <ChorusDelay_init>
	lfoL.amp = LEFT_SWEEP;
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <Chorus_init+0x90>)
 80023c4:	4a15      	ldr	r2, [pc, #84]	; (800241c <Chorus_init+0x94>)
 80023c6:	601a      	str	r2, [r3, #0]
	lfoR.amp = RIGHT_SWEEP;
 80023c8:	611a      	str	r2, [r3, #16]
	lfoL.freq = LEFT_RATE ;
 80023ca:	4a15      	ldr	r2, [pc, #84]	; (8002420 <Chorus_init+0x98>)
 80023cc:	605a      	str	r2, [r3, #4]
	lfoR.freq = RIGHT_RATE ;
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <Chorus_init+0x9c>)
 80023d0:	615a      	str	r2, [r3, #20]
	rateCoeff = 1;
 80023d2:	4a15      	ldr	r2, [pc, #84]	; (8002428 <Chorus_init+0xa0>)
 80023d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80023d8:	6011      	str	r1, [r2, #0]
	lfoL.phase = _PI/2; // initial phases for quadrature
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <Chorus_init+0xa4>)
 80023dc:	609a      	str	r2, [r3, #8]
	lfoR.phase = 0;
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
	for (int var = 0; var < DEPTH; ++var) {
 80023e2:	2200      	movs	r2, #0
 80023e4:	e009      	b.n	80023fa <Chorus_init+0x72>
		delR.dline[var] = 0;
 80023e6:	1d13      	adds	r3, r2, #4
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	490a      	ldr	r1, [pc, #40]	; (8002414 <Chorus_init+0x8c>)
 80023ec:	4419      	add	r1, r3
 80023ee:	2000      	movs	r0, #0
 80023f0:	6008      	str	r0, [r1, #0]
		delL.dline[var] = 0;
 80023f2:	4907      	ldr	r1, [pc, #28]	; (8002410 <Chorus_init+0x88>)
 80023f4:	440b      	add	r3, r1
 80023f6:	6018      	str	r0, [r3, #0]
	for (int var = 0; var < DEPTH; ++var) {
 80023f8:	3201      	adds	r2, #1
 80023fa:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
 80023fe:	dbf2      	blt.n	80023e6 <Chorus_init+0x5e>
}
 8002400:	ecbd 8b02 	vpop	{d8}
 8002404:	bd08      	pop	{r3, pc}
 8002406:	bf00      	nop
 8002408:	be4ccccd 	.word	0xbe4ccccd
 800240c:	43700000 	.word	0x43700000
 8002410:	200010c8 	.word	0x200010c8
 8002414:	200026c0 	.word	0x200026c0
 8002418:	200010a8 	.word	0x200010a8
 800241c:	42480000 	.word	0x42480000
 8002420:	3de147ae 	.word	0x3de147ae
 8002424:	3df5c28f 	.word	0x3df5c28f
 8002428:	200139dc 	.word	0x200139dc
 800242c:	3fc90fdb 	.word	0x3fc90fdb

08002430 <delay_write>:
	return del->mix;
}
/*-------------------------------------------------------------------------------------------*/
void delay_write (monochorus_t *del, float xin)
{
	del->dline[del->in_idx] = xin;
 8002430:	68c3      	ldr	r3, [r0, #12]
 8002432:	1d1a      	adds	r2, r3, #4
 8002434:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002438:	ed82 0a00 	vstr	s0, [r2]

	(del->in_idx)++;
 800243c:	3301      	adds	r3, #1
 800243e:	60c3      	str	r3, [r0, #12]
	if (del->in_idx >= DEPTH)
 8002440:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002444:	db01      	blt.n	800244a <delay_write+0x1a>
		del->in_idx = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	60c3      	str	r3, [r0, #12]
}
 800244a:	4770      	bx	lr

0800244c <delay_read>:
/*-------------------------------------------------------------------------------------------*/
float delay_read (monochorus_t *del, float delay) // "delay" is a floating point number of samples
{
 800244c:	b510      	push	{r4, lr}
 800244e:	ed2d 8b02 	vpush	{d8}
 8002452:	4604      	mov	r4, r0
 8002454:	eeb0 8a40 	vmov.f32	s16, s0
	float y_n_2;	// y(n-2)
	float y_n_3;	// y(n-3)
	int32_t idx;

	d = delay;
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002458:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 800245c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	d501      	bpl.n	800246a <delay_read+0x1e>
 8002466:	eeb0 8a67 	vmov.f32	s16, s15
	if (d > DEPTH-MARGIN) d = DEPTH-MARGIN;
 800246a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8002550 <delay_read+0x104>
 800246e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	dd01      	ble.n	800247c <delay_read+0x30>
 8002478:	eeb0 8a67 	vmov.f32	s16, s15

	i = (int32_t)floorf(d);
 800247c:	eeb0 0a48 	vmov.f32	s0, s16
 8002480:	f005 f97c 	bl	800777c <floorf>
 8002484:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	f = d - i;
 8002488:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800248c:	ee38 8a67 	vsub.f32	s16, s16, s15

	idx = del->in_idx - i;
 8002490:	68e3      	ldr	r3, [r4, #12]
	if (idx < 0) idx += DEPTH;
 8002492:	ee10 2a10 	vmov	r2, s0
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	d44e      	bmi.n	8002538 <delay_read+0xec>
	y_n = del->dline[idx]; 		// y(n)
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80024a0:	ed92 6a00 	vldr	s12, [r2]

	idx--;
	if (idx < 0) idx += DEPTH;
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	d44a      	bmi.n	800253e <delay_read+0xf2>
	y_n_1 = del->dline[idx];	// y(n-1)
 80024a8:	1d13      	adds	r3, r2, #4
 80024aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80024ae:	ed93 4a00 	vldr	s8, [r3]

	idx--;
	if (idx < 0) idx += DEPTH;
 80024b2:	1e53      	subs	r3, r2, #1
 80024b4:	d446      	bmi.n	8002544 <delay_read+0xf8>
	y_n_2 = del->dline[idx];	// y(n-2)
 80024b6:	1d1a      	adds	r2, r3, #4
 80024b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80024bc:	edd2 4a00 	vldr	s9, [r2]

	idx--;
	if (idx < 0) idx += DEPTH;
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	d442      	bmi.n	800254a <delay_read+0xfe>
	y_n_3 = del->dline[idx];	// y(n-3)
 80024c4:	3204      	adds	r2, #4
 80024c6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80024ca:	ed94 5a00 	vldr	s10, [r4]
	//return (.5f)*(f-1)*(f-2)*y_n - f*(f-2)*y_n_1 + (.5f)*f*(f-1)*y_n_2 ; // 2nd order Lagrange interpolation

	//return .5f*(f-1)*((f-2)*y_n + f*y_n_2) - f*(f-2)*y_n_1 ;	// 2nd order Lagrange interpolation (faster)

	/* 3rd order Lagrange interpolation :  */
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80024ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024d2:	ee78 6a66 	vsub.f32	s13, s16, s13
 80024d6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80024da:	ee78 7a67 	vsub.f32	s15, s16, s15
 80024de:	ee66 5aa7 	vmul.f32	s11, s13, s15
 80024e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024e6:	ee38 7a47 	vsub.f32	s14, s16, s14
 80024ea:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002554 <delay_read+0x108>
 80024ee:	ee27 0a00 	vmul.f32	s0, s14, s0
 80024f2:	ee20 0a06 	vmul.f32	s0, s0, s12
 80024f6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80024fa:	ee28 6a06 	vmul.f32	s12, s16, s12
 80024fe:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002502:	ee30 0a06 	vadd.f32	s0, s0, s12
 8002506:	ee25 0a80 	vmul.f32	s0, s11, s0
 800250a:	ee27 8a08 	vmul.f32	s16, s14, s16
 800250e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002516:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800251a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002558 <delay_read+0x10c>
 800251e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002522:	ee66 6a85 	vmul.f32	s13, s13, s10
 8002526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252a:	ee68 7a27 	vmul.f32	s15, s16, s15

}
 800252e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002532:	ecbd 8b02 	vpop	{d8}
 8002536:	bd10      	pop	{r4, pc}
	if (idx < 0) idx += DEPTH;
 8002538:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 800253c:	e7ad      	b.n	800249a <delay_read+0x4e>
	if (idx < 0) idx += DEPTH;
 800253e:	f203 5277 	addw	r2, r3, #1399	; 0x577
 8002542:	e7b1      	b.n	80024a8 <delay_read+0x5c>
	if (idx < 0) idx += DEPTH;
 8002544:	f202 5377 	addw	r3, r2, #1399	; 0x577
 8002548:	e7b5      	b.n	80024b6 <delay_read+0x6a>
	if (idx < 0) idx += DEPTH;
 800254a:	f203 5277 	addw	r2, r3, #1399	; 0x577
 800254e:	e7b9      	b.n	80024c4 <delay_read+0x78>
 8002550:	44ae4000 	.word	0x44ae4000
 8002554:	be2aaaab 	.word	0xbe2aaaab
 8002558:	3e2aaaab 	.word	0x3e2aaaab

0800255c <mono_chorus_compute>:
/*---------------------------------------------------------------------------------------------*/

float mono_chorus_compute(monochorus_t *del, Lfo_t *lfo, float xin)
{
 800255c:	b510      	push	{r4, lr}
 800255e:	ed2d 8b04 	vpush	{d8-d9}
 8002562:	4604      	mov	r4, r0
 8002564:	eeb0 8a40 	vmov.f32	s16, s0
	float yout;
	float x1;
	float x2;

	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002568:	f500 53af 	add.w	r3, r0, #5600	; 0x15e0
 800256c:	edd3 8a04 	vldr	s17, [r3, #16]
 8002570:	4608      	mov	r0, r1
 8002572:	f7ff fdbf 	bl	80020f4 <Lfo_SampleCompute>
 8002576:	ee38 0a80 	vadd.f32	s0, s17, s0
 800257a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 800257e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002582:	4620      	mov	r0, r4
 8002584:	f7ff ff62 	bl	800244c <delay_read>
 8002588:	eeb0 9a40 	vmov.f32	s18, s0

	if (del->mode == 1)
 800258c:	f241 53f4 	movw	r3, #5620	; 0x15f4
 8002590:	56e3      	ldrsb	r3, [r4, r3]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d032      	beq.n	80025fc <mono_chorus_compute+0xa0>
		x1 = xin + del->fb * x2; // variable delay feedback signal or ...
	else
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal
 8002596:	edd4 8a01 	vldr	s17, [r4, #4]
 800259a:	f504 53af 	add.w	r3, r4, #5600	; 0x15e0
 800259e:	ed93 0a04 	vldr	s0, [r3, #16]
 80025a2:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80025a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff ff4e 	bl	800244c <delay_read>
 80025b0:	ee28 0a80 	vmul.f32	s0, s17, s0
 80025b4:	ee30 0a08 	vadd.f32	s0, s0, s16

	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 80025b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80025bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	dd01      	ble.n	80025ca <mono_chorus_compute+0x6e>
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
	x1 = (x1 < -1.0f) ? -1.0f : x1 ;
 80025ca:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80025ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80025d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d6:	d418      	bmi.n	800260a <mono_chorus_compute+0xae>

	yout = del->mix * x1 + del->fw * x2;
 80025d8:	ed94 8a00 	vldr	s16, [r4]
 80025dc:	ee28 8a00 	vmul.f32	s16, s16, s0
 80025e0:	edd4 7a02 	vldr	s15, [r4, #8]
 80025e4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80025e8:	ee38 8a27 	vadd.f32	s16, s16, s15
	//yout = del->mix * xin + del->fw * x2; // not good sounding...
	delay_write(del, x1);
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7ff ff1f 	bl	8002430 <delay_write>

	return yout;
}
 80025f2:	eeb0 0a48 	vmov.f32	s0, s16
 80025f6:	ecbd 8b04 	vpop	{d8-d9}
 80025fa:	bd10      	pop	{r4, pc}
		x1 = xin + del->fb * x2; // variable delay feedback signal or ...
 80025fc:	ed94 0a01 	vldr	s0, [r4, #4]
 8002600:	ee20 0a09 	vmul.f32	s0, s0, s18
 8002604:	ee30 0a08 	vadd.f32	s0, s0, s16
 8002608:	e7d6      	b.n	80025b8 <mono_chorus_compute+0x5c>
	x1 = (x1 < -1.0f) ? -1.0f : x1 ;
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	e7e3      	b.n	80025d8 <mono_chorus_compute+0x7c>

08002610 <stereoChorus_compute>:

/*--------------------This is the main stereo chorus function : ----------------------------*/

void stereoChorus_compute (float * left_out, float * right_out, float in)
{
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	ed2d 8b02 	vpush	{d8}
 8002616:	4606      	mov	r6, r0
 8002618:	460d      	mov	r5, r1
 800261a:	eeb0 8a40 	vmov.f32	s16, s0
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 800261e:	4c09      	ldr	r4, [pc, #36]	; (8002644 <stereoChorus_compute+0x34>)
 8002620:	4621      	mov	r1, r4
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <stereoChorus_compute+0x38>)
 8002624:	f7ff ff9a 	bl	800255c <mono_chorus_compute>
 8002628:	ed86 0a00 	vstr	s0, [r6]
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 800262c:	eeb0 0a48 	vmov.f32	s0, s16
 8002630:	f104 0110 	add.w	r1, r4, #16
 8002634:	4805      	ldr	r0, [pc, #20]	; (800264c <stereoChorus_compute+0x3c>)
 8002636:	f7ff ff91 	bl	800255c <mono_chorus_compute>
 800263a:	ed85 0a00 	vstr	s0, [r5]
}
 800263e:	ecbd 8b02 	vpop	{d8}
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	200010a8 	.word	0x200010a8
 8002648:	200010c8 	.word	0x200010c8
 800264c:	200026c0 	.word	0x200026c0

08002650 <Delay_init>:

/*-------------------------------------------------------------------------------------------*/
void Delay_init(void)
{
	/* initialize pointers positions for delay effect */
	shift = INIT_DELAY;
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <Delay_init+0x18>)
 8002652:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8002656:	601a      	str	r2, [r3, #0]
	readpos = delayline;
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <Delay_init+0x1c>)
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <Delay_init+0x20>)
 800265c:	601a      	str	r2, [r3, #0]
	writepos = delayline + INIT_DELAY;
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <Delay_init+0x24>)
 8002660:	4a05      	ldr	r2, [pc, #20]	; (8002678 <Delay_init+0x28>)
 8002662:	601a      	str	r2, [r3, #0]
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	200139e0 	.word	0x200139e0
 800266c:	200129d8 	.word	0x200129d8
 8002670:	20003f6c 	.word	0x20003f6c
 8002674:	200129dc 	.word	0x200129dc
 8002678:	20010a8c 	.word	0x20010a8c

0800267c <Delay_clean>:
/*-------------------------------------------------------------------------------------------*/
void Delay_clean(void)
{
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 800267c:	2300      	movs	r3, #0
 800267e:	e005      	b.n	800268c <Delay_clean+0x10>
		delayline[i] = 0;
 8002680:	4a05      	ldr	r2, [pc, #20]	; (8002698 <Delay_clean+0x1c>)
 8002682:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002686:	2100      	movs	r1, #0
 8002688:	6011      	str	r1, [r2, #0]
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 800268a:	3301      	adds	r3, #1
 800268c:	f643 2299 	movw	r2, #15001	; 0x3a99
 8002690:	4293      	cmp	r3, r2
 8002692:	ddf5      	ble.n	8002680 <Delay_clean+0x4>
}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20003f6c 	.word	0x20003f6c

0800269c <Delay_time_set>:
			readpos = pos + DELAYLINE_LEN - 1;
	}
}
/*-------------------------------------------------------------------------------------------*/
void Delay_time_set(uint8_t val)
{
 800269c:	b508      	push	{r3, lr}
	float 	*pos;
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 800269e:	ee07 0a90 	vmov	s15, r0
 80026a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80026e0 <Delay_time_set+0x44>
 80026aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80026ae:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80026e4 <Delay_time_set+0x48>
 80026b2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80026b6:	f005 f8a3 	bl	8007800 <lrintf>
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <Delay_time_set+0x4c>)
 80026bc:	6018      	str	r0, [r3, #0]
	pos = writepos - shift;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <Delay_time_set+0x50>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
	if (pos >= delayline)
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <Delay_time_set+0x54>)
 80026c8:	4298      	cmp	r0, r3
 80026ca:	d205      	bcs.n	80026d8 <Delay_time_set+0x3c>
		readpos = pos;
	else
		readpos = pos + DELAYLINE_LEN - 1;
 80026cc:	f500 406a 	add.w	r0, r0, #59904	; 0xea00
 80026d0:	305c      	adds	r0, #92	; 0x5c
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <Delay_time_set+0x58>)
 80026d4:	6018      	str	r0, [r3, #0]

}
 80026d6:	bd08      	pop	{r3, pc}
		readpos = pos;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <Delay_time_set+0x58>)
 80026da:	6018      	str	r0, [r3, #0]
 80026dc:	e7fb      	b.n	80026d6 <Delay_time_set+0x3a>
 80026de:	bf00      	nop
 80026e0:	42e84489 	.word	0x42e84489
 80026e4:	437a0000 	.word	0x437a0000
 80026e8:	200139e0 	.word	0x200139e0
 80026ec:	200129dc 	.word	0x200129dc
 80026f0:	20003f6c 	.word	0x20003f6c
 80026f4:	200129d8 	.word	0x200129d8

080026f8 <DelayFeedback_set>:
	fdb *= 0.95f ;//
}
/*-------------------------------------------------------------------------------------------*/
void DelayFeedback_set(uint8_t val)
{
	fdb = val / MIDI_MAX;
 80026f8:	ee07 0a90 	vmov	s15, r0
 80026fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002700:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8002710 <DelayFeedback_set+0x18>
 8002704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <DelayFeedback_set+0x1c>)
 800270a:	edc3 7a00 	vstr	s15, [r3]
}
 800270e:	4770      	bx	lr
 8002710:	42fe0000 	.word	0x42fe0000
 8002714:	20000000 	.word	0x20000000

08002718 <DelayWet_set>:
/*-------------------------------------------------------------------------------------------*/
void DelayWet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 8002718:	ee07 0a90 	vmov	s15, r0
 800271c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002720:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8002730 <DelayWet_set+0x18>
 8002724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002728:	4b02      	ldr	r3, [pc, #8]	; (8002734 <DelayWet_set+0x1c>)
 800272a:	edc3 7a00 	vstr	s15, [r3]
}
 800272e:	4770      	bx	lr
 8002730:	42fe0000 	.word	0x42fe0000
 8002734:	20000004 	.word	0x20000004

08002738 <Delay_compute>:
float Delay_compute (float x)
{
	float y, dy;

	// (*readpos) : delayed sample read at the output of the delay line
	dy = (1.f - coeff_a1)*(*readpos) + coeff_a1 * old_dy; // apply lowpass filter in the loop
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <Delay_compute+0xa8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80027e4 <Delay_compute+0xac>
 8002744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <Delay_compute+0xb0>)
 800274a:	ed92 7a00 	vldr	s14, [r2]
 800274e:	eddf 6a27 	vldr	s13, [pc, #156]	; 80027ec <Delay_compute+0xb4>
 8002752:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002756:	ee77 7a87 	vadd.f32	s15, s15, s14
	old_dy = dy;
 800275a:	edc2 7a00 	vstr	s15, [r2]
	y = x + fdb*dy;
 800275e:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <Delay_compute+0xb8>)
 8002760:	ed92 7a00 	vldr	s14, [r2]
 8002764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002768:	ee77 7a80 	vadd.f32	s15, s15, s0

	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 800276c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	dd01      	ble.n	800277e <Delay_compute+0x46>
 800277a:	eef0 7a47 	vmov.f32	s15, s14
	y = (y < -1.0f) ? -1.0f : y ;
 800277e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278a:	d425      	bmi.n	80027d8 <Delay_compute+0xa0>
	*writepos = y; // write new computed sample at the input of the delay line
 800278c:	4919      	ldr	r1, [pc, #100]	; (80027f4 <Delay_compute+0xbc>)
 800278e:	680a      	ldr	r2, [r1, #0]
 8002790:	ece2 7a01 	vstmia	r2!, {s15}

	/* update the delay line pointers : */
	writepos++;
 8002794:	600a      	str	r2, [r1, #0]
	readpos++;
 8002796:	3304      	adds	r3, #4
 8002798:	4911      	ldr	r1, [pc, #68]	; (80027e0 <Delay_compute+0xa8>)
 800279a:	600b      	str	r3, [r1, #0]

	if ((writepos - delayline) >= DELAYLINE_LEN)
 800279c:	4916      	ldr	r1, [pc, #88]	; (80027f8 <Delay_compute+0xc0>)
 800279e:	1a52      	subs	r2, r2, r1
 80027a0:	f64e 205c 	movw	r0, #59996	; 0xea5c
 80027a4:	4282      	cmp	r2, r0
 80027a6:	dd01      	ble.n	80027ac <Delay_compute+0x74>
		writepos = delayline; // wrap pointer
 80027a8:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <Delay_compute+0xbc>)
 80027aa:	6011      	str	r1, [r2, #0]

	if ((readpos - delayline) >= DELAYLINE_LEN)
 80027ac:	1a5b      	subs	r3, r3, r1
 80027ae:	f64e 225c 	movw	r2, #59996	; 0xea5c
 80027b2:	4293      	cmp	r3, r2
 80027b4:	dd02      	ble.n	80027bc <Delay_compute+0x84>
		readpos = delayline;  // wrap pointer
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <Delay_compute+0xa8>)
 80027b8:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <Delay_compute+0xc0>)
 80027ba:	601a      	str	r2, [r3, #0]

	return (wet * y + (1 - wet) * x);
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <Delay_compute+0xc4>)
 80027be:	edd3 6a00 	vldr	s13, [r3]
 80027c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027ca:	ee37 7a66 	vsub.f32	s14, s14, s13
 80027ce:	ee27 0a00 	vmul.f32	s0, s14, s0

}
 80027d2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80027d6:	4770      	bx	lr
	y = (y < -1.0f) ? -1.0f : y ;
 80027d8:	eef0 7a47 	vmov.f32	s15, s14
 80027dc:	e7d6      	b.n	800278c <Delay_compute+0x54>
 80027de:	bf00      	nop
 80027e0:	200129d8 	.word	0x200129d8
 80027e4:	3ecccccc 	.word	0x3ecccccc
 80027e8:	200129d4 	.word	0x200129d4
 80027ec:	3f19999a 	.word	0x3f19999a
 80027f0:	20000000 	.word	0x20000000
 80027f4:	200129dc 	.word	0x200129dc
 80027f8:	20003f6c 	.word	0x20003f6c
 80027fc:	20000004 	.word	0x20000004

08002800 <Drifter_amp_set>:
Drifter_t	d3 _CCM_ ;

/*-------------------------------------------------------------------------------------------*/
void	Drifter_amp_set(uint8_t val)
{
	d1.gain = d2.gain = d3.gain = (val / MIDI_MAX)*(val / MIDI_MAX);
 8002800:	ee07 0a90 	vmov	s15, r0
 8002804:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002808:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002824 <Drifter_amp_set+0x24>
 800280c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002810:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <Drifter_amp_set+0x28>)
 8002816:	edc3 7a02 	vstr	s15, [r3, #8]
 800281a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 800281e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

}
 8002822:	4770      	bx	lr
 8002824:	42fe0000 	.word	0x42fe0000
 8002828:	20003cb8 	.word	0x20003cb8

0800282c <Drifter_minFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_minFreq_set(uint8_t val)
{
	d1.fmin = d2.fmin = d3.fmin = .1f + 50 * val / MIDI_MAX;
 800282c:	2332      	movs	r3, #50	; 0x32
 800282e:	fb03 f000 	mul.w	r0, r3, r0
 8002832:	ee07 0a90 	vmov	s15, r0
 8002836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800283a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800285c <Drifter_minFreq_set+0x30>
 800283e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002842:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002860 <Drifter_minFreq_set+0x34>
 8002846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <Drifter_minFreq_set+0x38>)
 800284c:	edc3 7a01 	vstr	s15, [r3, #4]
 8002850:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8002854:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	42fe0000 	.word	0x42fe0000
 8002860:	3dcccccd 	.word	0x3dcccccd
 8002864:	20003cb8 	.word	0x20003cb8

08002868 <Drifter_maxFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_maxFreq_set(uint8_t val)
{
	float x;

	x = (1 + 19 * val / MIDI_MAX )* d1.fmin ;
 8002868:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800286c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002870:	ee07 0a90 	vmov	s15, r0
 8002874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002878:	eddf 6a11 	vldr	s13, [pc, #68]	; 80028c0 <Drifter_maxFreq_set+0x58>
 800287c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002880:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <Drifter_maxFreq_set+0x5c>)
 800288a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800288e:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (x > 10000)
 8002892:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80028c8 <Drifter_maxFreq_set+0x60>
 8002896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	dc07      	bgt.n	80028b0 <Drifter_maxFreq_set+0x48>
		d1.fmax = d2.fmax = d3.fmax = 10000;
	else {
		d1.fmax = d2.fmax = d3.fmax = x;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <Drifter_maxFreq_set+0x5c>)
 80028a2:	edc3 7a00 	vstr	s15, [r3]
 80028a6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80028aa:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	}
}
 80028ae:	4770      	bx	lr
		d1.fmax = d2.fmax = d3.fmax = 10000;
 80028b0:	ed83 7a00 	vstr	s14, [r3]
 80028b4:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
 80028b8:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	42fe0000 	.word	0x42fe0000
 80028c4:	20003cb8 	.word	0x20003cb8
 80028c8:	461c4000 	.word	0x461c4000

080028cc <drifter_newSegment>:

/*-------------------------------------------------------------------------------------------*/
void drifter_newSegment(Drifter_t *d) //
{
 80028cc:	b510      	push	{r4, lr}
 80028ce:	4604      	mov	r4, r0
	d->n = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	6183      	str	r3, [r0, #24]
	d->initial = d->final;
 80028d4:	6a03      	ldr	r3, [r0, #32]
 80028d6:	61c3      	str	r3, [r0, #28]
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 80028d8:	ed90 7a00 	vldr	s14, [r0]
 80028dc:	eddf 7a13 	vldr	s15, [pc, #76]	; 800292c <drifter_newSegment+0x60>
 80028e0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80028e4:	ed80 0a03 	vstr	s0, [r0, #12]
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 80028e8:	ed90 7a01 	vldr	s14, [r0, #4]
 80028ec:	eec7 0a87 	vdiv.f32	s1, s15, s14
 80028f0:	edc0 0a04 	vstr	s1, [r0, #16]
	d->length = frand_a_b(d->minLength,d->maxLength);
 80028f4:	f001 f992 	bl	8003c1c <frand_a_b>
 80028f8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80028fc:	ed84 0a05 	vstr	s0, [r4, #20]
	d->final = frand_a_b(-1, 1);
 8002900:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002904:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002908:	f001 f988 	bl	8003c1c <frand_a_b>
 800290c:	ed84 0a08 	vstr	s0, [r4, #32]
	d->slope = (d->final - d->initial) / d->length ;
 8002910:	edd4 7a07 	vldr	s15, [r4, #28]
 8002914:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002918:	edd4 7a05 	vldr	s15, [r4, #20]
 800291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002920:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8002924:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 8002928:	bd10      	pop	{r4, pc}
 800292a:	bf00      	nop
 800292c:	46ac4400 	.word	0x46ac4400

08002930 <drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float drifter_nextSample(Drifter_t *d) //
{
 8002930:	b510      	push	{r4, lr}
 8002932:	4604      	mov	r4, r0
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002934:	ed90 7a02 	vldr	s14, [r0, #8]
 8002938:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
 800293c:	edd0 7a06 	vldr	s15, [r0, #24]
 8002940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002944:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002948:	edd0 6a07 	vldr	s13, [r0, #28]
 800294c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
	(d->n)++;
 8002958:	6983      	ldr	r3, [r0, #24]
 800295a:	3301      	adds	r3, #1
 800295c:	6183      	str	r3, [r0, #24]
	if (d->n >= d->length)
 800295e:	6942      	ldr	r2, [r0, #20]
 8002960:	4293      	cmp	r3, r2
 8002962:	d202      	bcs.n	800296a <drifter_nextSample+0x3a>
		{
			drifter_newSegment(d);
		}
	return d->out;
}
 8002964:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8002968:	bd10      	pop	{r4, pc}
			drifter_newSegment(d);
 800296a:	f7ff ffaf 	bl	80028cc <drifter_newSegment>
 800296e:	e7f9      	b.n	8002964 <drifter_nextSample+0x34>

08002970 <d1_drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float d1_drifter_nextSample(void) //
{
 8002970:	b508      	push	{r3, lr}
	return drifter_nextSample(&d1);
 8002972:	4802      	ldr	r0, [pc, #8]	; (800297c <d1_drifter_nextSample+0xc>)
 8002974:	f7ff ffdc 	bl	8002930 <drifter_nextSample>
}
 8002978:	bd08      	pop	{r3, pc}
 800297a:	bf00      	nop
 800297c:	20003d10 	.word	0x20003d10

08002980 <d2_drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float d2_drifter_nextSample(void) //
{
 8002980:	b508      	push	{r3, lr}
	return drifter_nextSample(&d2);
 8002982:	4802      	ldr	r0, [pc, #8]	; (800298c <d2_drifter_nextSample+0xc>)
 8002984:	f7ff ffd4 	bl	8002930 <drifter_nextSample>
}
 8002988:	bd08      	pop	{r3, pc}
 800298a:	bf00      	nop
 800298c:	20003ce4 	.word	0x20003ce4

08002990 <drifter_prepare>:
/*---------------------------------------------------------------------------------------------*/
void drifter_prepare(Drifter_t *d)
{
 8002990:	b508      	push	{r3, lr}
	d->final = 0;
 8002992:	2200      	movs	r2, #0
 8002994:	6202      	str	r2, [r0, #32]
	d->fmax = 4;
 8002996:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800299a:	6002      	str	r2, [r0, #0]
	d->fmin = 2;
 800299c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a0:	6042      	str	r2, [r0, #4]
	d->gain = .01f;
 80029a2:	4a02      	ldr	r2, [pc, #8]	; (80029ac <drifter_prepare+0x1c>)
 80029a4:	6082      	str	r2, [r0, #8]

	drifter_newSegment(d);
 80029a6:	f7ff ff91 	bl	80028cc <drifter_newSegment>
}
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	3c23d70a 	.word	0x3c23d70a

080029b0 <drifter_init>:
/*---------------------------------------------------------------------------------------------*/
void drifter_init(void)
{
 80029b0:	b510      	push	{r4, lr}
	drifter_prepare(&d1);
 80029b2:	4c06      	ldr	r4, [pc, #24]	; (80029cc <drifter_init+0x1c>)
 80029b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80029b8:	f7ff ffea 	bl	8002990 <drifter_prepare>
	drifter_prepare(&d2);
 80029bc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80029c0:	f7ff ffe6 	bl	8002990 <drifter_prepare>
	drifter_prepare(&d3);
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7ff ffe3 	bl	8002990 <drifter_prepare>
}
 80029ca:	bd10      	pop	{r4, pc}
 80029cc:	20003cb8 	.word	0x20003cb8

080029d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029d4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d6:	2400      	movs	r4, #0
 80029d8:	9405      	str	r4, [sp, #20]
 80029da:	9406      	str	r4, [sp, #24]
 80029dc:	9407      	str	r4, [sp, #28]
 80029de:	9408      	str	r4, [sp, #32]
 80029e0:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e2:	9401      	str	r4, [sp, #4]
 80029e4:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <MX_GPIO_Init+0x118>)
 80029e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
 80029ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80029f4:	9201      	str	r2, [sp, #4]
 80029f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f8:	9402      	str	r4, [sp, #8]
 80029fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fc:	f042 0204 	orr.w	r2, r2, #4
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
 8002a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a04:	f002 0204 	and.w	r2, r2, #4
 8002a08:	9202      	str	r2, [sp, #8]
 8002a0a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	9403      	str	r4, [sp, #12]
 8002a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
 8002a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a18:	f002 0201 	and.w	r2, r2, #1
 8002a1c:	9203      	str	r2, [sp, #12]
 8002a1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	9404      	str	r4, [sp, #16]
 8002a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a24:	f042 0202 	orr.w	r2, r2, #2
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	9304      	str	r3, [sp, #16]
 8002a32:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8002a34:	4d2d      	ldr	r5, [pc, #180]	; (8002aec <MX_GPIO_Init+0x11c>)
 8002a36:	4622      	mov	r2, r4
 8002a38:	2114      	movs	r1, #20
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f003 f9d1 	bl	8005de2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8002a40:	2314      	movs	r3, #20
 8002a42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	a905      	add	r1, sp, #20
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f003 f8dc 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_BTN_Pin */
  GPIO_InitStruct.Pin = FIRE_BTN_Pin;
 8002a54:	2720      	movs	r7, #32
 8002a56:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a58:	4e25      	ldr	r6, [pc, #148]	; (8002af0 <MX_GPIO_Init+0x120>)
 8002a5a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(FIRE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002a5e:	a905      	add	r1, sp, #20
 8002a60:	4628      	mov	r0, r5
 8002a62:	f003 f8d3 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SND_SW1_Pin SND_SW2_Pin */
  GPIO_InitStruct.Pin = SND_SW1_Pin|SND_SW2_Pin;
 8002a66:	23c0      	movs	r3, #192	; 0xc0
 8002a68:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a6a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002af8 <MX_GPIO_Init+0x128>
 8002a6e:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	a905      	add	r1, sp, #20
 8002a76:	4628      	mov	r0, r5
 8002a78:	f003 f8c8 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SND_SW3_Pin */
  GPIO_InitStruct.Pin = SND_SW3_Pin;
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a80:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SND_SW3_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a8a:	a905      	add	r1, sp, #20
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f003 f8bd 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SND_SW4_Pin */
  GPIO_InitStruct.Pin = SND_SW4_Pin;
 8002a92:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a94:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SND_SW4_GPIO_Port, &GPIO_InitStruct);
 8002a98:	a905      	add	r1, sp, #20
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	f003 f8b6 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : HOLD_SW_Pin */
  GPIO_InitStruct.Pin = HOLD_SW_Pin;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002aa4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HOLD_SW_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	a905      	add	r1, sp, #20
 8002aaa:	4812      	ldr	r0, [pc, #72]	; (8002af4 <MX_GPIO_Init+0x124>)
 8002aac:	f003 f8ae 	bl	8005c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	2008      	movs	r0, #8
 8002ab6:	f002 fe4b 	bl	8005750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002aba:	2008      	movs	r0, #8
 8002abc:	f002 fe7c 	bl	80057b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	200a      	movs	r0, #10
 8002ac6:	f002 fe43 	bl	8005750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002aca:	200a      	movs	r0, #10
 8002acc:	f002 fe74 	bl	80057b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	2017      	movs	r0, #23
 8002ad6:	f002 fe3b 	bl	8005750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ada:	2017      	movs	r0, #23
 8002adc:	f002 fe6c 	bl	80057b8 <HAL_NVIC_EnableIRQ>

}
 8002ae0:	b00a      	add	sp, #40	; 0x28
 8002ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	10310000 	.word	0x10310000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	10110000 	.word	0x10110000

08002afc <MX_DMA_Init>:
{
 8002afc:	b510      	push	{r4, lr}
 8002afe:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b00:	2400      	movs	r4, #0
 8002b02:	9400      	str	r4, [sp, #0]
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <MX_DMA_Init+0x54>)
 8002b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b08:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b10:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002b14:	9200      	str	r2, [sp, #0]
 8002b16:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b18:	9401      	str	r4, [sp, #4]
 8002b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	4621      	mov	r1, r4
 8002b30:	200f      	movs	r0, #15
 8002b32:	f002 fe0d 	bl	8005750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002b36:	200f      	movs	r0, #15
 8002b38:	f002 fe3e 	bl	80057b8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	4621      	mov	r1, r4
 8002b40:	2038      	movs	r0, #56	; 0x38
 8002b42:	f002 fe05 	bl	8005750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b46:	2038      	movs	r0, #56	; 0x38
 8002b48:	f002 fe36 	bl	80057b8 <HAL_NVIC_EnableIRQ>
}
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd10      	pop	{r4, pc}
 8002b50:	40023800 	.word	0x40023800

08002b54 <MX_ADC1_Init>:
{
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b58:	2500      	movs	r5, #0
 8002b5a:	9500      	str	r5, [sp, #0]
 8002b5c:	9501      	str	r5, [sp, #4]
 8002b5e:	9502      	str	r5, [sp, #8]
 8002b60:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 8002b62:	4c1c      	ldr	r4, [pc, #112]	; (8002bd4 <MX_ADC1_Init+0x80>)
 8002b64:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <MX_ADC1_Init+0x84>)
 8002b66:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6c:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b6e:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b70:	2601      	movs	r6, #1
 8002b72:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b74:	7626      	strb	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b76:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b7a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b7c:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <MX_ADC1_Init+0x88>)
 8002b7e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b80:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002b82:	2704      	movs	r7, #4
 8002b84:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b86:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b8a:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f002 fbcd 	bl	800532c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_10;
 8002b92:	230a      	movs	r3, #10
 8002b94:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8002b96:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b98:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b9a:	4669      	mov	r1, sp
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f002 fcfd 	bl	800559c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_11;
 8002ba2:	230b      	movs	r3, #11
 8002ba4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002baa:	4669      	mov	r1, sp
 8002bac:	4620      	mov	r0, r4
 8002bae:	f002 fcf5 	bl	800559c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_12;
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bba:	4669      	mov	r1, sp
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f002 fced 	bl	800559c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_13;
 8002bc2:	230d      	movs	r3, #13
 8002bc4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8002bc6:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bc8:	4669      	mov	r1, sp
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f002 fce6 	bl	800559c <HAL_ADC_ConfigChannel>
}
 8002bd0:	b005      	add	sp, #20
 8002bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd4:	20013a38 	.word	0x20013a38
 8002bd8:	40012000 	.word	0x40012000
 8002bdc:	0f000001 	.word	0x0f000001

08002be0 <MX_I2C2_Init>:
{
 8002be0:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8002be2:	4809      	ldr	r0, [pc, #36]	; (8002c08 <MX_I2C2_Init+0x28>)
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_I2C2_Init+0x2c>)
 8002be6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_I2C2_Init+0x30>)
 8002bea:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bec:	2300      	movs	r3, #0
 8002bee:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002bf0:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf6:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf8:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002bfa:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bfc:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bfe:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c00:	f003 fa5a 	bl	80060b8 <HAL_I2C_Init>
}
 8002c04:	bd08      	pop	{r3, pc}
 8002c06:	bf00      	nop
 8002c08:	200139e4 	.word	0x200139e4
 8002c0c:	40005800 	.word	0x40005800
 8002c10:	000186a0 	.word	0x000186a0

08002c14 <MX_I2S2_Init>:
{
 8002c14:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 8002c16:	480a      	ldr	r0, [pc, #40]	; (8002c40 <MX_I2S2_Init+0x2c>)
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <MX_I2S2_Init+0x30>)
 8002c1a:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c20:	6042      	str	r2, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002c22:	2300      	movs	r3, #0
 8002c24:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002c26:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002c28:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002c2a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002c2e:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002c30:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002c32:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002c38:	f003 fbd2 	bl	80063e0 <HAL_I2S_Init>
}
 8002c3c:	bd08      	pop	{r3, pc}
 8002c3e:	bf00      	nop
 8002c40:	20013b90 	.word	0x20013b90
 8002c44:	40003800 	.word	0x40003800

08002c48 <MX_USART1_UART_Init>:
{
 8002c48:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002c4a:	4808      	ldr	r0, [pc, #32]	; (8002c6c <MX_USART1_UART_Init+0x24>)
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <MX_USART1_UART_Init+0x28>)
 8002c4e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002c50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c54:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c56:	2300      	movs	r3, #0
 8002c58:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c5a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c5c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c5e:	220c      	movs	r2, #12
 8002c60:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c64:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c66:	f004 fc73 	bl	8007550 <HAL_UART_Init>
}
 8002c6a:	bd08      	pop	{r3, pc}
 8002c6c:	20013a80 	.word	0x20013a80
 8002c70:	40011000 	.word	0x40011000

08002c74 <MX_RNG_Init>:
{
 8002c74:	b508      	push	{r3, lr}
  hrng.Instance = RNG;
 8002c76:	4803      	ldr	r0, [pc, #12]	; (8002c84 <MX_RNG_Init+0x10>)
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <MX_RNG_Init+0x14>)
 8002c7a:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002c7c:	f004 fb44 	bl	8007308 <HAL_RNG_Init>
}
 8002c80:	bd08      	pop	{r3, pc}
 8002c82:	bf00      	nop
 8002c84:	20013b20 	.word	0x20013b20
 8002c88:	50060800 	.word	0x50060800

08002c8c <SystemClock_Config>:
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c90:	2230      	movs	r2, #48	; 0x30
 8002c92:	2100      	movs	r1, #0
 8002c94:	eb0d 0002 	add.w	r0, sp, r2
 8002c98:	f004 fcbf 	bl	800761a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	9407      	str	r4, [sp, #28]
 8002ca0:	9408      	str	r4, [sp, #32]
 8002ca2:	9409      	str	r4, [sp, #36]	; 0x24
 8002ca4:	940a      	str	r4, [sp, #40]	; 0x28
 8002ca6:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca8:	9403      	str	r4, [sp, #12]
 8002caa:	9404      	str	r4, [sp, #16]
 8002cac:	9405      	str	r4, [sp, #20]
 8002cae:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	9401      	str	r4, [sp, #4]
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <SystemClock_Config+0xac>)
 8002cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc6:	9402      	str	r4, [sp, #8]
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <SystemClock_Config+0xb0>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cdc:	2601      	movs	r6, #1
 8002cde:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce6:	2502      	movs	r5, #2
 8002ce8:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cee:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002cf0:	2319      	movs	r3, #25
 8002cf2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002cf4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002cf8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cfa:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d00:	a80c      	add	r0, sp, #48	; 0x30
 8002d02:	f003 fefd 	bl	8006b00 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d06:	230f      	movs	r3, #15
 8002d08:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d0a:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d0c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d12:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d18:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d1a:	2105      	movs	r1, #5
 8002d1c:	a807      	add	r0, sp, #28
 8002d1e:	f004 f939 	bl	8006f94 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002d22:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 144;
 8002d24:	2390      	movs	r3, #144	; 0x90
 8002d26:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d2c:	a803      	add	r0, sp, #12
 8002d2e:	f004 fa07 	bl	8007140 <HAL_RCCEx_PeriphCLKConfig>
}
 8002d32:	b018      	add	sp, #96	; 0x60
 8002d34:	bd70      	pop	{r4, r5, r6, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000

08002d40 <main>:
{
 8002d40:	b508      	push	{r3, lr}
  HAL_Init();
 8002d42:	f002 fa19 	bl	8005178 <HAL_Init>
  SystemClock_Config();
 8002d46:	f7ff ffa1 	bl	8002c8c <SystemClock_Config>
  MX_GPIO_Init();
 8002d4a:	f7ff fe41 	bl	80029d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d4e:	f7ff fed5 	bl	8002afc <MX_DMA_Init>
  MX_ADC1_Init();
 8002d52:	f7ff feff 	bl	8002b54 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002d56:	f7ff ff43 	bl	8002be0 <MX_I2C2_Init>
  MX_I2S2_Init();
 8002d5a:	f7ff ff5b 	bl	8002c14 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8002d5e:	f7ff ff73 	bl	8002c48 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8002d62:	f7ff ff87 	bl	8002c74 <MX_RNG_Init>
  PS_Interface_Init();
 8002d66:	f7fe f9d3 	bl	8001110 <PS_Interface_Init>
  Synth_Init();
 8002d6a:	f001 fc67 	bl	800463c <Synth_Init>
  WM8731_Init();
 8002d6e:	f002 f991 	bl	8005094 <WM8731_Init>
    PS_Application();
 8002d72:	f7fe f84f 	bl	8000e14 <PS_Application>
    PS_Interface_Loop();
 8002d76:	f7fe f997 	bl	80010a8 <PS_Interface_Loop>
 8002d7a:	e7fa      	b.n	8002d72 <main+0x32>

08002d7c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d7c:	4770      	bx	lr
	...

08002d80 <Lin2Exp>:
}
//------------------------------------------------------------------------------------
// input val in 0 ... 127
// output is an exponential between min and max
float	Lin2Exp(uint8_t val, float min, float max)
{
 8002d80:	b508      	push	{r3, lr}
 8002d82:	ed2d 8b02 	vpush	{d8}
 8002d86:	eeb0 8a40 	vmov.f32	s16, s0
	return min * powf(max / min, val / MIDI_MAX);
 8002d8a:	ee07 0a90 	vmov	s15, r0
 8002d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d92:	ee80 0a88 	vdiv.f32	s0, s1, s16
 8002d96:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002dac <Lin2Exp+0x2c>
 8002d9a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8002d9e:	f004 fe0b 	bl	80079b8 <powf>
}
 8002da2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002da6:	ecbd 8b02 	vpop	{d8}
 8002daa:	bd08      	pop	{r3, pc}
 8002dac:	42fe0000 	.word	0x42fe0000

08002db0 <tanhXdX>:
//------------------------------------------------------------------------------------

float tanhXdX(float x)
{
	float a = x*x;
 8002db0:	ee20 0a00 	vmul.f32	s0, s0, s0
	// IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)
	x = ((a + 105)*a + 945) / ((15*a + 420)*a + 945);
 8002db4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002de8 <tanhXdX+0x38>
 8002db8:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002dbc:	ee27 7a00 	vmul.f32	s14, s14, s0
 8002dc0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002dec <tanhXdX+0x3c>
 8002dc4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002dc8:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002dcc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002dd0:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8002df0 <tanhXdX+0x40>
 8002dd4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002dd8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002ddc:	ee30 0a26 	vadd.f32	s0, s0, s13
	return x;
}
 8002de0:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	42d20000 	.word	0x42d20000
 8002dec:	446c4000 	.word	0x446c4000
 8002df0:	43d20000 	.word	0x43d20000

08002df4 <fastTanh>:

//------------------------------------------------------------------------------------
float fastTanh(float var)
{
	if(var < -1.95f)     return -1.0f;
 8002df4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002e38 <fastTanh+0x44>
 8002df8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	d413      	bmi.n	8002e2a <fastTanh+0x36>
	else if(var > 1.95f) return  1.0f;
 8002e02:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8002e3c <fastTanh+0x48>
 8002e06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	dc0f      	bgt.n	8002e30 <fastTanh+0x3c>
	else return  4.15f*var/(4.29f+var*var);
 8002e10:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002e40 <fastTanh+0x4c>
 8002e14:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002e18:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002e1c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002e44 <fastTanh+0x50>
 8002e20:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002e24:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8002e28:	4770      	bx	lr
	if(var < -1.95f)     return -1.0f;
 8002e2a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002e2e:	4770      	bx	lr
	else if(var > 1.95f) return  1.0f;
 8002e30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	bff9999a 	.word	0xbff9999a
 8002e3c:	3ff9999a 	.word	0x3ff9999a
 8002e40:	4084cccd 	.word	0x4084cccd
 8002e44:	408947ae 	.word	0x408947ae

08002e48 <softClipTwo>:
//------------------------------------------------------------------------------------
float 	softClipTwo(float in)
{
 8002e48:	b508      	push	{r3, lr}
 8002e4a:	ed2d 8b02 	vpush	{d8}
 8002e4e:	eeb0 8a40 	vmov.f32	s16, s0
	return in * tanhXdX(0.5*in);
 8002e52:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002e56:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002e5a:	f7ff ffa9 	bl	8002db0 <tanhXdX>
}
 8002e5e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002e62:	ecbd 8b02 	vpop	{d8}
 8002e66:	bd08      	pop	{r3, pc}

08002e68 <fastTan>:
//------------------------------------------------------------------------------------
float 	fastTan(float x)
{
	float A = -15*x+x*x*x;
 8002e68:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002e6c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002e70:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002e74:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002e78:	ee37 7a27 	vadd.f32	s14, s14, s15
	float B = 3*(-5+2*x*x);
 8002e7c:	ee70 7a00 	vadd.f32	s15, s0, s0
 8002e80:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002e84:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8002e88:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002e8c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8002e90:	ee20 0a27 	vmul.f32	s0, s0, s15
	return A/B;
}
 8002e94:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8002e98:	4770      	bx	lr

08002e9a <osc_init>:
/*===============================================================================================================*/

void
osc_init(Oscillator_t * op, float_t amp, float_t freq)
{
	op->amp = amp;
 8002e9a:	ed80 0a00 	vstr	s0, [r0]
	op->last_amp = amp;
 8002e9e:	ed80 0a01 	vstr	s0, [r0, #4]
	op->freq = freq;
 8002ea2:	edc0 0a02 	vstr	s1, [r0, #8]
	op->phase = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60c3      	str	r3, [r0, #12]
	op->out = 0;
 8002eaa:	61c3      	str	r3, [r0, #28]
	op->modInd = 0;
 8002eac:	6143      	str	r3, [r0, #20]
	op->mul = 1;
 8002eae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002eb2:	6183      	str	r3, [r0, #24]
}
 8002eb4:	4770      	bx	lr

08002eb6 <OpSetFreq>:
/*-------------------------------------------------------*/

void
OpSetFreq(Oscillator_t * op, float_t f)
{
	op->freq = f;
 8002eb6:	ed80 0a02 	vstr	s0, [r0, #8]
}
 8002eba:	4770      	bx	lr

08002ebc <Drifter_centralFreq_set>:

/*---------------------------------------------------------------*/
void	Drifter_centralFreq_set(uint8_t val)
{
 8002ebc:	b508      	push	{r3, lr}
	centralFreq = Lin2Exp(val, 1, 6000);
 8002ebe:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002ed4 <Drifter_centralFreq_set+0x18>
 8002ec2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ec6:	f7ff ff5b 	bl	8002d80 <Lin2Exp>
 8002eca:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <Drifter_centralFreq_set+0x1c>)
 8002ecc:	ed83 0a00 	vstr	s0, [r3]
}
 8002ed0:	bd08      	pop	{r3, pc}
 8002ed2:	bf00      	nop
 8002ed4:	45bb8000 	.word	0x45bb8000
 8002ed8:	20000008 	.word	0x20000008

08002edc <FM_op_freq_set>:
}


/*---------------------------------------------------------------*/
void FM_op_freq_set(Oscillator_t *op, uint8_t val)
{
 8002edc:	b510      	push	{r4, lr}
 8002ede:	4604      	mov	r4, r0
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 8002ee0:	eddf 0a04 	vldr	s1, [pc, #16]	; 8002ef4 <FM_op_freq_set+0x18>
 8002ee4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002ee8:	4608      	mov	r0, r1
 8002eea:	f7ff ff49 	bl	8002d80 <Lin2Exp>
 8002eee:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002ef2:	bd10      	pop	{r4, pc}
 8002ef4:	45fa0000 	.word	0x45fa0000

08002ef8 <FM_op_modInd_set>:
/*-------------------------------------------------------*/
void FM_op_modInd_set(Oscillator_t *op, uint8_t val)
{
	op->modInd = (1.4f * val / MIDI_MAX) * (1.4f * val / MIDI_MAX);
 8002ef8:	ee07 1a90 	vmov	s15, r1
 8002efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f00:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002f1c <FM_op_modInd_set+0x24>
 8002f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f08:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002f20 <FM_op_modInd_set+0x28>
 8002f0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f14:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	3fb33333 	.word	0x3fb33333
 8002f20:	42fe0000 	.word	0x42fe0000

08002f24 <OpSampleCompute0>:

	return  0.5f * (op1.out + op3.out);
}
/*----------------------------------------------------------------------------------------------*/
float_t OpSampleCompute0(Oscillator_t * op) // accurate sine
{
 8002f24:	b510      	push	{r4, lr}
 8002f26:	ed2d 8b02 	vpush	{d8}
 8002f2a:	4604      	mov	r4, r0
	float_t z;


	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8002f2c:	e005      	b.n	8002f3a <OpSampleCompute0+0x16>
		op->phase -= _2PI;
 8002f2e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002f7c <OpSampleCompute0+0x58>
 8002f32:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002f36:	ed84 8a03 	vstr	s16, [r4, #12]
	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8002f3a:	ed94 8a03 	vldr	s16, [r4, #12]
 8002f3e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002f7c <OpSampleCompute0+0x58>
 8002f42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4a:	daf0      	bge.n	8002f2e <OpSampleCompute0+0xa>

	z = sinf(op->phase);
 8002f4c:	eeb0 0a48 	vmov.f32	s0, s16
 8002f50:	f004 fcf0 	bl	8007934 <sinf>
	op->out = op->amp*z;
 8002f54:	edd4 7a00 	vldr	s15, [r4]
 8002f58:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002f5c:	ed84 0a07 	vstr	s0, [r4, #28]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8002f60:	edd4 7a02 	vldr	s15, [r4, #8]
 8002f64:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002f80 <OpSampleCompute0+0x5c>
 8002f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f6c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002f70:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 8002f74:	ecbd 8b02 	vpop	{d8}
 8002f78:	bd10      	pop	{r4, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40c90fdb 	.word	0x40c90fdb
 8002f80:	39156592 	.word	0x39156592

08002f84 <Osc_WT_SINE_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_WT_SINE_SampleCompute(Oscillator_t * op) // basic wave table sine
{
 8002f84:	b510      	push	{r4, lr}
 8002f86:	ed2d 8b02 	vpush	{d8}
 8002f8a:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002f8c:	e005      	b.n	8002f9a <Osc_WT_SINE_SampleCompute+0x16>
		op->phase += _2PI;
 8002f8e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003008 <Osc_WT_SINE_SampleCompute+0x84>
 8002f92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f96:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8002f9a:	edd4 7a03 	vldr	s15, [r4, #12]
 8002f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	d4f2      	bmi.n	8002f8e <Osc_WT_SINE_SampleCompute+0xa>
 8002fa8:	e005      	b.n	8002fb6 <Osc_WT_SINE_SampleCompute+0x32>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 8002faa:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003008 <Osc_WT_SINE_SampleCompute+0x84>
 8002fae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002fb2:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase >= _2PI)
 8002fb6:	edd4 7a03 	vldr	s15, [r4, #12]
 8002fba:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003008 <Osc_WT_SINE_SampleCompute+0x84>
 8002fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	daf0      	bge.n	8002faa <Osc_WT_SINE_SampleCompute+0x26>

	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8002fc8:	ed94 8a00 	vldr	s16, [r4]
 8002fcc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800300c <Osc_WT_SINE_SampleCompute+0x88>
 8002fd0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002fd4:	f004 fc14 	bl	8007800 <lrintf>
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <Osc_WT_SINE_SampleCompute+0x8c>)
 8002fda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002fde:	ed90 0a00 	vldr	s0, [r0]
 8002fe2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002fe6:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8002fea:	edd4 7a02 	vldr	s15, [r4, #8]
 8002fee:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003014 <Osc_WT_SINE_SampleCompute+0x90>
 8002ff2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ff6:	edd4 7a03 	vldr	s15, [r4, #12]
 8002ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ffe:	edc4 7a03 	vstr	s15, [r4, #12]

	return op->out;
}
 8003002:	ecbd 8b02 	vpop	{d8}
 8003006:	bd10      	pop	{r4, pc}
 8003008:	40c90fdb 	.word	0x40c90fdb
 800300c:	4322f983 	.word	0x4322f983
 8003010:	080164f0 	.word	0x080164f0
 8003014:	39156592 	.word	0x39156592

08003018 <Osc_FM_sine_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_FM_sine_SampleCompute(Oscillator_t * op, float FMinput) // basic wave table sine with FM
{
 8003018:	b510      	push	{r4, lr}
 800301a:	ed2d 8b02 	vpush	{d8}
 800301e:	4604      	mov	r4, r0

	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 8003020:	edd0 7a02 	vldr	s15, [r0, #8]
 8003024:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80030a8 <Osc_FM_sine_SampleCompute+0x90>
 8003028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302c:	ed90 7a05 	vldr	s14, [r0, #20]
 8003030:	ee27 0a00 	vmul.f32	s0, s14, s0
 8003034:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003038:	ed90 0a03 	vldr	s0, [r0, #12]
 800303c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003040:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003044:	e005      	b.n	8003052 <Osc_FM_sine_SampleCompute+0x3a>
		op->phase += _2PI;
 8003046:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80030ac <Osc_FM_sine_SampleCompute+0x94>
 800304a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800304e:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003052:	edd4 7a03 	vldr	s15, [r4, #12]
 8003056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	d4f2      	bmi.n	8003046 <Osc_FM_sine_SampleCompute+0x2e>
 8003060:	e005      	b.n	800306e <Osc_FM_sine_SampleCompute+0x56>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 8003062:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80030ac <Osc_FM_sine_SampleCompute+0x94>
 8003066:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800306a:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase >= _2PI)
 800306e:	edd4 7a03 	vldr	s15, [r4, #12]
 8003072:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80030ac <Osc_FM_sine_SampleCompute+0x94>
 8003076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	daf0      	bge.n	8003062 <Osc_FM_sine_SampleCompute+0x4a>
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8003080:	ed94 8a00 	vldr	s16, [r4]
 8003084:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80030b0 <Osc_FM_sine_SampleCompute+0x98>
 8003088:	ee27 0a80 	vmul.f32	s0, s15, s0
 800308c:	f004 fbb8 	bl	8007800 <lrintf>
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <Osc_FM_sine_SampleCompute+0x9c>)
 8003092:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003096:	ed90 0a00 	vldr	s0, [r0]
 800309a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800309e:	ed84 0a07 	vstr	s0, [r4, #28]
	return op->out;
}
 80030a2:	ecbd 8b02 	vpop	{d8}
 80030a6:	bd10      	pop	{r4, pc}
 80030a8:	39156592 	.word	0x39156592
 80030ac:	40c90fdb 	.word	0x40c90fdb
 80030b0:	4322f983 	.word	0x4322f983
 80030b4:	080164f0 	.word	0x080164f0

080030b8 <FM2_sampleCompute>:
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	ed2d 8b02 	vpush	{d8}
	op1.freq = frq;
 80030be:	4c1b      	ldr	r4, [pc, #108]	; (800312c <FM2_sampleCompute+0x74>)
 80030c0:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
	op2.freq = op2.mul * frq;
 80030c4:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80030c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80030cc:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
	op3.freq = op3.mul * frq;
 80030d0:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80030d4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80030d8:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	op4.freq = op4.mul * frq;
 80030dc:	edd4 7a06 	vldr	s15, [r4, #24]
 80030e0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80030e4:	ed84 0a02 	vstr	s0, [r4, #8]
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 80030e8:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8003130 <FM2_sampleCompute+0x78>
 80030ec:	eeb0 0a48 	vmov.f32	s0, s16
 80030f0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80030f4:	f7ff ff90 	bl	8003018 <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op1, in);
 80030f8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80030fc:	f7ff ff8c 	bl	8003018 <Osc_FM_sine_SampleCompute>
	in = Osc_FM_sine_SampleCompute(&op4, 0);
 8003100:	eeb0 0a48 	vmov.f32	s0, s16
 8003104:	4620      	mov	r0, r4
 8003106:	f7ff ff87 	bl	8003018 <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op3, in);
 800310a:	f104 0020 	add.w	r0, r4, #32
 800310e:	f7ff ff83 	bl	8003018 <Osc_FM_sine_SampleCompute>
	return  0.5f * (op1.out + op3.out);
 8003112:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8003116:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 800311a:	ee77 7a80 	vadd.f32	s15, s15, s0
}
 800311e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003122:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003126:	ecbd 8b02 	vpop	{d8}
 800312a:	bd10      	pop	{r4, pc}
 800312c:	20003d3c 	.word	0x20003d3c
 8003130:	00000000 	.word	0x00000000

08003134 <OpSampleCompute7bis>:
/*-------------------------------------------------------*/
float_t OpSampleCompute7bis(Oscillator_t * op) // basic wave table positive sine : 0 < output < op.amp
{
 8003134:	b510      	push	{r4, lr}
 8003136:	ed2d 8b02 	vpush	{d8}
 800313a:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 800313c:	e005      	b.n	800314a <OpSampleCompute7bis+0x16>
		op->phase += _2PI;
 800313e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80031c8 <OpSampleCompute7bis+0x94>
 8003142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003146:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 800314a:	edd4 7a03 	vldr	s15, [r4, #12]
 800314e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d4f2      	bmi.n	800313e <OpSampleCompute7bis+0xa>
 8003158:	e005      	b.n	8003166 <OpSampleCompute7bis+0x32>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 800315a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80031c8 <OpSampleCompute7bis+0x94>
 800315e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003162:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase >= _2PI)
 8003166:	edd4 7a03 	vldr	s15, [r4, #12]
 800316a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80031c8 <OpSampleCompute7bis+0x94>
 800316e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	daf0      	bge.n	800315a <OpSampleCompute7bis+0x26>

	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8003178:	ed94 0a00 	vldr	s0, [r4]
 800317c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8003180:	ee20 8a08 	vmul.f32	s16, s0, s16
 8003184:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80031cc <OpSampleCompute7bis+0x98>
 8003188:	ee27 0a80 	vmul.f32	s0, s15, s0
 800318c:	f004 fb38 	bl	8007800 <lrintf>
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <OpSampleCompute7bis+0x9c>)
 8003192:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003196:	ed90 0a00 	vldr	s0, [r0]
 800319a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800319e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80031a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80031a6:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80031aa:	edd4 7a02 	vldr	s15, [r4, #8]
 80031ae:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80031d4 <OpSampleCompute7bis+0xa0>
 80031b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031b6:	edd4 7a03 	vldr	s15, [r4, #12]
 80031ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031be:	edc4 7a03 	vstr	s15, [r4, #12]

	return op->out;
}
 80031c2:	ecbd 8b02 	vpop	{d8}
 80031c6:	bd10      	pop	{r4, pc}
 80031c8:	40c90fdb 	.word	0x40c90fdb
 80031cc:	4322f983 	.word	0x4322f983
 80031d0:	080164f0 	.word	0x080164f0
 80031d4:	39156592 	.word	0x39156592

080031d8 <OpSampleCompute1>:
/*-------------------------------------------------------*/
float_t OpSampleCompute1(Oscillator_t * op) // basic sawtooth^2
{
	while (op->phase < 0) // keep phase in [0, 2pi]
 80031d8:	e005      	b.n	80031e6 <OpSampleCompute1+0xe>
		op->phase += _2PI;
 80031da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003288 <OpSampleCompute1+0xb0>
 80031de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031e2:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 80031e6:	edd0 7a03 	vldr	s15, [r0, #12]
 80031ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d4f2      	bmi.n	80031da <OpSampleCompute1+0x2>
 80031f4:	e005      	b.n	8003202 <OpSampleCompute1+0x2a>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 80031f6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003288 <OpSampleCompute1+0xb0>
 80031fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031fe:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase >= _2PI)
 8003202:	edd0 7a03 	vldr	s15, [r0, #12]
 8003206:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003288 <OpSampleCompute1+0xb0>
 800320a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	daf0      	bge.n	80031f6 <OpSampleCompute1+0x1e>

	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8003214:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800328c <OpSampleCompute1+0xb4>
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	d420      	bmi.n	8003264 <OpSampleCompute1+0x8c>
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8003222:	edd0 6a00 	vldr	s13, [r0]
 8003226:	ed9f 6a19 	vldr	s12, [pc, #100]	; 800328c <OpSampleCompute1+0xb4>
 800322a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800322e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003232:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003236:	ee66 6a87 	vmul.f32	s13, s13, s14
 800323a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800323e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8003242:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003246:	ed80 7a07 	vstr	s14, [r0, #28]

	op->phase += _2PI * Ts * op->freq; // increment phase
 800324a:	ed90 7a02 	vldr	s14, [r0, #8]
 800324e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003290 <OpSampleCompute1+0xb8>
 8003252:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003256:	ee77 7a87 	vadd.f32	s15, s15, s14
 800325a:	edc0 7a03 	vstr	s15, [r0, #12]
	return op->out;
}
 800325e:	ed90 0a07 	vldr	s0, [r0, #28]
 8003262:	4770      	bx	lr
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8003264:	ed90 7a00 	vldr	s14, [r0]
 8003268:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800326c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003270:	ed9f 6a06 	vldr	s12, [pc, #24]	; 800328c <OpSampleCompute1+0xb4>
 8003274:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003278:	ee27 7a26 	vmul.f32	s14, s14, s13
 800327c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003280:	ed80 7a07 	vstr	s14, [r0, #28]
 8003284:	e7e1      	b.n	800324a <OpSampleCompute1+0x72>
 8003286:	bf00      	nop
 8003288:	40c90fdb 	.word	0x40c90fdb
 800328c:	40490fdb 	.word	0x40490fdb
 8003290:	39156592 	.word	0x39156592

08003294 <OpSampleCompute2>:
/*-------------------------------------------------------*/
float_t OpSampleCompute2(Oscillator_t * op) // basic sawtooth
{
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003294:	e005      	b.n	80032a2 <OpSampleCompute2+0xe>
		op->phase += _2PI;
 8003296:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800333c <OpSampleCompute2+0xa8>
 800329a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800329e:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 80032a2:	edd0 7a03 	vldr	s15, [r0, #12]
 80032a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d4f2      	bmi.n	8003296 <OpSampleCompute2+0x2>
 80032b0:	e005      	b.n	80032be <OpSampleCompute2+0x2a>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 80032b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800333c <OpSampleCompute2+0xa8>
 80032b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032ba:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase >= _2PI)
 80032be:	edd0 7a03 	vldr	s15, [r0, #12]
 80032c2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800333c <OpSampleCompute2+0xa8>
 80032c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	daf0      	bge.n	80032b2 <OpSampleCompute2+0x1e>

	if (op->phase < _PI) op->out = 0.5f*op->amp * (op->phase / _PI);
 80032d0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003340 <OpSampleCompute2+0xac>
 80032d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	d41e      	bmi.n	800331c <OpSampleCompute2+0x88>
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 80032de:	ed90 7a00 	vldr	s14, [r0]
 80032e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80032e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80032ea:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003340 <OpSampleCompute2+0xac>
 80032ee:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80032f2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80032f6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80032fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80032fe:	ed80 7a07 	vstr	s14, [r0, #28]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003302:	ed90 7a02 	vldr	s14, [r0, #8]
 8003306:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003344 <OpSampleCompute2+0xb0>
 800330a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800330e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003312:	edc0 7a03 	vstr	s15, [r0, #12]
	return op->out;
}
 8003316:	ed90 0a07 	vldr	s0, [r0, #28]
 800331a:	4770      	bx	lr
	if (op->phase < _PI) op->out = 0.5f*op->amp * (op->phase / _PI);
 800331c:	ed90 7a00 	vldr	s14, [r0]
 8003320:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003324:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003328:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8003340 <OpSampleCompute2+0xac>
 800332c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003330:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003334:	ed80 7a07 	vstr	s14, [r0, #28]
 8003338:	e7e3      	b.n	8003302 <OpSampleCompute2+0x6e>
 800333a:	bf00      	nop
 800333c:	40c90fdb 	.word	0x40c90fdb
 8003340:	40490fdb 	.word	0x40490fdb
 8003344:	39156592 	.word	0x39156592

08003348 <OpSampleCompute3>:
/*-------------------------------------------------------*/
float_t OpSampleCompute3(Oscillator_t * op) // sin(phi)^5
{
 8003348:	b510      	push	{r4, lr}
 800334a:	ed2d 8b02 	vpush	{d8}
 800334e:	4604      	mov	r4, r0
	float_t z;

	while (op->phase < 0) // keep phase in [0, 2pi]
 8003350:	e005      	b.n	800335e <OpSampleCompute3+0x16>
		op->phase += _2PI;
 8003352:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80033cc <OpSampleCompute3+0x84>
 8003356:	ee77 7a87 	vadd.f32	s15, s15, s14
 800335a:	edc4 7a03 	vstr	s15, [r4, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 800335e:	edd4 7a03 	vldr	s15, [r4, #12]
 8003362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d4f2      	bmi.n	8003352 <OpSampleCompute3+0xa>
 800336c:	e005      	b.n	800337a <OpSampleCompute3+0x32>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 800336e:	eddf 7a17 	vldr	s15, [pc, #92]	; 80033cc <OpSampleCompute3+0x84>
 8003372:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003376:	ed84 8a03 	vstr	s16, [r4, #12]
	while (op->phase >= _2PI)
 800337a:	ed94 8a03 	vldr	s16, [r4, #12]
 800337e:	eddf 7a13 	vldr	s15, [pc, #76]	; 80033cc <OpSampleCompute3+0x84>
 8003382:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	daf0      	bge.n	800336e <OpSampleCompute3+0x26>

	z = sinf(op->phase);
 800338c:	eeb0 0a48 	vmov.f32	s0, s16
 8003390:	f004 fad0 	bl	8007934 <sinf>
	op->out = op->amp*z*z*z*z*z;
 8003394:	edd4 7a00 	vldr	s15, [r4]
 8003398:	ee67 7a80 	vmul.f32	s15, s15, s0
 800339c:	ee67 7a80 	vmul.f32	s15, s15, s0
 80033a0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80033a4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80033a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80033ac:	ed84 0a07 	vstr	s0, [r4, #28]

	op->phase += _2PI * Ts * op->freq; // increment phase
 80033b0:	edd4 7a02 	vldr	s15, [r4, #8]
 80033b4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80033d0 <OpSampleCompute3+0x88>
 80033b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033bc:	ee38 8a27 	vadd.f32	s16, s16, s15
 80033c0:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 80033c4:	ecbd 8b02 	vpop	{d8}
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	bf00      	nop
 80033cc:	40c90fdb 	.word	0x40c90fdb
 80033d0:	39156592 	.word	0x39156592

080033d4 <OpSampleCompute5>:
	return op->out;
}
/*-------------------------------------------------------*/
float_t OpSampleCompute5(Oscillator_t * op) // Naive Triangle
{
	while (op->phase < 0) // keep phase in [0, 2pi]
 80033d4:	e005      	b.n	80033e2 <OpSampleCompute5+0xe>
		op->phase += _2PI;
 80033d6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003474 <OpSampleCompute5+0xa0>
 80033da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033de:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 80033e2:	edd0 7a03 	vldr	s15, [r0, #12]
 80033e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d4f2      	bmi.n	80033d6 <OpSampleCompute5+0x2>
 80033f0:	e005      	b.n	80033fe <OpSampleCompute5+0x2a>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 80033f2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003474 <OpSampleCompute5+0xa0>
 80033f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033fa:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase >= _2PI)
 80033fe:	edd0 7a03 	vldr	s15, [r0, #12]
 8003402:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003474 <OpSampleCompute5+0xa0>
 8003406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340e:	daf0      	bge.n	80033f2 <OpSampleCompute5+0x1e>

	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 8003410:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003478 <OpSampleCompute5+0xa4>
 8003414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341c:	d41a      	bmi.n	8003454 <OpSampleCompute5+0x80>
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 800341e:	edd0 6a00 	vldr	s13, [r0]
 8003422:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800347c <OpSampleCompute5+0xa8>
 8003426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800342a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800342e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003432:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003436:	ed80 7a07 	vstr	s14, [r0, #28]

	op->phase += _2PI * Ts * op->freq; // increment phase
 800343a:	ed90 7a02 	vldr	s14, [r0, #8]
 800343e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003480 <OpSampleCompute5+0xac>
 8003442:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003446:	ee77 7a87 	vadd.f32	s15, s15, s14
 800344a:	edc0 7a03 	vstr	s15, [r0, #12]
	return op->out;
}
 800344e:	ed90 0a07 	vldr	s0, [r0, #28]
 8003452:	4770      	bx	lr
	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 8003454:	edd0 6a00 	vldr	s13, [r0]
 8003458:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003484 <OpSampleCompute5+0xb0>
 800345c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003460:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003464:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003468:	ee26 7a87 	vmul.f32	s14, s13, s14
 800346c:	ed80 7a07 	vstr	s14, [r0, #28]
 8003470:	e7e3      	b.n	800343a <OpSampleCompute5+0x66>
 8003472:	bf00      	nop
 8003474:	40c90fdb 	.word	0x40c90fdb
 8003478:	40490fdb 	.word	0x40490fdb
 800347c:	3f22f983 	.word	0x3f22f983
 8003480:	39156592 	.word	0x39156592
 8003484:	bf22f983 	.word	0xbf22f983

08003488 <MorphingSaw_SampleCompute>:
/*-------------------------------------------------------*/
float_t MorphingSaw_SampleCompute(Oscillator_t * op) // Morphing sawtooth, tends to a triangle at high freqs
{
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003488:	e005      	b.n	8003496 <MorphingSaw_SampleCompute+0xe>
		op->phase += _2PI;
 800348a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003568 <MorphingSaw_SampleCompute+0xe0>
 800348e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003492:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003496:	edd0 7a03 	vldr	s15, [r0, #12]
 800349a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800349e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a2:	d4f2      	bmi.n	800348a <MorphingSaw_SampleCompute+0x2>
 80034a4:	e005      	b.n	80034b2 <MorphingSaw_SampleCompute+0x2a>
	while (op->phase >= _2PI)
		op->phase -= _2PI;
 80034a6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003568 <MorphingSaw_SampleCompute+0xe0>
 80034aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034ae:	edc0 7a03 	vstr	s15, [r0, #12]
	while (op->phase >= _2PI)
 80034b2:	edd0 7a03 	vldr	s15, [r0, #12]
 80034b6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003568 <MorphingSaw_SampleCompute+0xe0>
 80034ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c2:	daf0      	bge.n	80034a6 <MorphingSaw_SampleCompute+0x1e>

	if (op->freq < 8000) op->phi0 = _PI/8000*(op->freq); else op->phi0 = _PI;
 80034c4:	ed90 7a02 	vldr	s14, [r0, #8]
 80034c8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800356c <MorphingSaw_SampleCompute+0xe4>
 80034cc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	d534      	bpl.n	8003540 <MorphingSaw_SampleCompute+0xb8>
 80034d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003570 <MorphingSaw_SampleCompute+0xe8>
 80034da:	ee67 6a26 	vmul.f32	s13, s14, s13
 80034de:	edc0 6a04 	vstr	s13, [r0, #16]
	if (op->phi0 <= .0001f) op->phi0 = .0001f;
 80034e2:	ed90 6a04 	vldr	s12, [r0, #16]
 80034e6:	eddf 6a23 	vldr	s13, [pc, #140]	; 8003574 <MorphingSaw_SampleCompute+0xec>
 80034ea:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80034ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f2:	d801      	bhi.n	80034f8 <MorphingSaw_SampleCompute+0x70>
 80034f4:	edc0 6a04 	vstr	s13, [r0, #16]
	if (op->phase < op->phi0) op->out = op->amp * (-2/op->phi0 * op->phase + 1);
 80034f8:	edd0 6a04 	vldr	s13, [r0, #16]
 80034fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	d41f      	bmi.n	8003546 <MorphingSaw_SampleCompute+0xbe>
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);
 8003506:	ed90 5a00 	vldr	s10, [r0]
 800350a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800350e:	eddf 5a16 	vldr	s11, [pc, #88]	; 8003568 <MorphingSaw_SampleCompute+0xe0>
 8003512:	ee36 6a65 	vsub.f32	s12, s12, s11
 8003516:	ee36 6a66 	vsub.f32	s12, s12, s13
 800351a:	ee25 6a06 	vmul.f32	s12, s10, s12
 800351e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8003522:	eec6 5a26 	vdiv.f32	s11, s12, s13
 8003526:	edc0 5a07 	vstr	s11, [r0, #28]

	op->phase += _2PI * Ts * op->freq; // increment phase
 800352a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003578 <MorphingSaw_SampleCompute+0xf0>
 800352e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003536:	edc0 7a03 	vstr	s15, [r0, #12]
	return op->out;
}
 800353a:	ed90 0a07 	vldr	s0, [r0, #28]
 800353e:	4770      	bx	lr
	if (op->freq < 8000) op->phi0 = _PI/8000*(op->freq); else op->phi0 = _PI;
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MorphingSaw_SampleCompute+0xf4>)
 8003542:	6103      	str	r3, [r0, #16]
 8003544:	e7cd      	b.n	80034e2 <MorphingSaw_SampleCompute+0x5a>
	if (op->phase < op->phi0) op->out = op->amp * (-2/op->phi0 * op->phase + 1);
 8003546:	edd0 5a00 	vldr	s11, [r0]
 800354a:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 800354e:	ee85 6a26 	vdiv.f32	s12, s10, s13
 8003552:	ee67 6a86 	vmul.f32	s13, s15, s12
 8003556:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800355a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800355e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8003562:	edc0 6a07 	vstr	s13, [r0, #28]
 8003566:	e7e0      	b.n	800352a <MorphingSaw_SampleCompute+0xa2>
 8003568:	40c90fdb 	.word	0x40c90fdb
 800356c:	45fa0000 	.word	0x45fa0000
 8003570:	39cde32e 	.word	0x39cde32e
 8003574:	38d1b717 	.word	0x38d1b717
 8003578:	39156592 	.word	0x39156592
 800357c:	40490fdb 	.word	0x40490fdb

08003580 <Drifters_sampleCompute>:
{
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	ed2d 8b02 	vpush	{d8}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 8003586:	4825      	ldr	r0, [pc, #148]	; (800361c <Drifters_sampleCompute+0x9c>)
 8003588:	f7ff f9d2 	bl	8002930 <drifter_nextSample>
 800358c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003590:	ee30 0a08 	vadd.f32	s0, s0, s16
 8003594:	4d22      	ldr	r5, [pc, #136]	; (8003620 <Drifters_sampleCompute+0xa0>)
 8003596:	edd5 7a00 	vldr	s15, [r5]
 800359a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800359e:	eef3 8a09 	vmov.f32	s17, #57	; 0x41c80000  25.0
 80035a2:	4c20      	ldr	r4, [pc, #128]	; (8003624 <Drifters_sampleCompute+0xa4>)
 80035a4:	f104 0760 	add.w	r7, r4, #96	; 0x60
 80035a8:	ee30 0a28 	vadd.f32	s0, s0, s17
 80035ac:	4638      	mov	r0, r7
 80035ae:	f7ff fc82 	bl	8002eb6 <OpSetFreq>
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 80035b2:	481d      	ldr	r0, [pc, #116]	; (8003628 <Drifters_sampleCompute+0xa8>)
 80035b4:	f7ff f9bc 	bl	8002930 <drifter_nextSample>
 80035b8:	ee30 0a08 	vadd.f32	s0, s0, s16
 80035bc:	edd5 7a00 	vldr	s15, [r5]
 80035c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80035c4:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80035c8:	ee30 0a28 	vadd.f32	s0, s0, s17
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7ff fc72 	bl	8002eb6 <OpSetFreq>
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 80035d2:	4816      	ldr	r0, [pc, #88]	; (800362c <Drifters_sampleCompute+0xac>)
 80035d4:	f7ff f9ac 	bl	8002930 <drifter_nextSample>
 80035d8:	ee30 0a08 	vadd.f32	s0, s0, s16
 80035dc:	ed95 8a00 	vldr	s16, [r5]
 80035e0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80035e4:	3420      	adds	r4, #32
 80035e6:	ee30 0a28 	vadd.f32	s0, s0, s17
 80035ea:	4620      	mov	r0, r4
 80035ec:	f7ff fc63 	bl	8002eb6 <OpSetFreq>
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 80035f0:	4638      	mov	r0, r7
 80035f2:	f7ff ff49 	bl	8003488 <MorphingSaw_SampleCompute>
 80035f6:	eeb0 8a40 	vmov.f32	s16, s0
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7ff ff44 	bl	8003488 <MorphingSaw_SampleCompute>
 8003600:	ee38 8a00 	vadd.f32	s16, s16, s0
 8003604:	4620      	mov	r0, r4
 8003606:	f7ff ff3f 	bl	8003488 <MorphingSaw_SampleCompute>
 800360a:	ee38 0a00 	vadd.f32	s0, s16, s0
}
 800360e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003630 <Drifters_sampleCompute+0xb0>
 8003612:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003616:	ecbd 8b02 	vpop	{d8}
 800361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800361c:	20003d10 	.word	0x20003d10
 8003620:	20000008 	.word	0x20000008
 8003624:	20003d3c 	.word	0x20003d3c
 8003628:	20003ce4 	.word	0x20003ce4
 800362c:	20003cb8 	.word	0x20003cb8
 8003630:	3ea8f5c3 	.word	0x3ea8f5c3

08003634 <AdditiveGen_newWaveform>:
	op->phase += _2PI * Ts * op->freq; // increment phase
	return op->out;
}
/*-------------------------------------------------------*/
void AdditiveGen_newWaveform(void) //
{
 8003634:	b510      	push	{r4, lr}
	uint8_t k;

	a[0] = a[1] = 1;
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <AdditiveGen_newWaveform+0x64>)
 8003638:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800363c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	ph[0] = ph[1] = 0;
 8003644:	2200      	movs	r2, #0
 8003646:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800364a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 800364e:	2402      	movs	r4, #2
 8003650:	e015      	b.n	800367e <AdditiveGen_newWaveform+0x4a>
	{
		a[k] = frand_a_b(0.001f , 0.98f);
 8003652:	eddf 0a12 	vldr	s1, [pc, #72]	; 800369c <AdditiveGen_newWaveform+0x68>
 8003656:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80036a0 <AdditiveGen_newWaveform+0x6c>
 800365a:	f000 fadf 	bl	8003c1c <frand_a_b>
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <AdditiveGen_newWaveform+0x64>)
 8003660:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8003664:	ed82 0a20 	vstr	s0, [r2, #128]	; 0x80
		a[0] += a[k];
 8003668:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800366c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003670:	ed83 0a20 	vstr	s0, [r3, #128]	; 0x80
		ph[k] = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 800367a:	3401      	adds	r4, #1
 800367c:	b2e4      	uxtb	r4, r4
 800367e:	2c0a      	cmp	r4, #10
 8003680:	d9e7      	bls.n	8003652 <AdditiveGen_newWaveform+0x1e>
	}
	a[0] = 1.f / a[0];
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <AdditiveGen_newWaveform+0x64>)
 8003684:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8003688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800368c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003690:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 8003694:	bd10      	pop	{r4, pc}
 8003696:	bf00      	nop
 8003698:	20003d3c 	.word	0x20003d3c
 800369c:	3f7ae148 	.word	0x3f7ae148
 80036a0:	3a83126f 	.word	0x3a83126f

080036a4 <AdditiveGen_SampleCompute>:
/*-------------------------------------------------------*/
float_t AdditiveGen_SampleCompute(Oscillator_t * op) // additive sine generator
{
 80036a4:	b410      	push	{r4}
	uint8_t k = 1;
	float_t y = 0;
 80036a6:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8003764 <AdditiveGen_SampleCompute+0xc0>
	uint8_t k = 1;
 80036aa:	2101      	movs	r1, #1

	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 80036ac:	e039      	b.n	8003722 <AdditiveGen_SampleCompute+0x7e>
	{
		//while (ph[k] < 0) // keep phase in [0, 2pi]
		//	ph[k] += _2PI;
		while (ph[k] >= _2PI)
			ph[k] -= _2PI;
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <AdditiveGen_SampleCompute+0xc4>)
 80036b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80036b4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800376c <AdditiveGen_SampleCompute+0xc8>
 80036b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036bc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		while (ph[k] >= _2PI)
 80036c0:	4b29      	ldr	r3, [pc, #164]	; (8003768 <AdditiveGen_SampleCompute+0xc4>)
 80036c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80036c6:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80036ca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800376c <AdditiveGen_SampleCompute+0xc8>
 80036ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	daea      	bge.n	80036ae <AdditiveGen_SampleCompute+0xa>
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <AdditiveGen_SampleCompute+0xc4>)
 80036da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80036de:	ed92 6a20 	vldr	s12, [r2, #128]	; 0x80
 80036e2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003770 <AdditiveGen_SampleCompute+0xcc>
 80036e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036ea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80036ee:	ee17 3a10 	vmov	r3, s14
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4c1f      	ldr	r4, [pc, #124]	; (8003774 <AdditiveGen_SampleCompute+0xd0>)
 80036f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80036fa:	ed93 7a00 	vldr	s14, [r3]
 80036fe:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003702:	ee75 5a87 	vadd.f32	s11, s11, s14
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 8003706:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003778 <AdditiveGen_SampleCompute+0xd4>
 800370a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800370e:	ed90 7a02 	vldr	s14, [r0, #8]
 8003712:	ee66 6a87 	vmul.f32	s13, s13, s14
 8003716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800371a:	edc2 7a2b 	vstr	s15, [r2, #172]	; 0xac
		k++;
 800371e:	3101      	adds	r1, #1
 8003720:	b2c9      	uxtb	r1, r1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 8003722:	290a      	cmp	r1, #10
 8003724:	d80f      	bhi.n	8003746 <AdditiveGen_SampleCompute+0xa2>
 8003726:	460a      	mov	r2, r1
 8003728:	ee07 1a90 	vmov	s15, r1
 800372c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003730:	edd0 7a02 	vldr	s15, [r0, #8]
 8003734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003738:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800377c <AdditiveGen_SampleCompute+0xd8>
 800373c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003744:	d4bc      	bmi.n	80036c0 <AdditiveGen_SampleCompute+0x1c>
	}
	y = a[0] * y;
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <AdditiveGen_SampleCompute+0xc4>)
 8003748:	ed93 0a20 	vldr	s0, [r3, #128]	; 0x80
 800374c:	ee60 5a25 	vmul.f32	s11, s0, s11

	op->out = op->amp * y;
 8003750:	ed90 0a00 	vldr	s0, [r0]
 8003754:	ee20 0a25 	vmul.f32	s0, s0, s11
 8003758:	ed80 0a07 	vstr	s0, [r0, #28]

	return op->out;
}
 800375c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	00000000 	.word	0x00000000
 8003768:	20003d3c 	.word	0x20003d3c
 800376c:	40c90fdb 	.word	0x40c90fdb
 8003770:	4322f983 	.word	0x4322f983
 8003774:	080164f0 	.word	0x080164f0
 8003778:	39156592 	.word	0x39156592
 800377c:	46ac4400 	.word	0x46ac4400

08003780 <waveCompute>:

/*-------------------------------------------------------------------------------------------------------------------*/

float waveCompute(uint8_t sound, float frq)
{
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	ed2d 8b02 	vpush	{d8}
 8003786:	4604      	mov	r4, r0
 8003788:	eeb0 8a40 	vmov.f32	s16, s0
	float y;

	OpSetFreq(&op1, frq);
 800378c:	4890      	ldr	r0, [pc, #576]	; (80039d0 <waveCompute+0x250>)
 800378e:	f7ff fb92 	bl	8002eb6 <OpSetFreq>


	/* choose waveform generator */
	switch (sound)
 8003792:	2c0f      	cmp	r4, #15
 8003794:	f200 8115 	bhi.w	80039c2 <waveCompute+0x242>
 8003798:	e8df f014 	tbh	[pc, r4, lsl #1]
 800379c:	001a0010 	.word	0x001a0010
 80037a0:	00550034 	.word	0x00550034
 80037a4:	0045005d 	.word	0x0045005d
 80037a8:	004f0049 	.word	0x004f0049
 80037ac:	006d0061 	.word	0x006d0061
 80037b0:	00af0087 	.word	0x00af0087
 80037b4:	010500d7 	.word	0x010500d7
 80037b8:	010d0108 	.word	0x010d0108
	{
	case MORPH_SAW : 	y = 0.8f * MorphingSaw_SampleCompute(&op1); 		break ;
 80037bc:	4884      	ldr	r0, [pc, #528]	; (80039d0 <waveCompute+0x250>)
 80037be:	f7ff fe63 	bl	8003488 <MorphingSaw_SampleCompute>
 80037c2:	eddf 7a84 	vldr	s15, [pc, #528]	; 80039d4 <waveCompute+0x254>
 80037c6:	ee20 0a27 	vmul.f32	s0, s0, s15
		y = 0;	break ;

	}

	return y;
}
 80037ca:	ecbd 8b02 	vpop	{d8}
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 80037d0:	eddf 7a81 	vldr	s15, [pc, #516]	; 80039d8 <waveCompute+0x258>
 80037d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	d40a      	bmi.n	80037f4 <waveCompute+0x74>
		else if (frq < 600) y = OpSampleCompute2(&op1);
 80037de:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80039dc <waveCompute+0x25c>
 80037e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80037e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ea:	d507      	bpl.n	80037fc <waveCompute+0x7c>
 80037ec:	4878      	ldr	r0, [pc, #480]	; (80039d0 <waveCompute+0x250>)
 80037ee:	f7ff fd51 	bl	8003294 <OpSampleCompute2>
 80037f2:	e7ea      	b.n	80037ca <waveCompute+0x4a>
		if (frq < 200) y =  OpSampleCompute1(&op1);
 80037f4:	4876      	ldr	r0, [pc, #472]	; (80039d0 <waveCompute+0x250>)
 80037f6:	f7ff fcef 	bl	80031d8 <OpSampleCompute1>
 80037fa:	e7e6      	b.n	80037ca <waveCompute+0x4a>
		else y = OpSampleCompute5(&op1);
 80037fc:	4874      	ldr	r0, [pc, #464]	; (80039d0 <waveCompute+0x250>)
 80037fe:	f7ff fde9 	bl	80033d4 <OpSampleCompute5>
 8003802:	e7e2      	b.n	80037ca <waveCompute+0x4a>
	case ACC_SINE : 		y = 0.8 * OpSampleCompute0(&op1); 		break;
 8003804:	4872      	ldr	r0, [pc, #456]	; (80039d0 <waveCompute+0x250>)
 8003806:	f7ff fb8d 	bl	8002f24 <OpSampleCompute0>
 800380a:	ee10 0a10 	vmov	r0, s0
 800380e:	f7fc fe3f 	bl	8000490 <__aeabi_f2d>
 8003812:	a36d      	add	r3, pc, #436	; (adr r3, 80039c8 <waveCompute+0x248>)
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f7fc fe92 	bl	8000540 <__aeabi_dmul>
 800381c:	f7fd f92a 	bl	8000a74 <__aeabi_d2f>
 8003820:	ee00 0a10 	vmov	s0, r0
 8003824:	e7d1      	b.n	80037ca <waveCompute+0x4a>
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 8003826:	486a      	ldr	r0, [pc, #424]	; (80039d0 <waveCompute+0x250>)
 8003828:	f7ff fd8e 	bl	8003348 <OpSampleCompute3>
 800382c:	e7cd      	b.n	80037ca <waveCompute+0x4a>
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 800382e:	486c      	ldr	r0, [pc, #432]	; (80039e0 <waveCompute+0x260>)
 8003830:	ed80 8a03 	vstr	s16, [r0, #12]
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;
 8003834:	f7fe f9cc 	bl	8001bd0 <VCO_bleptri_SampleCompute>
 8003838:	e7c7      	b.n	80037ca <waveCompute+0x4a>
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 800383a:	486a      	ldr	r0, [pc, #424]	; (80039e4 <waveCompute+0x264>)
 800383c:	ed80 8a03 	vstr	s16, [r0, #12]
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;
 8003840:	f7fd ffaa 	bl	8001798 <VCO_bleprect_SampleCompute>
 8003844:	e7c1      	b.n	80037ca <waveCompute+0x4a>
	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 8003846:	4862      	ldr	r0, [pc, #392]	; (80039d0 <waveCompute+0x250>)
 8003848:	f7ff fb9c 	bl	8002f84 <Osc_WT_SINE_SampleCompute>
 800384c:	eddf 7a61 	vldr	s15, [pc, #388]	; 80039d4 <waveCompute+0x254>
 8003850:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003854:	e7b9      	b.n	80037ca <waveCompute+0x4a>
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 8003856:	485e      	ldr	r0, [pc, #376]	; (80039d0 <waveCompute+0x250>)
 8003858:	f7ff ff24 	bl	80036a4 <AdditiveGen_SampleCompute>
 800385c:	e7b5      	b.n	80037ca <waveCompute+0x4a>
	case NOISE : 			y = op1.amp * frand_a_b(-.8f , .8f);	break; // noise !
 800385e:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <waveCompute+0x268>)
 8003860:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8003864:	eddf 0a5b 	vldr	s1, [pc, #364]	; 80039d4 <waveCompute+0x254>
 8003868:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80039ec <waveCompute+0x26c>
 800386c:	f000 f9d6 	bl	8003c1c <frand_a_b>
 8003870:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003874:	e7a9      	b.n	80037ca <waveCompute+0x4a>
		OpSetFreq(&op2, frq * 1.50f);
 8003876:	4d5c      	ldr	r5, [pc, #368]	; (80039e8 <waveCompute+0x268>)
 8003878:	f105 0440 	add.w	r4, r5, #64	; 0x40
 800387c:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8003880:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003884:	4620      	mov	r0, r4
 8003886:	f7ff fb16 	bl	8002eb6 <OpSetFreq>
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 800388a:	f105 0060 	add.w	r0, r5, #96	; 0x60
 800388e:	f7ff fdfb 	bl	8003488 <MorphingSaw_SampleCompute>
 8003892:	eeb0 8a40 	vmov.f32	s16, s0
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff fdf6 	bl	8003488 <MorphingSaw_SampleCompute>
 800389c:	ee38 0a00 	vadd.f32	s0, s16, s0
 80038a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80038a4:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 80038a8:	e78f      	b.n	80037ca <waveCompute+0x4a>
		OpSetFreq(&op2, frq * 1.26f);
 80038aa:	4c4f      	ldr	r4, [pc, #316]	; (80039e8 <waveCompute+0x268>)
 80038ac:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80038b0:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80039f0 <waveCompute+0x270>
 80038b4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80038b8:	4630      	mov	r0, r6
 80038ba:	f7ff fafc 	bl	8002eb6 <OpSetFreq>
		OpSetFreq(&op3, frq * 1.5f);
 80038be:	f104 0520 	add.w	r5, r4, #32
 80038c2:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80038c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80038ca:	4628      	mov	r0, r5
 80038cc:	f7ff faf3 	bl	8002eb6 <OpSetFreq>
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 80038d0:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80038d4:	f7ff fdd8 	bl	8003488 <MorphingSaw_SampleCompute>
 80038d8:	eeb0 8a40 	vmov.f32	s16, s0
 80038dc:	4630      	mov	r0, r6
 80038de:	f7ff fdd3 	bl	8003488 <MorphingSaw_SampleCompute>
 80038e2:	ee38 8a00 	vadd.f32	s16, s16, s0
 80038e6:	4628      	mov	r0, r5
 80038e8:	f7ff fdce 	bl	8003488 <MorphingSaw_SampleCompute>
 80038ec:	ee38 0a00 	vadd.f32	s0, s16, s0
 80038f0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80039f4 <waveCompute+0x274>
 80038f4:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 80038f8:	e767      	b.n	80037ca <waveCompute+0x4a>
		OpSetFreq(&op2, frq * 1.1892f);
 80038fa:	4c3b      	ldr	r4, [pc, #236]	; (80039e8 <waveCompute+0x268>)
 80038fc:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8003900:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80039f8 <waveCompute+0x278>
 8003904:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003908:	4630      	mov	r0, r6
 800390a:	f7ff fad4 	bl	8002eb6 <OpSetFreq>
		OpSetFreq(&op3, frq * 1.5f);
 800390e:	f104 0520 	add.w	r5, r4, #32
 8003912:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8003916:	ee28 0a00 	vmul.f32	s0, s16, s0
 800391a:	4628      	mov	r0, r5
 800391c:	f7ff facb 	bl	8002eb6 <OpSetFreq>
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003920:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8003924:	f7ff fdb0 	bl	8003488 <MorphingSaw_SampleCompute>
 8003928:	eeb0 8a40 	vmov.f32	s16, s0
 800392c:	4630      	mov	r0, r6
 800392e:	f7ff fdab 	bl	8003488 <MorphingSaw_SampleCompute>
 8003932:	ee38 8a00 	vadd.f32	s16, s16, s0
 8003936:	4628      	mov	r0, r5
 8003938:	f7ff fda6 	bl	8003488 <MorphingSaw_SampleCompute>
 800393c:	ee38 0a00 	vadd.f32	s0, s16, s0
 8003940:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80039f4 <waveCompute+0x274>
 8003944:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 8003948:	e73f      	b.n	80037ca <waveCompute+0x4a>
		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
 800394a:	f7ff f811 	bl	8002970 <d1_drifter_nextSample>
 800394e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8003952:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003956:	4c24      	ldr	r4, [pc, #144]	; (80039e8 <waveCompute+0x268>)
 8003958:	f104 0640 	add.w	r6, r4, #64	; 0x40
 800395c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003960:	4630      	mov	r0, r6
 8003962:	f7ff faa8 	bl	8002eb6 <OpSetFreq>
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 8003966:	f7ff f80b 	bl	8002980 <d2_drifter_nextSample>
 800396a:	ee30 0a28 	vadd.f32	s0, s0, s17
 800396e:	f104 0520 	add.w	r5, r4, #32
 8003972:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003976:	4628      	mov	r0, r5
 8003978:	f7ff fa9d 	bl	8002eb6 <OpSetFreq>
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800397c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8003980:	f7ff fd82 	bl	8003488 <MorphingSaw_SampleCompute>
 8003984:	eeb0 8a40 	vmov.f32	s16, s0
 8003988:	4630      	mov	r0, r6
 800398a:	f7ff fd7d 	bl	8003488 <MorphingSaw_SampleCompute>
 800398e:	ee38 8a00 	vadd.f32	s16, s16, s0
 8003992:	4628      	mov	r0, r5
 8003994:	f7ff fd78 	bl	8003488 <MorphingSaw_SampleCompute>
 8003998:	ee38 0a00 	vadd.f32	s0, s16, s0
 800399c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80039f4 <waveCompute+0x274>
 80039a0:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 80039a4:	e711      	b.n	80037ca <waveCompute+0x4a>
	case DRIFTERS : 	y = Drifters_sampleCompute(); break;
 80039a6:	f7ff fdeb 	bl	8003580 <Drifters_sampleCompute>
 80039aa:	e70e      	b.n	80037ca <waveCompute+0x4a>
	case FM2 : 			y = FM2_sampleCompute(frq); break;
 80039ac:	eeb0 0a48 	vmov.f32	s0, s16
 80039b0:	f7ff fb82 	bl	80030b8 <FM2_sampleCompute>
 80039b4:	e709      	b.n	80037ca <waveCompute+0x4a>
		mbSawOsc.freq = frq;
 80039b6:	4811      	ldr	r0, [pc, #68]	; (80039fc <waveCompute+0x27c>)
 80039b8:	ed80 8a03 	vstr	s16, [r0, #12]
		y = VCO_blepsaw_SampleCompute(&mbSawOsc);
 80039bc:	f7fd fde4 	bl	8001588 <VCO_blepsaw_SampleCompute>
	}	break;
 80039c0:	e703      	b.n	80037ca <waveCompute+0x4a>
		y = 0;	break ;
 80039c2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003a00 <waveCompute+0x280>
	return y;
 80039c6:	e700      	b.n	80037ca <waveCompute+0x4a>
 80039c8:	9999999a 	.word	0x9999999a
 80039cc:	3fe99999 	.word	0x3fe99999
 80039d0:	20003d9c 	.word	0x20003d9c
 80039d4:	3f4ccccd 	.word	0x3f4ccccd
 80039d8:	43480000 	.word	0x43480000
 80039dc:	44160000 	.word	0x44160000
 80039e0:	200000a8 	.word	0x200000a8
 80039e4:	20000600 	.word	0x20000600
 80039e8:	20003d3c 	.word	0x20003d3c
 80039ec:	bf4ccccd 	.word	0xbf4ccccd
 80039f0:	3fa147ae 	.word	0x3fa147ae
 80039f4:	3ea8f5c3 	.word	0x3ea8f5c3
 80039f8:	3f9837b5 	.word	0x3f9837b5
 80039fc:	20000b5c 	.word	0x20000b5c
 8003a00:	00000000 	.word	0x00000000

08003a04 <allpass>:
/*---------------------------------------------------------------------*/
static float allpass(float yin, int ind)
{
	float yout;

	yout = - yin * a1 + old[ind];
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <allpass+0x2c>)
 8003a06:	edd3 7a00 	vldr	s15, [r3]
 8003a0a:	ee20 7a67 	vnmul.f32	s14, s0, s15
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <allpass+0x30>)
 8003a10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003a14:	edd0 6a00 	vldr	s13, [r0]
 8003a18:	ee37 7a26 	vadd.f32	s14, s14, s13
	old[ind] = yout * a1 + yin;
 8003a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a20:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003a24:	edc0 7a00 	vstr	s15, [r0]
	return yout;
}
 8003a28:	eeb0 0a47 	vmov.f32	s0, s14
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	200129e4 	.word	0x200129e4
 8003a34:	200129fc 	.word	0x200129fc

08003a38 <PhaserInit>:
	fb = 0.7f;
 8003a38:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <PhaserInit+0x20>)
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <PhaserInit+0x24>)
 8003a3c:	601a      	str	r2, [r3, #0]
	wet = 0.3f;
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <PhaserInit+0x28>)
 8003a40:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <PhaserInit+0x2c>)
 8003a42:	601a      	str	r2, [r3, #0]
	dmin = 2 * f_min / SAMPLERATE;
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <PhaserInit+0x30>)
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <PhaserInit+0x34>)
 8003a48:	601a      	str	r2, [r3, #0]
	dmax = 2 * f_max / SAMPLERATE;
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <PhaserInit+0x38>)
 8003a4c:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <PhaserInit+0x3c>)
 8003a4e:	601a      	str	r2, [r3, #0]
	lfoInc = _2PI * swrate / SAMPLERATE;
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <PhaserInit+0x40>)
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <PhaserInit+0x44>)
 8003a54:	601a      	str	r2, [r3, #0]
}
 8003a56:	4770      	bx	lr
 8003a58:	200129f0 	.word	0x200129f0
 8003a5c:	3f333333 	.word	0x3f333333
 8003a60:	20012a14 	.word	0x20012a14
 8003a64:	3e99999a 	.word	0x3e99999a
 8003a68:	200129ec 	.word	0x200129ec
 8003a6c:	3c149b93 	.word	0x3c149b93
 8003a70:	200129e8 	.word	0x200129e8
 8003a74:	3d9de54c 	.word	0x3d9de54c
 8003a78:	200129f4 	.word	0x200129f4
 8003a7c:	376f08eb 	.word	0x376f08eb

08003a80 <Phaser_Rate_set>:
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 8003a80:	ee07 0a90 	vmov	s15, r0
 8003a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a88:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003ab0 <Phaser_Rate_set+0x30>
 8003a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a90:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003ab4 <Phaser_Rate_set+0x34>
 8003a94:	ee77 7a87 	vadd.f32	s15, s15, s14
	lfoInc = _2PI * swrate / SAMPLERATE;
 8003a98:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003ab8 <Phaser_Rate_set+0x38>
 8003a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aa0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003abc <Phaser_Rate_set+0x3c>
 8003aa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <Phaser_Rate_set+0x40>)
 8003aaa:	ed83 7a00 	vstr	s14, [r3]
}
 8003aae:	4770      	bx	lr
 8003ab0:	3d611e66 	.word	0x3d611e66
 8003ab4:	3ca3d70a 	.word	0x3ca3d70a
 8003ab8:	40c90fdb 	.word	0x40c90fdb
 8003abc:	472c4400 	.word	0x472c4400
 8003ac0:	200129f4 	.word	0x200129f4

08003ac4 <Phaser_Feedback_set>:
	fb = 0.999f * val / MIDI_MAX;
 8003ac4:	ee07 0a90 	vmov	s15, r0
 8003ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003acc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003ae4 <Phaser_Feedback_set+0x20>
 8003ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad4:	eddf 6a04 	vldr	s13, [pc, #16]	; 8003ae8 <Phaser_Feedback_set+0x24>
 8003ad8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <Phaser_Feedback_set+0x28>)
 8003ade:	ed83 7a00 	vstr	s14, [r3]
}
 8003ae2:	4770      	bx	lr
 8003ae4:	3f7fbe77 	.word	0x3f7fbe77
 8003ae8:	42fe0000 	.word	0x42fe0000
 8003aec:	200129f0 	.word	0x200129f0

08003af0 <Phaser_Wet_set>:
	wet = val / MIDI_MAX;
 8003af0:	ee07 0a90 	vmov	s15, r0
 8003af4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003af8:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003b08 <Phaser_Wet_set+0x18>
 8003afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <Phaser_Wet_set+0x1c>)
 8003b02:	edc3 7a00 	vstr	s15, [r3]
}
 8003b06:	4770      	bx	lr
 8003b08:	42fe0000 	.word	0x42fe0000
 8003b0c:	20012a14 	.word	0x20012a14

08003b10 <Phaser_compute>:

/*---------------------------------------------------------------------*/
float Phaser_compute(float xin)
{
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	ed2d 8b02 	vpush	{d8}
 8003b16:	eef0 8a40 	vmov.f32	s17, s0
	int i;
	float d;

	//calculate and update phaser sweep lfo...

	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003b1a:	4d35      	ldr	r5, [pc, #212]	; (8003bf0 <Phaser_compute+0xe0>)
 8003b1c:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <Phaser_compute+0xe4>)
 8003b1e:	ed93 8a00 	vldr	s16, [r3]
 8003b22:	edd5 7a00 	vldr	s15, [r5]
 8003b26:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003b2a:	4c33      	ldr	r4, [pc, #204]	; (8003bf8 <Phaser_compute+0xe8>)
 8003b2c:	ed94 0a00 	vldr	s0, [r4]
 8003b30:	eddf 7a32 	vldr	s15, [pc, #200]	; 8003bfc <Phaser_compute+0xec>
 8003b34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003b38:	f003 fe62 	bl	8007800 <lrintf>
 8003b3c:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <Phaser_compute+0xf0>)
 8003b3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003b42:	edd0 7a00 	vldr	s15, [r0]
 8003b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b56:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003b5a:	ed95 7a00 	vldr	s14, [r5]
 8003b5e:	ee77 7a87 	vadd.f32	s15, s15, s14

	lfoPhase += lfoInc;
 8003b62:	ed94 7a00 	vldr	s14, [r4]
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <Phaser_compute+0xf4>)
 8003b68:	edd3 6a00 	vldr	s13, [r3]
 8003b6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003b70:	ed84 7a00 	vstr	s14, [r4]
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003b74:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003c08 <Phaser_compute+0xf8>
 8003b78:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	db03      	blt.n	8003b8a <Phaser_compute+0x7a>
 8003b82:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003b86:	ed84 7a00 	vstr	s14, [r4]

	//update filter coeffs
	a1 = (1.f - d) / (1.f + d);
 8003b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <Phaser_compute+0xfc>)
 8003b9c:	ed83 7a00 	vstr	s14, [r3]

	//calculate output

	yout = allpass(xin + zm1 * fb, 0);
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <Phaser_compute+0x100>)
 8003ba2:	ed93 0a00 	vldr	s0, [r3]
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <Phaser_compute+0x104>)
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003bb6:	f7ff ff25 	bl	8003a04 <allpass>

	for(i = 1; i < PH_STAGES; i++)
 8003bba:	2401      	movs	r4, #1
 8003bbc:	e003      	b.n	8003bc6 <Phaser_compute+0xb6>
	{
		yout = allpass(yout, i);
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f7ff ff20 	bl	8003a04 <allpass>
	for(i = 1; i < PH_STAGES; i++)
 8003bc4:	3401      	adds	r4, #1
 8003bc6:	2c05      	cmp	r4, #5
 8003bc8:	ddf9      	ble.n	8003bbe <Phaser_compute+0xae>
	}
	zm1 = yout;
 8003bca:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <Phaser_compute+0x100>)
 8003bcc:	ed83 0a00 	vstr	s0, [r3]

	yout = (1 - wet) * xin + wet * yout;
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <Phaser_compute+0x108>)
 8003bd2:	ed93 7a00 	vldr	s14, [r3]
 8003bd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003bda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bde:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003be2:	ee27 0a00 	vmul.f32	s0, s14, s0

	return yout;
}
 8003be6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003bea:	ecbd 8b02 	vpop	{d8}
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	200129ec 	.word	0x200129ec
 8003bf4:	200129e8 	.word	0x200129e8
 8003bf8:	200129f8 	.word	0x200129f8
 8003bfc:	4322f983 	.word	0x4322f983
 8003c00:	080164f0 	.word	0x080164f0
 8003c04:	200129f4 	.word	0x200129f4
 8003c08:	40c90fdb 	.word	0x40c90fdb
 8003c0c:	200129e4 	.word	0x200129e4
 8003c10:	20012a18 	.word	0x20012a18
 8003c14:	200129f0 	.word	0x200129f0
 8003c18:	20012a14 	.word	0x20012a14

08003c1c <frand_a_b>:
//---------------------------------------------------------------------------
/**************
 * returns a random float between a and b
 *****************/
float_t frand_a_b(float_t a, float_t b)
{
 8003c1c:	b508      	push	{r3, lr}
 8003c1e:	ed2d 8b02 	vpush	{d8}
 8003c22:	eef0 8a40 	vmov.f32	s17, s0
 8003c26:	eeb0 8a60 	vmov.f32	s16, s1
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 8003c2a:	f003 fcff 	bl	800762c <rand>
 8003c2e:	ee07 0a90 	vmov	s15, r0
 8003c32:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003c36:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003c50 <frand_a_b+0x34>
 8003c3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003c3e:	ee38 8a68 	vsub.f32	s16, s16, s17
 8003c42:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 8003c46:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003c4a:	ecbd 8b02 	vpop	{d8}
 8003c4e:	bd08      	pop	{r3, pc}
 8003c50:	30000000 	.word	0x30000000

08003c54 <MIDIrandVal>:
/*-----------------------------------------------------------------------------*/
/**************
 * returns a random integer between 0 and MIDI_MAX
 *****************/
uint8_t MIDIrandVal(void)
{
 8003c54:	b508      	push	{r3, lr}
	return (uint8_t)lrintf(frand_a_b(0 , MIDI_MAX));
 8003c56:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003c6c <MIDIrandVal+0x18>
 8003c5a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003c70 <MIDIrandVal+0x1c>
 8003c5e:	f7ff ffdd 	bl	8003c1c <frand_a_b>
 8003c62:	f003 fdcd 	bl	8007800 <lrintf>
}
 8003c66:	b2c0      	uxtb	r0, r0
 8003c68:	bd08      	pop	{r3, pc}
 8003c6a:	bf00      	nop
 8003c6c:	42fe0000 	.word	0x42fe0000
 8003c70:	00000000 	.word	0x00000000

08003c74 <SVF_setReso>:

/****************************************************************************************************************/

void SVF_setReso(ResonantFilter* filter, float feedback)
{
	filter->q = 1-feedback;
 8003c74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003c78:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003c7c:	ed80 0a03 	vstr	s0, [r0, #12]
	if(filter->q < 0.01f) filter->q = 0.01f;
 8003c80:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003c94 <SVF_setReso+0x20>
 8003c84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8c:	d501      	bpl.n	8003c92 <SVF_setReso+0x1e>
 8003c8e:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8003c92:	4770      	bx	lr
 8003c94:	3c23d70a 	.word	0x3c23d70a

08003c98 <SVF_setDrive>:
{
#if USE_SHAPER_NONLINEARITY
	filter->drive = drive;
	setDistortionShape(&filter->shaper, filter->drive);
#else
	filter->drive =  /*  0.4f +  */ (drive/MIDI_MAX)*(drive/MIDI_MAX)*6; // the output can be muted (at 0)
 8003c98:	ee07 1a90 	vmov	s15, r1
 8003c9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ca0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003cbc <SVF_setDrive+0x24>
 8003ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cac:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb4:	edc0 7a06 	vstr	s15, [r0, #24]
#endif

}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	42fe0000 	.word	0x42fe0000

08003cc0 <SVF_directSetFilterValue>:
//------------------------------------------------------------------------------------
void SVF_directSetFilterValue(ResonantFilter* filter, float val) // 0 < val < 1
{
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	ed2d 8b02 	vpush	{d8}
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	eeb0 8a40 	vmov.f32	s16, s0
	if (val > 0.95) val = 0.95f;
 8003ccc:	ee10 0a10 	vmov	r0, s0
 8003cd0:	f7fc fbde 	bl	8000490 <__aeabi_f2d>
 8003cd4:	a30e      	add	r3, pc, #56	; (adr r3, 8003d10 <SVF_directSetFilterValue+0x50>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f7fc fec1 	bl	8000a60 <__aeabi_dcmpgt>
 8003cde:	b108      	cbz	r0, 8003ce4 <SVF_directSetFilterValue+0x24>
 8003ce0:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8003d08 <SVF_directSetFilterValue+0x48>
	filter->f = val*0.5f;
 8003ce4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003ce8:	ee28 8a00 	vmul.f32	s16, s16, s0
 8003cec:	ed84 8a01 	vstr	s16, [r4, #4]
	filter->g  = fastTan(_PI * filter->f );
 8003cf0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003d0c <SVF_directSetFilterValue+0x4c>
 8003cf4:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003cf8:	f7ff f8b6 	bl	8002e68 <fastTan>
 8003cfc:	ed84 0a02 	vstr	s0, [r4, #8]

}
 8003d00:	ecbd 8b02 	vpop	{d8}
 8003d04:	bd10      	pop	{r4, pc}
 8003d06:	bf00      	nop
 8003d08:	3f733333 	.word	0x3f733333
 8003d0c:	40490fdb 	.word	0x40490fdb
 8003d10:	66666666 	.word	0x66666666
 8003d14:	3fee6666 	.word	0x3fee6666

08003d18 <SVF_initialize>:
{
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	4604      	mov	r4, r0
	filter->type = 1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	7003      	strb	r3, [r0, #0]
	filter->s1 = 0;
 8003d20:	2500      	movs	r5, #0
 8003d22:	6105      	str	r5, [r0, #16]
	filter->s2 = 0;
 8003d24:	6145      	str	r5, [r0, #20]
	filter->f = 0.20f;
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <SVF_initialize+0x28>)
 8003d28:	6043      	str	r3, [r0, #4]
	filter->q = 0.9f;
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <SVF_initialize+0x2c>)
 8003d2c:	60c3      	str	r3, [r0, #12]
	filter->drive = 0.4f;
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <SVF_initialize+0x30>)
 8003d30:	6183      	str	r3, [r0, #24]
	SVF_directSetFilterValue(filter,0.25f);
 8003d32:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8003d36:	f7ff ffc3 	bl	8003cc0 <SVF_directSetFilterValue>
	filter->zi = 0;	//input z^(-1)
 8003d3a:	61e5      	str	r5, [r4, #28]
}
 8003d3c:	bd38      	pop	{r3, r4, r5, pc}
 8003d3e:	bf00      	nop
 8003d40:	3e4ccccd 	.word	0x3e4ccccd
 8003d44:	3f666666 	.word	0x3f666666
 8003d48:	3ecccccd 	.word	0x3ecccccd

08003d4c <SVF_init>:
//=====================================================================================================
void SVF_init(void)
{
 8003d4c:	b510      	push	{r4, lr}
	SVF_initialize(&SVFilter);
 8003d4e:	4c04      	ldr	r4, [pc, #16]	; (8003d60 <SVF_init+0x14>)
 8003d50:	4620      	mov	r0, r4
 8003d52:	f7ff ffe1 	bl	8003d18 <SVF_initialize>
	SVF_initialize(&SVFilter2);
 8003d56:	f104 0020 	add.w	r0, r4, #32
 8003d5a:	f7ff ffdd 	bl	8003d18 <SVF_initialize>
}
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	20003e94 	.word	0x20003e94

08003d64 <Filter1Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter1Freq_set(uint8_t val)
{
 8003d64:	b508      	push	{r3, lr}
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003d66:	eddf 0a08 	vldr	s1, [pc, #32]	; 8003d88 <Filter1Freq_set+0x24>
 8003d6a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003d8c <Filter1Freq_set+0x28>
 8003d6e:	f7ff f807 	bl	8002d80 <Lin2Exp>
 8003d72:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003d90 <Filter1Freq_set+0x2c>
 8003d76:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <Filter1Freq_set+0x30>)
 8003d7c:	ed83 0a00 	vstr	s0, [r3]
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003d80:	4805      	ldr	r0, [pc, #20]	; (8003d98 <Filter1Freq_set+0x34>)
 8003d82:	f7ff ff9d 	bl	8003cc0 <SVF_directSetFilterValue>
}
 8003d86:	bd08      	pop	{r3, pc}
 8003d88:	45fa0000 	.word	0x45fa0000
 8003d8c:	42a00000 	.word	0x42a00000
 8003d90:	472c4400 	.word	0x472c4400
 8003d94:	20013bd8 	.word	0x20013bd8
 8003d98:	20003e94 	.word	0x20003e94

08003d9c <Filter1Res_set>:
//------------------------------------------------------------------------------------
void 	Filter1Res_set(uint8_t val)
{
 8003d9c:	b508      	push	{r3, lr}
	SVF_setReso(&SVFilter, val / MIDI_MAX);
 8003d9e:	ee07 0a90 	vmov	s15, r0
 8003da2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003da6:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003db8 <Filter1Res_set+0x1c>
 8003daa:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003dae:	4803      	ldr	r0, [pc, #12]	; (8003dbc <Filter1Res_set+0x20>)
 8003db0:	f7ff ff60 	bl	8003c74 <SVF_setReso>
}
 8003db4:	bd08      	pop	{r3, pc}
 8003db6:	bf00      	nop
 8003db8:	42fe0000 	.word	0x42fe0000
 8003dbc:	20003e94 	.word	0x20003e94

08003dc0 <Filter1Drive_set>:
//------------------------------------------------------------------------------------
void	Filter1Drive_set(uint8_t val)
{
 8003dc0:	b508      	push	{r3, lr}
	SVF_setDrive(&SVFilter, val);
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	4801      	ldr	r0, [pc, #4]	; (8003dcc <Filter1Drive_set+0xc>)
 8003dc6:	f7ff ff67 	bl	8003c98 <SVF_setDrive>
}
 8003dca:	bd08      	pop	{r3, pc}
 8003dcc:	20003e94 	.word	0x20003e94

08003dd0 <Filter1Type_set>:
//------------------------------------------------------------------------------------
void 	Filter1Type_set(uint8_t val)
{
 8003dd0:	b508      	push	{r3, lr}
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003dd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003dd6:	ee07 0a90 	vmov	s15, r0
 8003dda:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003dde:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003df0 <Filter1Type_set+0x20>
 8003de2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003de6:	f003 fd0b 	bl	8007800 <lrintf>
 8003dea:	4b02      	ldr	r3, [pc, #8]	; (8003df4 <Filter1Type_set+0x24>)
 8003dec:	7018      	strb	r0, [r3, #0]
}
 8003dee:	bd08      	pop	{r3, pc}
 8003df0:	42fe0000 	.word	0x42fe0000
 8003df4:	20003e94 	.word	0x20003e94

08003df8 <Filter2Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter2Freq_set(uint8_t val)
{
 8003df8:	b508      	push	{r3, lr}
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003dfa:	eddf 0a08 	vldr	s1, [pc, #32]	; 8003e1c <Filter2Freq_set+0x24>
 8003dfe:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003e20 <Filter2Freq_set+0x28>
 8003e02:	f7fe ffbd 	bl	8002d80 <Lin2Exp>
 8003e06:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003e24 <Filter2Freq_set+0x2c>
 8003e0a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <Filter2Freq_set+0x30>)
 8003e10:	ed83 0a00 	vstr	s0, [r3]
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 8003e14:	4805      	ldr	r0, [pc, #20]	; (8003e2c <Filter2Freq_set+0x34>)
 8003e16:	f7ff ff53 	bl	8003cc0 <SVF_directSetFilterValue>
}
 8003e1a:	bd08      	pop	{r3, pc}
 8003e1c:	45fa0000 	.word	0x45fa0000
 8003e20:	42a00000 	.word	0x42a00000
 8003e24:	472c4400 	.word	0x472c4400
 8003e28:	20013bdc 	.word	0x20013bdc
 8003e2c:	20003eb4 	.word	0x20003eb4

08003e30 <Filter2Res_set>:
//------------------------------------------------------------------------------------
void 	Filter2Res_set(uint8_t val)
{
 8003e30:	b508      	push	{r3, lr}
	SVF_setReso(&SVFilter2, val / MIDI_MAX);
 8003e32:	ee07 0a90 	vmov	s15, r0
 8003e36:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003e3a:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003e4c <Filter2Res_set+0x1c>
 8003e3e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003e42:	4803      	ldr	r0, [pc, #12]	; (8003e50 <Filter2Res_set+0x20>)
 8003e44:	f7ff ff16 	bl	8003c74 <SVF_setReso>
}
 8003e48:	bd08      	pop	{r3, pc}
 8003e4a:	bf00      	nop
 8003e4c:	42fe0000 	.word	0x42fe0000
 8003e50:	20003eb4 	.word	0x20003eb4

08003e54 <Filter2Drive_set>:
//------------------------------------------------------------------------------------
void	Filter2Drive_set(uint8_t val)
{
 8003e54:	b508      	push	{r3, lr}
	SVF_setDrive(&SVFilter2, val);
 8003e56:	4601      	mov	r1, r0
 8003e58:	4801      	ldr	r0, [pc, #4]	; (8003e60 <Filter2Drive_set+0xc>)
 8003e5a:	f7ff ff1d 	bl	8003c98 <SVF_setDrive>
}
 8003e5e:	bd08      	pop	{r3, pc}
 8003e60:	20003eb4 	.word	0x20003eb4

08003e64 <Filter2Type_set>:
//------------------------------------------------------------------------------------
void 	Filter2Type_set(uint8_t val)
{
 8003e64:	b508      	push	{r3, lr}
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003e66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e6a:	ee07 0a90 	vmov	s15, r0
 8003e6e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003e72:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003e88 <Filter2Type_set+0x24>
 8003e76:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003e7a:	f003 fcc1 	bl	8007800 <lrintf>
 8003e7e:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <Filter2Type_set+0x28>)
 8003e80:	f883 0020 	strb.w	r0, [r3, #32]
}
 8003e84:	bd08      	pop	{r3, pc}
 8003e86:	bf00      	nop
 8003e88:	42fe0000 	.word	0x42fe0000
 8003e8c:	20003e94 	.word	0x20003e94

08003e90 <SVF_calcSample>:

//------------------------------------------------------------------------------------

float SVF_calcSample(ResonantFilter* filter, float in)
{
 8003e90:	b510      	push	{r4, lr}
 8003e92:	ed2d 8b0c 	vpush	{d8-d13}
 8003e96:	4604      	mov	r4, r0
 8003e98:	eef0 aa40 	vmov.f32	s21, s0
	const float f 	= filter->g;
 8003e9c:	ed90 8a02 	vldr	s16, [r0, #8]
	//fix unstable filter for high f and r settings
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003ea0:	ed90 7a01 	vldr	s14, [r0, #4]
 8003ea4:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8004054 <SVF_calcSample+0x1c4>
 8003ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb0:	f280 8089 	bge.w	8003fc6 <SVF_calcSample+0x136>
 8003eb4:	ed90 ba03 	vldr	s22, [r0, #12]
	const float ff 	= f*f;
 8003eb8:	ee28 9a08 	vmul.f32	s18, s16, s16


#if USE_SHAPER_NONLINEARITY
	const float x = (buf[i]/((float)0x7fff));
#else
	const float x = softClipTwo( in * filter->drive);
 8003ebc:	ed94 0a06 	vldr	s0, [r4, #24]
 8003ec0:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8003ec4:	f7fe ffc0 	bl	8002e48 <softClipTwo>
 8003ec8:	eef0 9a40 	vmov.f32	s19, s0
#endif

#if ENABLE_NONLINEAR_INTEGRATORS
	// input with half sample delay, for non-linearities
	float ih = 0.5f * (x + filter->zi);
 8003ecc:	ed94 0a07 	vldr	s0, [r4, #28]
 8003ed0:	ee30 0a29 	vadd.f32	s0, s0, s19
 8003ed4:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8003ed8:	ee20 0a2b 	vmul.f32	s0, s0, s23
	filter->zi = x;
 8003edc:	edc4 9a07 	vstr	s19, [r4, #28]
		You can trivially remove any saturator by setting the corresponding gain t0,...,t1 to 1. Also, you can simply scale any saturator (i.e. change clipping threshold) to 1/a*tanh(a*x) by writing
		double t1 = tanhXdX(a*s[0]);
	 */
#if ENABLE_NONLINEAR_INTEGRATORS
	const float scale = 0.5f;
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 8003ee0:	ee3b aa0b 	vadd.f32	s20, s22, s22
 8003ee4:	edd4 7a04 	vldr	s15, [r4, #16]
 8003ee8:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8003eec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003ef0:	edd4 7a05 	vldr	s15, [r4, #20]
 8003ef4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003ef8:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8003efc:	f7fe ff58 	bl	8002db0 <tanhXdX>
 8003f00:	eef0 8a40 	vmov.f32	s17, s0
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 8003f04:	ed94 0a04 	vldr	s0, [r4, #16]
 8003f08:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8003f0c:	f7fe ff50 	bl	8002db0 <tanhXdX>
 8003f10:	eef0 ba40 	vmov.f32	s23, s0
	const float t0 = 1;
	const float t1 = 1;
#endif

	// g# the denominators for solutions of individual stages
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003f14:	ee68 7a28 	vmul.f32	s15, s16, s17
 8003f18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f1c:	ee27 7a8b 	vmul.f32	s14, s15, s22
 8003f20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003f24:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003f28:	ee86 da07 	vdiv.f32	s26, s12, s14

	const float s1 = filter->s1;
 8003f2c:	ed94 0a04 	vldr	s0, [r4, #16]
	const float s2 = filter->s2;
 8003f30:	edd4 6a05 	vldr	s13, [r4, #20]

	// solve feedback
	const float f1 = ff*g0*t0*t1;
 8003f34:	ee69 7a0d 	vmul.f32	s15, s18, s26
 8003f38:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003f3c:	ee67 7aab 	vmul.f32	s15, s15, s23
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003f40:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8003f44:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003f48:	ee68 6a0d 	vmul.f32	s13, s16, s26
 8003f4c:	ee66 6aab 	vmul.f32	s13, s13, s23
 8003f50:	ee66 6a80 	vmul.f32	s13, s13, s0
 8003f54:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003f58:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003f5c:	ee87 ca27 	vdiv.f32	s24, s14, s15


	// solve the remaining stages with nonlinear gain
	const float xx = t0*(x - y1);
 8003f60:	ee39 9acc 	vsub.f32	s18, s19, s24
 8003f64:	ee29 9a28 	vmul.f32	s18, s18, s17
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003f68:	f7fe ff6e 	bl	8002e48 <softClipTwo>
 8003f6c:	ee68 ca09 	vmul.f32	s25, s16, s18
 8003f70:	ee30 0a2c 	vadd.f32	s0, s0, s25
 8003f74:	ee20 da0d 	vmul.f32	s26, s0, s26

	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003f78:	ed94 0a04 	vldr	s0, [r4, #16]
 8003f7c:	f7fe ff64 	bl	8002e48 <softClipTwo>
 8003f80:	ee38 8a08 	vadd.f32	s16, s16, s16
 8003f84:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8003f88:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8003f8c:	ee68 8a8d 	vmul.f32	s17, s17, s26
 8003f90:	ee79 8a68 	vsub.f32	s17, s18, s17
 8003f94:	ee68 8a28 	vmul.f32	s17, s16, s17
 8003f98:	ee70 8a28 	vadd.f32	s17, s0, s17
 8003f9c:	edc4 8a04 	vstr	s17, [r4, #16]
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003fa0:	edd4 7a05 	vldr	s15, [r4, #20]
 8003fa4:	ee28 8a2b 	vmul.f32	s16, s16, s23
 8003fa8:	ee28 8a0d 	vmul.f32	s16, s16, s26
 8003fac:	ee37 8a88 	vadd.f32	s16, s15, s16
 8003fb0:	ed84 8a05 	vstr	s16, [r4, #20]

	float out;


	switch(filter->type)
 8003fb4:	7823      	ldrb	r3, [r4, #0]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d844      	bhi.n	8004046 <SVF_calcSample+0x1b6>
 8003fbc:	e8df f003 	tbb	[pc, r3]
 8003fc0:	2d281d06 	.word	0x2d281d06
 8003fc4:	36          	.byte	0x36
 8003fc5:	00          	.byte	0x00
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003fc6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8003fca:	e775      	b.n	8003eb8 <SVF_calcSample+0x28>
	case FILTER_LP:
#if USE_SHAPER_NONLINEARITY

		buf[i] = FILTER_GAIN * fastTanh( distortion_calcSampleFloat(&filter->shaper, y1));
#else
		out = fastTanh(y1) ;
 8003fcc:	eeb0 0a4c 	vmov.f32	s0, s24
 8003fd0:	f7fe ff10 	bl	8002df4 <fastTanh>
	default:
		out = in ;
		break;
	}

	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 8003fd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003fd8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe0:	dd01      	ble.n	8003fe6 <SVF_calcSample+0x156>
 8003fe2:	eeb0 0a67 	vmov.f32	s0, s15
	out = (out < -1.0f) ? -1.0f : out;
 8003fe6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003fea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff2:	d42b      	bmi.n	800404c <SVF_calcSample+0x1bc>

	return out;

}
 8003ff4:	ecbd 8b0c 	vpop	{d8-d13}
 8003ff8:	bd10      	pop	{r4, pc}
		const float ugb = 2*R*y0;
 8003ffa:	ee2a 0a0d 	vmul.f32	s0, s20, s26
		const float h = x - ugb - y1;
 8003ffe:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8004002:	ee30 0a4c 	vsub.f32	s0, s0, s24
		out = h * FILTER_GAIN_F;
 8004006:	eddf aa14 	vldr	s21, [pc, #80]	; 8004058 <SVF_calcSample+0x1c8>
 800400a:	ee20 0a2a 	vmul.f32	s0, s0, s21
	break;
 800400e:	e7e1      	b.n	8003fd4 <SVF_calcSample+0x144>
		out = y0 * FILTER_GAIN_F;
 8004010:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8004058 <SVF_calcSample+0x1c8>
 8004014:	ee2d 0a00 	vmul.f32	s0, s26, s0
		break;
 8004018:	e7dc      	b.n	8003fd4 <SVF_calcSample+0x144>
		const float ugb = 2*R*y0;
 800401a:	ee2a 0a0d 	vmul.f32	s0, s20, s26
		out = (x-ugb) * FILTER_GAIN_F;
 800401e:	ee79 9ac0 	vsub.f32	s19, s19, s0
 8004022:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004058 <SVF_calcSample+0x1c8>
 8004026:	ee29 0a80 	vmul.f32	s0, s19, s0
	break;
 800402a:	e7d3      	b.n	8003fd4 <SVF_calcSample+0x144>
		const float ugb = 2*R*y0;
 800402c:	ee2a 0a0d 	vmul.f32	s0, s20, s26
		const float h = x - ugb - y1;
 8004030:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8004034:	ee30 0a4c 	vsub.f32	s0, s0, s24
		out = (y1-h) * FILTER_GAIN_F;
 8004038:	ee3c 0a40 	vsub.f32	s0, s24, s0
 800403c:	eddf aa06 	vldr	s21, [pc, #24]	; 8004058 <SVF_calcSample+0x1c8>
 8004040:	ee20 0a2a 	vmul.f32	s0, s0, s21
	break;
 8004044:	e7c6      	b.n	8003fd4 <SVF_calcSample+0x144>
		out = in ;
 8004046:	eeb0 0a6a 	vmov.f32	s0, s21
 800404a:	e7c3      	b.n	8003fd4 <SVF_calcSample+0x144>
	out = (out < -1.0f) ? -1.0f : out;
 800404c:	eeb0 0a67 	vmov.f32	s0, s15
	return out;
 8004050:	e7d0      	b.n	8003ff4 <SVF_calcSample+0x164>
 8004052:	bf00      	nop
 8004054:	3ee6594b 	.word	0x3ee6594b
 8004058:	3f6147ae 	.word	0x3f6147ae

0800405c <seq_tempo_set>:

Sequencer_t seq _CCM_;
NoteGenerator_t noteGen _CCM_;

/*--------------------------------------------------------------------------------------------*/
void seq_tempo_set(uint8_t val) {
 800405c:	b510      	push	{r4, lr}
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 800405e:	ee07 0a90 	vmov	s15, r0
 8004062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004066:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004094 <seq_tempo_set+0x38>
 800406a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800406e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004098 <seq_tempo_set+0x3c>
 8004072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004076:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800407a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800407e:	4c07      	ldr	r4, [pc, #28]	; (800409c <seq_tempo_set+0x40>)
 8004080:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8004084:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80040a0 <seq_tempo_set+0x44>
 8004088:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800408c:	f003 fbb8 	bl	8007800 <lrintf>
 8004090:	6460      	str	r0, [r4, #68]	; 0x44
	//seq.smp_count = seq.steptime;
}
 8004092:	bd10      	pop	{r4, pc}
 8004094:	44480000 	.word	0x44480000
 8004098:	42fe0000 	.word	0x42fe0000
 800409c:	20003ed4 	.word	0x20003ed4
 80040a0:	4a217fc0 	.word	0x4a217fc0

080040a4 <seq_gateTime_set>:
/*-------------------------------------------------------*/
void seq_gateTime_set(uint8_t val) // val is a number of samples
{
	seq.gateTime = seq.steptime * ((0.9f - 0.1f) * val / MIDI_MAX + 0.1f); // from 10% to 90% of each step duration
 80040a4:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <seq_gateTime_set+0x38>)
 80040a6:	ee07 0a90 	vmov	s15, r0
 80040aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ae:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80040e0 <seq_gateTime_set+0x3c>
 80040b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80040e4 <seq_gateTime_set+0x40>
 80040ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040be:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80040e8 <seq_gateTime_set+0x44>
 80040c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 80040da:	4770      	bx	lr
 80040dc:	20003ed4 	.word	0x20003ed4
 80040e0:	3f4ccccc 	.word	0x3f4ccccc
 80040e4:	42fe0000 	.word	0x42fe0000
 80040e8:	3dcccccd 	.word	0x3dcccccd

080040ec <seq_chooseScale>:

/*-------------------------------------------------------*/
void seq_chooseScale(int16_t idx) {
	uint8_t *currentScale;

	switch (idx) {
 80040ec:	280e      	cmp	r0, #14
 80040ee:	d825      	bhi.n	800413c <seq_chooseScale+0x50>
 80040f0:	e8df f000 	tbb	[pc, r0]
 80040f4:	0c0a2608 	.word	0x0c0a2608
 80040f8:	1412100e 	.word	0x1412100e
 80040fc:	1c1a1816 	.word	0x1c1a1816
 8004100:	201e      	.short	0x201e
 8004102:	22          	.byte	0x22
 8004103:	00          	.byte	0x00
	case 0:
		currentScale = (uint8_t*) MIDIscale13;
 8004104:	4a12      	ldr	r2, [pc, #72]	; (8004150 <seq_chooseScale+0x64>)
 8004106:	e01c      	b.n	8004142 <seq_chooseScale+0x56>
		break;
	case 1:
		currentScale = (uint8_t*) MIDIscale14;
		break;
	case 2:
		currentScale = (uint8_t*) MIDIscale07;
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <seq_chooseScale+0x68>)
		break;
 800410a:	e01a      	b.n	8004142 <seq_chooseScale+0x56>
	case 3:
		currentScale = (uint8_t*) MIDIscale08;
 800410c:	4a12      	ldr	r2, [pc, #72]	; (8004158 <seq_chooseScale+0x6c>)
		break;
 800410e:	e018      	b.n	8004142 <seq_chooseScale+0x56>
	case 4:
		currentScale = (uint8_t*) MIDIscale09;
 8004110:	4a12      	ldr	r2, [pc, #72]	; (800415c <seq_chooseScale+0x70>)
		break;
 8004112:	e016      	b.n	8004142 <seq_chooseScale+0x56>
	case 5:
		currentScale = (uint8_t*) MIDIscale10;
 8004114:	4a12      	ldr	r2, [pc, #72]	; (8004160 <seq_chooseScale+0x74>)
		break;
 8004116:	e014      	b.n	8004142 <seq_chooseScale+0x56>
	case 6:
		currentScale = (uint8_t*) MIDIscale04;
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <seq_chooseScale+0x78>)
		break;
 800411a:	e012      	b.n	8004142 <seq_chooseScale+0x56>
	case 7:
		currentScale = (uint8_t*) MIDIscale01;
 800411c:	4a12      	ldr	r2, [pc, #72]	; (8004168 <seq_chooseScale+0x7c>)
		break;
 800411e:	e010      	b.n	8004142 <seq_chooseScale+0x56>
	case 8:
		currentScale = (uint8_t*) MIDIscale03;
 8004120:	4a12      	ldr	r2, [pc, #72]	; (800416c <seq_chooseScale+0x80>)
		break;
 8004122:	e00e      	b.n	8004142 <seq_chooseScale+0x56>
	case 9:
		currentScale = (uint8_t*) MIDIscale11;
 8004124:	4a12      	ldr	r2, [pc, #72]	; (8004170 <seq_chooseScale+0x84>)
		break;
 8004126:	e00c      	b.n	8004142 <seq_chooseScale+0x56>
	case 10:
		currentScale = (uint8_t*) MIDIscale02;
 8004128:	4a12      	ldr	r2, [pc, #72]	; (8004174 <seq_chooseScale+0x88>)
		break;
 800412a:	e00a      	b.n	8004142 <seq_chooseScale+0x56>
	case 11:
		currentScale = (uint8_t*) MIDIscale06;
 800412c:	4a12      	ldr	r2, [pc, #72]	; (8004178 <seq_chooseScale+0x8c>)
		break;
 800412e:	e008      	b.n	8004142 <seq_chooseScale+0x56>
	case 12:
		currentScale = (uint8_t*) MIDIscale05;
 8004130:	4a12      	ldr	r2, [pc, #72]	; (800417c <seq_chooseScale+0x90>)
		break;
 8004132:	e006      	b.n	8004142 <seq_chooseScale+0x56>
	case 13:
		currentScale = (uint8_t*) MIDIscale12;
 8004134:	4a12      	ldr	r2, [pc, #72]	; (8004180 <seq_chooseScale+0x94>)
		break;
 8004136:	e004      	b.n	8004142 <seq_chooseScale+0x56>
	case 14:
		currentScale = (uint8_t*) MIDIscale11;
 8004138:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <seq_chooseScale+0x84>)
		break;
 800413a:	e002      	b.n	8004142 <seq_chooseScale+0x56>
	default:
		currentScale = (uint8_t*) MIDIscale11;
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <seq_chooseScale+0x84>)
		break;
 800413e:	e000      	b.n	8004142 <seq_chooseScale+0x56>
		currentScale = (uint8_t*) MIDIscale14;
 8004140:	4a10      	ldr	r2, [pc, #64]	; (8004184 <seq_chooseScale+0x98>)
	}
	noteGen.currentScale = currentScale;
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <seq_chooseScale+0x9c>)
 8004144:	659a      	str	r2, [r3, #88]	; 0x58
	noteGen.chRequested = true;
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	0801633c 	.word	0x0801633c
 8004154:	08016310 	.word	0x08016310
 8004158:	08016314 	.word	0x08016314
 800415c:	08016318 	.word	0x08016318
 8004160:	0801631c 	.word	0x0801631c
 8004164:	080162f8 	.word	0x080162f8
 8004168:	080162e0 	.word	0x080162e0
 800416c:	080162f0 	.word	0x080162f0
 8004170:	08016324 	.word	0x08016324
 8004174:	080162e8 	.word	0x080162e8
 8004178:	08016308 	.word	0x08016308
 800417c:	08016300 	.word	0x08016300
 8004180:	0801632c 	.word	0x0801632c
 8004184:	08016340 	.word	0x08016340
 8004188:	20003ed4 	.word	0x20003ed4

0800418c <seq_scale_set>:
		noteGen.scaleIndex--;
		seq_chooseScale(noteGen.scaleIndex);
	}
}
/*-------------------------------------------------------*/
void seq_scale_set(uint8_t val) {
 800418c:	b500      	push	{lr}
 800418e:	b083      	sub	sp, #12
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 8004190:	ee07 0a90 	vmov	s15, r0
 8004194:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004198:	eddf 7a09 	vldr	s15, [pc, #36]	; 80041c0 <seq_scale_set+0x34>
 800419c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80041a0:	f003 fb6e 	bl	8007880 <rintf>
 80041a4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80041a8:	edcd 7a01 	vstr	s15, [sp, #4]
 80041ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <seq_scale_set+0x38>)
 80041b2:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	seq_chooseScale(noteGen.scaleIndex);
 80041b6:	f7ff ff99 	bl	80040ec <seq_chooseScale>
}
 80041ba:	b003      	add	sp, #12
 80041bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80041c0:	3de1c387 	.word	0x3de1c387
 80041c4:	20003ed4 	.word	0x20003ed4

080041c8 <seq_switchMovingSeq>:
	else
		noteGen.automaticON = true;
}
/*-------------------------------------------------------*/
void seq_switchMovingSeq(uint8_t val) {
	if (val > 63)
 80041c8:	283f      	cmp	r0, #63	; 0x3f
 80041ca:	d804      	bhi.n	80041d6 <seq_switchMovingSeq+0xe>
		noteGen.automaticON = true;
	else
		noteGen.automaticON = false;
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <seq_switchMovingSeq+0x18>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
}
 80041d4:	4770      	bx	lr
		noteGen.automaticON = true;
 80041d6:	4b02      	ldr	r3, [pc, #8]	; (80041e0 <seq_switchMovingSeq+0x18>)
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80041de:	4770      	bx	lr
 80041e0:	20003ed4 	.word	0x20003ed4

080041e4 <seq_switchMute>:
	else
		noteGen.someNotesMuted = true;
}
/*-------------------------------------------------------*/
void seq_switchMute(uint8_t val) {
	switch (val) {
 80041e4:	b130      	cbz	r0, 80041f4 <seq_switchMute+0x10>
 80041e6:	287f      	cmp	r0, #127	; 0x7f
 80041e8:	d108      	bne.n	80041fc <seq_switchMute+0x18>
	case MIDI_MAXi:
		noteGen.someNotesMuted = true;
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <seq_switchMute+0x1c>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		break;
 80041f2:	4770      	bx	lr
	case 0:
		noteGen.someNotesMuted = false;
 80041f4:	4b02      	ldr	r3, [pc, #8]	; (8004200 <seq_switchMute+0x1c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		break;
	}
}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20003ed4 	.word	0x20003ed4

08004204 <seq_freqMax_set>:
		noteGen.chRequested = true;
		//pitchGenChangePoints();
	}
}
/*-------------------------------------------------------*/
void seq_freqMax_set(uint8_t val) {
 8004204:	b082      	sub	sp, #8
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 8004206:	ee07 0a90 	vmov	s15, r0
 800420a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800420e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004234 <seq_freqMax_set+0x30>
 8004212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421a:	edcd 7a01 	vstr	s15, [sp, #4]
 800421e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004222:	4a05      	ldr	r2, [pc, #20]	; (8004238 <seq_freqMax_set+0x34>)
 8004224:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
	noteGen.chRequested = true;
 8004228:	2301      	movs	r3, #1
 800422a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
}
 800422e:	b002      	add	sp, #8
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	3d810204 	.word	0x3d810204
 8004238:	20003ed4 	.word	0x20003ed4

0800423c <seq_sequence_new>:

/*--------------------------------------------------------------------------------------------*/
void seq_sequence_new(void) {
 800423c:	b570      	push	{r4, r5, r6, lr}
	int16_t relativeNote;
	int16_t octaveShift;
	int16_t index;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 800423e:	2400      	movs	r4, #0
 8004240:	e00d      	b.n	800425e <seq_sequence_new+0x22>
				frand_a_b(1, noteGen.currentScale[0]))];
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;

		while (index > MAX_NOTE_INDEX)
			index -= 12;
 8004242:	3b0c      	subs	r3, #12
 8004244:	b21b      	sxth	r3, r3
		while (index > MAX_NOTE_INDEX)
 8004246:	2b6a      	cmp	r3, #106	; 0x6a
 8004248:	dcfb      	bgt.n	8004242 <seq_sequence_new+0x6>
 800424a:	e001      	b.n	8004250 <seq_sequence_new+0x14>
		while (index < 0)
			index += 12;
 800424c:	330c      	adds	r3, #12
 800424e:	b21b      	sxth	r3, r3
		while (index < 0)
 8004250:	2b00      	cmp	r3, #0
 8004252:	dbfb      	blt.n	800424c <seq_sequence_new+0x10>
		seq.track1.note[i] = index; // note frequency is in notesFreq[index]
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <seq_sequence_new+0x78>)
 8004256:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 800425a:	3401      	adds	r4, #1
 800425c:	b2e4      	uxtb	r4, r4
 800425e:	2c0f      	cmp	r4, #15
 8004260:	d826      	bhi.n	80042b0 <seq_sequence_new+0x74>
		relativeNote = noteGen.currentScale[lrintf(
 8004262:	4d14      	ldr	r5, [pc, #80]	; (80042b4 <seq_sequence_new+0x78>)
 8004264:	6dae      	ldr	r6, [r5, #88]	; 0x58
				frand_a_b(1, noteGen.currentScale[0]))];
 8004266:	7833      	ldrb	r3, [r6, #0]
 8004268:	ee00 3a90 	vmov	s1, r3
		relativeNote = noteGen.currentScale[lrintf(
 800426c:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8004270:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004274:	f7ff fcd2 	bl	8003c1c <frand_a_b>
 8004278:	f003 fac2 	bl	8007800 <lrintf>
 800427c:	5c36      	ldrb	r6, [r6, r0]
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 800427e:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
 8004282:	ee00 3a90 	vmov	s1, r3
 8004286:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800428a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80042b8 <seq_sequence_new+0x7c>
 800428e:	f7ff fcc5 	bl	8003c1c <frand_a_b>
 8004292:	f003 fab5 	bl	8007800 <lrintf>
 8004296:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800429a:	0083      	lsls	r3, r0, #2
 800429c:	b29b      	uxth	r3, r3
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 800429e:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80042a2:	4413      	add	r3, r2
 80042a4:	fa16 f383 	uxtah	r3, r6, r3
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b15      	subs	r3, #21
 80042ac:	b21b      	sxth	r3, r3
		while (index > MAX_NOTE_INDEX)
 80042ae:	e7ca      	b.n	8004246 <seq_sequence_new+0xa>
	}
}
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
 80042b2:	bf00      	nop
 80042b4:	20003ed4 	.word	0x20003ed4
 80042b8:	00000000 	.word	0x00000000

080042bc <seq_transpose>:
/*--------------------------------------------------------------------------------------------*/
void seq_transpose(void) {
	int16_t noteIndex;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 80042bc:	2200      	movs	r2, #0
 80042be:	e00d      	b.n	80042dc <seq_transpose+0x20>
		noteIndex = seq.track1.note[i] + noteGen.transpose;
		while (noteIndex > MAX_NOTE_INDEX)
			noteIndex -= 12;
 80042c0:	3b0c      	subs	r3, #12
 80042c2:	b21b      	sxth	r3, r3
		while (noteIndex > MAX_NOTE_INDEX)
 80042c4:	2b6a      	cmp	r3, #106	; 0x6a
 80042c6:	dcfb      	bgt.n	80042c0 <seq_transpose+0x4>
 80042c8:	e001      	b.n	80042ce <seq_transpose+0x12>
		while (noteIndex < 0)
			noteIndex += 12;
 80042ca:	330c      	adds	r3, #12
 80042cc:	b21b      	sxth	r3, r3
		while (noteIndex < 0)
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	dbfb      	blt.n	80042ca <seq_transpose+0xe>
		seq.track1.note[i] = noteIndex;
 80042d2:	490a      	ldr	r1, [pc, #40]	; (80042fc <seq_transpose+0x40>)
 80042d4:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 80042d8:	3201      	adds	r2, #1
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	2a0f      	cmp	r2, #15
 80042de:	d808      	bhi.n	80042f2 <seq_transpose+0x36>
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 80042e0:	4610      	mov	r0, r2
 80042e2:	4906      	ldr	r1, [pc, #24]	; (80042fc <seq_transpose+0x40>)
 80042e4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80042e8:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
 80042ec:	440b      	add	r3, r1
 80042ee:	b21b      	sxth	r3, r3
		while (noteIndex > MAX_NOTE_INDEX)
 80042f0:	e7e8      	b.n	80042c4 <seq_transpose+0x8>
	}
	noteGen.transpose = 0;
 80042f2:	4b02      	ldr	r3, [pc, #8]	; (80042fc <seq_transpose+0x40>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
}
 80042fa:	4770      	bx	lr
 80042fc:	20003ed4 	.word	0x20003ed4

08004300 <sequencer_init>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_init(void) {
 8004300:	b510      	push	{r4, lr}
	seq.tempo = INIT_TEMPO;
 8004302:	4c13      	ldr	r4, [pc, #76]	; (8004350 <sequencer_init+0x50>)
 8004304:	4b13      	ldr	r3, [pc, #76]	; (8004354 <sequencer_init+0x54>)
 8004306:	6423      	str	r3, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8004308:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8004358 <sequencer_init+0x58>
 800430c:	f003 fa78 	bl	8007800 <lrintf>
 8004310:	6460      	str	r0, [r4, #68]	; 0x44
	seq.smp_count = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	64a3      	str	r3, [r4, #72]	; 0x48
	seq.step_idx = 0;
 8004316:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	seq.gateTime = seq.steptime / 2;
 800431a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800431e:	1040      	asrs	r0, r0, #1
 8004320:	6520      	str	r0, [r4, #80]	; 0x50

	noteGen.transpose = 0;
 8004322:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	noteGen.automaticON = false;
 8004326:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	noteGen.glideON = false;
 800432a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	noteGen.chRequested = false;
 800432e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	noteGen.someNotesMuted = false;
 8004332:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	noteGen.scaleIndex = 0;
 8004336:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	noteGen.octaveSpread = 4;
 800433a:	2304      	movs	r3, #4
 800433c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	noteGen.rootNote = 36;
 8004340:	2324      	movs	r3, #36	; 0x24
 8004342:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <sequencer_init+0x5c>)
 8004348:	65a3      	str	r3, [r4, #88]	; 0x58

	seq_sequence_new();
 800434a:	f7ff ff77 	bl	800423c <seq_sequence_new>
}
 800434e:	bd10      	pop	{r4, pc}
 8004350:	20003ed4 	.word	0x20003ed4
 8004354:	43a00000 	.word	0x43a00000
 8004358:	46013300 	.word	0x46013300
 800435c:	0801633c 	.word	0x0801633c

08004360 <sequencer_process>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_process(void) // To be called at each sample treatment
{
 8004360:	b508      	push	{r3, lr}
	/* If we have reached a new step ....  */
	if (seq.smp_count-- <= 0) {
 8004362:	4a0f      	ldr	r2, [pc, #60]	; (80043a0 <sequencer_process+0x40>)
 8004364:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004366:	1e59      	subs	r1, r3, #1
 8004368:	6491      	str	r1, [r2, #72]	; 0x48
 800436a:	2b00      	cmp	r3, #0
 800436c:	dd00      	ble.n	8004370 <sequencer_process+0x10>
		seq.step_idx++;
		if (seq.step_idx >= NUMBER_STEPS)
			seq.step_idx = 0;

	}
}
 800436e:	bd08      	pop	{r3, pc}
		if (seq.step_idx == 0) {
 8004370:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
 8004374:	b18b      	cbz	r3, 800439a <sequencer_process+0x3a>
		sequencer_newStep_action();
 8004376:	f000 f9f5 	bl	8004764 <sequencer_newStep_action>
		seq.smp_count = seq.steptime; // reload the counter
 800437a:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <sequencer_process+0x40>)
 800437c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800437e:	6493      	str	r3, [r2, #72]	; 0x48
		seq.step_idx++;
 8004380:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
 8004384:	3301      	adds	r3, #1
 8004386:	b21b      	sxth	r3, r3
 8004388:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
		if (seq.step_idx >= NUMBER_STEPS)
 800438c:	2b0f      	cmp	r3, #15
 800438e:	ddee      	ble.n	800436e <sequencer_process+0xe>
			seq.step_idx = 0;
 8004390:	4613      	mov	r3, r2
 8004392:	2200      	movs	r2, #0
 8004394:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8004398:	e7e9      	b.n	800436e <sequencer_process+0xe>
			sequencer_newSequence_action();
 800439a:	f000 fa9b 	bl	80048d4 <sequencer_newSequence_action>
 800439e:	e7ea      	b.n	8004376 <sequencer_process+0x16>
 80043a0:	20003ed4 	.word	0x20003ed4

080043a4 <autoSound_set>:
static enum timbre sound _CCM_;

/*===============================================================================================================*/

void autoSound_set(int8_t val) {
	autoSound = val;
 80043a4:	4b01      	ldr	r3, [pc, #4]	; (80043ac <autoSound_set+0x8>)
 80043a6:	7018      	strb	r0, [r3, #0]
}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20003f3c 	.word	0x20003f3c

080043b0 <soundNumber_get>:
	}
}
/*---------------------------------------------------------*/
uint8_t soundNumber_get(void) {
	return sound;
}
 80043b0:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <soundNumber_get+0x8>)
 80043b2:	7858      	ldrb	r0, [r3, #1]
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20003f3c 	.word	0x20003f3c

080043bc <AmpLFO_amp_set>:
	}
}

/*-------------------------------------------------------*/
void AmpLFO_amp_set(uint8_t val) {
	amp_lfo.amp = val / MIDI_MAX;
 80043bc:	ee07 0a90 	vmov	s15, r0
 80043c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043c4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80043d4 <AmpLFO_amp_set+0x18>
 80043c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <AmpLFO_amp_set+0x1c>)
 80043ce:	edc3 7a00 	vstr	s15, [r3]
}
 80043d2:	4770      	bx	lr
 80043d4:	42fe0000 	.word	0x42fe0000
 80043d8:	20003e14 	.word	0x20003e14

080043dc <AmpLFO_freq_set>:
/*-------------------------------------------------------*/
void AmpLFO_freq_set(uint8_t val) {
	amp_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 80043dc:	ee07 0a90 	vmov	s15, r0
 80043e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80043f4 <AmpLFO_freq_set+0x18>
 80043e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ec:	4b02      	ldr	r3, [pc, #8]	; (80043f8 <AmpLFO_freq_set+0x1c>)
 80043ee:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80043f2:	4770      	bx	lr
 80043f4:	3dc18306 	.word	0x3dc18306
 80043f8:	20003e14 	.word	0x20003e14

080043fc <Filt1LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt1LFO_amp_set(uint8_t val) {
	filt_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 80043fc:	ee07 0a90 	vmov	s15, r0
 8004400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004404:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004414 <Filt1LFO_amp_set+0x18>
 8004408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800440c:	4b02      	ldr	r3, [pc, #8]	; (8004418 <Filt1LFO_amp_set+0x1c>)
 800440e:	edc3 7a00 	vstr	s15, [r3]
}
 8004412:	4770      	bx	lr
 8004414:	3e810204 	.word	0x3e810204
 8004418:	20003e54 	.word	0x20003e54

0800441c <Filt1LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt1LFO_freq_set(uint8_t val) {
	filt_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 800441c:	ee07 0a90 	vmov	s15, r0
 8004420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004424:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004434 <Filt1LFO_freq_set+0x18>
 8004428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800442c:	4b02      	ldr	r3, [pc, #8]	; (8004438 <Filt1LFO_freq_set+0x1c>)
 800442e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004432:	4770      	bx	lr
 8004434:	3dc18306 	.word	0x3dc18306
 8004438:	20003e54 	.word	0x20003e54

0800443c <Filt2LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt2LFO_amp_set(uint8_t val) {
	filt2_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 800443c:	ee07 0a90 	vmov	s15, r0
 8004440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004444:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004454 <Filt2LFO_amp_set+0x18>
 8004448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <Filt2LFO_amp_set+0x1c>)
 800444e:	edc3 7a00 	vstr	s15, [r3]
}
 8004452:	4770      	bx	lr
 8004454:	3e810204 	.word	0x3e810204
 8004458:	20003e34 	.word	0x20003e34

0800445c <Filt2LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt2LFO_freq_set(uint8_t val) {
	filt2_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 800445c:	ee07 0a90 	vmov	s15, r0
 8004460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004464:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004474 <Filt2LFO_freq_set+0x18>
 8004468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446c:	4b02      	ldr	r3, [pc, #8]	; (8004478 <Filt2LFO_freq_set+0x1c>)
 800446e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004472:	4770      	bx	lr
 8004474:	3dc18306 	.word	0x3dc18306
 8004478:	20003e34 	.word	0x20003e34

0800447c <VibratoAmp_set>:
	} else
		vibr_lfo.amp = vibr_lfo.last_amp;
}
/*-------------------------------------------------------*/
void VibratoAmp_set(uint8_t val) {
	vibr_lfo.amp = MAX_VIBRATO_AMP / MIDI_MAX * val;
 800447c:	ee07 0a90 	vmov	s15, r0
 8004480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004484:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004494 <VibratoAmp_set+0x18>
 8004488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800448c:	4b02      	ldr	r3, [pc, #8]	; (8004498 <VibratoAmp_set+0x1c>)
 800448e:	edc3 7a00 	vstr	s15, [r3]
}
 8004492:	4770      	bx	lr
 8004494:	3b810204 	.word	0x3b810204
 8004498:	20003e74 	.word	0x20003e74

0800449c <VibratoFreq_set>:
/*-------------------------------------------------------*/
void VibratoFreq_set(uint8_t val) {
	vibr_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 800449c:	ee07 0a90 	vmov	s15, r0
 80044a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80044b4 <VibratoFreq_set+0x18>
 80044a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ac:	4b02      	ldr	r3, [pc, #8]	; (80044b8 <VibratoFreq_set+0x1c>)
 80044ae:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80044b2:	4770      	bx	lr
 80044b4:	3dc18306 	.word	0x3dc18306
 80044b8:	20003e74 	.word	0x20003e74

080044bc <Delay_switch>:
		Delay_clean();
	} else
		delayON = true;
}
/*-------------------------------------------------------*/
void Delay_switch(uint8_t val) {
 80044bc:	b508      	push	{r3, lr}

	if (val > 63)
 80044be:	283f      	cmp	r0, #63	; 0x3f
 80044c0:	d903      	bls.n	80044ca <Delay_switch+0xe>
		delayON = true;
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <Delay_switch+0x1c>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	709a      	strb	r2, [r3, #2]
	else {
		delayON = false;
		Delay_clean();
	}
}
 80044c8:	bd08      	pop	{r3, pc}
		delayON = false;
 80044ca:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <Delay_switch+0x1c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	709a      	strb	r2, [r3, #2]
		Delay_clean();
 80044d0:	f7fe f8d4 	bl	800267c <Delay_clean>
}
 80044d4:	e7f8      	b.n	80044c8 <Delay_switch+0xc>
 80044d6:	bf00      	nop
 80044d8:	20003f3c 	.word	0x20003f3c

080044dc <Filter_Random_switch>:
	else
		autoFilterON = true;
}
/*-------------------------------------------------------*/
void Filter_Random_switch(uint8_t val) {
	if (val > 63)
 80044dc:	283f      	cmp	r0, #63	; 0x3f
 80044de:	d803      	bhi.n	80044e8 <Filter_Random_switch+0xc>
		autoFilterON = true;
	else
		autoFilterON = false;
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <Filter_Random_switch+0x14>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	70da      	strb	r2, [r3, #3]
}
 80044e6:	4770      	bx	lr
		autoFilterON = true;
 80044e8:	4b01      	ldr	r3, [pc, #4]	; (80044f0 <Filter_Random_switch+0x14>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	70da      	strb	r2, [r3, #3]
 80044ee:	4770      	bx	lr
 80044f0:	20003f3c 	.word	0x20003f3c

080044f4 <Chorus_switch>:
		chorusON = true;
}
/*-------------------------------------------------------*/
void Chorus_switch(uint8_t val) {

	if (val > 63)
 80044f4:	283f      	cmp	r0, #63	; 0x3f
 80044f6:	d803      	bhi.n	8004500 <Chorus_switch+0xc>
		chorusON = true;
	else
		chorusON = false;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <Chorus_switch+0x14>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	711a      	strb	r2, [r3, #4]
}
 80044fe:	4770      	bx	lr
		chorusON = true;
 8004500:	4b01      	ldr	r3, [pc, #4]	; (8004508 <Chorus_switch+0x14>)
 8004502:	2201      	movs	r2, #1
 8004504:	711a      	strb	r2, [r3, #4]
 8004506:	4770      	bx	lr
 8004508:	20003f3c 	.word	0x20003f3c

0800450c <Phaser_switch>:
/*-------------------------------------------------------*/
void Phaser_switch(uint8_t val) {

	if (val > 63)
 800450c:	283f      	cmp	r0, #63	; 0x3f
 800450e:	d803      	bhi.n	8004518 <Phaser_switch+0xc>
		phaserON = true;
	else
		phaserON = false;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <Phaser_switch+0x14>)
 8004512:	2200      	movs	r2, #0
 8004514:	715a      	strb	r2, [r3, #5]
}
 8004516:	4770      	bx	lr
		phaserON = true;
 8004518:	4b01      	ldr	r3, [pc, #4]	; (8004520 <Phaser_switch+0x14>)
 800451a:	2201      	movs	r2, #1
 800451c:	715a      	strb	r2, [r3, #5]
 800451e:	4770      	bx	lr
 8004520:	20003f3c 	.word	0x20003f3c

08004524 <toggleSound>:
/*-------------------------------------------------------*/
void toggleSound(void) {
	if (sound < LAST_SOUND)
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <toggleSound+0x18>)
 8004526:	785b      	ldrb	r3, [r3, #1]
 8004528:	2b0f      	cmp	r3, #15
 800452a:	d903      	bls.n	8004534 <toggleSound+0x10>
		(sound)++;
	else
		sound = 0;
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <toggleSound+0x18>)
 800452e:	2200      	movs	r2, #0
 8004530:	705a      	strb	r2, [r3, #1]
}
 8004532:	4770      	bx	lr
		(sound)++;
 8004534:	3301      	adds	r3, #1
 8004536:	4a01      	ldr	r2, [pc, #4]	; (800453c <toggleSound+0x18>)
 8004538:	7053      	strb	r3, [r2, #1]
 800453a:	4770      	bx	lr
 800453c:	20003f3c 	.word	0x20003f3c

08004540 <Sound_set>:
		(sound)--;
	else
		sound = 0;
}
/*-------------------------------------------------------*/
void Sound_set(uint8_t val) {
 8004540:	b500      	push	{lr}
 8004542:	b083      	sub	sp, #12
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 8004544:	ee07 0a90 	vmov	s15, r0
 8004548:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800454c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8004578 <Sound_set+0x38>
 8004550:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004554:	f003 f994 	bl	8007880 <rintf>
 8004558:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800455c:	edcd 7a01 	vstr	s15, [sp, #4]
 8004560:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004564:	4a05      	ldr	r2, [pc, #20]	; (800457c <Sound_set+0x3c>)
 8004566:	7053      	strb	r3, [r2, #1]
	if (sound != ADDITIVE)
 8004568:	2b04      	cmp	r3, #4
 800456a:	d001      	beq.n	8004570 <Sound_set+0x30>
		AdditiveGen_newWaveform();
 800456c:	f7ff f862 	bl	8003634 <AdditiveGen_newWaveform>
}
 8004570:	b003      	add	sp, #12
 8004572:	f85d fb04 	ldr.w	pc, [sp], #4
 8004576:	bf00      	nop
 8004578:	3df1e3c8 	.word	0x3df1e3c8
 800457c:	20003f3c 	.word	0x20003f3c

08004580 <FM_OP1_freq_set>:
/*******************************************************************************************************************************/

void FM_OP1_freq_set(uint8_t val) {
 8004580:	b508      	push	{r3, lr}
	FM_op_freq_set(&op1, val);
 8004582:	4601      	mov	r1, r0
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <FM_OP1_freq_set+0xc>)
 8004586:	f7fe fca9 	bl	8002edc <FM_op_freq_set>
}
 800458a:	bd08      	pop	{r3, pc}
 800458c:	20003d9c 	.word	0x20003d9c

08004590 <FM_OP1_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP1_modInd_set(uint8_t val) {
 8004590:	b508      	push	{r3, lr}
	FM_op_modInd_set(&op1, val);
 8004592:	4601      	mov	r1, r0
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <FM_OP1_modInd_set+0xc>)
 8004596:	f7fe fcaf 	bl	8002ef8 <FM_op_modInd_set>
}
 800459a:	bd08      	pop	{r3, pc}
 800459c:	20003d9c 	.word	0x20003d9c

080045a0 <FM_OP2_freq_set>:

/*----------------------------------------------------------------------------------------------------------------------------*/
void FM_OP2_freq_set(uint8_t val) {
 80045a0:	b508      	push	{r3, lr}
	//FM_op_freq_set(&op2, val);
	op2.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op2 is a multiple of the main pitch freq (op1)
 80045a2:	eddf 0a05 	vldr	s1, [pc, #20]	; 80045b8 <FM_OP2_freq_set+0x18>
 80045a6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80045bc <FM_OP2_freq_set+0x1c>
 80045aa:	f7fe fbe9 	bl	8002d80 <Lin2Exp>
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <FM_OP2_freq_set+0x20>)
 80045b0:	ed83 0a06 	vstr	s0, [r3, #24]
	//op2.mul = roundf(32 * val/MIDI_MAX);
}
 80045b4:	bd08      	pop	{r3, pc}
 80045b6:	bf00      	nop
 80045b8:	42000000 	.word	0x42000000
 80045bc:	3e4ccccd 	.word	0x3e4ccccd
 80045c0:	20003d7c 	.word	0x20003d7c

080045c4 <FM_OP2_modInd_set>:
	if (val == MIDI_MAXi) {
		op2.mul *= 0.99f;
	}
}
/*-------------------------------------------------------*/
void FM_OP2_modInd_set(uint8_t val) {
 80045c4:	b508      	push	{r3, lr}
	FM_op_modInd_set(&op2, val);
 80045c6:	4601      	mov	r1, r0
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <FM_OP2_modInd_set+0xc>)
 80045ca:	f7fe fc95 	bl	8002ef8 <FM_op_modInd_set>
}
 80045ce:	bd08      	pop	{r3, pc}
 80045d0:	20003d7c 	.word	0x20003d7c

080045d4 <FM_OP3_freq_set>:

/*------------------------------------------------------------------------------------------------------------------------------*/
void FM_OP3_freq_set(uint8_t val) {
 80045d4:	b508      	push	{r3, lr}
	op3.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op3 is a multiple of the main pitch freq (op1)
 80045d6:	eddf 0a05 	vldr	s1, [pc, #20]	; 80045ec <FM_OP3_freq_set+0x18>
 80045da:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80045f0 <FM_OP3_freq_set+0x1c>
 80045de:	f7fe fbcf 	bl	8002d80 <Lin2Exp>
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <FM_OP3_freq_set+0x20>)
 80045e4:	ed83 0a06 	vstr	s0, [r3, #24]
}
 80045e8:	bd08      	pop	{r3, pc}
 80045ea:	bf00      	nop
 80045ec:	42000000 	.word	0x42000000
 80045f0:	3e4ccccd 	.word	0x3e4ccccd
 80045f4:	20003d5c 	.word	0x20003d5c

080045f8 <FM_OP3_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP3_modInd_set(uint8_t val) {
 80045f8:	b508      	push	{r3, lr}
	FM_op_modInd_set(&op3, val);
 80045fa:	4601      	mov	r1, r0
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <FM_OP3_modInd_set+0xc>)
 80045fe:	f7fe fc7b 	bl	8002ef8 <FM_op_modInd_set>
}
 8004602:	bd08      	pop	{r3, pc}
 8004604:	20003d5c 	.word	0x20003d5c

08004608 <FM_OP4_freq_set>:
		op3.mul *= 0.99f;
	}
}

/*--------------------------------------------------------------------------------------------------------------------------*/
void FM_OP4_freq_set(uint8_t val) {
 8004608:	b508      	push	{r3, lr}
	op4.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op4 is a multiple of the main pitch freq (op1)
 800460a:	eddf 0a05 	vldr	s1, [pc, #20]	; 8004620 <FM_OP4_freq_set+0x18>
 800460e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004624 <FM_OP4_freq_set+0x1c>
 8004612:	f7fe fbb5 	bl	8002d80 <Lin2Exp>
 8004616:	4b04      	ldr	r3, [pc, #16]	; (8004628 <FM_OP4_freq_set+0x20>)
 8004618:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800461c:	bd08      	pop	{r3, pc}
 800461e:	bf00      	nop
 8004620:	42000000 	.word	0x42000000
 8004624:	3e4ccccd 	.word	0x3e4ccccd
 8004628:	20003d3c 	.word	0x20003d3c

0800462c <FM_OP4_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP4_modInd_set(uint8_t val) {
 800462c:	b508      	push	{r3, lr}
	FM_op_modInd_set(&op4, val);
 800462e:	4601      	mov	r1, r0
 8004630:	4801      	ldr	r0, [pc, #4]	; (8004638 <FM_OP4_modInd_set+0xc>)
 8004632:	f7fe fc61 	bl	8002ef8 <FM_op_modInd_set>
}
 8004636:	bd08      	pop	{r3, pc}
 8004638:	20003d3c 	.word	0x20003d3c

0800463c <Synth_Init>:
	}
}

/*===============================================================================================================*/

void Synth_Init(void) {
 800463c:	b508      	push	{r3, lr}
 800463e:	ed2d 8b02 	vpush	{d8}

	vol = env = 1;
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <Synth_Init+0xe0>)
 8004644:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004648:	609a      	str	r2, [r3, #8]
	sound = 0;
 800464a:	2200      	movs	r2, #0
 800464c:	705a      	strb	r2, [r3, #1]
	autoFilterON = true;
 800464e:	2101      	movs	r1, #1
 8004650:	70d9      	strb	r1, [r3, #3]
	autoSound = 0;
 8004652:	701a      	strb	r2, [r3, #0]
	chorusON = false;
 8004654:	711a      	strb	r2, [r3, #4]
	delayON = true;
 8004656:	7099      	strb	r1, [r3, #2]
	phaserON = false;
 8004658:	715a      	strb	r2, [r3, #5]

	Delay_init();
 800465a:	f7fd fff9 	bl	8002650 <Delay_init>
	drifter_init();
 800465e:	f7fe f9a7 	bl	80029b0 <drifter_init>
//	pitchGen_init();
	sequencer_init();
 8004662:	f7ff fe4d 	bl	8004300 <sequencer_init>
	ADSR_init(&adsr);
 8004666:	482e      	ldr	r0, [pc, #184]	; (8004720 <Synth_Init+0xe4>)
 8004668:	f7fc fdde 	bl	8001228 <ADSR_init>
	Chorus_init();
 800466c:	f7fd fe8c 	bl	8002388 <Chorus_init>
	PhaserInit();
 8004670:	f7ff f9e2 	bl	8003a38 <PhaserInit>
	SVF_init();
 8004674:	f7ff fb6a 	bl	8003d4c <SVF_init>
	filterFreq = 0.25f;
 8004678:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800467c:	4a29      	ldr	r2, [pc, #164]	; (8004724 <Synth_Init+0xe8>)
 800467e:	6013      	str	r3, [r2, #0]
	filterFreq2 = 0.25f;
 8004680:	4a29      	ldr	r2, [pc, #164]	; (8004728 <Synth_Init+0xec>)
 8004682:	6013      	str	r3, [r2, #0]
	osc_init(&op1, 0.8f, 587.f);
 8004684:	eddf 8a29 	vldr	s17, [pc, #164]	; 800472c <Synth_Init+0xf0>
 8004688:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8004730 <Synth_Init+0xf4>
 800468c:	eef0 0a68 	vmov.f32	s1, s17
 8004690:	eeb0 0a48 	vmov.f32	s0, s16
 8004694:	4827      	ldr	r0, [pc, #156]	; (8004734 <Synth_Init+0xf8>)
 8004696:	f7fe fc00 	bl	8002e9a <osc_init>
	osc_init(&op2, 0.8f, 587.f);
 800469a:	eef0 0a68 	vmov.f32	s1, s17
 800469e:	eeb0 0a48 	vmov.f32	s0, s16
 80046a2:	4825      	ldr	r0, [pc, #148]	; (8004738 <Synth_Init+0xfc>)
 80046a4:	f7fe fbf9 	bl	8002e9a <osc_init>
	osc_init(&op3, 0.8f, 587.f);
 80046a8:	eef0 0a68 	vmov.f32	s1, s17
 80046ac:	eeb0 0a48 	vmov.f32	s0, s16
 80046b0:	4822      	ldr	r0, [pc, #136]	; (800473c <Synth_Init+0x100>)
 80046b2:	f7fe fbf2 	bl	8002e9a <osc_init>
	osc_init(&op4, 0.8f, 587.f);
 80046b6:	eef0 0a68 	vmov.f32	s1, s17
 80046ba:	eeb0 0a48 	vmov.f32	s0, s16
 80046be:	4820      	ldr	r0, [pc, #128]	; (8004740 <Synth_Init+0x104>)
 80046c0:	f7fe fbeb 	bl	8002e9a <osc_init>
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 80046c4:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8004744 <Synth_Init+0x108>
 80046c8:	eef1 0a06 	vmov.f32	s1, #22	; 0x40b00000  5.5
 80046cc:	eeb0 0a48 	vmov.f32	s0, s16
 80046d0:	481d      	ldr	r0, [pc, #116]	; (8004748 <Synth_Init+0x10c>)
 80046d2:	f7fe fbe2 	bl	8002e9a <osc_init>
	osc_init(&filt_lfo, 0, 0);
 80046d6:	eef0 0a48 	vmov.f32	s1, s16
 80046da:	eeb0 0a48 	vmov.f32	s0, s16
 80046de:	481b      	ldr	r0, [pc, #108]	; (800474c <Synth_Init+0x110>)
 80046e0:	f7fe fbdb 	bl	8002e9a <osc_init>
	osc_init(&filt2_lfo, 0, 0);
 80046e4:	eef0 0a48 	vmov.f32	s1, s16
 80046e8:	eeb0 0a48 	vmov.f32	s0, s16
 80046ec:	4818      	ldr	r0, [pc, #96]	; (8004750 <Synth_Init+0x114>)
 80046ee:	f7fe fbd4 	bl	8002e9a <osc_init>
	osc_init(&amp_lfo, 0, 0);
 80046f2:	eef0 0a48 	vmov.f32	s1, s16
 80046f6:	eeb0 0a48 	vmov.f32	s0, s16
 80046fa:	4816      	ldr	r0, [pc, #88]	; (8004754 <Synth_Init+0x118>)
 80046fc:	f7fe fbcd 	bl	8002e9a <osc_init>
	AdditiveGen_newWaveform();
 8004700:	f7fe ff98 	bl	8003634 <AdditiveGen_newWaveform>
	VCO_blepsaw_Init(&mbSawOsc);
 8004704:	4814      	ldr	r0, [pc, #80]	; (8004758 <Synth_Init+0x11c>)
 8004706:	f7fc ff25 	bl	8001554 <VCO_blepsaw_Init>
	VCO_bleprect_Init(&mbRectOsc);
 800470a:	4814      	ldr	r0, [pc, #80]	; (800475c <Synth_Init+0x120>)
 800470c:	f7fd f82a 	bl	8001764 <VCO_bleprect_Init>
	VCO_bleptri_Init(&mbTriOsc);
 8004710:	4813      	ldr	r0, [pc, #76]	; (8004760 <Synth_Init+0x124>)
 8004712:	f7fd fa43 	bl	8001b9c <VCO_bleptri_Init>
}
 8004716:	ecbd 8b02 	vpop	{d8}
 800471a:	bd08      	pop	{r3, pc}
 800471c:	20003f3c 	.word	0x20003f3c
 8004720:	20000080 	.word	0x20000080
 8004724:	20013bd8 	.word	0x20013bd8
 8004728:	20013bdc 	.word	0x20013bdc
 800472c:	4412c000 	.word	0x4412c000
 8004730:	3f4ccccd 	.word	0x3f4ccccd
 8004734:	20003d9c 	.word	0x20003d9c
 8004738:	20003d7c 	.word	0x20003d7c
 800473c:	20003d5c 	.word	0x20003d5c
 8004740:	20003d3c 	.word	0x20003d3c
 8004744:	00000000 	.word	0x00000000
 8004748:	20003e74 	.word	0x20003e74
 800474c:	20003e54 	.word	0x20003e54
 8004750:	20003e34 	.word	0x20003e34
 8004754:	20003e14 	.word	0x20003e14
 8004758:	20000b5c 	.word	0x20000b5c
 800475c:	20000600 	.word	0x20000600
 8004760:	200000a8 	.word	0x200000a8

08004764 <sequencer_newStep_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newStep_action(void) // User callback function called by sequencer_process()
{
 8004764:	b510      	push	{r4, lr}
	if ((noteGen.automaticON || noteGen.chRequested)) {
 8004766:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <sequencer_newStep_action+0x144>)
 8004768:	7b9b      	ldrb	r3, [r3, #14]
 800476a:	b913      	cbnz	r3, 8004772 <sequencer_newStep_action+0xe>
 800476c:	4b4e      	ldr	r3, [pc, #312]	; (80048a8 <sequencer_newStep_action+0x144>)
 800476e:	7c1b      	ldrb	r3, [r3, #16]
 8004770:	b133      	cbz	r3, 8004780 <sequencer_newStep_action+0x1c>
		seq_sequence_new();
 8004772:	f7ff fd63 	bl	800423c <seq_sequence_new>
		noteGen.chRequested = false;
 8004776:	4b4c      	ldr	r3, [pc, #304]	; (80048a8 <sequencer_newStep_action+0x144>)
 8004778:	2200      	movs	r2, #0
 800477a:	741a      	strb	r2, [r3, #16]
		AdditiveGen_newWaveform();
 800477c:	f7fe ff5a 	bl	8003634 <AdditiveGen_newWaveform>
	}

	if ((noteGen.someNotesMuted) && (rintf(frand_a_b(0.4f, 1)) == 0))
 8004780:	4b49      	ldr	r3, [pc, #292]	; (80048a8 <sequencer_newStep_action+0x144>)
 8004782:	7c5b      	ldrb	r3, [r3, #17]
 8004784:	b163      	cbz	r3, 80047a0 <sequencer_newStep_action+0x3c>
 8004786:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800478a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80048ac <sequencer_newStep_action+0x148>
 800478e:	f7ff fa45 	bl	8003c1c <frand_a_b>
 8004792:	f003 f875 	bl	8007880 <rintf>
 8004796:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479e:	d027      	beq.n	80047f0 <sequencer_newStep_action+0x8c>
		ADSR_keyOff(&adsr);
	else
		ADSR_keyOn(&adsr);
 80047a0:	4843      	ldr	r0, [pc, #268]	; (80048b0 <sequencer_newStep_action+0x14c>)
 80047a2:	f7fc fd55 	bl	8001250 <ADSR_keyOn>

	if (autoFilterON)
 80047a6:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <sequencer_newStep_action+0x150>)
 80047a8:	78db      	ldrb	r3, [r3, #3]
 80047aa:	bb2b      	cbnz	r3, 80047f8 <sequencer_newStep_action+0x94>
		SVF_directSetFilterValue(&SVFilter,
		Ts * 600.f * powf(5000.f / 600.f, frand_a_b(0, 1)));

	if (noteGen.transpose != 0) {
 80047ac:	4b3e      	ldr	r3, [pc, #248]	; (80048a8 <sequencer_newStep_action+0x144>)
 80047ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80047b2:	bbab      	cbnz	r3, 8004820 <sequencer_newStep_action+0xbc>
		noteGen.rootNote += noteGen.transpose;
		seq_transpose();
	}

	if (autoSound == 1) {
 80047b4:	4b3f      	ldr	r3, [pc, #252]	; (80048b4 <sequencer_newStep_action+0x150>)
 80047b6:	f993 3000 	ldrsb.w	r3, [r3]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d038      	beq.n	8004830 <sequencer_newStep_action+0xcc>
		case 3:
			sound = VOICES3;
			break;
		}
	}
	if (autoSound == 2) {
 80047be:	4b3d      	ldr	r3, [pc, #244]	; (80048b4 <sequencer_newStep_action+0x150>)
 80047c0:	f993 3000 	ldrsb.w	r3, [r3]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d054      	beq.n	8004872 <sequencer_newStep_action+0x10e>
			sound = VOICES3;
		if (sound == ADDITIVE)
			AdditiveGen_newWaveform();
	}

	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 80047c8:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <sequencer_newStep_action+0x154>)
 80047ca:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 80047ce:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80047d2:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <sequencer_newStep_action+0x158>)
 80047d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4c36      	ldr	r4, [pc, #216]	; (80048b4 <sequencer_newStep_action+0x150>)
 80047dc:	60e3      	str	r3, [r4, #12]
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 80047de:	eddf 0a38 	vldr	s1, [pc, #224]	; 80048c0 <sequencer_newStep_action+0x15c>
 80047e2:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80048ac <sequencer_newStep_action+0x148>
 80047e6:	f7ff fa19 	bl	8003c1c <frand_a_b>
 80047ea:	ed84 0a02 	vstr	s0, [r4, #8]
}
 80047ee:	bd10      	pop	{r4, pc}
		ADSR_keyOff(&adsr);
 80047f0:	482f      	ldr	r0, [pc, #188]	; (80048b0 <sequencer_newStep_action+0x14c>)
 80047f2:	f7fc fd36 	bl	8001262 <ADSR_keyOff>
 80047f6:	e7d6      	b.n	80047a6 <sequencer_newStep_action+0x42>
		Ts * 600.f * powf(5000.f / 600.f, frand_a_b(0, 1)));
 80047f8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80047fc:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80048c4 <sequencer_newStep_action+0x160>
 8004800:	f7ff fa0c 	bl	8003c1c <frand_a_b>
 8004804:	eef0 0a40 	vmov.f32	s1, s0
 8004808:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80048c8 <sequencer_newStep_action+0x164>
 800480c:	f003 f8d4 	bl	80079b8 <powf>
		SVF_directSetFilterValue(&SVFilter,
 8004810:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80048cc <sequencer_newStep_action+0x168>
 8004814:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004818:	482d      	ldr	r0, [pc, #180]	; (80048d0 <sequencer_newStep_action+0x16c>)
 800481a:	f7ff fa51 	bl	8003cc0 <SVF_directSetFilterValue>
 800481e:	e7c5      	b.n	80047ac <sequencer_newStep_action+0x48>
		noteGen.rootNote += noteGen.transpose;
 8004820:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <sequencer_newStep_action+0x144>)
 8004822:	8951      	ldrh	r1, [r2, #10]
 8004824:	fa11 f383 	uxtah	r3, r1, r3
 8004828:	8153      	strh	r3, [r2, #10]
		seq_transpose();
 800482a:	f7ff fd47 	bl	80042bc <seq_transpose>
 800482e:	e7c1      	b.n	80047b4 <sequencer_newStep_action+0x50>
		switch (rand() % 4) // 4 random timbers
 8004830:	f002 fefc 	bl	800762c <rand>
 8004834:	4243      	negs	r3, r0
 8004836:	f000 0003 	and.w	r0, r0, #3
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	bf58      	it	pl
 8004840:	4258      	negpl	r0, r3
 8004842:	2803      	cmp	r0, #3
 8004844:	d8bb      	bhi.n	80047be <sequencer_newStep_action+0x5a>
 8004846:	e8df f000 	tbb	[pc, r0]
 800484a:	0602      	.short	0x0602
 800484c:	100c      	.short	0x100c
			sound = CHORD15;
 800484e:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <sequencer_newStep_action+0x150>)
 8004850:	2209      	movs	r2, #9
 8004852:	705a      	strb	r2, [r3, #1]
			break;
 8004854:	e7b3      	b.n	80047be <sequencer_newStep_action+0x5a>
			AdditiveGen_newWaveform();
 8004856:	f7fe feed 	bl	8003634 <AdditiveGen_newWaveform>
			sound = ADDITIVE;
 800485a:	4b16      	ldr	r3, [pc, #88]	; (80048b4 <sequencer_newStep_action+0x150>)
 800485c:	2204      	movs	r2, #4
 800485e:	705a      	strb	r2, [r3, #1]
			break;
 8004860:	e7ad      	b.n	80047be <sequencer_newStep_action+0x5a>
			sound = CHORD13min5;
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <sequencer_newStep_action+0x150>)
 8004864:	220b      	movs	r2, #11
 8004866:	705a      	strb	r2, [r3, #1]
			break;
 8004868:	e7a9      	b.n	80047be <sequencer_newStep_action+0x5a>
			sound = VOICES3;
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <sequencer_newStep_action+0x150>)
 800486c:	220c      	movs	r2, #12
 800486e:	705a      	strb	r2, [r3, #1]
			break;
 8004870:	e7a5      	b.n	80047be <sequencer_newStep_action+0x5a>
		sound = rand() % LAST_SOUND;
 8004872:	f002 fedb 	bl	800762c <rand>
 8004876:	4243      	negs	r3, r0
 8004878:	f000 000f 	and.w	r0, r0, #15
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	bf58      	it	pl
 8004882:	4258      	negpl	r0, r3
 8004884:	b2c0      	uxtb	r0, r0
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <sequencer_newStep_action+0x150>)
 8004888:	7058      	strb	r0, [r3, #1]
		if ((sound == CHORD13min5) || (sound == CHORD135))
 800488a:	380a      	subs	r0, #10
 800488c:	b2c0      	uxtb	r0, r0
 800488e:	2801      	cmp	r0, #1
 8004890:	d906      	bls.n	80048a0 <sequencer_newStep_action+0x13c>
		if (sound == ADDITIVE)
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <sequencer_newStep_action+0x150>)
 8004894:	785b      	ldrb	r3, [r3, #1]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d196      	bne.n	80047c8 <sequencer_newStep_action+0x64>
			AdditiveGen_newWaveform();
 800489a:	f7fe fecb 	bl	8003634 <AdditiveGen_newWaveform>
 800489e:	e793      	b.n	80047c8 <sequencer_newStep_action+0x64>
			sound = VOICES3;
 80048a0:	220c      	movs	r2, #12
 80048a2:	705a      	strb	r2, [r3, #1]
 80048a4:	e7f5      	b.n	8004892 <sequencer_newStep_action+0x12e>
 80048a6:	bf00      	nop
 80048a8:	20003f28 	.word	0x20003f28
 80048ac:	3ecccccd 	.word	0x3ecccccd
 80048b0:	20000080 	.word	0x20000080
 80048b4:	20003f3c 	.word	0x20003f3c
 80048b8:	20003ed4 	.word	0x20003ed4
 80048bc:	08016344 	.word	0x08016344
 80048c0:	3f4ccccd 	.word	0x3f4ccccd
 80048c4:	00000000 	.word	0x00000000
 80048c8:	41055555 	.word	0x41055555
 80048cc:	3c5ee95c 	.word	0x3c5ee95c
 80048d0:	20003e94 	.word	0x20003e94

080048d4 <sequencer_newSequence_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newSequence_action(void) // User callback function called by sequencer_process()
{
 80048d4:	b508      	push	{r3, lr}
	/* A new sequence begins ... */
	if ((demoMode == true) && (freeze == false)) {
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <sequencer_newSequence_action+0x20>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	b113      	cbz	r3, 80048e2 <sequencer_newSequence_action+0xe>
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <sequencer_newSequence_action+0x24>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b103      	cbz	r3, 80048e4 <sequencer_newSequence_action+0x10>
		MagicPatch(MIDI_MAXi);
		MagicFX(MIDI_MAXi);
	}
}
 80048e2:	bd08      	pop	{r3, pc}
		MagicPatch(MIDI_MAXi);
 80048e4:	207f      	movs	r0, #127	; 0x7f
 80048e6:	f7fc faf7 	bl	8000ed8 <MagicPatch>
		MagicFX(MIDI_MAXi);
 80048ea:	207f      	movs	r0, #127	; 0x7f
 80048ec:	f7fc fab2 	bl	8000e54 <MagicFX>
}
 80048f0:	e7f7      	b.n	80048e2 <sequencer_newSequence_action+0xe>
 80048f2:	bf00      	nop
 80048f4:	200129e0 	.word	0x200129e0
 80048f8:	200129e1 	.word	0x200129e1

080048fc <make_sound>:
/*===============================================================================================================*/

void make_sound(uint16_t *buf, uint16_t length) // To be used with the Sequencer
{
 80048fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fe:	ed2d 8b04 	vpush	{d8-d9}
 8004902:	b083      	sub	sp, #12
 8004904:	4606      	mov	r6, r0
 8004906:	460f      	mov	r7, r1
	float f1;
	uint16_t valueL, valueR;

	outp = buf;

	for (pos = 0; pos < length; pos++) {
 8004908:	2400      	movs	r4, #0
 800490a:	e075      	b.n	80049f8 <make_sound+0xfc>
		/*--- Sequencer actions and update ---*/
		//sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
		// GRA
		if (sequencerIsOn == true) {
			sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
 800490c:	f7ff fd28 	bl	8004360 <sequencer_process>
 8004910:	e09a      	b.n	8004a48 <make_sound+0x14c>
		} else {
//			f0 = notesFreq[currentNote];
			 f0 = (notesFreq[currentNote] + currentFreq) / 2;
//			vol = (float) velocity / 127.0f;
			vol = triggered ? 1 : 0;
 8004912:	2200      	movs	r2, #0
 8004914:	e096      	b.n	8004a44 <make_sound+0x148>

		// GRA

		if (sequencerIsOn == true) {
			if (adsr.cnt_ >= seq.gateTime)
				ADSR_keyOff(&adsr);
 8004916:	4884      	ldr	r0, [pc, #528]	; (8004b28 <make_sound+0x22c>)
 8004918:	f7fc fca3 	bl	8001262 <ADSR_keyOff>
 800491c:	e0c1      	b.n	8004aa2 <make_sound+0x1a6>
		/*--- Apply filter effect ---*/
		/* Update the filters cutoff frequencies */
		if ((!autoFilterON) && (filt_lfo.amp != 0))
			SVF_directSetFilterValue(&SVFilter,
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
		if (filt2_lfo.amp != 0)
 800491e:	4b83      	ldr	r3, [pc, #524]	; (8004b2c <make_sound+0x230>)
 8004920:	edd3 7a00 	vldr	s15, [r3]
 8004924:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492c:	f040 80d7 	bne.w	8004ade <make_sound+0x1e2>
			SVF_directSetFilterValue(&SVFilter2,
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
		y =
				0.5f
						* (SVF_calcSample(&SVFilter, y)
 8004930:	eeb0 0a48 	vmov.f32	s0, s16
 8004934:	487e      	ldr	r0, [pc, #504]	; (8004b30 <make_sound+0x234>)
 8004936:	f7ff faab 	bl	8003e90 <SVF_calcSample>
 800493a:	eef0 8a40 	vmov.f32	s17, s0
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 800493e:	eeb0 0a48 	vmov.f32	s0, s16
 8004942:	487c      	ldr	r0, [pc, #496]	; (8004b34 <make_sound+0x238>)
 8004944:	f7ff faa4 	bl	8003e90 <SVF_calcSample>
 8004948:	ee38 0a80 	vadd.f32	s0, s17, s0
		y =
 800494c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004950:	ee20 0a27 	vmul.f32	s0, s0, s15

		/*---  Apply delay effect ----*/
		if (delayON)
 8004954:	4b78      	ldr	r3, [pc, #480]	; (8004b38 <make_sound+0x23c>)
 8004956:	789b      	ldrb	r3, [r3, #2]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 80d0 	bne.w	8004afe <make_sound+0x202>
			y = Delay_compute(y);

		/*---  Apply phaser effect ----*/
		if (phaserON)
 800495e:	4b76      	ldr	r3, [pc, #472]	; (8004b38 <make_sound+0x23c>)
 8004960:	795b      	ldrb	r3, [r3, #5]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 80ce 	bne.w	8004b04 <make_sound+0x208>
			y = Phaser_compute(y);

		/*--- Apply chorus/flanger effect ---*/
		if (chorusON)
 8004968:	4b73      	ldr	r3, [pc, #460]	; (8004b38 <make_sound+0x23c>)
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 80cc 	bne.w	8004b0a <make_sound+0x20e>
			stereoChorus_compute(&yL, &yR, y);
		else
			yL = yR = y;
 8004972:	ed8d 0a00 	vstr	s0, [sp]
 8004976:	ed8d 0a01 	vstr	s0, [sp, #4]

		/*--- clipping ---*/
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 800497a:	ed9d 7a01 	vldr	s14, [sp, #4]
 800497e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498a:	dd01      	ble.n	8004990 <make_sound+0x94>
 800498c:	eeb0 7a67 	vmov.f32	s14, s15
		yL = (yL < -1.0f) ? -1.0f : yL;
 8004990:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004994:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	f100 80ba 	bmi.w	8004b14 <make_sound+0x218>
 80049a0:	ed8d 7a01 	vstr	s14, [sp, #4]

		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 80049a4:	eddd 7a00 	vldr	s15, [sp]
 80049a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 80049b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b4:	dd01      	ble.n	80049ba <make_sound+0xbe>
 80049b6:	eef0 7a66 	vmov.f32	s15, s13
		yR = (yR < -1.0f) ? -1.0f : yR;
 80049ba:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80049be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80049c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c6:	f100 80a8 	bmi.w	8004b1a <make_sound+0x21e>
 80049ca:	edcd 7a00 	vstr	s15, [sp]

		/****** let's hear the new sample *******/

		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 80049ce:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8004b3c <make_sound+0x240>
 80049d2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80049d6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 80049da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049de:	eefd 7ae7 	vcvt.s32.f32	s15, s15

		*outp++ = valueL; // left channel sample
 80049e2:	4633      	mov	r3, r6
 80049e4:	ee17 2a10 	vmov	r2, s14
 80049e8:	f823 2b04 	strh.w	r2, [r3], #4
		*outp++ = valueR; // right channel sample
 80049ec:	ee17 2a90 	vmov	r2, s15
 80049f0:	8072      	strh	r2, [r6, #2]
	for (pos = 0; pos < length; pos++) {
 80049f2:	3401      	adds	r4, #1
 80049f4:	b2a4      	uxth	r4, r4
		*outp++ = valueR; // right channel sample
 80049f6:	461e      	mov	r6, r3
	for (pos = 0; pos < length; pos++) {
 80049f8:	42bc      	cmp	r4, r7
 80049fa:	f080 8091 	bcs.w	8004b20 <make_sound+0x224>
		if (sequencerIsOn == true) {
 80049fe:	4b50      	ldr	r3, [pc, #320]	; (8004b40 <make_sound+0x244>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d182      	bne.n	800490c <make_sound+0x10>
			 f0 = (notesFreq[currentNote] + currentFreq) / 2;
 8004a06:	4b4f      	ldr	r3, [pc, #316]	; (8004b44 <make_sound+0x248>)
 8004a08:	f993 2000 	ldrsb.w	r2, [r3]
 8004a0c:	4b4e      	ldr	r3, [pc, #312]	; (8004b48 <make_sound+0x24c>)
 8004a0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004a12:	ed93 7a00 	vldr	s14, [r3]
 8004a16:	4b4d      	ldr	r3, [pc, #308]	; (8004b4c <make_sound+0x250>)
 8004a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a30:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <make_sound+0x23c>)
 8004a32:	edc3 7a03 	vstr	s15, [r3, #12]
			vol = triggered ? 1 : 0;
 8004a36:	4b46      	ldr	r3, [pc, #280]	; (8004b50 <make_sound+0x254>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f43f af69 	beq.w	8004912 <make_sound+0x16>
 8004a40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a44:	4b3c      	ldr	r3, [pc, #240]	; (8004b38 <make_sound+0x23c>)
 8004a46:	609a      	str	r2, [r3, #8]
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 8004a48:	4842      	ldr	r0, [pc, #264]	; (8004b54 <make_sound+0x258>)
 8004a4a:	f7fe fa9b 	bl	8002f84 <Osc_WT_SINE_SampleCompute>
 8004a4e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004a52:	ee30 0a08 	vadd.f32	s0, s0, s16
 8004a56:	4d38      	ldr	r5, [pc, #224]	; (8004b38 <make_sound+0x23c>)
 8004a58:	edd5 7a03 	vldr	s15, [r5, #12]
		y = waveCompute(sound, f1);
 8004a5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004a60:	7868      	ldrb	r0, [r5, #1]
 8004a62:	f7fe fe8d 	bl	8003780 <waveCompute>
 8004a66:	eeb0 9a40 	vmov.f32	s18, s0
		env = ADSR_computeSample(&adsr)
 8004a6a:	482f      	ldr	r0, [pc, #188]	; (8004b28 <make_sound+0x22c>)
 8004a6c:	f7fc fca0 	bl	80013b0 <ADSR_computeSample>
 8004a70:	eef0 8a40 	vmov.f32	s17, s0
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 8004a74:	4838      	ldr	r0, [pc, #224]	; (8004b58 <make_sound+0x25c>)
 8004a76:	f7fe fa85 	bl	8002f84 <Osc_WT_SINE_SampleCompute>
 8004a7a:	ee30 8a08 	vadd.f32	s16, s0, s16
 8004a7e:	ee28 8a88 	vmul.f32	s16, s17, s16
		y *= vol * env; // apply volume and envelop
 8004a82:	edd5 8a02 	vldr	s17, [r5, #8]
 8004a86:	ee28 8a28 	vmul.f32	s16, s16, s17
 8004a8a:	ee28 8a09 	vmul.f32	s16, s16, s18
		if (sequencerIsOn == true) {
 8004a8e:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <make_sound+0x244>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b133      	cbz	r3, 8004aa2 <make_sound+0x1a6>
			if (adsr.cnt_ >= seq.gateTime)
 8004a94:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <make_sound+0x22c>)
 8004a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a98:	4b30      	ldr	r3, [pc, #192]	; (8004b5c <make_sound+0x260>)
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f4bf af3a 	bcs.w	8004916 <make_sound+0x1a>
		if ((!autoFilterON) && (filt_lfo.amp != 0))
 8004aa2:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <make_sound+0x23c>)
 8004aa4:	78db      	ldrb	r3, [r3, #3]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f47f af39 	bne.w	800491e <make_sound+0x22>
 8004aac:	4b2c      	ldr	r3, [pc, #176]	; (8004b60 <make_sound+0x264>)
 8004aae:	edd3 7a00 	vldr	s15, [r3]
 8004ab2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aba:	f43f af30 	beq.w	800491e <make_sound+0x22>
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fb38 	bl	8003134 <OpSampleCompute7bis>
 8004ac4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004ac8:	ee30 0a27 	vadd.f32	s0, s0, s15
			SVF_directSetFilterValue(&SVFilter,
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <make_sound+0x268>)
 8004ace:	edd3 7a00 	vldr	s15, [r3]
 8004ad2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004ad6:	4816      	ldr	r0, [pc, #88]	; (8004b30 <make_sound+0x234>)
 8004ad8:	f7ff f8f2 	bl	8003cc0 <SVF_directSetFilterValue>
 8004adc:	e71f      	b.n	800491e <make_sound+0x22>
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fb28 	bl	8003134 <OpSampleCompute7bis>
 8004ae4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004ae8:	ee30 0a27 	vadd.f32	s0, s0, s15
			SVF_directSetFilterValue(&SVFilter2,
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <make_sound+0x26c>)
 8004aee:	edd3 7a00 	vldr	s15, [r3]
 8004af2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004af6:	480f      	ldr	r0, [pc, #60]	; (8004b34 <make_sound+0x238>)
 8004af8:	f7ff f8e2 	bl	8003cc0 <SVF_directSetFilterValue>
 8004afc:	e718      	b.n	8004930 <make_sound+0x34>
			y = Delay_compute(y);
 8004afe:	f7fd fe1b 	bl	8002738 <Delay_compute>
 8004b02:	e72c      	b.n	800495e <make_sound+0x62>
			y = Phaser_compute(y);
 8004b04:	f7ff f804 	bl	8003b10 <Phaser_compute>
 8004b08:	e72e      	b.n	8004968 <make_sound+0x6c>
			stereoChorus_compute(&yL, &yR, y);
 8004b0a:	4669      	mov	r1, sp
 8004b0c:	a801      	add	r0, sp, #4
 8004b0e:	f7fd fd7f 	bl	8002610 <stereoChorus_compute>
 8004b12:	e732      	b.n	800497a <make_sound+0x7e>
		yL = (yL < -1.0f) ? -1.0f : yL;
 8004b14:	eeb0 7a67 	vmov.f32	s14, s15
 8004b18:	e742      	b.n	80049a0 <make_sound+0xa4>
		yR = (yR < -1.0f) ? -1.0f : yR;
 8004b1a:	eef0 7a66 	vmov.f32	s15, s13
 8004b1e:	e754      	b.n	80049ca <make_sound+0xce>
	}

}
 8004b20:	b003      	add	sp, #12
 8004b22:	ecbd 8b04 	vpop	{d8-d9}
 8004b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b28:	20000080 	.word	0x20000080
 8004b2c:	20003e34 	.word	0x20003e34
 8004b30:	20003e94 	.word	0x20003e94
 8004b34:	20003eb4 	.word	0x20003eb4
 8004b38:	20003f3c 	.word	0x20003f3c
 8004b3c:	46fffe00 	.word	0x46fffe00
 8004b40:	200129e2 	.word	0x200129e2
 8004b44:	20012a3a 	.word	0x20012a3a
 8004b48:	08016344 	.word	0x08016344
 8004b4c:	20012a38 	.word	0x20012a38
 8004b50:	20003f6a 	.word	0x20003f6a
 8004b54:	20003e74 	.word	0x20003e74
 8004b58:	20003e14 	.word	0x20003e14
 8004b5c:	20003ed4 	.word	0x20003ed4
 8004b60:	20003e54 	.word	0x20003e54
 8004b64:	20013bd8 	.word	0x20013bd8
 8004b68:	20013bdc 	.word	0x20013bdc

08004b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b6c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b6e:	2100      	movs	r1, #0
 8004b70:	9100      	str	r1, [sp, #0]
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_MspInit+0x34>)
 8004b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44
 8004b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b7e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004b82:	9200      	str	r2, [sp, #0]
 8004b84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b86:	9101      	str	r1, [sp, #4]
 8004b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b9a:	b002      	add	sp, #8
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800

08004ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ba4:	b530      	push	{r4, r5, lr}
 8004ba6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9303      	str	r3, [sp, #12]
 8004bac:	9304      	str	r3, [sp, #16]
 8004bae:	9305      	str	r3, [sp, #20]
 8004bb0:	9306      	str	r3, [sp, #24]
 8004bb2:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8004bb4:	6802      	ldr	r2, [r0, #0]
 8004bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bba:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d001      	beq.n	8004bc6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004bc2:	b009      	add	sp, #36	; 0x24
 8004bc4:	bd30      	pop	{r4, r5, pc}
 8004bc6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bc8:	2500      	movs	r5, #0
 8004bca:	9501      	str	r5, [sp, #4]
 8004bcc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd6:	645a      	str	r2, [r3, #68]	; 0x44
 8004bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bda:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004bde:	9201      	str	r2, [sp, #4]
 8004be0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004be2:	9502      	str	r5, [sp, #8]
 8004be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be6:	f042 0204 	orr.w	r2, r2, #4
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	9302      	str	r3, [sp, #8]
 8004bf4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004bf6:	230f      	movs	r3, #15
 8004bf8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bfe:	a903      	add	r1, sp, #12
 8004c00:	4810      	ldr	r0, [pc, #64]	; (8004c44 <HAL_ADC_MspInit+0xa0>)
 8004c02:	f001 f803 	bl	8005c0c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004c06:	4810      	ldr	r0, [pc, #64]	; (8004c48 <HAL_ADC_MspInit+0xa4>)
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <HAL_ADC_MspInit+0xa8>)
 8004c0a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004c0c:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c0e:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c10:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c16:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c1c:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c22:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c28:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c2a:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c2c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c2e:	f000 fe63 	bl	80058f8 <HAL_DMA_Init>
 8004c32:	b918      	cbnz	r0, 8004c3c <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <HAL_ADC_MspInit+0xa4>)
 8004c36:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c38:	639c      	str	r4, [r3, #56]	; 0x38
}
 8004c3a:	e7c2      	b.n	8004bc2 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8004c3c:	f7fe f89e 	bl	8002d7c <Error_Handler>
 8004c40:	e7f8      	b.n	8004c34 <HAL_ADC_MspInit+0x90>
 8004c42:	bf00      	nop
 8004c44:	40020800 	.word	0x40020800
 8004c48:	20013ac0 	.word	0x20013ac0
 8004c4c:	40026410 	.word	0x40026410

08004c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c50:	b530      	push	{r4, r5, lr}
 8004c52:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c54:	2300      	movs	r3, #0
 8004c56:	9303      	str	r3, [sp, #12]
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	9305      	str	r3, [sp, #20]
 8004c5c:	9306      	str	r3, [sp, #24]
 8004c5e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8004c60:	6802      	ldr	r2, [r0, #0]
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <HAL_I2C_MspInit+0x68>)
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004c68:	b009      	add	sp, #36	; 0x24
 8004c6a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6c:	2500      	movs	r5, #0
 8004c6e:	9501      	str	r5, [sp, #4]
 8004c70:	4c12      	ldr	r4, [pc, #72]	; (8004cbc <HAL_I2C_MspInit+0x6c>)
 8004c72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	6323      	str	r3, [r4, #48]	; 0x30
 8004c7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c8a:	2312      	movs	r3, #18
 8004c8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c92:	2303      	movs	r3, #3
 8004c94:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c96:	2304      	movs	r3, #4
 8004c98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c9a:	a903      	add	r1, sp, #12
 8004c9c:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <HAL_I2C_MspInit+0x70>)
 8004c9e:	f000 ffb5 	bl	8005c0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ca2:	9502      	str	r5, [sp, #8]
 8004ca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004caa:	6423      	str	r3, [r4, #64]	; 0x40
 8004cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb2:	9302      	str	r3, [sp, #8]
 8004cb4:	9b02      	ldr	r3, [sp, #8]
}
 8004cb6:	e7d7      	b.n	8004c68 <HAL_I2C_MspInit+0x18>
 8004cb8:	40005800 	.word	0x40005800
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40020400 	.word	0x40020400

08004cc4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9303      	str	r3, [sp, #12]
 8004cce:	9304      	str	r3, [sp, #16]
 8004cd0:	9305      	str	r3, [sp, #20]
 8004cd2:	9306      	str	r3, [sp, #24]
 8004cd4:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI2)
 8004cd6:	6802      	ldr	r2, [r0, #0]
 8004cd8:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <HAL_I2S_MspInit+0xf8>)
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d002      	beq.n	8004ce4 <HAL_I2S_MspInit+0x20>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004cde:	b008      	add	sp, #32
 8004ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce4:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ce6:	2500      	movs	r5, #0
 8004ce8:	9500      	str	r5, [sp, #0]
 8004cea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8004cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004cfc:	9200      	str	r2, [sp, #0]
 8004cfe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d00:	9501      	str	r5, [sp, #4]
 8004d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d04:	f042 0202 	orr.w	r2, r2, #2
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0c:	f002 0202 	and.w	r2, r2, #2
 8004d10:	9201      	str	r2, [sp, #4]
 8004d12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d14:	9502      	str	r5, [sp, #8]
 8004d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d18:	f042 0204 	orr.w	r2, r2, #4
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	9302      	str	r3, [sp, #8]
 8004d26:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8004d28:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8004d2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2e:	2602      	movs	r6, #2
 8004d30:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d32:	f04f 0805 	mov.w	r8, #5
 8004d36:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d3a:	4f21      	ldr	r7, [pc, #132]	; (8004dc0 <HAL_I2S_MspInit+0xfc>)
 8004d3c:	a903      	add	r1, sp, #12
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f000 ff64 	bl	8005c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004d44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004d50:	2306      	movs	r3, #6
 8004d52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d54:	a903      	add	r1, sp, #12
 8004d56:	4638      	mov	r0, r7
 8004d58:	f000 ff58 	bl	8005c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d5c:	2740      	movs	r7, #64	; 0x40
 8004d5e:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d60:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d62:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d64:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d66:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d6a:	a903      	add	r1, sp, #12
 8004d6c:	4815      	ldr	r0, [pc, #84]	; (8004dc4 <HAL_I2S_MspInit+0x100>)
 8004d6e:	f000 ff4d 	bl	8005c0c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004d72:	4815      	ldr	r0, [pc, #84]	; (8004dc8 <HAL_I2S_MspInit+0x104>)
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_I2S_MspInit+0x108>)
 8004d76:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004d78:	6045      	str	r5, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d7a:	6087      	str	r7, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d7c:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d82:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d88:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d8e:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d94:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d9a:	6203      	str	r3, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004da0:	2303      	movs	r3, #3
 8004da2:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004da4:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004da6:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004da8:	f000 fda6 	bl	80058f8 <HAL_DMA_Init>
 8004dac:	b918      	cbnz	r0, 8004db6 <HAL_I2S_MspInit+0xf2>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_I2S_MspInit+0x104>)
 8004db0:	63a3      	str	r3, [r4, #56]	; 0x38
 8004db2:	639c      	str	r4, [r3, #56]	; 0x38
}
 8004db4:	e793      	b.n	8004cde <HAL_I2S_MspInit+0x1a>
      Error_Handler();
 8004db6:	f7fd ffe1 	bl	8002d7c <Error_Handler>
 8004dba:	e7f8      	b.n	8004dae <HAL_I2S_MspInit+0xea>
 8004dbc:	40003800 	.word	0x40003800
 8004dc0:	40020400 	.word	0x40020400
 8004dc4:	40020800 	.word	0x40020800
 8004dc8:	20013b30 	.word	0x20013b30
 8004dcc:	40026070 	.word	0x40026070

08004dd0 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004dd0:	6802      	ldr	r2, [r0, #0]
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_RNG_MspInit+0x28>)
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d000      	beq.n	8004dda <HAL_RNG_MspInit+0xa>
 8004dd8:	4770      	bx	lr
{
 8004dda:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RNG_MspInit+0x2c>)
 8004de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004df4:	b002      	add	sp, #8
 8004df6:	4770      	bx	lr
 8004df8:	50060800 	.word	0x50060800
 8004dfc:	40023800 	.word	0x40023800

08004e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e00:	b500      	push	{lr}
 8004e02:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e04:	2300      	movs	r3, #0
 8004e06:	9303      	str	r3, [sp, #12]
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	9306      	str	r3, [sp, #24]
 8004e0e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8004e10:	6802      	ldr	r2, [r0, #0]
 8004e12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e16:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d002      	beq.n	8004e24 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004e1e:	b009      	add	sp, #36	; 0x24
 8004e20:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e24:	2100      	movs	r1, #0
 8004e26:	9101      	str	r1, [sp, #4]
 8004e28:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2e:	f042 0210 	orr.w	r2, r2, #16
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
 8004e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e36:	f002 0210 	and.w	r2, r2, #16
 8004e3a:	9201      	str	r2, [sp, #4]
 8004e3c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3e:	9102      	str	r1, [sp, #8]
 8004e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e42:	f042 0202 	orr.w	r2, r2, #2
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e52:	23c0      	movs	r3, #192	; 0xc0
 8004e54:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e56:	2302      	movs	r3, #2
 8004e58:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e5e:	2307      	movs	r3, #7
 8004e60:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e62:	a903      	add	r1, sp, #12
 8004e64:	4801      	ldr	r0, [pc, #4]	; (8004e6c <HAL_UART_MspInit+0x6c>)
 8004e66:	f000 fed1 	bl	8005c0c <HAL_GPIO_Init>
}
 8004e6a:	e7d8      	b.n	8004e1e <HAL_UART_MspInit+0x1e>
 8004e6c:	40020400 	.word	0x40020400

08004e70 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e70:	4770      	bx	lr

08004e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e72:	e7fe      	b.n	8004e72 <HardFault_Handler>

08004e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e74:	e7fe      	b.n	8004e74 <MemManage_Handler>

08004e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e76:	e7fe      	b.n	8004e76 <BusFault_Handler>

08004e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e78:	e7fe      	b.n	8004e78 <UsageFault_Handler>

08004e7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e7a:	4770      	bx	lr

08004e7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e7c:	4770      	bx	lr

08004e7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e7e:	4770      	bx	lr

08004e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e82:	f000 f993 	bl	80051ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	DebounceUserButton();
 8004e86:	f000 f8b1 	bl	8004fec <DebounceUserButton>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004e8a:	bd08      	pop	{r3, pc}

08004e8c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004e8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */
  // Toggle_Hold(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2));
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004e8e:	2004      	movs	r0, #4
 8004e90:	f000 ffae 	bl	8005df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004e94:	bd08      	pop	{r3, pc}

08004e96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004e96:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004e98:	2010      	movs	r0, #16
 8004e9a:	f000 ffa9 	bl	8005df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004e9e:	bd08      	pop	{r3, pc}

08004ea0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004ea0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004ea2:	4802      	ldr	r0, [pc, #8]	; (8004eac <DMA1_Stream4_IRQHandler+0xc>)
 8004ea4:	f000 fdc4 	bl	8005a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004ea8:	bd08      	pop	{r3, pc}
 8004eaa:	bf00      	nop
 8004eac:	20013b30 	.word	0x20013b30

08004eb0 <f>:

uint8_t f(bool bits[]) {
	uint8_t aVal;

	for ( uint8_t i = 0; i < 8; i++ )
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e005      	b.n	8004ec0 <f+0x10>
	{
	    aVal = aVal << 1 | bits[i];
 8004eb4:	56c1      	ldrsb	r1, [r0, r3]
 8004eb6:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
 8004eba:	b2d2      	uxtb	r2, r2
	for ( uint8_t i = 0; i < 8; i++ )
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b07      	cmp	r3, #7
 8004ec2:	d9f7      	bls.n	8004eb4 <f+0x4>
	}
	return aVal;
}
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4770      	bx	lr

08004ec8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eca:	b083      	sub	sp, #12
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(FIRE_BTN_Pin)) {
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <EXTI9_5_IRQHandler+0xa4>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f013 0f20 	tst.w	r3, #32
 8004ed4:	d147      	bne.n	8004f66 <EXTI9_5_IRQHandler+0x9e>
	 Trigger();
  }


  if(__HAL_GPIO_EXTI_GET_FLAG(SND_SW1_Pin) || __HAL_GPIO_EXTI_GET_FLAG(SND_SW2_Pin) || __HAL_GPIO_EXTI_GET_FLAG(SND_SW3_Pin)) {
 8004ed6:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <EXTI9_5_IRQHandler+0xa4>)
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ede:	d109      	bne.n	8004ef4 <EXTI9_5_IRQHandler+0x2c>
 8004ee0:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <EXTI9_5_IRQHandler+0xa4>)
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ee8:	d104      	bne.n	8004ef4 <EXTI9_5_IRQHandler+0x2c>
 8004eea:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <EXTI9_5_IRQHandler+0xa4>)
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f013 0f10 	tst.w	r3, #16
 8004ef2:	d02d      	beq.n	8004f50 <EXTI9_5_IRQHandler+0x88>
	  bool sound_switch_1 = HAL_GPIO_ReadPin(SND_SW1_GPIO_Port, SND_SW1_Pin);
 8004ef4:	4c1e      	ldr	r4, [pc, #120]	; (8004f70 <EXTI9_5_IRQHandler+0xa8>)
 8004ef6:	2140      	movs	r1, #64	; 0x40
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f000 ff6b 	bl	8005dd4 <HAL_GPIO_ReadPin>
 8004efe:	1c07      	adds	r7, r0, #0
 8004f00:	bf18      	it	ne
 8004f02:	2701      	movne	r7, #1
	  bool sound_switch_2 = HAL_GPIO_ReadPin(SND_SW2_GPIO_Port, SND_SW2_Pin);
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	4620      	mov	r0, r4
 8004f08:	f000 ff64 	bl	8005dd4 <HAL_GPIO_ReadPin>
 8004f0c:	1c06      	adds	r6, r0, #0
 8004f0e:	bf18      	it	ne
 8004f10:	2601      	movne	r6, #1
	  bool sound_switch_3 = HAL_GPIO_ReadPin(SND_SW3_GPIO_Port, SND_SW3_Pin);
 8004f12:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004f16:	2110      	movs	r1, #16
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 ff5b 	bl	8005dd4 <HAL_GPIO_ReadPin>
 8004f1e:	1c05      	adds	r5, r0, #0
 8004f20:	bf18      	it	ne
 8004f22:	2501      	movne	r5, #1
	  bool sound_switch_4 = HAL_GPIO_ReadPin(SND_SW4_GPIO_Port, SND_SW4_Pin);
 8004f24:	2120      	movs	r1, #32
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 ff54 	bl	8005dd4 <HAL_GPIO_ReadPin>
 8004f2c:	3000      	adds	r0, #0
 8004f2e:	bf18      	it	ne
 8004f30:	2001      	movne	r0, #1
	  bool bits[4] = {sound_switch_1, sound_switch_2, sound_switch_3, sound_switch_4};
 8004f32:	f88d 7004 	strb.w	r7, [sp, #4]
 8004f36:	f88d 6005 	strb.w	r6, [sp, #5]
 8004f3a:	f88d 5006 	strb.w	r5, [sp, #6]
 8004f3e:	f88d 0007 	strb.w	r0, [sp, #7]

    uint8_t test6 = f(bits);
 8004f42:	a801      	add	r0, sp, #4
 8004f44:	f7ff ffb4 	bl	8004eb0 <f>
    test5 = test6;
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <EXTI9_5_IRQHandler+0xac>)
 8004f4a:	6018      	str	r0, [r3, #0]
    toggleSound();
 8004f4c:	f7ff faea 	bl	8004524 <toggleSound>
	  //    calculate the values using osciliscope
	  //

  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004f50:	2020      	movs	r0, #32
 8004f52:	f000 ff4d 	bl	8005df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004f56:	2040      	movs	r0, #64	; 0x40
 8004f58:	f000 ff4a 	bl	8005df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004f5c:	2080      	movs	r0, #128	; 0x80
 8004f5e:	f000 ff47 	bl	8005df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004f62:	b003      	add	sp, #12
 8004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	 Trigger();
 8004f66:	f7fc f8a1 	bl	80010ac <Trigger>
 8004f6a:	e7b4      	b.n	8004ed6 <EXTI9_5_IRQHandler+0xe>
 8004f6c:	40013c00 	.word	0x40013c00
 8004f70:	40020000 	.word	0x40020000
 8004f74:	20012a1c 	.word	0x20012a1c

08004f78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f7a:	4802      	ldr	r0, [pc, #8]	; (8004f84 <DMA2_Stream0_IRQHandler+0xc>)
 8004f7c:	f000 fd58 	bl	8005a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f80:	bd08      	pop	{r3, pc}
 8004f82:	bf00      	nop
 8004f84:	20013ac0 	.word	0x20013ac0

08004f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f8c:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <_sbrk+0x38>)
 8004f8e:	490d      	ldr	r1, [pc, #52]	; (8004fc4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f90:	480d      	ldr	r0, [pc, #52]	; (8004fc8 <_sbrk+0x40>)
 8004f92:	6800      	ldr	r0, [r0, #0]
 8004f94:	b140      	cbz	r0, 8004fa8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f96:	480c      	ldr	r0, [pc, #48]	; (8004fc8 <_sbrk+0x40>)
 8004f98:	6800      	ldr	r0, [r0, #0]
 8004f9a:	4403      	add	r3, r0
 8004f9c:	1a52      	subs	r2, r2, r1
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d806      	bhi.n	8004fb0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004fa2:	4a09      	ldr	r2, [pc, #36]	; (8004fc8 <_sbrk+0x40>)
 8004fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004fa6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004fa8:	4807      	ldr	r0, [pc, #28]	; (8004fc8 <_sbrk+0x40>)
 8004faa:	4c08      	ldr	r4, [pc, #32]	; (8004fcc <_sbrk+0x44>)
 8004fac:	6004      	str	r4, [r0, #0]
 8004fae:	e7f2      	b.n	8004f96 <_sbrk+0xe>
    errno = ENOMEM;
 8004fb0:	f002 fafe 	bl	80075b0 <__errno>
 8004fb4:	230c      	movs	r3, #12
 8004fb6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fbc:	e7f3      	b.n	8004fa6 <_sbrk+0x1e>
 8004fbe:	bf00      	nop
 8004fc0:	20020000 	.word	0x20020000
 8004fc4:	00000400 	.word	0x00000400
 8004fc8:	20012a20 	.word	0x20012a20
 8004fcc:	20013be8 	.word	0x20013be8

08004fd0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <SystemInit+0x18>)
 8004fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fe2:	609a      	str	r2, [r3, #8]
#endif
}
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <DebounceUserButton>:
/***************************************************************************************************************************/
// Service routines called every CHECK_MSEC to
// debounce both edges

void DebounceUserButton(void) // Called by SysTick_Handler() in file stm32f4xx_it.c
{
 8004fec:	b508      	push	{r3, lr}
	bool RawState;

	RawState = (bool) HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8004fee:	2104      	movs	r1, #4
 8004ff0:	4813      	ldr	r0, [pc, #76]	; (8005040 <DebounceUserButton+0x54>)
 8004ff2:	f000 feef 	bl	8005dd4 <HAL_GPIO_ReadPin>
 8004ff6:	3000      	adds	r0, #0
 8004ff8:	bf18      	it	ne
 8004ffa:	2001      	movne	r0, #1

	if (RawState == DebouncedKeyPress) {
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <DebounceUserButton+0x58>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	4283      	cmp	r3, r0
 8005002:	d00e      	beq.n	8005022 <DebounceUserButton+0x36>
		if (DebouncedKeyPress) Count = RELEASE_MSEC / CHECK_MSEC;
		else Count = PRESS_MSEC / CHECK_MSEC;

	} else {
		// Key has changed - wait for new state to become stable.
		if (--Count == 0) {
 8005004:	4a10      	ldr	r2, [pc, #64]	; (8005048 <DebounceUserButton+0x5c>)
 8005006:	7813      	ldrb	r3, [r2, #0]
 8005008:	3b01      	subs	r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	7013      	strb	r3, [r2, #0]
 800500e:	b93b      	cbnz	r3, 8005020 <DebounceUserButton+0x34>
			// Timer expired - accept the change.
			DebouncedKeyPress = RawState;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <DebounceUserButton+0x58>)
 8005012:	7018      	strb	r0, [r3, #0]
			Key_changed = true;
			Key_pressed = DebouncedKeyPress;
			// And reset the timer.
			if (DebouncedKeyPress) // rising edge
 8005014:	b970      	cbnz	r0, 8005034 <DebounceUserButton+0x48>
				Count = RELEASE_MSEC / CHECK_MSEC;
				ButtonPressed_action();
			}
			else // falling edge
			{
				Count = PRESS_MSEC / CHECK_MSEC;
 8005016:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <DebounceUserButton+0x5c>)
 8005018:	2205      	movs	r2, #5
 800501a:	701a      	strb	r2, [r3, #0]
				ButtonReleased_action();
 800501c:	f7fc f86b 	bl	80010f6 <ButtonReleased_action>
			}
		}
	}
}
 8005020:	bd08      	pop	{r3, pc}
		if (DebouncedKeyPress) Count = RELEASE_MSEC / CHECK_MSEC;
 8005022:	b11b      	cbz	r3, 800502c <DebounceUserButton+0x40>
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <DebounceUserButton+0x5c>)
 8005026:	2205      	movs	r2, #5
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	e7f9      	b.n	8005020 <DebounceUserButton+0x34>
		else Count = PRESS_MSEC / CHECK_MSEC;
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <DebounceUserButton+0x5c>)
 800502e:	2205      	movs	r2, #5
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e7f5      	b.n	8005020 <DebounceUserButton+0x34>
				Count = RELEASE_MSEC / CHECK_MSEC;
 8005034:	4613      	mov	r3, r2
 8005036:	2205      	movs	r2, #5
 8005038:	701a      	strb	r2, [r3, #0]
				ButtonPressed_action();
 800503a:	f7fc f85b 	bl	80010f4 <ButtonPressed_action>
 800503e:	e7ef      	b.n	8005020 <DebounceUserButton+0x34>
 8005040:	40020000 	.word	0x40020000
 8005044:	20012a24 	.word	0x20012a24
 8005048:	20000010 	.word	0x20000010

0800504c <WM8731_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t WM8731_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 800504c:	b510      	push	{r4, lr}
 800504e:	b084      	sub	sp, #16
    HAL_StatusTypeDef status = HAL_OK;

    uint8_t data[2];

    /* Assemble 2-byte data in WM8731 format */
    data[0] = ((RegisterAddr << 1) & 0xFE) | ((RegisterValue >> 8) & 0x01); // 0x0C in your example
 8005050:	f3c1 2300 	ubfx	r3, r1, #8, #1
 8005054:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
 8005058:	f88d 000c 	strb.w	r0, [sp, #12]
    data[1] = RegisterValue & 0xFF;                                         // MSB byte of 16bit data
 800505c:	f88d 100d 	strb.w	r1, [sp, #13]

    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 8005060:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2302      	movs	r3, #2
 8005068:	aa03      	add	r2, sp, #12
 800506a:	2134      	movs	r1, #52	; 0x34
 800506c:	4807      	ldr	r0, [pc, #28]	; (800508c <WM8731_WriteRegister+0x40>)
 800506e:	f001 f8fd 	bl	800626c <HAL_I2C_Master_Transmit>
    /* Check the communication status */
    if (status != HAL_OK)
 8005072:	4604      	mov	r4, r0
 8005074:	b910      	cbnz	r0, 800507c <WM8731_WriteRegister+0x30>
    }

    // data is the start pointer of our array
    /* Return the verifying value: 0 (Passed) or 1 (Failed) */
    return status;
 8005076:	4620      	mov	r0, r4
 8005078:	b004      	add	sp, #16
 800507a:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800507c:	2201      	movs	r2, #1
 800507e:	2110      	movs	r1, #16
 8005080:	4803      	ldr	r0, [pc, #12]	; (8005090 <WM8731_WriteRegister+0x44>)
 8005082:	f000 feae 	bl	8005de2 <HAL_GPIO_WritePin>
        Error_Handler();
 8005086:	f7fd fe79 	bl	8002d7c <Error_Handler>
 800508a:	e7f4      	b.n	8005076 <WM8731_WriteRegister+0x2a>
 800508c:	200139e4 	.word	0x200139e4
 8005090:	40020000 	.word	0x40020000

08005094 <WM8731_Init>:
{
 8005094:	b510      	push	{r4, lr}
    HAL_I2S_MspInit(&hi2s2);
 8005096:	480d      	ldr	r0, [pc, #52]	; (80050cc <WM8731_Init+0x38>)
 8005098:	f7ff fe14 	bl	8004cc4 <HAL_I2S_MspInit>
    WM8731_WriteRegister(0x0f, 0);
 800509c:	2100      	movs	r1, #0
 800509e:	200f      	movs	r0, #15
 80050a0:	f7ff ffd4 	bl	800504c <WM8731_WriteRegister>
    for (i = 0; i < W8731_NUM_REGS; i++)
 80050a4:	2400      	movs	r4, #0
 80050a6:	e007      	b.n	80050b8 <WM8731_Init+0x24>
        WM8731_WriteRegister(i, w8731_init_data[i]);
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <WM8731_Init+0x3c>)
 80050aa:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff ffcc 	bl	800504c <WM8731_WriteRegister>
    for (i = 0; i < W8731_NUM_REGS; i++)
 80050b4:	3401      	adds	r4, #1
 80050b6:	b2e4      	uxtb	r4, r4
 80050b8:	2c09      	cmp	r4, #9
 80050ba:	d9f5      	bls.n	80050a8 <WM8731_Init+0x14>
    HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)&audiobuff[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
 80050bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80050c0:	4904      	ldr	r1, [pc, #16]	; (80050d4 <WM8731_Init+0x40>)
 80050c2:	4802      	ldr	r0, [pc, #8]	; (80050cc <WM8731_Init+0x38>)
 80050c4:	f001 fa5a 	bl	800657c <HAL_I2S_Transmit_DMA>
}
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	bf00      	nop
 80050cc:	20013b90 	.word	0x20013b90
 80050d0:	0801750c 	.word	0x0801750c
 80050d4:	20012a3c 	.word	0x20012a3c

080050d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005110 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050de:	e003      	b.n	80050e8 <LoopCopyDataInit>

080050e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050e6:	3104      	adds	r1, #4

080050e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050e8:	480b      	ldr	r0, [pc, #44]	; (8005118 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050ea:	4b0c      	ldr	r3, [pc, #48]	; (800511c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050f0:	d3f6      	bcc.n	80050e0 <CopyDataInit>
  ldr  r2, =_sbss
 80050f2:	4a0b      	ldr	r2, [pc, #44]	; (8005120 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050f4:	e002      	b.n	80050fc <LoopFillZerobss>

080050f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050f8:	f842 3b04 	str.w	r3, [r2], #4

080050fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050fc:	4b09      	ldr	r3, [pc, #36]	; (8005124 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005100:	d3f9      	bcc.n	80050f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005102:	f7ff ff65 	bl	8004fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005106:	f002 fa59 	bl	80075bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800510a:	f7fd fe19 	bl	8002d40 <main>
  bx  lr    
 800510e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005110:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005114:	08017938 	.word	0x08017938
  ldr  r0, =_sdata
 8005118:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800511c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8005120:	20003f4c 	.word	0x20003f4c
  ldr  r3, = _ebss
 8005124:	20013be8 	.word	0x20013be8

08005128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005128:	e7fe      	b.n	8005128 <ADC_IRQHandler>
	...

0800512c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800512c:	b510      	push	{r4, lr}
 800512e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <HAL_InitTick+0x40>)
 8005132:	7818      	ldrb	r0, [r3, #0]
 8005134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005138:	fbb3 f3f0 	udiv	r3, r3, r0
 800513c:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <HAL_InitTick+0x44>)
 800513e:	6810      	ldr	r0, [r2, #0]
 8005140:	fbb0 f0f3 	udiv	r0, r0, r3
 8005144:	f000 fb46 	bl	80057d4 <HAL_SYSTICK_Config>
 8005148:	b968      	cbnz	r0, 8005166 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800514a:	2c0f      	cmp	r4, #15
 800514c:	d901      	bls.n	8005152 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800514e:	2001      	movs	r0, #1
 8005150:	e00a      	b.n	8005168 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005152:	2200      	movs	r2, #0
 8005154:	4621      	mov	r1, r4
 8005156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515a:	f000 faf9 	bl	8005750 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_InitTick+0x48>)
 8005160:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005162:	2000      	movs	r0, #0
 8005164:	e000      	b.n	8005168 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8005166:	2001      	movs	r0, #1
}
 8005168:	bd10      	pop	{r4, pc}
 800516a:	bf00      	nop
 800516c:	20000011 	.word	0x20000011
 8005170:	2000000c 	.word	0x2000000c
 8005174:	20000014 	.word	0x20000014

08005178 <HAL_Init>:
{
 8005178:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_Init+0x30>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005182:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800518a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005194:	2003      	movs	r0, #3
 8005196:	f000 fac9 	bl	800572c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800519a:	2000      	movs	r0, #0
 800519c:	f7ff ffc6 	bl	800512c <HAL_InitTick>
  HAL_MspInit();
 80051a0:	f7ff fce4 	bl	8004b6c <HAL_MspInit>
}
 80051a4:	2000      	movs	r0, #0
 80051a6:	bd08      	pop	{r3, pc}
 80051a8:	40023c00 	.word	0x40023c00

080051ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80051ac:	4a03      	ldr	r2, [pc, #12]	; (80051bc <HAL_IncTick+0x10>)
 80051ae:	6811      	ldr	r1, [r2, #0]
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_IncTick+0x14>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	440b      	add	r3, r1
 80051b6:	6013      	str	r3, [r2, #0]
}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20013be0 	.word	0x20013be0
 80051c0:	20000011 	.word	0x20000011

080051c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80051c4:	4b01      	ldr	r3, [pc, #4]	; (80051cc <HAL_GetTick+0x8>)
 80051c6:	6818      	ldr	r0, [r3, #0]
}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20013be0 	.word	0x20013be0

080051d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80051d4:	f7ff fff6 	bl	80051c4 <HAL_GetTick>
 80051d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051da:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80051de:	d002      	beq.n	80051e6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80051e0:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <HAL_Delay+0x24>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051e6:	f7ff ffed 	bl	80051c4 <HAL_GetTick>
 80051ea:	1b40      	subs	r0, r0, r5
 80051ec:	42a0      	cmp	r0, r4
 80051ee:	d3fa      	bcc.n	80051e6 <HAL_Delay+0x16>
  {
  }
}
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	bf00      	nop
 80051f4:	20000011 	.word	0x20000011

080051f8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80051f8:	4b4a      	ldr	r3, [pc, #296]	; (8005324 <ADC_Init+0x12c>)
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005200:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	6841      	ldr	r1, [r0, #4]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800520a:	6802      	ldr	r2, [r0, #0]
 800520c:	6853      	ldr	r3, [r2, #4]
 800520e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005212:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005214:	6802      	ldr	r2, [r0, #0]
 8005216:	6853      	ldr	r3, [r2, #4]
 8005218:	6901      	ldr	r1, [r0, #16]
 800521a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800521e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005220:	6802      	ldr	r2, [r0, #0]
 8005222:	6853      	ldr	r3, [r2, #4]
 8005224:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005228:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800522a:	6802      	ldr	r2, [r0, #0]
 800522c:	6853      	ldr	r3, [r2, #4]
 800522e:	6881      	ldr	r1, [r0, #8]
 8005230:	430b      	orrs	r3, r1
 8005232:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005234:	6802      	ldr	r2, [r0, #0]
 8005236:	6893      	ldr	r3, [r2, #8]
 8005238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800523c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800523e:	6802      	ldr	r2, [r0, #0]
 8005240:	6893      	ldr	r3, [r2, #8]
 8005242:	68c1      	ldr	r1, [r0, #12]
 8005244:	430b      	orrs	r3, r1
 8005246:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005248:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800524a:	4b37      	ldr	r3, [pc, #220]	; (8005328 <ADC_Init+0x130>)
 800524c:	429a      	cmp	r2, r3
 800524e:	d04b      	beq.n	80052e8 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005250:	6802      	ldr	r2, [r0, #0]
 8005252:	6893      	ldr	r3, [r2, #8]
 8005254:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005258:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800525a:	6802      	ldr	r2, [r0, #0]
 800525c:	6893      	ldr	r3, [r2, #8]
 800525e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005260:	430b      	orrs	r3, r1
 8005262:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005264:	6802      	ldr	r2, [r0, #0]
 8005266:	6893      	ldr	r3, [r2, #8]
 8005268:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800526c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800526e:	6802      	ldr	r2, [r0, #0]
 8005270:	6893      	ldr	r3, [r2, #8]
 8005272:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005274:	430b      	orrs	r3, r1
 8005276:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005278:	6802      	ldr	r2, [r0, #0]
 800527a:	6893      	ldr	r3, [r2, #8]
 800527c:	f023 0302 	bic.w	r3, r3, #2
 8005280:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005282:	6802      	ldr	r2, [r0, #0]
 8005284:	6893      	ldr	r3, [r2, #8]
 8005286:	7e01      	ldrb	r1, [r0, #24]
 8005288:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800528c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800528e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d133      	bne.n	80052fe <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005296:	6802      	ldr	r2, [r0, #0]
 8005298:	6853      	ldr	r3, [r2, #4]
 800529a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800529e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052a0:	6802      	ldr	r2, [r0, #0]
 80052a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052aa:	6801      	ldr	r1, [r0, #0]
 80052ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80052ae:	69c2      	ldr	r2, [r0, #28]
 80052b0:	3a01      	subs	r2, #1
 80052b2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80052b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052b8:	6802      	ldr	r2, [r0, #0]
 80052ba:	6893      	ldr	r3, [r2, #8]
 80052bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052c2:	6802      	ldr	r2, [r0, #0]
 80052c4:	6893      	ldr	r3, [r2, #8]
 80052c6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80052ca:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80052ce:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052d0:	6802      	ldr	r2, [r0, #0]
 80052d2:	6893      	ldr	r3, [r2, #8]
 80052d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80052da:	6802      	ldr	r2, [r0, #0]
 80052dc:	6893      	ldr	r3, [r2, #8]
 80052de:	6941      	ldr	r1, [r0, #20]
 80052e0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80052e4:	6093      	str	r3, [r2, #8]
}
 80052e6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052e8:	6802      	ldr	r2, [r0, #0]
 80052ea:	6893      	ldr	r3, [r2, #8]
 80052ec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80052f0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052f2:	6802      	ldr	r2, [r0, #0]
 80052f4:	6893      	ldr	r3, [r2, #8]
 80052f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80052fa:	6093      	str	r3, [r2, #8]
 80052fc:	e7bc      	b.n	8005278 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052fe:	6802      	ldr	r2, [r0, #0]
 8005300:	6853      	ldr	r3, [r2, #4]
 8005302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005306:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005308:	6802      	ldr	r2, [r0, #0]
 800530a:	6853      	ldr	r3, [r2, #4]
 800530c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005310:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005312:	6801      	ldr	r1, [r0, #0]
 8005314:	684b      	ldr	r3, [r1, #4]
 8005316:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005318:	3a01      	subs	r2, #1
 800531a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800531e:	604b      	str	r3, [r1, #4]
 8005320:	e7be      	b.n	80052a0 <ADC_Init+0xa8>
 8005322:	bf00      	nop
 8005324:	40012300 	.word	0x40012300
 8005328:	0f000001 	.word	0x0f000001

0800532c <HAL_ADC_Init>:
  if(hadc == NULL)
 800532c:	b338      	cbz	r0, 800537e <HAL_ADC_Init+0x52>
{
 800532e:	b510      	push	{r4, lr}
 8005330:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005332:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005334:	b143      	cbz	r3, 8005348 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005338:	f013 0f10 	tst.w	r3, #16
 800533c:	d00b      	beq.n	8005356 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800533e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005340:	2300      	movs	r3, #0
 8005342:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005346:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8005348:	f7ff fc2c 	bl	8004ba4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800534c:	2300      	movs	r3, #0
 800534e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8005350:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005354:	e7ef      	b.n	8005336 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8005356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800535c:	f023 0302 	bic.w	r3, r3, #2
 8005360:	f043 0302 	orr.w	r3, r3, #2
 8005364:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8005366:	4620      	mov	r0, r4
 8005368:	f7ff ff46 	bl	80051f8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800536c:	2000      	movs	r0, #0
 800536e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	6423      	str	r3, [r4, #64]	; 0x40
 800537c:	e7e0      	b.n	8005340 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800537e:	2001      	movs	r0, #1
}
 8005380:	4770      	bx	lr
	...

08005384 <HAL_ADC_Start_DMA>:
{
 8005384:	b530      	push	{r4, r5, lr}
 8005386:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800538c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	f000 809b 	beq.w	80054cc <HAL_ADC_Start_DMA+0x148>
 8005396:	2301      	movs	r3, #1
 8005398:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800539c:	6804      	ldr	r4, [r0, #0]
 800539e:	68a3      	ldr	r3, [r4, #8]
 80053a0:	f013 0f01 	tst.w	r3, #1
 80053a4:	d113      	bne.n	80053ce <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80053ae:	4b4d      	ldr	r3, [pc, #308]	; (80054e4 <HAL_ADC_Start_DMA+0x160>)
 80053b0:	681c      	ldr	r4, [r3, #0]
 80053b2:	4b4d      	ldr	r3, [pc, #308]	; (80054e8 <HAL_ADC_Start_DMA+0x164>)
 80053b4:	fba3 3404 	umull	r3, r4, r3, r4
 80053b8:	0ca4      	lsrs	r4, r4, #18
 80053ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80053be:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 80053c0:	e002      	b.n	80053c8 <HAL_ADC_Start_DMA+0x44>
      counter--;
 80053c2:	9c01      	ldr	r4, [sp, #4]
 80053c4:	3c01      	subs	r4, #1
 80053c6:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 80053c8:	9c01      	ldr	r4, [sp, #4]
 80053ca:	2c00      	cmp	r4, #0
 80053cc:	d1f9      	bne.n	80053c2 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80053ce:	6803      	ldr	r3, [r0, #0]
 80053d0:	689c      	ldr	r4, [r3, #8]
 80053d2:	f014 0f01 	tst.w	r4, #1
 80053d6:	d07b      	beq.n	80054d0 <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 80053d8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80053da:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 80053de:	f024 0401 	bic.w	r4, r4, #1
 80053e2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80053e6:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053ee:	d005      	beq.n	80053fc <HAL_ADC_Start_DMA+0x78>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80053f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80053f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053fa:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80053fe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005402:	d038      	beq.n	8005476 <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005404:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005406:	f023 0306 	bic.w	r3, r3, #6
 800540a:	6443      	str	r3, [r0, #68]	; 0x44
 800540c:	4613      	mov	r3, r2
 800540e:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8005410:	2200      	movs	r2, #0
 8005412:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005416:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005418:	4834      	ldr	r0, [pc, #208]	; (80054ec <HAL_ADC_Start_DMA+0x168>)
 800541a:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800541c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800541e:	4834      	ldr	r0, [pc, #208]	; (80054f0 <HAL_ADC_Start_DMA+0x16c>)
 8005420:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005422:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005424:	4833      	ldr	r0, [pc, #204]	; (80054f4 <HAL_ADC_Start_DMA+0x170>)
 8005426:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800542e:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005430:	6825      	ldr	r5, [r4, #0]
 8005432:	6868      	ldr	r0, [r5, #4]
 8005434:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8005438:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800543a:	6825      	ldr	r5, [r4, #0]
 800543c:	68a8      	ldr	r0, [r5, #8]
 800543e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8005442:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	460a      	mov	r2, r1
 8005448:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800544c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800544e:	f000 fab9 	bl	80059c4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005452:	4b29      	ldr	r3, [pc, #164]	; (80054f8 <HAL_ADC_Start_DMA+0x174>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f013 0f1f 	tst.w	r3, #31
 800545a:	d127      	bne.n	80054ac <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <HAL_ADC_Start_DMA+0x178>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d019      	beq.n	8005498 <HAL_ADC_Start_DMA+0x114>
 8005464:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800546c:	4a24      	ldr	r2, [pc, #144]	; (8005500 <HAL_ADC_Start_DMA+0x17c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00b      	beq.n	800548a <HAL_ADC_Start_DMA+0x106>
  return HAL_OK;
 8005472:	2000      	movs	r0, #0
 8005474:	e02d      	b.n	80054d2 <HAL_ADC_Start_DMA+0x14e>
      ADC_CLEAR_ERRORCODE(hadc);
 8005476:	2300      	movs	r3, #0
 8005478:	6443      	str	r3, [r0, #68]	; 0x44
 800547a:	e7c7      	b.n	800540c <HAL_ADC_Start_DMA+0x88>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800547c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005480:	6852      	ldr	r2, [r2, #4]
 8005482:	f012 0f1f 	tst.w	r2, #31
 8005486:	d007      	beq.n	8005498 <HAL_ADC_Start_DMA+0x114>
 8005488:	e7f0      	b.n	800546c <HAL_ADC_Start_DMA+0xe8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800548a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800548e:	6852      	ldr	r2, [r2, #4]
 8005490:	f002 021f 	and.w	r2, r2, #31
 8005494:	2a0f      	cmp	r2, #15
 8005496:	d81e      	bhi.n	80054d6 <HAL_ADC_Start_DMA+0x152>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800549e:	d11c      	bne.n	80054da <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a8:	2000      	movs	r0, #0
 80054aa:	e012      	b.n	80054d2 <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <HAL_ADC_Start_DMA+0x178>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d001      	beq.n	80054b8 <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 80054b4:	2000      	movs	r0, #0
 80054b6:	e00c      	b.n	80054d2 <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80054be:	d10e      	bne.n	80054de <HAL_ADC_Start_DMA+0x15a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054c8:	2000      	movs	r0, #0
 80054ca:	e002      	b.n	80054d2 <HAL_ADC_Start_DMA+0x14e>
  __HAL_LOCK(hadc);
 80054cc:	2002      	movs	r0, #2
 80054ce:	e000      	b.n	80054d2 <HAL_ADC_Start_DMA+0x14e>
  return HAL_OK;
 80054d0:	2000      	movs	r0, #0
}
 80054d2:	b003      	add	sp, #12
 80054d4:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 80054d6:	2000      	movs	r0, #0
 80054d8:	e7fb      	b.n	80054d2 <HAL_ADC_Start_DMA+0x14e>
 80054da:	2000      	movs	r0, #0
 80054dc:	e7f9      	b.n	80054d2 <HAL_ADC_Start_DMA+0x14e>
 80054de:	2000      	movs	r0, #0
 80054e0:	e7f7      	b.n	80054d2 <HAL_ADC_Start_DMA+0x14e>
 80054e2:	bf00      	nop
 80054e4:	2000000c 	.word	0x2000000c
 80054e8:	431bde83 	.word	0x431bde83
 80054ec:	08005529 	.word	0x08005529
 80054f0:	08005507 	.word	0x08005507
 80054f4:	08005513 	.word	0x08005513
 80054f8:	40012300 	.word	0x40012300
 80054fc:	40012000 	.word	0x40012000
 8005500:	40012200 	.word	0x40012200

08005504 <HAL_ADC_ConvHalfCpltCallback>:
}
 8005504:	4770      	bx	lr

08005506 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005506:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005508:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800550a:	f7ff fffb 	bl	8005504 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800550e:	bd08      	pop	{r3, pc}

08005510 <HAL_ADC_ErrorCallback>:
}
 8005510:	4770      	bx	lr

08005512 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005512:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005514:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800551a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800551c:	f043 0304 	orr.w	r3, r3, #4
 8005520:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005522:	f7ff fff5 	bl	8005510 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005526:	bd08      	pop	{r3, pc}

08005528 <ADC_DMAConvCplt>:
{
 8005528:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800552a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800552c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005532:	d126      	bne.n	8005582 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	6891      	ldr	r1, [r2, #8]
 8005540:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8005544:	d119      	bne.n	800557a <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005546:	7e19      	ldrb	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005548:	b9b9      	cbnz	r1, 800557a <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800554a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800554c:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8005550:	d003      	beq.n	800555a <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005552:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005554:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8005558:	d10f      	bne.n	800557a <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800555a:	6851      	ldr	r1, [r2, #4]
 800555c:	f021 0120 	bic.w	r1, r1, #32
 8005560:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800556a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800556c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8005570:	d103      	bne.n	800557a <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800557a:	4618      	mov	r0, r3
 800557c:	f7fb fddc 	bl	8001138 <HAL_ADC_ConvCpltCallback>
}
 8005580:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005584:	f012 0f10 	tst.w	r2, #16
 8005588:	d103      	bne.n	8005592 <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558e:	4798      	blx	r3
}
 8005590:	e7f6      	b.n	8005580 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff ffbc 	bl	8005510 <HAL_ADC_ErrorCallback>
 8005598:	e7f2      	b.n	8005580 <ADC_DMAConvCplt+0x58>
	...

0800559c <HAL_ADC_ConfigChannel>:
{
 800559c:	b430      	push	{r4, r5}
 800559e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80055a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	f000 80b7 	beq.w	800571c <HAL_ADC_ConfigChannel+0x180>
 80055ae:	2301      	movs	r3, #1
 80055b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80055b4:	680b      	ldr	r3, [r1, #0]
 80055b6:	2b09      	cmp	r3, #9
 80055b8:	d93e      	bls.n	8005638 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055ba:	6805      	ldr	r5, [r0, #0]
 80055bc:	68ea      	ldr	r2, [r5, #12]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80055c4:	3b1e      	subs	r3, #30
 80055c6:	2407      	movs	r4, #7
 80055c8:	fa04 f303 	lsl.w	r3, r4, r3
 80055cc:	ea22 0303 	bic.w	r3, r2, r3
 80055d0:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80055d2:	6805      	ldr	r5, [r0, #0]
 80055d4:	68ea      	ldr	r2, [r5, #12]
 80055d6:	688c      	ldr	r4, [r1, #8]
 80055d8:	880b      	ldrh	r3, [r1, #0]
 80055da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80055de:	3b1e      	subs	r3, #30
 80055e0:	fa04 f303 	lsl.w	r3, r4, r3
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80055e8:	684b      	ldr	r3, [r1, #4]
 80055ea:	2b06      	cmp	r3, #6
 80055ec:	d83a      	bhi.n	8005664 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055ee:	6805      	ldr	r5, [r0, #0]
 80055f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80055f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055f6:	3b05      	subs	r3, #5
 80055f8:	241f      	movs	r4, #31
 80055fa:	fa04 f303 	lsl.w	r3, r4, r3
 80055fe:	ea22 0303 	bic.w	r3, r2, r3
 8005602:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005604:	6805      	ldr	r5, [r0, #0]
 8005606:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005608:	684b      	ldr	r3, [r1, #4]
 800560a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800560e:	3b05      	subs	r3, #5
 8005610:	880c      	ldrh	r4, [r1, #0]
 8005612:	fa04 f303 	lsl.w	r3, r4, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800561a:	6802      	ldr	r2, [r0, #0]
 800561c:	4b40      	ldr	r3, [pc, #256]	; (8005720 <HAL_ADC_ConfigChannel+0x184>)
 800561e:	429a      	cmp	r2, r3
 8005620:	d050      	beq.n	80056c4 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005622:	6802      	ldr	r2, [r0, #0]
 8005624:	4b3e      	ldr	r3, [pc, #248]	; (8005720 <HAL_ADC_ConfigChannel+0x184>)
 8005626:	429a      	cmp	r2, r3
 8005628:	d055      	beq.n	80056d6 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 800562a:	2300      	movs	r3, #0
 800562c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005630:	4618      	mov	r0, r3
}
 8005632:	b002      	add	sp, #8
 8005634:	bc30      	pop	{r4, r5}
 8005636:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005638:	6805      	ldr	r5, [r0, #0]
 800563a:	692a      	ldr	r2, [r5, #16]
 800563c:	b29b      	uxth	r3, r3
 800563e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005642:	2407      	movs	r4, #7
 8005644:	fa04 f303 	lsl.w	r3, r4, r3
 8005648:	ea22 0303 	bic.w	r3, r2, r3
 800564c:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800564e:	6805      	ldr	r5, [r0, #0]
 8005650:	692a      	ldr	r2, [r5, #16]
 8005652:	688c      	ldr	r4, [r1, #8]
 8005654:	880b      	ldrh	r3, [r1, #0]
 8005656:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800565a:	fa04 f303 	lsl.w	r3, r4, r3
 800565e:	4313      	orrs	r3, r2
 8005660:	612b      	str	r3, [r5, #16]
 8005662:	e7c1      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d816      	bhi.n	8005696 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005668:	6805      	ldr	r5, [r0, #0]
 800566a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800566c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005670:	3b23      	subs	r3, #35	; 0x23
 8005672:	241f      	movs	r4, #31
 8005674:	fa04 f303 	lsl.w	r3, r4, r3
 8005678:	ea22 0303 	bic.w	r3, r2, r3
 800567c:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800567e:	6805      	ldr	r5, [r0, #0]
 8005680:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005682:	684b      	ldr	r3, [r1, #4]
 8005684:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005688:	3b23      	subs	r3, #35	; 0x23
 800568a:	880c      	ldrh	r4, [r1, #0]
 800568c:	fa04 f303 	lsl.w	r3, r4, r3
 8005690:	4313      	orrs	r3, r2
 8005692:	632b      	str	r3, [r5, #48]	; 0x30
 8005694:	e7c1      	b.n	800561a <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005696:	6805      	ldr	r5, [r0, #0]
 8005698:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800569a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800569e:	3b41      	subs	r3, #65	; 0x41
 80056a0:	241f      	movs	r4, #31
 80056a2:	fa04 f303 	lsl.w	r3, r4, r3
 80056a6:	ea22 0303 	bic.w	r3, r2, r3
 80056aa:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056ac:	6805      	ldr	r5, [r0, #0]
 80056ae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80056b0:	684b      	ldr	r3, [r1, #4]
 80056b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80056b6:	3b41      	subs	r3, #65	; 0x41
 80056b8:	880c      	ldrh	r4, [r1, #0]
 80056ba:	fa04 f303 	lsl.w	r3, r4, r3
 80056be:	4313      	orrs	r3, r2
 80056c0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80056c2:	e7aa      	b.n	800561a <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056c4:	680b      	ldr	r3, [r1, #0]
 80056c6:	2b12      	cmp	r3, #18
 80056c8:	d1ab      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056ca:	4a16      	ldr	r2, [pc, #88]	; (8005724 <HAL_ADC_ConfigChannel+0x188>)
 80056cc:	6853      	ldr	r3, [r2, #4]
 80056ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056d2:	6053      	str	r3, [r2, #4]
 80056d4:	e7a5      	b.n	8005622 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80056d6:	680b      	ldr	r3, [r1, #0]
 80056d8:	3b10      	subs	r3, #16
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d8a5      	bhi.n	800562a <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056de:	4a11      	ldr	r2, [pc, #68]	; (8005724 <HAL_ADC_ConfigChannel+0x188>)
 80056e0:	6853      	ldr	r3, [r2, #4]
 80056e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056e6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80056e8:	680b      	ldr	r3, [r1, #0]
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d19d      	bne.n	800562a <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056ee:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <HAL_ADC_ConfigChannel+0x18c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80056f6:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80056fa:	f202 3283 	addw	r2, r2, #899	; 0x383
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	0c9b      	lsrs	r3, r3, #18
 8005704:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005708:	005a      	lsls	r2, r3, #1
 800570a:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 800570c:	e002      	b.n	8005714 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 800570e:	9b01      	ldr	r3, [sp, #4]
 8005710:	3b01      	subs	r3, #1
 8005712:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f9      	bne.n	800570e <HAL_ADC_ConfigChannel+0x172>
 800571a:	e786      	b.n	800562a <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 800571c:	2002      	movs	r0, #2
 800571e:	e788      	b.n	8005632 <HAL_ADC_ConfigChannel+0x96>
 8005720:	40012000 	.word	0x40012000
 8005724:	40012300 	.word	0x40012300
 8005728:	2000000c 	.word	0x2000000c

0800572c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800572c:	4a07      	ldr	r2, [pc, #28]	; (800574c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800572e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005730:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005738:	0200      	lsls	r0, r0, #8
 800573a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800573e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8005740:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8005744:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005748:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800574a:	4770      	bx	lr
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005750:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005752:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <HAL_NVIC_SetPriority+0x60>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800575a:	f1c3 0407 	rsb	r4, r3, #7
 800575e:	2c04      	cmp	r4, #4
 8005760:	bf28      	it	cs
 8005762:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005764:	1d1d      	adds	r5, r3, #4
 8005766:	2d06      	cmp	r5, #6
 8005768:	d918      	bls.n	800579c <HAL_NVIC_SetPriority+0x4c>
 800576a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800576c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005770:	fa05 f404 	lsl.w	r4, r5, r4
 8005774:	ea21 0104 	bic.w	r1, r1, r4
 8005778:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800577a:	fa05 f303 	lsl.w	r3, r5, r3
 800577e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005782:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005784:	2800      	cmp	r0, #0
 8005786:	db0b      	blt.n	80057a0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005788:	0109      	lsls	r1, r1, #4
 800578a:	b2c9      	uxtb	r1, r1
 800578c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005790:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005794:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005798:	bc30      	pop	{r4, r5}
 800579a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800579c:	2300      	movs	r3, #0
 800579e:	e7e5      	b.n	800576c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a0:	f000 000f 	and.w	r0, r0, #15
 80057a4:	0109      	lsls	r1, r1, #4
 80057a6:	b2c9      	uxtb	r1, r1
 80057a8:	4b02      	ldr	r3, [pc, #8]	; (80057b4 <HAL_NVIC_SetPriority+0x64>)
 80057aa:	5419      	strb	r1, [r3, r0]
 80057ac:	e7f4      	b.n	8005798 <HAL_NVIC_SetPriority+0x48>
 80057ae:	bf00      	nop
 80057b0:	e000ed00 	.word	0xe000ed00
 80057b4:	e000ed14 	.word	0xe000ed14

080057b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80057b8:	2800      	cmp	r0, #0
 80057ba:	db07      	blt.n	80057cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057bc:	f000 021f 	and.w	r2, r0, #31
 80057c0:	0940      	lsrs	r0, r0, #5
 80057c2:	2301      	movs	r3, #1
 80057c4:	4093      	lsls	r3, r2
 80057c6:	4a02      	ldr	r2, [pc, #8]	; (80057d0 <HAL_NVIC_EnableIRQ+0x18>)
 80057c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000e100 	.word	0xe000e100

080057d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057d4:	3801      	subs	r0, #1
 80057d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80057da:	d20a      	bcs.n	80057f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057dc:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_SYSTICK_Config+0x24>)
 80057de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e0:	4a06      	ldr	r2, [pc, #24]	; (80057fc <HAL_SYSTICK_Config+0x28>)
 80057e2:	21f0      	movs	r1, #240	; 0xf0
 80057e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e8:	2000      	movs	r0, #0
 80057ea:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ec:	2207      	movs	r2, #7
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80057f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000e010 	.word	0xe000e010
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005800:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005802:	6805      	ldr	r5, [r0, #0]
 8005804:	682c      	ldr	r4, [r5, #0]
 8005806:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800580a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800580c:	6804      	ldr	r4, [r0, #0]
 800580e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005810:	6883      	ldr	r3, [r0, #8]
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d005      	beq.n	8005822 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005816:	6803      	ldr	r3, [r0, #0]
 8005818:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800581a:	6803      	ldr	r3, [r0, #0]
 800581c:	60da      	str	r2, [r3, #12]
  }
}
 800581e:	bc30      	pop	{r4, r5}
 8005820:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8005822:	6803      	ldr	r3, [r0, #0]
 8005824:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005826:	6803      	ldr	r3, [r0, #0]
 8005828:	60d9      	str	r1, [r3, #12]
 800582a:	e7f8      	b.n	800581e <DMA_SetConfig+0x1e>

0800582c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800582c:	6802      	ldr	r2, [r0, #0]
 800582e:	b2d3      	uxtb	r3, r2
 8005830:	3b10      	subs	r3, #16
 8005832:	490b      	ldr	r1, [pc, #44]	; (8005860 <DMA_CalcBaseAndBitshift+0x34>)
 8005834:	fba1 1303 	umull	r1, r3, r1, r3
 8005838:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800583a:	490a      	ldr	r1, [pc, #40]	; (8005864 <DMA_CalcBaseAndBitshift+0x38>)
 800583c:	5cc9      	ldrb	r1, [r1, r3]
 800583e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005840:	2b03      	cmp	r3, #3
 8005842:	d806      	bhi.n	8005852 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005844:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8005848:	f022 0203 	bic.w	r2, r2, #3
 800584c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800584e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005850:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005852:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8005856:	f022 0203 	bic.w	r2, r2, #3
 800585a:	3204      	adds	r2, #4
 800585c:	6582      	str	r2, [r0, #88]	; 0x58
 800585e:	e7f6      	b.n	800584e <DMA_CalcBaseAndBitshift+0x22>
 8005860:	aaaaaaab 	.word	0xaaaaaaab
 8005864:	08017520 	.word	0x08017520

08005868 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005868:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800586a:	6982      	ldr	r2, [r0, #24]
 800586c:	b992      	cbnz	r2, 8005894 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800586e:	2b01      	cmp	r3, #1
 8005870:	d00a      	beq.n	8005888 <DMA_CheckFifoParam+0x20>
 8005872:	b11b      	cbz	r3, 800587c <DMA_CheckFifoParam+0x14>
 8005874:	2b02      	cmp	r3, #2
 8005876:	d001      	beq.n	800587c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8005878:	2000      	movs	r0, #0
 800587a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800587c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800587e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005882:	d12c      	bne.n	80058de <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2000      	movs	r0, #0
 8005886:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005888:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800588a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800588e:	d028      	beq.n	80058e2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8005890:	2000      	movs	r0, #0
 8005892:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005894:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005898:	d005      	beq.n	80058a6 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800589a:	2b02      	cmp	r3, #2
 800589c:	d929      	bls.n	80058f2 <DMA_CheckFifoParam+0x8a>
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d015      	beq.n	80058ce <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80058a2:	2000      	movs	r0, #0
 80058a4:	4770      	bx	lr
    switch (tmp)
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d803      	bhi.n	80058b2 <DMA_CheckFifoParam+0x4a>
 80058aa:	e8df f003 	tbb	[pc, r3]
 80058ae:	041c      	.short	0x041c
 80058b0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2000      	movs	r0, #0
 80058b4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80058b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80058bc:	d115      	bne.n	80058ea <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2000      	movs	r0, #0
 80058c0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80058c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058c8:	d011      	beq.n	80058ee <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80058ca:	2000      	movs	r0, #0
 80058cc:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80058d0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80058d4:	d001      	beq.n	80058da <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80058d6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80058d8:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2000      	movs	r0, #0
 80058dc:	4770      	bx	lr
        status = HAL_ERROR;
 80058de:	2001      	movs	r0, #1
 80058e0:	4770      	bx	lr
        status = HAL_ERROR;
 80058e2:	2001      	movs	r0, #1
 80058e4:	4770      	bx	lr
      status = HAL_ERROR;
 80058e6:	2001      	movs	r0, #1
 80058e8:	4770      	bx	lr
        status = HAL_ERROR;
 80058ea:	2001      	movs	r0, #1
 80058ec:	4770      	bx	lr
        status = HAL_ERROR;
 80058ee:	2001      	movs	r0, #1
 80058f0:	4770      	bx	lr
      status = HAL_ERROR;
 80058f2:	2001      	movs	r0, #1
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_DMA_Init>:
{
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80058fc:	f7ff fc62 	bl	80051c4 <HAL_GetTick>
  if(hdma == NULL)
 8005900:	2c00      	cmp	r4, #0
 8005902:	d05b      	beq.n	80059bc <HAL_DMA_Init+0xc4>
 8005904:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8005906:	2300      	movs	r3, #0
 8005908:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800590c:	2302      	movs	r3, #2
 800590e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	6813      	ldr	r3, [r2, #0]
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	f012 0f01 	tst.w	r2, #1
 8005924:	d00a      	beq.n	800593c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005926:	f7ff fc4d 	bl	80051c4 <HAL_GetTick>
 800592a:	1b40      	subs	r0, r0, r5
 800592c:	2805      	cmp	r0, #5
 800592e:	d9f5      	bls.n	800591c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005930:	2320      	movs	r3, #32
 8005932:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005934:	2003      	movs	r0, #3
 8005936:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800593a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800593c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800593e:	4820      	ldr	r0, [pc, #128]	; (80059c0 <HAL_DMA_Init+0xc8>)
 8005940:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005942:	6861      	ldr	r1, [r4, #4]
 8005944:	68a2      	ldr	r2, [r4, #8]
 8005946:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005948:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800594a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800594c:	6921      	ldr	r1, [r4, #16]
 800594e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005950:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005952:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005954:	69a1      	ldr	r1, [r4, #24]
 8005956:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005958:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800595a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800595c:	6a21      	ldr	r1, [r4, #32]
 800595e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005960:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005962:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005964:	2904      	cmp	r1, #4
 8005966:	d01e      	beq.n	80059a6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8005968:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800596a:	6826      	ldr	r6, [r4, #0]
 800596c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800596e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8005972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005974:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005976:	2b04      	cmp	r3, #4
 8005978:	d107      	bne.n	800598a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800597a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800597c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800597e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005980:	b11b      	cbz	r3, 800598a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff ff70 	bl	8005868 <DMA_CheckFifoParam>
 8005988:	b990      	cbnz	r0, 80059b0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800598a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800598c:	4620      	mov	r0, r4
 800598e:	f7ff ff4d 	bl	800582c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005992:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005994:	233f      	movs	r3, #63	; 0x3f
 8005996:	4093      	lsls	r3, r2
 8005998:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800599a:	2000      	movs	r0, #0
 800599c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800599e:	2301      	movs	r3, #1
 80059a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80059a4:	e7c9      	b.n	800593a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80059a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80059aa:	4301      	orrs	r1, r0
 80059ac:	430a      	orrs	r2, r1
 80059ae:	e7db      	b.n	8005968 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80059b4:	2001      	movs	r0, #1
 80059b6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80059ba:	e7be      	b.n	800593a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80059bc:	2001      	movs	r0, #1
 80059be:	e7bc      	b.n	800593a <HAL_DMA_Init+0x42>
 80059c0:	f010803f 	.word	0xf010803f

080059c4 <HAL_DMA_Start_IT>:
{
 80059c4:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059c6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80059c8:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80059cc:	2c01      	cmp	r4, #1
 80059ce:	d02c      	beq.n	8005a2a <HAL_DMA_Start_IT+0x66>
 80059d0:	2401      	movs	r4, #1
 80059d2:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80059d6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80059da:	b2e4      	uxtb	r4, r4
 80059dc:	2c01      	cmp	r4, #1
 80059de:	d004      	beq.n	80059ea <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80059e0:	2300      	movs	r3, #0
 80059e2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80059e6:	2002      	movs	r0, #2
}
 80059e8:	bd38      	pop	{r3, r4, r5, pc}
 80059ea:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80059ec:	2002      	movs	r0, #2
 80059ee:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059f2:	2000      	movs	r0, #0
 80059f4:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7ff ff02 	bl	8005800 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059fe:	233f      	movs	r3, #63	; 0x3f
 8005a00:	4093      	lsls	r3, r2
 8005a02:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	6813      	ldr	r3, [r2, #0]
 8005a08:	f043 0316 	orr.w	r3, r3, #22
 8005a0c:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a10:	b123      	cbz	r3, 8005a1c <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	f043 0308 	orr.w	r3, r3, #8
 8005a1a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	6813      	ldr	r3, [r2, #0]
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2000      	movs	r0, #0
 8005a28:	e7de      	b.n	80059e8 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8005a2a:	2002      	movs	r0, #2
 8005a2c:	e7dc      	b.n	80059e8 <HAL_DMA_Start_IT+0x24>
	...

08005a30 <HAL_DMA_IRQHandler>:
{
 8005a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a32:	b083      	sub	sp, #12
 8005a34:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a3a:	4b72      	ldr	r3, [pc, #456]	; (8005c04 <HAL_DMA_IRQHandler+0x1d4>)
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	4b72      	ldr	r3, [pc, #456]	; (8005c08 <HAL_DMA_IRQHandler+0x1d8>)
 8005a40:	fba3 3505 	umull	r3, r5, r3, r5
 8005a44:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a46:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005a48:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a4a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	4093      	lsls	r3, r2
 8005a50:	4233      	tst	r3, r6
 8005a52:	d010      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a54:	6803      	ldr	r3, [r0, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	f012 0f04 	tst.w	r2, #4
 8005a5c:	d00b      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f022 0204 	bic.w	r2, r2, #4
 8005a64:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a66:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005a68:	2308      	movs	r3, #8
 8005a6a:	4093      	lsls	r3, r2
 8005a6c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a6e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4093      	lsls	r3, r2
 8005a7c:	4233      	tst	r3, r6
 8005a7e:	d009      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	6952      	ldr	r2, [r2, #20]
 8005a84:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a88:	d004      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a8a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a8e:	f043 0302 	orr.w	r3, r3, #2
 8005a92:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a94:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a96:	2304      	movs	r3, #4
 8005a98:	4093      	lsls	r3, r2
 8005a9a:	4233      	tst	r3, r6
 8005a9c:	d009      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	f012 0f02 	tst.w	r2, #2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005aa8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005aaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ab2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	4093      	lsls	r3, r2
 8005ab8:	4233      	tst	r3, r6
 8005aba:	d024      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	f012 0f08 	tst.w	r2, #8
 8005ac4:	d01f      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ac6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005ad0:	d00d      	beq.n	8005aee <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005ad8:	d104      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8005ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005adc:	b19b      	cbz	r3, 8005b06 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4798      	blx	r3
 8005ae2:	e010      	b.n	8005b06 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ae4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ae6:	b173      	cbz	r3, 8005b06 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4798      	blx	r3
 8005aec:	e00b      	b.n	8005b06 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005af4:	d103      	bne.n	8005afe <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	f022 0208 	bic.w	r2, r2, #8
 8005afc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b00:	b10b      	cbz	r3, 8005b06 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005b02:	4620      	mov	r0, r4
 8005b04:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b08:	2320      	movs	r3, #32
 8005b0a:	4093      	lsls	r3, r2
 8005b0c:	4233      	tst	r3, r6
 8005b0e:	d055      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	f012 0f10 	tst.w	r2, #16
 8005b18:	d050      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b1a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b1c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d00e      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005b2e:	d033      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005b36:	d12a      	bne.n	8005b8e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8005b38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d03e      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4798      	blx	r3
 8005b42:	e03b      	b.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	f023 0316 	bic.w	r3, r3, #22
 8005b4c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	6953      	ldr	r3, [r2, #20]
 8005b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b56:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b5a:	b1a3      	cbz	r3, 8005b86 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b5c:	6822      	ldr	r2, [r4, #0]
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	f023 0308 	bic.w	r3, r3, #8
 8005b64:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b68:	233f      	movs	r3, #63	; 0x3f
 8005b6a:	4093      	lsls	r3, r2
 8005b6c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005b7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d03f      	beq.n	8005c00 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005b80:	4620      	mov	r0, r4
 8005b82:	4798      	blx	r3
 8005b84:	e03c      	b.n	8005c00 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e7      	bne.n	8005b5c <HAL_DMA_IRQHandler+0x12c>
 8005b8c:	e7eb      	b.n	8005b66 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8005b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b90:	b1a3      	cbz	r3, 8005bbc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8005b92:	4620      	mov	r0, r4
 8005b94:	4798      	blx	r3
 8005b96:	e011      	b.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005b9e:	d109      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	f022 0210 	bic.w	r2, r2, #16
 8005ba6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bb6:	b10b      	cbz	r3, 8005bbc <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005bb8:	4620      	mov	r0, r4
 8005bba:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bbe:	b1fb      	cbz	r3, 8005c00 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bc2:	f013 0f01 	tst.w	r3, #1
 8005bc6:	d017      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bc8:	2305      	movs	r3, #5
 8005bca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005bd8:	9b01      	ldr	r3, [sp, #4]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	42ab      	cmp	r3, r5
 8005be0:	d804      	bhi.n	8005bec <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f013 0f01 	tst.w	r3, #1
 8005bea:	d1f5      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005bec:	2300      	movs	r3, #0
 8005bee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005bf8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005bfa:	b10b      	cbz	r3, 8005c00 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4798      	blx	r3
}
 8005c00:	b003      	add	sp, #12
 8005c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c04:	2000000c 	.word	0x2000000c
 8005c08:	1b4e81b5 	.word	0x1b4e81b5

08005c0c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2b0f      	cmp	r3, #15
 8005c10:	f200 80d7 	bhi.w	8005dc2 <HAL_GPIO_Init+0x1b6>
{
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c16:	b083      	sub	sp, #12
 8005c18:	e039      	b.n	8005c8e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c1a:	2207      	movs	r2, #7
 8005c1c:	e000      	b.n	8005c20 <HAL_GPIO_Init+0x14>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	40aa      	lsls	r2, r5
 8005c22:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c24:	3402      	adds	r4, #2
 8005c26:	4d67      	ldr	r5, [pc, #412]	; (8005dc4 <HAL_GPIO_Init+0x1b8>)
 8005c28:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c2c:	4a66      	ldr	r2, [pc, #408]	; (8005dc8 <HAL_GPIO_Init+0x1bc>)
 8005c2e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005c30:	43f2      	mvns	r2, r6
 8005c32:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c36:	684f      	ldr	r7, [r1, #4]
 8005c38:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005c3c:	d001      	beq.n	8005c42 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8005c3e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8005c42:	4c61      	ldr	r4, [pc, #388]	; (8005dc8 <HAL_GPIO_Init+0x1bc>)
 8005c44:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8005c46:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8005c48:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c4c:	684f      	ldr	r7, [r1, #4]
 8005c4e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005c52:	d001      	beq.n	8005c58 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8005c54:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8005c58:	4c5b      	ldr	r4, [pc, #364]	; (8005dc8 <HAL_GPIO_Init+0x1bc>)
 8005c5a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c5c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005c5e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c62:	684f      	ldr	r7, [r1, #4]
 8005c64:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005c68:	d001      	beq.n	8005c6e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8005c6a:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8005c6e:	4c56      	ldr	r4, [pc, #344]	; (8005dc8 <HAL_GPIO_Init+0x1bc>)
 8005c70:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8005c72:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005c74:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c76:	684d      	ldr	r5, [r1, #4]
 8005c78:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8005c7c:	d001      	beq.n	8005c82 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8005c7e:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8005c82:	4c51      	ldr	r4, [pc, #324]	; (8005dc8 <HAL_GPIO_Init+0x1bc>)
 8005c84:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c86:	3301      	adds	r3, #1
 8005c88:	2b0f      	cmp	r3, #15
 8005c8a:	f200 8098 	bhi.w	8005dbe <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8005c8e:	2201      	movs	r2, #1
 8005c90:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c92:	680c      	ldr	r4, [r1, #0]
 8005c94:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8005c98:	42b2      	cmp	r2, r6
 8005c9a:	d1f4      	bne.n	8005c86 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c9c:	684c      	ldr	r4, [r1, #4]
 8005c9e:	1e65      	subs	r5, r4, #1
 8005ca0:	2d01      	cmp	r5, #1
 8005ca2:	d903      	bls.n	8005cac <HAL_GPIO_Init+0xa0>
 8005ca4:	2c11      	cmp	r4, #17
 8005ca6:	d001      	beq.n	8005cac <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca8:	2c12      	cmp	r4, #18
 8005caa:	d112      	bne.n	8005cd2 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8005cac:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cae:	005f      	lsls	r7, r3, #1
 8005cb0:	2403      	movs	r4, #3
 8005cb2:	40bc      	lsls	r4, r7
 8005cb4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cb8:	68cc      	ldr	r4, [r1, #12]
 8005cba:	40bc      	lsls	r4, r7
 8005cbc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005cbe:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005cc0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cc2:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005cc6:	684c      	ldr	r4, [r1, #4]
 8005cc8:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8005cd0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8005cd2:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cd4:	005f      	lsls	r7, r3, #1
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	40ba      	lsls	r2, r7
 8005cda:	43d2      	mvns	r2, r2
 8005cdc:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cde:	688d      	ldr	r5, [r1, #8]
 8005ce0:	40bd      	lsls	r5, r7
 8005ce2:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8005ce4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ce6:	684c      	ldr	r4, [r1, #4]
 8005ce8:	2c02      	cmp	r4, #2
 8005cea:	d001      	beq.n	8005cf0 <HAL_GPIO_Init+0xe4>
 8005cec:	2c12      	cmp	r4, #18
 8005cee:	d113      	bne.n	8005d18 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8005cf0:	08dd      	lsrs	r5, r3, #3
 8005cf2:	3508      	adds	r5, #8
 8005cf4:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cf8:	f003 0407 	and.w	r4, r3, #7
 8005cfc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d00:	240f      	movs	r4, #15
 8005d02:	fa04 f40c 	lsl.w	r4, r4, ip
 8005d06:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d0a:	690c      	ldr	r4, [r1, #16]
 8005d0c:	fa04 f40c 	lsl.w	r4, r4, ip
 8005d10:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005d14:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8005d18:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d1a:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d1c:	684c      	ldr	r4, [r1, #4]
 8005d1e:	f004 0403 	and.w	r4, r4, #3
 8005d22:	40bc      	lsls	r4, r7
 8005d24:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8005d26:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d28:	684a      	ldr	r2, [r1, #4]
 8005d2a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005d2e:	d0aa      	beq.n	8005c86 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d30:	2200      	movs	r2, #0
 8005d32:	9201      	str	r2, [sp, #4]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <HAL_GPIO_Init+0x1c0>)
 8005d36:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005d38:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005d3c:	6454      	str	r4, [r2, #68]	; 0x44
 8005d3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d40:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005d44:	9201      	str	r2, [sp, #4]
 8005d46:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005d48:	089c      	lsrs	r4, r3, #2
 8005d4a:	1ca5      	adds	r5, r4, #2
 8005d4c:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <HAL_GPIO_Init+0x1b8>)
 8005d4e:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d52:	f003 0203 	and.w	r2, r3, #3
 8005d56:	0095      	lsls	r5, r2, #2
 8005d58:	220f      	movs	r2, #15
 8005d5a:	40aa      	lsls	r2, r5
 8005d5c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d60:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <HAL_GPIO_Init+0x1c4>)
 8005d62:	4290      	cmp	r0, r2
 8005d64:	f43f af5b 	beq.w	8005c1e <HAL_GPIO_Init+0x12>
 8005d68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d6c:	4290      	cmp	r0, r2
 8005d6e:	d01a      	beq.n	8005da6 <HAL_GPIO_Init+0x19a>
 8005d70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d74:	4290      	cmp	r0, r2
 8005d76:	d018      	beq.n	8005daa <HAL_GPIO_Init+0x19e>
 8005d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d7c:	4290      	cmp	r0, r2
 8005d7e:	d016      	beq.n	8005dae <HAL_GPIO_Init+0x1a2>
 8005d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d84:	4290      	cmp	r0, r2
 8005d86:	d014      	beq.n	8005db2 <HAL_GPIO_Init+0x1a6>
 8005d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d8c:	4290      	cmp	r0, r2
 8005d8e:	d012      	beq.n	8005db6 <HAL_GPIO_Init+0x1aa>
 8005d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d94:	4290      	cmp	r0, r2
 8005d96:	d010      	beq.n	8005dba <HAL_GPIO_Init+0x1ae>
 8005d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d9c:	4290      	cmp	r0, r2
 8005d9e:	f43f af3c 	beq.w	8005c1a <HAL_GPIO_Init+0xe>
 8005da2:	2208      	movs	r2, #8
 8005da4:	e73c      	b.n	8005c20 <HAL_GPIO_Init+0x14>
 8005da6:	2201      	movs	r2, #1
 8005da8:	e73a      	b.n	8005c20 <HAL_GPIO_Init+0x14>
 8005daa:	2202      	movs	r2, #2
 8005dac:	e738      	b.n	8005c20 <HAL_GPIO_Init+0x14>
 8005dae:	2203      	movs	r2, #3
 8005db0:	e736      	b.n	8005c20 <HAL_GPIO_Init+0x14>
 8005db2:	2204      	movs	r2, #4
 8005db4:	e734      	b.n	8005c20 <HAL_GPIO_Init+0x14>
 8005db6:	2205      	movs	r2, #5
 8005db8:	e732      	b.n	8005c20 <HAL_GPIO_Init+0x14>
 8005dba:	2206      	movs	r2, #6
 8005dbc:	e730      	b.n	8005c20 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8005dbe:	b003      	add	sp, #12
 8005dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc2:	4770      	bx	lr
 8005dc4:	40013800 	.word	0x40013800
 8005dc8:	40013c00 	.word	0x40013c00
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	40020000 	.word	0x40020000

08005dd4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dd4:	6903      	ldr	r3, [r0, #16]
 8005dd6:	4219      	tst	r1, r3
 8005dd8:	d101      	bne.n	8005dde <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dda:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005ddc:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8005dde:	2001      	movs	r0, #1
 8005de0:	4770      	bx	lr

08005de2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005de2:	b912      	cbnz	r2, 8005dea <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005de4:	0409      	lsls	r1, r1, #16
 8005de6:	6181      	str	r1, [r0, #24]
  }
}
 8005de8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8005dea:	6181      	str	r1, [r0, #24]
 8005dec:	4770      	bx	lr

08005dee <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005dee:	4770      	bx	lr

08005df0 <HAL_GPIO_EXTI_IRQHandler>:
{
 8005df0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	4203      	tst	r3, r0
 8005df8:	d100      	bne.n	8005dfc <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8005dfa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dfc:	4b02      	ldr	r3, [pc, #8]	; (8005e08 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005dfe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e00:	f7ff fff5 	bl	8005dee <HAL_GPIO_EXTI_Callback>
}
 8005e04:	e7f9      	b.n	8005dfa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005e06:	bf00      	nop
 8005e08:	40013c00 	.word	0x40013c00

08005e0c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e0c:	6803      	ldr	r3, [r0, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005e14:	d011      	beq.n	8005e3a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e20:	2220      	movs	r2, #32
 8005e22:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e26:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005e2c:	f042 0204 	orr.w	r2, r2, #4
 8005e30:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8005e36:	2001      	movs	r0, #1
 8005e38:	4770      	bx	lr
  }
  return HAL_OK;
 8005e3a:	2000      	movs	r0, #0
}
 8005e3c:	4770      	bx	lr

08005e3e <I2C_WaitOnFlagUntilTimeout>:
{
 8005e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e40:	4606      	mov	r6, r0
 8005e42:	460c      	mov	r4, r1
 8005e44:	4617      	mov	r7, r2
 8005e46:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e48:	e022      	b.n	8005e90 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7ff f9bb 	bl	80051c4 <HAL_GetTick>
 8005e4e:	9b06      	ldr	r3, [sp, #24]
 8005e50:	1ac0      	subs	r0, r0, r3
 8005e52:	42a8      	cmp	r0, r5
 8005e54:	d800      	bhi.n	8005e58 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8005e56:	b9dd      	cbnz	r5, 8005e90 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e62:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e66:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005e68:	f042 0220 	orr.w	r2, r2, #32
 8005e6c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005e6e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8005e72:	2001      	movs	r0, #1
 8005e74:	e01a      	b.n	8005eac <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e76:	6833      	ldr	r3, [r6, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	ea24 0303 	bic.w	r3, r4, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	fab3 f383 	clz	r3, r3
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	429f      	cmp	r7, r3
 8005e88:	d10f      	bne.n	8005eaa <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005e8a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005e8e:	d1dc      	bne.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e90:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d0ee      	beq.n	8005e76 <I2C_WaitOnFlagUntilTimeout+0x38>
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	ea24 0303 	bic.w	r3, r4, r3
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	fab3 f383 	clz	r3, r3
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	e7ed      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8005eaa:	2000      	movs	r0, #0
}
 8005eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005eae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	460d      	mov	r5, r1
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eb8:	e03c      	b.n	8005f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec8:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ed8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005eda:	f042 0204 	orr.w	r2, r2, #4
 8005ede:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005ee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	e033      	b.n	8005f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee8:	f7ff f96c 	bl	80051c4 <HAL_GetTick>
 8005eec:	1bc0      	subs	r0, r0, r7
 8005eee:	42b0      	cmp	r0, r6
 8005ef0:	d800      	bhi.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8005ef2:	b9fe      	cbnz	r6, 8005f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005efe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f04:	f042 0220 	orr.w	r2, r2, #32
 8005f08:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005f0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005f0e:	2001      	movs	r0, #1
 8005f10:	e01e      	b.n	8005f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	ea25 0303 	bic.w	r3, r5, r3
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3300      	adds	r3, #0
 8005f1e:	bf18      	it	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	b1a3      	cbz	r3, 8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005f2c:	d1c5      	bne.n	8005eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8005f2e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005f32:	d1d9      	bne.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f34:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d0ea      	beq.n	8005f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	ea25 0303 	bic.w	r3, r5, r3
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3300      	adds	r3, #0
 8005f48:	bf18      	it	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	e7e9      	b.n	8005f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8005f4e:	2000      	movs	r0, #0
}
 8005f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f54 <I2C_MasterRequestWrite>:
{
 8005f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f56:	b083      	sub	sp, #12
 8005f58:	4604      	mov	r4, r0
 8005f5a:	460f      	mov	r7, r1
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d00d      	beq.n	8005f82 <I2C_MasterRequestWrite+0x2e>
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d00b      	beq.n	8005f82 <I2C_MasterRequestWrite+0x2e>
 8005f6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f6e:	d008      	beq.n	8005f82 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005f72:	2b12      	cmp	r3, #18
 8005f74:	d10a      	bne.n	8005f8c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f76:	6802      	ldr	r2, [r0, #0]
 8005f78:	6813      	ldr	r3, [r2, #0]
 8005f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	e004      	b.n	8005f8c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	6813      	ldr	r3, [r2, #0]
 8005f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f8a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8c:	9600      	str	r6, [sp, #0]
 8005f8e:	462b      	mov	r3, r5
 8005f90:	2200      	movs	r2, #0
 8005f92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f96:	4620      	mov	r0, r4
 8005f98:	f7ff ff51 	bl	8005e3e <I2C_WaitOnFlagUntilTimeout>
 8005f9c:	b158      	cbz	r0, 8005fb6 <I2C_MasterRequestWrite+0x62>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005fa6:	d02b      	beq.n	8006000 <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fac:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	b003      	add	sp, #12
 8005fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fbc:	d10e      	bne.n	8005fdc <I2C_MasterRequestWrite+0x88>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8005fc4:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fc6:	4633      	mov	r3, r6
 8005fc8:	462a      	mov	r2, r5
 8005fca:	490f      	ldr	r1, [pc, #60]	; (8006008 <I2C_MasterRequestWrite+0xb4>)
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f7ff ff6e 	bl	8005eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d0eb      	beq.n	8005fb0 <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e7e9      	b.n	8005fb0 <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fdc:	11fb      	asrs	r3, r7, #7
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	f003 0306 	and.w	r3, r3, #6
 8005fe4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005fe8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fea:	4633      	mov	r3, r6
 8005fec:	462a      	mov	r2, r5
 8005fee:	4907      	ldr	r1, [pc, #28]	; (800600c <I2C_MasterRequestWrite+0xb8>)
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f7ff ff5c 	bl	8005eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ff6:	b928      	cbnz	r0, 8006004 <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	b2ff      	uxtb	r7, r7
 8005ffc:	611f      	str	r7, [r3, #16]
 8005ffe:	e7e2      	b.n	8005fc6 <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e7d5      	b.n	8005fb0 <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e7d3      	b.n	8005fb0 <I2C_MasterRequestWrite+0x5c>
 8006008:	00010002 	.word	0x00010002
 800600c:	00010008 	.word	0x00010008

08006010 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	460d      	mov	r5, r1
 8006016:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006020:	d11c      	bne.n	800605c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff fef2 	bl	8005e0c <I2C_IsAcknowledgeFailed>
 8006028:	b9d0      	cbnz	r0, 8006060 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800602a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800602e:	d0f3      	beq.n	8006018 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006030:	f7ff f8c8 	bl	80051c4 <HAL_GetTick>
 8006034:	1b80      	subs	r0, r0, r6
 8006036:	42a8      	cmp	r0, r5
 8006038:	d801      	bhi.n	800603e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800603a:	2d00      	cmp	r5, #0
 800603c:	d1ec      	bne.n	8006018 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800603e:	2300      	movs	r3, #0
 8006040:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006042:	2220      	movs	r2, #32
 8006044:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006048:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800604c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800604e:	f042 0220 	orr.w	r2, r2, #32
 8006052:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006054:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8006058:	2001      	movs	r0, #1
 800605a:	e000      	b.n	800605e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800605c:	2000      	movs	r0, #0
}
 800605e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006060:	2001      	movs	r0, #1
 8006062:	e7fc      	b.n	800605e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08006064 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4604      	mov	r4, r0
 8006068:	460d      	mov	r5, r1
 800606a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f013 0f04 	tst.w	r3, #4
 8006074:	d11c      	bne.n	80060b0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006076:	4620      	mov	r0, r4
 8006078:	f7ff fec8 	bl	8005e0c <I2C_IsAcknowledgeFailed>
 800607c:	b9d0      	cbnz	r0, 80060b4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800607e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006082:	d0f3      	beq.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006084:	f7ff f89e 	bl	80051c4 <HAL_GetTick>
 8006088:	1b80      	subs	r0, r0, r6
 800608a:	42a8      	cmp	r0, r5
 800608c:	d801      	bhi.n	8006092 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800608e:	2d00      	cmp	r5, #0
 8006090:	d1ec      	bne.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006092:	2300      	movs	r3, #0
 8006094:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006096:	2220      	movs	r2, #32
 8006098:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060a2:	f042 0220 	orr.w	r2, r2, #32
 80060a6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80060a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80060ac:	2001      	movs	r0, #1
 80060ae:	e000      	b.n	80060b2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80060b0:	2000      	movs	r0, #0
}
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80060b4:	2001      	movs	r0, #1
 80060b6:	e7fc      	b.n	80060b2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080060b8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80060b8:	2800      	cmp	r0, #0
 80060ba:	f000 80c8 	beq.w	800624e <HAL_I2C_Init+0x196>
{
 80060be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d075      	beq.n	80061b6 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80060ca:	2324      	movs	r3, #36	; 0x24
 80060cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	6813      	ldr	r3, [r2, #0]
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	6813      	ldr	r3, [r2, #0]
 80060de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060e4:	6822      	ldr	r2, [r4, #0]
 80060e6:	6813      	ldr	r3, [r2, #0]
 80060e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060ec:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060ee:	f001 f807 	bl	8007100 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	4b58      	ldr	r3, [pc, #352]	; (8006258 <HAL_I2C_Init+0x1a0>)
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d862      	bhi.n	80061c0 <HAL_I2C_Init+0x108>
 80060fa:	4b58      	ldr	r3, [pc, #352]	; (800625c <HAL_I2C_Init+0x1a4>)
 80060fc:	4298      	cmp	r0, r3
 80060fe:	bf8c      	ite	hi
 8006100:	2300      	movhi	r3, #0
 8006102:	2301      	movls	r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	f040 80a4 	bne.w	8006252 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 800610a:	4b55      	ldr	r3, [pc, #340]	; (8006260 <HAL_I2C_Init+0x1a8>)
 800610c:	fba3 2300 	umull	r2, r3, r3, r0
 8006110:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006112:	6821      	ldr	r1, [r4, #0]
 8006114:	684a      	ldr	r2, [r1, #4]
 8006116:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800611a:	431a      	orrs	r2, r3
 800611c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800611e:	6825      	ldr	r5, [r4, #0]
 8006120:	6a2a      	ldr	r2, [r5, #32]
 8006122:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006126:	6866      	ldr	r6, [r4, #4]
 8006128:	494b      	ldr	r1, [pc, #300]	; (8006258 <HAL_I2C_Init+0x1a0>)
 800612a:	428e      	cmp	r6, r1
 800612c:	d84e      	bhi.n	80061cc <HAL_I2C_Init+0x114>
 800612e:	3301      	adds	r3, #1
 8006130:	4313      	orrs	r3, r2
 8006132:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006134:	6825      	ldr	r5, [r4, #0]
 8006136:	69e9      	ldr	r1, [r5, #28]
 8006138:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800613c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006140:	6863      	ldr	r3, [r4, #4]
 8006142:	4a45      	ldr	r2, [pc, #276]	; (8006258 <HAL_I2C_Init+0x1a0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d84b      	bhi.n	80061e0 <HAL_I2C_Init+0x128>
 8006148:	3801      	subs	r0, #1
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006150:	3301      	adds	r3, #1
 8006152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006156:	2b04      	cmp	r3, #4
 8006158:	bf38      	it	cc
 800615a:	2304      	movcc	r3, #4
 800615c:	430b      	orrs	r3, r1
 800615e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006160:	6821      	ldr	r1, [r4, #0]
 8006162:	680b      	ldr	r3, [r1, #0]
 8006164:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006168:	69e2      	ldr	r2, [r4, #28]
 800616a:	6a20      	ldr	r0, [r4, #32]
 800616c:	4302      	orrs	r2, r0
 800616e:	4313      	orrs	r3, r2
 8006170:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006172:	6821      	ldr	r1, [r4, #0]
 8006174:	688b      	ldr	r3, [r1, #8]
 8006176:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800617a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800617e:	6922      	ldr	r2, [r4, #16]
 8006180:	68e0      	ldr	r0, [r4, #12]
 8006182:	4302      	orrs	r2, r0
 8006184:	4313      	orrs	r3, r2
 8006186:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006188:	6821      	ldr	r1, [r4, #0]
 800618a:	68cb      	ldr	r3, [r1, #12]
 800618c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006190:	6962      	ldr	r2, [r4, #20]
 8006192:	69a0      	ldr	r0, [r4, #24]
 8006194:	4302      	orrs	r2, r0
 8006196:	4313      	orrs	r3, r2
 8006198:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800619a:	6822      	ldr	r2, [r4, #0]
 800619c:	6813      	ldr	r3, [r2, #0]
 800619e:	f043 0301 	orr.w	r3, r3, #1
 80061a2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061a4:	2000      	movs	r0, #0
 80061a6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061a8:	2320      	movs	r3, #32
 80061aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ae:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80061b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80061b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80061ba:	f7fe fd49 	bl	8004c50 <HAL_I2C_MspInit>
 80061be:	e784      	b.n	80060ca <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061c0:	4b28      	ldr	r3, [pc, #160]	; (8006264 <HAL_I2C_Init+0x1ac>)
 80061c2:	4298      	cmp	r0, r3
 80061c4:	bf8c      	ite	hi
 80061c6:	2300      	movhi	r3, #0
 80061c8:	2301      	movls	r3, #1
 80061ca:	e79b      	b.n	8006104 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061cc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	4924      	ldr	r1, [pc, #144]	; (8006268 <HAL_I2C_Init+0x1b0>)
 80061d6:	fba1 1303 	umull	r1, r3, r1, r3
 80061da:	099b      	lsrs	r3, r3, #6
 80061dc:	3301      	adds	r3, #1
 80061de:	e7a7      	b.n	8006130 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061e0:	68a2      	ldr	r2, [r4, #8]
 80061e2:	b9ba      	cbnz	r2, 8006214 <HAL_I2C_Init+0x15c>
 80061e4:	1e46      	subs	r6, r0, #1
 80061e6:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80061ea:	fbb6 f6f7 	udiv	r6, r6, r7
 80061ee:	3601      	adds	r6, #1
 80061f0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80061f4:	fab6 f686 	clz	r6, r6
 80061f8:	0976      	lsrs	r6, r6, #5
 80061fa:	bb36      	cbnz	r6, 800624a <HAL_I2C_Init+0x192>
 80061fc:	b9c2      	cbnz	r2, 8006230 <HAL_I2C_Init+0x178>
 80061fe:	3801      	subs	r0, #1
 8006200:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006204:	fbb0 f3f3 	udiv	r3, r0, r3
 8006208:	3301      	adds	r3, #1
 800620a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800620e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8006212:	e7a3      	b.n	800615c <HAL_I2C_Init+0xa4>
 8006214:	1e46      	subs	r6, r0, #1
 8006216:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800621a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800621e:	fbb6 f6f7 	udiv	r6, r6, r7
 8006222:	3601      	adds	r6, #1
 8006224:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8006228:	fab6 f686 	clz	r6, r6
 800622c:	0976      	lsrs	r6, r6, #5
 800622e:	e7e4      	b.n	80061fa <HAL_I2C_Init+0x142>
 8006230:	3801      	subs	r0, #1
 8006232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006236:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800623a:	fbb0 f2f3 	udiv	r2, r0, r3
 800623e:	3201      	adds	r2, #1
 8006240:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006244:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8006248:	e788      	b.n	800615c <HAL_I2C_Init+0xa4>
 800624a:	2301      	movs	r3, #1
 800624c:	e786      	b.n	800615c <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 800624e:	2001      	movs	r0, #1
}
 8006250:	4770      	bx	lr
    return HAL_ERROR;
 8006252:	2001      	movs	r0, #1
 8006254:	e7ae      	b.n	80061b4 <HAL_I2C_Init+0xfc>
 8006256:	bf00      	nop
 8006258:	000186a0 	.word	0x000186a0
 800625c:	001e847f 	.word	0x001e847f
 8006260:	431bde83 	.word	0x431bde83
 8006264:	003d08ff 	.word	0x003d08ff
 8006268:	10624dd3 	.word	0x10624dd3

0800626c <HAL_I2C_Master_Transmit>:
{
 800626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	4604      	mov	r4, r0
 8006274:	460e      	mov	r6, r1
 8006276:	4690      	mov	r8, r2
 8006278:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800627a:	f7fe ffa3 	bl	80051c4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800627e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b20      	cmp	r3, #32
 8006286:	d004      	beq.n	8006292 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8006288:	2602      	movs	r6, #2
}
 800628a:	4630      	mov	r0, r6
 800628c:	b004      	add	sp, #16
 800628e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006292:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006294:	9000      	str	r0, [sp, #0]
 8006296:	2319      	movs	r3, #25
 8006298:	2201      	movs	r2, #1
 800629a:	494f      	ldr	r1, [pc, #316]	; (80063d8 <HAL_I2C_Master_Transmit+0x16c>)
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff fdce 	bl	8005e3e <I2C_WaitOnFlagUntilTimeout>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f040 8091 	bne.w	80063ca <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 80062a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f000 808e 	beq.w	80063ce <HAL_I2C_Master_Transmit+0x162>
 80062b2:	2301      	movs	r3, #1
 80062b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f012 0f01 	tst.w	r2, #1
 80062c0:	d103      	bne.n	80062ca <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	6813      	ldr	r3, [r2, #0]
 80062ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062d2:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062d4:	2321      	movs	r3, #33	; 0x21
 80062d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062da:	2310      	movs	r3, #16
 80062dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80062e4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062e8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80062ec:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ee:	4b3b      	ldr	r3, [pc, #236]	; (80063dc <HAL_I2C_Master_Transmit+0x170>)
 80062f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062f2:	462b      	mov	r3, r5
 80062f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062f6:	4631      	mov	r1, r6
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7ff fe2b 	bl	8005f54 <I2C_MasterRequestWrite>
 80062fe:	4606      	mov	r6, r0
 8006300:	2800      	cmp	r0, #0
 8006302:	d166      	bne.n	80063d2 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006304:	2300      	movs	r3, #0
 8006306:	9303      	str	r3, [sp, #12]
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	695a      	ldr	r2, [r3, #20]
 800630c:	9203      	str	r2, [sp, #12]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	9303      	str	r3, [sp, #12]
 8006312:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8006314:	e012      	b.n	800633c <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006318:	2b04      	cmp	r3, #4
 800631a:	d001      	beq.n	8006320 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 800631c:	2601      	movs	r6, #1
 800631e:	e7b4      	b.n	800628a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	6813      	ldr	r3, [r2, #0]
 8006324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006328:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800632a:	2601      	movs	r6, #1
 800632c:	e7ad      	b.n	800628a <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800632e:	462a      	mov	r2, r5
 8006330:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006332:	4620      	mov	r0, r4
 8006334:	f7ff fe96 	bl	8006064 <I2C_WaitOnBTFFlagUntilTimeout>
 8006338:	2800      	cmp	r0, #0
 800633a:	d12c      	bne.n	8006396 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 800633c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d035      	beq.n	80063ae <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006342:	462a      	mov	r2, r5
 8006344:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff fe62 	bl	8006010 <I2C_WaitOnTXEFlagUntilTimeout>
 800634c:	2800      	cmp	r0, #0
 800634e:	d1e2      	bne.n	8006316 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006350:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006358:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800635a:	1c4b      	adds	r3, r1, #1
 800635c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800635e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006360:	3b01      	subs	r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006366:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006368:	3b01      	subs	r3, #1
 800636a:	b29b      	uxth	r3, r3
 800636c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	6950      	ldr	r0, [r2, #20]
 8006372:	f010 0f04 	tst.w	r0, #4
 8006376:	d0da      	beq.n	800632e <HAL_I2C_Master_Transmit+0xc2>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0d8      	beq.n	800632e <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637c:	784b      	ldrb	r3, [r1, #1]
 800637e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8006380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006382:	3301      	adds	r3, #1
 8006384:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006386:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006388:	3b01      	subs	r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800638e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006390:	3b01      	subs	r3, #1
 8006392:	8523      	strh	r3, [r4, #40]	; 0x28
 8006394:	e7cb      	b.n	800632e <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006398:	2b04      	cmp	r3, #4
 800639a:	d001      	beq.n	80063a0 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 800639c:	2601      	movs	r6, #1
 800639e:	e774      	b.n	800628a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a0:	6822      	ldr	r2, [r4, #0]
 80063a2:	6813      	ldr	r3, [r2, #0]
 80063a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063a8:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80063aa:	2601      	movs	r6, #1
 80063ac:	e76d      	b.n	800628a <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	6813      	ldr	r3, [r2, #0]
 80063b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063b6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80063b8:	2320      	movs	r3, #32
 80063ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063be:	2300      	movs	r3, #0
 80063c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80063c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80063c8:	e75f      	b.n	800628a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 80063ca:	2602      	movs	r6, #2
 80063cc:	e75d      	b.n	800628a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80063ce:	2602      	movs	r6, #2
 80063d0:	e75b      	b.n	800628a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 80063d2:	2601      	movs	r6, #1
 80063d4:	e759      	b.n	800628a <HAL_I2C_Master_Transmit+0x1e>
 80063d6:	bf00      	nop
 80063d8:	00100002 	.word	0x00100002
 80063dc:	ffff0000 	.word	0xffff0000

080063e0 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80063e0:	2800      	cmp	r0, #0
 80063e2:	f000 80bf 	beq.w	8006564 <HAL_I2S_Init+0x184>
{
 80063e6:	b570      	push	{r4, r5, r6, lr}
 80063e8:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80063ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d051      	beq.n	8006496 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80063f2:	2202      	movs	r2, #2
 80063f4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80063f8:	6821      	ldr	r1, [r4, #0]
 80063fa:	69cb      	ldr	r3, [r1, #28]
 80063fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006400:	f023 030f 	bic.w	r3, r3, #15
 8006404:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800640a:	6963      	ldr	r3, [r4, #20]
 800640c:	4293      	cmp	r3, r2
 800640e:	d063      	beq.n	80064d8 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006410:	68e3      	ldr	r3, [r4, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d146      	bne.n	80064a4 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006416:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006418:	68a3      	ldr	r3, [r4, #8]
 800641a:	2b20      	cmp	r3, #32
 800641c:	d800      	bhi.n	8006420 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800641e:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006420:	2001      	movs	r0, #1
 8006422:	f000 ff37 	bl	8007294 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800642c:	d03c      	beq.n	80064a8 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800642e:	fbb0 f0f5 	udiv	r0, r0, r5
 8006432:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006436:	0043      	lsls	r3, r0, #1
 8006438:	6962      	ldr	r2, [r4, #20]
 800643a:	fbb3 f3f2 	udiv	r3, r3, r2
 800643e:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006440:	4a49      	ldr	r2, [pc, #292]	; (8006568 <HAL_I2S_Init+0x188>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006448:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006450:	0212      	lsls	r2, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006452:	1e99      	subs	r1, r3, #2
 8006454:	29fd      	cmp	r1, #253	; 0xfd
 8006456:	d841      	bhi.n	80064dc <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006458:	6921      	ldr	r1, [r4, #16]
 800645a:	430a      	orrs	r2, r1
 800645c:	6821      	ldr	r1, [r4, #0]
 800645e:	4313      	orrs	r3, r2
 8006460:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006462:	6821      	ldr	r1, [r4, #0]
 8006464:	69cb      	ldr	r3, [r1, #28]
 8006466:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800646a:	f023 030f 	bic.w	r3, r3, #15
 800646e:	6862      	ldr	r2, [r4, #4]
 8006470:	68a0      	ldr	r0, [r4, #8]
 8006472:	4302      	orrs	r2, r0
 8006474:	68e0      	ldr	r0, [r4, #12]
 8006476:	4302      	orrs	r2, r0
 8006478:	69a0      	ldr	r0, [r4, #24]
 800647a:	4302      	orrs	r2, r0
 800647c:	4313      	orrs	r3, r2
 800647e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006482:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006484:	6a23      	ldr	r3, [r4, #32]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d02e      	beq.n	80064e8 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800648a:	2000      	movs	r0, #0
 800648c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800648e:	2301      	movs	r3, #1
 8006490:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8006494:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8006496:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800649a:	4b34      	ldr	r3, [pc, #208]	; (800656c <HAL_I2S_Init+0x18c>)
 800649c:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 800649e:	f7fe fc11 	bl	8004cc4 <HAL_I2S_MspInit>
 80064a2:	e7a6      	b.n	80063f2 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 80064a4:	2520      	movs	r5, #32
 80064a6:	e7b7      	b.n	8006418 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80064a8:	68e3      	ldr	r3, [r4, #12]
 80064aa:	b153      	cbz	r3, 80064c2 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064ac:	00ad      	lsls	r5, r5, #2
 80064ae:	fbb0 f0f5 	udiv	r0, r0, r5
 80064b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80064b6:	0043      	lsls	r3, r0, #1
 80064b8:	6962      	ldr	r2, [r4, #20]
 80064ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80064be:	3305      	adds	r3, #5
 80064c0:	e7be      	b.n	8006440 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064c2:	00ed      	lsls	r5, r5, #3
 80064c4:	fbb0 f0f5 	udiv	r0, r0, r5
 80064c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80064cc:	0043      	lsls	r3, r0, #1
 80064ce:	6962      	ldr	r2, [r4, #20]
 80064d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064d4:	3305      	adds	r3, #5
 80064d6:	e7b3      	b.n	8006440 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 80064d8:	2200      	movs	r2, #0
 80064da:	e7ba      	b.n	8006452 <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80064dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064de:	f043 0310 	orr.w	r3, r3, #16
 80064e2:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 80064e4:	2001      	movs	r0, #1
 80064e6:	e7d5      	b.n	8006494 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80064e8:	4b21      	ldr	r3, [pc, #132]	; (8006570 <HAL_I2S_Init+0x190>)
 80064ea:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80064ec:	6822      	ldr	r2, [r4, #0]
 80064ee:	4b21      	ldr	r3, [pc, #132]	; (8006574 <HAL_I2S_Init+0x194>)
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d01f      	beq.n	8006534 <HAL_I2S_Init+0x154>
 80064f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80064f8:	69d3      	ldr	r3, [r2, #28]
 80064fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064fe:	f023 030f 	bic.w	r3, r3, #15
 8006502:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <HAL_I2S_Init+0x194>)
 8006508:	429a      	cmp	r2, r3
 800650a:	d015      	beq.n	8006538 <HAL_I2S_Init+0x158>
 800650c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006510:	2202      	movs	r2, #2
 8006512:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	4b17      	ldr	r3, [pc, #92]	; (8006574 <HAL_I2S_Init+0x194>)
 8006518:	429a      	cmp	r2, r3
 800651a:	d010      	beq.n	800653e <HAL_I2S_Init+0x15e>
 800651c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8006520:	69ca      	ldr	r2, [r1, #28]
 8006522:	b292      	uxth	r2, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652a:	d00a      	beq.n	8006542 <HAL_I2S_Init+0x162>
 800652c:	b9c3      	cbnz	r3, 8006560 <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 800652e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8006532:	e008      	b.n	8006546 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006534:	4a10      	ldr	r2, [pc, #64]	; (8006578 <HAL_I2S_Init+0x198>)
 8006536:	e7df      	b.n	80064f8 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006538:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800653c:	e7e8      	b.n	8006510 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800653e:	490e      	ldr	r1, [pc, #56]	; (8006578 <HAL_I2S_Init+0x198>)
 8006540:	e7ee      	b.n	8006520 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8006542:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006546:	68a0      	ldr	r0, [r4, #8]
 8006548:	68e5      	ldr	r5, [r4, #12]
                                    (uint16_t)hi2s->Init.CPOL))));
 800654a:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800654c:	432b      	orrs	r3, r5
 800654e:	b29b      	uxth	r3, r3
 8006550:	4303      	orrs	r3, r0
 8006552:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006554:	4333      	orrs	r3, r6
 8006556:	4313      	orrs	r3, r2
 8006558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800655c:	61cb      	str	r3, [r1, #28]
 800655e:	e794      	b.n	800648a <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8006560:	2600      	movs	r6, #0
 8006562:	e7f0      	b.n	8006546 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8006564:	2001      	movs	r0, #1
}
 8006566:	4770      	bx	lr
 8006568:	cccccccd 	.word	0xcccccccd
 800656c:	080066f7 	.word	0x080066f7
 8006570:	08006929 	.word	0x08006929
 8006574:	40003800 	.word	0x40003800
 8006578:	40003400 	.word	0x40003400

0800657c <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800657c:	2900      	cmp	r1, #0
 800657e:	d05d      	beq.n	800663c <HAL_I2S_Transmit_DMA+0xc0>
{
 8006580:	b510      	push	{r4, lr}
  if ((pData == NULL) || (Size == 0U))
 8006582:	2a00      	cmp	r2, #0
 8006584:	d05d      	beq.n	8006642 <HAL_I2S_Transmit_DMA+0xc6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006586:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d05b      	beq.n	8006648 <HAL_I2S_Transmit_DMA+0xcc>
 8006590:	2301      	movs	r3, #1
 8006592:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006596:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d110      	bne.n	80065c2 <HAL_I2S_Transmit_DMA+0x46>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80065a0:	2303      	movs	r3, #3
 80065a2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	6443      	str	r3, [r0, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80065aa:	6241      	str	r1, [r0, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80065ac:	6803      	ldr	r3, [r0, #0]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d009      	beq.n	80065cc <HAL_I2S_Transmit_DMA+0x50>
 80065b8:	2b05      	cmp	r3, #5
 80065ba:	d007      	beq.n	80065cc <HAL_I2S_Transmit_DMA+0x50>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 80065bc:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80065be:	8542      	strh	r2, [r0, #42]	; 0x2a
 80065c0:	e008      	b.n	80065d4 <HAL_I2S_Transmit_DMA+0x58>
    __HAL_UNLOCK(hi2s);
 80065c2:	2300      	movs	r3, #0
 80065c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
 80065ca:	e03b      	b.n	8006644 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 80065cc:	0052      	lsls	r2, r2, #1
 80065ce:	b292      	uxth	r2, r2
 80065d0:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80065d2:	8542      	strh	r2, [r0, #42]	; 0x2a
 80065d4:	4604      	mov	r4, r0
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80065d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <HAL_I2S_Transmit_DMA+0xd0>)
 80065da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80065dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80065de:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <HAL_I2S_Transmit_DMA+0xd4>)
 80065e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80065e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80065e4:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <HAL_I2S_Transmit_DMA+0xd8>)
 80065e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
 80065e8:	6802      	ldr	r2, [r0, #0]
                                 hi2s->TxXferSize))
 80065ea:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80065ec:	320c      	adds	r2, #12
 80065ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80065f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80065f2:	f7ff f9e7 	bl	80059c4 <HAL_DMA_Start_IT>
 80065f6:	4603      	mov	r3, r0
 80065f8:	b9a8      	cbnz	r0, 8006626 <HAL_I2S_Transmit_DMA+0xaa>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	69d1      	ldr	r1, [r2, #28]
 80065fe:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8006602:	d103      	bne.n	800660c <HAL_I2S_Transmit_DMA+0x90>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006604:	69d1      	ldr	r1, [r2, #28]
 8006606:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800660a:	61d1      	str	r1, [r2, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800660c:	6822      	ldr	r2, [r4, #0]
 800660e:	6851      	ldr	r1, [r2, #4]
 8006610:	f011 0f02 	tst.w	r1, #2
 8006614:	d103      	bne.n	800661e <HAL_I2S_Transmit_DMA+0xa2>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006616:	6851      	ldr	r1, [r2, #4]
 8006618:	f041 0102 	orr.w	r1, r1, #2
 800661c:	6051      	str	r1, [r2, #4]
  }

  __HAL_UNLOCK(hi2s);
 800661e:	2200      	movs	r2, #0
 8006620:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  return HAL_OK;
 8006624:	e00e      	b.n	8006644 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006626:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006628:	f043 0308 	orr.w	r3, r3, #8
 800662c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800662e:	2301      	movs	r3, #1
 8006630:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8006634:	2200      	movs	r2, #0
 8006636:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_ERROR;
 800663a:	e003      	b.n	8006644 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 800663c:	2301      	movs	r3, #1
}
 800663e:	4618      	mov	r0, r3
 8006640:	4770      	bx	lr
    return  HAL_ERROR;
 8006642:	2301      	movs	r3, #1
}
 8006644:	4618      	mov	r0, r3
 8006646:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hi2s);
 8006648:	2302      	movs	r3, #2
 800664a:	e7fb      	b.n	8006644 <HAL_I2S_Transmit_DMA+0xc8>
 800664c:	08006659 	.word	0x08006659
 8006650:	08006699 	.word	0x08006699
 8006654:	080067c7 	.word	0x080067c7

08006658 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006658:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800665a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800665c:	f7fa fd14 	bl	8001088 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006660:	bd08      	pop	{r3, pc}

08006662 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006662:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006664:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006666:	6803      	ldr	r3, [r0, #0]
 8006668:	8812      	ldrh	r2, [r2, #0]
 800666a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800666c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800666e:	3302      	adds	r3, #2
 8006670:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 8006672:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006674:	3b01      	subs	r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800667a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	b103      	cbz	r3, 8006682 <I2S_Transmit_IT+0x20>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006680:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006682:	6802      	ldr	r2, [r0, #0]
 8006684:	6853      	ldr	r3, [r2, #4]
 8006686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800668a:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800668c:	2301      	movs	r3, #1
 800668e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8006692:	f7fa fce9 	bl	8001068 <HAL_I2S_TxCpltCallback>
}
 8006696:	e7f3      	b.n	8006680 <I2S_Transmit_IT+0x1e>

08006698 <I2S_DMATxCplt>:
{
 8006698:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800669a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 800669c:	69c2      	ldr	r2, [r0, #28]
 800669e:	b94a      	cbnz	r2, 80066b4 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80066a0:	6819      	ldr	r1, [r3, #0]
 80066a2:	684a      	ldr	r2, [r1, #4]
 80066a4:	f022 0202 	bic.w	r2, r2, #2
 80066a8:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 80066aa:	2200      	movs	r2, #0
 80066ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fa fcd7 	bl	8001068 <HAL_I2S_TxCpltCallback>
}
 80066ba:	bd08      	pop	{r3, pc}

080066bc <HAL_I2S_RxCpltCallback>:
}
 80066bc:	4770      	bx	lr

080066be <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066be:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066c0:	6803      	ldr	r3, [r0, #0]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80066c6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80066ca:	3302      	adds	r3, #2
 80066cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80066ce:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80066d6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80066d8:	b29b      	uxth	r3, r3
 80066da:	b103      	cbz	r3, 80066de <I2S_Receive_IT+0x20>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066dc:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066de:	6802      	ldr	r2, [r0, #0]
 80066e0:	6853      	ldr	r3, [r2, #4]
 80066e2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80066e6:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80066ee:	f7ff ffe5 	bl	80066bc <HAL_I2S_RxCpltCallback>
}
 80066f2:	e7f3      	b.n	80066dc <I2S_Receive_IT+0x1e>

080066f4 <HAL_I2S_ErrorCallback>:
}
 80066f4:	4770      	bx	lr

080066f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80066f6:	b510      	push	{r4, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80066fc:	6802      	ldr	r2, [r0, #0]
 80066fe:	6893      	ldr	r3, [r2, #8]
 8006700:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006702:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b04      	cmp	r3, #4
 800670a:	d006      	beq.n	800671a <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800670c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b03      	cmp	r3, #3
 8006714:	d02c      	beq.n	8006770 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006716:	b004      	add	sp, #16
 8006718:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800671a:	9b03      	ldr	r3, [sp, #12]
 800671c:	f013 0f01 	tst.w	r3, #1
 8006720:	d003      	beq.n	800672a <I2S_IRQHandler+0x34>
 8006722:	6853      	ldr	r3, [r2, #4]
 8006724:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006728:	d11f      	bne.n	800676a <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006730:	d0ec      	beq.n	800670c <I2S_IRQHandler+0x16>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	f012 0f20 	tst.w	r2, #32
 800673a:	d0e7      	beq.n	800670c <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006742:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006744:	2300      	movs	r3, #0
 8006746:	9301      	str	r3, [sp, #4]
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	9201      	str	r2, [sp, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006754:	2301      	movs	r3, #1
 8006756:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800675a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800675c:	f043 0302 	orr.w	r3, r3, #2
 8006760:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff ffc6 	bl	80066f4 <HAL_I2S_ErrorCallback>
 8006768:	e7d0      	b.n	800670c <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 800676a:	f7ff ffa8 	bl	80066be <I2S_Receive_IT>
 800676e:	e7dc      	b.n	800672a <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	f013 0f02 	tst.w	r3, #2
 8006776:	d004      	beq.n	8006782 <I2S_IRQHandler+0x8c>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006780:	d11d      	bne.n	80067be <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	f013 0f08 	tst.w	r3, #8
 8006788:	d0c5      	beq.n	8006716 <I2S_IRQHandler+0x20>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	f012 0f20 	tst.w	r2, #32
 8006792:	d0c0      	beq.n	8006716 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800679a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800679c:	2300      	movs	r3, #0
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	9302      	str	r3, [sp, #8]
 80067a6:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80067ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80067b0:	f043 0304 	orr.w	r3, r3, #4
 80067b4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80067b6:	4620      	mov	r0, r4
 80067b8:	f7ff ff9c 	bl	80066f4 <HAL_I2S_ErrorCallback>
}
 80067bc:	e7ab      	b.n	8006716 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff ff4f 	bl	8006662 <I2S_Transmit_IT>
 80067c4:	e7dd      	b.n	8006782 <I2S_IRQHandler+0x8c>

080067c6 <I2S_DMAError>:
{
 80067c6:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80067ca:	6802      	ldr	r2, [r0, #0]
 80067cc:	6853      	ldr	r3, [r2, #4]
 80067ce:	f023 0303 	bic.w	r3, r3, #3
 80067d2:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80067d8:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 80067da:	2301      	movs	r3, #1
 80067dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80067e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067e2:	f043 0308 	orr.w	r3, r3, #8
 80067e6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80067e8:	f7ff ff84 	bl	80066f4 <HAL_I2S_ErrorCallback>
}
 80067ec:	bd08      	pop	{r3, pc}

080067ee <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80067ee:	4770      	bx	lr

080067f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80067f0:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80067f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067f4:	1c9a      	adds	r2, r3, #2
 80067f6:	6242      	str	r2, [r0, #36]	; 0x24
 80067f8:	6802      	ldr	r2, [r0, #0]
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80067fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006800:	3b01      	subs	r3, #1
 8006802:	b29b      	uxth	r3, r3
 8006804:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006806:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	b93b      	cbnz	r3, 800681c <I2SEx_TxISR_I2S+0x2c>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800680c:	6802      	ldr	r2, [r0, #0]
 800680e:	6853      	ldr	r3, [r2, #4]
 8006810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006814:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8006816:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006818:	b29b      	uxth	r3, r3
 800681a:	b103      	cbz	r3, 800681e <I2SEx_TxISR_I2S+0x2e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800681c:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 800681e:	2301      	movs	r3, #1
 8006820:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006824:	f7ff ffe3 	bl	80067ee <HAL_I2SEx_TxRxCpltCallback>
}
 8006828:	e7f8      	b.n	800681c <I2SEx_TxISR_I2S+0x2c>
	...

0800682c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800682c:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800682e:	6802      	ldr	r2, [r0, #0]
 8006830:	4b14      	ldr	r3, [pc, #80]	; (8006884 <I2SEx_RxISR_I2SExt+0x58>)
 8006832:	429a      	cmp	r2, r3
 8006834:	d01b      	beq.n	800686e <I2SEx_RxISR_I2SExt+0x42>
 8006836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800683e:	1c99      	adds	r1, r3, #2
 8006840:	62c1      	str	r1, [r0, #44]	; 0x2c
 8006842:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006844:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006846:	3b01      	subs	r3, #1
 8006848:	b29b      	uxth	r3, r3
 800684a:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800684c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800684e:	b29b      	uxth	r3, r3
 8006850:	b963      	cbnz	r3, 800686c <I2SEx_RxISR_I2SExt+0x40>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006852:	6802      	ldr	r2, [r0, #0]
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <I2SEx_RxISR_I2SExt+0x58>)
 8006856:	429a      	cmp	r2, r3
 8006858:	d00c      	beq.n	8006874 <I2SEx_RxISR_I2SExt+0x48>
 800685a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800685e:	6853      	ldr	r3, [r2, #4]
 8006860:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006864:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8006866:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	b12b      	cbz	r3, 8006878 <I2SEx_RxISR_I2SExt+0x4c>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800686c:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800686e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006872:	e7e2      	b.n	800683a <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006874:	4a04      	ldr	r2, [pc, #16]	; (8006888 <I2SEx_RxISR_I2SExt+0x5c>)
 8006876:	e7f2      	b.n	800685e <I2SEx_RxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8006878:	2301      	movs	r3, #1
 800687a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800687e:	f7ff ffb6 	bl	80067ee <HAL_I2SEx_TxRxCpltCallback>
}
 8006882:	e7f3      	b.n	800686c <I2SEx_RxISR_I2SExt+0x40>
 8006884:	40003800 	.word	0x40003800
 8006888:	40003400 	.word	0x40003400

0800688c <I2SEx_TxISR_I2SExt>:
{
 800688c:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800688e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006890:	1c9a      	adds	r2, r3, #2
 8006892:	6242      	str	r2, [r0, #36]	; 0x24
 8006894:	881a      	ldrh	r2, [r3, #0]
 8006896:	6801      	ldr	r1, [r0, #0]
 8006898:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <I2SEx_TxISR_I2SExt+0x58>)
 800689a:	4299      	cmp	r1, r3
 800689c:	d017      	beq.n	80068ce <I2SEx_TxISR_I2SExt+0x42>
 800689e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068a2:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80068a4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80068ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	b963      	cbnz	r3, 80068cc <I2SEx_TxISR_I2SExt+0x40>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068b2:	6802      	ldr	r2, [r0, #0]
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <I2SEx_TxISR_I2SExt+0x58>)
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d00c      	beq.n	80068d4 <I2SEx_TxISR_I2SExt+0x48>
 80068ba:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80068be:	6853      	ldr	r3, [r2, #4]
 80068c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068c4:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 80068c6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	b12b      	cbz	r3, 80068d8 <I2SEx_TxISR_I2SExt+0x4c>
}
 80068cc:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80068ce:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80068d2:	e7e6      	b.n	80068a2 <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <I2SEx_TxISR_I2SExt+0x5c>)
 80068d6:	e7f2      	b.n	80068be <I2SEx_TxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 80068d8:	2301      	movs	r3, #1
 80068da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068de:	f7ff ff86 	bl	80067ee <HAL_I2SEx_TxRxCpltCallback>
}
 80068e2:	e7f3      	b.n	80068cc <I2SEx_TxISR_I2SExt+0x40>
 80068e4:	40003800 	.word	0x40003800
 80068e8:	40003400 	.word	0x40003400

080068ec <I2SEx_RxISR_I2S>:
{
 80068ec:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80068ee:	6803      	ldr	r3, [r0, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80068f4:	1c99      	adds	r1, r3, #2
 80068f6:	62c1      	str	r1, [r0, #44]	; 0x2c
 80068f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068fa:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29b      	uxth	r3, r3
 8006900:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8006902:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006904:	b29b      	uxth	r3, r3
 8006906:	b93b      	cbnz	r3, 8006918 <I2SEx_RxISR_I2S+0x2c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006908:	6802      	ldr	r2, [r0, #0]
 800690a:	6853      	ldr	r3, [r2, #4]
 800690c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006910:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8006912:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006914:	b29b      	uxth	r3, r3
 8006916:	b103      	cbz	r3, 800691a <I2SEx_RxISR_I2S+0x2e>
}
 8006918:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 800691a:	2301      	movs	r3, #1
 800691c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006920:	f7ff ff65 	bl	80067ee <HAL_I2SEx_TxRxCpltCallback>
}
 8006924:	e7f8      	b.n	8006918 <I2SEx_RxISR_I2S+0x2c>
	...

08006928 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8006928:	b510      	push	{r4, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800692e:	6803      	ldr	r3, [r0, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006934:	4a70      	ldr	r2, [pc, #448]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d06f      	beq.n	8006a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 800693a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800693e:	6891      	ldr	r1, [r2, #8]
 8006940:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006946:	6853      	ldr	r3, [r2, #4]
 8006948:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800694a:	6863      	ldr	r3, [r4, #4]
 800694c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006950:	d001      	beq.n	8006956 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d170      	bne.n	8006a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006956:	9b05      	ldr	r3, [sp, #20]
 8006958:	f013 0f02 	tst.w	r3, #2
 800695c:	d003      	beq.n	8006966 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006964:	d15c      	bne.n	8006a20 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	f013 0f01 	tst.w	r3, #1
 800696c:	d003      	beq.n	8006976 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 800696e:	9b02      	ldr	r3, [sp, #8]
 8006970:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006974:	d158      	bne.n	8006a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006976:	9b04      	ldr	r3, [sp, #16]
 8006978:	f013 0f40 	tst.w	r3, #64	; 0x40
 800697c:	d024      	beq.n	80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 800697e:	9b02      	ldr	r3, [sp, #8]
 8006980:	f013 0f20 	tst.w	r3, #32
 8006984:	d020      	beq.n	80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006986:	6822      	ldr	r2, [r4, #0]
 8006988:	4b5b      	ldr	r3, [pc, #364]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800698a:	429a      	cmp	r2, r3
 800698c:	d050      	beq.n	8006a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 800698e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006992:	6853      	ldr	r3, [r2, #4]
 8006994:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006998:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	6853      	ldr	r3, [r2, #4]
 800699e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069a2:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80069a4:	2300      	movs	r3, #0
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	9200      	str	r2, [sp, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80069bc:	f043 0302 	orr.w	r3, r3, #2
 80069c0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80069c2:	4620      	mov	r0, r4
 80069c4:	f7ff fe96 	bl	80066f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069c8:	9b05      	ldr	r3, [sp, #20]
 80069ca:	f013 0f08 	tst.w	r3, #8
 80069ce:	d022      	beq.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	f013 0f20 	tst.w	r3, #32
 80069d6:	d01e      	beq.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	6853      	ldr	r3, [r2, #4]
 80069dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069e0:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	4b44      	ldr	r3, [pc, #272]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d024      	beq.n	8006a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80069ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80069ee:	6853      	ldr	r3, [r2, #4]
 80069f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80069f4:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069f6:	2300      	movs	r3, #0
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006a02:	2301      	movs	r3, #1
 8006a04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a0a:	f043 0304 	orr.w	r3, r3, #4
 8006a0e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006a10:	4620      	mov	r0, r4
 8006a12:	f7ff fe6f 	bl	80066f4 <HAL_I2S_ErrorCallback>
}
 8006a16:	b006      	add	sp, #24
 8006a18:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006a1a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006a1e:	e78e      	b.n	800693e <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8006a20:	4620      	mov	r0, r4
 8006a22:	f7ff fee5 	bl	80067f0 <I2SEx_TxISR_I2S>
 8006a26:	e79e      	b.n	8006966 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f7ff feff 	bl	800682c <I2SEx_RxISR_I2SExt>
 8006a2e:	e7a2      	b.n	8006976 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a30:	4a32      	ldr	r2, [pc, #200]	; (8006afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8006a32:	e7ae      	b.n	8006992 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a34:	4a31      	ldr	r2, [pc, #196]	; (8006afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8006a36:	e7da      	b.n	80069ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006a38:	9b04      	ldr	r3, [sp, #16]
 8006a3a:	f013 0f02 	tst.w	r3, #2
 8006a3e:	d003      	beq.n	8006a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8006a40:	9b02      	ldr	r3, [sp, #8]
 8006a42:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a46:	d14a      	bne.n	8006ade <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a48:	9b05      	ldr	r3, [sp, #20]
 8006a4a:	f013 0f01 	tst.w	r3, #1
 8006a4e:	d003      	beq.n	8006a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a56:	d146      	bne.n	8006ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a58:	9b05      	ldr	r3, [sp, #20]
 8006a5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a5e:	d01c      	beq.n	8006a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	f013 0f20 	tst.w	r3, #32
 8006a66:	d018      	beq.n	8006a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	6853      	ldr	r3, [r2, #4]
 8006a6c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006a70:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d039      	beq.n	8006aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8006a7a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006a7e:	6853      	ldr	r3, [r2, #4]
 8006a80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a84:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a8e:	f043 0302 	orr.w	r3, r3, #2
 8006a92:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff fe2d 	bl	80066f4 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a9a:	9b04      	ldr	r3, [sp, #16]
 8006a9c:	f013 0f08 	tst.w	r3, #8
 8006aa0:	d0b9      	beq.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	f013 0f20 	tst.w	r3, #32
 8006aa8:	d0b5      	beq.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d01f      	beq.n	8006af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8006ab2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006ab6:	6853      	ldr	r3, [r2, #4]
 8006ab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006abc:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	6853      	ldr	r3, [r2, #4]
 8006ac2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006ac6:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006ace:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ad0:	f043 0304 	orr.w	r3, r3, #4
 8006ad4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f7ff fe0c 	bl	80066f4 <HAL_I2S_ErrorCallback>
}
 8006adc:	e79b      	b.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff fed4 	bl	800688c <I2SEx_TxISR_I2SExt>
 8006ae4:	e7b0      	b.n	8006a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7ff ff00 	bl	80068ec <I2SEx_RxISR_I2S>
 8006aec:	e7b4      	b.n	8006a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aee:	4a03      	ldr	r2, [pc, #12]	; (8006afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8006af0:	e7c5      	b.n	8006a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006af2:	4a02      	ldr	r2, [pc, #8]	; (8006afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8006af4:	e7df      	b.n	8006ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8006af6:	bf00      	nop
 8006af8:	40003800 	.word	0x40003800
 8006afc:	40003400 	.word	0x40003400

08006b00 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f000 81e4 	beq.w	8006ece <HAL_RCC_OscConfig+0x3ce>
{
 8006b06:	b570      	push	{r4, r5, r6, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b0c:	6803      	ldr	r3, [r0, #0]
 8006b0e:	f013 0f01 	tst.w	r3, #1
 8006b12:	d03b      	beq.n	8006b8c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b14:	4ba7      	ldr	r3, [pc, #668]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 030c 	and.w	r3, r3, #12
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d02c      	beq.n	8006b7a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b20:	4ba4      	ldr	r3, [pc, #656]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d021      	beq.n	8006b70 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b32:	d04f      	beq.n	8006bd4 <HAL_RCC_OscConfig+0xd4>
 8006b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b38:	d052      	beq.n	8006be0 <HAL_RCC_OscConfig+0xe0>
 8006b3a:	4b9e      	ldr	r3, [pc, #632]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d050      	beq.n	8006bf4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b52:	f7fe fb37 	bl	80051c4 <HAL_GetTick>
 8006b56:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b58:	4b96      	ldr	r3, [pc, #600]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b60:	d114      	bne.n	8006b8c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b62:	f7fe fb2f 	bl	80051c4 <HAL_GetTick>
 8006b66:	1b40      	subs	r0, r0, r5
 8006b68:	2864      	cmp	r0, #100	; 0x64
 8006b6a:	d9f5      	bls.n	8006b58 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8006b6c:	2003      	movs	r0, #3
 8006b6e:	e1b3      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b70:	4b90      	ldr	r3, [pc, #576]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006b78:	d0d8      	beq.n	8006b2c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7a:	4b8e      	ldr	r3, [pc, #568]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b82:	d003      	beq.n	8006b8c <HAL_RCC_OscConfig+0x8c>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 81a3 	beq.w	8006ed2 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	f013 0f02 	tst.w	r3, #2
 8006b92:	d055      	beq.n	8006c40 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b94:	4b87      	ldr	r3, [pc, #540]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f013 0f0c 	tst.w	r3, #12
 8006b9c:	d03e      	beq.n	8006c1c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b9e:	4b85      	ldr	r3, [pc, #532]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d033      	beq.n	8006c12 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d068      	beq.n	8006c82 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bb0:	4b81      	ldr	r3, [pc, #516]	; (8006db8 <HAL_RCC_OscConfig+0x2b8>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb6:	f7fe fb05 	bl	80051c4 <HAL_GetTick>
 8006bba:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bbc:	4b7d      	ldr	r3, [pc, #500]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f013 0f02 	tst.w	r3, #2
 8006bc4:	d154      	bne.n	8006c70 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc6:	f7fe fafd 	bl	80051c4 <HAL_GetTick>
 8006bca:	1b40      	subs	r0, r0, r5
 8006bcc:	2802      	cmp	r0, #2
 8006bce:	d9f5      	bls.n	8006bbc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006bd0:	2003      	movs	r0, #3
 8006bd2:	e181      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bd4:	4a77      	ldr	r2, [pc, #476]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006bd6:	6813      	ldr	r3, [r2, #0]
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e7b5      	b.n	8006b4c <HAL_RCC_OscConfig+0x4c>
 8006be0:	4b74      	ldr	r3, [pc, #464]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e7ab      	b.n	8006b4c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006bf4:	f7fe fae6 	bl	80051c4 <HAL_GetTick>
 8006bf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfa:	4b6e      	ldr	r3, [pc, #440]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006c02:	d0c3      	beq.n	8006b8c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c04:	f7fe fade 	bl	80051c4 <HAL_GetTick>
 8006c08:	1b40      	subs	r0, r0, r5
 8006c0a:	2864      	cmp	r0, #100	; 0x64
 8006c0c:	d9f5      	bls.n	8006bfa <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8006c0e:	2003      	movs	r0, #3
 8006c10:	e162      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c12:	4b68      	ldr	r3, [pc, #416]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006c1a:	d1c6      	bne.n	8006baa <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1c:	4b65      	ldr	r3, [pc, #404]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f013 0f02 	tst.w	r3, #2
 8006c24:	d004      	beq.n	8006c30 <HAL_RCC_OscConfig+0x130>
 8006c26:	68e3      	ldr	r3, [r4, #12]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	e153      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c30:	4a60      	ldr	r2, [pc, #384]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006c32:	6813      	ldr	r3, [r2, #0]
 8006c34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006c38:	6921      	ldr	r1, [r4, #16]
 8006c3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006c3e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	f013 0f08 	tst.w	r3, #8
 8006c46:	d040      	beq.n	8006cca <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c48:	6963      	ldr	r3, [r4, #20]
 8006c4a:	b363      	cbz	r3, 8006ca6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c4c:	4b5b      	ldr	r3, [pc, #364]	; (8006dbc <HAL_RCC_OscConfig+0x2bc>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c52:	f7fe fab7 	bl	80051c4 <HAL_GetTick>
 8006c56:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c58:	4b56      	ldr	r3, [pc, #344]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5c:	f013 0f02 	tst.w	r3, #2
 8006c60:	d133      	bne.n	8006cca <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c62:	f7fe faaf 	bl	80051c4 <HAL_GetTick>
 8006c66:	1b40      	subs	r0, r0, r5
 8006c68:	2802      	cmp	r0, #2
 8006c6a:	d9f5      	bls.n	8006c58 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8006c6c:	2003      	movs	r0, #3
 8006c6e:	e133      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c70:	4a50      	ldr	r2, [pc, #320]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006c78:	6921      	ldr	r1, [r4, #16]
 8006c7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e7de      	b.n	8006c40 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8006c82:	4b4d      	ldr	r3, [pc, #308]	; (8006db8 <HAL_RCC_OscConfig+0x2b8>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006c88:	f7fe fa9c 	bl	80051c4 <HAL_GetTick>
 8006c8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c8e:	4b49      	ldr	r3, [pc, #292]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f013 0f02 	tst.w	r3, #2
 8006c96:	d0d3      	beq.n	8006c40 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c98:	f7fe fa94 	bl	80051c4 <HAL_GetTick>
 8006c9c:	1b40      	subs	r0, r0, r5
 8006c9e:	2802      	cmp	r0, #2
 8006ca0:	d9f5      	bls.n	8006c8e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8006ca2:	2003      	movs	r0, #3
 8006ca4:	e118      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ca6:	4b45      	ldr	r3, [pc, #276]	; (8006dbc <HAL_RCC_OscConfig+0x2bc>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cac:	f7fe fa8a 	bl	80051c4 <HAL_GetTick>
 8006cb0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb2:	4b40      	ldr	r3, [pc, #256]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb6:	f013 0f02 	tst.w	r3, #2
 8006cba:	d006      	beq.n	8006cca <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cbc:	f7fe fa82 	bl	80051c4 <HAL_GetTick>
 8006cc0:	1b40      	subs	r0, r0, r5
 8006cc2:	2802      	cmp	r0, #2
 8006cc4:	d9f5      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8006cc6:	2003      	movs	r0, #3
 8006cc8:	e106      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	f013 0f04 	tst.w	r3, #4
 8006cd0:	d079      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd2:	4b38      	ldr	r3, [pc, #224]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006cda:	d133      	bne.n	8006d44 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	4b34      	ldr	r3, [pc, #208]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006cf4:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf6:	4b32      	ldr	r3, [pc, #200]	; (8006dc0 <HAL_RCC_OscConfig+0x2c0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006cfe:	d023      	beq.n	8006d48 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d00:	68a3      	ldr	r3, [r4, #8]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d034      	beq.n	8006d70 <HAL_RCC_OscConfig+0x270>
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d038      	beq.n	8006d7c <HAL_RCC_OscConfig+0x27c>
 8006d0a:	4b2a      	ldr	r3, [pc, #168]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006d0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d0e:	f022 0201 	bic.w	r2, r2, #1
 8006d12:	671a      	str	r2, [r3, #112]	; 0x70
 8006d14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d16:	f022 0204 	bic.w	r2, r2, #4
 8006d1a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d1c:	68a3      	ldr	r3, [r4, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d036      	beq.n	8006d90 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d22:	f7fe fa4f 	bl	80051c4 <HAL_GetTick>
 8006d26:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d28:	4b22      	ldr	r3, [pc, #136]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2c:	f013 0f02 	tst.w	r3, #2
 8006d30:	d148      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d32:	f7fe fa47 	bl	80051c4 <HAL_GetTick>
 8006d36:	1b80      	subs	r0, r0, r6
 8006d38:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d3c:	4298      	cmp	r0, r3
 8006d3e:	d9f3      	bls.n	8006d28 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8006d40:	2003      	movs	r0, #3
 8006d42:	e0c9      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 8006d44:	2500      	movs	r5, #0
 8006d46:	e7d6      	b.n	8006cf6 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d48:	4a1d      	ldr	r2, [pc, #116]	; (8006dc0 <HAL_RCC_OscConfig+0x2c0>)
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d50:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006d52:	f7fe fa37 	bl	80051c4 <HAL_GetTick>
 8006d56:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d58:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <HAL_RCC_OscConfig+0x2c0>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d60:	d1ce      	bne.n	8006d00 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d62:	f7fe fa2f 	bl	80051c4 <HAL_GetTick>
 8006d66:	1b80      	subs	r0, r0, r6
 8006d68:	2802      	cmp	r0, #2
 8006d6a:	d9f5      	bls.n	8006d58 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8006d6c:	2003      	movs	r0, #3
 8006d6e:	e0b3      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d70:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006d72:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006d74:	f043 0301 	orr.w	r3, r3, #1
 8006d78:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7a:	e7cf      	b.n	8006d1c <HAL_RCC_OscConfig+0x21c>
 8006d7c:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d80:	f042 0204 	orr.w	r2, r2, #4
 8006d84:	671a      	str	r2, [r3, #112]	; 0x70
 8006d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d88:	f042 0201 	orr.w	r2, r2, #1
 8006d8c:	671a      	str	r2, [r3, #112]	; 0x70
 8006d8e:	e7c5      	b.n	8006d1c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d90:	f7fe fa18 	bl	80051c4 <HAL_GetTick>
 8006d94:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	f013 0f02 	tst.w	r3, #2
 8006d9e:	d011      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006da0:	f7fe fa10 	bl	80051c4 <HAL_GetTick>
 8006da4:	1b80      	subs	r0, r0, r6
 8006da6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006daa:	4298      	cmp	r0, r3
 8006dac:	d9f3      	bls.n	8006d96 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8006dae:	2003      	movs	r0, #3
 8006db0:	e092      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
 8006db2:	bf00      	nop
 8006db4:	40023800 	.word	0x40023800
 8006db8:	42470000 	.word	0x42470000
 8006dbc:	42470e80 	.word	0x42470e80
 8006dc0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc4:	b9ed      	cbnz	r5, 8006e02 <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dc6:	69a3      	ldr	r3, [r4, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8084 	beq.w	8006ed6 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dce:	4a45      	ldr	r2, [pc, #276]	; (8006ee4 <HAL_RCC_OscConfig+0x3e4>)
 8006dd0:	6892      	ldr	r2, [r2, #8]
 8006dd2:	f002 020c 	and.w	r2, r2, #12
 8006dd6:	2a08      	cmp	r2, #8
 8006dd8:	d051      	beq.n	8006e7e <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d017      	beq.n	8006e0e <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dde:	4b42      	ldr	r3, [pc, #264]	; (8006ee8 <HAL_RCC_OscConfig+0x3e8>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de4:	f7fe f9ee 	bl	80051c4 <HAL_GetTick>
 8006de8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dea:	4b3e      	ldr	r3, [pc, #248]	; (8006ee4 <HAL_RCC_OscConfig+0x3e4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006df2:	d042      	beq.n	8006e7a <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df4:	f7fe f9e6 	bl	80051c4 <HAL_GetTick>
 8006df8:	1b00      	subs	r0, r0, r4
 8006dfa:	2802      	cmp	r0, #2
 8006dfc:	d9f5      	bls.n	8006dea <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8006dfe:	2003      	movs	r0, #3
 8006e00:	e06a      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e02:	4a38      	ldr	r2, [pc, #224]	; (8006ee4 <HAL_RCC_OscConfig+0x3e4>)
 8006e04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e0c:	e7db      	b.n	8006dc6 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8006e0e:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <HAL_RCC_OscConfig+0x3e8>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e14:	f7fe f9d6 	bl	80051c4 <HAL_GetTick>
 8006e18:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e1a:	4b32      	ldr	r3, [pc, #200]	; (8006ee4 <HAL_RCC_OscConfig+0x3e4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e22:	d006      	beq.n	8006e32 <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e24:	f7fe f9ce 	bl	80051c4 <HAL_GetTick>
 8006e28:	1b40      	subs	r0, r0, r5
 8006e2a:	2802      	cmp	r0, #2
 8006e2c:	d9f5      	bls.n	8006e1a <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8006e2e:	2003      	movs	r0, #3
 8006e30:	e052      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e32:	69e3      	ldr	r3, [r4, #28]
 8006e34:	6a22      	ldr	r2, [r4, #32]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e3a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006e3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e40:	0852      	lsrs	r2, r2, #1
 8006e42:	3a01      	subs	r2, #1
 8006e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006e4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006e4e:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <HAL_RCC_OscConfig+0x3e4>)
 8006e50:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006e52:	4b25      	ldr	r3, [pc, #148]	; (8006ee8 <HAL_RCC_OscConfig+0x3e8>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e58:	f7fe f9b4 	bl	80051c4 <HAL_GetTick>
 8006e5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <HAL_RCC_OscConfig+0x3e4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e66:	d106      	bne.n	8006e76 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fe f9ac 	bl	80051c4 <HAL_GetTick>
 8006e6c:	1b00      	subs	r0, r0, r4
 8006e6e:	2802      	cmp	r0, #2
 8006e70:	d9f5      	bls.n	8006e5e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8006e72:	2003      	movs	r0, #3
 8006e74:	e030      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006e76:	2000      	movs	r0, #0
 8006e78:	e02e      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	e02c      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d02c      	beq.n	8006edc <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8006e82:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <HAL_RCC_OscConfig+0x3e4>)
 8006e84:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e86:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8006e8a:	69e2      	ldr	r2, [r4, #28]
 8006e8c:	4291      	cmp	r1, r2
 8006e8e:	d001      	beq.n	8006e94 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8006e90:	2001      	movs	r0, #1
 8006e92:	e021      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e98:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9a:	428a      	cmp	r2, r1
 8006e9c:	d001      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	e01a      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ea4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006ea8:	401a      	ands	r2, r3
 8006eaa:	428a      	cmp	r2, r1
 8006eac:	d001      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8006eae:	2001      	movs	r0, #1
 8006eb0:	e012      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006eb6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006eb8:	428a      	cmp	r2, r1
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	e00b      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006ec0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006ec4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00a      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8006eca:	2001      	movs	r0, #1
 8006ecc:	e004      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8006ece:	2001      	movs	r0, #1
}
 8006ed0:	4770      	bx	lr
        return HAL_ERROR;
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	e000      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8006ed6:	2000      	movs	r0, #0
}
 8006ed8:	b002      	add	sp, #8
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006edc:	2001      	movs	r0, #1
 8006ede:	e7fb      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	e7f9      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	42470060 	.word	0x42470060

08006eec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eec:	4b26      	ldr	r3, [pc, #152]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 030c 	and.w	r3, r3, #12
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d044      	beq.n	8006f82 <HAL_RCC_GetSysClockFreq+0x96>
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d001      	beq.n	8006f00 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006efc:	4823      	ldr	r0, [pc, #140]	; (8006f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006efe:	4770      	bx	lr
{
 8006f00:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f04:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006f12:	d013      	beq.n	8006f3c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f14:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f16:	6859      	ldr	r1, [r3, #4]
 8006f18:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	481c      	ldr	r0, [pc, #112]	; (8006f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006f20:	fba1 0100 	umull	r0, r1, r1, r0
 8006f24:	f7f9 fdf6 	bl	8000b14 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f28:	4b17      	ldr	r3, [pc, #92]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006f30:	3301      	adds	r3, #1
 8006f32:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006f34:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006f38:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f3c:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006f44:	461e      	mov	r6, r3
 8006f46:	2700      	movs	r7, #0
 8006f48:	015c      	lsls	r4, r3, #5
 8006f4a:	2500      	movs	r5, #0
 8006f4c:	1ae4      	subs	r4, r4, r3
 8006f4e:	eb65 0507 	sbc.w	r5, r5, r7
 8006f52:	01a9      	lsls	r1, r5, #6
 8006f54:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8006f58:	01a0      	lsls	r0, r4, #6
 8006f5a:	1b00      	subs	r0, r0, r4
 8006f5c:	eb61 0105 	sbc.w	r1, r1, r5
 8006f60:	00cb      	lsls	r3, r1, #3
 8006f62:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006f66:	00c4      	lsls	r4, r0, #3
 8006f68:	19a0      	adds	r0, r4, r6
 8006f6a:	eb43 0107 	adc.w	r1, r3, r7
 8006f6e:	028b      	lsls	r3, r1, #10
 8006f70:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8006f74:	0284      	lsls	r4, r0, #10
 8006f76:	4620      	mov	r0, r4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f7f9 fdca 	bl	8000b14 <__aeabi_uldivmod>
 8006f80:	e7d2      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8006f82:	4803      	ldr	r0, [pc, #12]	; (8006f90 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	00f42400 	.word	0x00f42400
 8006f90:	017d7840 	.word	0x017d7840

08006f94 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f000 809e 	beq.w	80070d6 <HAL_RCC_ClockConfig+0x142>
{
 8006f9a:	b570      	push	{r4, r5, r6, lr}
 8006f9c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f9e:	4b50      	ldr	r3, [pc, #320]	; (80070e0 <HAL_RCC_ClockConfig+0x14c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	428b      	cmp	r3, r1
 8006fa8:	d209      	bcs.n	8006fbe <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006faa:	b2cb      	uxtb	r3, r1
 8006fac:	4a4c      	ldr	r2, [pc, #304]	; (80070e0 <HAL_RCC_ClockConfig+0x14c>)
 8006fae:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb0:	6813      	ldr	r3, [r2, #0]
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	428b      	cmp	r3, r1
 8006fb8:	d001      	beq.n	8006fbe <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8006fba:	2001      	movs	r0, #1
}
 8006fbc:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	f013 0f02 	tst.w	r3, #2
 8006fc4:	d017      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc6:	f013 0f04 	tst.w	r3, #4
 8006fca:	d004      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fcc:	4a45      	ldr	r2, [pc, #276]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 8006fce:	6893      	ldr	r3, [r2, #8]
 8006fd0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fd4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	f013 0f08 	tst.w	r3, #8
 8006fdc:	d004      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fde:	4a41      	ldr	r2, [pc, #260]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 8006fe0:	6893      	ldr	r3, [r2, #8]
 8006fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fe6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fe8:	4a3e      	ldr	r2, [pc, #248]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 8006fea:	6893      	ldr	r3, [r2, #8]
 8006fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ff0:	68a0      	ldr	r0, [r4, #8]
 8006ff2:	4303      	orrs	r3, r0
 8006ff4:	6093      	str	r3, [r2, #8]
 8006ff6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	f013 0f01 	tst.w	r3, #1
 8006ffe:	d032      	beq.n	8007066 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007000:	6863      	ldr	r3, [r4, #4]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d021      	beq.n	800704a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007006:	1e9a      	subs	r2, r3, #2
 8007008:	2a01      	cmp	r2, #1
 800700a:	d925      	bls.n	8007058 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700c:	4a35      	ldr	r2, [pc, #212]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	f012 0f02 	tst.w	r2, #2
 8007014:	d061      	beq.n	80070da <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007016:	4933      	ldr	r1, [pc, #204]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 8007018:	688a      	ldr	r2, [r1, #8]
 800701a:	f022 0203 	bic.w	r2, r2, #3
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8007022:	f7fe f8cf 	bl	80051c4 <HAL_GetTick>
 8007026:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007028:	4b2e      	ldr	r3, [pc, #184]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 030c 	and.w	r3, r3, #12
 8007030:	6862      	ldr	r2, [r4, #4]
 8007032:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007036:	d016      	beq.n	8007066 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007038:	f7fe f8c4 	bl	80051c4 <HAL_GetTick>
 800703c:	1b80      	subs	r0, r0, r6
 800703e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007042:	4298      	cmp	r0, r3
 8007044:	d9f0      	bls.n	8007028 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8007046:	2003      	movs	r0, #3
 8007048:	e7b8      	b.n	8006fbc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704a:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007052:	d1e0      	bne.n	8007016 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8007054:	2001      	movs	r0, #1
 8007056:	e7b1      	b.n	8006fbc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007058:	4a22      	ldr	r2, [pc, #136]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007060:	d1d9      	bne.n	8007016 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8007062:	2001      	movs	r0, #1
 8007064:	e7aa      	b.n	8006fbc <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007066:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <HAL_RCC_ClockConfig+0x14c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	42ab      	cmp	r3, r5
 8007070:	d909      	bls.n	8007086 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	b2ea      	uxtb	r2, r5
 8007074:	4b1a      	ldr	r3, [pc, #104]	; (80070e0 <HAL_RCC_ClockConfig+0x14c>)
 8007076:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	42ab      	cmp	r3, r5
 8007080:	d001      	beq.n	8007086 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8007082:	2001      	movs	r0, #1
 8007084:	e79a      	b.n	8006fbc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f013 0f04 	tst.w	r3, #4
 800708c:	d006      	beq.n	800709c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800708e:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 8007090:	6893      	ldr	r3, [r2, #8]
 8007092:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007096:	68e1      	ldr	r1, [r4, #12]
 8007098:	430b      	orrs	r3, r1
 800709a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	f013 0f08 	tst.w	r3, #8
 80070a2:	d007      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070a4:	4a0f      	ldr	r2, [pc, #60]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 80070a6:	6893      	ldr	r3, [r2, #8]
 80070a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80070ac:	6921      	ldr	r1, [r4, #16]
 80070ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80070b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070b4:	f7ff ff1a 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <HAL_RCC_ClockConfig+0x150>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80070c0:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <HAL_RCC_ClockConfig+0x154>)
 80070c2:	5cd3      	ldrb	r3, [r2, r3]
 80070c4:	40d8      	lsrs	r0, r3
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCC_ClockConfig+0x158>)
 80070c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80070ca:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_RCC_ClockConfig+0x15c>)
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	f7fe f82d 	bl	800512c <HAL_InitTick>
  return HAL_OK;
 80070d2:	2000      	movs	r0, #0
 80070d4:	e772      	b.n	8006fbc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80070d6:	2001      	movs	r0, #1
}
 80070d8:	4770      	bx	lr
        return HAL_ERROR;
 80070da:	2001      	movs	r0, #1
 80070dc:	e76e      	b.n	8006fbc <HAL_RCC_ClockConfig+0x28>
 80070de:	bf00      	nop
 80070e0:	40023c00 	.word	0x40023c00
 80070e4:	40023800 	.word	0x40023800
 80070e8:	080174f4 	.word	0x080174f4
 80070ec:	2000000c 	.word	0x2000000c
 80070f0:	20000014 	.word	0x20000014

080070f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80070f4:	4b01      	ldr	r3, [pc, #4]	; (80070fc <HAL_RCC_GetHCLKFreq+0x8>)
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	2000000c 	.word	0x2000000c

08007100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007100:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007102:	f7ff fff7 	bl	80070f4 <HAL_RCC_GetHCLKFreq>
 8007106:	4b04      	ldr	r3, [pc, #16]	; (8007118 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800710e:	4a03      	ldr	r2, [pc, #12]	; (800711c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007110:	5cd3      	ldrb	r3, [r2, r3]
}
 8007112:	40d8      	lsrs	r0, r3
 8007114:	bd08      	pop	{r3, pc}
 8007116:	bf00      	nop
 8007118:	40023800 	.word	0x40023800
 800711c:	08017504 	.word	0x08017504

08007120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007120:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007122:	f7ff ffe7 	bl	80070f4 <HAL_RCC_GetHCLKFreq>
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800712e:	4a03      	ldr	r2, [pc, #12]	; (800713c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007130:	5cd3      	ldrb	r3, [r2, r3]
}
 8007132:	40d8      	lsrs	r0, r3
 8007134:	bd08      	pop	{r3, pc}
 8007136:	bf00      	nop
 8007138:	40023800 	.word	0x40023800
 800713c:	08017504 	.word	0x08017504

08007140 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007140:	b530      	push	{r4, r5, lr}
 8007142:	b083      	sub	sp, #12
 8007144:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007146:	6803      	ldr	r3, [r0, #0]
 8007148:	f013 0f05 	tst.w	r3, #5
 800714c:	d106      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	f013 0f02 	tst.w	r3, #2
 8007154:	d12e      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007156:	2000      	movs	r0, #0
}
 8007158:	b003      	add	sp, #12
 800715a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800715c:	4b49      	ldr	r3, [pc, #292]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007162:	f7fe f82f 	bl	80051c4 <HAL_GetTick>
 8007166:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007168:	4b47      	ldr	r3, [pc, #284]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007170:	d006      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007172:	f7fe f827 	bl	80051c4 <HAL_GetTick>
 8007176:	1b40      	subs	r0, r0, r5
 8007178:	2802      	cmp	r0, #2
 800717a:	d9f5      	bls.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 800717c:	2003      	movs	r0, #3
 800717e:	e7eb      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007180:	6862      	ldr	r2, [r4, #4]
 8007182:	68a3      	ldr	r3, [r4, #8]
 8007184:	071b      	lsls	r3, r3, #28
 8007186:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800718a:	4a3f      	ldr	r2, [pc, #252]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800718c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007190:	4b3c      	ldr	r3, [pc, #240]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007196:	f7fe f815 	bl	80051c4 <HAL_GetTick>
 800719a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800719c:	4b3a      	ldr	r3, [pc, #232]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80071a4:	d1d3      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071a6:	f7fe f80d 	bl	80051c4 <HAL_GetTick>
 80071aa:	1b40      	subs	r0, r0, r5
 80071ac:	2802      	cmp	r0, #2
 80071ae:	d9f5      	bls.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 80071b0:	2003      	movs	r0, #3
 80071b2:	e7d1      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 80071b4:	2300      	movs	r3, #0
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	4b33      	ldr	r3, [pc, #204]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80071ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80071cc:	4a2f      	ldr	r2, [pc, #188]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80071d6:	f7fd fff5 	bl	80051c4 <HAL_GetTick>
 80071da:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071dc:	4b2b      	ldr	r3, [pc, #172]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80071e4:	d106      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071e6:	f7fd ffed 	bl	80051c4 <HAL_GetTick>
 80071ea:	1b40      	subs	r0, r0, r5
 80071ec:	2802      	cmp	r0, #2
 80071ee:	d9f5      	bls.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 80071f0:	2003      	movs	r0, #3
 80071f2:	e7b1      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071f4:	4b24      	ldr	r3, [pc, #144]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071f8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80071fc:	d012      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80071fe:	68e2      	ldr	r2, [r4, #12]
 8007200:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007204:	429a      	cmp	r2, r3
 8007206:	d00d      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007208:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800720a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800720c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007210:	491f      	ldr	r1, [pc, #124]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007212:	2001      	movs	r0, #1
 8007214:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007216:	2000      	movs	r0, #0
 8007218:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800721a:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721e:	f013 0f01 	tst.w	r3, #1
 8007222:	d113      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007224:	68e3      	ldr	r3, [r4, #12]
 8007226:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800722a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800722e:	d01e      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8007230:	4a15      	ldr	r2, [pc, #84]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8007232:	6893      	ldr	r3, [r2, #8]
 8007234:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007238:	6093      	str	r3, [r2, #8]
 800723a:	4913      	ldr	r1, [pc, #76]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800723c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800723e:	68e2      	ldr	r2, [r4, #12]
 8007240:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007244:	4313      	orrs	r3, r2
 8007246:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 8007248:	2000      	movs	r0, #0
 800724a:	e785      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 800724c:	f7fd ffba 	bl	80051c4 <HAL_GetTick>
 8007250:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007252:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007256:	f013 0f02 	tst.w	r3, #2
 800725a:	d1e3      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800725c:	f7fd ffb2 	bl	80051c4 <HAL_GetTick>
 8007260:	1b40      	subs	r0, r0, r5
 8007262:	f241 3388 	movw	r3, #5000	; 0x1388
 8007266:	4298      	cmp	r0, r3
 8007268:	d9f3      	bls.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 800726a:	2003      	movs	r0, #3
 800726c:	e774      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800726e:	4906      	ldr	r1, [pc, #24]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8007270:	688a      	ldr	r2, [r1, #8]
 8007272:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007276:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800727a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727e:	4313      	orrs	r3, r2
 8007280:	608b      	str	r3, [r1, #8]
 8007282:	e7da      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007284:	42470068 	.word	0x42470068
 8007288:	40023800 	.word	0x40023800
 800728c:	40007000 	.word	0x40007000
 8007290:	42470e40 	.word	0x42470e40

08007294 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8007294:	2801      	cmp	r0, #1
 8007296:	d12a      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007298:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800729a:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 800729c:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 80072a0:	d003      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d125      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80072a6:	4815      	ldr	r0, [pc, #84]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 80072a8:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80072aa:	4b13      	ldr	r3, [pc, #76]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80072b2:	d014      	beq.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072b4:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072bc:	4810      	ldr	r0, [pc, #64]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 80072be:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80072c2:	4a0d      	ldr	r2, [pc, #52]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 80072c4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 80072c8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80072cc:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80072d0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 80072d4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80072d8:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 80072dc:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072de:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072e6:	4807      	ldr	r0, [pc, #28]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 80072e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80072ec:	e7e9      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t frequency = 0U;
 80072ee:	2000      	movs	r0, #0
 80072f0:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80072f2:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	40023800 	.word	0x40023800
 80072fc:	00bb8000 	.word	0x00bb8000
 8007300:	017d7840 	.word	0x017d7840
 8007304:	00f42400 	.word	0x00f42400

08007308 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007308:	b198      	cbz	r0, 8007332 <HAL_RNG_Init+0x2a>
{
 800730a:	b510      	push	{r4, lr}
 800730c:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800730e:	7943      	ldrb	r3, [r0, #5]
 8007310:	b15b      	cbz	r3, 800732a <HAL_RNG_Init+0x22>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007312:	2302      	movs	r3, #2
 8007314:	7163      	strb	r3, [r4, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007316:	6822      	ldr	r2, [r4, #0]
 8007318:	6813      	ldr	r3, [r2, #0]
 800731a:	f043 0304 	orr.w	r3, r3, #4
 800731e:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007320:	2301      	movs	r3, #1
 8007322:	7163      	strb	r3, [r4, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007324:	2000      	movs	r0, #0
 8007326:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 8007328:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 800732a:	7103      	strb	r3, [r0, #4]
    HAL_RNG_MspInit(hrng);
 800732c:	f7fd fd50 	bl	8004dd0 <HAL_RNG_MspInit>
 8007330:	e7ef      	b.n	8007312 <HAL_RNG_Init+0xa>
    return HAL_ERROR;
 8007332:	2001      	movs	r0, #1
}
 8007334:	4770      	bx	lr
	...

08007338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007338:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800733c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800733e:	6802      	ldr	r2, [r0, #0]
 8007340:	6913      	ldr	r3, [r2, #16]
 8007342:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007346:	68c1      	ldr	r1, [r0, #12]
 8007348:	430b      	orrs	r3, r1
 800734a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800734c:	6883      	ldr	r3, [r0, #8]
 800734e:	6902      	ldr	r2, [r0, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	6942      	ldr	r2, [r0, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	69c2      	ldr	r2, [r0, #28]
 8007358:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800735a:	6801      	ldr	r1, [r0, #0]
 800735c:	68cb      	ldr	r3, [r1, #12]
 800735e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007362:	f023 030c 	bic.w	r3, r3, #12
 8007366:	4313      	orrs	r3, r2
 8007368:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800736a:	6802      	ldr	r2, [r0, #0]
 800736c:	6953      	ldr	r3, [r2, #20]
 800736e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007372:	6981      	ldr	r1, [r0, #24]
 8007374:	430b      	orrs	r3, r1
 8007376:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007378:	69c3      	ldr	r3, [r0, #28]
 800737a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737e:	d03b      	beq.n	80073f8 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007380:	6803      	ldr	r3, [r0, #0]
 8007382:	4a71      	ldr	r2, [pc, #452]	; (8007548 <UART_SetConfig+0x210>)
 8007384:	4293      	cmp	r3, r2
 8007386:	f000 80ab 	beq.w	80074e0 <UART_SetConfig+0x1a8>
 800738a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800738e:	4293      	cmp	r3, r2
 8007390:	f000 80a6 	beq.w	80074e0 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007394:	f7ff feb4 	bl	8007100 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007398:	f04f 0900 	mov.w	r9, #0
 800739c:	1806      	adds	r6, r0, r0
 800739e:	eb49 0709 	adc.w	r7, r9, r9
 80073a2:	eb16 0b00 	adds.w	fp, r6, r0
 80073a6:	eb47 0c09 	adc.w	ip, r7, r9
 80073aa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80073ae:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80073b2:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80073b6:	4693      	mov	fp, r2
 80073b8:	469c      	mov	ip, r3
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	009a      	lsls	r2, r3, #2
 80073be:	0f9b      	lsrs	r3, r3, #30
 80073c0:	eb10 000b 	adds.w	r0, r0, fp
 80073c4:	eb49 010c 	adc.w	r1, r9, ip
 80073c8:	f7f9 fba4 	bl	8000b14 <__aeabi_uldivmod>
 80073cc:	4d5f      	ldr	r5, [pc, #380]	; (800754c <UART_SetConfig+0x214>)
 80073ce:	fba5 3200 	umull	r3, r2, r5, r0
 80073d2:	0951      	lsrs	r1, r2, #5
 80073d4:	2264      	movs	r2, #100	; 0x64
 80073d6:	fb02 0211 	mls	r2, r2, r1, r0
 80073da:	0113      	lsls	r3, r2, #4
 80073dc:	3332      	adds	r3, #50	; 0x32
 80073de:	fba5 2303 	umull	r2, r3, r5, r3
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	6821      	ldr	r1, [r4, #0]
 80073f2:	4413      	add	r3, r2
 80073f4:	608b      	str	r3, [r1, #8]
    }
  }
}
 80073f6:	e0a4      	b.n	8007542 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073f8:	6803      	ldr	r3, [r0, #0]
 80073fa:	4a53      	ldr	r2, [pc, #332]	; (8007548 <UART_SetConfig+0x210>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d039      	beq.n	8007474 <UART_SetConfig+0x13c>
 8007400:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007404:	4293      	cmp	r3, r2
 8007406:	d035      	beq.n	8007474 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007408:	f7ff fe7a 	bl	8007100 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800740c:	4683      	mov	fp, r0
 800740e:	f04f 0c00 	mov.w	ip, #0
 8007412:	1806      	adds	r6, r0, r0
 8007414:	eb4c 070c 	adc.w	r7, ip, ip
 8007418:	eb16 0800 	adds.w	r8, r6, r0
 800741c:	eb47 090c 	adc.w	r9, r7, ip
 8007420:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007424:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007428:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800742c:	4690      	mov	r8, r2
 800742e:	4699      	mov	r9, r3
 8007430:	6862      	ldr	r2, [r4, #4]
 8007432:	2100      	movs	r1, #0
 8007434:	1892      	adds	r2, r2, r2
 8007436:	eb41 0301 	adc.w	r3, r1, r1
 800743a:	eb1b 0008 	adds.w	r0, fp, r8
 800743e:	eb4c 0109 	adc.w	r1, ip, r9
 8007442:	f7f9 fb67 	bl	8000b14 <__aeabi_uldivmod>
 8007446:	4d41      	ldr	r5, [pc, #260]	; (800754c <UART_SetConfig+0x214>)
 8007448:	fba5 3200 	umull	r3, r2, r5, r0
 800744c:	0951      	lsrs	r1, r2, #5
 800744e:	2264      	movs	r2, #100	; 0x64
 8007450:	fb02 0211 	mls	r2, r2, r1, r0
 8007454:	00d3      	lsls	r3, r2, #3
 8007456:	3332      	adds	r3, #50	; 0x32
 8007458:	fba5 2303 	umull	r2, r3, r5, r3
 800745c:	095b      	lsrs	r3, r3, #5
 800745e:	005a      	lsls	r2, r3, #1
 8007460:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007464:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	6821      	ldr	r1, [r4, #0]
 800746e:	4413      	add	r3, r2
 8007470:	608b      	str	r3, [r1, #8]
 8007472:	e066      	b.n	8007542 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007474:	f7ff fe54 	bl	8007120 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007478:	4680      	mov	r8, r0
 800747a:	f04f 0900 	mov.w	r9, #0
 800747e:	1806      	adds	r6, r0, r0
 8007480:	eb49 0709 	adc.w	r7, r9, r9
 8007484:	eb16 0b00 	adds.w	fp, r6, r0
 8007488:	eb47 0c09 	adc.w	ip, r7, r9
 800748c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007490:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007494:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007498:	4693      	mov	fp, r2
 800749a:	469c      	mov	ip, r3
 800749c:	6862      	ldr	r2, [r4, #4]
 800749e:	2100      	movs	r1, #0
 80074a0:	1892      	adds	r2, r2, r2
 80074a2:	eb41 0301 	adc.w	r3, r1, r1
 80074a6:	eb18 000b 	adds.w	r0, r8, fp
 80074aa:	eb49 010c 	adc.w	r1, r9, ip
 80074ae:	f7f9 fb31 	bl	8000b14 <__aeabi_uldivmod>
 80074b2:	4d26      	ldr	r5, [pc, #152]	; (800754c <UART_SetConfig+0x214>)
 80074b4:	fba5 3200 	umull	r3, r2, r5, r0
 80074b8:	0951      	lsrs	r1, r2, #5
 80074ba:	2264      	movs	r2, #100	; 0x64
 80074bc:	fb02 0211 	mls	r2, r2, r1, r0
 80074c0:	00d3      	lsls	r3, r2, #3
 80074c2:	3332      	adds	r3, #50	; 0x32
 80074c4:	fba5 2303 	umull	r2, r3, r5, r3
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	005a      	lsls	r2, r3, #1
 80074cc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80074d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	6821      	ldr	r1, [r4, #0]
 80074da:	4413      	add	r3, r2
 80074dc:	608b      	str	r3, [r1, #8]
 80074de:	e030      	b.n	8007542 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 80074e0:	f7ff fe1e 	bl	8007120 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074e4:	f04f 0900 	mov.w	r9, #0
 80074e8:	1806      	adds	r6, r0, r0
 80074ea:	eb49 0709 	adc.w	r7, r9, r9
 80074ee:	eb16 0b00 	adds.w	fp, r6, r0
 80074f2:	eb47 0c09 	adc.w	ip, r7, r9
 80074f6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80074fa:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80074fe:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007502:	4693      	mov	fp, r2
 8007504:	469c      	mov	ip, r3
 8007506:	6863      	ldr	r3, [r4, #4]
 8007508:	009a      	lsls	r2, r3, #2
 800750a:	0f9b      	lsrs	r3, r3, #30
 800750c:	eb10 000b 	adds.w	r0, r0, fp
 8007510:	eb49 010c 	adc.w	r1, r9, ip
 8007514:	f7f9 fafe 	bl	8000b14 <__aeabi_uldivmod>
 8007518:	4d0c      	ldr	r5, [pc, #48]	; (800754c <UART_SetConfig+0x214>)
 800751a:	fba5 3200 	umull	r3, r2, r5, r0
 800751e:	0951      	lsrs	r1, r2, #5
 8007520:	2264      	movs	r2, #100	; 0x64
 8007522:	fb02 0211 	mls	r2, r2, r1, r0
 8007526:	0113      	lsls	r3, r2, #4
 8007528:	3332      	adds	r3, #50	; 0x32
 800752a:	fba5 2303 	umull	r2, r3, r5, r3
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007534:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	4413      	add	r3, r2
 8007540:	608b      	str	r3, [r1, #8]
}
 8007542:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8007546:	bf00      	nop
 8007548:	40011000 	.word	0x40011000
 800754c:	51eb851f 	.word	0x51eb851f

08007550 <HAL_UART_Init>:
  if (huart == NULL)
 8007550:	b358      	cbz	r0, 80075aa <HAL_UART_Init+0x5a>
{
 8007552:	b510      	push	{r4, lr}
 8007554:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007556:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800755a:	b30b      	cbz	r3, 80075a0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800755c:	2324      	movs	r3, #36	; 0x24
 800755e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007562:	6822      	ldr	r2, [r4, #0]
 8007564:	68d3      	ldr	r3, [r2, #12]
 8007566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800756a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800756c:	4620      	mov	r0, r4
 800756e:	f7ff fee3 	bl	8007338 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007572:	6822      	ldr	r2, [r4, #0]
 8007574:	6913      	ldr	r3, [r2, #16]
 8007576:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800757a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	6953      	ldr	r3, [r2, #20]
 8007580:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007584:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8007586:	6822      	ldr	r2, [r4, #0]
 8007588:	68d3      	ldr	r3, [r2, #12]
 800758a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800758e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007590:	2000      	movs	r0, #0
 8007592:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007594:	2320      	movs	r3, #32
 8007596:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800759a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800759e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80075a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80075a4:	f7fd fc2c 	bl	8004e00 <HAL_UART_MspInit>
 80075a8:	e7d8      	b.n	800755c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80075aa:	2001      	movs	r0, #1
}
 80075ac:	4770      	bx	lr
	...

080075b0 <__errno>:
 80075b0:	4b01      	ldr	r3, [pc, #4]	; (80075b8 <__errno+0x8>)
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20000018 	.word	0x20000018

080075bc <__libc_init_array>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	4e0d      	ldr	r6, [pc, #52]	; (80075f4 <__libc_init_array+0x38>)
 80075c0:	4c0d      	ldr	r4, [pc, #52]	; (80075f8 <__libc_init_array+0x3c>)
 80075c2:	1ba4      	subs	r4, r4, r6
 80075c4:	10a4      	asrs	r4, r4, #2
 80075c6:	2500      	movs	r5, #0
 80075c8:	42a5      	cmp	r5, r4
 80075ca:	d109      	bne.n	80075e0 <__libc_init_array+0x24>
 80075cc:	4e0b      	ldr	r6, [pc, #44]	; (80075fc <__libc_init_array+0x40>)
 80075ce:	4c0c      	ldr	r4, [pc, #48]	; (8007600 <__libc_init_array+0x44>)
 80075d0:	f001 faf4 	bl	8008bbc <_init>
 80075d4:	1ba4      	subs	r4, r4, r6
 80075d6:	10a4      	asrs	r4, r4, #2
 80075d8:	2500      	movs	r5, #0
 80075da:	42a5      	cmp	r5, r4
 80075dc:	d105      	bne.n	80075ea <__libc_init_array+0x2e>
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075e4:	4798      	blx	r3
 80075e6:	3501      	adds	r5, #1
 80075e8:	e7ee      	b.n	80075c8 <__libc_init_array+0xc>
 80075ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075ee:	4798      	blx	r3
 80075f0:	3501      	adds	r5, #1
 80075f2:	e7f2      	b.n	80075da <__libc_init_array+0x1e>
 80075f4:	08017930 	.word	0x08017930
 80075f8:	08017930 	.word	0x08017930
 80075fc:	08017930 	.word	0x08017930
 8007600:	08017934 	.word	0x08017934

08007604 <memcpy>:
 8007604:	b510      	push	{r4, lr}
 8007606:	1e43      	subs	r3, r0, #1
 8007608:	440a      	add	r2, r1
 800760a:	4291      	cmp	r1, r2
 800760c:	d100      	bne.n	8007610 <memcpy+0xc>
 800760e:	bd10      	pop	{r4, pc}
 8007610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007618:	e7f7      	b.n	800760a <memcpy+0x6>

0800761a <memset>:
 800761a:	4402      	add	r2, r0
 800761c:	4603      	mov	r3, r0
 800761e:	4293      	cmp	r3, r2
 8007620:	d100      	bne.n	8007624 <memset+0xa>
 8007622:	4770      	bx	lr
 8007624:	f803 1b01 	strb.w	r1, [r3], #1
 8007628:	e7f9      	b.n	800761e <memset+0x4>
	...

0800762c <rand>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <rand+0x50>)
 8007630:	681c      	ldr	r4, [r3, #0]
 8007632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007634:	b97b      	cbnz	r3, 8007656 <rand+0x2a>
 8007636:	2018      	movs	r0, #24
 8007638:	f000 f82c 	bl	8007694 <malloc>
 800763c:	4a10      	ldr	r2, [pc, #64]	; (8007680 <rand+0x54>)
 800763e:	4b11      	ldr	r3, [pc, #68]	; (8007684 <rand+0x58>)
 8007640:	63a0      	str	r0, [r4, #56]	; 0x38
 8007642:	e9c0 2300 	strd	r2, r3, [r0]
 8007646:	4b10      	ldr	r3, [pc, #64]	; (8007688 <rand+0x5c>)
 8007648:	6083      	str	r3, [r0, #8]
 800764a:	230b      	movs	r3, #11
 800764c:	8183      	strh	r3, [r0, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	2300      	movs	r3, #0
 8007652:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007658:	480c      	ldr	r0, [pc, #48]	; (800768c <rand+0x60>)
 800765a:	690a      	ldr	r2, [r1, #16]
 800765c:	694b      	ldr	r3, [r1, #20]
 800765e:	4c0c      	ldr	r4, [pc, #48]	; (8007690 <rand+0x64>)
 8007660:	4350      	muls	r0, r2
 8007662:	fb04 0003 	mla	r0, r4, r3, r0
 8007666:	fba2 2304 	umull	r2, r3, r2, r4
 800766a:	4403      	add	r3, r0
 800766c:	1c54      	adds	r4, r2, #1
 800766e:	f143 0500 	adc.w	r5, r3, #0
 8007672:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8007676:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20000018 	.word	0x20000018
 8007680:	abcd330e 	.word	0xabcd330e
 8007684:	e66d1234 	.word	0xe66d1234
 8007688:	0005deec 	.word	0x0005deec
 800768c:	5851f42d 	.word	0x5851f42d
 8007690:	4c957f2d 	.word	0x4c957f2d

08007694 <malloc>:
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <malloc+0xc>)
 8007696:	4601      	mov	r1, r0
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f000 b803 	b.w	80076a4 <_malloc_r>
 800769e:	bf00      	nop
 80076a0:	20000018 	.word	0x20000018

080076a4 <_malloc_r>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	1ccd      	adds	r5, r1, #3
 80076a8:	f025 0503 	bic.w	r5, r5, #3
 80076ac:	3508      	adds	r5, #8
 80076ae:	2d0c      	cmp	r5, #12
 80076b0:	bf38      	it	cc
 80076b2:	250c      	movcc	r5, #12
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	4606      	mov	r6, r0
 80076b8:	db01      	blt.n	80076be <_malloc_r+0x1a>
 80076ba:	42a9      	cmp	r1, r5
 80076bc:	d903      	bls.n	80076c6 <_malloc_r+0x22>
 80076be:	230c      	movs	r3, #12
 80076c0:	6033      	str	r3, [r6, #0]
 80076c2:	2000      	movs	r0, #0
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	f000 f857 	bl	8007778 <__malloc_lock>
 80076ca:	4a21      	ldr	r2, [pc, #132]	; (8007750 <_malloc_r+0xac>)
 80076cc:	6814      	ldr	r4, [r2, #0]
 80076ce:	4621      	mov	r1, r4
 80076d0:	b991      	cbnz	r1, 80076f8 <_malloc_r+0x54>
 80076d2:	4c20      	ldr	r4, [pc, #128]	; (8007754 <_malloc_r+0xb0>)
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	b91b      	cbnz	r3, 80076e0 <_malloc_r+0x3c>
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 f83d 	bl	8007758 <_sbrk_r>
 80076de:	6020      	str	r0, [r4, #0]
 80076e0:	4629      	mov	r1, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 f838 	bl	8007758 <_sbrk_r>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d124      	bne.n	8007736 <_malloc_r+0x92>
 80076ec:	230c      	movs	r3, #12
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	4630      	mov	r0, r6
 80076f2:	f000 f842 	bl	800777a <__malloc_unlock>
 80076f6:	e7e4      	b.n	80076c2 <_malloc_r+0x1e>
 80076f8:	680b      	ldr	r3, [r1, #0]
 80076fa:	1b5b      	subs	r3, r3, r5
 80076fc:	d418      	bmi.n	8007730 <_malloc_r+0x8c>
 80076fe:	2b0b      	cmp	r3, #11
 8007700:	d90f      	bls.n	8007722 <_malloc_r+0x7e>
 8007702:	600b      	str	r3, [r1, #0]
 8007704:	50cd      	str	r5, [r1, r3]
 8007706:	18cc      	adds	r4, r1, r3
 8007708:	4630      	mov	r0, r6
 800770a:	f000 f836 	bl	800777a <__malloc_unlock>
 800770e:	f104 000b 	add.w	r0, r4, #11
 8007712:	1d23      	adds	r3, r4, #4
 8007714:	f020 0007 	bic.w	r0, r0, #7
 8007718:	1ac3      	subs	r3, r0, r3
 800771a:	d0d3      	beq.n	80076c4 <_malloc_r+0x20>
 800771c:	425a      	negs	r2, r3
 800771e:	50e2      	str	r2, [r4, r3]
 8007720:	e7d0      	b.n	80076c4 <_malloc_r+0x20>
 8007722:	428c      	cmp	r4, r1
 8007724:	684b      	ldr	r3, [r1, #4]
 8007726:	bf16      	itet	ne
 8007728:	6063      	strne	r3, [r4, #4]
 800772a:	6013      	streq	r3, [r2, #0]
 800772c:	460c      	movne	r4, r1
 800772e:	e7eb      	b.n	8007708 <_malloc_r+0x64>
 8007730:	460c      	mov	r4, r1
 8007732:	6849      	ldr	r1, [r1, #4]
 8007734:	e7cc      	b.n	80076d0 <_malloc_r+0x2c>
 8007736:	1cc4      	adds	r4, r0, #3
 8007738:	f024 0403 	bic.w	r4, r4, #3
 800773c:	42a0      	cmp	r0, r4
 800773e:	d005      	beq.n	800774c <_malloc_r+0xa8>
 8007740:	1a21      	subs	r1, r4, r0
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f808 	bl	8007758 <_sbrk_r>
 8007748:	3001      	adds	r0, #1
 800774a:	d0cf      	beq.n	80076ec <_malloc_r+0x48>
 800774c:	6025      	str	r5, [r4, #0]
 800774e:	e7db      	b.n	8007708 <_malloc_r+0x64>
 8007750:	20012a28 	.word	0x20012a28
 8007754:	20012a2c 	.word	0x20012a2c

08007758 <_sbrk_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4c06      	ldr	r4, [pc, #24]	; (8007774 <_sbrk_r+0x1c>)
 800775c:	2300      	movs	r3, #0
 800775e:	4605      	mov	r5, r0
 8007760:	4608      	mov	r0, r1
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	f7fd fc10 	bl	8004f88 <_sbrk>
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	d102      	bne.n	8007772 <_sbrk_r+0x1a>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	b103      	cbz	r3, 8007772 <_sbrk_r+0x1a>
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	bd38      	pop	{r3, r4, r5, pc}
 8007774:	20013be4 	.word	0x20013be4

08007778 <__malloc_lock>:
 8007778:	4770      	bx	lr

0800777a <__malloc_unlock>:
 800777a:	4770      	bx	lr

0800777c <floorf>:
 800777c:	ee10 3a10 	vmov	r3, s0
 8007780:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007784:	0dca      	lsrs	r2, r1, #23
 8007786:	3a7f      	subs	r2, #127	; 0x7f
 8007788:	2a16      	cmp	r2, #22
 800778a:	dc2a      	bgt.n	80077e2 <floorf+0x66>
 800778c:	2a00      	cmp	r2, #0
 800778e:	da11      	bge.n	80077b4 <floorf+0x38>
 8007790:	eddf 7a18 	vldr	s15, [pc, #96]	; 80077f4 <floorf+0x78>
 8007794:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007798:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800779c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a0:	dd05      	ble.n	80077ae <floorf+0x32>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	da23      	bge.n	80077ee <floorf+0x72>
 80077a6:	4a14      	ldr	r2, [pc, #80]	; (80077f8 <floorf+0x7c>)
 80077a8:	2900      	cmp	r1, #0
 80077aa:	bf18      	it	ne
 80077ac:	4613      	movne	r3, r2
 80077ae:	ee00 3a10 	vmov	s0, r3
 80077b2:	4770      	bx	lr
 80077b4:	4911      	ldr	r1, [pc, #68]	; (80077fc <floorf+0x80>)
 80077b6:	4111      	asrs	r1, r2
 80077b8:	420b      	tst	r3, r1
 80077ba:	d0fa      	beq.n	80077b2 <floorf+0x36>
 80077bc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80077f4 <floorf+0x78>
 80077c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80077c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80077c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077cc:	ddef      	ble.n	80077ae <floorf+0x32>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bfbe      	ittt	lt
 80077d2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80077d6:	fa40 f202 	asrlt.w	r2, r0, r2
 80077da:	189b      	addlt	r3, r3, r2
 80077dc:	ea23 0301 	bic.w	r3, r3, r1
 80077e0:	e7e5      	b.n	80077ae <floorf+0x32>
 80077e2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80077e6:	d3e4      	bcc.n	80077b2 <floorf+0x36>
 80077e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80077ec:	4770      	bx	lr
 80077ee:	2300      	movs	r3, #0
 80077f0:	e7dd      	b.n	80077ae <floorf+0x32>
 80077f2:	bf00      	nop
 80077f4:	7149f2ca 	.word	0x7149f2ca
 80077f8:	bf800000 	.word	0xbf800000
 80077fc:	007fffff 	.word	0x007fffff

08007800 <lrintf>:
 8007800:	ee10 3a10 	vmov	r3, s0
 8007804:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007808:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 800780c:	281e      	cmp	r0, #30
 800780e:	b082      	sub	sp, #8
 8007810:	dc2e      	bgt.n	8007870 <lrintf+0x70>
 8007812:	1c41      	adds	r1, r0, #1
 8007814:	da02      	bge.n	800781c <lrintf+0x1c>
 8007816:	2000      	movs	r0, #0
 8007818:	b002      	add	sp, #8
 800781a:	4770      	bx	lr
 800781c:	2816      	cmp	r0, #22
 800781e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8007822:	dd09      	ble.n	8007838 <lrintf+0x38>
 8007824:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007828:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800782c:	3a96      	subs	r2, #150	; 0x96
 800782e:	4090      	lsls	r0, r2
 8007830:	2900      	cmp	r1, #0
 8007832:	d0f1      	beq.n	8007818 <lrintf+0x18>
 8007834:	4240      	negs	r0, r0
 8007836:	e7ef      	b.n	8007818 <lrintf+0x18>
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <lrintf+0x7c>)
 800783a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800783e:	ed93 7a00 	vldr	s14, [r3]
 8007842:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007846:	ed8d 0a01 	vstr	s0, [sp, #4]
 800784a:	eddd 7a01 	vldr	s15, [sp, #4]
 800784e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007852:	ee17 3a90 	vmov	r3, s15
 8007856:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800785a:	d0dc      	beq.n	8007816 <lrintf+0x16>
 800785c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007860:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007864:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007868:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800786c:	40d8      	lsrs	r0, r3
 800786e:	e7df      	b.n	8007830 <lrintf+0x30>
 8007870:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007874:	ee17 0a90 	vmov	r0, s15
 8007878:	e7ce      	b.n	8007818 <lrintf+0x18>
 800787a:	bf00      	nop
 800787c:	08017528 	.word	0x08017528

08007880 <rintf>:
 8007880:	b513      	push	{r0, r1, r4, lr}
 8007882:	ee10 1a10 	vmov	r1, s0
 8007886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800788a:	0ddc      	lsrs	r4, r3, #23
 800788c:	3c7f      	subs	r4, #127	; 0x7f
 800788e:	2c16      	cmp	r4, #22
 8007890:	dc46      	bgt.n	8007920 <rintf+0xa0>
 8007892:	b32b      	cbz	r3, 80078e0 <rintf+0x60>
 8007894:	2c00      	cmp	r4, #0
 8007896:	ee10 2a10 	vmov	r2, s0
 800789a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800789e:	da21      	bge.n	80078e4 <rintf+0x64>
 80078a0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80078a4:	425b      	negs	r3, r3
 80078a6:	4a21      	ldr	r2, [pc, #132]	; (800792c <rintf+0xac>)
 80078a8:	0a5b      	lsrs	r3, r3, #9
 80078aa:	0d09      	lsrs	r1, r1, #20
 80078ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b0:	0509      	lsls	r1, r1, #20
 80078b2:	430b      	orrs	r3, r1
 80078b4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	edd2 6a00 	vldr	s13, [r2]
 80078c0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80078c4:	ed8d 7a01 	vstr	s14, [sp, #4]
 80078c8:	eddd 7a01 	vldr	s15, [sp, #4]
 80078cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80078d0:	ee17 3a90 	vmov	r3, s15
 80078d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078d8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80078dc:	ee00 3a10 	vmov	s0, r3
 80078e0:	b002      	add	sp, #8
 80078e2:	bd10      	pop	{r4, pc}
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <rintf+0xb0>)
 80078e6:	4123      	asrs	r3, r4
 80078e8:	4219      	tst	r1, r3
 80078ea:	d0f9      	beq.n	80078e0 <rintf+0x60>
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	4219      	tst	r1, r3
 80078f0:	d006      	beq.n	8007900 <rintf+0x80>
 80078f2:	ea21 0203 	bic.w	r2, r1, r3
 80078f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078fa:	fa43 f404 	asr.w	r4, r3, r4
 80078fe:	4322      	orrs	r2, r4
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <rintf+0xac>)
 8007902:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007906:	ed90 7a00 	vldr	s14, [r0]
 800790a:	ee07 2a90 	vmov	s15, r2
 800790e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007912:	edcd 7a01 	vstr	s15, [sp, #4]
 8007916:	ed9d 0a01 	vldr	s0, [sp, #4]
 800791a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800791e:	e7df      	b.n	80078e0 <rintf+0x60>
 8007920:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007924:	d3dc      	bcc.n	80078e0 <rintf+0x60>
 8007926:	ee30 0a00 	vadd.f32	s0, s0, s0
 800792a:	e7d9      	b.n	80078e0 <rintf+0x60>
 800792c:	08017530 	.word	0x08017530
 8007930:	007fffff 	.word	0x007fffff

08007934 <sinf>:
 8007934:	ee10 3a10 	vmov	r3, s0
 8007938:	b507      	push	{r0, r1, r2, lr}
 800793a:	4a1d      	ldr	r2, [pc, #116]	; (80079b0 <sinf+0x7c>)
 800793c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007940:	4293      	cmp	r3, r2
 8007942:	dc05      	bgt.n	8007950 <sinf+0x1c>
 8007944:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80079b4 <sinf+0x80>
 8007948:	2000      	movs	r0, #0
 800794a:	f001 f869 	bl	8008a20 <__kernel_sinf>
 800794e:	e004      	b.n	800795a <sinf+0x26>
 8007950:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007954:	db04      	blt.n	8007960 <sinf+0x2c>
 8007956:	ee30 0a40 	vsub.f32	s0, s0, s0
 800795a:	b003      	add	sp, #12
 800795c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007960:	4668      	mov	r0, sp
 8007962:	f000 fc4d 	bl	8008200 <__ieee754_rem_pio2f>
 8007966:	f000 0003 	and.w	r0, r0, #3
 800796a:	2801      	cmp	r0, #1
 800796c:	d008      	beq.n	8007980 <sinf+0x4c>
 800796e:	2802      	cmp	r0, #2
 8007970:	d00d      	beq.n	800798e <sinf+0x5a>
 8007972:	b9b0      	cbnz	r0, 80079a2 <sinf+0x6e>
 8007974:	2001      	movs	r0, #1
 8007976:	eddd 0a01 	vldr	s1, [sp, #4]
 800797a:	ed9d 0a00 	vldr	s0, [sp]
 800797e:	e7e4      	b.n	800794a <sinf+0x16>
 8007980:	eddd 0a01 	vldr	s1, [sp, #4]
 8007984:	ed9d 0a00 	vldr	s0, [sp]
 8007988:	f000 fd6a 	bl	8008460 <__kernel_cosf>
 800798c:	e7e5      	b.n	800795a <sinf+0x26>
 800798e:	2001      	movs	r0, #1
 8007990:	eddd 0a01 	vldr	s1, [sp, #4]
 8007994:	ed9d 0a00 	vldr	s0, [sp]
 8007998:	f001 f842 	bl	8008a20 <__kernel_sinf>
 800799c:	eeb1 0a40 	vneg.f32	s0, s0
 80079a0:	e7db      	b.n	800795a <sinf+0x26>
 80079a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80079a6:	ed9d 0a00 	vldr	s0, [sp]
 80079aa:	f000 fd59 	bl	8008460 <__kernel_cosf>
 80079ae:	e7f5      	b.n	800799c <sinf+0x68>
 80079b0:	3f490fd8 	.word	0x3f490fd8
 80079b4:	00000000 	.word	0x00000000

080079b8 <powf>:
 80079b8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80079bc:	ed2d 8b04 	vpush	{d8-d9}
 80079c0:	4ca7      	ldr	r4, [pc, #668]	; (8007c60 <powf+0x2a8>)
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	eef0 8a40 	vmov.f32	s17, s0
 80079c8:	eeb0 8a60 	vmov.f32	s16, s1
 80079cc:	f000 f958 	bl	8007c80 <__ieee754_powf>
 80079d0:	f994 5000 	ldrsb.w	r5, [r4]
 80079d4:	1c6b      	adds	r3, r5, #1
 80079d6:	eeb0 9a40 	vmov.f32	s18, s0
 80079da:	4626      	mov	r6, r4
 80079dc:	d05f      	beq.n	8007a9e <powf+0xe6>
 80079de:	eeb4 8a48 	vcmp.f32	s16, s16
 80079e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e6:	d65a      	bvs.n	8007a9e <powf+0xe6>
 80079e8:	eef4 8a68 	vcmp.f32	s17, s17
 80079ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f0:	d721      	bvc.n	8007a36 <powf+0x7e>
 80079f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80079f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fa:	d150      	bne.n	8007a9e <powf+0xe6>
 80079fc:	2301      	movs	r3, #1
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4b98      	ldr	r3, [pc, #608]	; (8007c64 <powf+0x2ac>)
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	ee18 0a90 	vmov	r0, s17
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9308      	str	r3, [sp, #32]
 8007a0c:	f7f8 fd40 	bl	8000490 <__aeabi_f2d>
 8007a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a14:	ee18 0a10 	vmov	r0, s16
 8007a18:	f7f8 fd3a 	bl	8000490 <__aeabi_f2d>
 8007a1c:	4b92      	ldr	r3, [pc, #584]	; (8007c68 <powf+0x2b0>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2d02      	cmp	r5, #2
 8007a22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a2a:	d032      	beq.n	8007a92 <powf+0xda>
 8007a2c:	4668      	mov	r0, sp
 8007a2e:	f001 f83f 	bl	8008ab0 <matherr>
 8007a32:	bb40      	cbnz	r0, 8007a86 <powf+0xce>
 8007a34:	e065      	b.n	8007b02 <powf+0x14a>
 8007a36:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8007c6c <powf+0x2b4>
 8007a3a:	eef4 8a69 	vcmp.f32	s17, s19
 8007a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a42:	d163      	bne.n	8007b0c <powf+0x154>
 8007a44:	eeb4 8a69 	vcmp.f32	s16, s19
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	d12e      	bne.n	8007aac <powf+0xf4>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	4b84      	ldr	r3, [pc, #528]	; (8007c64 <powf+0x2ac>)
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	ee18 0a90 	vmov	r0, s17
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9308      	str	r3, [sp, #32]
 8007a5e:	f7f8 fd17 	bl	8000490 <__aeabi_f2d>
 8007a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a66:	ee18 0a10 	vmov	r0, s16
 8007a6a:	f7f8 fd11 	bl	8000490 <__aeabi_f2d>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2300      	movs	r3, #0
 8007a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	d0d6      	beq.n	8007a2c <powf+0x74>
 8007a7e:	4b7a      	ldr	r3, [pc, #488]	; (8007c68 <powf+0x2b0>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a86:	9b08      	ldr	r3, [sp, #32]
 8007a88:	b11b      	cbz	r3, 8007a92 <powf+0xda>
 8007a8a:	f7ff fd91 	bl	80075b0 <__errno>
 8007a8e:	9b08      	ldr	r3, [sp, #32]
 8007a90:	6003      	str	r3, [r0, #0]
 8007a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a96:	f7f8 ffed 	bl	8000a74 <__aeabi_d2f>
 8007a9a:	ee09 0a10 	vmov	s18, r0
 8007a9e:	eeb0 0a49 	vmov.f32	s0, s18
 8007aa2:	b00a      	add	sp, #40	; 0x28
 8007aa4:	ecbd 8b04 	vpop	{d8-d9}
 8007aa8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007aac:	eeb0 0a48 	vmov.f32	s0, s16
 8007ab0:	f001 f807 	bl	8008ac2 <finitef>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d0f2      	beq.n	8007a9e <powf+0xe6>
 8007ab8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac0:	d5ed      	bpl.n	8007a9e <powf+0xe6>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	4b67      	ldr	r3, [pc, #412]	; (8007c64 <powf+0x2ac>)
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	ee18 0a90 	vmov	r0, s17
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9308      	str	r3, [sp, #32]
 8007ad2:	f7f8 fcdd 	bl	8000490 <__aeabi_f2d>
 8007ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ada:	ee18 0a10 	vmov	r0, s16
 8007ade:	f7f8 fcd7 	bl	8000490 <__aeabi_f2d>
 8007ae2:	f994 3000 	ldrsb.w	r3, [r4]
 8007ae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aea:	b923      	cbnz	r3, 8007af6 <powf+0x13e>
 8007aec:	2200      	movs	r2, #0
 8007aee:	2300      	movs	r3, #0
 8007af0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007af4:	e79a      	b.n	8007a2c <powf+0x74>
 8007af6:	495e      	ldr	r1, [pc, #376]	; (8007c70 <powf+0x2b8>)
 8007af8:	2000      	movs	r0, #0
 8007afa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d194      	bne.n	8007a2c <powf+0x74>
 8007b02:	f7ff fd55 	bl	80075b0 <__errno>
 8007b06:	2321      	movs	r3, #33	; 0x21
 8007b08:	6003      	str	r3, [r0, #0]
 8007b0a:	e7bc      	b.n	8007a86 <powf+0xce>
 8007b0c:	f000 ffd9 	bl	8008ac2 <finitef>
 8007b10:	4605      	mov	r5, r0
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d173      	bne.n	8007bfe <powf+0x246>
 8007b16:	eeb0 0a68 	vmov.f32	s0, s17
 8007b1a:	f000 ffd2 	bl	8008ac2 <finitef>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d06d      	beq.n	8007bfe <powf+0x246>
 8007b22:	eeb0 0a48 	vmov.f32	s0, s16
 8007b26:	f000 ffcc 	bl	8008ac2 <finitef>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d067      	beq.n	8007bfe <powf+0x246>
 8007b2e:	ee18 0a90 	vmov	r0, s17
 8007b32:	f7f8 fcad 	bl	8000490 <__aeabi_f2d>
 8007b36:	4680      	mov	r8, r0
 8007b38:	ee18 0a10 	vmov	r0, s16
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	f7f8 fca7 	bl	8000490 <__aeabi_f2d>
 8007b42:	eeb4 9a49 	vcmp.f32	s18, s18
 8007b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4a:	f994 4000 	ldrsb.w	r4, [r4]
 8007b4e:	4b45      	ldr	r3, [pc, #276]	; (8007c64 <powf+0x2ac>)
 8007b50:	d713      	bvc.n	8007b7a <powf+0x1c2>
 8007b52:	2201      	movs	r2, #1
 8007b54:	e9cd 2300 	strd	r2, r3, [sp]
 8007b58:	9508      	str	r5, [sp, #32]
 8007b5a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007b5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b62:	2c00      	cmp	r4, #0
 8007b64:	d0c2      	beq.n	8007aec <powf+0x134>
 8007b66:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8007b6a:	ee17 0a90 	vmov	r0, s15
 8007b6e:	f7f8 fc8f 	bl	8000490 <__aeabi_f2d>
 8007b72:	2c02      	cmp	r4, #2
 8007b74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b78:	e7c2      	b.n	8007b00 <powf+0x148>
 8007b7a:	2203      	movs	r2, #3
 8007b7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007b80:	e9cd 2300 	strd	r2, r3, [sp]
 8007b84:	9508      	str	r5, [sp, #32]
 8007b86:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007b8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b8e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007b92:	b9fc      	cbnz	r4, 8007bd4 <powf+0x21c>
 8007b94:	4b37      	ldr	r3, [pc, #220]	; (8007c74 <powf+0x2bc>)
 8007b96:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007b9a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ba6:	d553      	bpl.n	8007c50 <powf+0x298>
 8007ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8007bac:	f7ff fe68 	bl	8007880 <rintf>
 8007bb0:	eeb4 0a48 	vcmp.f32	s0, s16
 8007bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb8:	d004      	beq.n	8007bc4 <powf+0x20c>
 8007bba:	4b2f      	ldr	r3, [pc, #188]	; (8007c78 <powf+0x2c0>)
 8007bbc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007bc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bc4:	f996 3000 	ldrsb.w	r3, [r6]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d141      	bne.n	8007c50 <powf+0x298>
 8007bcc:	f7ff fcf0 	bl	80075b0 <__errno>
 8007bd0:	2322      	movs	r3, #34	; 0x22
 8007bd2:	e799      	b.n	8007b08 <powf+0x150>
 8007bd4:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <powf+0x2c4>)
 8007bd6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007bda:	2200      	movs	r2, #0
 8007bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007be4:	d5ee      	bpl.n	8007bc4 <powf+0x20c>
 8007be6:	eeb0 0a48 	vmov.f32	s0, s16
 8007bea:	f7ff fe49 	bl	8007880 <rintf>
 8007bee:	eeb4 0a48 	vcmp.f32	s0, s16
 8007bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf6:	d0e5      	beq.n	8007bc4 <powf+0x20c>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <powf+0x2b8>)
 8007bfc:	e7e0      	b.n	8007bc0 <powf+0x208>
 8007bfe:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c06:	f47f af4a 	bne.w	8007a9e <powf+0xe6>
 8007c0a:	eeb0 0a68 	vmov.f32	s0, s17
 8007c0e:	f000 ff58 	bl	8008ac2 <finitef>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f43f af43 	beq.w	8007a9e <powf+0xe6>
 8007c18:	eeb0 0a48 	vmov.f32	s0, s16
 8007c1c:	f000 ff51 	bl	8008ac2 <finitef>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	f43f af3c 	beq.w	8007a9e <powf+0xe6>
 8007c26:	2304      	movs	r3, #4
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <powf+0x2ac>)
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	ee18 0a90 	vmov	r0, s17
 8007c32:	2300      	movs	r3, #0
 8007c34:	9308      	str	r3, [sp, #32]
 8007c36:	f7f8 fc2b 	bl	8000490 <__aeabi_f2d>
 8007c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c3e:	ee18 0a10 	vmov	r0, s16
 8007c42:	f7f8 fc25 	bl	8000490 <__aeabi_f2d>
 8007c46:	2200      	movs	r2, #0
 8007c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e7b7      	b.n	8007bc0 <powf+0x208>
 8007c50:	4668      	mov	r0, sp
 8007c52:	f000 ff2d 	bl	8008ab0 <matherr>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f47f af15 	bne.w	8007a86 <powf+0xce>
 8007c5c:	e7b6      	b.n	8007bcc <powf+0x214>
 8007c5e:	bf00      	nop
 8007c60:	2000007c 	.word	0x2000007c
 8007c64:	08017538 	.word	0x08017538
 8007c68:	3ff00000 	.word	0x3ff00000
 8007c6c:	00000000 	.word	0x00000000
 8007c70:	fff00000 	.word	0xfff00000
 8007c74:	47efffff 	.word	0x47efffff
 8007c78:	c7efffff 	.word	0xc7efffff
 8007c7c:	7ff00000 	.word	0x7ff00000

08007c80 <__ieee754_powf>:
 8007c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c84:	ee10 5a90 	vmov	r5, s1
 8007c88:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007c8c:	ed2d 8b02 	vpush	{d8}
 8007c90:	eeb0 8a40 	vmov.f32	s16, s0
 8007c94:	eef0 8a60 	vmov.f32	s17, s1
 8007c98:	f000 8293 	beq.w	80081c2 <__ieee754_powf+0x542>
 8007c9c:	ee10 8a10 	vmov	r8, s0
 8007ca0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007ca4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007ca8:	dc06      	bgt.n	8007cb8 <__ieee754_powf+0x38>
 8007caa:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007cae:	dd0a      	ble.n	8007cc6 <__ieee754_powf+0x46>
 8007cb0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007cb4:	f000 8285 	beq.w	80081c2 <__ieee754_powf+0x542>
 8007cb8:	ecbd 8b02 	vpop	{d8}
 8007cbc:	48d9      	ldr	r0, [pc, #868]	; (8008024 <__ieee754_powf+0x3a4>)
 8007cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc2:	f000 bf09 	b.w	8008ad8 <nanf>
 8007cc6:	f1b8 0f00 	cmp.w	r8, #0
 8007cca:	da1d      	bge.n	8007d08 <__ieee754_powf+0x88>
 8007ccc:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007cd0:	da2c      	bge.n	8007d2c <__ieee754_powf+0xac>
 8007cd2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007cd6:	db30      	blt.n	8007d3a <__ieee754_powf+0xba>
 8007cd8:	15fb      	asrs	r3, r7, #23
 8007cda:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007cde:	fa47 f603 	asr.w	r6, r7, r3
 8007ce2:	fa06 f303 	lsl.w	r3, r6, r3
 8007ce6:	42bb      	cmp	r3, r7
 8007ce8:	d127      	bne.n	8007d3a <__ieee754_powf+0xba>
 8007cea:	f006 0601 	and.w	r6, r6, #1
 8007cee:	f1c6 0602 	rsb	r6, r6, #2
 8007cf2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007cf6:	d122      	bne.n	8007d3e <__ieee754_powf+0xbe>
 8007cf8:	2d00      	cmp	r5, #0
 8007cfa:	f280 8268 	bge.w	80081ce <__ieee754_powf+0x54e>
 8007cfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d02:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007d06:	e00d      	b.n	8007d24 <__ieee754_powf+0xa4>
 8007d08:	2600      	movs	r6, #0
 8007d0a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007d0e:	d1f0      	bne.n	8007cf2 <__ieee754_powf+0x72>
 8007d10:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007d14:	f000 8255 	beq.w	80081c2 <__ieee754_powf+0x542>
 8007d18:	dd0a      	ble.n	8007d30 <__ieee754_powf+0xb0>
 8007d1a:	2d00      	cmp	r5, #0
 8007d1c:	f280 8254 	bge.w	80081c8 <__ieee754_powf+0x548>
 8007d20:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8008028 <__ieee754_powf+0x3a8>
 8007d24:	ecbd 8b02 	vpop	{d8}
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	2602      	movs	r6, #2
 8007d2e:	e7ec      	b.n	8007d0a <__ieee754_powf+0x8a>
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	daf5      	bge.n	8007d20 <__ieee754_powf+0xa0>
 8007d34:	eeb1 0a68 	vneg.f32	s0, s17
 8007d38:	e7f4      	b.n	8007d24 <__ieee754_powf+0xa4>
 8007d3a:	2600      	movs	r6, #0
 8007d3c:	e7d9      	b.n	8007cf2 <__ieee754_powf+0x72>
 8007d3e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007d42:	d102      	bne.n	8007d4a <__ieee754_powf+0xca>
 8007d44:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007d48:	e7ec      	b.n	8007d24 <__ieee754_powf+0xa4>
 8007d4a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007d4e:	eeb0 0a48 	vmov.f32	s0, s16
 8007d52:	d108      	bne.n	8007d66 <__ieee754_powf+0xe6>
 8007d54:	f1b8 0f00 	cmp.w	r8, #0
 8007d58:	db05      	blt.n	8007d66 <__ieee754_powf+0xe6>
 8007d5a:	ecbd 8b02 	vpop	{d8}
 8007d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d62:	f000 bb79 	b.w	8008458 <__ieee754_sqrtf>
 8007d66:	f000 fea5 	bl	8008ab4 <fabsf>
 8007d6a:	b124      	cbz	r4, 8007d76 <__ieee754_powf+0xf6>
 8007d6c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007d70:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007d74:	d117      	bne.n	8007da6 <__ieee754_powf+0x126>
 8007d76:	2d00      	cmp	r5, #0
 8007d78:	bfbc      	itt	lt
 8007d7a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007d7e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007d82:	f1b8 0f00 	cmp.w	r8, #0
 8007d86:	dacd      	bge.n	8007d24 <__ieee754_powf+0xa4>
 8007d88:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007d8c:	ea54 0306 	orrs.w	r3, r4, r6
 8007d90:	d104      	bne.n	8007d9c <__ieee754_powf+0x11c>
 8007d92:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007d96:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007d9a:	e7c3      	b.n	8007d24 <__ieee754_powf+0xa4>
 8007d9c:	2e01      	cmp	r6, #1
 8007d9e:	d1c1      	bne.n	8007d24 <__ieee754_powf+0xa4>
 8007da0:	eeb1 0a40 	vneg.f32	s0, s0
 8007da4:	e7be      	b.n	8007d24 <__ieee754_powf+0xa4>
 8007da6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007daa:	3801      	subs	r0, #1
 8007dac:	ea56 0300 	orrs.w	r3, r6, r0
 8007db0:	d104      	bne.n	8007dbc <__ieee754_powf+0x13c>
 8007db2:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007db6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007dba:	e7b3      	b.n	8007d24 <__ieee754_powf+0xa4>
 8007dbc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007dc0:	dd6d      	ble.n	8007e9e <__ieee754_powf+0x21e>
 8007dc2:	4b9a      	ldr	r3, [pc, #616]	; (800802c <__ieee754_powf+0x3ac>)
 8007dc4:	429c      	cmp	r4, r3
 8007dc6:	dc06      	bgt.n	8007dd6 <__ieee754_powf+0x156>
 8007dc8:	2d00      	cmp	r5, #0
 8007dca:	daa9      	bge.n	8007d20 <__ieee754_powf+0xa0>
 8007dcc:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8008030 <__ieee754_powf+0x3b0>
 8007dd0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007dd4:	e7a6      	b.n	8007d24 <__ieee754_powf+0xa4>
 8007dd6:	4b97      	ldr	r3, [pc, #604]	; (8008034 <__ieee754_powf+0x3b4>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	dd02      	ble.n	8007de2 <__ieee754_powf+0x162>
 8007ddc:	2d00      	cmp	r5, #0
 8007dde:	dcf5      	bgt.n	8007dcc <__ieee754_powf+0x14c>
 8007de0:	e79e      	b.n	8007d20 <__ieee754_powf+0xa0>
 8007de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007de6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007dea:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8008038 <__ieee754_powf+0x3b8>
 8007dee:	eef1 6a40 	vneg.f32	s13, s0
 8007df2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007df6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007dfe:	eee7 7a40 	vfms.f32	s15, s14, s0
 8007e02:	ee60 0a00 	vmul.f32	s1, s0, s0
 8007e06:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800803c <__ieee754_powf+0x3bc>
 8007e0a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8007e0e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8008040 <__ieee754_powf+0x3c0>
 8007e12:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8007e16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007e1a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8008044 <__ieee754_powf+0x3c4>
 8007e1e:	eeb0 6a67 	vmov.f32	s12, s15
 8007e22:	eea0 6a07 	vfma.f32	s12, s0, s14
 8007e26:	ee16 3a10 	vmov	r3, s12
 8007e2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007e2e:	f023 030f 	bic.w	r3, r3, #15
 8007e32:	ee00 3a90 	vmov	s1, r3
 8007e36:	eee6 0a87 	vfma.f32	s1, s13, s14
 8007e3a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007e3e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007e42:	f025 050f 	bic.w	r5, r5, #15
 8007e46:	ee07 5a10 	vmov	s14, r5
 8007e4a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007e4e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007e5a:	3e01      	subs	r6, #1
 8007e5c:	ea56 0200 	orrs.w	r2, r6, r0
 8007e60:	ee07 5a10 	vmov	s14, r5
 8007e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e68:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007e6c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007e70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007e74:	ee17 4a10 	vmov	r4, s14
 8007e78:	bf08      	it	eq
 8007e7a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007e84:	f340 8184 	ble.w	8008190 <__ieee754_powf+0x510>
 8007e88:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007e8c:	f340 80fc 	ble.w	8008088 <__ieee754_powf+0x408>
 8007e90:	eddf 7a67 	vldr	s15, [pc, #412]	; 8008030 <__ieee754_powf+0x3b0>
 8007e94:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007e98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007e9c:	e742      	b.n	8007d24 <__ieee754_powf+0xa4>
 8007e9e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8007ea2:	bfbf      	itttt	lt
 8007ea4:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8008048 <__ieee754_powf+0x3c8>
 8007ea8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007eac:	f06f 0217 	mvnlt.w	r2, #23
 8007eb0:	ee17 4a90 	vmovlt	r4, s15
 8007eb4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007eb8:	bfa8      	it	ge
 8007eba:	2200      	movge	r2, #0
 8007ebc:	3b7f      	subs	r3, #127	; 0x7f
 8007ebe:	4413      	add	r3, r2
 8007ec0:	4a62      	ldr	r2, [pc, #392]	; (800804c <__ieee754_powf+0x3cc>)
 8007ec2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007ec6:	4294      	cmp	r4, r2
 8007ec8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007ecc:	dd06      	ble.n	8007edc <__ieee754_powf+0x25c>
 8007ece:	4a60      	ldr	r2, [pc, #384]	; (8008050 <__ieee754_powf+0x3d0>)
 8007ed0:	4294      	cmp	r4, r2
 8007ed2:	f340 80a5 	ble.w	8008020 <__ieee754_powf+0x3a0>
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007edc:	2400      	movs	r4, #0
 8007ede:	4a5d      	ldr	r2, [pc, #372]	; (8008054 <__ieee754_powf+0x3d4>)
 8007ee0:	00a7      	lsls	r7, r4, #2
 8007ee2:	443a      	add	r2, r7
 8007ee4:	ee07 1a90 	vmov	s15, r1
 8007ee8:	ed92 7a00 	vldr	s14, [r2]
 8007eec:	4a5a      	ldr	r2, [pc, #360]	; (8008058 <__ieee754_powf+0x3d8>)
 8007eee:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007ef2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007ef6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007efa:	1049      	asrs	r1, r1, #1
 8007efc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007f00:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007f04:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007f08:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8007f0c:	ee06 1a10 	vmov	s12, r1
 8007f10:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8007f14:	ee14 ca90 	vmov	ip, s9
 8007f18:	ea02 0c0c 	and.w	ip, r2, ip
 8007f1c:	ee05 ca10 	vmov	s10, ip
 8007f20:	eeb1 4a45 	vneg.f32	s8, s10
 8007f24:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007f28:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007f2c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800805c <__ieee754_powf+0x3dc>
 8007f30:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8007f34:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007f38:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007f3c:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8007f40:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8007f44:	eddf 5a46 	vldr	s11, [pc, #280]	; 8008060 <__ieee754_powf+0x3e0>
 8007f48:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007f4c:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008064 <__ieee754_powf+0x3e4>
 8007f50:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007f54:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008038 <__ieee754_powf+0x3b8>
 8007f58:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007f5c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008068 <__ieee754_powf+0x3e8>
 8007f60:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007f64:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800806c <__ieee754_powf+0x3ec>
 8007f68:	ee75 6a24 	vadd.f32	s13, s10, s9
 8007f6c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007f70:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007f74:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8007f78:	eef0 7a65 	vmov.f32	s15, s11
 8007f7c:	eee3 6a87 	vfma.f32	s13, s7, s14
 8007f80:	eee5 7a05 	vfma.f32	s15, s10, s10
 8007f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f88:	ee17 1a90 	vmov	r1, s15
 8007f8c:	4011      	ands	r1, r2
 8007f8e:	ee07 1a90 	vmov	s15, r1
 8007f92:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8007f96:	eddf 5a36 	vldr	s11, [pc, #216]	; 8008070 <__ieee754_powf+0x3f0>
 8007f9a:	eea4 7a05 	vfma.f32	s14, s8, s10
 8007f9e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007fa2:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007fa6:	eea7 7a86 	vfma.f32	s14, s15, s12
 8007faa:	eeb0 6a47 	vmov.f32	s12, s14
 8007fae:	eea5 6a27 	vfma.f32	s12, s10, s15
 8007fb2:	ee16 1a10 	vmov	r1, s12
 8007fb6:	4011      	ands	r1, r2
 8007fb8:	ee06 1a90 	vmov	s13, r1
 8007fbc:	eee4 6a27 	vfma.f32	s13, s8, s15
 8007fc0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8008074 <__ieee754_powf+0x3f4>
 8007fc4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007fc8:	ee06 1a10 	vmov	s12, r1
 8007fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fd0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8008078 <__ieee754_powf+0x3f8>
 8007fd4:	4929      	ldr	r1, [pc, #164]	; (800807c <__ieee754_powf+0x3fc>)
 8007fd6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007fda:	4439      	add	r1, r7
 8007fdc:	edd1 7a00 	vldr	s15, [r1]
 8007fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef0 0a47 	vmov.f32	s1, s14
 8007fec:	4b24      	ldr	r3, [pc, #144]	; (8008080 <__ieee754_powf+0x400>)
 8007fee:	eee6 0a25 	vfma.f32	s1, s12, s11
 8007ff2:	443b      	add	r3, r7
 8007ff4:	ed93 5a00 	vldr	s10, [r3]
 8007ff8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007ffc:	ee70 0a85 	vadd.f32	s1, s1, s10
 8008000:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8008004:	ee17 3a90 	vmov	r3, s15
 8008008:	4013      	ands	r3, r2
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008012:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008016:	eee6 7a65 	vfms.f32	s15, s12, s11
 800801a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800801e:	e70e      	b.n	8007e3e <__ieee754_powf+0x1be>
 8008020:	2401      	movs	r4, #1
 8008022:	e75c      	b.n	8007ede <__ieee754_powf+0x25e>
 8008024:	0801753c 	.word	0x0801753c
 8008028:	00000000 	.word	0x00000000
 800802c:	3f7ffff7 	.word	0x3f7ffff7
 8008030:	7149f2ca 	.word	0x7149f2ca
 8008034:	3f800007 	.word	0x3f800007
 8008038:	3eaaaaab 	.word	0x3eaaaaab
 800803c:	36eca570 	.word	0x36eca570
 8008040:	3fb8aa3b 	.word	0x3fb8aa3b
 8008044:	3fb8aa00 	.word	0x3fb8aa00
 8008048:	4b800000 	.word	0x4b800000
 800804c:	001cc471 	.word	0x001cc471
 8008050:	005db3d6 	.word	0x005db3d6
 8008054:	08017540 	.word	0x08017540
 8008058:	fffff000 	.word	0xfffff000
 800805c:	3e6c3255 	.word	0x3e6c3255
 8008060:	3e53f142 	.word	0x3e53f142
 8008064:	3e8ba305 	.word	0x3e8ba305
 8008068:	3edb6db7 	.word	0x3edb6db7
 800806c:	3f19999a 	.word	0x3f19999a
 8008070:	3f763800 	.word	0x3f763800
 8008074:	3f76384f 	.word	0x3f76384f
 8008078:	369dc3a0 	.word	0x369dc3a0
 800807c:	08017550 	.word	0x08017550
 8008080:	08017548 	.word	0x08017548
 8008084:	3338aa3c 	.word	0x3338aa3c
 8008088:	f040 8092 	bne.w	80081b0 <__ieee754_powf+0x530>
 800808c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8008084 <__ieee754_powf+0x404>
 8008090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008094:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008098:	eef4 6ac7 	vcmpe.f32	s13, s14
 800809c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a0:	f73f aef6 	bgt.w	8007e90 <__ieee754_powf+0x210>
 80080a4:	15db      	asrs	r3, r3, #23
 80080a6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80080aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80080ae:	4103      	asrs	r3, r0
 80080b0:	4423      	add	r3, r4
 80080b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080b6:	4947      	ldr	r1, [pc, #284]	; (80081d4 <__ieee754_powf+0x554>)
 80080b8:	3a7f      	subs	r2, #127	; 0x7f
 80080ba:	4111      	asrs	r1, r2
 80080bc:	ea23 0101 	bic.w	r1, r3, r1
 80080c0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80080c4:	ee07 1a10 	vmov	s14, r1
 80080c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80080cc:	f1c2 0217 	rsb	r2, r2, #23
 80080d0:	4110      	asrs	r0, r2
 80080d2:	2c00      	cmp	r4, #0
 80080d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080d8:	bfb8      	it	lt
 80080da:	4240      	neglt	r0, r0
 80080dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80080e0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081d8 <__ieee754_powf+0x558>
 80080e4:	ee17 3a10 	vmov	r3, s14
 80080e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80080ec:	f023 030f 	bic.w	r3, r3, #15
 80080f0:	ee07 3a10 	vmov	s14, r3
 80080f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80080fc:	eddf 7a37 	vldr	s15, [pc, #220]	; 80081dc <__ieee754_powf+0x55c>
 8008100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008104:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008108:	eddf 6a35 	vldr	s13, [pc, #212]	; 80081e0 <__ieee754_powf+0x560>
 800810c:	eeb0 0a67 	vmov.f32	s0, s15
 8008110:	eea7 0a26 	vfma.f32	s0, s14, s13
 8008114:	eeb0 6a40 	vmov.f32	s12, s0
 8008118:	eea7 6a66 	vfms.f32	s12, s14, s13
 800811c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008120:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008124:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80081e4 <__ieee754_powf+0x564>
 8008128:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80081e8 <__ieee754_powf+0x568>
 800812c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008130:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80081ec <__ieee754_powf+0x56c>
 8008134:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008138:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80081f0 <__ieee754_powf+0x570>
 800813c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008140:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80081f4 <__ieee754_powf+0x574>
 8008144:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008148:	eeb0 6a40 	vmov.f32	s12, s0
 800814c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008150:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008154:	eeb0 7a46 	vmov.f32	s14, s12
 8008158:	ee77 6a66 	vsub.f32	s13, s14, s13
 800815c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8008160:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008164:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800816c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008170:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008174:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008178:	ee10 3a10 	vmov	r3, s0
 800817c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008184:	da1a      	bge.n	80081bc <__ieee754_powf+0x53c>
 8008186:	f000 fcad 	bl	8008ae4 <scalbnf>
 800818a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800818e:	e5c9      	b.n	8007d24 <__ieee754_powf+0xa4>
 8008190:	4a19      	ldr	r2, [pc, #100]	; (80081f8 <__ieee754_powf+0x578>)
 8008192:	4293      	cmp	r3, r2
 8008194:	dd02      	ble.n	800819c <__ieee754_powf+0x51c>
 8008196:	eddf 7a19 	vldr	s15, [pc, #100]	; 80081fc <__ieee754_powf+0x57c>
 800819a:	e67b      	b.n	8007e94 <__ieee754_powf+0x214>
 800819c:	d108      	bne.n	80081b0 <__ieee754_powf+0x530>
 800819e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80081a2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80081a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081aa:	f6ff af7b 	blt.w	80080a4 <__ieee754_powf+0x424>
 80081ae:	e7f2      	b.n	8008196 <__ieee754_powf+0x516>
 80081b0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80081b4:	f73f af76 	bgt.w	80080a4 <__ieee754_powf+0x424>
 80081b8:	2000      	movs	r0, #0
 80081ba:	e78f      	b.n	80080dc <__ieee754_powf+0x45c>
 80081bc:	ee00 3a10 	vmov	s0, r3
 80081c0:	e7e3      	b.n	800818a <__ieee754_powf+0x50a>
 80081c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80081c6:	e5ad      	b.n	8007d24 <__ieee754_powf+0xa4>
 80081c8:	eeb0 0a68 	vmov.f32	s0, s17
 80081cc:	e5aa      	b.n	8007d24 <__ieee754_powf+0xa4>
 80081ce:	eeb0 0a48 	vmov.f32	s0, s16
 80081d2:	e5a7      	b.n	8007d24 <__ieee754_powf+0xa4>
 80081d4:	007fffff 	.word	0x007fffff
 80081d8:	3f317218 	.word	0x3f317218
 80081dc:	35bfbe8c 	.word	0x35bfbe8c
 80081e0:	3f317200 	.word	0x3f317200
 80081e4:	3331bb4c 	.word	0x3331bb4c
 80081e8:	b5ddea0e 	.word	0xb5ddea0e
 80081ec:	388ab355 	.word	0x388ab355
 80081f0:	bb360b61 	.word	0xbb360b61
 80081f4:	3e2aaaab 	.word	0x3e2aaaab
 80081f8:	43160000 	.word	0x43160000
 80081fc:	0da24260 	.word	0x0da24260

08008200 <__ieee754_rem_pio2f>:
 8008200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008202:	ee10 6a10 	vmov	r6, s0
 8008206:	4b86      	ldr	r3, [pc, #536]	; (8008420 <__ieee754_rem_pio2f+0x220>)
 8008208:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800820c:	429c      	cmp	r4, r3
 800820e:	b087      	sub	sp, #28
 8008210:	4605      	mov	r5, r0
 8008212:	dc05      	bgt.n	8008220 <__ieee754_rem_pio2f+0x20>
 8008214:	2300      	movs	r3, #0
 8008216:	ed85 0a00 	vstr	s0, [r5]
 800821a:	6043      	str	r3, [r0, #4]
 800821c:	2000      	movs	r0, #0
 800821e:	e020      	b.n	8008262 <__ieee754_rem_pio2f+0x62>
 8008220:	4b80      	ldr	r3, [pc, #512]	; (8008424 <__ieee754_rem_pio2f+0x224>)
 8008222:	429c      	cmp	r4, r3
 8008224:	dc38      	bgt.n	8008298 <__ieee754_rem_pio2f+0x98>
 8008226:	2e00      	cmp	r6, #0
 8008228:	f024 040f 	bic.w	r4, r4, #15
 800822c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008428 <__ieee754_rem_pio2f+0x228>
 8008230:	4b7e      	ldr	r3, [pc, #504]	; (800842c <__ieee754_rem_pio2f+0x22c>)
 8008232:	dd18      	ble.n	8008266 <__ieee754_rem_pio2f+0x66>
 8008234:	429c      	cmp	r4, r3
 8008236:	ee70 7a47 	vsub.f32	s15, s0, s14
 800823a:	bf09      	itett	eq
 800823c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008430 <__ieee754_rem_pio2f+0x230>
 8008240:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008434 <__ieee754_rem_pio2f+0x234>
 8008244:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008248:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008438 <__ieee754_rem_pio2f+0x238>
 800824c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008250:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008254:	edc0 6a00 	vstr	s13, [r0]
 8008258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800825c:	edc0 7a01 	vstr	s15, [r0, #4]
 8008260:	2001      	movs	r0, #1
 8008262:	b007      	add	sp, #28
 8008264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008266:	429c      	cmp	r4, r3
 8008268:	ee70 7a07 	vadd.f32	s15, s0, s14
 800826c:	bf09      	itett	eq
 800826e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008430 <__ieee754_rem_pio2f+0x230>
 8008272:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008434 <__ieee754_rem_pio2f+0x234>
 8008276:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800827a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008438 <__ieee754_rem_pio2f+0x238>
 800827e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008282:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008286:	edc0 6a00 	vstr	s13, [r0]
 800828a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800828e:	edc0 7a01 	vstr	s15, [r0, #4]
 8008292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008296:	e7e4      	b.n	8008262 <__ieee754_rem_pio2f+0x62>
 8008298:	4b68      	ldr	r3, [pc, #416]	; (800843c <__ieee754_rem_pio2f+0x23c>)
 800829a:	429c      	cmp	r4, r3
 800829c:	dc71      	bgt.n	8008382 <__ieee754_rem_pio2f+0x182>
 800829e:	f000 fc09 	bl	8008ab4 <fabsf>
 80082a2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008440 <__ieee754_rem_pio2f+0x240>
 80082a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80082aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80082ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082b2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80082b6:	ee17 0a90 	vmov	r0, s15
 80082ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008428 <__ieee754_rem_pio2f+0x228>
 80082be:	eeb1 7a46 	vneg.f32	s14, s12
 80082c2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80082c6:	281f      	cmp	r0, #31
 80082c8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008434 <__ieee754_rem_pio2f+0x234>
 80082cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80082d4:	ee16 3a90 	vmov	r3, s13
 80082d8:	dc1c      	bgt.n	8008314 <__ieee754_rem_pio2f+0x114>
 80082da:	1e47      	subs	r7, r0, #1
 80082dc:	4959      	ldr	r1, [pc, #356]	; (8008444 <__ieee754_rem_pio2f+0x244>)
 80082de:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80082e2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80082e6:	428a      	cmp	r2, r1
 80082e8:	d014      	beq.n	8008314 <__ieee754_rem_pio2f+0x114>
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	ed95 7a00 	vldr	s14, [r5]
 80082f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80082f4:	2e00      	cmp	r6, #0
 80082f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80082fa:	ed85 0a01 	vstr	s0, [r5, #4]
 80082fe:	dab0      	bge.n	8008262 <__ieee754_rem_pio2f+0x62>
 8008300:	eeb1 7a47 	vneg.f32	s14, s14
 8008304:	eeb1 0a40 	vneg.f32	s0, s0
 8008308:	ed85 7a00 	vstr	s14, [r5]
 800830c:	ed85 0a01 	vstr	s0, [r5, #4]
 8008310:	4240      	negs	r0, r0
 8008312:	e7a6      	b.n	8008262 <__ieee754_rem_pio2f+0x62>
 8008314:	15e4      	asrs	r4, r4, #23
 8008316:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800831a:	1aa2      	subs	r2, r4, r2
 800831c:	2a08      	cmp	r2, #8
 800831e:	dde4      	ble.n	80082ea <__ieee754_rem_pio2f+0xea>
 8008320:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008430 <__ieee754_rem_pio2f+0x230>
 8008324:	eef0 6a40 	vmov.f32	s13, s0
 8008328:	eee7 6a27 	vfma.f32	s13, s14, s15
 800832c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008330:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008334:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008438 <__ieee754_rem_pio2f+0x238>
 8008338:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800833c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008340:	eef0 7a40 	vmov.f32	s15, s0
 8008344:	ee15 3a90 	vmov	r3, s11
 8008348:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800834c:	1aa4      	subs	r4, r4, r2
 800834e:	2c19      	cmp	r4, #25
 8008350:	dc04      	bgt.n	800835c <__ieee754_rem_pio2f+0x15c>
 8008352:	edc5 5a00 	vstr	s11, [r5]
 8008356:	eeb0 0a66 	vmov.f32	s0, s13
 800835a:	e7c7      	b.n	80082ec <__ieee754_rem_pio2f+0xec>
 800835c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008448 <__ieee754_rem_pio2f+0x248>
 8008360:	eeb0 0a66 	vmov.f32	s0, s13
 8008364:	eea7 0a25 	vfma.f32	s0, s14, s11
 8008368:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800836c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008370:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800844c <__ieee754_rem_pio2f+0x24c>
 8008374:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008378:	ee30 7a67 	vsub.f32	s14, s0, s15
 800837c:	ed85 7a00 	vstr	s14, [r5]
 8008380:	e7b4      	b.n	80082ec <__ieee754_rem_pio2f+0xec>
 8008382:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008386:	db06      	blt.n	8008396 <__ieee754_rem_pio2f+0x196>
 8008388:	ee70 7a40 	vsub.f32	s15, s0, s0
 800838c:	edc0 7a01 	vstr	s15, [r0, #4]
 8008390:	edc0 7a00 	vstr	s15, [r0]
 8008394:	e742      	b.n	800821c <__ieee754_rem_pio2f+0x1c>
 8008396:	15e2      	asrs	r2, r4, #23
 8008398:	3a86      	subs	r2, #134	; 0x86
 800839a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083a6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008450 <__ieee754_rem_pio2f+0x250>
 80083aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083b2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80083b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083c6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80083ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80083d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d6:	edcd 7a05 	vstr	s15, [sp, #20]
 80083da:	d11e      	bne.n	800841a <__ieee754_rem_pio2f+0x21a>
 80083dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80083e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e4:	bf0c      	ite	eq
 80083e6:	2301      	moveq	r3, #1
 80083e8:	2302      	movne	r3, #2
 80083ea:	491a      	ldr	r1, [pc, #104]	; (8008454 <__ieee754_rem_pio2f+0x254>)
 80083ec:	9101      	str	r1, [sp, #4]
 80083ee:	2102      	movs	r1, #2
 80083f0:	9100      	str	r1, [sp, #0]
 80083f2:	a803      	add	r0, sp, #12
 80083f4:	4629      	mov	r1, r5
 80083f6:	f000 f891 	bl	800851c <__kernel_rem_pio2f>
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	f6bf af31 	bge.w	8008262 <__ieee754_rem_pio2f+0x62>
 8008400:	edd5 7a00 	vldr	s15, [r5]
 8008404:	eef1 7a67 	vneg.f32	s15, s15
 8008408:	edc5 7a00 	vstr	s15, [r5]
 800840c:	edd5 7a01 	vldr	s15, [r5, #4]
 8008410:	eef1 7a67 	vneg.f32	s15, s15
 8008414:	edc5 7a01 	vstr	s15, [r5, #4]
 8008418:	e77a      	b.n	8008310 <__ieee754_rem_pio2f+0x110>
 800841a:	2303      	movs	r3, #3
 800841c:	e7e5      	b.n	80083ea <__ieee754_rem_pio2f+0x1ea>
 800841e:	bf00      	nop
 8008420:	3f490fd8 	.word	0x3f490fd8
 8008424:	4016cbe3 	.word	0x4016cbe3
 8008428:	3fc90f80 	.word	0x3fc90f80
 800842c:	3fc90fd0 	.word	0x3fc90fd0
 8008430:	37354400 	.word	0x37354400
 8008434:	37354443 	.word	0x37354443
 8008438:	2e85a308 	.word	0x2e85a308
 800843c:	43490f80 	.word	0x43490f80
 8008440:	3f22f984 	.word	0x3f22f984
 8008444:	08017558 	.word	0x08017558
 8008448:	2e85a300 	.word	0x2e85a300
 800844c:	248d3132 	.word	0x248d3132
 8008450:	43800000 	.word	0x43800000
 8008454:	080175d8 	.word	0x080175d8

08008458 <__ieee754_sqrtf>:
 8008458:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800845c:	4770      	bx	lr
	...

08008460 <__kernel_cosf>:
 8008460:	ee10 3a10 	vmov	r3, s0
 8008464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008468:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800846c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008470:	da05      	bge.n	800847e <__kernel_cosf+0x1e>
 8008472:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008476:	ee17 2a90 	vmov	r2, s15
 800847a:	2a00      	cmp	r2, #0
 800847c:	d03b      	beq.n	80084f6 <__kernel_cosf+0x96>
 800847e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008482:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008486:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80084fc <__kernel_cosf+0x9c>
 800848a:	4a1d      	ldr	r2, [pc, #116]	; (8008500 <__kernel_cosf+0xa0>)
 800848c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8008490:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008504 <__kernel_cosf+0xa4>
 8008494:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008498:	4293      	cmp	r3, r2
 800849a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008508 <__kernel_cosf+0xa8>
 800849e:	eee7 5a06 	vfma.f32	s11, s14, s12
 80084a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800850c <__kernel_cosf+0xac>
 80084a6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80084aa:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008510 <__kernel_cosf+0xb0>
 80084ae:	eee7 5a06 	vfma.f32	s11, s14, s12
 80084b2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008514 <__kernel_cosf+0xb4>
 80084b6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80084ba:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80084be:	ee27 7a06 	vmul.f32	s14, s14, s12
 80084c2:	eee6 0a07 	vfma.f32	s1, s12, s14
 80084c6:	dc04      	bgt.n	80084d2 <__kernel_cosf+0x72>
 80084c8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80084cc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80084d0:	4770      	bx	lr
 80084d2:	4a11      	ldr	r2, [pc, #68]	; (8008518 <__kernel_cosf+0xb8>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	bfda      	itte	le
 80084d8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80084dc:	ee07 3a10 	vmovle	s14, r3
 80084e0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80084e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084e8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80084ec:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80084f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80084f4:	4770      	bx	lr
 80084f6:	eeb0 0a66 	vmov.f32	s0, s13
 80084fa:	4770      	bx	lr
 80084fc:	ad47d74e 	.word	0xad47d74e
 8008500:	3e999999 	.word	0x3e999999
 8008504:	310f74f6 	.word	0x310f74f6
 8008508:	b493f27c 	.word	0xb493f27c
 800850c:	37d00d01 	.word	0x37d00d01
 8008510:	bab60b61 	.word	0xbab60b61
 8008514:	3d2aaaab 	.word	0x3d2aaaab
 8008518:	3f480000 	.word	0x3f480000

0800851c <__kernel_rem_pio2f>:
 800851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008520:	ed2d 8b04 	vpush	{d8-d9}
 8008524:	b0d7      	sub	sp, #348	; 0x15c
 8008526:	469b      	mov	fp, r3
 8008528:	460e      	mov	r6, r1
 800852a:	4bbe      	ldr	r3, [pc, #760]	; (8008824 <__kernel_rem_pio2f+0x308>)
 800852c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800852e:	9002      	str	r0, [sp, #8]
 8008530:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008534:	9865      	ldr	r0, [sp, #404]	; 0x194
 8008536:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008834 <__kernel_rem_pio2f+0x318>
 800853a:	1ed1      	subs	r1, r2, #3
 800853c:	2308      	movs	r3, #8
 800853e:	fb91 f1f3 	sdiv	r1, r1, r3
 8008542:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008546:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800854a:	1c4c      	adds	r4, r1, #1
 800854c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008550:	eba1 050a 	sub.w	r5, r1, sl
 8008554:	aa1a      	add	r2, sp, #104	; 0x68
 8008556:	eb09 070a 	add.w	r7, r9, sl
 800855a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800855e:	4696      	mov	lr, r2
 8008560:	2300      	movs	r3, #0
 8008562:	42bb      	cmp	r3, r7
 8008564:	dd0f      	ble.n	8008586 <__kernel_rem_pio2f+0x6a>
 8008566:	af42      	add	r7, sp, #264	; 0x108
 8008568:	2200      	movs	r2, #0
 800856a:	454a      	cmp	r2, r9
 800856c:	dc27      	bgt.n	80085be <__kernel_rem_pio2f+0xa2>
 800856e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008572:	eb0b 0302 	add.w	r3, fp, r2
 8008576:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800857a:	9d02      	ldr	r5, [sp, #8]
 800857c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008834 <__kernel_rem_pio2f+0x318>
 8008580:	f04f 0c00 	mov.w	ip, #0
 8008584:	e015      	b.n	80085b2 <__kernel_rem_pio2f+0x96>
 8008586:	42dd      	cmn	r5, r3
 8008588:	bf5d      	ittte	pl
 800858a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800858e:	ee07 2a90 	vmovpl	s15, r2
 8008592:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008596:	eef0 7a47 	vmovmi.f32	s15, s14
 800859a:	ecee 7a01 	vstmia	lr!, {s15}
 800859e:	3301      	adds	r3, #1
 80085a0:	e7df      	b.n	8008562 <__kernel_rem_pio2f+0x46>
 80085a2:	ecf5 6a01 	vldmia	r5!, {s13}
 80085a6:	ed33 7a01 	vldmdb	r3!, {s14}
 80085aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085ae:	f10c 0c01 	add.w	ip, ip, #1
 80085b2:	45d4      	cmp	ip, sl
 80085b4:	ddf5      	ble.n	80085a2 <__kernel_rem_pio2f+0x86>
 80085b6:	ece7 7a01 	vstmia	r7!, {s15}
 80085ba:	3201      	adds	r2, #1
 80085bc:	e7d5      	b.n	800856a <__kernel_rem_pio2f+0x4e>
 80085be:	ab06      	add	r3, sp, #24
 80085c0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008830 <__kernel_rem_pio2f+0x314>
 80085ca:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800882c <__kernel_rem_pio2f+0x310>
 80085ce:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80085d2:	9303      	str	r3, [sp, #12]
 80085d4:	464d      	mov	r5, r9
 80085d6:	ab56      	add	r3, sp, #344	; 0x158
 80085d8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80085dc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80085e0:	3f01      	subs	r7, #1
 80085e2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80085e6:	00bf      	lsls	r7, r7, #2
 80085e8:	ab56      	add	r3, sp, #344	; 0x158
 80085ea:	19da      	adds	r2, r3, r7
 80085ec:	3a4c      	subs	r2, #76	; 0x4c
 80085ee:	2300      	movs	r3, #0
 80085f0:	1ae9      	subs	r1, r5, r3
 80085f2:	2900      	cmp	r1, #0
 80085f4:	dc4c      	bgt.n	8008690 <__kernel_rem_pio2f+0x174>
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 fa74 	bl	8008ae4 <scalbnf>
 80085fc:	eeb0 8a40 	vmov.f32	s16, s0
 8008600:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008604:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008608:	f7ff f8b8 	bl	800777c <floorf>
 800860c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008610:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008614:	2c00      	cmp	r4, #0
 8008616:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800861a:	edcd 7a01 	vstr	s15, [sp, #4]
 800861e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008622:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008626:	dd48      	ble.n	80086ba <__kernel_rem_pio2f+0x19e>
 8008628:	1e69      	subs	r1, r5, #1
 800862a:	ab06      	add	r3, sp, #24
 800862c:	f1c4 0008 	rsb	r0, r4, #8
 8008630:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008634:	9a01      	ldr	r2, [sp, #4]
 8008636:	fa4c f300 	asr.w	r3, ip, r0
 800863a:	441a      	add	r2, r3
 800863c:	4083      	lsls	r3, r0
 800863e:	9201      	str	r2, [sp, #4]
 8008640:	ebac 0203 	sub.w	r2, ip, r3
 8008644:	ab06      	add	r3, sp, #24
 8008646:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800864a:	f1c4 0307 	rsb	r3, r4, #7
 800864e:	fa42 f803 	asr.w	r8, r2, r3
 8008652:	f1b8 0f00 	cmp.w	r8, #0
 8008656:	dd41      	ble.n	80086dc <__kernel_rem_pio2f+0x1c0>
 8008658:	9b01      	ldr	r3, [sp, #4]
 800865a:	2000      	movs	r0, #0
 800865c:	3301      	adds	r3, #1
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	4601      	mov	r1, r0
 8008662:	4285      	cmp	r5, r0
 8008664:	dc6d      	bgt.n	8008742 <__kernel_rem_pio2f+0x226>
 8008666:	2c00      	cmp	r4, #0
 8008668:	dd04      	ble.n	8008674 <__kernel_rem_pio2f+0x158>
 800866a:	2c01      	cmp	r4, #1
 800866c:	d07e      	beq.n	800876c <__kernel_rem_pio2f+0x250>
 800866e:	2c02      	cmp	r4, #2
 8008670:	f000 8086 	beq.w	8008780 <__kernel_rem_pio2f+0x264>
 8008674:	f1b8 0f02 	cmp.w	r8, #2
 8008678:	d130      	bne.n	80086dc <__kernel_rem_pio2f+0x1c0>
 800867a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800867e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008682:	b359      	cbz	r1, 80086dc <__kernel_rem_pio2f+0x1c0>
 8008684:	4620      	mov	r0, r4
 8008686:	f000 fa2d 	bl	8008ae4 <scalbnf>
 800868a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800868e:	e025      	b.n	80086dc <__kernel_rem_pio2f+0x1c0>
 8008690:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008694:	a806      	add	r0, sp, #24
 8008696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800869a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800869e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80086a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80086a6:	ee10 1a10 	vmov	r1, s0
 80086aa:	ed32 0a01 	vldmdb	r2!, {s0}
 80086ae:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80086b2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80086b6:	3301      	adds	r3, #1
 80086b8:	e79a      	b.n	80085f0 <__kernel_rem_pio2f+0xd4>
 80086ba:	d106      	bne.n	80086ca <__kernel_rem_pio2f+0x1ae>
 80086bc:	1e6b      	subs	r3, r5, #1
 80086be:	aa06      	add	r2, sp, #24
 80086c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086c4:	ea4f 2822 	mov.w	r8, r2, asr #8
 80086c8:	e7c3      	b.n	8008652 <__kernel_rem_pio2f+0x136>
 80086ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80086ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80086d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d6:	da31      	bge.n	800873c <__kernel_rem_pio2f+0x220>
 80086d8:	f04f 0800 	mov.w	r8, #0
 80086dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80086e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e4:	f040 80a8 	bne.w	8008838 <__kernel_rem_pio2f+0x31c>
 80086e8:	1e6b      	subs	r3, r5, #1
 80086ea:	4618      	mov	r0, r3
 80086ec:	2200      	movs	r2, #0
 80086ee:	4548      	cmp	r0, r9
 80086f0:	da4d      	bge.n	800878e <__kernel_rem_pio2f+0x272>
 80086f2:	2a00      	cmp	r2, #0
 80086f4:	f000 8087 	beq.w	8008806 <__kernel_rem_pio2f+0x2ea>
 80086f8:	aa06      	add	r2, sp, #24
 80086fa:	3c08      	subs	r4, #8
 80086fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008700:	2900      	cmp	r1, #0
 8008702:	f000 808d 	beq.w	8008820 <__kernel_rem_pio2f+0x304>
 8008706:	4620      	mov	r0, r4
 8008708:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800870c:	9302      	str	r3, [sp, #8]
 800870e:	f000 f9e9 	bl	8008ae4 <scalbnf>
 8008712:	9b02      	ldr	r3, [sp, #8]
 8008714:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008830 <__kernel_rem_pio2f+0x314>
 8008718:	0099      	lsls	r1, r3, #2
 800871a:	aa42      	add	r2, sp, #264	; 0x108
 800871c:	1850      	adds	r0, r2, r1
 800871e:	1d05      	adds	r5, r0, #4
 8008720:	461c      	mov	r4, r3
 8008722:	2c00      	cmp	r4, #0
 8008724:	f280 80b8 	bge.w	8008898 <__kernel_rem_pio2f+0x37c>
 8008728:	2500      	movs	r5, #0
 800872a:	1b5c      	subs	r4, r3, r5
 800872c:	2c00      	cmp	r4, #0
 800872e:	f2c0 80d8 	blt.w	80088e2 <__kernel_rem_pio2f+0x3c6>
 8008732:	4f3d      	ldr	r7, [pc, #244]	; (8008828 <__kernel_rem_pio2f+0x30c>)
 8008734:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008834 <__kernel_rem_pio2f+0x318>
 8008738:	2400      	movs	r4, #0
 800873a:	e0c6      	b.n	80088ca <__kernel_rem_pio2f+0x3ae>
 800873c:	f04f 0802 	mov.w	r8, #2
 8008740:	e78a      	b.n	8008658 <__kernel_rem_pio2f+0x13c>
 8008742:	ab06      	add	r3, sp, #24
 8008744:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008748:	b949      	cbnz	r1, 800875e <__kernel_rem_pio2f+0x242>
 800874a:	b12b      	cbz	r3, 8008758 <__kernel_rem_pio2f+0x23c>
 800874c:	aa06      	add	r2, sp, #24
 800874e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008752:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008756:	2301      	movs	r3, #1
 8008758:	3001      	adds	r0, #1
 800875a:	4619      	mov	r1, r3
 800875c:	e781      	b.n	8008662 <__kernel_rem_pio2f+0x146>
 800875e:	aa06      	add	r2, sp, #24
 8008760:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008764:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008768:	460b      	mov	r3, r1
 800876a:	e7f5      	b.n	8008758 <__kernel_rem_pio2f+0x23c>
 800876c:	1e68      	subs	r0, r5, #1
 800876e:	ab06      	add	r3, sp, #24
 8008770:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008778:	aa06      	add	r2, sp, #24
 800877a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800877e:	e779      	b.n	8008674 <__kernel_rem_pio2f+0x158>
 8008780:	1e68      	subs	r0, r5, #1
 8008782:	ab06      	add	r3, sp, #24
 8008784:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800878c:	e7f4      	b.n	8008778 <__kernel_rem_pio2f+0x25c>
 800878e:	a906      	add	r1, sp, #24
 8008790:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008794:	3801      	subs	r0, #1
 8008796:	430a      	orrs	r2, r1
 8008798:	e7a9      	b.n	80086ee <__kernel_rem_pio2f+0x1d2>
 800879a:	f10c 0c01 	add.w	ip, ip, #1
 800879e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80087a2:	2a00      	cmp	r2, #0
 80087a4:	d0f9      	beq.n	800879a <__kernel_rem_pio2f+0x27e>
 80087a6:	eb0b 0305 	add.w	r3, fp, r5
 80087aa:	aa1a      	add	r2, sp, #104	; 0x68
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	1898      	adds	r0, r3, r2
 80087b0:	3004      	adds	r0, #4
 80087b2:	1c69      	adds	r1, r5, #1
 80087b4:	3704      	adds	r7, #4
 80087b6:	2200      	movs	r2, #0
 80087b8:	4465      	add	r5, ip
 80087ba:	9005      	str	r0, [sp, #20]
 80087bc:	428d      	cmp	r5, r1
 80087be:	f6ff af0a 	blt.w	80085d6 <__kernel_rem_pio2f+0xba>
 80087c2:	a81a      	add	r0, sp, #104	; 0x68
 80087c4:	eb02 0c03 	add.w	ip, r2, r3
 80087c8:	4484      	add	ip, r0
 80087ca:	9803      	ldr	r0, [sp, #12]
 80087cc:	f8dd e008 	ldr.w	lr, [sp, #8]
 80087d0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80087d4:	9001      	str	r0, [sp, #4]
 80087d6:	ee07 0a90 	vmov	s15, r0
 80087da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087de:	9805      	ldr	r0, [sp, #20]
 80087e0:	edcc 7a00 	vstr	s15, [ip]
 80087e4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008834 <__kernel_rem_pio2f+0x318>
 80087e8:	eb00 0802 	add.w	r8, r0, r2
 80087ec:	f04f 0c00 	mov.w	ip, #0
 80087f0:	45d4      	cmp	ip, sl
 80087f2:	dd0c      	ble.n	800880e <__kernel_rem_pio2f+0x2f2>
 80087f4:	eb02 0c07 	add.w	ip, r2, r7
 80087f8:	a842      	add	r0, sp, #264	; 0x108
 80087fa:	4484      	add	ip, r0
 80087fc:	edcc 7a01 	vstr	s15, [ip, #4]
 8008800:	3101      	adds	r1, #1
 8008802:	3204      	adds	r2, #4
 8008804:	e7da      	b.n	80087bc <__kernel_rem_pio2f+0x2a0>
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	f04f 0c01 	mov.w	ip, #1
 800880c:	e7c7      	b.n	800879e <__kernel_rem_pio2f+0x282>
 800880e:	ecfe 6a01 	vldmia	lr!, {s13}
 8008812:	ed38 7a01 	vldmdb	r8!, {s14}
 8008816:	f10c 0c01 	add.w	ip, ip, #1
 800881a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800881e:	e7e7      	b.n	80087f0 <__kernel_rem_pio2f+0x2d4>
 8008820:	3b01      	subs	r3, #1
 8008822:	e769      	b.n	80086f8 <__kernel_rem_pio2f+0x1dc>
 8008824:	0801791c 	.word	0x0801791c
 8008828:	080178f0 	.word	0x080178f0
 800882c:	43800000 	.word	0x43800000
 8008830:	3b800000 	.word	0x3b800000
 8008834:	00000000 	.word	0x00000000
 8008838:	4260      	negs	r0, r4
 800883a:	eeb0 0a48 	vmov.f32	s0, s16
 800883e:	f000 f951 	bl	8008ae4 <scalbnf>
 8008842:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800882c <__kernel_rem_pio2f+0x310>
 8008846:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800884a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800884e:	db1a      	blt.n	8008886 <__kernel_rem_pio2f+0x36a>
 8008850:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008830 <__kernel_rem_pio2f+0x314>
 8008854:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008858:	aa06      	add	r2, sp, #24
 800885a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800885e:	a906      	add	r1, sp, #24
 8008860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008864:	3408      	adds	r4, #8
 8008866:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800886a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800886e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008872:	ee10 3a10 	vmov	r3, s0
 8008876:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800887a:	1c6b      	adds	r3, r5, #1
 800887c:	ee17 2a90 	vmov	r2, s15
 8008880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008884:	e73f      	b.n	8008706 <__kernel_rem_pio2f+0x1ea>
 8008886:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800888a:	aa06      	add	r2, sp, #24
 800888c:	ee10 3a10 	vmov	r3, s0
 8008890:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008894:	462b      	mov	r3, r5
 8008896:	e736      	b.n	8008706 <__kernel_rem_pio2f+0x1ea>
 8008898:	aa06      	add	r2, sp, #24
 800889a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800889e:	9202      	str	r2, [sp, #8]
 80088a0:	ee07 2a90 	vmov	s15, r2
 80088a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088a8:	3c01      	subs	r4, #1
 80088aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80088ae:	ee20 0a07 	vmul.f32	s0, s0, s14
 80088b2:	ed65 7a01 	vstmdb	r5!, {s15}
 80088b6:	e734      	b.n	8008722 <__kernel_rem_pio2f+0x206>
 80088b8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80088bc:	ecf7 6a01 	vldmia	r7!, {s13}
 80088c0:	ed9c 7a00 	vldr	s14, [ip]
 80088c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80088c8:	3401      	adds	r4, #1
 80088ca:	454c      	cmp	r4, r9
 80088cc:	dc01      	bgt.n	80088d2 <__kernel_rem_pio2f+0x3b6>
 80088ce:	42a5      	cmp	r5, r4
 80088d0:	daf2      	bge.n	80088b8 <__kernel_rem_pio2f+0x39c>
 80088d2:	aa56      	add	r2, sp, #344	; 0x158
 80088d4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80088d8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80088dc:	3501      	adds	r5, #1
 80088de:	3804      	subs	r0, #4
 80088e0:	e723      	b.n	800872a <__kernel_rem_pio2f+0x20e>
 80088e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80088e4:	2a03      	cmp	r2, #3
 80088e6:	d84d      	bhi.n	8008984 <__kernel_rem_pio2f+0x468>
 80088e8:	e8df f002 	tbb	[pc, r2]
 80088ec:	021f1f3e 	.word	0x021f1f3e
 80088f0:	aa56      	add	r2, sp, #344	; 0x158
 80088f2:	4411      	add	r1, r2
 80088f4:	399c      	subs	r1, #156	; 0x9c
 80088f6:	4608      	mov	r0, r1
 80088f8:	461c      	mov	r4, r3
 80088fa:	2c00      	cmp	r4, #0
 80088fc:	dc5f      	bgt.n	80089be <__kernel_rem_pio2f+0x4a2>
 80088fe:	4608      	mov	r0, r1
 8008900:	461c      	mov	r4, r3
 8008902:	2c01      	cmp	r4, #1
 8008904:	dc6b      	bgt.n	80089de <__kernel_rem_pio2f+0x4c2>
 8008906:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008834 <__kernel_rem_pio2f+0x318>
 800890a:	2b01      	cmp	r3, #1
 800890c:	dc77      	bgt.n	80089fe <__kernel_rem_pio2f+0x4e2>
 800890e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008912:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008916:	f1b8 0f00 	cmp.w	r8, #0
 800891a:	d176      	bne.n	8008a0a <__kernel_rem_pio2f+0x4ee>
 800891c:	edc6 6a00 	vstr	s13, [r6]
 8008920:	ed86 7a01 	vstr	s14, [r6, #4]
 8008924:	edc6 7a02 	vstr	s15, [r6, #8]
 8008928:	e02c      	b.n	8008984 <__kernel_rem_pio2f+0x468>
 800892a:	aa56      	add	r2, sp, #344	; 0x158
 800892c:	4411      	add	r1, r2
 800892e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008834 <__kernel_rem_pio2f+0x318>
 8008932:	399c      	subs	r1, #156	; 0x9c
 8008934:	4618      	mov	r0, r3
 8008936:	2800      	cmp	r0, #0
 8008938:	da32      	bge.n	80089a0 <__kernel_rem_pio2f+0x484>
 800893a:	f1b8 0f00 	cmp.w	r8, #0
 800893e:	d035      	beq.n	80089ac <__kernel_rem_pio2f+0x490>
 8008940:	eef1 7a47 	vneg.f32	s15, s14
 8008944:	edc6 7a00 	vstr	s15, [r6]
 8008948:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800894c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008950:	a82f      	add	r0, sp, #188	; 0xbc
 8008952:	2101      	movs	r1, #1
 8008954:	428b      	cmp	r3, r1
 8008956:	da2c      	bge.n	80089b2 <__kernel_rem_pio2f+0x496>
 8008958:	f1b8 0f00 	cmp.w	r8, #0
 800895c:	d001      	beq.n	8008962 <__kernel_rem_pio2f+0x446>
 800895e:	eef1 7a67 	vneg.f32	s15, s15
 8008962:	edc6 7a01 	vstr	s15, [r6, #4]
 8008966:	e00d      	b.n	8008984 <__kernel_rem_pio2f+0x468>
 8008968:	aa56      	add	r2, sp, #344	; 0x158
 800896a:	4411      	add	r1, r2
 800896c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008834 <__kernel_rem_pio2f+0x318>
 8008970:	399c      	subs	r1, #156	; 0x9c
 8008972:	2b00      	cmp	r3, #0
 8008974:	da0e      	bge.n	8008994 <__kernel_rem_pio2f+0x478>
 8008976:	f1b8 0f00 	cmp.w	r8, #0
 800897a:	d001      	beq.n	8008980 <__kernel_rem_pio2f+0x464>
 800897c:	eef1 7a67 	vneg.f32	s15, s15
 8008980:	edc6 7a00 	vstr	s15, [r6]
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	f003 0007 	and.w	r0, r3, #7
 800898a:	b057      	add	sp, #348	; 0x15c
 800898c:	ecbd 8b04 	vpop	{d8-d9}
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	ed31 7a01 	vldmdb	r1!, {s14}
 8008998:	3b01      	subs	r3, #1
 800899a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800899e:	e7e8      	b.n	8008972 <__kernel_rem_pio2f+0x456>
 80089a0:	ed71 7a01 	vldmdb	r1!, {s15}
 80089a4:	3801      	subs	r0, #1
 80089a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089aa:	e7c4      	b.n	8008936 <__kernel_rem_pio2f+0x41a>
 80089ac:	eef0 7a47 	vmov.f32	s15, s14
 80089b0:	e7c8      	b.n	8008944 <__kernel_rem_pio2f+0x428>
 80089b2:	ecb0 7a01 	vldmia	r0!, {s14}
 80089b6:	3101      	adds	r1, #1
 80089b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089bc:	e7ca      	b.n	8008954 <__kernel_rem_pio2f+0x438>
 80089be:	ed50 7a02 	vldr	s15, [r0, #-8]
 80089c2:	ed70 6a01 	vldmdb	r0!, {s13}
 80089c6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80089ca:	3c01      	subs	r4, #1
 80089cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089d0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80089d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d8:	edc0 7a00 	vstr	s15, [r0]
 80089dc:	e78d      	b.n	80088fa <__kernel_rem_pio2f+0x3de>
 80089de:	ed50 7a02 	vldr	s15, [r0, #-8]
 80089e2:	ed70 6a01 	vldmdb	r0!, {s13}
 80089e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80089ea:	3c01      	subs	r4, #1
 80089ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089f0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80089f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f8:	edc0 7a00 	vstr	s15, [r0]
 80089fc:	e781      	b.n	8008902 <__kernel_rem_pio2f+0x3e6>
 80089fe:	ed31 7a01 	vldmdb	r1!, {s14}
 8008a02:	3b01      	subs	r3, #1
 8008a04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a08:	e77f      	b.n	800890a <__kernel_rem_pio2f+0x3ee>
 8008a0a:	eef1 6a66 	vneg.f32	s13, s13
 8008a0e:	eeb1 7a47 	vneg.f32	s14, s14
 8008a12:	edc6 6a00 	vstr	s13, [r6]
 8008a16:	ed86 7a01 	vstr	s14, [r6, #4]
 8008a1a:	eef1 7a67 	vneg.f32	s15, s15
 8008a1e:	e781      	b.n	8008924 <__kernel_rem_pio2f+0x408>

08008a20 <__kernel_sinf>:
 8008a20:	ee10 3a10 	vmov	r3, s0
 8008a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008a2c:	da04      	bge.n	8008a38 <__kernel_sinf+0x18>
 8008a2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a32:	ee17 3a90 	vmov	r3, s15
 8008a36:	b35b      	cbz	r3, 8008a90 <__kernel_sinf+0x70>
 8008a38:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008a3c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008a94 <__kernel_sinf+0x74>
 8008a40:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008a98 <__kernel_sinf+0x78>
 8008a44:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a48:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008a9c <__kernel_sinf+0x7c>
 8008a4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a50:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008aa0 <__kernel_sinf+0x80>
 8008a54:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008a58:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008aa4 <__kernel_sinf+0x84>
 8008a5c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008a60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a64:	b930      	cbnz	r0, 8008a74 <__kernel_sinf+0x54>
 8008a66:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008aa8 <__kernel_sinf+0x88>
 8008a6a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a6e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008a72:	4770      	bx	lr
 8008a74:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008a78:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008a7c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008a80:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008a84:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008aac <__kernel_sinf+0x8c>
 8008a88:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008a8c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	2f2ec9d3 	.word	0x2f2ec9d3
 8008a98:	b2d72f34 	.word	0xb2d72f34
 8008a9c:	3638ef1b 	.word	0x3638ef1b
 8008aa0:	b9500d01 	.word	0xb9500d01
 8008aa4:	3c088889 	.word	0x3c088889
 8008aa8:	be2aaaab 	.word	0xbe2aaaab
 8008aac:	3e2aaaab 	.word	0x3e2aaaab

08008ab0 <matherr>:
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4770      	bx	lr

08008ab4 <fabsf>:
 8008ab4:	ee10 3a10 	vmov	r3, s0
 8008ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008abc:	ee00 3a10 	vmov	s0, r3
 8008ac0:	4770      	bx	lr

08008ac2 <finitef>:
 8008ac2:	ee10 3a10 	vmov	r3, s0
 8008ac6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8008aca:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008ace:	bfac      	ite	ge
 8008ad0:	2000      	movge	r0, #0
 8008ad2:	2001      	movlt	r0, #1
 8008ad4:	4770      	bx	lr
	...

08008ad8 <nanf>:
 8008ad8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ae0 <nanf+0x8>
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	7fc00000 	.word	0x7fc00000

08008ae4 <scalbnf>:
 8008ae4:	b508      	push	{r3, lr}
 8008ae6:	ee10 2a10 	vmov	r2, s0
 8008aea:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008aee:	ed2d 8b02 	vpush	{d8}
 8008af2:	eef0 0a40 	vmov.f32	s1, s0
 8008af6:	d004      	beq.n	8008b02 <scalbnf+0x1e>
 8008af8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008afc:	d306      	bcc.n	8008b0c <scalbnf+0x28>
 8008afe:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008b02:	ecbd 8b02 	vpop	{d8}
 8008b06:	eeb0 0a60 	vmov.f32	s0, s1
 8008b0a:	bd08      	pop	{r3, pc}
 8008b0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b10:	d21c      	bcs.n	8008b4c <scalbnf+0x68>
 8008b12:	4b1f      	ldr	r3, [pc, #124]	; (8008b90 <scalbnf+0xac>)
 8008b14:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b94 <scalbnf+0xb0>
 8008b18:	4298      	cmp	r0, r3
 8008b1a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008b1e:	db10      	blt.n	8008b42 <scalbnf+0x5e>
 8008b20:	ee10 2a90 	vmov	r2, s1
 8008b24:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008b28:	3b19      	subs	r3, #25
 8008b2a:	4403      	add	r3, r0
 8008b2c:	2bfe      	cmp	r3, #254	; 0xfe
 8008b2e:	dd0f      	ble.n	8008b50 <scalbnf+0x6c>
 8008b30:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008b98 <scalbnf+0xb4>
 8008b34:	eeb0 0a48 	vmov.f32	s0, s16
 8008b38:	f000 f834 	bl	8008ba4 <copysignf>
 8008b3c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008b40:	e7df      	b.n	8008b02 <scalbnf+0x1e>
 8008b42:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008b9c <scalbnf+0xb8>
 8008b46:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008b4a:	e7da      	b.n	8008b02 <scalbnf+0x1e>
 8008b4c:	0ddb      	lsrs	r3, r3, #23
 8008b4e:	e7ec      	b.n	8008b2a <scalbnf+0x46>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dd06      	ble.n	8008b62 <scalbnf+0x7e>
 8008b54:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008b58:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008b5c:	ee00 3a90 	vmov	s1, r3
 8008b60:	e7cf      	b.n	8008b02 <scalbnf+0x1e>
 8008b62:	f113 0f16 	cmn.w	r3, #22
 8008b66:	da06      	bge.n	8008b76 <scalbnf+0x92>
 8008b68:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b6c:	4298      	cmp	r0, r3
 8008b6e:	dcdf      	bgt.n	8008b30 <scalbnf+0x4c>
 8008b70:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008b9c <scalbnf+0xb8>
 8008b74:	e7de      	b.n	8008b34 <scalbnf+0x50>
 8008b76:	3319      	adds	r3, #25
 8008b78:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008b7c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008b80:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008ba0 <scalbnf+0xbc>
 8008b84:	ee07 3a10 	vmov	s14, r3
 8008b88:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008b8c:	e7b9      	b.n	8008b02 <scalbnf+0x1e>
 8008b8e:	bf00      	nop
 8008b90:	ffff3cb0 	.word	0xffff3cb0
 8008b94:	4c000000 	.word	0x4c000000
 8008b98:	7149f2ca 	.word	0x7149f2ca
 8008b9c:	0da24260 	.word	0x0da24260
 8008ba0:	33000000 	.word	0x33000000

08008ba4 <copysignf>:
 8008ba4:	ee10 3a10 	vmov	r3, s0
 8008ba8:	ee10 2a90 	vmov	r2, s1
 8008bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bb0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	ee00 3a10 	vmov	s0, r3
 8008bba:	4770      	bx	lr

08008bbc <_init>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	bf00      	nop
 8008bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc2:	bc08      	pop	{r3}
 8008bc4:	469e      	mov	lr, r3
 8008bc6:	4770      	bx	lr

08008bc8 <_fini>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr
