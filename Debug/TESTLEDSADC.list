
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f0e0  08008ae8  08008ae8  00018ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017bc8  08017bc8  00033fcc  2**0
                  CONTENTS
  4 .ARM          00000008  08017bc8  08017bc8  00027bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017bd0  08017bd0  00033fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017bd0  08017bd0  00027bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017bd4  08017bd4  00027bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08017bd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00003ecc  20000100  08017cd8  00030100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000ff00  20003fcc  0801bba4  00033fcc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013ecc  0801bba4  00043ecc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00033fcc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c857  00000000  00000000  00033ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000695f  00000000  00000000  00060853  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00010828  00000000  00000000  000671b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001888  00000000  00000000  000779e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000021d0  00000000  00000000  00079268  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00026037  00000000  00000000  0007b438  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001a3ae  00000000  00000000  000a146f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000cb21b  00000000  00000000  000bb81d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00186a38  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000050bc  00000000  00000000  00186ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20003fcc 	.word	0x20003fcc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ad0 	.word	0x08008ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20003fd0 	.word	0x20003fd0
 80001cc:	08008ad0 	.word	0x08008ad0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <TriggerSound>:
 * @brief  Trigger the sound on
 * @param  None
 * @retval none
 */
void TriggerSound(void)
{
 8000ebc:	b510      	push	{r4, lr}
	if(triggered) {
 8000ebe:	4c0d      	ldr	r4, [pc, #52]	; (8000ef4 <TriggerSound+0x38>)
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <TriggerSound+0x3c>)
 8000ec2:	7822      	ldrb	r2, [r4, #0]
 8000ec4:	b17a      	cbz	r2, 8000ee6 <TriggerSound+0x2a>
		velocity = 0;
 8000ec6:	2200      	movs	r2, #0
		ADSR_keyOff(&adsr);
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <TriggerSound+0x40>)
		velocity = 0;
 8000eca:	701a      	strb	r2, [r3, #0]
		ADSR_keyOff(&adsr);
 8000ecc:	f000 f963 	bl	8001196 <ADSR_keyOff>
	} else {
		velocity = 127;
		ADSR_keyOn(&adsr);
	}

	triggered = !triggered;
 8000ed0:	7822      	ldrb	r2, [r4, #0]
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <TriggerSound+0x44>)
	triggered = !triggered;
 8000ed4:	f082 0201 	eor.w	r2, r2, #1
 8000ed8:	7022      	strb	r2, [r4, #0]
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 8000eda:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8000ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, triggered);
 8000ee2:	f004 bbcb 	b.w	800567c <HAL_GPIO_WritePin>
		velocity = 127;
 8000ee6:	227f      	movs	r2, #127	; 0x7f
		ADSR_keyOn(&adsr);
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <TriggerSound+0x40>)
		velocity = 127;
 8000eea:	701a      	strb	r2, [r3, #0]
		ADSR_keyOn(&adsr);
 8000eec:	f000 f94a 	bl	8001184 <ADSR_keyOn>
 8000ef0:	e7ee      	b.n	8000ed0 <TriggerSound+0x14>
 8000ef2:	bf00      	nop
 8000ef4:	20003fe8 	.word	0x20003fe8
 8000ef8:	20012ac0 	.word	0x20012ac0
 8000efc:	20000100 	.word	0x20000100
 8000f00:	40020800 	.word	0x40020800

08000f04 <PS_Application>:
{
 8000f04:	b508      	push	{r3, lr}
	TriggerSound();
 8000f06:	f7ff ffd9 	bl	8000ebc <TriggerSound>
	HAL_Delay(1000);
 8000f0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8000f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 8000f12:	f004 b8c9 	b.w	80050a8 <HAL_Delay>

08000f16 <MagicFX>:
//}

/*-----------------------------------------------------------------------------*/
void MagicFX(uint8_t val) /* random effects parameters */
{
	if (val == MIDI_MAXi)
 8000f16:	287f      	cmp	r0, #127	; 0x7f
{
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	4604      	mov	r4, r0
	if (val == MIDI_MAXi)
 8000f1c:	d13d      	bne.n	8000f9a <MagicFX+0x84>
	{
		Delay_switch(MIDI_MAXi);
 8000f1e:	f003 f9f7 	bl	8004310 <Delay_switch>
		Delay_time_set(MIDIrandVal());
 8000f22:	f002 fe1f 	bl	8003b64 <MIDIrandVal>
 8000f26:	f001 fa2f 	bl	8002388 <Delay_time_set>
		DelayWet_set(MIDIrandVal());
 8000f2a:	f002 fe1b 	bl	8003b64 <MIDIrandVal>
 8000f2e:	f001 fa65 	bl	80023fc <DelayWet_set>
		DelayFeedback_set(MIDIrandVal());
 8000f32:	f002 fe17 	bl	8003b64 <MIDIrandVal>
 8000f36:	f001 fa51 	bl	80023dc <DelayFeedback_set>

		Chorus_switch(MIDI_MAXi);
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f003 f9fe 	bl	800433c <Chorus_switch>
		ChorusRate_set(MIDIrandVal());
 8000f40:	f002 fe10 	bl	8003b64 <MIDIrandVal>
 8000f44:	f001 f846 	bl	8001fd4 <ChorusRate_set>
		ChorusSecondRate_set(MIDIrandVal());
 8000f48:	f002 fe0c 	bl	8003b64 <MIDIrandVal>
 8000f4c:	f001 f860 	bl	8002010 <ChorusSecondRate_set>
		ChorusDelay_set(MIDIrandVal());
 8000f50:	f002 fe08 	bl	8003b64 <MIDIrandVal>
 8000f54:	f001 f87a 	bl	800204c <ChorusDelay_set>
		ChorusSweep_set(MIDIrandVal());
 8000f58:	f002 fe04 	bl	8003b64 <MIDIrandVal>
 8000f5c:	f001 f8a8 	bl	80020b0 <ChorusSweep_set>
		ChorusFeedback_set(MIDIrandVal());
 8000f60:	f002 fe00 	bl	8003b64 <MIDIrandVal>
 8000f64:	f001 f888 	bl	8002078 <ChorusFeedback_set>
		ChorusMode_switch(MIDIrandVal());
 8000f68:	f002 fdfc 	bl	8003b64 <MIDIrandVal>
 8000f6c:	f001 f8b2 	bl	80020d4 <ChorusMode_switch>
		ChorusFDBsign_switch(MIDIrandVal());
 8000f70:	f002 fdf8 	bl	8003b64 <MIDIrandVal>
 8000f74:	f001 f8c2 	bl	80020fc <ChorusFDBsign_switch>

		Phaser_switch(MIDI_MAXi);
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f003 f9e9 	bl	8004350 <Phaser_switch>
		Phaser_Rate_set(MIDIrandVal());
 8000f7e:	f002 fdf1 	bl	8003b64 <MIDIrandVal>
 8000f82:	f002 fd0b 	bl	800399c <Phaser_Rate_set>
		Phaser_Feedback_set(MIDIrandVal());
 8000f86:	f002 fded 	bl	8003b64 <MIDIrandVal>
 8000f8a:	f002 fd27 	bl	80039dc <Phaser_Feedback_set>
		Phaser_Wet_set(MIDIrandVal());
 8000f8e:	f002 fde9 	bl	8003b64 <MIDIrandVal>
	}
}
 8000f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Phaser_Wet_set(MIDIrandVal());
 8000f96:	f002 bd37 	b.w	8003a08 <Phaser_Wet_set>
}
 8000f9a:	bd10      	pop	{r4, pc}

08000f9c <MagicPatch>:
/*-----------------------------------------------------------------------------*/
void MagicPatch(uint8_t val) /* random sound parameters */
{
	if (val == MIDI_MAXi)
 8000f9c:	287f      	cmp	r0, #127	; 0x7f
{
 8000f9e:	b508      	push	{r3, lr}
	if (val == MIDI_MAXi)
 8000fa0:	f040 80bb 	bne.w	800111a <MagicPatch+0x17e>
	{
		seq_tempo_set(MIDIrandVal());
 8000fa4:	f002 fdde 	bl	8003b64 <MIDIrandVal>
 8000fa8:	f002 ffd0 	bl	8003f4c <seq_tempo_set>
		seq_freqMax_set(MIDIrandVal());
 8000fac:	f002 fdda 	bl	8003b64 <MIDIrandVal>
 8000fb0:	f003 f85e 	bl	8004070 <seq_freqMax_set>
		seq_scale_set(MIDIrandVal());
 8000fb4:	f002 fdd6 	bl	8003b64 <MIDIrandVal>
 8000fb8:	f003 f824 	bl	8004004 <seq_scale_set>
		seq_switchMovingSeq(MIDIrandVal());
 8000fbc:	f002 fdd2 	bl	8003b64 <MIDIrandVal>
 8000fc0:	f003 f83e 	bl	8004040 <seq_switchMovingSeq>
		seq_switchMute(MIDIrandVal());
 8000fc4:	f002 fdce 	bl	8003b64 <MIDIrandVal>
 8000fc8:	f003 f844 	bl	8004054 <seq_switchMute>
		seq_gateTime_set(MIDIrandVal());
 8000fcc:	f002 fdca 	bl	8003b64 <MIDIrandVal>
 8000fd0:	f002 ffe0 	bl	8003f94 <seq_gateTime_set>
		autoSound_set(rand() % 3);
 8000fd4:	f005 ff24 	bl	8006e20 <rand>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	fb90 f3f3 	sdiv	r3, r0, r3
 8000fde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fe2:	1ac0      	subs	r0, r0, r3
 8000fe4:	b240      	sxtb	r0, r0
 8000fe6:	f003 f907 	bl	80041f8 <autoSound_set>
		Sound_set(MIDIrandVal());
 8000fea:	f002 fdbb 	bl	8003b64 <MIDIrandVal>
 8000fee:	f003 f9b9 	bl	8004364 <Sound_set>
		uint8_t snd = soundNumber_get();
 8000ff2:	f003 f907 	bl	8004204 <soundNumber_get>

		if (snd == FM2)
 8000ff6:	280e      	cmp	r0, #14
 8000ff8:	d17c      	bne.n	80010f4 <MagicPatch+0x158>
		{
			FM_OP1_freq_set(MIDIrandVal());
 8000ffa:	f002 fdb3 	bl	8003b64 <MIDIrandVal>
 8000ffe:	f003 f9d3 	bl	80043a8 <FM_OP1_freq_set>
			FM_OP1_modInd_set(MIDIrandVal());
 8001002:	f002 fdaf 	bl	8003b64 <MIDIrandVal>
 8001006:	f003 f9d5 	bl	80043b4 <FM_OP1_modInd_set>
			FM_OP2_freq_set(MIDIrandVal());
 800100a:	f002 fdab 	bl	8003b64 <MIDIrandVal>
 800100e:	f003 f9d7 	bl	80043c0 <FM_OP2_freq_set>
			FM_OP2_modInd_set(MIDIrandVal());
 8001012:	f002 fda7 	bl	8003b64 <MIDIrandVal>
 8001016:	f003 f9e5 	bl	80043e4 <FM_OP2_modInd_set>
			FM_OP3_freq_set(MIDIrandVal());
 800101a:	f002 fda3 	bl	8003b64 <MIDIrandVal>
 800101e:	f003 f9e7 	bl	80043f0 <FM_OP3_freq_set>
			FM_OP3_modInd_set(MIDIrandVal());
 8001022:	f002 fd9f 	bl	8003b64 <MIDIrandVal>
 8001026:	f003 f9f5 	bl	8004414 <FM_OP3_modInd_set>
			FM_OP4_freq_set(MIDIrandVal());
 800102a:	f002 fd9b 	bl	8003b64 <MIDIrandVal>
 800102e:	f003 f9f7 	bl	8004420 <FM_OP4_freq_set>
			FM_OP4_modInd_set(MIDIrandVal());
 8001032:	f002 fd97 	bl	8003b64 <MIDIrandVal>
 8001036:	f003 fa05 	bl	8004444 <FM_OP4_modInd_set>
			Drifter_minFreq_set(MIDIrandVal());
			Drifter_maxFreq_set(MIDIrandVal());
			Drifter_centralFreq_set(MIDIrandVal());
		}

		Filter1Freq_set(MIDIrandVal());
 800103a:	f002 fd93 	bl	8003b64 <MIDIrandVal>
 800103e:	f002 fe1f 	bl	8003c80 <Filter1Freq_set>
		Filter1Res_set(MIDIrandVal());
 8001042:	f002 fd8f 	bl	8003b64 <MIDIrandVal>
 8001046:	f002 fe39 	bl	8003cbc <Filter1Res_set>
		Filter1Drive_set(MIDIrandVal());
 800104a:	f002 fd8b 	bl	8003b64 <MIDIrandVal>
 800104e:	f002 fe45 	bl	8003cdc <Filter1Drive_set>
		Filter1Type_set(MIDIrandVal());
 8001052:	f002 fd87 	bl	8003b64 <MIDIrandVal>
 8001056:	f002 fe47 	bl	8003ce8 <Filter1Type_set>
		Filt1LFO_amp_set(MIDIrandVal());
 800105a:	f002 fd83 	bl	8003b64 <MIDIrandVal>
 800105e:	f003 f8f7 	bl	8004250 <Filt1LFO_amp_set>
		Filt1LFO_freq_set(MIDIrandVal());
 8001062:	f002 fd7f 	bl	8003b64 <MIDIrandVal>
 8001066:	f003 f903 	bl	8004270 <Filt1LFO_freq_set>

		Filter2Freq_set(MIDIrandVal());
 800106a:	f002 fd7b 	bl	8003b64 <MIDIrandVal>
 800106e:	f002 fe4f 	bl	8003d10 <Filter2Freq_set>
		Filter2Res_set(MIDIrandVal());
 8001072:	f002 fd77 	bl	8003b64 <MIDIrandVal>
 8001076:	f002 fe69 	bl	8003d4c <Filter2Res_set>
		Filter2Drive_set(MIDIrandVal());
 800107a:	f002 fd73 	bl	8003b64 <MIDIrandVal>
 800107e:	f002 fe75 	bl	8003d6c <Filter2Drive_set>
		Filter2Type_set(MIDIrandVal());
 8001082:	f002 fd6f 	bl	8003b64 <MIDIrandVal>
 8001086:	f002 fe77 	bl	8003d78 <Filter2Type_set>
		Filt2LFO_amp_set(MIDIrandVal());
 800108a:	f002 fd6b 	bl	8003b64 <MIDIrandVal>
 800108e:	f003 f8ff 	bl	8004290 <Filt2LFO_amp_set>
		Filt2LFO_freq_set(MIDIrandVal());
 8001092:	f002 fd67 	bl	8003b64 <MIDIrandVal>
 8001096:	f003 f90b 	bl	80042b0 <Filt2LFO_freq_set>

		Filter_Random_switch(MIDIrandVal());
 800109a:	f002 fd63 	bl	8003b64 <MIDIrandVal>
 800109e:	f003 f943 	bl	8004328 <Filter_Random_switch>

		AttTime_set((uint8_t)lrintf(frand_a_b(0, MIDI_MAX / 10)));
 80010a2:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800111c <MagicPatch+0x180>
 80010a6:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001120 <MagicPatch+0x184>
 80010aa:	f002 fd45 	bl	8003b38 <frand_a_b>
 80010ae:	f006 fb31 	bl	8007714 <lrintf>
 80010b2:	b2c0      	uxtb	r0, r0
 80010b4:	f000 f878 	bl	80011a8 <AttTime_set>
		DecTime_set(MIDIrandVal());
 80010b8:	f002 fd54 	bl	8003b64 <MIDIrandVal>
 80010bc:	f000 f894 	bl	80011e8 <DecTime_set>
		SustLevel_set(MIDIrandVal());
 80010c0:	f002 fd50 	bl	8003b64 <MIDIrandVal>
 80010c4:	f000 f8c4 	bl	8001250 <SustLevel_set>
		RelTime_set(MIDIrandVal());
 80010c8:	f002 fd4c 	bl	8003b64 <MIDIrandVal>
 80010cc:	f000 f8d0 	bl	8001270 <RelTime_set>

		VibratoAmp_set(MIDIrandVal());
 80010d0:	f002 fd48 	bl	8003b64 <MIDIrandVal>
 80010d4:	f003 f8fc 	bl	80042d0 <VibratoAmp_set>
		VibratoFreq_set(MIDIrandVal());
 80010d8:	f002 fd44 	bl	8003b64 <MIDIrandVal>
 80010dc:	f003 f908 	bl	80042f0 <VibratoFreq_set>

		AmpLFO_amp_set(MIDIrandVal());
 80010e0:	f002 fd40 	bl	8003b64 <MIDIrandVal>
 80010e4:	f003 f894 	bl	8004210 <AmpLFO_amp_set>
		AmpLFO_freq_set(MIDIrandVal());
 80010e8:	f002 fd3c 	bl	8003b64 <MIDIrandVal>
	}
}
 80010ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		AmpLFO_freq_set(MIDIrandVal());
 80010f0:	f003 b89e 	b.w	8004230 <AmpLFO_freq_set>
		else if (snd == DRIFTERS)
 80010f4:	280d      	cmp	r0, #13
 80010f6:	d1a0      	bne.n	800103a <MagicPatch+0x9e>
			Drifter_amp_set(MIDIrandVal());
 80010f8:	f002 fd34 	bl	8003b64 <MIDIrandVal>
 80010fc:	f001 f9ea 	bl	80024d4 <Drifter_amp_set>
			Drifter_minFreq_set(MIDIrandVal());
 8001100:	f002 fd30 	bl	8003b64 <MIDIrandVal>
 8001104:	f001 f9fc 	bl	8002500 <Drifter_minFreq_set>
			Drifter_maxFreq_set(MIDIrandVal());
 8001108:	f002 fd2c 	bl	8003b64 <MIDIrandVal>
 800110c:	f001 fa14 	bl	8002538 <Drifter_maxFreq_set>
			Drifter_centralFreq_set(MIDIrandVal());
 8001110:	f002 fd28 	bl	8003b64 <MIDIrandVal>
 8001114:	f001 ff2e 	bl	8002f74 <Drifter_centralFreq_set>
 8001118:	e78f      	b.n	800103a <MagicPatch+0x9e>
}
 800111a:	bd08      	pop	{r3, pc}
 800111c:	414b3333 	.word	0x414b3333
 8001120:	00000000 	.word	0x00000000

08001124 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2)
 8001124:	6802      	ldr	r2, [r0, #0]
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_I2S_TxCpltCallback+0x14>)
 8001128:	429a      	cmp	r2, r3
 800112a:	d104      	bne.n	8001136 <HAL_I2S_TxCpltCallback+0x12>
  {
    /* Call the user function which will manage directly transfer complete */
	  make_sound((uint16_t *)(audiobuff + BUFF_LEN_DIV2), BUFF_LEN_DIV4);
 800112c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <HAL_I2S_TxCpltCallback+0x18>)
 8001132:	f003 bad9 	b.w	80046e8 <make_sound>
  }
}
 8001136:	4770      	bx	lr
 8001138:	40003800 	.word	0x40003800
 800113c:	20013292 	.word	0x20013292

08001140 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2)
 8001140:	6802      	ldr	r2, [r0, #0]
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_I2S_TxHalfCpltCallback+0x14>)
 8001144:	429a      	cmp	r2, r3
 8001146:	d104      	bne.n	8001152 <HAL_I2S_TxHalfCpltCallback+0x12>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  	make_sound((uint16_t *)audiobuff, BUFF_LEN_DIV4);
 8001148:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <HAL_I2S_TxHalfCpltCallback+0x18>)
 800114e:	f003 bacb 	b.w	80046e8 <make_sound>
  }
}
 8001152:	4770      	bx	lr
 8001154:	40003800 	.word	0x40003800
 8001158:	20012ac2 	.word	0x20012ac2

0800115c <ADSR_init>:

/*---------------------------------------------------------------------------*/

void ADSR_init(ADSR_t *env)
{
  env->target_ = 0.0;
 800115c:	2300      	movs	r3, #0
 800115e:	6183      	str	r3, [r0, #24]
  env->value_ = 0.0;
 8001160:	6103      	str	r3, [r0, #16]
  env->attackRate_ = 0.001;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <ADSR_init+0x20>)
 8001164:	6003      	str	r3, [r0, #0]
  env->decayRate_ = 0.001;
 8001166:	6043      	str	r3, [r0, #4]
  env->sustainLevel_ = 0.5;
 8001168:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800116c:	6083      	str	r3, [r0, #8]
  env->releaseRate_ = 0.01;
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <ADSR_init+0x24>)
 8001170:	60c3      	str	r3, [r0, #12]
  env->state_ = ATTACK;
 8001172:	2300      	movs	r3, #0
  env->cnt_ = 0;
 8001174:	e9c0 3308 	strd	r3, r3, [r0, #32]
  //env->gateTime_ = 10000;
}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	3a83126f 	.word	0x3a83126f
 8001180:	3c23d70a 	.word	0x3c23d70a

08001184 <ADSR_keyOn>:

void ADSR_keyOn(ADSR_t *env)
{
	env->cnt_ = 0;
	env->target_ = 1.0f;
 8001184:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	env->cnt_ = 0;
 8001188:	2300      	movs	r3, #0
	env->target_ = 1.0f;
 800118a:	6182      	str	r2, [r0, #24]
	env->rate_ = 	env->attackRate_;
 800118c:	6802      	ldr	r2, [r0, #0]
	env->cnt_ = 0;
 800118e:	6243      	str	r3, [r0, #36]	; 0x24
	env->rate_ = 	env->attackRate_;
 8001190:	61c2      	str	r2, [r0, #28]
	env->state_ = ATTACK;
 8001192:	6203      	str	r3, [r0, #32]
}
 8001194:	4770      	bx	lr

08001196 <ADSR_keyOff>:

void ADSR_keyOff(ADSR_t *env)
{
	env->cnt_ = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	6243      	str	r3, [r0, #36]	; 0x24
	env->target_ = 0.0;
 800119a:	2300      	movs	r3, #0
 800119c:	6183      	str	r3, [r0, #24]
	env->rate_ = 	env->releaseRate_;
 800119e:	68c3      	ldr	r3, [r0, #12]
 80011a0:	61c3      	str	r3, [r0, #28]
	env->state_ = RELEASE;
 80011a2:	2303      	movs	r3, #3
 80011a4:	6203      	str	r3, [r0, #32]
}
 80011a6:	4770      	bx	lr

080011a8 <AttTime_set>:
  return env->state_;
}

void AttTime_set(uint8_t val)
{
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 80011a8:	ee07 0a90 	vmov	s15, r0
 80011ac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80011d8 <AttTime_set+0x30>
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <AttTime_set+0x34>)
	ADSR_setAttackTime(&adsr, val/MIDI_MAX + 0.0001f);
 80011b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011e0 <AttTime_set+0x38>
 80011be:	ee77 7a87 	vadd.f32	s15, s15, s14
	env->attackRate_ = 1.0 / ( time * SAMPLERATE );
 80011c2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011e4 <AttTime_set+0x3c>
 80011c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011d2:	ed83 7a00 	vstr	s14, [r3]
}
 80011d6:	4770      	bx	lr
 80011d8:	42fe0000 	.word	0x42fe0000
 80011dc:	20000100 	.word	0x20000100
 80011e0:	38d1b717 	.word	0x38d1b717
 80011e4:	472c4400 	.word	0x472c4400

080011e8 <DecTime_set>:
void DecTime_set(uint8_t val)
{
 80011e8:	b508      	push	{r3, lr}
	ADSR_setDecayTime(&adsr, .2*val/MIDI_MAX + 0.0001f);
 80011ea:	f7ff f993 	bl	8000514 <__aeabi_i2d>
 80011ee:	a312      	add	r3, pc, #72	; (adr r3, 8001238 <DecTime_set+0x50>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff f9f8 	bl	80005e8 <__aeabi_dmul>
 80011f8:	a311      	add	r3, pc, #68	; (adr r3, 8001240 <DecTime_set+0x58>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff fb1d 	bl	800083c <__aeabi_ddiv>
 8001202:	a311      	add	r3, pc, #68	; (adr r3, 8001248 <DecTime_set+0x60>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f838 	bl	800027c <__adddf3>
 800120c:	f7ff fc86 	bl	8000b1c <__aeabi_d2f>
	env->decayRate_ = 1.0 / ( time * SAMPLERATE );
 8001210:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001230 <DecTime_set+0x48>
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <DecTime_set+0x4c>)
 8001216:	ee07 0a10 	vmov	s14, r0
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001226:	ed83 7a01 	vstr	s14, [r3, #4]
}
 800122a:	bd08      	pop	{r3, pc}
 800122c:	f3af 8000 	nop.w
 8001230:	472c4400 	.word	0x472c4400
 8001234:	20000100 	.word	0x20000100
 8001238:	9999999a 	.word	0x9999999a
 800123c:	3fc99999 	.word	0x3fc99999
 8001240:	00000000 	.word	0x00000000
 8001244:	405fc000 	.word	0x405fc000
 8001248:	e0000000 	.word	0xe0000000
 800124c:	3f1a36e2 	.word	0x3f1a36e2

08001250 <SustLevel_set>:
void SustLevel_set(uint8_t val)
{
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 8001250:	ee07 0a90 	vmov	s15, r0
 8001254:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001268 <SustLevel_set+0x18>
	env->sustainLevel_ = level;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <SustLevel_set+0x1c>)
	ADSR_setSustainLevel(&adsr, val/MIDI_MAX);
 800125a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800125e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	env->sustainLevel_ = level;
 8001262:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001266:	4770      	bx	lr
 8001268:	42fe0000 	.word	0x42fe0000
 800126c:	20000100 	.word	0x20000100

08001270 <RelTime_set>:
void RelTime_set(uint8_t val)
{
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 8001270:	ee06 0a90 	vmov	s13, r0
 8001274:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012a0 <RelTime_set+0x30>
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <RelTime_set+0x34>)
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 800127a:	eefa 6aef 	vcvt.f32.s32	s13, s13, #1
 800127e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001282:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80012a8 <RelTime_set+0x38>
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 8001286:	edd3 6a02 	vldr	s13, [r3, #8]
	ADSR_setReleaseTime(&adsr, .5f * val/MIDI_MAX + 0.0001f);
 800128a:	ee77 7a87 	vadd.f32	s15, s15, s14
	env->releaseRate_ = env->sustainLevel_ / ( time * SAMPLERATE );
 800128e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012ac <RelTime_set+0x3c>
 8001292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800129a:	ed83 7a03 	vstr	s14, [r3, #12]
}
 800129e:	4770      	bx	lr
 80012a0:	42fe0000 	.word	0x42fe0000
 80012a4:	20000100 	.word	0x20000100
 80012a8:	38d1b717 	.word	0x38d1b717
 80012ac:	472c4400 	.word	0x472c4400

080012b0 <ADSR_computeSample>:
/*--------------------------------------------------------------------------------------*/
float ADSR_computeSample(ADSR_t *env)
{
	(env->cnt_)++;
 80012b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012b2:	edd0 7a04 	vldr	s15, [r0, #16]
 80012b6:	3301      	adds	r3, #1
 80012b8:	6243      	str	r3, [r0, #36]	; 0x24

	switch (env->state_) {
 80012ba:	6a03      	ldr	r3, [r0, #32]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d018      	beq.n	80012f2 <ADSR_computeSample+0x42>
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d029      	beq.n	8001318 <ADSR_computeSample+0x68>
 80012c4:	bb9b      	cbnz	r3, 800132e <ADSR_computeSample+0x7e>

  case ATTACK:
	  env->value_ += env->rate_;
 80012c6:	ed90 7a07 	vldr	s14, [r0, #28]
 80012ca:	ee77 7a87 	vadd.f32	s15, s15, s14
    if (env->value_ >= env->target_)
 80012ce:	ed90 7a06 	vldr	s14, [r0, #24]
	  env->value_ += env->rate_;
 80012d2:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ >= env->target_)
 80012d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	db26      	blt.n	800132e <ADSR_computeSample+0x7e>
    {
    	env->value_ = env->target_;
    	env->rate_ = env->decayRate_;
 80012e0:	6843      	ldr	r3, [r0, #4]
 80012e2:	61c3      	str	r3, [r0, #28]
    	env->target_ = env->sustainLevel_;
 80012e4:	6883      	ldr	r3, [r0, #8]
 80012e6:	6183      	str	r3, [r0, #24]
    	env->value_ = env->target_;
 80012e8:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->state_ = DECAY;
 80012ec:	2301      	movs	r3, #1
  case RELEASE:
	  env->value_ -= env->releaseRate_;
    if (env->value_ <= 0.0f)
    {
    	env->value_ =  0.0f;
    	env->state_ = DONE;
 80012ee:	6203      	str	r3, [r0, #32]
 80012f0:	e01d      	b.n	800132e <ADSR_computeSample+0x7e>
	  env->value_ -= env->decayRate_;
 80012f2:	ed90 7a01 	vldr	s14, [r0, #4]
 80012f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (env->value_ <= env->sustainLevel_)
 80012fa:	ed90 7a02 	vldr	s14, [r0, #8]
	  env->value_ -= env->decayRate_;
 80012fe:	edc0 7a04 	vstr	s15, [r0, #16]
    if (env->value_ <= env->sustainLevel_)
 8001302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	d810      	bhi.n	800132e <ADSR_computeSample+0x7e>
    	env->rate_ = 0.0f;
 800130c:	2300      	movs	r3, #0
 800130e:	61c3      	str	r3, [r0, #28]
    	env->value_ = env->sustainLevel_;
 8001310:	ed80 7a04 	vstr	s14, [r0, #16]
    	env->state_ = SUSTAIN;
 8001314:	2302      	movs	r3, #2
 8001316:	e7ea      	b.n	80012ee <ADSR_computeSample+0x3e>
	  env->value_ -= env->releaseRate_;
 8001318:	ed90 7a03 	vldr	s14, [r0, #12]
 800131c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (env->value_ <= 0.0f)
 8001320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	d906      	bls.n	8001338 <ADSR_computeSample+0x88>
	  env->value_ -= env->releaseRate_;
 800132a:	edc0 7a04 	vstr	s15, [r0, #16]
    }
  }

  env->lastOutput_ = env->value_;
 800132e:	ed90 0a04 	vldr	s0, [r0, #16]
 8001332:	ed80 0a05 	vstr	s0, [r0, #20]
  return env->value_;
}
 8001336:	4770      	bx	lr
    	env->value_ =  0.0f;
 8001338:	2300      	movs	r3, #0
 800133a:	6103      	str	r3, [r0, #16]
    	env->state_ = DONE;
 800133c:	2304      	movs	r3, #4
 800133e:	e7d6      	b.n	80012ee <ADSR_computeSample+0x3e>

08001340 <place_step_dd>:

/**======================================================================================================**/


void place_step_dd(float *buffer, int index, float phase, float w, float scale)
{
 8001340:	b538      	push	{r3, r4, r5, lr}
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 8001342:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80013ac <place_step_dd+0x6c>
 8001346:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 800134a:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
 800134e:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
 8001352:	4604      	mov	r4, r0
 8001354:	460d      	mov	r5, r1
	i = lrintf(r - 0.5f);
 8001356:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800135a:	ee38 0a40 	vsub.f32	s0, s16, s0
{
 800135e:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
 8001362:	f006 f9d7 	bl	8007714 <lrintf>
	r -= (float)i;
 8001366:	ee07 0a90 	vmov	s15, r0
 800136a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <place_step_dd+0x70>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8001370:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8001374:	ee38 8a60 	vsub.f32	s16, s16, s1
 8001378:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800137c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	 *    index++;
	 *  }
	 */

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 8001380:	edd3 6a00 	vldr	s13, [r3]
 8001384:	ed13 7a01 	vldr	s14, [r3, #-4]
 8001388:	edd1 7a00 	vldr	s15, [r1]
 800138c:	eea6 7a88 	vfma.f32	s14, s13, s16
		i += MINBLEP_PHASES;
 8001390:	3040      	adds	r0, #64	; 0x40
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 8001392:	f5b0 5f90 	cmp.w	r0, #4608	; 0x1200
 8001396:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 800139a:	eee7 7a28 	vfma.f32	s15, s14, s17
 800139e:	ece1 7a01 	vstmia	r1!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 80013a2:	dbed      	blt.n	8001380 <place_step_dd+0x40>
		index++;
	}
}
 80013a4:	ecbd 8b02 	vpop	{d8}
 80013a8:	bd38      	pop	{r3, r4, r5, pc}
 80013aa:	bf00      	nop
 80013ac:	42800000 	.word	0x42800000
 80013b0:	0800d2f0 	.word	0x0800d2f0

080013b4 <place_slope_dd>:
//----------------------------------------------------------------------------------------------------------

void place_slope_dd(float *buffer, int index, float phase, float w, float slope_delta)
{
 80013b4:	b538      	push	{r3, r4, r5, lr}
	float r;
	int i;

	r = MINBLEP_PHASES * phase / w;
 80013b6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800142c <place_slope_dd+0x78>
 80013ba:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80013be:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
 80013c2:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
	i = lrintf(r - 0.5f);
 80013ca:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80013ce:	ee38 0ac0 	vsub.f32	s0, s17, s0
{
 80013d2:	eeb0 8a60 	vmov.f32	s16, s1
 80013d6:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
 80013da:	f006 f99b 	bl	8007714 <lrintf>
	r -= (float)i;
 80013de:	ee07 0a90 	vmov	s15, r0
 80013e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <place_slope_dd+0x7c>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80013e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80013ec:	ee78 8ae7 	vsub.f32	s17, s17, s15

	slope_delta *= w;
 80013f0:	ee28 8a09 	vmul.f32	s16, s16, s18
 80013f4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80013f8:	eb03 0380 	add.w	r3, r3, r0, lsl #2

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	edd3 6a01 	vldr	s13, [r3, #4]
 8001404:	ed91 7a00 	vldr	s14, [r1]
 8001408:	ee76 6ae7 	vsub.f32	s13, s13, s15
		i += MINBLEP_PHASES;
 800140c:	3040      	adds	r0, #64	; 0x40
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 800140e:	eee6 7aa8 	vfma.f32	s15, s13, s17
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 8001412:	f5b0 5f8e 	cmp.w	r0, #4544	; 0x11c0
 8001416:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
 800141a:	eea7 7a88 	vfma.f32	s14, s15, s16
 800141e:	eca1 7a01 	vstmia	r1!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
 8001422:	dbeb      	blt.n	80013fc <place_slope_dd+0x48>
		index++;
	}
}
 8001424:	ecbd 8b04 	vpop	{d8-d9}
 8001428:	bd38      	pop	{r3, r4, r5, pc}
 800142a:	bf00      	nop
 800142c:	42800000 	.word	0x42800000
 8001430:	08008be8 	.word	0x08008be8

08001434 <VCO_blepsaw_Init>:

/* ==== hard-sync-capable sawtooth oscillator ==== */

void VCO_blepsaw_Init(VCO_blepsaw_t *vco)
{
	vco->_init = true;
 8001434:	2301      	movs	r3, #1
 8001436:	f880 3548 	strb.w	r3, [r0, #1352]	; 0x548
	vco->amp = 1.0f;
 800143a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800143e:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <VCO_blepsaw_Init+0x28>)
 8001442:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 8001444:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 8001446:	2300      	movs	r3, #0
 8001448:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 800144a:	6203      	str	r3, [r0, #32]
	vco->_j = 0;
 800144c:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001450:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001454:	3024      	adds	r0, #36	; 0x24
 8001456:	f005 bcda 	b.w	8006e0e <memset>
 800145a:	bf00      	nop
 800145c:	43dc0000 	.word	0x43dc0000

08001460 <VCO_blepsaw_SampleCompute>:
}

//----------------------------------------------------------------------------------------------------------

float VCO_blepsaw_SampleCompute(VCO_blepsaw_t *vco)
{
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001462:	ed90 7a03 	vldr	s14, [r0, #12]
 8001466:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8001610 <VCO_blepsaw_SampleCompute+0x1b0>
	freq = vco->freq;

	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 800146a:	f8d0 5544 	ldr.w	r5, [r0, #1348]	; 0x544
{
 800146e:	ed2d 8b06 	vpush	{d8-d10}
 8001472:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8001476:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001478:	edd0 aa04 	vldr	s21, [r0, #16]
	z = vco->_z;  /* low pass filter state */
 800147c:	edd0 9a08 	vldr	s19, [r0, #32]
 8001480:	ee19 0a10 	vmov	r0, s18
 8001484:	f7ff f858 	bl	8000538 <__aeabi_f2d>

	if (vco->_init) {
 8001488:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
 800148c:	4606      	mov	r6, r0
 800148e:	460f      	mov	r7, r1
 8001490:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001494:	2b00      	cmp	r3, #0
 8001496:	d17f      	bne.n	8001598 <VCO_blepsaw_SampleCompute+0x138>
	p = vco->_p;  /* phase [0, 1) */
 8001498:	ed94 8a06 	vldr	s16, [r4, #24]
	w = vco->_w;  /* phase increment */
 800149c:	edd4 8a07 	vldr	s17, [r4, #28]

	//a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 80014a0:	a359      	add	r3, pc, #356	; (adr r3, 8001608 <VCO_blepsaw_SampleCompute+0x1a8>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	4630      	mov	r0, r6
 80014a8:	4639      	mov	r1, r7
 80014aa:	f7ff fb0f 	bl	8000acc <__aeabi_dcmplt>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	f040 808a 	bne.w	80015c8 <VCO_blepsaw_SampleCompute+0x168>
	if (t > 0.5) t = 0.5;
 80014b4:	eeb4 9a4a 	vcmp.f32	s18, s20
 80014b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80014c0:	bfc8      	it	gt
 80014c2:	eeb0 9a67 	vmovgt.f32	s18, s15
	dw = (t - w); // n= 1
 80014c6:	ee39 9a68 	vsub.f32	s18, s18, s17
	w += dw;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 80014ca:	eddf 7a52 	vldr	s15, [pc, #328]	; 8001614 <VCO_blepsaw_SampleCompute+0x1b4>
	w += dw;
 80014ce:	ee78 8a89 	vadd.f32	s17, s17, s18
	if (syncin >= 1e-20f) {  /* sync to master */
 80014d2:	eef4 aae7 	vcmpe.f32	s21, s15
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	p += w;
 80014da:	ee38 8a28 	vadd.f32	s16, s16, s17
 80014de:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	if (syncin >= 1e-20f) {  /* sync to master */
 80014e2:	db74      	blt.n	80015ce <VCO_blepsaw_SampleCompute+0x16e>

		float eof_offset = (syncin - 1e-20f) * w;
 80014e4:	ee3a 9ae7 	vsub.f32	s18, s21, s15
 80014e8:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80014ec:	ee29 9a28 	vmul.f32	s18, s18, s17
		float p_at_reset = p - eof_offset;
 80014f0:	ee38 8a49 	vsub.f32	s16, s16, s18
		p = eof_offset;

		/* place any DD that may have occurred in subsample before reset */
		if (p_at_reset >= 1.0f) {
 80014f4:	eeb4 8ac1 	vcmpe.f32	s16, s2
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	db09      	blt.n	8001512 <VCO_blepsaw_SampleCompute+0xb2>
			p_at_reset -= 1.0f;
 80014fe:	ee38 8a41 	vsub.f32	s16, s16, s2
			place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001502:	eef0 0a68 	vmov.f32	s1, s17
 8001506:	ee39 0a08 	vadd.f32	s0, s18, s16
 800150a:	4629      	mov	r1, r5
 800150c:	4630      	mov	r0, r6
 800150e:	f7ff ff17 	bl	8001340 <place_step_dd>
		}

		/* now place reset DD */
		place_step_dd(vco->_f, j, p, w, p_at_reset);
 8001512:	eeb0 1a48 	vmov.f32	s2, s16
 8001516:	eef0 0a68 	vmov.f32	s1, s17
 800151a:	eeb0 0a49 	vmov.f32	s0, s18
 800151e:	4629      	mov	r1, r5
 8001520:	4630      	mov	r0, r6
 8001522:	f7ff ff0d 	bl	8001340 <place_step_dd>

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001526:	edc4 aa05 	vstr	s21, [r4, #20]
 800152a:	eb04 0385 	add.w	r3, r4, r5, lsl #2

	} else {

		vco->syncout = 0.0f;
	}
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 800152e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001532:	ee3a 7a49 	vsub.f32	s14, s20, s18

	z += a * (vco->_f[j] - z); // LP filtering
	vco->out = vco->amp * z;

	if (++j == FILLEN)
 8001536:	3501      	adds	r5, #1
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 8001538:	ee77 7a87 	vadd.f32	s15, s15, s14
	if (++j == FILLEN)
 800153c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	vco->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 8001540:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	z += a * (vco->_f[j] - z); // LP filtering
 8001544:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	vco->out = vco->amp * z;
 8001548:	ed94 8a01 	vldr	s16, [r4, #4]
	z += a * (vco->_f[j] - z); // LP filtering
 800154c:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8001550:	eee7 9a8a 	vfma.f32	s19, s15, s20
	vco->out = vco->amp * z;
 8001554:	ee29 8a88 	vmul.f32	s16, s19, s16
 8001558:	ed84 8a00 	vstr	s16, [r4]
	if (++j == FILLEN)
 800155c:	d10f      	bne.n	800157e <VCO_blepsaw_SampleCompute+0x11e>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 800155e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001562:	f204 4124 	addw	r1, r4, #1060	; 0x424
 8001566:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800156a:	f005 fc45 	bl	8006df8 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 800156e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001572:	2100      	movs	r1, #0
 8001574:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8001578:	f005 fc49 	bl	8006e0e <memset>
		j = 0;
 800157c:	2500      	movs	r5, #0
	vco->_w = w;
	vco->_z = z;
	vco->_j = j;

	return vco->out;
}
 800157e:	eeb0 0a48 	vmov.f32	s0, s16
	vco->_p = p;
 8001582:	ed84 9a06 	vstr	s18, [r4, #24]
	vco->_w = w;
 8001586:	edc4 8a07 	vstr	s17, [r4, #28]
	vco->_z = z;
 800158a:	edc4 9a08 	vstr	s19, [r4, #32]
}
 800158e:	ecbd 8b06 	vpop	{d8-d10}
	vco->_j = j;
 8001592:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
}
 8001596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (w < 1e-5) w = 1e-5;
 8001598:	a31b      	add	r3, pc, #108	; (adr r3, 8001608 <VCO_blepsaw_SampleCompute+0x1a8>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff fa95 	bl	8000acc <__aeabi_dcmplt>
 80015a2:	b970      	cbnz	r0, 80015c2 <VCO_blepsaw_SampleCompute+0x162>
		if (w > 0.5) w = 0.5;
 80015a4:	eeb4 9aca 	vcmpe.f32	s18, s20
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		w = freq / SAMPLERATE;
 80015ac:	bfd4      	ite	le
 80015ae:	eef0 8a49 	vmovle.f32	s17, s18
 80015b2:	eef0 8a4a 	vmovgt.f32	s17, s20
		vco->_init = false;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		p = 0.5f;
 80015bc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80015c0:	e76e      	b.n	80014a0 <VCO_blepsaw_SampleCompute+0x40>
		if (w < 1e-5) w = 1e-5;
 80015c2:	eddf 8a15 	vldr	s17, [pc, #84]	; 8001618 <VCO_blepsaw_SampleCompute+0x1b8>
 80015c6:	e7f6      	b.n	80015b6 <VCO_blepsaw_SampleCompute+0x156>
	if (t < 1e-5) t = 1e-5;
 80015c8:	ed9f 9a13 	vldr	s18, [pc, #76]	; 8001618 <VCO_blepsaw_SampleCompute+0x1b8>
 80015cc:	e77b      	b.n	80014c6 <VCO_blepsaw_SampleCompute+0x66>
	} else if (p >= 1.0f) {  /* normal phase reset */
 80015ce:	eeb4 8ac1 	vcmpe.f32	s16, s2
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	db11      	blt.n	80015fc <VCO_blepsaw_SampleCompute+0x19c>
		p -= 1.0f;
 80015d8:	ee38 9a41 	vsub.f32	s18, s16, s2
		place_step_dd(vco->_f, j, p, w, 1.0f);
 80015dc:	eef0 0a68 	vmov.f32	s1, s17
		vco->syncout = p / w + 1e-20f;
 80015e0:	ee89 7a28 	vdiv.f32	s14, s18, s17
		place_step_dd(vco->_f, j, p, w, 1.0f);
 80015e4:	4629      	mov	r1, r5
 80015e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80015ea:	eeb0 0a49 	vmov.f32	s0, s18
		vco->syncout = p / w + 1e-20f;
 80015ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f2:	edc4 7a05 	vstr	s15, [r4, #20]
		place_step_dd(vco->_f, j, p, w, 1.0f);
 80015f6:	f7ff fea3 	bl	8001340 <place_step_dd>
 80015fa:	e796      	b.n	800152a <VCO_blepsaw_SampleCompute+0xca>
		vco->syncout = 0.0f;
 80015fc:	2300      	movs	r3, #0
 80015fe:	6163      	str	r3, [r4, #20]
	p += w;
 8001600:	eeb0 9a48 	vmov.f32	s18, s16
 8001604:	e791      	b.n	800152a <VCO_blepsaw_SampleCompute+0xca>
 8001606:	bf00      	nop
 8001608:	88e368f1 	.word	0x88e368f1
 800160c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001610:	472c4400 	.word	0x472c4400
 8001614:	1e3ce508 	.word	0x1e3ce508
 8001618:	3727c5ac 	.word	0x3727c5ac

0800161c <VCO_bleprect_Init>:
//----------------------------------------------------------------------------------------------------------
/* ==== variable-width, hard-sync-capable rectangular oscillator ==== */

void VCO_bleprect_Init(VCO_bleprect_t *vco)
{
	vco->_init = true;
 800161c:	2301      	movs	r3, #1
 800161e:	f880 3558 	strb.w	r3, [r0, #1368]	; 0x558
	vco->amp = 1.0f;
 8001622:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001626:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <VCO_bleprect_Init+0x28>)
 800162a:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 800162c:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 800162e:	2300      	movs	r3, #0
 8001630:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 8001632:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001634:	62c3      	str	r3, [r0, #44]	; 0x2c
	vco->_j = 0;
 8001636:	f8c0 1550 	str.w	r1, [r0, #1360]	; 0x550
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 800163a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800163e:	3030      	adds	r0, #48	; 0x30
 8001640:	f005 bbe5 	b.w	8006e0e <memset>
 8001644:	43dc0000 	.word	0x43dc0000

08001648 <VCO_bleprect_SampleCompute>:
}
////----------------------------------------------------------------------------------------------------------

float VCO_bleprect_SampleCompute(VCO_bleprect_t *vco)
{
 8001648:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800164c:	ed90 7a03 	vldr	s14, [r0, #12]
 8001650:	eddf 7ae7 	vldr	s15, [pc, #924]	; 80019f0 <VCO_bleprect_SampleCompute+0x3a8>
	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	b = vco->_b;  /* duty cycle (0, 1) */
	x = vco->_x;  /* temporary output variable */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 8001654:	f8d0 5550 	ldr.w	r5, [r0, #1360]	; 0x550
{
 8001658:	ed2d 8b0a 	vpush	{d8-d12}
 800165c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8001660:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001662:	ed90 ca05 	vldr	s24, [r0, #20]
	z = vco->_z;  /* low pass filter state */
 8001666:	ed90 ba0b 	vldr	s22, [r0, #44]	; 0x2c
 800166a:	ee19 0a90 	vmov	r0, s19
 800166e:	f7fe ff63 	bl	8000538 <__aeabi_f2d>
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
	//
	if (vco->_init) {
 8001672:	f894 3558 	ldrb.w	r3, [r4, #1368]	; 0x558
 8001676:	4680      	mov	r8, r0
 8001678:	4689      	mov	r9, r1
 800167a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 800167e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80d5 	bne.w	8001832 <VCO_bleprect_SampleCompute+0x1ea>
	p = vco->_p;  /* phase [0, 1) */
 8001688:	ed94 8a07 	vldr	s16, [r4, #28]
	w = vco->_w;  /* phase increment */
 800168c:	edd4 8a08 	vldr	s17, [r4, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001690:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
	x = vco->_x;  /* temporary output variable */
 8001694:	ed94 aa0a 	vldr	s20, [r4, #40]	; 0x28
	k = vco->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8001698:	f8d4 6554 	ldr.w	r6, [r4, #1364]	; 0x554
	//
	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 800169c:	a3d2      	add	r3, pc, #840	; (adr r3, 80019e8 <VCO_bleprect_SampleCompute+0x3a0>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	4640      	mov	r0, r8
 80016a4:	4649      	mov	r1, r9
 80016a6:	f7ff fa11 	bl	8000acc <__aeabi_dcmplt>
 80016aa:	2800      	cmp	r0, #0
 80016ac:	f040 80fb 	bne.w	80018a6 <VCO_bleprect_SampleCompute+0x25e>
	if (t > 0.5) t = 0.5;
 80016b0:	eef4 9a6b 	vcmp.f32	s19, s23
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80016bc:	bfc8      	it	gt
 80016be:	eef0 9a67 	vmovgt.f32	s19, s15
	dw = (t - w) ;
	t = 0.5 * (1.0 + vco->waveform );
 80016c2:	6920      	ldr	r0, [r4, #16]
 80016c4:	f7fe ff38 	bl	8000538 <__aeabi_f2d>
 80016c8:	2200      	movs	r2, #0
 80016ca:	4bca      	ldr	r3, [pc, #808]	; (80019f4 <VCO_bleprect_SampleCompute+0x3ac>)
 80016cc:	f7fe fdd6 	bl	800027c <__adddf3>
 80016d0:	2200      	movs	r2, #0
 80016d2:	4bc9      	ldr	r3, [pc, #804]	; (80019f8 <VCO_bleprect_SampleCompute+0x3b0>)
 80016d4:	f7fe ff88 	bl	80005e8 <__aeabi_dmul>
 80016d8:	f7ff fa20 	bl	8000b1c <__aeabi_d2f>
 80016dc:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 80016e0:	eef4 8a47 	vcmp.f32	s17, s14
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (t > 1.0f - w) t = 1.0f - w;
 80016e8:	ee7a 7ae8 	vsub.f32	s15, s21, s17
	if (t < w) t = w;
 80016ec:	bfc8      	it	gt
 80016ee:	eeb0 7a68 	vmovgt.f32	s14, s17
	dw = (t - w) ;
 80016f2:	ee79 9ae8 	vsub.f32	s19, s19, s17
	if (t > 1.0f - w) t = 1.0f - w;
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	db = (t - b) ;

	w += dw;
 80016fe:	ee78 8aa9 	vadd.f32	s17, s17, s19
	b += db;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 8001702:	eddf 9abe 	vldr	s19, [pc, #760]	; 80019fc <VCO_bleprect_SampleCompute+0x3b4>
	if (t > 1.0f - w) t = 1.0f - w;
 8001706:	bf58      	it	pl
 8001708:	eef0 7a47 	vmovpl.f32	s15, s14
	db = (t - b) ;
 800170c:	ee77 7ac9 	vsub.f32	s15, s15, s18
	if (syncin >= 1e-20f) {  /* sync to master */
 8001710:	eeb4 cae9 	vcmpe.f32	s24, s19
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	b += db;
 8001718:	ee39 9a27 	vadd.f32	s18, s18, s15
	p += w;
 800171c:	ee38 8a28 	vadd.f32	s16, s16, s17
 8001720:	eef0 ca69 	vmov.f32	s25, s19
	if (syncin >= 1e-20f) {  /* sync to master */
 8001724:	f2c0 80f0 	blt.w	8001908 <VCO_bleprect_SampleCompute+0x2c0>
		//
		float eof_offset = (syncin - 1e-20f) * w;
 8001728:	ee7c 9a69 	vsub.f32	s19, s24, s19
 800172c:	ee69 9aa8 	vmul.f32	s19, s19, s17
		float p_at_reset = p - eof_offset;
 8001730:	ee38 8a69 	vsub.f32	s16, s16, s19
		p = eof_offset;

		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 8001734:	2e00      	cmp	r6, #0
 8001736:	f040 80b9 	bne.w	80018ac <VCO_bleprect_SampleCompute+0x264>
			if (p_at_reset >= b) {
 800173a:	eeb4 9ac8 	vcmpe.f32	s18, s16
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	f200 8149 	bhi.w	80019d8 <VCO_bleprect_SampleCompute+0x390>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 8001746:	ee38 0a49 	vsub.f32	s0, s16, s18
 800174a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800174e:	eef0 0a68 	vmov.f32	s1, s17
 8001752:	ee30 0a29 	vadd.f32	s0, s0, s19
 8001756:	4629      	mov	r1, r5
 8001758:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800175c:	f7ff fdf0 	bl	8001340 <place_step_dd>
				k = 1;
				x = -0.5f;
			}
			if (p_at_reset >= 1.0f) {
 8001760:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	f2c0 80c5 	blt.w	80018f6 <VCO_bleprect_SampleCompute+0x2ae>
				p_at_reset -= 1.0f;
 800176c:	ee38 8a6a 	vsub.f32	s16, s16, s21
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 8001770:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001774:	ee38 0a29 	vadd.f32	s0, s16, s19
 8001778:	eef0 0a68 	vmov.f32	s1, s17
			}
		}

		/* now place reset DD */
		if (k) {
			place_step_dd(vco->_f, j, p, w, 1.0f);
 800177c:	4629      	mov	r1, r5
 800177e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001782:	f7ff fddd 	bl	8001340 <place_step_dd>
 8001786:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
			k = 0;
			x = 0.5f;
		}
		if (p >= b) {
 800178a:	eeb4 9ae9 	vcmpe.f32	s18, s19
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	f200 80b7 	bhi.w	8001904 <VCO_bleprect_SampleCompute+0x2bc>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001796:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800179a:	eef0 0a68 	vmov.f32	s1, s17
 800179e:	ee39 0ac9 	vsub.f32	s0, s19, s18
 80017a2:	4629      	mov	r1, r5
 80017a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80017a8:	f7ff fdca 	bl	8001340 <place_step_dd>
			k = 1;
			x = -0.5f;
 80017ac:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 80017b0:	2601      	movs	r6, #1
		}

		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 80017b2:	ed84 ca06 	vstr	s24, [r4, #24]
		p = eof_offset;
 80017b6:	eeb0 8a69 	vmov.f32	s16, s19
 80017ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
			k = 1;
			x = -0.5f;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 80017be:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80017c2:	ee77 7a8a 	vadd.f32	s15, s15, s20

	z += a * (vco->_f[j] - z);
	vco->out = vco->amp * z;

	if (++j == FILLEN)
 80017c6:	3501      	adds	r5, #1
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 80017c8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	z += a * (vco->_f[j] - z);
 80017cc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
	vco->out = vco->amp * z;
 80017d0:	edd4 9a01 	vldr	s19, [r4, #4]
	z += a * (vco->_f[j] - z);
 80017d4:	ee77 7acb 	vsub.f32	s15, s15, s22
	if (++j == FILLEN)
 80017d8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	z += a * (vco->_f[j] - z);
 80017dc:	eea7 baab 	vfma.f32	s22, s15, s23
	vco->out = vco->amp * z;
 80017e0:	ee6b 9a29 	vmul.f32	s19, s22, s19
 80017e4:	edc4 9a00 	vstr	s19, [r4]
	if (++j == FILLEN)
 80017e8:	d10f      	bne.n	800180a <VCO_bleprect_SampleCompute+0x1c2>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 80017ea:	f44f 7290 	mov.w	r2, #288	; 0x120
 80017ee:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 80017f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80017f6:	f005 faff 	bl	8006df8 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 80017fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fe:	2100      	movs	r1, #0
 8001800:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001804:	f005 fb03 	bl	8006e0e <memset>
		j = 0;
 8001808:	2500      	movs	r5, #0
	vco->_j = j;
	vco->_k = k;

	return vco->out;

}
 800180a:	eeb0 0a69 	vmov.f32	s0, s19
	vco->_p = p;
 800180e:	ed84 8a07 	vstr	s16, [r4, #28]
	vco->_w = w;
 8001812:	edc4 8a08 	vstr	s17, [r4, #32]
	vco->_b = b;
 8001816:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
	vco->_x = x;
 800181a:	ed84 aa0a 	vstr	s20, [r4, #40]	; 0x28
	vco->_z = z;
 800181e:	ed84 ba0b 	vstr	s22, [r4, #44]	; 0x2c
}
 8001822:	ecbd 8b0a 	vpop	{d8-d12}
	vco->_j = j;
 8001826:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
	vco->_k = k;
 800182a:	f8c4 6554 	str.w	r6, [r4, #1364]	; 0x554
}
 800182e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		if (w < 1e-5) w = 1e-5;
 8001832:	a36d      	add	r3, pc, #436	; (adr r3, 80019e8 <VCO_bleprect_SampleCompute+0x3a0>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7ff f948 	bl	8000acc <__aeabi_dcmplt>
 800183c:	bb80      	cbnz	r0, 80018a0 <VCO_bleprect_SampleCompute+0x258>
		w = freq / SAMPLERATE;
 800183e:	eef4 9aeb 	vcmpe.f32	s19, s23
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	bfd4      	ite	le
 8001848:	eef0 8a69 	vmovle.f32	s17, s19
 800184c:	eef0 8a6b 	vmovgt.f32	s17, s23
		b = 0.5 * (1.0 + vco->waveform );
 8001850:	6920      	ldr	r0, [r4, #16]
		p = 0.0f;
 8001852:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 8001a00 <VCO_bleprect_SampleCompute+0x3b8>
		b = 0.5 * (1.0 + vco->waveform );
 8001856:	f7fe fe6f 	bl	8000538 <__aeabi_f2d>
 800185a:	2200      	movs	r2, #0
 800185c:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <VCO_bleprect_SampleCompute+0x3ac>)
 800185e:	f7fe fd0d 	bl	800027c <__adddf3>
 8001862:	2200      	movs	r2, #0
 8001864:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <VCO_bleprect_SampleCompute+0x3b0>)
 8001866:	f7fe febf 	bl	80005e8 <__aeabi_dmul>
 800186a:	f7ff f957 	bl	8000b1c <__aeabi_d2f>
 800186e:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8001872:	eef4 8a67 	vcmp.f32	s17, s15
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (b > 1.0f - w) b = 1.0f - w;
 800187a:	ee3a 9ae8 	vsub.f32	s18, s21, s17
		if (b < w) b = w;
 800187e:	bfc8      	it	gt
 8001880:	eef0 7a68 	vmovgt.f32	s15, s17
		if (b > 1.0f - w) b = 1.0f - w;
 8001884:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		vco->_init = false;
 800188c:	f04f 0600 	mov.w	r6, #0
		if (b > 1.0f - w) b = 1.0f - w;
 8001890:	bf58      	it	pl
 8001892:	eeb0 9a67 	vmovpl.f32	s18, s15
		vco->_init = false;
 8001896:	f884 6558 	strb.w	r6, [r4, #1368]	; 0x558
		x = 0.5f;
 800189a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800189e:	e6fd      	b.n	800169c <VCO_bleprect_SampleCompute+0x54>
		if (w < 1e-5) w = 1e-5;
 80018a0:	eddf 8a58 	vldr	s17, [pc, #352]	; 8001a04 <VCO_bleprect_SampleCompute+0x3bc>
 80018a4:	e7d4      	b.n	8001850 <VCO_bleprect_SampleCompute+0x208>
	if (t < 1e-5) t = 1e-5;
 80018a6:	eddf 9a57 	vldr	s19, [pc, #348]	; 8001a04 <VCO_bleprect_SampleCompute+0x3bc>
 80018aa:	e70a      	b.n	80016c2 <VCO_bleprect_SampleCompute+0x7a>
			if (p_at_reset >= 1.0f) {
 80018ac:	eeb4 8aea 	vcmpe.f32	s16, s21
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	db1f      	blt.n	80018f6 <VCO_bleprect_SampleCompute+0x2ae>
				p_at_reset -= 1.0f;
 80018b6:	ee38 8a6a 	vsub.f32	s16, s16, s21
 80018ba:	f104 0630 	add.w	r6, r4, #48	; 0x30
				place_step_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f);
 80018be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80018c2:	eef0 0a68 	vmov.f32	s1, s17
 80018c6:	ee39 0a88 	vadd.f32	s0, s19, s16
 80018ca:	4629      	mov	r1, r5
 80018cc:	4630      	mov	r0, r6
 80018ce:	f7ff fd37 	bl	8001340 <place_step_dd>
			if (!k && p_at_reset >= b) {
 80018d2:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	f63f af54 	bhi.w	8001786 <VCO_bleprect_SampleCompute+0x13e>
				place_step_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f);
 80018de:	ee38 8a49 	vsub.f32	s16, s16, s18
 80018e2:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018e6:	eef0 0a68 	vmov.f32	s1, s17
 80018ea:	ee38 0a29 	vadd.f32	s0, s16, s19
 80018ee:	4629      	mov	r1, r5
 80018f0:	4630      	mov	r0, r6
 80018f2:	f7ff fd25 	bl	8001340 <place_step_dd>
			place_step_dd(vco->_f, j, p, w, 1.0f);
 80018f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80018fa:	eef0 0a68 	vmov.f32	s1, s17
 80018fe:	eeb0 0a69 	vmov.f32	s0, s19
 8001902:	e73b      	b.n	800177c <VCO_bleprect_SampleCompute+0x134>
 8001904:	2600      	movs	r6, #0
 8001906:	e754      	b.n	80017b2 <VCO_bleprect_SampleCompute+0x16a>
	} else if (!k) {  /* normal operation, signal currently high */
 8001908:	bb9e      	cbnz	r6, 8001972 <VCO_bleprect_SampleCompute+0x32a>
		if (p >= b) {
 800190a:	eeb4 9ac8 	vcmpe.f32	s18, s16
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	d828      	bhi.n	8001966 <VCO_bleprect_SampleCompute+0x31e>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 8001914:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001918:	eef0 0a68 	vmov.f32	s1, s17
 800191c:	ee38 0a49 	vsub.f32	s0, s16, s18
 8001920:	4629      	mov	r1, r5
 8001922:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001926:	f7ff fd0b 	bl	8001340 <place_step_dd>
			x = -0.5f;
 800192a:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 800192e:	2301      	movs	r3, #1
		if (p >= 1.0f) {
 8001930:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	db17      	blt.n	800196a <VCO_bleprect_SampleCompute+0x322>
			p -= 1.0f;
 800193a:	ee38 8a6a 	vsub.f32	s16, s16, s21
			place_step_dd(vco->_f, j, p, w, 1.0f);
 800193e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			vco->syncout = p / w + 1e-20f;
 8001942:	eec8 7a28 	vdiv.f32	s15, s16, s17
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001946:	4629      	mov	r1, r5
 8001948:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800194c:	eef0 0a68 	vmov.f32	s1, s17
			vco->syncout = p / w + 1e-20f;
 8001950:	ee77 7aac 	vadd.f32	s15, s15, s25
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001954:	eeb0 0a48 	vmov.f32	s0, s16
			vco->syncout = p / w + 1e-20f;
 8001958:	edc4 7a06 	vstr	s15, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 800195c:	f7ff fcf0 	bl	8001340 <place_step_dd>
			x = 0.5f;
 8001960:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001964:	e729      	b.n	80017ba <VCO_bleprect_SampleCompute+0x172>
 8001966:	4633      	mov	r3, r6
 8001968:	e7e2      	b.n	8001930 <VCO_bleprect_SampleCompute+0x2e8>
			vco->syncout = 0.0f;
 800196a:	2200      	movs	r2, #0
 800196c:	61a2      	str	r2, [r4, #24]
 800196e:	461e      	mov	r6, r3
 8001970:	e723      	b.n	80017ba <VCO_bleprect_SampleCompute+0x172>
		if (p >= 1.0f) {
 8001972:	eeb4 8aea 	vcmpe.f32	s16, s21
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	db1c      	blt.n	80019b6 <VCO_bleprect_SampleCompute+0x36e>
			p -= 1.0f;
 800197c:	ee38 8a6a 	vsub.f32	s16, s16, s21
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001980:	f104 0630 	add.w	r6, r4, #48	; 0x30
			vco->syncout = p / w + 1e-20f;
 8001984:	eec8 7a28 	vdiv.f32	s15, s16, s17
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001988:	4629      	mov	r1, r5
 800198a:	4630      	mov	r0, r6
 800198c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			vco->syncout = p / w + 1e-20f;
 8001990:	ee77 9aa9 	vadd.f32	s19, s15, s19
			place_step_dd(vco->_f, j, p, w, 1.0f);
 8001994:	eef0 0a68 	vmov.f32	s1, s17
			vco->syncout = p / w + 1e-20f;
 8001998:	edc4 9a06 	vstr	s19, [r4, #24]
			place_step_dd(vco->_f, j, p, w, 1.0f);
 800199c:	eeb0 0a48 	vmov.f32	s0, s16
 80019a0:	f7ff fcce 	bl	8001340 <place_step_dd>
		if (!k && p >= b) {
 80019a4:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80019a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ac:	d906      	bls.n	80019bc <VCO_bleprect_SampleCompute+0x374>
			x = 0.5f;
 80019ae:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 80019b2:	2600      	movs	r6, #0
 80019b4:	e701      	b.n	80017ba <VCO_bleprect_SampleCompute+0x172>
			vco->syncout = 0.0f;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61a3      	str	r3, [r4, #24]
 80019ba:	e6fe      	b.n	80017ba <VCO_bleprect_SampleCompute+0x172>
			place_step_dd(vco->_f, j, p - b, w, -1.0f);
 80019bc:	4630      	mov	r0, r6
 80019be:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80019c2:	eef0 0a68 	vmov.f32	s1, s17
 80019c6:	ee38 0a49 	vsub.f32	s0, s16, s18
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7ff fcb8 	bl	8001340 <place_step_dd>
			x = -0.5f;
 80019d0:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
			k = 1;
 80019d4:	2601      	movs	r6, #1
 80019d6:	e6f0      	b.n	80017ba <VCO_bleprect_SampleCompute+0x172>
			if (p_at_reset >= 1.0f) {
 80019d8:	eeb4 8aea 	vcmpe.f32	s16, s21
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	f6bf aec4 	bge.w	800176c <VCO_bleprect_SampleCompute+0x124>
 80019e4:	e6d1      	b.n	800178a <VCO_bleprect_SampleCompute+0x142>
 80019e6:	bf00      	nop
 80019e8:	88e368f1 	.word	0x88e368f1
 80019ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80019f0:	472c4400 	.word	0x472c4400
 80019f4:	3ff00000 	.word	0x3ff00000
 80019f8:	3fe00000 	.word	0x3fe00000
 80019fc:	1e3ce508 	.word	0x1e3ce508
 8001a00:	00000000 	.word	0x00000000
 8001a04:	3727c5ac 	.word	0x3727c5ac

08001a08 <VCO_bleptri_Init>:

///* ==== variable-slope, hard-sync-capable triangle oscillator ==== */

void VCO_bleptri_Init(VCO_bleptri_t *vco)
{
	vco->amp = 1.0f;
 8001a08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a0c:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <VCO_bleptri_Init+0x28>)
 8001a10:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_init = true;
 8001a12:	2201      	movs	r2, #1
	vco->syncin = 0.0f;
 8001a14:	2300      	movs	r3, #0
	vco->_z = 0.0f;
	vco->_j = 0;
 8001a16:	2100      	movs	r1, #0
	vco->_init = true;
 8001a18:	f880 2554 	strb.w	r2, [r0, #1364]	; 0x554
	vco->syncin = 0.0f;
 8001a1c:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 8001a1e:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 8001a20:	6283      	str	r3, [r0, #40]	; 0x28
	vco->_j = 0;
 8001a22:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8001a26:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001a2a:	302c      	adds	r0, #44	; 0x2c
 8001a2c:	f005 b9ef 	b.w	8006e0e <memset>
 8001a30:	43dc0000 	.word	0x43dc0000
 8001a34:	00000000 	.word	0x00000000

08001a38 <VCO_bleptri_SampleCompute>:
}
////----------------------------------------------------------------------------------------------------------

float VCO_bleptri_SampleCompute(VCO_bleptri_t *vco)
{
 8001a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a3c:	ed90 7a03 	vldr	s14, [r0, #12]
 8001a40:	eddf 7ae3 	vldr	s15, [pc, #908]	; 8001dd0 <VCO_bleptri_SampleCompute+0x398>
	freq = vco->freq;
	p = vco->_p;  /* phase [0, 1) */
	w = vco->_w;  /* phase increment */
	b = vco->_b;  /* duty cycle (0, 1) */
	z = vco->_z;  /* low pass filter state */
	j = vco->_j;  /* index into buffer _f */
 8001a44:	f8d0 554c 	ldr.w	r5, [r0, #1356]	; 0x54c
{
 8001a48:	ed2d 8b0c 	vpush	{d8-d13}
 8001a4c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8001a50:	4604      	mov	r4, r0
	syncin  = vco->syncin;
 8001a52:	ed90 ba05 	vldr	s22, [r0, #20]
	z = vco->_z;  /* low pass filter state */
 8001a56:	edd0 aa0a 	vldr	s21, [r0, #40]	; 0x28
 8001a5a:	ee19 0a90 	vmov	r0, s19
 8001a5e:	f7fe fd6b 	bl	8000538 <__aeabi_f2d>
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */

	if (vco->_init) {
 8001a62:	f894 3554 	ldrb.w	r3, [r4, #1364]	; 0x554
 8001a66:	4680      	mov	r8, r0
 8001a68:	4689      	mov	r9, r1
 8001a6a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8001a6e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 80e6 	bne.w	8001c44 <VCO_bleptri_SampleCompute+0x20c>
	p = vco->_p;  /* phase [0, 1) */
 8001a78:	ed94 8a07 	vldr	s16, [r4, #28]
	w = vco->_w;  /* phase increment */
 8001a7c:	ed94 9a08 	vldr	s18, [r4, #32]
	b = vco->_b;  /* duty cycle (0, 1) */
 8001a80:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
	k = vco->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8001a84:	f8d4 6550 	ldr.w	r6, [r4, #1360]	; 0x550

	//	a = 0.2 + 0.8 * vco->_port [FILT];
	a = 0.5f; // when a = 1, LPfilter is disabled

	t = freq / SAMPLERATE;
	if (t < 1e-5) t = 1e-5;
 8001a88:	a3cf      	add	r3, pc, #828	; (adr r3, 8001dc8 <VCO_bleptri_SampleCompute+0x390>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	4640      	mov	r0, r8
 8001a90:	4649      	mov	r1, r9
 8001a92:	f7ff f81b 	bl	8000acc <__aeabi_dcmplt>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	f040 810b 	bne.w	8001cb2 <VCO_bleptri_SampleCompute+0x27a>
	if (t > 0.5) t = 0.5;
 8001a9c:	eef4 9a4a 	vcmp.f32	s19, s20
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001aa8:	bfc8      	it	gt
 8001aaa:	eef0 9a67 	vmovgt.f32	s19, s15
	dw = (t - w) ;
	t = 0.5 * (1.0 + vco->waveform );
 8001aae:	6920      	ldr	r0, [r4, #16]
	w += dw;
	b += db;
	b1 = 1.0f - b;
	p += w;

	if (syncin >= 1e-20f) {  /* sync to master */
 8001ab0:	eddf bac8 	vldr	s23, [pc, #800]	; 8001dd4 <VCO_bleptri_SampleCompute+0x39c>
	t = 0.5 * (1.0 + vco->waveform );
 8001ab4:	f7fe fd40 	bl	8000538 <__aeabi_f2d>
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4bc7      	ldr	r3, [pc, #796]	; (8001dd8 <VCO_bleptri_SampleCompute+0x3a0>)
 8001abc:	f7fe fbde 	bl	800027c <__adddf3>
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4bc6      	ldr	r3, [pc, #792]	; (8001ddc <VCO_bleptri_SampleCompute+0x3a4>)
 8001ac4:	f7fe fd90 	bl	80005e8 <__aeabi_dmul>
 8001ac8:	f7ff f828 	bl	8000b1c <__aeabi_d2f>
 8001acc:	ee07 0a10 	vmov	s14, r0
	if (t < w) t = w;
 8001ad0:	eeb4 9a47 	vcmp.f32	s18, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (t > 1.0f - w) t = 1.0f - w;
 8001ad8:	ee7c 7a49 	vsub.f32	s15, s24, s18
	if (t < w) t = w;
 8001adc:	bfc8      	it	gt
 8001ade:	eeb0 7a49 	vmovgt.f32	s14, s18
	if (t > 1.0f - w) t = 1.0f - w;
 8001ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aea:	bf58      	it	pl
 8001aec:	eef0 7a47 	vmovpl.f32	s15, s14
	dw = (t - w) ;
 8001af0:	ee79 9ac9 	vsub.f32	s19, s19, s18
	db = (t - b) ;
 8001af4:	ee77 7ae8 	vsub.f32	s15, s15, s17
	w += dw;
 8001af8:	ee39 9a29 	vadd.f32	s18, s18, s19
	b += db;
 8001afc:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if (syncin >= 1e-20f) {  /* sync to master */
 8001b00:	eeb4 baeb 	vcmpe.f32	s22, s23
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	b1 = 1.0f - b;
 8001b08:	ee7c ca68 	vsub.f32	s25, s24, s17
	p += w;
 8001b0c:	ee38 8a09 	vadd.f32	s16, s16, s18
 8001b10:	eeb0 da6b 	vmov.f32	s26, s23
	if (syncin >= 1e-20f) {  /* sync to master */
 8001b14:	f2c0 812b 	blt.w	8001d6e <VCO_bleptri_SampleCompute+0x336>

		float eof_offset = (syncin - 1e-20f) * w;
 8001b18:	ee7b ba6b 	vsub.f32	s23, s22, s23
 8001b1c:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8001b20:	ee6b ba89 	vmul.f32	s23, s23, s18
		float p_at_reset = p - eof_offset;
 8001b24:	ee38 8a6b 	vsub.f32	s16, s16, s23
		p = eof_offset;
		//
		/* place any DDs that may have occurred in subsample before reset */
		if (!k) {
 8001b28:	2e00      	cmp	r6, #0
 8001b2a:	f040 80c5 	bne.w	8001cb8 <VCO_bleptri_SampleCompute+0x280>
			x = -0.5f + p_at_reset / b;
			if (p_at_reset >= b) {
 8001b2e:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	f200 81b5 	bhi.w	8001ea4 <VCO_bleptri_SampleCompute+0x46c>
				x = 0.5f - (p_at_reset - b) / b1;
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001b3a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001b3e:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001b42:	4629      	mov	r1, r5
 8001b44:	4638      	mov	r0, r7
 8001b46:	eecc 7a28 	vdiv.f32	s15, s24, s17
				x = 0.5f - (p_at_reset - b) / b1;
 8001b4a:	ee38 0a68 	vsub.f32	s0, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001b4e:	ee31 1a67 	vsub.f32	s2, s2, s15
				x = 0.5f - (p_at_reset - b) / b1;
 8001b52:	eec0 9a2c 	vdiv.f32	s19, s0, s25
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001b56:	eef0 0a49 	vmov.f32	s1, s18
 8001b5a:	ee30 0a2b 	vadd.f32	s0, s0, s23
 8001b5e:	f7ff fc29 	bl	80013b4 <place_slope_dd>
				k = 1;
			}
			if (p_at_reset >= 1.0f) {
 8001b62:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				x = 0.5f - (p_at_reset - b) / b1;
 8001b6a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			if (p_at_reset >= 1.0f) {
 8001b6e:	f2c0 80ae 	blt.w	8001cce <VCO_bleptri_SampleCompute+0x296>
				p_at_reset -= 1.0f;
 8001b72:	ee38 8a4c 	vsub.f32	s16, s16, s24
				x = -0.5f + p_at_reset / b;
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001b76:	ee8c 1a28 	vdiv.f32	s2, s24, s17
				x = -0.5f + p_at_reset / b;
 8001b7a:	eec8 9a28 	vdiv.f32	s19, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001b7e:	eecc 7a2c 	vdiv.f32	s15, s24, s25
				x = -0.5f + p_at_reset / b;
 8001b82:	ee79 9aca 	vsub.f32	s19, s19, s20
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001b86:	ee31 1a27 	vadd.f32	s2, s2, s15
 8001b8a:	ee3b 0a88 	vadd.f32	s0, s23, s16
 8001b8e:	eef0 0a49 	vmov.f32	s1, s18
			}
		}

		/* now place reset DDs */
		if (k)
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001b92:	4629      	mov	r1, r5
 8001b94:	4638      	mov	r0, r7
 8001b96:	f7ff fc0d 	bl	80013b4 <place_slope_dd>
		place_step_dd(vco->_f, j, p, w, -0.5f - x);
 8001b9a:	eebe 1a00 	vmov.f32	s2, #224	; 0xbf000000 -0.5
 8001b9e:	ee31 1a69 	vsub.f32	s2, s2, s19
 8001ba2:	eef0 0a49 	vmov.f32	s1, s18
 8001ba6:	eeb0 0a6b 	vmov.f32	s0, s23
 8001baa:	4629      	mov	r1, r5
 8001bac:	4638      	mov	r0, r7
 8001bae:	f7ff fbc7 	bl	8001340 <place_step_dd>
		x = -0.5f + p / b;
		k = 0;
		if (p >= b) {
 8001bb2:	eef4 8aeb 	vcmpe.f32	s17, s23
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	f240 80c2 	bls.w	8001d42 <VCO_bleptri_SampleCompute+0x30a>
		x = -0.5f + p / b;
 8001bbe:	eecb 9aa8 	vdiv.f32	s19, s23, s17
		k = 0;
 8001bc2:	2600      	movs	r6, #0
		x = -0.5f + p / b;
 8001bc4:	ee79 9aca 	vsub.f32	s19, s19, s20
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
		vco->syncout = syncin;  /* best we can do is pass on upstream sync */
 8001bc8:	ed84 ba06 	vstr	s22, [r4, #24]
		p = eof_offset;
 8001bcc:	eeb0 8a6b 	vmov.f32	s16, s23
 8001bd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
			x = 0.5f - (p - b) / b1;
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
			k = 1;
		}
	}
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001bd4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001bd8:	ee77 9aa9 	vadd.f32	s19, s15, s19

	z += a * (vco->_f[j] - z);
 8001bdc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
	vco->_f[j + DD_SAMPLE_DELAY] += x;
 8001be0:	edc3 9a0f 	vstr	s19, [r3, #60]	; 0x3c
	z += a * (vco->_f[j] - z);
 8001be4:	ee77 7aea 	vsub.f32	s15, s15, s21
	vco->out = vco->amp * z;
 8001be8:	edd4 9a01 	vldr	s19, [r4, #4]
	z += a * (vco->_f[j] - z);
 8001bec:	eee7 aa8a 	vfma.f32	s21, s15, s20

	if (++j == FILLEN)
 8001bf0:	3501      	adds	r5, #1
 8001bf2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	vco->out = vco->amp * z;
 8001bf6:	ee6a 9aa9 	vmul.f32	s19, s21, s19
 8001bfa:	edc4 9a00 	vstr	s19, [r4]
	if (++j == FILLEN)
 8001bfe:	d10f      	bne.n	8001c20 <VCO_bleptri_SampleCompute+0x1e8>
	{
		j = 0;
		memcpy (vco->_f, vco->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 8001c00:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001c04:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001c08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001c0c:	f005 f8f4 	bl	8006df8 <memcpy>
		memset (vco->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 8001c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c14:	2100      	movs	r1, #0
 8001c16:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 8001c1a:	f005 f8f8 	bl	8006e0e <memset>
		j = 0;
 8001c1e:	2500      	movs	r5, #0
	vco->_j = j;
	vco->_k = k;

	return vco->out;

}
 8001c20:	eeb0 0a69 	vmov.f32	s0, s19
	vco->_p = p;
 8001c24:	ed84 8a07 	vstr	s16, [r4, #28]
	vco->_w = w;
 8001c28:	ed84 9a08 	vstr	s18, [r4, #32]
	vco->_b = b;
 8001c2c:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
	vco->_z = z;
 8001c30:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
}
 8001c34:	ecbd 8b0c 	vpop	{d8-d13}
	vco->_j = j;
 8001c38:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
	vco->_k = k;
 8001c3c:	f8c4 6550 	str.w	r6, [r4, #1360]	; 0x550
}
 8001c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (w < 1e-5) w = 1e-5;
 8001c44:	a360      	add	r3, pc, #384	; (adr r3, 8001dc8 <VCO_bleptri_SampleCompute+0x390>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe ff3f 	bl	8000acc <__aeabi_dcmplt>
 8001c4e:	bb68      	cbnz	r0, 8001cac <VCO_bleptri_SampleCompute+0x274>
		w = freq / SAMPLERATE;
 8001c50:	eef4 9aca 	vcmpe.f32	s19, s20
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	bfd4      	ite	le
 8001c5a:	eeb0 9a69 	vmovle.f32	s18, s19
 8001c5e:	eeb0 9a4a 	vmovgt.f32	s18, s20
		b = 0.5 * (1.0 + vco->waveform);
 8001c62:	6920      	ldr	r0, [r4, #16]
 8001c64:	f7fe fc68 	bl	8000538 <__aeabi_f2d>
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <VCO_bleptri_SampleCompute+0x3a0>)
 8001c6c:	f7fe fb06 	bl	800027c <__adddf3>
 8001c70:	2200      	movs	r2, #0
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <VCO_bleptri_SampleCompute+0x3a4>)
 8001c74:	f7fe fcb8 	bl	80005e8 <__aeabi_dmul>
 8001c78:	f7fe ff50 	bl	8000b1c <__aeabi_d2f>
 8001c7c:	ee07 0a90 	vmov	s15, r0
		if (b < w) b = w;
 8001c80:	eeb4 9a67 	vcmp.f32	s18, s15
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (b > 1.0f - w) b = 1.0f - w;
 8001c88:	ee7c 8a49 	vsub.f32	s17, s24, s18
		if (b < w) b = w;
 8001c8c:	bfc8      	it	gt
 8001c8e:	eef0 7a49 	vmovgt.f32	s15, s18
		if (b > 1.0f - w) b = 1.0f - w;
 8001c92:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	bf58      	it	pl
 8001c9c:	eef0 8a67 	vmovpl.f32	s17, s15
		vco->_init = false;
 8001ca0:	2600      	movs	r6, #0
		p = 0.5f * b;
 8001ca2:	ee28 8a8a 	vmul.f32	s16, s17, s20
		vco->_init = false;
 8001ca6:	f884 6554 	strb.w	r6, [r4, #1364]	; 0x554
 8001caa:	e6ed      	b.n	8001a88 <VCO_bleptri_SampleCompute+0x50>
		if (w < 1e-5) w = 1e-5;
 8001cac:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 8001de0 <VCO_bleptri_SampleCompute+0x3a8>
 8001cb0:	e7d7      	b.n	8001c62 <VCO_bleptri_SampleCompute+0x22a>
	if (t < 1e-5) t = 1e-5;
 8001cb2:	eddf 9a4b 	vldr	s19, [pc, #300]	; 8001de0 <VCO_bleptri_SampleCompute+0x3a8>
 8001cb6:	e6fa      	b.n	8001aae <VCO_bleptri_SampleCompute+0x76>
			if (p_at_reset >= 1.0f) {
 8001cb8:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	da10      	bge.n	8001ce4 <VCO_bleptri_SampleCompute+0x2ac>
			x = 0.5f - (p_at_reset - b) / b1;
 8001cc2:	ee38 8a68 	vsub.f32	s16, s16, s17
 8001cc6:	eec8 9a2c 	vdiv.f32	s19, s16, s25
 8001cca:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001cce:	ee8c 1a28 	vdiv.f32	s2, s24, s17
 8001cd2:	eecc 7a2c 	vdiv.f32	s15, s24, s25
 8001cd6:	eef0 0a49 	vmov.f32	s1, s18
 8001cda:	ee31 1a27 	vadd.f32	s2, s2, s15
 8001cde:	eeb0 0a6b 	vmov.f32	s0, s23
 8001ce2:	e756      	b.n	8001b92 <VCO_bleptri_SampleCompute+0x15a>
 8001ce4:	ee8c da28 	vdiv.f32	s26, s24, s17
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4638      	mov	r0, r7
 8001cec:	ee8c 1a2c 	vdiv.f32	s2, s24, s25
				p_at_reset -= 1.0f;
 8001cf0:	ee38 8a4c 	vsub.f32	s16, s16, s24
				place_slope_dd(vco->_f, j, p_at_reset + eof_offset, w, 1.0f / b + 1.0f / b1);
 8001cf4:	ee31 1a0d 	vadd.f32	s2, s2, s26
 8001cf8:	eef0 0a49 	vmov.f32	s1, s18
 8001cfc:	ee3b 0a88 	vadd.f32	s0, s23, s16
 8001d00:	f7ff fb58 	bl	80013b4 <place_slope_dd>
			if (!k && p_at_reset >= b) {
 8001d04:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d904      	bls.n	8001d18 <VCO_bleptri_SampleCompute+0x2e0>
			x = -0.5f + p_at_reset / b;
 8001d0e:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8001d12:	ee79 9aca 	vsub.f32	s19, s19, s20
 8001d16:	e740      	b.n	8001b9a <VCO_bleptri_SampleCompute+0x162>
				x = 0.5f - (p_at_reset - b) / b1;
 8001d18:	ee38 8a68 	vsub.f32	s16, s16, s17
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001d1c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001d20:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001d24:	4629      	mov	r1, r5
 8001d26:	4638      	mov	r0, r7
				x = 0.5f - (p_at_reset - b) / b1;
 8001d28:	eec8 9a2c 	vdiv.f32	s19, s16, s25
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001d2c:	ee31 1a4d 	vsub.f32	s2, s2, s26
 8001d30:	eef0 0a49 	vmov.f32	s1, s18
 8001d34:	ee38 0a2b 	vadd.f32	s0, s16, s23
				x = 0.5f - (p_at_reset - b) / b1;
 8001d38:	ee7a 9a69 	vsub.f32	s19, s20, s19
				place_slope_dd(vco->_f, j, p_at_reset - b + eof_offset, w, -1.0f / b1 - 1.0f / b);
 8001d3c:	f7ff fb3a 	bl	80013b4 <place_slope_dd>
 8001d40:	e7c5      	b.n	8001cce <VCO_bleptri_SampleCompute+0x296>
			x = 0.5f - (p - b) / b1;
 8001d42:	ee3b 0ae8 	vsub.f32	s0, s23, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001d46:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001d4a:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001d4e:	4629      	mov	r1, r5
 8001d50:	4638      	mov	r0, r7
			k = 1;
 8001d52:	2601      	movs	r6, #1
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001d54:	eecc 7a28 	vdiv.f32	s15, s24, s17
			x = 0.5f - (p - b) / b1;
 8001d58:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001d5c:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001d60:	eef0 0a49 	vmov.f32	s1, s18
			x = 0.5f - (p - b) / b1;
 8001d64:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001d68:	f7ff fb24 	bl	80013b4 <place_slope_dd>
 8001d6c:	e72c      	b.n	8001bc8 <VCO_bleptri_SampleCompute+0x190>
	} else if (!k) {  /* normal operation, slope currently up */
 8001d6e:	2e00      	cmp	r6, #0
 8001d70:	d153      	bne.n	8001e1a <VCO_bleptri_SampleCompute+0x3e2>
		if (p >= b) {
 8001d72:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d933      	bls.n	8001de4 <VCO_bleptri_SampleCompute+0x3ac>
		x = -0.5f + p / b;
 8001d7c:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8001d80:	4633      	mov	r3, r6
 8001d82:	ee79 9aca 	vsub.f32	s19, s19, s20
		if (p >= 1.0f) {
 8001d86:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	db40      	blt.n	8001e12 <VCO_bleptri_SampleCompute+0x3da>
			p -= 1.0f;
 8001d90:	ee38 8a4c 	vsub.f32	s16, s16, s24
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001d94:	ee8c 1a28 	vdiv.f32	s2, s24, s17
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
			vco->syncout = p / w + 1e-20f;
 8001d9e:	eec8 7a09 	vdiv.f32	s15, s16, s18
			x = -0.5f + p / b;
 8001da2:	eec8 9a28 	vdiv.f32	s19, s16, s17
			vco->syncout = p / w + 1e-20f;
 8001da6:	ee77 7a8d 	vadd.f32	s15, s15, s26
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001daa:	eef0 0a49 	vmov.f32	s1, s18
			vco->syncout = p / w + 1e-20f;
 8001dae:	edc4 7a06 	vstr	s15, [r4, #24]
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001db2:	eecc 7a2c 	vdiv.f32	s15, s24, s25
 8001db6:	eeb0 0a48 	vmov.f32	s0, s16
 8001dba:	ee31 1a27 	vadd.f32	s2, s2, s15
			x = -0.5f + p / b;
 8001dbe:	ee79 9aca 	vsub.f32	s19, s19, s20
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001dc2:	f7ff faf7 	bl	80013b4 <place_slope_dd>
 8001dc6:	e703      	b.n	8001bd0 <VCO_bleptri_SampleCompute+0x198>
 8001dc8:	88e368f1 	.word	0x88e368f1
 8001dcc:	3ee4f8b5 	.word	0x3ee4f8b5
 8001dd0:	472c4400 	.word	0x472c4400
 8001dd4:	1e3ce508 	.word	0x1e3ce508
 8001dd8:	3ff00000 	.word	0x3ff00000
 8001ddc:	3fe00000 	.word	0x3fe00000
 8001de0:	3727c5ac 	.word	0x3727c5ac
			x = 0.5f - (p - b) / b1;
 8001de4:	ee38 0a68 	vsub.f32	s0, s16, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001de8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001dec:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001df0:	4629      	mov	r1, r5
 8001df2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001df6:	eecc 7a28 	vdiv.f32	s15, s24, s17
			x = 0.5f - (p - b) / b1;
 8001dfa:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001dfe:	ee31 1a67 	vsub.f32	s2, s2, s15
 8001e02:	eef0 0a49 	vmov.f32	s1, s18
 8001e06:	f7ff fad5 	bl	80013b4 <place_slope_dd>
			x = 0.5f - (p - b) / b1;
 8001e0a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			k = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e7b9      	b.n	8001d86 <VCO_bleptri_SampleCompute+0x34e>
			vco->syncout = 0.0f;
 8001e12:	2200      	movs	r2, #0
 8001e14:	61a2      	str	r2, [r4, #24]
 8001e16:	461e      	mov	r6, r3
 8001e18:	e6da      	b.n	8001bd0 <VCO_bleptri_SampleCompute+0x198>
		if (p >= 1.0f) {
 8001e1a:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	db22      	blt.n	8001e6a <VCO_bleptri_SampleCompute+0x432>
			p -= 1.0f;
 8001e24:	ee38 8a4c 	vsub.f32	s16, s16, s24
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001e28:	ee8c ba28 	vdiv.f32	s22, s24, s17
 8001e2c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8001e30:	4629      	mov	r1, r5
 8001e32:	4630      	mov	r0, r6
			vco->syncout = p / w + 1e-20f;
 8001e34:	eec8 7a09 	vdiv.f32	s15, s16, s18
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001e38:	ee8c 1a2c 	vdiv.f32	s2, s24, s25
			vco->syncout = p / w + 1e-20f;
 8001e3c:	ee77 baab 	vadd.f32	s23, s15, s23
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001e40:	ee31 1a0b 	vadd.f32	s2, s2, s22
			vco->syncout = p / w + 1e-20f;
 8001e44:	edc4 ba06 	vstr	s23, [r4, #24]
			place_slope_dd(vco->_f, j, p, w, 1.0f / b + 1.0f / b1);
 8001e48:	eef0 0a49 	vmov.f32	s1, s18
 8001e4c:	eeb0 0a48 	vmov.f32	s0, s16
 8001e50:	f7ff fab0 	bl	80013b4 <place_slope_dd>
		if (!k && p >= b) {
 8001e54:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d90e      	bls.n	8001e7c <VCO_bleptri_SampleCompute+0x444>
			x = -0.5f + p / b;
 8001e5e:	eec8 9a28 	vdiv.f32	s19, s16, s17
 8001e62:	2600      	movs	r6, #0
 8001e64:	ee79 9aca 	vsub.f32	s19, s19, s20
 8001e68:	e6b2      	b.n	8001bd0 <VCO_bleptri_SampleCompute+0x198>
		x = 0.5f - (p - b) / b1;
 8001e6a:	ee78 7a68 	vsub.f32	s15, s16, s17
			vco->syncout = 0.0f;
 8001e6e:	2300      	movs	r3, #0
		x = 0.5f - (p - b) / b1;
 8001e70:	eec7 9aac 	vdiv.f32	s19, s15, s25
			vco->syncout = 0.0f;
 8001e74:	61a3      	str	r3, [r4, #24]
		x = 0.5f - (p - b) / b1;
 8001e76:	ee7a 9a69 	vsub.f32	s19, s20, s19
 8001e7a:	e6a9      	b.n	8001bd0 <VCO_bleptri_SampleCompute+0x198>
			x = 0.5f - (p - b) / b1;
 8001e7c:	ee38 0a68 	vsub.f32	s0, s16, s17
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001e80:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001e84:	ee87 1aac 	vdiv.f32	s2, s15, s25
 8001e88:	4630      	mov	r0, r6
 8001e8a:	4629      	mov	r1, r5
			k = 1;
 8001e8c:	2601      	movs	r6, #1
			x = 0.5f - (p - b) / b1;
 8001e8e:	eec0 9a2c 	vdiv.f32	s19, s0, s25
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001e92:	ee31 1a4b 	vsub.f32	s2, s2, s22
 8001e96:	eef0 0a49 	vmov.f32	s1, s18
			x = 0.5f - (p - b) / b1;
 8001e9a:	ee7a 9a69 	vsub.f32	s19, s20, s19
			place_slope_dd(vco->_f, j, p - b, w, -1.0f / b1 - 1.0f / b);
 8001e9e:	f7ff fa89 	bl	80013b4 <place_slope_dd>
 8001ea2:	e695      	b.n	8001bd0 <VCO_bleptri_SampleCompute+0x198>
			if (p_at_reset >= 1.0f) {
 8001ea4:	eeb4 8acc 	vcmpe.f32	s16, s24
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	f6bf ae61 	bge.w	8001b72 <VCO_bleptri_SampleCompute+0x13a>
 8001eb0:	e72d      	b.n	8001d0e <VCO_bleptri_SampleCompute+0x2d6>
 8001eb2:	bf00      	nop

08001eb4 <Lfo_SampleCompute>:
/*-------------------------------------------------------------------------------------------*/
float Lfo_SampleCompute(Lfo_t * op) // ! returns a positive value between 0 and op.amp !
{
	float z;

	op->phase += _2PI * Ts * op->freq; // increment phase
 8001eb4:	edd0 7a02 	vldr	s15, [r0, #8]
 8001eb8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001f2c <Lfo_SampleCompute+0x78>
 8001ebc:	edd0 6a01 	vldr	s13, [r0, #4]
 8001ec0:	eee6 7a87 	vfma.f32	s15, s13, s14
{
 8001ec4:	b510      	push	{r4, lr}
 8001ec6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001f30 <Lfo_SampleCompute+0x7c>
	op->phase += _2PI * Ts * op->freq; // increment phase
 8001eca:	edc0 7a02 	vstr	s15, [r0, #8]
{
 8001ece:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8001ed0:	edd4 7a02 	vldr	s15, [r4, #8]
 8001ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	d41c      	bmi.n	8001f18 <Lfo_SampleCompute+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8001ede:	edd4 7a02 	vldr	s15, [r4, #8]
 8001ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	da1a      	bge.n	8001f22 <Lfo_SampleCompute+0x6e>
		op->phase -= _2PI;

	z = sinetable[lrintf(ALPHA * (op->phase))];
 8001eec:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001f34 <Lfo_SampleCompute+0x80>
 8001ef0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001ef4:	f005 fc0e 	bl	8007714 <lrintf>
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <Lfo_SampleCompute+0x84>)
 8001efa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	op->out = op->amp * (z + 1); // returns a positive value between 0 and op.amp
 8001efe:	ed90 0a00 	vldr	s0, [r0]
 8001f02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001f06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001f0a:	edd4 7a00 	vldr	s15, [r4]
 8001f0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001f12:	ed84 0a03 	vstr	s0, [r4, #12]

	return op->out;
}
 8001f16:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8001f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f1c:	edc4 7a02 	vstr	s15, [r4, #8]
 8001f20:	e7d6      	b.n	8001ed0 <Lfo_SampleCompute+0x1c>
		op->phase -= _2PI;
 8001f22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f26:	edc4 7a02 	vstr	s15, [r4, #8]
 8001f2a:	e7d8      	b.n	8001ede <Lfo_SampleCompute+0x2a>
 8001f2c:	39156592 	.word	0x39156592
 8001f30:	40c90fdb 	.word	0x40c90fdb
 8001f34:	4322f983 	.word	0x4322f983
 8001f38:	08016770 	.word	0x08016770

08001f3c <Chorus_init>:
		}
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_delay(monochorus_t *del, float delay)
{
	del->baseDelay = delay;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <Chorus_init+0x68>)
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fb(monochorus_t *del, float val)
{
	del->fb = val;
 8001f3e:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <Chorus_init+0x6c>)
{
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
	del->baseDelay = delay;
 8001f42:	4f1a      	ldr	r7, [pc, #104]	; (8001fac <Chorus_init+0x70>)
 8001f44:	601f      	str	r7, [r3, #0]
	del->fb = val;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <Chorus_init+0x74>)
 8001f48:	4c1a      	ldr	r4, [pc, #104]	; (8001fb4 <Chorus_init+0x78>)
 8001f4a:	6054      	str	r4, [r2, #4]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fw(monochorus_t *del, float val)
{
	del->fw = val;
 8001f4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	del->mode = 1;
 8001f50:	f241 50f4 	movw	r0, #5620	; 0x15f4
 8001f54:	2501      	movs	r5, #1
	del->fw = val;
 8001f56:	6091      	str	r1, [r2, #8]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_mix(monochorus_t *del, float val)
{
	del->mix = val;
 8001f58:	6011      	str	r1, [r2, #0]
	del->fw = val;
 8001f5a:	6099      	str	r1, [r3, #8]
	del->mix = val;
 8001f5c:	6019      	str	r1, [r3, #0]
	lfoL.amp = LEFT_SWEEP;
 8001f5e:	4916      	ldr	r1, [pc, #88]	; (8001fb8 <Chorus_init+0x7c>)
	del->mode = 1;
 8001f60:	5415      	strb	r5, [r2, r0]
 8001f62:	541d      	strb	r5, [r3, r0]
	lfoL.amp = LEFT_SWEEP;
 8001f64:	4815      	ldr	r0, [pc, #84]	; (8001fbc <Chorus_init+0x80>)
 8001f66:	6008      	str	r0, [r1, #0]
	lfoR.amp = RIGHT_SWEEP;
 8001f68:	6108      	str	r0, [r1, #16]
	lfoL.freq = LEFT_RATE ;
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <Chorus_init+0x84>)
 8001f6c:	6048      	str	r0, [r1, #4]
	lfoR.freq = RIGHT_RATE ;
 8001f6e:	4815      	ldr	r0, [pc, #84]	; (8001fc4 <Chorus_init+0x88>)
 8001f70:	6148      	str	r0, [r1, #20]
	rateCoeff = 1;
 8001f72:	4815      	ldr	r0, [pc, #84]	; (8001fc8 <Chorus_init+0x8c>)
	del->fb = val;
 8001f74:	605c      	str	r4, [r3, #4]
	rateCoeff = 1;
 8001f76:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	del->baseDelay = delay;
 8001f7a:	4c14      	ldr	r4, [pc, #80]	; (8001fcc <Chorus_init+0x90>)
	rateCoeff = 1;
 8001f7c:	6005      	str	r5, [r0, #0]
	lfoL.phase = _PI/2; // initial phases for quadrature
 8001f7e:	4814      	ldr	r0, [pc, #80]	; (8001fd0 <Chorus_init+0x94>)
 8001f80:	6088      	str	r0, [r1, #8]
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8001f82:	f240 5677 	movw	r6, #1399	; 0x577
	lfoR.phase = 0;
 8001f86:	2000      	movs	r0, #0
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8001f88:	60d6      	str	r6, [r2, #12]
 8001f8a:	60de      	str	r6, [r3, #12]
	lfoR.phase = 0;
 8001f8c:	6188      	str	r0, [r1, #24]
	del->baseDelay = delay;
 8001f8e:	6027      	str	r7, [r4, #0]
 8001f90:	3310      	adds	r3, #16
 8001f92:	3210      	adds	r2, #16
 8001f94:	4601      	mov	r1, r0
		delR.dline[var] = 0;
 8001f96:	f843 1b04 	str.w	r1, [r3], #4
	for (int var = 0; var < DEPTH; ++var) {
 8001f9a:	42a3      	cmp	r3, r4
		delL.dline[var] = 0;
 8001f9c:	f842 1b04 	str.w	r1, [r2], #4
	for (int var = 0; var < DEPTH; ++var) {
 8001fa0:	d1f9      	bne.n	8001f96 <Chorus_init+0x5a>
}
 8001fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa4:	20002738 	.word	0x20002738
 8001fa8:	20001148 	.word	0x20001148
 8001fac:	43700000 	.word	0x43700000
 8001fb0:	20002740 	.word	0x20002740
 8001fb4:	be4ccccd 	.word	0xbe4ccccd
 8001fb8:	20001128 	.word	0x20001128
 8001fbc:	42480000 	.word	0x42480000
 8001fc0:	3de147ae 	.word	0x3de147ae
 8001fc4:	3df5c28f 	.word	0x3df5c28f
 8001fc8:	20013a64 	.word	0x20013a64
 8001fcc:	20003d30 	.word	0x20003d30
 8001fd0:	3fc90fdb 	.word	0x3fc90fdb

08001fd4 <ChorusRate_set>:
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8001fd4:	ee07 0a90 	vmov	s15, r0
 8001fd8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002000 <ChorusRate_set+0x2c>
	lfoR.freq = rateCoeff * rate;
 8001fdc:	4a09      	ldr	r2, [pc, #36]	; (8002004 <ChorusRate_set+0x30>)
	lfoL.freq = rate;
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <ChorusRate_set+0x34>)
	rate = MAX_RATE / MIDI_MAX * val + MIN_RATE;
 8001fe0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fe4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800200c <ChorusRate_set+0x38>
 8001fe8:	eee6 7a87 	vfma.f32	s15, s13, s14
	lfoR.freq = rateCoeff * rate;
 8001fec:	ed92 7a00 	vldr	s14, [r2]
	lfoL.freq = rate;
 8001ff0:	edc3 7a01 	vstr	s15, [r3, #4]
	lfoR.freq = rateCoeff * rate;
 8001ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff8:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	3d61c387 	.word	0x3d61c387
 8002004:	20013a64 	.word	0x20013a64
 8002008:	20001128 	.word	0x20001128
 800200c:	3ca3d70a 	.word	0x3ca3d70a

08002010 <ChorusSecondRate_set>:
	rateCoeff = 0.9f / MIDI_MAX * val + 0.1f; // from 10 % to 100 % of lfoL rate
 8002010:	ee07 0a90 	vmov	s15, r0
 8002014:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800203c <ChorusSecondRate_set+0x2c>
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <ChorusSecondRate_set+0x30>)
 800201a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800201e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002044 <ChorusSecondRate_set+0x34>
 8002022:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002026:	edc3 7a00 	vstr	s15, [r3]
	lfoR.freq = rateCoeff * lfoL.freq;
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <ChorusSecondRate_set+0x38>)
 800202c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002034:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	3be836d4 	.word	0x3be836d4
 8002040:	20013a64 	.word	0x20013a64
 8002044:	3dcccccd 	.word	0x3dcccccd
 8002048:	20001128 	.word	0x20001128

0800204c <ChorusDelay_set>:
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 800204c:	ee07 0a90 	vmov	s15, r0
 8002050:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800206c <ChorusDelay_set+0x20>
	delL.baseDelay = d;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <ChorusDelay_set+0x24>)
	d = 0.5f * DEPTH / MIDI_MAX * val ;
 8002056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205a:	ee67 7a87 	vmul.f32	s15, s15, s14
	delL.baseDelay = d;
 800205e:	edc3 7a00 	vstr	s15, [r3]
	delR.baseDelay = d;
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <ChorusDelay_set+0x28>)
 8002064:	edc3 7a00 	vstr	s15, [r3]
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40b060c2 	.word	0x40b060c2
 8002070:	20002738 	.word	0x20002738
 8002074:	20003d30 	.word	0x20003d30

08002078 <ChorusFeedback_set>:
	fb = 0.95f * val / MIDI_MAX;
 8002078:	ee07 0a90 	vmov	s15, r0
 800207c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80020a0 <ChorusFeedback_set+0x28>
 8002080:	eddf 6a08 	vldr	s13, [pc, #32]	; 80020a4 <ChorusFeedback_set+0x2c>
	delL.fb = fb;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <ChorusFeedback_set+0x30>)
	fb = 0.95f * val / MIDI_MAX;
 8002086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	delL.fb = fb;
 8002092:	ed83 7a01 	vstr	s14, [r3, #4]
	delR.fb = fb;
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <ChorusFeedback_set+0x34>)
 8002098:	ed83 7a01 	vstr	s14, [r3, #4]
}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	3f733333 	.word	0x3f733333
 80020a4:	42fe0000 	.word	0x42fe0000
 80020a8:	20001148 	.word	0x20001148
 80020ac:	20002740 	.word	0x20002740

080020b0 <ChorusSweep_set>:
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 80020b0:	ee07 0a90 	vmov	s15, r0
 80020b4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80020cc <ChorusSweep_set+0x1c>
	lfoL.amp = sw;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <ChorusSweep_set+0x20>)
	sw = 0.1f * (DEPTH - MARGIN)/MIDI_MAX * val;
 80020ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020be:	ee67 7a87 	vmul.f32	s15, s15, s14
	lfoL.amp = sw;
 80020c2:	edc3 7a00 	vstr	s15, [r3]
	lfoR.amp = sw;
 80020c6:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80020ca:	4770      	bx	lr
 80020cc:	3f8c7f66 	.word	0x3f8c7f66
 80020d0:	20001128 	.word	0x20001128

080020d4 <ChorusMode_switch>:
	switch (val)
 80020d4:	b148      	cbz	r0, 80020ea <ChorusMode_switch+0x16>
 80020d6:	287f      	cmp	r0, #127	; 0x7f
 80020d8:	d106      	bne.n	80020e8 <ChorusMode_switch+0x14>
		case 127 : 	delR.mode = delL.mode = -1 ; break;
 80020da:	f241 53f4 	movw	r3, #5620	; 0x15f4
 80020de:	22ff      	movs	r2, #255	; 0xff
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 80020e0:	4904      	ldr	r1, [pc, #16]	; (80020f4 <ChorusMode_switch+0x20>)
 80020e2:	54ca      	strb	r2, [r1, r3]
 80020e4:	4904      	ldr	r1, [pc, #16]	; (80020f8 <ChorusMode_switch+0x24>)
 80020e6:	54ca      	strb	r2, [r1, r3]
}
 80020e8:	4770      	bx	lr
		case 0 : 	delR.mode = delL.mode = 1 ; break;
 80020ea:	f241 53f4 	movw	r3, #5620	; 0x15f4
 80020ee:	2201      	movs	r2, #1
 80020f0:	e7f6      	b.n	80020e0 <ChorusMode_switch+0xc>
 80020f2:	bf00      	nop
 80020f4:	20001148 	.word	0x20001148
 80020f8:	20002740 	.word	0x20002740

080020fc <ChorusFDBsign_switch>:
	switch (val)
 80020fc:	b180      	cbz	r0, 8002120 <ChorusFDBsign_switch+0x24>
 80020fe:	287f      	cmp	r0, #127	; 0x7f
 8002100:	d10d      	bne.n	800211e <ChorusFDBsign_switch+0x22>
		case 127 : 	delR.fb = fabsf(delR.fb); delL.fb = fabsf(delL.fb); break; // positive feedback;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <ChorusFDBsign_switch+0x48>)
 8002104:	edd3 7a01 	vldr	s15, [r3, #4]
 8002108:	eef0 7ae7 	vabs.f32	s15, s15
 800210c:	edc3 7a01 	vstr	s15, [r3, #4]
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <ChorusFDBsign_switch+0x4c>)
 8002112:	edd3 7a01 	vldr	s15, [r3, #4]
 8002116:	eef0 7ae7 	vabs.f32	s15, s15
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 800211a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800211e:	4770      	bx	lr
		case 0 : 	delR.fb = - fabsf(delR.fb); delL.fb = - fabsf(delL.fb); break; // negative feedback;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <ChorusFDBsign_switch+0x48>)
 8002122:	edd3 7a01 	vldr	s15, [r3, #4]
 8002126:	eef0 7ae7 	vabs.f32	s15, s15
 800212a:	eef1 7a67 	vneg.f32	s15, s15
 800212e:	edc3 7a01 	vstr	s15, [r3, #4]
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <ChorusFDBsign_switch+0x4c>)
 8002134:	edd3 7a01 	vldr	s15, [r3, #4]
 8002138:	eef0 7ae7 	vabs.f32	s15, s15
 800213c:	eef1 7a67 	vneg.f32	s15, s15
 8002140:	e7eb      	b.n	800211a <ChorusFDBsign_switch+0x1e>
 8002142:	bf00      	nop
 8002144:	20002740 	.word	0x20002740
 8002148:	20001148 	.word	0x20001148

0800214c <delay_write>:
	return del->mix;
}
/*-------------------------------------------------------------------------------------------*/
void delay_write (monochorus_t *del, float xin)
{
	del->dline[del->in_idx] = xin;
 800214c:	68c3      	ldr	r3, [r0, #12]
 800214e:	eb00 0283 	add.w	r2, r0, r3, lsl #2

	(del->in_idx)++;
 8002152:	3301      	adds	r3, #1
	if (del->in_idx >= DEPTH)
 8002154:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
		del->in_idx = 0;
 8002158:	bfa8      	it	ge
 800215a:	2300      	movge	r3, #0
	del->dline[del->in_idx] = xin;
 800215c:	ed82 0a04 	vstr	s0, [r2, #16]
		del->in_idx = 0;
 8002160:	60c3      	str	r3, [r0, #12]
}
 8002162:	4770      	bx	lr

08002164 <delay_read>:
/*-------------------------------------------------------------------------------------------*/
float delay_read (monochorus_t *del, float delay) // "delay" is a floating point number of samples
{
 8002164:	b510      	push	{r4, lr}
	float y_n_2;	// y(n-2)
	float y_n_3;	// y(n-3)
	int32_t idx;

	d = delay;
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002166:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 800216a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002172:	ed2d 8b02 	vpush	{d8}
 8002176:	4604      	mov	r4, r0
 8002178:	eeb0 8a40 	vmov.f32	s16, s0
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 800217c:	d464      	bmi.n	8002248 <delay_read+0xe4>
	if (d > DEPTH-MARGIN) d = DEPTH-MARGIN;
 800217e:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002250 <delay_read+0xec>
 8002182:	eeb4 0a67 	vcmp.f32	s0, s15
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	bfc8      	it	gt
 800218c:	eeb0 8a67 	vmovgt.f32	s16, s15

	i = (int32_t)floorf(d);
 8002190:	eeb0 0a48 	vmov.f32	s0, s16
 8002194:	f005 fa7c 	bl	8007690 <floorf>
 8002198:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	f = d - i;

	idx = del->in_idx - i;
 800219c:	68e3      	ldr	r3, [r4, #12]
	if (idx < 0) idx += DEPTH;
 800219e:	ee10 2a10 	vmov	r2, s0
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	bf48      	it	mi
 80021a6:	f503 63af 	addmi.w	r3, r3, #1400	; 0x578
	y_n = del->dline[idx]; 		// y(n)
 80021aa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80021ae:	edd2 5a04 	vldr	s11, [r2, #16]

	idx--;
	if (idx < 0) idx += DEPTH;
 80021b2:	1e5a      	subs	r2, r3, #1
 80021b4:	bf48      	it	mi
 80021b6:	f203 5277 	addwmi	r2, r3, #1399	; 0x577
	y_n_1 = del->dline[idx];	// y(n-1)
 80021ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
	f = d - i;
 80021be:	eef8 7ac0 	vcvt.f32.s32	s15, s0
	y_n_1 = del->dline[idx];	// y(n-1)
 80021c2:	ed93 5a04 	vldr	s10, [r3, #16]
	//return (.5f)*(f-1)*(f-2)*y_n - f*(f-2)*y_n_1 + (.5f)*f*(f-1)*y_n_2 ; // 2nd order Lagrange interpolation

	//return .5f*(f-1)*((f-2)*y_n + f*y_n_2) - f*(f-2)*y_n_1 ;	// 2nd order Lagrange interpolation (faster)

	/* 3rd order Lagrange interpolation :  */
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80021c6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002254 <delay_read+0xf0>
	if (idx < 0) idx += DEPTH;
 80021ca:	1e53      	subs	r3, r2, #1
	f = d - i;
 80021cc:	ee38 8a67 	vsub.f32	s16, s16, s15
	if (idx < 0) idx += DEPTH;
 80021d0:	bf48      	it	mi
 80021d2:	f202 5377 	addwmi	r3, r2, #1399	; 0x577
	if (idx < 0) idx += DEPTH;
 80021d6:	1e58      	subs	r0, r3, #1
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80021d8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80021dc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80021e0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80021e4:	ee78 6a66 	vsub.f32	s13, s16, s13
	if (idx < 0) idx += DEPTH;
 80021e8:	bf48      	it	mi
 80021ea:	f203 5077 	addwmi	r0, r3, #1399	; 0x577
	y_n_2 = del->dline[idx];	// y(n-2)
 80021ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	y_n_3 = del->dline[idx];	// y(n-3)
 80021f2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 80021f6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80021fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80021fe:	edd4 7a04 	vldr	s15, [r4, #16]
	y_n_2 = del->dline[idx];	// y(n-2)
 8002202:	edd2 4a04 	vldr	s9, [r2, #16]
	return (f-2)*(f-3)*(-0.16666666666f *(f-1)*y_n + 0.5f * f * y_n_1) + f*(f-1)*(-0.5f * (f-3)*y_n_2 + 0.166666666666f * (f-2)*y_n_3);
 8002206:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
 800220a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800220e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8002212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002216:	ee38 7a47 	vsub.f32	s14, s16, s14
 800221a:	eea6 0aa4 	vfma.f32	s0, s13, s9
 800221e:	ee67 7a08 	vmul.f32	s15, s14, s16
 8002222:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002226:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002258 <delay_read+0xf4>
 800222a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002232:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002236:	ee28 8a05 	vmul.f32	s16, s16, s10
 800223a:	eea7 8a25 	vfma.f32	s16, s14, s11

}
 800223e:	eea6 0a08 	vfma.f32	s0, s12, s16
 8002242:	ecbd 8b02 	vpop	{d8}
 8002246:	bd10      	pop	{r4, pc}
	if (d < MARGIN) d = MARGIN; // MARGIN is the minimum allowed delay
 8002248:	eeb0 8a67 	vmov.f32	s16, s15
 800224c:	e7a0      	b.n	8002190 <delay_read+0x2c>
 800224e:	bf00      	nop
 8002250:	44ae4000 	.word	0x44ae4000
 8002254:	3e2aaaab 	.word	0x3e2aaaab
 8002258:	be2aaaab 	.word	0xbe2aaaab

0800225c <mono_chorus_compute>:
/*---------------------------------------------------------------------------------------------*/

float mono_chorus_compute(monochorus_t *del, Lfo_t *lfo, float xin)
{
 800225c:	b538      	push	{r3, r4, r5, lr}
	float yout;
	float x1;
	float x2;

	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 800225e:	f500 55af 	add.w	r5, r0, #5600	; 0x15e0
{
 8002262:	ed2d 8b04 	vpush	{d8-d9}
 8002266:	4604      	mov	r4, r0
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002268:	3510      	adds	r5, #16
 800226a:	4608      	mov	r0, r1
 800226c:	edd5 8a00 	vldr	s17, [r5]
{
 8002270:	eeb0 8a40 	vmov.f32	s16, s0
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 8002274:	f7ff fe1e 	bl	8001eb4 <Lfo_SampleCompute>
 8002278:	ee38 0a80 	vadd.f32	s0, s17, s0
 800227c:	eef1 9a08 	vmov.f32	s19, #24	; 0x40c00000  6.0
 8002280:	ee30 0a29 	vadd.f32	s0, s0, s19
 8002284:	4620      	mov	r0, r4
 8002286:	f7ff ff6d 	bl	8002164 <delay_read>

	if (del->mode == 1)
 800228a:	f241 53f4 	movw	r3, #5620	; 0x15f4
	x2 = delay_read (del, del->baseDelay + Lfo_SampleCompute(lfo) + MARGIN);
 800228e:	eef0 8a40 	vmov.f32	s17, s0
	if (del->mode == 1)
 8002292:	56e3      	ldrsb	r3, [r4, r3]
 8002294:	ed94 9a01 	vldr	s18, [r4, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d123      	bne.n	80022e4 <mono_chorus_compute+0x88>
		x1 = xin + del->fb * x2; // variable delay feedback signal or ...
 800229c:	eeb0 0a48 	vmov.f32	s0, s16
 80022a0:	eea9 0a28 	vfma.f32	s0, s18, s17
	else
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal

	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 80022a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80022a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	dc24      	bgt.n	80022fc <mono_chorus_compute+0xa0>
	x1 = (x1 < -1.0f) ? -1.0f : x1 ;
 80022b2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80022b6:	eeb4 0a67 	vcmp.f32	s0, s15
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	bf48      	it	mi
 80022c0:	eeb0 0a67 	vmovmi.f32	s0, s15

	yout = del->mix * x1 + del->fw * x2;
 80022c4:	edd4 7a02 	vldr	s15, [r4, #8]
 80022c8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80022cc:	edd4 7a00 	vldr	s15, [r4]
 80022d0:	eee7 8a80 	vfma.f32	s17, s15, s0
	//yout = del->mix * xin + del->fw * x2; // not good sounding...
	delay_write(del, x1);
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff ff39 	bl	800214c <delay_write>

	return yout;
}
 80022da:	eeb0 0a68 	vmov.f32	s0, s17
 80022de:	ecbd 8b04 	vpop	{d8-d9}
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
		x1 = xin + del->fb * delay_read (del, del->baseDelay + MARGIN); // fixed delay feedback signal
 80022e4:	ed95 0a00 	vldr	s0, [r5]
 80022e8:	4620      	mov	r0, r4
 80022ea:	ee30 0a29 	vadd.f32	s0, s0, s19
 80022ee:	f7ff ff39 	bl	8002164 <delay_read>
 80022f2:	eea9 8a00 	vfma.f32	s16, s18, s0
 80022f6:	eeb0 0a48 	vmov.f32	s0, s16
 80022fa:	e7d3      	b.n	80022a4 <mono_chorus_compute+0x48>
	x1 = (x1 > 1.0f) ? 1.0f : x1 ; //clip too loud samples
 80022fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002300:	e7e0      	b.n	80022c4 <mono_chorus_compute+0x68>
	...

08002304 <stereoChorus_compute>:

/*--------------------This is the main stereo chorus function : ----------------------------*/

void stereoChorus_compute (float * left_out, float * right_out, float in)
{
 8002304:	b570      	push	{r4, r5, r6, lr}
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 8002306:	4c0c      	ldr	r4, [pc, #48]	; (8002338 <stereoChorus_compute+0x34>)
{
 8002308:	ed2d 8b02 	vpush	{d8}
 800230c:	4606      	mov	r6, r0
 800230e:	460d      	mov	r5, r1
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 8002310:	480a      	ldr	r0, [pc, #40]	; (800233c <stereoChorus_compute+0x38>)
 8002312:	4621      	mov	r1, r4
{
 8002314:	eeb0 8a40 	vmov.f32	s16, s0
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 8002318:	f7ff ffa0 	bl	800225c <mono_chorus_compute>
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 800231c:	f104 0110 	add.w	r1, r4, #16
	*left_out = mono_chorus_compute(&delL, &lfoL, in);
 8002320:	ed86 0a00 	vstr	s0, [r6]
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 8002324:	4806      	ldr	r0, [pc, #24]	; (8002340 <stereoChorus_compute+0x3c>)
 8002326:	eeb0 0a48 	vmov.f32	s0, s16
 800232a:	f7ff ff97 	bl	800225c <mono_chorus_compute>
}
 800232e:	ecbd 8b02 	vpop	{d8}
	*right_out = mono_chorus_compute(&delR, &lfoR, in);
 8002332:	ed85 0a00 	vstr	s0, [r5]
}
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	20001128 	.word	0x20001128
 800233c:	20001148 	.word	0x20001148
 8002340:	20002740 	.word	0x20002740

08002344 <Delay_init>:

/*-------------------------------------------------------------------------------------------*/
void Delay_init(void)
{
	/* initialize pointers positions for delay effect */
	shift = INIT_DELAY;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <Delay_init+0x18>)
 8002346:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800234a:	601a      	str	r2, [r3, #0]
	readpos = delayline;
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <Delay_init+0x1c>)
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <Delay_init+0x20>)
 8002350:	601a      	str	r2, [r3, #0]
	writepos = delayline + INIT_DELAY;
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <Delay_init+0x24>)
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <Delay_init+0x28>)
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20012a5c 	.word	0x20012a5c
 8002360:	20012a58 	.word	0x20012a58
 8002364:	20003fec 	.word	0x20003fec
 8002368:	20012a60 	.word	0x20012a60
 800236c:	20010b0c 	.word	0x20010b0c

08002370 <Delay_clean>:
/*-------------------------------------------------------------------------------------------*/
void Delay_clean(void)
{
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <Delay_clean+0x10>)
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <Delay_clean+0x14>)
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
		delayline[i] = 0;
 8002374:	2100      	movs	r1, #0
 8002376:	f843 1b04 	str.w	r1, [r3], #4
	for (int i = 0 ; i < DELAYLINE_LEN + 2; i++)
 800237a:	4293      	cmp	r3, r2
 800237c:	d1fb      	bne.n	8002376 <Delay_clean+0x6>
}
 800237e:	4770      	bx	lr
 8002380:	20003fec 	.word	0x20003fec
 8002384:	20012a54 	.word	0x20012a54

08002388 <Delay_time_set>:
}
/*-------------------------------------------------------------------------------------------*/
void Delay_time_set(uint8_t val)
{
	float 	*pos;
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 8002388:	ee07 0a90 	vmov	s15, r0
 800238c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80023c4 <Delay_time_set+0x3c>
 8002390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002394:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80023c8 <Delay_time_set+0x40>
{
 8002398:	b508      	push	{r3, lr}
	shift = (uint32_t) lrintf((DELAYLINE_LEN - 1 - MIN_DELAY)/MIDI_MAX * val + MIN_DELAY);
 800239a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800239e:	f005 f9b9 	bl	8007714 <lrintf>
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <Delay_time_set+0x44>)
 80023a4:	6018      	str	r0, [r3, #0]
	pos = writepos - shift;
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <Delay_time_set+0x48>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
	if (pos >= delayline)
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <Delay_time_set+0x4c>)
 80023b0:	4298      	cmp	r0, r3
		readpos = pos;
	else
		readpos = pos + DELAYLINE_LEN - 1;
 80023b2:	bf38      	it	cc
 80023b4:	f500 406a 	addcc.w	r0, r0, #59904	; 0xea00
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <Delay_time_set+0x50>)
 80023ba:	bf38      	it	cc
 80023bc:	305c      	addcc	r0, #92	; 0x5c
 80023be:	6018      	str	r0, [r3, #0]

}
 80023c0:	bd08      	pop	{r3, pc}
 80023c2:	bf00      	nop
 80023c4:	437a0000 	.word	0x437a0000
 80023c8:	42e84489 	.word	0x42e84489
 80023cc:	20012a5c 	.word	0x20012a5c
 80023d0:	20012a60 	.word	0x20012a60
 80023d4:	20003fec 	.word	0x20003fec
 80023d8:	20012a58 	.word	0x20012a58

080023dc <DelayFeedback_set>:
	fdb *= 0.95f ;//
}
/*-------------------------------------------------------------------------------------------*/
void DelayFeedback_set(uint8_t val)
{
	fdb = val / MIDI_MAX;
 80023dc:	ee07 0a90 	vmov	s15, r0
 80023e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80023f4 <DelayFeedback_set+0x18>
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <DelayFeedback_set+0x1c>)
 80023e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ee:	edc3 7a00 	vstr	s15, [r3]
}
 80023f2:	4770      	bx	lr
 80023f4:	42fe0000 	.word	0x42fe0000
 80023f8:	20000004 	.word	0x20000004

080023fc <DelayWet_set>:
/*-------------------------------------------------------------------------------------------*/
void DelayWet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 80023fc:	ee07 0a90 	vmov	s15, r0
 8002400:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002414 <DelayWet_set+0x18>
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <DelayWet_set+0x1c>)
 8002406:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800240a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800240e:	edc3 7a00 	vstr	s15, [r3]
}
 8002412:	4770      	bx	lr
 8002414:	42fe0000 	.word	0x42fe0000
 8002418:	20000008 	.word	0x20000008

0800241c <Delay_compute>:
float Delay_compute (float x)
{
	float y, dy;

	// (*readpos) : delayed sample read at the output of the delay line
	dy = (1.f - coeff_a1)*(*readpos) + coeff_a1 * old_dy; // apply lowpass filter in the loop
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <Delay_compute+0x98>)
 800241e:	4926      	ldr	r1, [pc, #152]	; (80024b8 <Delay_compute+0x9c>)
 8002420:	ed92 7a00 	vldr	s14, [r2]
 8002424:	eddf 7a25 	vldr	s15, [pc, #148]	; 80024bc <Delay_compute+0xa0>
 8002428:	680b      	ldr	r3, [r1, #0]
 800242a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242e:	edd3 6a00 	vldr	s13, [r3]
 8002432:	eddf 7a23 	vldr	s15, [pc, #140]	; 80024c0 <Delay_compute+0xa4>
 8002436:	eea6 7aa7 	vfma.f32	s14, s13, s15
{
 800243a:	b530      	push	{r4, r5, lr}
	old_dy = dy;
 800243c:	ed82 7a00 	vstr	s14, [r2]
	y = x + fdb*dy;
 8002440:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <Delay_compute+0xa8>)
 8002442:	edd2 7a00 	vldr	s15, [r2]
 8002446:	eef0 6a40 	vmov.f32	s13, s0
 800244a:	eee7 6a87 	vfma.f32	s13, s15, s14

	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 800244e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002452:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	y = x + fdb*dy;
 800245a:	eeb0 7a66 	vmov.f32	s14, s13
	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 800245e:	dc25      	bgt.n	80024ac <Delay_compute+0x90>
	y = (y < -1.0f) ? -1.0f : y ;
 8002460:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8002464:	eeb4 7a66 	vcmp.f32	s14, s13
 8002468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246c:	bf48      	it	mi
 800246e:	eeb0 7a66 	vmovmi.f32	s14, s13
	*writepos = y; // write new computed sample at the input of the delay line
 8002472:	4d15      	ldr	r5, [pc, #84]	; (80024c8 <Delay_compute+0xac>)

	/* update the delay line pointers : */
	writepos++;
	readpos++;

	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002474:	4c15      	ldr	r4, [pc, #84]	; (80024cc <Delay_compute+0xb0>)
	*writepos = y; // write new computed sample at the input of the delay line
 8002476:	682a      	ldr	r2, [r5, #0]
 8002478:	eca2 7a01 	vstmia	r2!, {s14}
	writepos++;
 800247c:	602a      	str	r2, [r5, #0]
	if ((writepos - delayline) >= DELAYLINE_LEN)
 800247e:	f64e 205c 	movw	r0, #59996	; 0xea5c
	readpos++;
 8002482:	3304      	adds	r3, #4
	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002484:	1b12      	subs	r2, r2, r4
	readpos++;
 8002486:	600b      	str	r3, [r1, #0]
	if ((writepos - delayline) >= DELAYLINE_LEN)
 8002488:	4282      	cmp	r2, r0
		writepos = delayline; // wrap pointer

	if ((readpos - delayline) >= DELAYLINE_LEN)
 800248a:	eba3 0304 	sub.w	r3, r3, r4
		writepos = delayline; // wrap pointer
 800248e:	bfc8      	it	gt
 8002490:	602c      	strgt	r4, [r5, #0]
	if ((readpos - delayline) >= DELAYLINE_LEN)
 8002492:	4283      	cmp	r3, r0
		readpos = delayline;  // wrap pointer

	return (wet * y + (1 - wet) * x);
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <Delay_compute+0xb4>)
		readpos = delayline;  // wrap pointer
 8002496:	bfc8      	it	gt
 8002498:	600c      	strgt	r4, [r1, #0]
	return (wet * y + (1 - wet) * x);
 800249a:	edd3 6a00 	vldr	s13, [r3]
 800249e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80024a2:	ee27 0a80 	vmul.f32	s0, s15, s0

}
 80024a6:	eea6 0a87 	vfma.f32	s0, s13, s14
 80024aa:	bd30      	pop	{r4, r5, pc}
	y = (y > 1.0f) ? 1.0f : y ; //clip too loud samples
 80024ac:	eeb0 7a67 	vmov.f32	s14, s15
 80024b0:	e7df      	b.n	8002472 <Delay_compute+0x56>
 80024b2:	bf00      	nop
 80024b4:	20012a54 	.word	0x20012a54
 80024b8:	20012a58 	.word	0x20012a58
 80024bc:	3f19999a 	.word	0x3f19999a
 80024c0:	3ecccccc 	.word	0x3ecccccc
 80024c4:	20000004 	.word	0x20000004
 80024c8:	20012a60 	.word	0x20012a60
 80024cc:	20003fec 	.word	0x20003fec
 80024d0:	20000008 	.word	0x20000008

080024d4 <Drifter_amp_set>:
Drifter_t	d3 _CCM_ ;

/*-------------------------------------------------------------------------------------------*/
void	Drifter_amp_set(uint8_t val)
{
	d1.gain = d2.gain = d3.gain = (val / MIDI_MAX)*(val / MIDI_MAX);
 80024d4:	ee07 0a90 	vmov	s15, r0
 80024d8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80024f8 <Drifter_amp_set+0x24>
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <Drifter_amp_set+0x28>)
 80024de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024ea:	edc3 7a02 	vstr	s15, [r3, #8]
 80024ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 80024f2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

}
 80024f6:	4770      	bx	lr
 80024f8:	42fe0000 	.word	0x42fe0000
 80024fc:	20003d38 	.word	0x20003d38

08002500 <Drifter_minFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_minFreq_set(uint8_t val)
{
	d1.fmin = d2.fmin = d3.fmin = .1f + 50 * val / MIDI_MAX;
 8002500:	2332      	movs	r3, #50	; 0x32
 8002502:	4358      	muls	r0, r3
 8002504:	ee07 0a90 	vmov	s15, r0
 8002508:	eddf 6a08 	vldr	s13, [pc, #32]	; 800252c <Drifter_minFreq_set+0x2c>
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <Drifter_minFreq_set+0x30>)
 800250e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002516:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002534 <Drifter_minFreq_set+0x34>
 800251a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800251e:	edc3 7a01 	vstr	s15, [r3, #4]
 8002522:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8002526:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

}
 800252a:	4770      	bx	lr
 800252c:	42fe0000 	.word	0x42fe0000
 8002530:	20003d38 	.word	0x20003d38
 8002534:	3dcccccd 	.word	0x3dcccccd

08002538 <Drifter_maxFreq_set>:
/*-------------------------------------------------------------------------------------------*/
void	Drifter_maxFreq_set(uint8_t val)
{
	float x;

	x = (1 + 19 * val / MIDI_MAX )* d1.fmin ;
 8002538:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800253c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002540:	ee07 0a90 	vmov	s15, r0
 8002544:	eddf 6a11 	vldr	s13, [pc, #68]	; 800258c <Drifter_maxFreq_set+0x54>
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <Drifter_maxFreq_set+0x58>)
 800254a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800255a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800255e:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (x > 10000)
 8002562:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002594 <Drifter_maxFreq_set+0x5c>
 8002566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		d1.fmax = d2.fmax = d3.fmax = 10000;
 800256e:	bfc3      	ittte	gt
 8002570:	ed83 7a00 	vstrgt	s14, [r3]
 8002574:	ed83 7a0b 	vstrgt	s14, [r3, #44]	; 0x2c
 8002578:	ed83 7a16 	vstrgt	s14, [r3, #88]	; 0x58
	else {
		d1.fmax = d2.fmax = d3.fmax = x;
 800257c:	edc3 7a00 	vstrle	s15, [r3]
 8002580:	bfdc      	itt	le
 8002582:	edc3 7a0b 	vstrle	s15, [r3, #44]	; 0x2c
 8002586:	edc3 7a16 	vstrle	s15, [r3, #88]	; 0x58
	}
}
 800258a:	4770      	bx	lr
 800258c:	42fe0000 	.word	0x42fe0000
 8002590:	20003d38 	.word	0x20003d38
 8002594:	461c4000 	.word	0x461c4000

08002598 <drifter_newSegment>:
/*-------------------------------------------------------------------------------------------*/
void drifter_newSegment(Drifter_t *d) //
{
	d->n = 0;
	d->initial = d->final;
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 8002598:	eddf 7a17 	vldr	s15, [pc, #92]	; 80025f8 <drifter_newSegment+0x60>
 800259c:	ed90 7a00 	vldr	s14, [r0]
 80025a0:	ee87 0a87 	vdiv.f32	s0, s15, s14
	d->n = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	6183      	str	r3, [r0, #24]
	d->initial = d->final;
 80025a8:	6a03      	ldr	r3, [r0, #32]
 80025aa:	61c3      	str	r3, [r0, #28]
{
 80025ac:	b510      	push	{r4, lr}
 80025ae:	4604      	mov	r4, r0
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 80025b0:	ed90 7a01 	vldr	s14, [r0, #4]
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 80025b4:	ed80 0a03 	vstr	s0, [r0, #12]
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 80025b8:	eec7 0a87 	vdiv.f32	s1, s15, s14
 80025bc:	edc0 0a04 	vstr	s1, [r0, #16]
	d->length = frand_a_b(d->minLength,d->maxLength);
 80025c0:	f001 faba 	bl	8003b38 <frand_a_b>
 80025c4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	d->final = frand_a_b(-1, 1);
 80025c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	d->length = frand_a_b(d->minLength,d->maxLength);
 80025cc:	ed84 0a05 	vstr	s0, [r4, #20]
	d->final = frand_a_b(-1, 1);
 80025d0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80025d4:	f001 fab0 	bl	8003b38 <frand_a_b>
	d->slope = (d->final - d->initial) / d->length ;
 80025d8:	edd4 7a07 	vldr	s15, [r4, #28]
	d->final = frand_a_b(-1, 1);
 80025dc:	ed84 0a08 	vstr	s0, [r4, #32]
	d->slope = (d->final - d->initial) / d->length ;
 80025e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80025e4:	edd4 7a05 	vldr	s15, [r4, #20]
 80025e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ec:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80025f0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 80025f4:	bd10      	pop	{r4, pc}
 80025f6:	bf00      	nop
 80025f8:	46ac4400 	.word	0x46ac4400

080025fc <drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float drifter_nextSample(Drifter_t *d) //
{
	d->out = d->gain * (d->slope * d->n + d->initial);
 80025fc:	edd0 7a06 	vldr	s15, [r0, #24]
 8002600:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
	(d->n)++;
 8002604:	6983      	ldr	r3, [r0, #24]
	if (d->n >= d->length)
 8002606:	6942      	ldr	r2, [r0, #20]
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800260c:	edd0 7a07 	vldr	s15, [r0, #28]
 8002610:	eee6 7a87 	vfma.f32	s15, s13, s14
	(d->n)++;
 8002614:	3301      	adds	r3, #1
	if (d->n >= d->length)
 8002616:	4293      	cmp	r3, r2
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002618:	ed90 7a02 	vldr	s14, [r0, #8]
	(d->n)++;
 800261c:	6183      	str	r3, [r0, #24]
	d->out = d->gain * (d->slope * d->n + d->initial);
 800261e:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 8002622:	b510      	push	{r4, lr}
	d->out = d->gain * (d->slope * d->n + d->initial);
 8002624:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
{
 8002628:	4604      	mov	r4, r0
	if (d->n >= d->length)
 800262a:	d301      	bcc.n	8002630 <drifter_nextSample+0x34>
		{
			drifter_newSegment(d);
 800262c:	f7ff ffb4 	bl	8002598 <drifter_newSegment>
		}
	return d->out;
}
 8002630:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8002634:	bd10      	pop	{r4, pc}
	...

08002638 <d1_drifter_nextSample>:
/*-------------------------------------------------------------------------------------------*/
float d1_drifter_nextSample(void) //
{
	return drifter_nextSample(&d1);
 8002638:	4801      	ldr	r0, [pc, #4]	; (8002640 <d1_drifter_nextSample+0x8>)
 800263a:	f7ff bfdf 	b.w	80025fc <drifter_nextSample>
 800263e:	bf00      	nop
 8002640:	20003d90 	.word	0x20003d90

08002644 <d2_drifter_nextSample>:
}
/*-------------------------------------------------------------------------------------------*/
float d2_drifter_nextSample(void) //
{
	return drifter_nextSample(&d2);
 8002644:	4801      	ldr	r0, [pc, #4]	; (800264c <d2_drifter_nextSample+0x8>)
 8002646:	f7ff bfd9 	b.w	80025fc <drifter_nextSample>
 800264a:	bf00      	nop
 800264c:	20003d64 	.word	0x20003d64

08002650 <drifter_prepare>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_prepare(Drifter_t *d)
{
	d->final = 0;
 8002650:	2200      	movs	r2, #0
 8002652:	6202      	str	r2, [r0, #32]
	d->fmax = 4;
 8002654:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002658:	6002      	str	r2, [r0, #0]
	d->fmin = 2;
 800265a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265e:	6042      	str	r2, [r0, #4]
	d->gain = .01f;
 8002660:	4a01      	ldr	r2, [pc, #4]	; (8002668 <drifter_prepare+0x18>)
 8002662:	6082      	str	r2, [r0, #8]

	drifter_newSegment(d);
 8002664:	f7ff bf98 	b.w	8002598 <drifter_newSegment>
 8002668:	3c23d70a 	.word	0x3c23d70a

0800266c <drifter_init>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_init(void)
{
 800266c:	b510      	push	{r4, lr}
	drifter_prepare(&d1);
 800266e:	4c07      	ldr	r4, [pc, #28]	; (800268c <drifter_init+0x20>)
 8002670:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002674:	f7ff ffec 	bl	8002650 <drifter_prepare>
	drifter_prepare(&d2);
 8002678:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800267c:	f7ff ffe8 	bl	8002650 <drifter_prepare>
	drifter_prepare(&d3);
 8002680:	4620      	mov	r0, r4
}
 8002682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	drifter_prepare(&d3);
 8002686:	f7ff bfe3 	b.w	8002650 <drifter_prepare>
 800268a:	bf00      	nop
 800268c:	20003d38 	.word	0x20003d38

08002690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002690:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002692:	2410      	movs	r4, #16
{
 8002694:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002696:	4622      	mov	r2, r4
 8002698:	2100      	movs	r1, #0
 800269a:	a80e      	add	r0, sp, #56	; 0x38
 800269c:	f004 fbb7 	bl	8006e0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a0:	2214      	movs	r2, #20
 80026a2:	2100      	movs	r1, #0
 80026a4:	a807      	add	r0, sp, #28
 80026a6:	f004 fbb2 	bl	8006e0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026aa:	4622      	mov	r2, r4
 80026ac:	2100      	movs	r1, #0
 80026ae:	a803      	add	r0, sp, #12
 80026b0:	f004 fbad 	bl	8006e0e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b4:	2400      	movs	r4, #0
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <SystemClock_Config+0xac>)
 80026b8:	9401      	str	r4, [sp, #4]
 80026ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <SystemClock_Config+0xb0>)
 80026ce:	9402      	str	r4, [sp, #8]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	9302      	str	r3, [sp, #8]
 80026e0:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026e2:	2601      	movs	r6, #1
 80026e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026e8:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026ea:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026f2:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026f4:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80026fc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002700:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002702:	2307      	movs	r3, #7
 8002704:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002706:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002708:	f003 fcde 	bl	80060c8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800270c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800270e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002712:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271a:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800271e:	a807      	add	r0, sp, #28
 8002720:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002722:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002724:	f003 fea4 	bl	8006470 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 144;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8002728:	2303      	movs	r3, #3
 800272a:	2090      	movs	r0, #144	; 0x90
 800272c:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002730:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002732:	9603      	str	r6, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002734:	f003 ff56 	bl	80065e4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002738:	b018      	add	sp, #96	; 0x60
 800273a:	bd70      	pop	{r4, r5, r6, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000

08002744 <main>:
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0a6      	sub	sp, #152	; 0x98
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002748:	2400      	movs	r4, #0
 800274a:	4d93      	ldr	r5, [pc, #588]	; (8002998 <main+0x254>)
  HAL_Init();
 800274c:	f002 fc80 	bl	8005050 <HAL_Init>
  SystemClock_Config();
 8002750:	f7ff ff9e 	bl	8002690 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	2214      	movs	r2, #20
 8002756:	2100      	movs	r1, #0
 8002758:	a81d      	add	r0, sp, #116	; 0x74
 800275a:	f004 fb58 	bl	8006e0e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800275e:	9417      	str	r4, [sp, #92]	; 0x5c
 8002760:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002762:	488e      	ldr	r0, [pc, #568]	; (800299c <main+0x258>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	632b      	str	r3, [r5, #48]	; 0x30
 800276a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	9317      	str	r3, [sp, #92]	; 0x5c
 8002772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002774:	9418      	str	r4, [sp, #96]	; 0x60
 8002776:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277c:	632b      	str	r3, [r5, #48]	; 0x30
 800277e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	9318      	str	r3, [sp, #96]	; 0x60
 8002786:	9b18      	ldr	r3, [sp, #96]	; 0x60
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	9419      	str	r4, [sp, #100]	; 0x64
 800278a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	632b      	str	r3, [r5, #48]	; 0x30
 8002792:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	9319      	str	r3, [sp, #100]	; 0x64
 800279a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279c:	941a      	str	r4, [sp, #104]	; 0x68
 800279e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	632b      	str	r3, [r5, #48]	; 0x30
 80027a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027a8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80027ac:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ae:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80027b0:	210c      	movs	r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80027b4:	f002 ff62 	bl	800567c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80027b8:	4622      	mov	r2, r4
 80027ba:	2102      	movs	r1, #2
 80027bc:	4878      	ldr	r0, [pc, #480]	; (80029a0 <main+0x25c>)
 80027be:	f002 ff5d 	bl	800567c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FIRE_LED_GPIO_Port, FIRE_LED_Pin, GPIO_PIN_RESET);
 80027c2:	4622      	mov	r2, r4
 80027c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027c8:	4876      	ldr	r0, [pc, #472]	; (80029a4 <main+0x260>)
 80027ca:	f002 ff57 	bl	800567c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_A_Pin SW1_B_Pin */
  GPIO_InitStruct.Pin = SW1_A_Pin|SW1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	4b76      	ldr	r3, [pc, #472]	; (80029a8 <main+0x264>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d0:	4874      	ldr	r0, [pc, #464]	; (80029a4 <main+0x260>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d2:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027d4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d8:	a91d      	add	r1, sp, #116	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027da:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027de:	971f      	str	r7, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e0:	f002 fe6c 	bl	80054bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_BTN_Pin FIRE_BTN_Pin */
  GPIO_InitStruct.Pin = SW1_BTN_Pin|FIRE_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027e4:	4b71      	ldr	r3, [pc, #452]	; (80029ac <main+0x268>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	486f      	ldr	r0, [pc, #444]	; (80029a4 <main+0x260>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e8:	971f      	str	r7, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027ea:	f248 0180 	movw	r1, #32896	; 0x8080
 80027ee:	e9cd 131d 	strd	r1, r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f2:	a91d      	add	r1, sp, #116	; 0x74
 80027f4:	f002 fe62 	bl	80054bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 80027f8:	f04f 090c 	mov.w	r9, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	a91d      	add	r1, sp, #116	; 0x74
 80027fe:	4867      	ldr	r0, [pc, #412]	; (800299c <main+0x258>)

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002800:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002804:	e9cd 971d 	strd	r9, r7, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f002 fe56 	bl	80054bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002810:	a91d      	add	r1, sp, #116	; 0x74
 8002812:	4863      	ldr	r0, [pc, #396]	; (80029a0 <main+0x25c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	e9cd 871d 	strd	r8, r7, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800281c:	f002 fe4e 	bl	80054bc <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_LED_Pin */
  GPIO_InitStruct.Pin = FIRE_LED_Pin;
 8002820:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8002824:	a91d      	add	r1, sp, #116	; 0x74
 8002826:	485f      	ldr	r0, [pc, #380]	; (80029a4 <main+0x260>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002828:	e9cd 371d 	strd	r3, r7, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  HAL_GPIO_Init(FIRE_LED_GPIO_Port, &GPIO_InitStruct);
 8002830:	f002 fe44 	bl	80054bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002834:	4622      	mov	r2, r4
 8002836:	4621      	mov	r1, r4
 8002838:	2017      	movs	r0, #23
 800283a:	f002 fc5b 	bl	80050f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800283e:	2017      	movs	r0, #23
 8002840:	f002 fc8c 	bl	800515c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002844:	4622      	mov	r2, r4
 8002846:	4621      	mov	r1, r4
 8002848:	2028      	movs	r0, #40	; 0x28
 800284a:	f002 fc53 	bl	80050f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800284e:	2028      	movs	r0, #40	; 0x28
 8002850:	f002 fc84 	bl	800515c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002854:	9416      	str	r4, [sp, #88]	; 0x58
 8002856:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800285c:	632b      	str	r3, [r5, #48]	; 0x30
 800285e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2c2.Init.ClockSpeed = 100000;
 8002860:	4d53      	ldr	r5, [pc, #332]	; (80029b0 <main+0x26c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002866:	4622      	mov	r2, r4
 8002868:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800286a:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800286c:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 800286e:	9b16      	ldr	r3, [sp, #88]	; 0x58
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002870:	f002 fc40 	bl	80050f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002874:	200f      	movs	r0, #15
 8002876:	f002 fc71 	bl	800515c <HAL_NVIC_EnableIRQ>
  hi2c2.Instance = I2C2;
 800287a:	484e      	ldr	r0, [pc, #312]	; (80029b4 <main+0x270>)
  hi2c2.Init.ClockSpeed = 100000;
 800287c:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <main+0x274>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800287e:	6204      	str	r4, [r0, #32]
  hi2c2.Init.ClockSpeed = 100000;
 8002880:	e9c0 5300 	strd	r5, r3, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002884:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002888:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c2.Init.OwnAddress1 = 0;
 800288c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002890:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002894:	f002 ffd6 	bl	8005844 <HAL_I2C_Init>
  hi2s2.Instance = SPI2;
 8002898:	4848      	ldr	r0, [pc, #288]	; (80029bc <main+0x278>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <main+0x27c>)
  hspi3.Instance = SPI3;
 800289c:	4d49      	ldr	r5, [pc, #292]	; (80029c4 <main+0x280>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800289e:	f44f 7600 	mov.w	r6, #512	; 0x200
 80028a2:	e9c0 3600 	strd	r3, r6, [r0]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80028a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80028aa:	e9c0 3405 	strd	r3, r4, [r0, #20]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80028ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80028b2:	6106      	str	r6, [r0, #16]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80028b4:	e9c0 4707 	strd	r4, r7, [r0, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80028b8:	f003 f944 	bl	8005b44 <HAL_I2S_Init>
  huart1.Init.BaudRate = 115200;
 80028bc:	f8df c11c 	ldr.w	ip, [pc, #284]	; 80029dc <main+0x298>
  huart1.Instance = USART1;
 80028c0:	4841      	ldr	r0, [pc, #260]	; (80029c8 <main+0x284>)
  huart1.Init.BaudRate = 115200;
 80028c2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80028c6:	e9c0 c300 	strd	ip, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ca:	e9c0 4904 	strd	r4, r9, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d2:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028d6:	f004 fa37 	bl	8006d48 <HAL_UART_Init>
  hrng.Instance = RNG;
 80028da:	483c      	ldr	r0, [pc, #240]	; (80029cc <main+0x288>)
 80028dc:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <main+0x28c>)
 80028de:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80028e0:	f003 ff46 	bl	8006770 <HAL_RNG_Init>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028e4:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 80029e0 <main+0x29c>
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80028e8:	61ae      	str	r6, [r5, #24]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028ea:	f44f 7382 	mov.w	r3, #260	; 0x104
 80028ee:	e9c5 e300 	strd	lr, r3, [r5]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028f2:	2618      	movs	r6, #24
  hspi3.Init.CRCPolynomial = 10;
 80028f4:	230a      	movs	r3, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80028f6:	4628      	mov	r0, r5
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028f8:	e9c5 6407 	strd	r6, r4, [r5, #28]
  hspi3.Init.CRCPolynomial = 10;
 80028fc:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80028fe:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002902:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002906:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800290a:	f003 ffb1 	bl	8006870 <HAL_SPI_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800290e:	4632      	mov	r2, r6
 8002910:	4621      	mov	r1, r4
  htim1.Instance = TIM1;
 8002912:	4e30      	ldr	r6, [pc, #192]	; (80029d4 <main+0x290>)
 8002914:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80029e4 <main+0x2a0>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002918:	a820      	add	r0, sp, #128	; 0x80
 800291a:	f004 fa78 	bl	8006e0e <memset>
  htim1.Init.Period = 65535;
 800291e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002922:	e9c6 3403 	strd	r3, r4, [r6, #12]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002926:	a91d      	add	r1, sp, #116	; 0x74
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002928:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800292a:	4630      	mov	r0, r6
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800292c:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  htim1.Init.Prescaler = 0;
 8002934:	e9c6 9400 	strd	r9, r4, [r6]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	60b4      	str	r4, [r6, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293a:	e9c6 4405 	strd	r4, r4, [r6, #20]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800293e:	971f      	str	r7, [sp, #124]	; 0x7c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002940:	e9cd 8722 	strd	r8, r7, [sp, #136]	; 0x88
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002944:	f004 f902 	bl	8006b4c <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002948:	a91b      	add	r1, sp, #108	; 0x6c
 800294a:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294c:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002950:	f004 f948 	bl	8006be4 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8002954:	213c      	movs	r1, #60	; 0x3c
 8002956:	4630      	mov	r0, r6
 8002958:	f004 f86f 	bl	8006a3a <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 800295c:	463a      	mov	r2, r7
 800295e:	4641      	mov	r1, r8
 8002960:	480f      	ldr	r0, [pc, #60]	; (80029a0 <main+0x25c>)
    timer1 = TIM1->CNT;
 8002962:	4c1d      	ldr	r4, [pc, #116]	; (80029d8 <main+0x294>)
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8002964:	f002 fe8a 	bl	800567c <HAL_GPIO_WritePin>
  LCD_init(LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, hspi3);
 8002968:	2258      	movs	r2, #88	; 0x58
 800296a:	4629      	mov	r1, r5
 800296c:	4668      	mov	r0, sp
 800296e:	f004 fa43 	bl	8006df8 <memcpy>
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <main+0x258>)
 8002974:	2308      	movs	r3, #8
 8002976:	2104      	movs	r1, #4
 8002978:	4610      	mov	r0, r2
 800297a:	f000 fa69 	bl	8002e50 <LCD_init>
  MainMenu();
 800297e:	f000 f8b5 	bl	8002aec <MainMenu>
  Synth_Init();
 8002982:	f001 fd65 	bl	8004450 <Synth_Init>
  WM8978_Init();
 8002986:	f002 fab5 	bl	8004ef4 <WM8978_Init>
    PS_Application();
 800298a:	f7fe fabb 	bl	8000f04 <PS_Application>
    timer1 = TIM1->CNT;
 800298e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	e7f9      	b.n	800298a <main+0x246>
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40020000 	.word	0x40020000
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40020800 	.word	0x40020800
 80029a8:	10110000 	.word	0x10110000
 80029ac:	10310000 	.word	0x10310000
 80029b0:	40005800 	.word	0x40005800
 80029b4:	20013a68 	.word	0x20013a68
 80029b8:	000186a0 	.word	0x000186a0
 80029bc:	20013c04 	.word	0x20013c04
 80029c0:	40003800 	.word	0x40003800
 80029c4:	20013abc 	.word	0x20013abc
 80029c8:	20013b14 	.word	0x20013b14
 80029cc:	20013b94 	.word	0x20013b94
 80029d0:	50060800 	.word	0x50060800
 80029d4:	20013b54 	.word	0x20013b54
 80029d8:	20012a68 	.word	0x20012a68
 80029dc:	40011000 	.word	0x40011000
 80029e0:	40003c00 	.word	0x40003c00
 80029e4:	40010000 	.word	0x40010000

080029e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029e8:	4770      	bx	lr
	...

080029ec <Lin2Exp>:
}
//------------------------------------------------------------------------------------
// input val in 0 ... 127
// output is an exponential between min and max
float	Lin2Exp(uint8_t val, float min, float max)
{
 80029ec:	b508      	push	{r3, lr}
	return min * powf(max / min, val / MIDI_MAX);
 80029ee:	ee07 0a90 	vmov	s15, r0
{
 80029f2:	ed2d 8b02 	vpush	{d8}
 80029f6:	eeb0 8a40 	vmov.f32	s16, s0
	return min * powf(max / min, val / MIDI_MAX);
 80029fa:	ee80 0a88 	vdiv.f32	s0, s1, s16
 80029fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a02:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002a18 <Lin2Exp+0x2c>
 8002a06:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8002a0a:	f004 ff5f 	bl	80078cc <powf>
}
 8002a0e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002a12:	ecbd 8b02 	vpop	{d8}
 8002a16:	bd08      	pop	{r3, pc}
 8002a18:	42fe0000 	.word	0x42fe0000

08002a1c <tanhXdX>:
//------------------------------------------------------------------------------------

float tanhXdX(float x)
{
	float a = x*x;
 8002a1c:	ee20 0a00 	vmul.f32	s0, s0, s0
	// IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)
	x = ((a + 105)*a + 945) / ((15*a + 420)*a + 945);
 8002a20:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002a4c <tanhXdX+0x30>
 8002a24:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002a50 <tanhXdX+0x34>
 8002a28:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002a2c:	eef0 6a67 	vmov.f32	s13, s15
 8002a30:	eee7 6a00 	vfma.f32	s13, s14, s0
 8002a34:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a54 <tanhXdX+0x38>
 8002a38:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
 8002a3c:	eea0 7a06 	vfma.f32	s14, s0, s12
 8002a40:	eee7 7a00 	vfma.f32	s15, s14, s0
	return x;
}
 8002a44:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	42d20000 	.word	0x42d20000
 8002a50:	446c4000 	.word	0x446c4000
 8002a54:	43d20000 	.word	0x43d20000

08002a58 <fastTanh>:

//------------------------------------------------------------------------------------
float fastTanh(float var)
{
	if(var < -1.95f)     return -1.0f;
 8002a58:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002a98 <fastTanh+0x40>
 8002a5c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a64:	d411      	bmi.n	8002a8a <fastTanh+0x32>
	else if(var > 1.95f) return  1.0f;
 8002a66:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002a9c <fastTanh+0x44>
 8002a6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	dc0d      	bgt.n	8002a90 <fastTanh+0x38>
	else return  4.15f*var/(4.29f+var*var);
 8002a74:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002aa0 <fastTanh+0x48>
 8002a78:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002aa4 <fastTanh+0x4c>
 8002a7c:	eee0 7a00 	vfma.f32	s15, s0, s0
 8002a80:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002a84:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8002a88:	4770      	bx	lr
	if(var < -1.95f)     return -1.0f;
 8002a8a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002a8e:	4770      	bx	lr
	else if(var > 1.95f) return  1.0f;
 8002a90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	bff9999a 	.word	0xbff9999a
 8002a9c:	3ff9999a 	.word	0x3ff9999a
 8002aa0:	408947ae 	.word	0x408947ae
 8002aa4:	4084cccd 	.word	0x4084cccd

08002aa8 <softClipTwo>:
//------------------------------------------------------------------------------------
float 	softClipTwo(float in)
{
 8002aa8:	eef0 5a40 	vmov.f32	s11, s0
 8002aac:	b508      	push	{r3, lr}
	return in * tanhXdX(0.5*in);
 8002aae:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002ab2:	ee25 0a80 	vmul.f32	s0, s11, s0
 8002ab6:	f7ff ffb1 	bl	8002a1c <tanhXdX>
}
 8002aba:	ee20 0a25 	vmul.f32	s0, s0, s11
 8002abe:	bd08      	pop	{r3, pc}

08002ac0 <fastTan>:
//------------------------------------------------------------------------------------
float 	fastTan(float x)
{
	float A = -15*x+x*x*x;
 8002ac0:	ee20 7a00 	vmul.f32	s14, s0, s0
	float B = 3*(-5+2*x*x);
 8002ac4:	ee70 6a00 	vadd.f32	s13, s0, s0
	float A = -15*x+x*x*x;
 8002ac8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8002acc:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
 8002ad0:	eea0 7a27 	vfma.f32	s14, s0, s15
	float B = 3*(-5+2*x*x);
 8002ad4:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 8002ad8:	eee6 7a80 	vfma.f32	s15, s13, s0
 8002adc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002ae0:	ee27 0a80 	vmul.f32	s0, s15, s0
	return A/B;
}
 8002ae4:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8002ae8:	4770      	bx	lr
	...

08002aec <MainMenu>:

/**
  * @brief Main Menu
  */
void MainMenu(void)
{
 8002aec:	b538      	push	{r3, r4, r5, lr}
	LCD_drawHLine(0, 8, 83);
	LCD_refreshScr();
	if (activeItem == 0)
 8002aee:	4c2b      	ldr	r4, [pc, #172]	; (8002b9c <MainMenu+0xb0>)
	LCD_drawHLine(0, 8, 83);
 8002af0:	2253      	movs	r2, #83	; 0x53
 8002af2:	2108      	movs	r1, #8
 8002af4:	2000      	movs	r0, #0
 8002af6:	f000 fa13 	bl	8002f20 <LCD_drawHLine>
	LCD_refreshScr();
 8002afa:	f000 f9fb 	bl	8002ef4 <LCD_refreshScr>
	if (activeItem == 0)
 8002afe:	6825      	ldr	r5, [r4, #0]
 8002b00:	bbad      	cbnz	r5, 8002b6e <MainMenu+0x82>
	{
		LCD_invertText(true);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f000 f96a 	bl	8002ddc <LCD_invertText>
		LCD_print("SINE", 0, 0);
 8002b08:	462a      	mov	r2, r5
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	4824      	ldr	r0, [pc, #144]	; (8002ba0 <MainMenu+0xb4>)
 8002b0e:	f000 f9e3 	bl	8002ed8 <LCD_print>
		LCD_invertText(false);
 8002b12:	4628      	mov	r0, r5
 8002b14:	f000 f962 	bl	8002ddc <LCD_invertText>
	else
	{
		LCD_print("SINE", 0, 0);
	}
	//  LCD_goXY(0,20);
	LCD_print("Freq       440", 0, 1);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4821      	ldr	r0, [pc, #132]	; (8002ba4 <MainMenu+0xb8>)
 8002b1e:	f000 f9db 	bl	8002ed8 <LCD_print>
	LCD_print("Mod        100", 0, 2);
 8002b22:	2202      	movs	r2, #2
 8002b24:	2100      	movs	r1, #0
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <MainMenu+0xbc>)
 8002b28:	f000 f9d6 	bl	8002ed8 <LCD_print>
	LCD_print("Rate      1200", 0, 3);
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	2100      	movs	r1, #0
 8002b30:	481e      	ldr	r0, [pc, #120]	; (8002bac <MainMenu+0xc0>)
 8002b32:	f000 f9d1 	bl	8002ed8 <LCD_print>
	LCD_print("- - - -       ", 0, 4);
 8002b36:	2204      	movs	r2, #4
 8002b38:	2100      	movs	r1, #0
 8002b3a:	481d      	ldr	r0, [pc, #116]	; (8002bb0 <MainMenu+0xc4>)
 8002b3c:	f000 f9cc 	bl	8002ed8 <LCD_print>

	if (activeItem == 1)
 8002b40:	6824      	ldr	r4, [r4, #0]
 8002b42:	2c01      	cmp	r4, #1
	{
		LCD_print("         MIXER", 0, 5);
 8002b44:	f04f 0205 	mov.w	r2, #5
 8002b48:	f04f 0100 	mov.w	r1, #0
	if (activeItem == 1)
 8002b4c:	d115      	bne.n	8002b7a <MainMenu+0x8e>
		LCD_print("         MIXER", 0, 5);
 8002b4e:	4819      	ldr	r0, [pc, #100]	; (8002bb4 <MainMenu+0xc8>)
 8002b50:	f000 f9c2 	bl	8002ed8 <LCD_print>
		LCD_invertText(true);
 8002b54:	4620      	mov	r0, r4
 8002b56:	f000 f941 	bl	8002ddc <LCD_invertText>
		LCD_print("<  >", 0, 5);
 8002b5a:	4817      	ldr	r0, [pc, #92]	; (8002bb8 <MainMenu+0xcc>)
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	2100      	movs	r1, #0
	}
	else if (activeItem == 2)
	{
		LCD_print("<  >", 0, 5);
		LCD_invertText(true);
		LCD_print("MIXER", 54, 5);
 8002b60:	f000 f9ba 	bl	8002ed8 <LCD_print>
		LCD_invertText(false);
 8002b64:	2000      	movs	r0, #0
	}
	else
	{
		LCD_print("<  >     MIXER", 0, 5);
	}
}
 8002b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCD_invertText(false);
 8002b6a:	f000 b937 	b.w	8002ddc <LCD_invertText>
		LCD_print("SINE", 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4611      	mov	r1, r2
 8002b72:	480b      	ldr	r0, [pc, #44]	; (8002ba0 <MainMenu+0xb4>)
 8002b74:	f000 f9b0 	bl	8002ed8 <LCD_print>
 8002b78:	e7ce      	b.n	8002b18 <MainMenu+0x2c>
	else if (activeItem == 2)
 8002b7a:	2c02      	cmp	r4, #2
 8002b7c:	d109      	bne.n	8002b92 <MainMenu+0xa6>
		LCD_print("<  >", 0, 5);
 8002b7e:	480e      	ldr	r0, [pc, #56]	; (8002bb8 <MainMenu+0xcc>)
 8002b80:	f000 f9aa 	bl	8002ed8 <LCD_print>
		LCD_invertText(true);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f000 f929 	bl	8002ddc <LCD_invertText>
		LCD_print("MIXER", 54, 5);
 8002b8a:	2205      	movs	r2, #5
 8002b8c:	2136      	movs	r1, #54	; 0x36
 8002b8e:	480b      	ldr	r0, [pc, #44]	; (8002bbc <MainMenu+0xd0>)
 8002b90:	e7e6      	b.n	8002b60 <MainMenu+0x74>
		LCD_print("<  >     MIXER", 0, 5);
 8002b92:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <MainMenu+0xd4>)
}
 8002b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCD_print("<  >     MIXER", 0, 5);
 8002b98:	f000 b99e 	b.w	8002ed8 <LCD_print>
 8002b9c:	20012a6c 	.word	0x20012a6c
 8002ba0:	08008b42 	.word	0x08008b42
 8002ba4:	08008b47 	.word	0x08008b47
 8002ba8:	08008b56 	.word	0x08008b56
 8002bac:	08008b65 	.word	0x08008b65
 8002bb0:	08008b74 	.word	0x08008b74
 8002bb4:	08008b83 	.word	0x08008b83
 8002bb8:	08008b92 	.word	0x08008b92
 8002bbc:	08008b8c 	.word	0x08008b8c
 8002bc0:	08008b97 	.word	0x08008b97

08002bc4 <MixerMenu>:

/**
  * @brief Main Menu
  */
void MixerMenu(void)
{
 8002bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char *spk[4];

	sprintf(spk, "%d", WM8978_SPK_Volume);
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <MixerMenu+0x60>)
 8002bc8:	4917      	ldr	r1, [pc, #92]	; (8002c28 <MixerMenu+0x64>)
 8002bca:	781a      	ldrb	r2, [r3, #0]
	spk[4] = '\0';
 8002bcc:	2400      	movs	r4, #0
	sprintf(spk, "%d", WM8978_SPK_Volume);
 8002bce:	4668      	mov	r0, sp
 8002bd0:	f004 f95a 	bl	8006e88 <siprintf>

	LCD_drawHLine(0, 8, 83);
 8002bd4:	2253      	movs	r2, #83	; 0x53
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	4620      	mov	r0, r4
	spk[4] = '\0';
 8002bda:	9404      	str	r4, [sp, #16]
	LCD_drawHLine(0, 8, 83);
 8002bdc:	f000 f9a0 	bl	8002f20 <LCD_drawHLine>
	LCD_refreshScr();
 8002be0:	f000 f988 	bl	8002ef4 <LCD_refreshScr>
	LCD_print("MIXER        X", 0, 0);
 8002be4:	4622      	mov	r2, r4
 8002be6:	4621      	mov	r1, r4
 8002be8:	4810      	ldr	r0, [pc, #64]	; (8002c2c <MixerMenu+0x68>)
 8002bea:	f000 f975 	bl	8002ed8 <LCD_print>
	//  LCD_goXY(0,20);
	LCD_print(spk, 0, 1);
 8002bee:	4621      	mov	r1, r4
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4668      	mov	r0, sp
 8002bf4:	f000 f970 	bl	8002ed8 <LCD_print>
	LCD_print("Headphones 100", 0, 2);
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	480c      	ldr	r0, [pc, #48]	; (8002c30 <MixerMenu+0x6c>)
 8002bfe:	f000 f96b 	bl	8002ed8 <LCD_print>
	LCD_print("LineIn      --", 0, 3);
 8002c02:	4621      	mov	r1, r4
 8002c04:	2203      	movs	r2, #3
 8002c06:	480b      	ldr	r0, [pc, #44]	; (8002c34 <MixerMenu+0x70>)
 8002c08:	f000 f966 	bl	8002ed8 <LCD_print>
	LCD_print("Microphone  --", 0, 4);
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	2204      	movs	r2, #4
 8002c10:	4809      	ldr	r0, [pc, #36]	; (8002c38 <MixerMenu+0x74>)
 8002c12:	f000 f961 	bl	8002ed8 <LCD_print>
	LCD_print("<  >     MIXER", 0, 5);
 8002c16:	2205      	movs	r2, #5
 8002c18:	4621      	mov	r1, r4
 8002c1a:	4808      	ldr	r0, [pc, #32]	; (8002c3c <MixerMenu+0x78>)
 8002c1c:	f000 f95c 	bl	8002ed8 <LCD_print>
}
 8002c20:	b004      	add	sp, #16
 8002c22:	bd10      	pop	{r4, pc}
 8002c24:	20000092 	.word	0x20000092
 8002c28:	08008ba6 	.word	0x08008ba6
 8002c2c:	08008ba9 	.word	0x08008ba9
 8002c30:	08008bb8 	.word	0x08008bb8
 8002c34:	08008bc7 	.word	0x08008bc7
 8002c38:	08008bd6 	.word	0x08008bd6
 8002c3c:	08008b97 	.word	0x08008b97

08002c40 <DelayMenu>:

/**
  * @brief Main Menu
  */
void DelayMenu(void)
{
 8002c40:	b508      	push	{r3, lr}
	LCD_drawHLine(0, 8, 83);
 8002c42:	2253      	movs	r2, #83	; 0x53
 8002c44:	2108      	movs	r1, #8
 8002c46:	2000      	movs	r0, #0
 8002c48:	f000 f96a 	bl	8002f20 <LCD_drawHLine>
	LCD_refreshScr();
 8002c4c:	f000 f952 	bl	8002ef4 <LCD_refreshScr>
	LCD_print("DELAY         ", 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	4611      	mov	r1, r2
 8002c54:	480e      	ldr	r0, [pc, #56]	; (8002c90 <DelayMenu+0x50>)
 8002c56:	f000 f93f 	bl	8002ed8 <LCD_print>
	//  LCD_goXY(0,20);
	LCD_print("Speed       90", 0, 1);
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	480d      	ldr	r0, [pc, #52]	; (8002c94 <DelayMenu+0x54>)
 8002c60:	f000 f93a 	bl	8002ed8 <LCD_print>
	LCD_print("Feedback   100", 0, 2);
 8002c64:	2202      	movs	r2, #2
 8002c66:	2100      	movs	r1, #0
 8002c68:	480b      	ldr	r0, [pc, #44]	; (8002c98 <DelayMenu+0x58>)
 8002c6a:	f000 f935 	bl	8002ed8 <LCD_print>
	LCD_print("Filter      --", 0, 3);
 8002c6e:	2203      	movs	r2, #3
 8002c70:	2100      	movs	r1, #0
 8002c72:	480a      	ldr	r0, [pc, #40]	; (8002c9c <DelayMenu+0x5c>)
 8002c74:	f000 f930 	bl	8002ed8 <LCD_print>
	LCD_print("            --", 0, 4);
 8002c78:	2204      	movs	r2, #4
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <DelayMenu+0x60>)
 8002c7e:	f000 f92b 	bl	8002ed8 <LCD_print>
	LCD_print("<  >     MIXER", 0, 5);
 8002c82:	2205      	movs	r2, #5
 8002c84:	2100      	movs	r1, #0
 8002c86:	4807      	ldr	r0, [pc, #28]	; (8002ca4 <DelayMenu+0x64>)
}
 8002c88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LCD_print("<  >     MIXER", 0, 5);
 8002c8c:	f000 b924 	b.w	8002ed8 <LCD_print>
 8002c90:	08008af7 	.word	0x08008af7
 8002c94:	08008b06 	.word	0x08008b06
 8002c98:	08008b15 	.word	0x08008b15
 8002c9c:	08008b24 	.word	0x08008b24
 8002ca0:	08008b33 	.word	0x08008b33
 8002ca4:	08008b97 	.word	0x08008b97

08002ca8 <BlankPage>:

/**
  * @brief Main Menu
  */
void BlankPage(void)
{
 8002ca8:	b508      	push	{r3, lr}
	LCD_drawHLine(0, 8, 83);
 8002caa:	2253      	movs	r2, #83	; 0x53
 8002cac:	2108      	movs	r1, #8
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f000 f936 	bl	8002f20 <LCD_drawHLine>
	LCD_refreshScr();
 8002cb4:	f000 f91e 	bl	8002ef4 <LCD_refreshScr>
	LCD_print("BLANK      MIX", 0, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4804      	ldr	r0, [pc, #16]	; (8002cd0 <BlankPage+0x28>)
 8002cbe:	f000 f90b 	bl	8002ed8 <LCD_print>
	//  LCD_goXY(0,20);
	//   LCD_print("Speed       90", 0, 1);
	//   LCD_print("Feedback   100", 0, 2);
	//   LCD_print("Filter      --", 0, 3);
	//   LCD_print("            --", 0, 4);
	LCD_print("<  >     MIXER", 0, 5);
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4803      	ldr	r0, [pc, #12]	; (8002cd4 <BlankPage+0x2c>)
}
 8002cc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LCD_print("<  >     MIXER", 0, 5);
 8002ccc:	f000 b904 	b.w	8002ed8 <LCD_print>
 8002cd0:	08008ae8 	.word	0x08008ae8
 8002cd4:	08008b97 	.word	0x08008b97

08002cd8 <TriggerENC1>:

/**
  * @brief Go to next/prev menu page.
  */
void TriggerENC1(bool direction)
{
 8002cd8:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <TriggerENC1+0x44>)
 8002cda:	6813      	ldr	r3, [r2, #0]

	if (direction)
 8002cdc:	b180      	cbz	r0, 8002d00 <TriggerENC1+0x28>
	{
		activeItem++;
		if (activeItem > activeItemCount)
 8002cde:	4910      	ldr	r1, [pc, #64]	; (8002d20 <TriggerENC1+0x48>)
 8002ce0:	6809      	ldr	r1, [r1, #0]
		activeItem++;
 8002ce2:	3301      	adds	r3, #1
		if (activeItem > activeItemCount)
 8002ce4:	428b      	cmp	r3, r1
		activeItem++;
 8002ce6:	6013      	str	r3, [r2, #0]
		if (activeItem > activeItemCount)
 8002ce8:	dd01      	ble.n	8002cee <TriggerENC1+0x16>
		{
			activeItem = 0;
 8002cea:	2300      	movs	r3, #0
	else
	{
		activeItem--;
		if (activeItem < 0)
		{
			activeItem = activeItemCount - 1;
 8002cec:	6013      	str	r3, [r2, #0]
		}
	}

	switch (currentMenu)
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <TriggerENC1+0x4c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d00c      	beq.n	8002d10 <TriggerENC1+0x38>
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d00c      	beq.n	8002d14 <TriggerENC1+0x3c>
 8002cfa:	b96b      	cbnz	r3, 8002d18 <TriggerENC1+0x40>
	{
	case 0:
		MainMenu();
 8002cfc:	f7ff bef6 	b.w	8002aec <MainMenu>
		activeItem--;
 8002d00:	3b01      	subs	r3, #1
		if (activeItem < 0)
 8002d02:	2b00      	cmp	r3, #0
		activeItem--;
 8002d04:	6013      	str	r3, [r2, #0]
		if (activeItem < 0)
 8002d06:	daf2      	bge.n	8002cee <TriggerENC1+0x16>
			activeItem = activeItemCount - 1;
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <TriggerENC1+0x48>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	e7ed      	b.n	8002cec <TriggerENC1+0x14>
		break;
	case 1:
		MixerMenu();
 8002d10:	f7ff bf58 	b.w	8002bc4 <MixerMenu>
		break;
	case 2:
		DelayMenu();
 8002d14:	f7ff bf94 	b.w	8002c40 <DelayMenu>
		break;
	default:
		BlankPage();
 8002d18:	f7ff bfc6 	b.w	8002ca8 <BlankPage>
 8002d1c:	20012a6c 	.word	0x20012a6c
 8002d20:	20000010 	.word	0x20000010
 8002d24:	20012a70 	.word	0x20012a70

08002d28 <LCD_setSPICH>:
  lcd_gpio.DCPORT = PORT;
  lcd_gpio.DCPIN = PIN;
}

void LCD_setSPICH(SPI_HandleTypeDef SPICH)
{
 8002d28:	b084      	sub	sp, #16
 8002d2a:	b508      	push	{r3, lr}
 8002d2c:	f10d 0c08 	add.w	ip, sp, #8
 8002d30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  lcd_gpio.SPICH = SPICH;
 8002d34:	2258      	movs	r2, #88	; 0x58
 8002d36:	4661      	mov	r1, ip
 8002d38:	4803      	ldr	r0, [pc, #12]	; (8002d48 <LCD_setSPICH+0x20>)
 8002d3a:	f004 f85d 	bl	8006df8 <memcpy>
}
 8002d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d42:	b004      	add	sp, #16
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20013c64 	.word	0x20013c64

08002d4c <LCD_send>:
/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val)
{
 8002d4c:	b507      	push	{r0, r1, r2, lr}
 8002d4e:	a902      	add	r1, sp, #8
  HAL_SPI_Transmit(&lcd_gpio.SPICH, &val, 0x01, 1000);
 8002d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8002d54:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_SPI_Transmit(&lcd_gpio.SPICH, &val, 0x01, 1000);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4803      	ldr	r0, [pc, #12]	; (8002d68 <LCD_send+0x1c>)
 8002d5c:	f003 fdc5 	bl	80068ea <HAL_SPI_Transmit>
}
 8002d60:	b003      	add	sp, #12
 8002d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d66:	bf00      	nop
 8002d68:	20013c64 	.word	0x20013c64

08002d6c <LCD_write.part.0>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode)
 8002d6c:	b538      	push	{r3, r4, r5, lr}
{
  if (mode == LCD_COMMAND)
  {
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8002d6e:	4c0b      	ldr	r4, [pc, #44]	; (8002d9c <LCD_write.part.0+0x30>)
void LCD_write(uint8_t data, uint8_t mode)
 8002d70:	4605      	mov	r5, r0
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8002d72:	8aa1      	ldrh	r1, [r4, #20]
 8002d74:	6920      	ldr	r0, [r4, #16]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f002 fc80 	bl	800567c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8002d7c:	89a1      	ldrh	r1, [r4, #12]
 8002d7e:	68a0      	ldr	r0, [r4, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f002 fc7b 	bl	800567c <HAL_GPIO_WritePin>
    LCD_send(data);
 8002d86:	4628      	mov	r0, r5
 8002d88:	f7ff ffe0 	bl	8002d4c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8002d8c:	89a1      	ldrh	r1, [r4, #12]
 8002d8e:	68a0      	ldr	r0, [r4, #8]
 8002d90:	2201      	movs	r2, #1
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8002d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8002d96:	f002 bc71 	b.w	800567c <HAL_GPIO_WritePin>
 8002d9a:	bf00      	nop
 8002d9c:	20013c4c 	.word	0x20013c4c

08002da0 <LCD_write>:
{
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4605      	mov	r5, r0
  if (mode == LCD_COMMAND)
 8002da4:	b919      	cbnz	r1, 8002dae <LCD_write+0xe>
}
 8002da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002daa:	f7ff bfdf 	b.w	8002d6c <LCD_write.part.0>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8002dae:	4c0a      	ldr	r4, [pc, #40]	; (8002dd8 <LCD_write+0x38>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	8aa1      	ldrh	r1, [r4, #20]
 8002db4:	6920      	ldr	r0, [r4, #16]
 8002db6:	f002 fc61 	bl	800567c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8002dba:	89a1      	ldrh	r1, [r4, #12]
 8002dbc:	68a0      	ldr	r0, [r4, #8]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f002 fc5c 	bl	800567c <HAL_GPIO_WritePin>
    LCD_send(data);
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f7ff ffc1 	bl	8002d4c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8002dca:	89a1      	ldrh	r1, [r4, #12]
 8002dcc:	68a0      	ldr	r0, [r4, #8]
 8002dce:	2201      	movs	r2, #1
}
 8002dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8002dd4:	f002 bc52 	b.w	800567c <HAL_GPIO_WritePin>
 8002dd8:	20013c4c 	.word	0x20013c4c

08002ddc <LCD_invertText>:
/*
 * @brief Invert the colour of any text sent to the display
 * @param mode: true = inverted / false = normal
 */
void LCD_invertText(bool mode)
{
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <LCD_invertText+0x14>)
  if (mode == true)
 8002dde:	b118      	cbz	r0, 8002de8 <LCD_invertText+0xc>
  {
    lcd.inverttext = true;
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8002de6:	4770      	bx	lr
  }
  else
  {
    lcd.inverttext = false;
 8002de8:	f883 01f8 	strb.w	r0, [r3, #504]	; 0x1f8
  }
}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20013cbc 	.word	0x20013cbc

08002df4 <LCD_putChar>:
/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c)
{
 8002df4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <LCD_putChar+0x34>)
  for (int i = 0; i < 6; i++)
  {
    if (lcd.inverttext != true)
 8002dfc:	4e0b      	ldr	r6, [pc, #44]	; (8002e2c <LCD_putChar+0x38>)
 8002dfe:	0044      	lsls	r4, r0, #1
 8002e00:	f1a4 05c1 	sub.w	r5, r4, #193	; 0xc1
 8002e04:	441d      	add	r5, r3
 8002e06:	3bbb      	subs	r3, #187	; 0xbb
 8002e08:	441c      	add	r4, r3
 8002e0a:	f896 31f8 	ldrb.w	r3, [r6, #504]	; 0x1f8
 8002e0e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8002e12:	b92b      	cbnz	r3, 8002e20 <LCD_putChar+0x2c>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8002e14:	2101      	movs	r1, #1
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8002e16:	f7ff ffc3 	bl	8002da0 <LCD_write>
  for (int i = 0; i < 6; i++)
 8002e1a:	42a5      	cmp	r5, r4
 8002e1c:	d1f5      	bne.n	8002e0a <LCD_putChar+0x16>
  }
}
 8002e1e:	bd70      	pop	{r4, r5, r6, pc}
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8002e20:	43c0      	mvns	r0, r0
 8002e22:	2101      	movs	r1, #1
 8002e24:	b2c0      	uxtb	r0, r0
 8002e26:	e7f6      	b.n	8002e16 <LCD_putChar+0x22>
 8002e28:	080162f4 	.word	0x080162f4
 8002e2c:	20013cbc 	.word	0x20013cbc

08002e30 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr()
{
 8002e30:	b570      	push	{r4, r5, r6, lr}
  for (int i = 0; i < 504; i++)
 8002e32:	2400      	movs	r4, #0
  {
    LCD_write(0x00, LCD_DATA);
    lcd.buffer[i] = 0;
 8002e34:	4d05      	ldr	r5, [pc, #20]	; (8002e4c <LCD_clrScr+0x1c>)
    LCD_write(0x00, LCD_DATA);
 8002e36:	4626      	mov	r6, r4
 8002e38:	2101      	movs	r1, #1
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7ff ffb0 	bl	8002da0 <LCD_write>
    lcd.buffer[i] = 0;
 8002e40:	5566      	strb	r6, [r4, r5]
  for (int i = 0; i < 504; i++)
 8002e42:	3401      	adds	r4, #1
 8002e44:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8002e48:	d1f6      	bne.n	8002e38 <LCD_clrScr+0x8>
  }
}
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	20013cbc 	.word	0x20013cbc

08002e50 <LCD_init>:
{
 8002e50:	b510      	push	{r4, lr}
  lcd_gpio.CEPORT = PORT;
 8002e52:	4c19      	ldr	r4, [pc, #100]	; (8002eb8 <LCD_init+0x68>)
{
 8002e54:	b092      	sub	sp, #72	; 0x48
  lcd_gpio.CEPORT = PORT;
 8002e56:	60a0      	str	r0, [r4, #8]
  lcd_gpio.CEPIN = PIN;
 8002e58:	81a1      	strh	r1, [r4, #12]
  lcd_gpio.DCPORT = PORT;
 8002e5a:	6122      	str	r2, [r4, #16]
  LCD_setSPICH(SPI_CH);
 8002e5c:	a918      	add	r1, sp, #96	; 0x60
 8002e5e:	2248      	movs	r2, #72	; 0x48
 8002e60:	4668      	mov	r0, sp
  lcd_gpio.DCPIN = PIN;
 8002e62:	82a3      	strh	r3, [r4, #20]
  LCD_setSPICH(SPI_CH);
 8002e64:	f003 ffc8 	bl	8006df8 <memcpy>
 8002e68:	ab14      	add	r3, sp, #80	; 0x50
 8002e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e6c:	f7ff ff5c 	bl	8002d28 <LCD_setSPICH>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8002e70:	88a1      	ldrh	r1, [r4, #4]
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f002 fc01 	bl	800567c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	88a1      	ldrh	r1, [r4, #4]
 8002e7e:	6820      	ldr	r0, [r4, #0]
 8002e80:	f002 fbfc 	bl	800567c <HAL_GPIO_WritePin>
 8002e84:	2021      	movs	r0, #33	; 0x21
 8002e86:	f7ff ff71 	bl	8002d6c <LCD_write.part.0>
 8002e8a:	20be      	movs	r0, #190	; 0xbe
 8002e8c:	f7ff ff6e 	bl	8002d6c <LCD_write.part.0>
 8002e90:	2004      	movs	r0, #4
 8002e92:	f7ff ff6b 	bl	8002d6c <LCD_write.part.0>
 8002e96:	2014      	movs	r0, #20
 8002e98:	f7ff ff68 	bl	8002d6c <LCD_write.part.0>
 8002e9c:	2020      	movs	r0, #32
 8002e9e:	f7ff ff65 	bl	8002d6c <LCD_write.part.0>
 8002ea2:	200c      	movs	r0, #12
 8002ea4:	f7ff ff62 	bl	8002d6c <LCD_write.part.0>
  LCD_clrScr();
 8002ea8:	f7ff ffc2 	bl	8002e30 <LCD_clrScr>
  lcd.inverttext = false;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <LCD_init+0x6c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8002eb4:	b012      	add	sp, #72	; 0x48
 8002eb6:	bd10      	pop	{r4, pc}
 8002eb8:	20013c4c 	.word	0x20013c4c
 8002ebc:	20013cbc 	.word	0x20013cbc

08002ec0 <LCD_goXY>:
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y)
{
 8002ec0:	b510      	push	{r4, lr}
 8002ec2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	f7ff ff50 	bl	8002d6c <LCD_write.part.0>
 8002ecc:	f044 0040 	orr.w	r0, r4, #64	; 0x40
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
}
 8002ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed4:	f7ff bf4a 	b.w	8002d6c <LCD_write.part.0>

08002ed8 <LCD_print>:
{
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	4604      	mov	r4, r0
 8002edc:	4608      	mov	r0, r1
  LCD_goXY(x, y);
 8002ede:	4611      	mov	r1, r2
 8002ee0:	f7ff ffee 	bl	8002ec0 <LCD_goXY>
 8002ee4:	3c01      	subs	r4, #1
  while (*str)
 8002ee6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002eea:	b900      	cbnz	r0, 8002eee <LCD_print+0x16>
}
 8002eec:	bd10      	pop	{r4, pc}
    LCD_putChar(*str++);
 8002eee:	f7ff ff81 	bl	8002df4 <LCD_putChar>
 8002ef2:	e7f8      	b.n	8002ee6 <LCD_print+0xe>

08002ef4 <LCD_refreshScr>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void LCD_refreshScr()
{
 8002ef4:	b570      	push	{r4, r5, r6, lr}
  LCD_goXY(LCD_SETXADDR, LCD_SETYADDR);
 8002ef6:	2140      	movs	r1, #64	; 0x40
 8002ef8:	2080      	movs	r0, #128	; 0x80
 8002efa:	4c08      	ldr	r4, [pc, #32]	; (8002f1c <LCD_refreshScr+0x28>)
 8002efc:	f7ff ffe0 	bl	8002ec0 <LCD_goXY>
 8002f00:	f504 76fc 	add.w	r6, r4, #504	; 0x1f8
  for (int i = 0; i < 6; i++)
  {
    for (int j = 0; j < LCD_WIDTH; j++)
 8002f04:	2500      	movs	r5, #0
    {
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8002f06:	5d60      	ldrb	r0, [r4, r5]
 8002f08:	2101      	movs	r1, #1
    for (int j = 0; j < LCD_WIDTH; j++)
 8002f0a:	3501      	adds	r5, #1
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8002f0c:	f7ff ff48 	bl	8002da0 <LCD_write>
    for (int j = 0; j < LCD_WIDTH; j++)
 8002f10:	2d54      	cmp	r5, #84	; 0x54
 8002f12:	d1f8      	bne.n	8002f06 <LCD_refreshScr+0x12>
 8002f14:	3454      	adds	r4, #84	; 0x54
  for (int i = 0; i < 6; i++)
 8002f16:	42b4      	cmp	r4, r6
 8002f18:	d1f4      	bne.n	8002f04 <LCD_refreshScr+0x10>
    }
  }
}
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}
 8002f1c:	20013cbc 	.word	0x20013cbc

08002f20 <LCD_drawHLine>:
 */
void LCD_drawHLine(int x, int y, int l)
{
  int by, bi;

  if ((x >= 0) && (x < LCD_WIDTH) && (y >= 0) && (y < LCD_HEIGHT))
 8002f20:	2853      	cmp	r0, #83	; 0x53
{
 8002f22:	b530      	push	{r4, r5, lr}
  if ((x >= 0) && (x < LCD_WIDTH) && (y >= 0) && (y < LCD_HEIGHT))
 8002f24:	d810      	bhi.n	8002f48 <LCD_drawHLine+0x28>
 8002f26:	292f      	cmp	r1, #47	; 0x2f
 8002f28:	d80e      	bhi.n	8002f48 <LCD_drawHLine+0x28>
  {
    for (int cx = 0; cx < l; cx++)
    {
      by = ((y / 8) * 84) + x;
 8002f2a:	10cb      	asrs	r3, r1, #3
 8002f2c:	2454      	movs	r4, #84	; 0x54
 8002f2e:	fb04 0003 	mla	r0, r4, r3, r0
      bi = y % 8;
 8002f32:	f001 0307 	and.w	r3, r1, #7
      lcd.buffer[by + cx] |= (1 << bi);
 8002f36:	2101      	movs	r1, #1
 8002f38:	4099      	lsls	r1, r3
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <LCD_drawHLine+0x34>)
 8002f3c:	b249      	sxtb	r1, r1
 8002f3e:	18c4      	adds	r4, r0, r3
    for (int cx = 0; cx < l; cx++)
 8002f40:	1a25      	subs	r5, r4, r0
 8002f42:	1aed      	subs	r5, r5, r3
 8002f44:	42aa      	cmp	r2, r5
 8002f46:	dc00      	bgt.n	8002f4a <LCD_drawHLine+0x2a>
    }
  }
}
 8002f48:	bd30      	pop	{r4, r5, pc}
      lcd.buffer[by + cx] |= (1 << bi);
 8002f4a:	7825      	ldrb	r5, [r4, #0]
 8002f4c:	430d      	orrs	r5, r1
 8002f4e:	f804 5b01 	strb.w	r5, [r4], #1
 8002f52:	e7f5      	b.n	8002f40 <LCD_drawHLine+0x20>
 8002f54:	20013cbc 	.word	0x20013cbc

08002f58 <osc_init>:
osc_init(Oscillator_t * op, float_t amp, float_t freq)
{
	op->amp = amp;
	op->last_amp = amp;
	op->freq = freq;
	op->phase = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60c3      	str	r3, [r0, #12]
	op->out = 0;
 8002f5c:	61c3      	str	r3, [r0, #28]
	op->modInd = 0;
 8002f5e:	6143      	str	r3, [r0, #20]
	op->mul = 1;
 8002f60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	op->amp = amp;
 8002f64:	ed80 0a00 	vstr	s0, [r0]
	op->last_amp = amp;
 8002f68:	ed80 0a01 	vstr	s0, [r0, #4]
	op->freq = freq;
 8002f6c:	edc0 0a02 	vstr	s1, [r0, #8]
	op->mul = 1;
 8002f70:	6183      	str	r3, [r0, #24]
}
 8002f72:	4770      	bx	lr

08002f74 <Drifter_centralFreq_set>:
	op->freq = f;
}

/*---------------------------------------------------------------*/
void	Drifter_centralFreq_set(uint8_t val)
{
 8002f74:	b508      	push	{r3, lr}
	centralFreq = Lin2Exp(val, 1, 6000);
 8002f76:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002f8c <Drifter_centralFreq_set+0x18>
 8002f7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002f7e:	f7ff fd35 	bl	80029ec <Lin2Exp>
 8002f82:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <Drifter_centralFreq_set+0x1c>)
 8002f84:	ed83 0a00 	vstr	s0, [r3]
}
 8002f88:	bd08      	pop	{r3, pc}
 8002f8a:	bf00      	nop
 8002f8c:	45bb8000 	.word	0x45bb8000
 8002f90:	20000014 	.word	0x20000014

08002f94 <FM_op_freq_set>:
}


/*---------------------------------------------------------------*/
void FM_op_freq_set(Oscillator_t *op, uint8_t val)
{
 8002f94:	b510      	push	{r4, lr}
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 8002f96:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002fac <FM_op_freq_set+0x18>
{
 8002f9a:	4604      	mov	r4, r0
	op->freq = Lin2Exp(val, 0.5f, 8000.f);
 8002f9c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	f7ff fd23 	bl	80029ec <Lin2Exp>
 8002fa6:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002faa:	bd10      	pop	{r4, pc}
 8002fac:	45fa0000 	.word	0x45fa0000

08002fb0 <FM_op_modInd_set>:
/*-------------------------------------------------------*/
void FM_op_modInd_set(Oscillator_t *op, uint8_t val)
{
	op->modInd = (1.4f * val / MIDI_MAX) * (1.4f * val / MIDI_MAX);
 8002fb0:	ee07 1a90 	vmov	s15, r1
 8002fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002fd4 <FM_op_modInd_set+0x24>
 8002fbc:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002fd8 <FM_op_modInd_set+0x28>
 8002fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fcc:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	3fb33333 	.word	0x3fb33333
 8002fd8:	42fe0000 	.word	0x42fe0000

08002fdc <OpSampleCompute0>:

	return  0.5f * (op1.out + op3.out);
}
/*----------------------------------------------------------------------------------------------*/
float_t OpSampleCompute0(Oscillator_t * op) // accurate sine
{
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	ed2d 8b02 	vpush	{d8}
	float_t z;


	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8002fe2:	eddf 7a12 	vldr	s15, [pc, #72]	; 800302c <OpSampleCompute0+0x50>
{
 8002fe6:	4604      	mov	r4, r0
	while (op->phase >= _2PI) // keep phase in [0, 2pi]
 8002fe8:	ed94 8a03 	vldr	s16, [r4, #12]
 8002fec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	da14      	bge.n	8003020 <OpSampleCompute0+0x44>
		op->phase -= _2PI;

	z = sinf(op->phase);
 8002ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8002ffa:	f004 fc25 	bl	8007848 <sinf>
	op->out = op->amp*z;
 8002ffe:	edd4 7a00 	vldr	s15, [r4]

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003002:	ed94 7a02 	vldr	s14, [r4, #8]
	op->out = op->amp*z;
 8003006:	ee20 0a27 	vmul.f32	s0, s0, s15
	op->phase += _2PI * Ts * op->freq; // increment phase
 800300a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003030 <OpSampleCompute0+0x54>
	op->out = op->amp*z;
 800300e:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003012:	eea7 8a27 	vfma.f32	s16, s14, s15
 8003016:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 800301a:	ecbd 8b02 	vpop	{d8}
 800301e:	bd10      	pop	{r4, pc}
		op->phase -= _2PI;
 8003020:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003024:	ed84 8a03 	vstr	s16, [r4, #12]
 8003028:	e7de      	b.n	8002fe8 <OpSampleCompute0+0xc>
 800302a:	bf00      	nop
 800302c:	40c90fdb 	.word	0x40c90fdb
 8003030:	39156592 	.word	0x39156592

08003034 <Osc_WT_SINE_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_WT_SINE_SampleCompute(Oscillator_t * op) // basic wave table sine
{
 8003034:	b510      	push	{r4, lr}
 8003036:	ed2d 8b02 	vpush	{d8}
 800303a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80030ac <Osc_WT_SINE_SampleCompute+0x78>
 800303e:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003040:	edd4 7a03 	vldr	s15, [r4, #12]
 8003044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304c:	d424      	bmi.n	8003098 <Osc_WT_SINE_SampleCompute+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800304e:	edd4 7a03 	vldr	s15, [r4, #12]
 8003052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	da22      	bge.n	80030a2 <Osc_WT_SINE_SampleCompute+0x6e>
		op->phase -= _2PI;

	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 800305c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80030b0 <Osc_WT_SINE_SampleCompute+0x7c>
 8003060:	ed94 8a00 	vldr	s16, [r4]
 8003064:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003068:	f004 fb54 	bl	8007714 <lrintf>
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <Osc_WT_SINE_SampleCompute+0x80>)
	op->phase += _2PI * Ts * op->freq; // increment phase
 800306e:	edd4 7a03 	vldr	s15, [r4, #12]
 8003072:	edd4 6a02 	vldr	s13, [r4, #8]
 8003076:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80030b8 <Osc_WT_SINE_SampleCompute+0x84>
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 800307a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800307e:	ed90 0a00 	vldr	s0, [r0]
 8003082:	ee28 0a00 	vmul.f32	s0, s16, s0

	return op->out;
}
 8003086:	ecbd 8b02 	vpop	{d8}
	op->phase += _2PI * Ts * op->freq; // increment phase
 800308a:	eee6 7a87 	vfma.f32	s15, s13, s14
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 800308e:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003092:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8003096:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8003098:	ee77 7a87 	vadd.f32	s15, s15, s14
 800309c:	edc4 7a03 	vstr	s15, [r4, #12]
 80030a0:	e7ce      	b.n	8003040 <Osc_WT_SINE_SampleCompute+0xc>
		op->phase -= _2PI;
 80030a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030a6:	edc4 7a03 	vstr	s15, [r4, #12]
 80030aa:	e7d0      	b.n	800304e <Osc_WT_SINE_SampleCompute+0x1a>
 80030ac:	40c90fdb 	.word	0x40c90fdb
 80030b0:	4322f983 	.word	0x4322f983
 80030b4:	08016770 	.word	0x08016770
 80030b8:	39156592 	.word	0x39156592

080030bc <Osc_FM_sine_SampleCompute>:
/*-------------------------------------------------------*/
float_t Osc_FM_sine_SampleCompute(Oscillator_t * op, float FMinput) // basic wave table sine with FM
{

	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 80030bc:	edd0 7a05 	vldr	s15, [r0, #20]
 80030c0:	ed90 7a02 	vldr	s14, [r0, #8]
 80030c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80030c8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003140 <Osc_FM_sine_SampleCompute+0x84>
 80030cc:	eea7 0a27 	vfma.f32	s0, s14, s15
{
 80030d0:	b510      	push	{r4, lr}
	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 80030d2:	edd0 7a03 	vldr	s15, [r0, #12]
 80030d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003144 <Osc_FM_sine_SampleCompute+0x88>
 80030da:	ee37 0a80 	vadd.f32	s0, s15, s0
{
 80030de:	ed2d 8b02 	vpush	{d8}
 80030e2:	4604      	mov	r4, r0
	op->phase += _2PI * Ts * op->freq + op->modInd * FMinput; // increment phase
 80030e4:	ed80 0a03 	vstr	s0, [r0, #12]
	while (op->phase < 0) // keep phase in [0, 2pi]
 80030e8:	edd4 7a03 	vldr	s15, [r4, #12]
 80030ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d41a      	bmi.n	800312c <Osc_FM_sine_SampleCompute+0x70>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 80030f6:	edd4 7a03 	vldr	s15, [r4, #12]
 80030fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	da18      	bge.n	8003136 <Osc_FM_sine_SampleCompute+0x7a>
		op->phase -= _2PI;
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8003104:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003148 <Osc_FM_sine_SampleCompute+0x8c>
 8003108:	ed94 8a00 	vldr	s16, [r4]
 800310c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003110:	f004 fb00 	bl	8007714 <lrintf>
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <Osc_FM_sine_SampleCompute+0x90>)
 8003116:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800311a:	ed90 0a00 	vldr	s0, [r0]
 800311e:	ee28 0a00 	vmul.f32	s0, s16, s0
	return op->out;
}
 8003122:	ecbd 8b02 	vpop	{d8}
	op->out = op->amp * sinetable[lrintf(ALPHA * (op->phase))];
 8003126:	ed84 0a07 	vstr	s0, [r4, #28]
}
 800312a:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 800312c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003130:	edc4 7a03 	vstr	s15, [r4, #12]
 8003134:	e7d8      	b.n	80030e8 <Osc_FM_sine_SampleCompute+0x2c>
		op->phase -= _2PI;
 8003136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313a:	edc4 7a03 	vstr	s15, [r4, #12]
 800313e:	e7da      	b.n	80030f6 <Osc_FM_sine_SampleCompute+0x3a>
 8003140:	39156592 	.word	0x39156592
 8003144:	40c90fdb 	.word	0x40c90fdb
 8003148:	4322f983 	.word	0x4322f983
 800314c:	08016770 	.word	0x08016770

08003150 <FM2_sampleCompute>:
{
 8003150:	b510      	push	{r4, lr}
	op1.freq = frq;
 8003152:	4c1c      	ldr	r4, [pc, #112]	; (80031c4 <FM2_sampleCompute+0x74>)
	op2.freq = op2.mul * frq;
 8003154:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
	op1.freq = frq;
 8003158:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
	op2.freq = op2.mul * frq;
 800315c:	ee67 7a80 	vmul.f32	s15, s15, s0
{
 8003160:	ed2d 8b02 	vpush	{d8}
	op2.freq = op2.mul * frq;
 8003164:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
	op3.freq = op3.mul * frq;
 8003168:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 800316c:	ed9f 8a16 	vldr	s16, [pc, #88]	; 80031c8 <FM2_sampleCompute+0x78>
	op3.freq = op3.mul * frq;
 8003170:	ee67 7a80 	vmul.f32	s15, s15, s0
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 8003174:	f104 0040 	add.w	r0, r4, #64	; 0x40
	op3.freq = op3.mul * frq;
 8003178:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	op4.freq = op4.mul * frq;
 800317c:	edd4 7a06 	vldr	s15, [r4, #24]
 8003180:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003184:	ed84 0a02 	vstr	s0, [r4, #8]
	in = Osc_FM_sine_SampleCompute(&op2, 0);
 8003188:	eeb0 0a48 	vmov.f32	s0, s16
 800318c:	f7ff ff96 	bl	80030bc <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op1, in);
 8003190:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8003194:	f7ff ff92 	bl	80030bc <Osc_FM_sine_SampleCompute>
	in = Osc_FM_sine_SampleCompute(&op4, 0);
 8003198:	eeb0 0a48 	vmov.f32	s0, s16
 800319c:	4620      	mov	r0, r4
 800319e:	f7ff ff8d 	bl	80030bc <Osc_FM_sine_SampleCompute>
	Osc_FM_sine_SampleCompute(&op3, in);
 80031a2:	f104 0020 	add.w	r0, r4, #32
 80031a6:	f7ff ff89 	bl	80030bc <Osc_FM_sine_SampleCompute>
}
 80031aa:	ecbd 8b02 	vpop	{d8}
	return  0.5f * (op1.out + op3.out);
 80031ae:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80031b2:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 80031b6:	ee77 7a80 	vadd.f32	s15, s15, s0
}
 80031ba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80031be:	ee27 0a80 	vmul.f32	s0, s15, s0
 80031c2:	bd10      	pop	{r4, pc}
 80031c4:	20003dbc 	.word	0x20003dbc
 80031c8:	00000000 	.word	0x00000000

080031cc <OpSampleCompute7bis>:
/*-------------------------------------------------------*/
float_t OpSampleCompute7bis(Oscillator_t * op) // basic wave table positive sine : 0 < output < op.amp
{
 80031cc:	b510      	push	{r4, lr}
 80031ce:	ed2d 8b02 	vpush	{d8}
 80031d2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003254 <OpSampleCompute7bis+0x88>
 80031d6:	4604      	mov	r4, r0
	while (op->phase < 0) // keep phase in [0, 2pi]
 80031d8:	edd4 7a03 	vldr	s15, [r4, #12]
 80031dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	d42c      	bmi.n	8003240 <OpSampleCompute7bis+0x74>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 80031e6:	edd4 7a03 	vldr	s15, [r4, #12]
 80031ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	da2a      	bge.n	800324a <OpSampleCompute7bis+0x7e>
		op->phase -= _2PI;

	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 80031f4:	ed94 0a00 	vldr	s0, [r4]
 80031f8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80031fc:	ee20 8a08 	vmul.f32	s16, s0, s16
 8003200:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003258 <OpSampleCompute7bis+0x8c>
 8003204:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003208:	f004 fa84 	bl	8007714 <lrintf>
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <OpSampleCompute7bis+0x90>)
	op->phase += _2PI * Ts * op->freq; // increment phase
 800320e:	edd4 6a02 	vldr	s13, [r4, #8]
 8003212:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003260 <OpSampleCompute7bis+0x94>
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8003216:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800321a:	ed90 0a00 	vldr	s0, [r0]
 800321e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003222:	ee30 0a27 	vadd.f32	s0, s0, s15
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003226:	edd4 7a03 	vldr	s15, [r4, #12]
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 800322a:	ee20 0a08 	vmul.f32	s0, s0, s16

	return op->out;
}
 800322e:	ecbd 8b02 	vpop	{d8}
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003232:	eee6 7a87 	vfma.f32	s15, s13, s14
	op->out = op->amp * 0.5f * (1.f + sinetable[lrintf(ALPHA * (op->phase))]);
 8003236:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 800323a:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800323e:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 8003240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003244:	edc4 7a03 	vstr	s15, [r4, #12]
 8003248:	e7c6      	b.n	80031d8 <OpSampleCompute7bis+0xc>
		op->phase -= _2PI;
 800324a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800324e:	edc4 7a03 	vstr	s15, [r4, #12]
 8003252:	e7c8      	b.n	80031e6 <OpSampleCompute7bis+0x1a>
 8003254:	40c90fdb 	.word	0x40c90fdb
 8003258:	4322f983 	.word	0x4322f983
 800325c:	08016770 	.word	0x08016770
 8003260:	39156592 	.word	0x39156592

08003264 <OpSampleCompute1>:
/*-------------------------------------------------------*/
float_t OpSampleCompute1(Oscillator_t * op) // basic sawtooth^2
{
 8003264:	eddf 6a22 	vldr	s13, [pc, #136]	; 80032f0 <OpSampleCompute1+0x8c>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003268:	edd0 7a03 	vldr	s15, [r0, #12]
 800326c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003274:	d431      	bmi.n	80032da <OpSampleCompute1+0x76>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8003276:	ed90 7a03 	vldr	s14, [r0, #12]
 800327a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800327e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003282:	da2f      	bge.n	80032e4 <OpSampleCompute1+0x80>
 8003284:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80032f4 <OpSampleCompute1+0x90>
 8003288:	edd0 7a00 	vldr	s15, [r0]
 800328c:	eec7 6a06 	vdiv.f32	s13, s14, s12
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 8003290:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 8003298:	bf5b      	ittet	pl
 800329a:	eeb0 6a00 	vmovpl.f32	s12, #0	; 0x40000000  2.0
 800329e:	ee76 6ac6 	vsubpl.f32	s13, s13, s12
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 80032a2:	eeb6 6a00 	vmovmi.f32	s12, #96	; 0x3f000000  0.5
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 80032a6:	ee66 7aa7 	vmulpl.f32	s15, s13, s15
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 80032aa:	bf4b      	itete	mi
 80032ac:	ee67 7a86 	vmulmi.f32	s15, s15, s12
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 80032b0:	ee67 7aa6 	vmulpl.f32	s15, s15, s13
	if (op->phase < _PI) op->out = 0.5f * op->amp * (op->phase / _PI)*(op->phase / _PI);
 80032b4:	ee67 7aa6 	vmulmi.f32	s15, s15, s13
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 80032b8:	eefe 6a00 	vmovpl.f32	s13, #224	; 0xbf000000 -0.5
 80032bc:	ee67 7aa6 	vmul.f32	s15, s15, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 80032c0:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out = - .5f*(op->amp * (op->phase / _PI - 2)*(op->phase / _PI - 2));
 80032c4:	edc0 7a07 	vstr	s15, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80032c8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80032f8 <OpSampleCompute1+0x94>
	return op->out;
}
 80032cc:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80032d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80032d4:	ed80 7a03 	vstr	s14, [r0, #12]
}
 80032d8:	4770      	bx	lr
		op->phase += _2PI;
 80032da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032de:	edc0 7a03 	vstr	s15, [r0, #12]
 80032e2:	e7c1      	b.n	8003268 <OpSampleCompute1+0x4>
		op->phase -= _2PI;
 80032e4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80032e8:	ed80 7a03 	vstr	s14, [r0, #12]
 80032ec:	e7c3      	b.n	8003276 <OpSampleCompute1+0x12>
 80032ee:	bf00      	nop
 80032f0:	40c90fdb 	.word	0x40c90fdb
 80032f4:	40490fdb 	.word	0x40490fdb
 80032f8:	39156592 	.word	0x39156592

080032fc <OpSampleCompute2>:
/*-------------------------------------------------------*/
float_t OpSampleCompute2(Oscillator_t * op) // basic sawtooth
{
 80032fc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003374 <OpSampleCompute2+0x78>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003300:	edd0 7a03 	vldr	s15, [r0, #12]
 8003304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330c:	d428      	bmi.n	8003360 <OpSampleCompute2+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800330e:	edd0 7a03 	vldr	s15, [r0, #12]
 8003312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	da26      	bge.n	800336a <OpSampleCompute2+0x6e>
 800331c:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8003378 <OpSampleCompute2+0x7c>
 8003320:	ed90 7a00 	vldr	s14, [r0]
 8003324:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003328:	ee67 6a26 	vmul.f32	s13, s14, s13
 800332c:	ee87 7a86 	vdiv.f32	s14, s15, s12
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = 0.5f*op->amp * (op->phase / _PI);
 8003330:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 8003338:	bf5c      	itt	pl
 800333a:	eeb0 6a00 	vmovpl.f32	s12, #0	; 0x40000000  2.0
 800333e:	ee37 7a46 	vsubpl.f32	s14, s14, s12
 8003342:	ee27 7a26 	vmul.f32	s14, s14, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003346:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out =  .5f*op->amp * (op->phase / _PI - 2);
 800334a:	ed80 7a07 	vstr	s14, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 800334e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800337c <OpSampleCompute2+0x80>
	return op->out;
}
 8003352:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003356:	eee6 7a87 	vfma.f32	s15, s13, s14
 800335a:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800335e:	4770      	bx	lr
		op->phase += _2PI;
 8003360:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003364:	edc0 7a03 	vstr	s15, [r0, #12]
 8003368:	e7ca      	b.n	8003300 <OpSampleCompute2+0x4>
		op->phase -= _2PI;
 800336a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800336e:	edc0 7a03 	vstr	s15, [r0, #12]
 8003372:	e7cc      	b.n	800330e <OpSampleCompute2+0x12>
 8003374:	40c90fdb 	.word	0x40c90fdb
 8003378:	40490fdb 	.word	0x40490fdb
 800337c:	39156592 	.word	0x39156592

08003380 <OpSampleCompute3>:
/*-------------------------------------------------------*/
float_t OpSampleCompute3(Oscillator_t * op) // sin(phi)^5
{
 8003380:	b510      	push	{r4, lr}
 8003382:	ed2d 8b02 	vpush	{d8}
 8003386:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80033f8 <OpSampleCompute3+0x78>
 800338a:	4604      	mov	r4, r0
	float_t z;

	while (op->phase < 0) // keep phase in [0, 2pi]
 800338c:	edd4 7a03 	vldr	s15, [r4, #12]
 8003390:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d423      	bmi.n	80033e2 <OpSampleCompute3+0x62>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800339a:	ed94 8a03 	vldr	s16, [r4, #12]
 800339e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	da21      	bge.n	80033ec <OpSampleCompute3+0x6c>
		op->phase -= _2PI;

	z = sinf(op->phase);
 80033a8:	eeb0 0a48 	vmov.f32	s0, s16
 80033ac:	f004 fa4c 	bl	8007848 <sinf>
	op->out = op->amp*z*z*z*z*z;
 80033b0:	edd4 7a00 	vldr	s15, [r4]

	op->phase += _2PI * Ts * op->freq; // increment phase
 80033b4:	ed94 7a02 	vldr	s14, [r4, #8]
	op->out = op->amp*z*z*z*z*z;
 80033b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80033bc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80033c0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80033c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80033c8:	ee27 0a80 	vmul.f32	s0, s15, s0
	op->phase += _2PI * Ts * op->freq; // increment phase
 80033cc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80033fc <OpSampleCompute3+0x7c>
	op->out = op->amp*z*z*z*z*z;
 80033d0:	ed84 0a07 	vstr	s0, [r4, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 80033d4:	eea7 8a27 	vfma.f32	s16, s14, s15
 80033d8:	ed84 8a03 	vstr	s16, [r4, #12]
	return op->out;
}
 80033dc:	ecbd 8b02 	vpop	{d8}
 80033e0:	bd10      	pop	{r4, pc}
		op->phase += _2PI;
 80033e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033e6:	edc4 7a03 	vstr	s15, [r4, #12]
 80033ea:	e7cf      	b.n	800338c <OpSampleCompute3+0xc>
		op->phase -= _2PI;
 80033ec:	ee38 8a47 	vsub.f32	s16, s16, s14
 80033f0:	ed84 8a03 	vstr	s16, [r4, #12]
 80033f4:	e7d1      	b.n	800339a <OpSampleCompute3+0x1a>
 80033f6:	bf00      	nop
 80033f8:	40c90fdb 	.word	0x40c90fdb
 80033fc:	39156592 	.word	0x39156592

08003400 <OpSampleCompute5>:

	return op->out;
}
/*-------------------------------------------------------*/
float_t OpSampleCompute5(Oscillator_t * op) // Naive Triangle
{
 8003400:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003478 <OpSampleCompute5+0x78>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003404:	edd0 7a03 	vldr	s15, [r0, #12]
 8003408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003410:	d428      	bmi.n	8003464 <OpSampleCompute5+0x64>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 8003412:	edd0 7a03 	vldr	s15, [r0, #12]
 8003416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341e:	da26      	bge.n	800346e <OpSampleCompute5+0x6e>
		op->phase -= _2PI;

	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 8003420:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800347c <OpSampleCompute5+0x7c>
 8003424:	edd0 6a00 	vldr	s13, [r0]
 8003428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	bf4b      	itete	mi
 8003432:	ed9f 6a13 	vldrmi	s12, [pc, #76]	; 8003480 <OpSampleCompute5+0x80>
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 8003436:	ed9f 6a13 	vldrpl	s12, [pc, #76]	; 8003484 <OpSampleCompute5+0x84>
	if (op->phase < _PI) op->out = op->amp * (-2/_PI * op->phase + 1);
 800343a:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 800343e:	eeb8 7a08 	vmovpl.f32	s14, #136	; 0xc0400000 -3.0
 8003442:	eea7 7a86 	vfma.f32	s14, s15, s12
 8003446:	ee27 7a26 	vmul.f32	s14, s14, s13

	op->phase += _2PI * Ts * op->freq; // increment phase
 800344a:	edd0 6a02 	vldr	s13, [r0, #8]
	else op->out =  op->amp * (2/_PI * op->phase - 3);
 800344e:	ed80 7a07 	vstr	s14, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003452:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003488 <OpSampleCompute5+0x88>
	return op->out;
}
 8003456:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 800345a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800345e:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8003462:	4770      	bx	lr
		op->phase += _2PI;
 8003464:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003468:	edc0 7a03 	vstr	s15, [r0, #12]
 800346c:	e7ca      	b.n	8003404 <OpSampleCompute5+0x4>
		op->phase -= _2PI;
 800346e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003472:	edc0 7a03 	vstr	s15, [r0, #12]
 8003476:	e7cc      	b.n	8003412 <OpSampleCompute5+0x12>
 8003478:	40c90fdb 	.word	0x40c90fdb
 800347c:	40490fdb 	.word	0x40490fdb
 8003480:	bf22f983 	.word	0xbf22f983
 8003484:	3f22f983 	.word	0x3f22f983
 8003488:	39156592 	.word	0x39156592

0800348c <MorphingSaw_SampleCompute>:
/*-------------------------------------------------------*/
float_t MorphingSaw_SampleCompute(Oscillator_t * op) // Morphing sawtooth, tends to a triangle at high freqs
{
 800348c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003558 <MorphingSaw_SampleCompute+0xcc>
	while (op->phase < 0) // keep phase in [0, 2pi]
 8003490:	edd0 7a03 	vldr	s15, [r0, #12]
 8003494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349c:	d441      	bmi.n	8003522 <MorphingSaw_SampleCompute+0x96>
		op->phase += _2PI;
	while (op->phase >= _2PI)
 800349e:	edd0 7a03 	vldr	s15, [r0, #12]
 80034a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80034a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034aa:	da3f      	bge.n	800352c <MorphingSaw_SampleCompute+0xa0>
		op->phase -= _2PI;

	if (op->freq < 8000) op->phi0 = _PI/8000*(op->freq); else op->phi0 = _PI;
 80034ac:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800355c <MorphingSaw_SampleCompute+0xd0>
 80034b0:	edd0 5a02 	vldr	s11, [r0, #8]
 80034b4:	ed90 5a00 	vldr	s10, [r0]
 80034b8:	eef4 5ac7 	vcmpe.f32	s11, s14
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	bf4d      	iteet	mi
 80034c2:	ed9f 7a27 	vldrmi	s14, [pc, #156]	; 8003560 <MorphingSaw_SampleCompute+0xd4>
 80034c6:	4b27      	ldrpl	r3, [pc, #156]	; (8003564 <MorphingSaw_SampleCompute+0xd8>)
 80034c8:	6103      	strpl	r3, [r0, #16]
 80034ca:	ee25 7a87 	vmulmi.f32	s14, s11, s14
 80034ce:	bf48      	it	mi
 80034d0:	ed80 7a04 	vstrmi	s14, [r0, #16]
	if (op->phi0 <= .0001f) op->phi0 = .0001f;
 80034d4:	ed90 6a04 	vldr	s12, [r0, #16]
 80034d8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003568 <MorphingSaw_SampleCompute+0xdc>
 80034dc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80034e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e4:	bf98      	it	ls
 80034e6:	ed80 7a04 	vstrls	s14, [r0, #16]
	if (op->phase < op->phi0) op->out = op->amp * (-2/op->phi0 * op->phase + 1);
 80034ea:	ed90 6a04 	vldr	s12, [r0, #16]
 80034ee:	eef4 7ac6 	vcmpe.f32	s15, s12
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	d51e      	bpl.n	8003536 <MorphingSaw_SampleCompute+0xaa>
 80034f8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80034fc:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003504:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8003508:	ee27 7a05 	vmul.f32	s14, s14, s10
 800350c:	ed80 7a07 	vstr	s14, [r0, #28]
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);

	op->phase += _2PI * Ts * op->freq; // increment phase
 8003510:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800356c <MorphingSaw_SampleCompute+0xe0>
	return op->out;
}
 8003514:	ed90 0a07 	vldr	s0, [r0, #28]
	op->phase += _2PI * Ts * op->freq; // increment phase
 8003518:	eee5 7a87 	vfma.f32	s15, s11, s14
 800351c:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8003520:	4770      	bx	lr
		op->phase += _2PI;
 8003522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003526:	edc0 7a03 	vstr	s15, [r0, #12]
 800352a:	e7b1      	b.n	8003490 <MorphingSaw_SampleCompute+0x4>
		op->phase -= _2PI;
 800352c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003530:	edc0 7a03 	vstr	s15, [r0, #12]
 8003534:	e7b3      	b.n	800349e <MorphingSaw_SampleCompute+0x12>
	else op->out =  op->amp * (2 * op->phase - _2PI - op->phi0)/(_2PI - op->phi0);
 8003536:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003570 <MorphingSaw_SampleCompute+0xe4>
 800353a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800353e:	eea7 7aa4 	vfma.f32	s14, s15, s9
 8003542:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8003546:	ee37 7a46 	vsub.f32	s14, s14, s12
 800354a:	ee27 7a05 	vmul.f32	s14, s14, s10
 800354e:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8003552:	ed80 6a07 	vstr	s12, [r0, #28]
 8003556:	e7db      	b.n	8003510 <MorphingSaw_SampleCompute+0x84>
 8003558:	40c90fdb 	.word	0x40c90fdb
 800355c:	45fa0000 	.word	0x45fa0000
 8003560:	39cde32e 	.word	0x39cde32e
 8003564:	40490fdb 	.word	0x40490fdb
 8003568:	38d1b717 	.word	0x38d1b717
 800356c:	39156592 	.word	0x39156592
 8003570:	c0c90fdb 	.word	0xc0c90fdb

08003574 <Drifters_sampleCompute>:
{
 8003574:	b538      	push	{r3, r4, r5, lr}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 8003576:	4823      	ldr	r0, [pc, #140]	; (8003604 <Drifters_sampleCompute+0x90>)
 8003578:	4d23      	ldr	r5, [pc, #140]	; (8003608 <Drifters_sampleCompute+0x94>)
	op->freq = f;
 800357a:	4c24      	ldr	r4, [pc, #144]	; (800360c <Drifters_sampleCompute+0x98>)
{
 800357c:	ed2d 8b02 	vpush	{d8}
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 8003580:	f7ff f83c 	bl	80025fc <drifter_nextSample>
 8003584:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8003588:	ee30 0a28 	vadd.f32	s0, s0, s17
 800358c:	edd5 7a00 	vldr	s15, [r5]
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 8003590:	481f      	ldr	r0, [pc, #124]	; (8003610 <Drifters_sampleCompute+0x9c>)
	OpSetFreq(&op1, 25 + centralFreq * (1 + drifter_nextSample(&d1)));
 8003592:	eeb3 8a09 	vmov.f32	s16, #57	; 0x41c80000  25.0
 8003596:	eeb0 7a48 	vmov.f32	s14, s16
 800359a:	eea0 7a27 	vfma.f32	s14, s0, s15
	op->freq = f;
 800359e:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 80035a2:	f7ff f82b 	bl	80025fc <drifter_nextSample>
 80035a6:	edd5 7a00 	vldr	s15, [r5]
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 80035aa:	481a      	ldr	r0, [pc, #104]	; (8003614 <Drifters_sampleCompute+0xa0>)
	OpSetFreq(&op2, 25 + centralFreq * (1 + drifter_nextSample(&d2)));
 80035ac:	ee30 0a28 	vadd.f32	s0, s0, s17
 80035b0:	eeb0 7a48 	vmov.f32	s14, s16
 80035b4:	eea0 7a27 	vfma.f32	s14, s0, s15
	op->freq = f;
 80035b8:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 80035bc:	f7ff f81e 	bl	80025fc <drifter_nextSample>
 80035c0:	edd5 7a00 	vldr	s15, [r5]
 80035c4:	ee30 0a28 	vadd.f32	s0, s0, s17
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 80035c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
	OpSetFreq(&op3, 25 + centralFreq * (1 + drifter_nextSample(&d3)));
 80035cc:	eea0 8a27 	vfma.f32	s16, s0, s15
	op->freq = f;
 80035d0:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 80035d4:	f7ff ff5a 	bl	800348c <MorphingSaw_SampleCompute>
 80035d8:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80035dc:	eeb0 4a40 	vmov.f32	s8, s0
 80035e0:	f7ff ff54 	bl	800348c <MorphingSaw_SampleCompute>
 80035e4:	f104 0020 	add.w	r0, r4, #32
 80035e8:	ee34 4a00 	vadd.f32	s8, s8, s0
 80035ec:	f7ff ff4e 	bl	800348c <MorphingSaw_SampleCompute>
}
 80035f0:	ecbd 8b02 	vpop	{d8}
	y = 0.33f * (MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 80035f4:	ee34 0a00 	vadd.f32	s0, s8, s0
}
 80035f8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003618 <Drifters_sampleCompute+0xa4>
 80035fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	bf00      	nop
 8003604:	20003d90 	.word	0x20003d90
 8003608:	20000014 	.word	0x20000014
 800360c:	20003dbc 	.word	0x20003dbc
 8003610:	20003d64 	.word	0x20003d64
 8003614:	20003d38 	.word	0x20003d38
 8003618:	3ea8f5c3 	.word	0x3ea8f5c3

0800361c <AdditiveGen_newWaveform>:
	op->phase += _2PI * Ts * op->freq; // increment phase
	return op->out;
}
/*-------------------------------------------------------*/
void AdditiveGen_newWaveform(void) //
{
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t k;

	a[0] = a[1] = 1;
 8003620:	4c1a      	ldr	r4, [pc, #104]	; (800368c <AdditiveGen_newWaveform+0x70>)
{
 8003622:	ed2d 8b04 	vpush	{d8-d9}
	a[0] = a[1] = 1;
 8003626:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	ph[0] = ph[1] = 0;
 800362a:	2200      	movs	r2, #0

	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
	{
		a[k] = frand_a_b(0.001f , 0.98f);
 800362c:	ed9f 9a18 	vldr	s18, [pc, #96]	; 8003690 <AdditiveGen_newWaveform+0x74>
 8003630:	eddf 8a18 	vldr	s17, [pc, #96]	; 8003694 <AdditiveGen_newWaveform+0x78>
	a[0] = a[1] = 1;
 8003634:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8003638:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
	ph[0] = ph[1] = 0;
 800363c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8003640:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 8003644:	f104 0688 	add.w	r6, r4, #136	; 0x88
 8003648:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
 800364c:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 8003650:	eeb0 8a67 	vmov.f32	s16, s15
 8003654:	4615      	mov	r5, r2
		a[k] = frand_a_b(0.001f , 0.98f);
 8003656:	eef0 0a49 	vmov.f32	s1, s18
 800365a:	eeb0 0a68 	vmov.f32	s0, s17
 800365e:	f000 fa6b 	bl	8003b38 <frand_a_b>
 8003662:	eca6 0a01 	vstmia	r6!, {s0}
		a[0] += a[k];
 8003666:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
		ph[k] = 0;
 800366a:	f847 5b04 	str.w	r5, [r7], #4
		a[0] += a[k];
 800366e:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8003672:	4546      	cmp	r6, r8
		a[0] += a[k];
 8003674:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8003678:	d1ed      	bne.n	8003656 <AdditiveGen_newWaveform+0x3a>
	}
	a[0] = 1.f / a[0];
 800367a:	eec8 7a00 	vdiv.f32	s15, s16, s0
}
 800367e:	ecbd 8b04 	vpop	{d8-d9}
	a[0] = 1.f / a[0];
 8003682:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
}
 8003686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800368a:	bf00      	nop
 800368c:	20003dbc 	.word	0x20003dbc
 8003690:	3f7ae148 	.word	0x3f7ae148
 8003694:	3a83126f 	.word	0x3a83126f

08003698 <AdditiveGen_SampleCompute>:
/*-------------------------------------------------------*/
float_t AdditiveGen_SampleCompute(Oscillator_t * op) // additive sine generator
{
 8003698:	b530      	push	{r4, r5, lr}
 800369a:	4c27      	ldr	r4, [pc, #156]	; (8003738 <AdditiveGen_SampleCompute+0xa0>)
	uint8_t k = 1;
	float_t y = 0;
 800369c:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800373c <AdditiveGen_SampleCompute+0xa4>

	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 80036a0:	eddf 5a27 	vldr	s11, [pc, #156]	; 8003740 <AdditiveGen_SampleCompute+0xa8>
	{
		//while (ph[k] < 0) // keep phase in [0, 2pi]
		//	ph[k] += _2PI;
		while (ph[k] >= _2PI)
 80036a4:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8003744 <AdditiveGen_SampleCompute+0xac>
			ph[k] -= _2PI;
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 80036a8:	4d27      	ldr	r5, [pc, #156]	; (8003748 <AdditiveGen_SampleCompute+0xb0>)
 80036aa:	ed9f 5a28 	vldr	s10, [pc, #160]	; 800374c <AdditiveGen_SampleCompute+0xb4>
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 80036ae:	eddf 4a28 	vldr	s9, [pc, #160]	; 8003750 <AdditiveGen_SampleCompute+0xb8>
 80036b2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
{
 80036b6:	2201      	movs	r2, #1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 80036b8:	ee07 2a90 	vmov	s15, r2
 80036bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036c0:	edd0 7a02 	vldr	s15, [r0, #8]
 80036c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c8:	eef4 7ae5 	vcmpe.f32	s15, s11
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	d404      	bmi.n	80036dc <AdditiveGen_SampleCompute+0x44>
 80036d2:	e024      	b.n	800371e <AdditiveGen_SampleCompute+0x86>
			ph[k] -= _2PI;
 80036d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80036d8:	edc1 7a00 	vstr	s15, [r1]
		while (ph[k] >= _2PI)
 80036dc:	edd1 7a00 	vldr	s15, [r1]
 80036e0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80036e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e8:	daf4      	bge.n	80036d4 <AdditiveGen_SampleCompute+0x3c>
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 80036ea:	ee27 7a85 	vmul.f32	s14, s15, s10
 80036ee:	ecb4 4a01 	vldmia	r4!, {s8}
 80036f2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 80036f6:	ee66 6aa4 	vmul.f32	s13, s13, s9
		y += a[k] * sinetable[(uint16_t)(ALPHA * (ph[k]))];
 80036fa:	ee17 3a10 	vmov	r3, s14
 80036fe:	b29b      	uxth	r3, r3
 8003700:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003704:	ed93 7a00 	vldr	s14, [r3]
 8003708:	eea4 0a07 	vfma.f32	s0, s8, s14
 800370c:	3201      	adds	r2, #1
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 800370e:	2a0b      	cmp	r2, #11
		ph[k] += _2PI * Ts * k * op->freq; // increment phase
 8003710:	ed90 7a02 	vldr	s14, [r0, #8]
 8003714:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003718:	ece1 7a01 	vstmia	r1!, {s15}
	while ((k <= PARTIALS_NUMBER ) && (k * op->freq < SAMPLERATE/2.f))
 800371c:	d1cc      	bne.n	80036b8 <AdditiveGen_SampleCompute+0x20>
		k++;
	}
	y = a[0] * y;
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <AdditiveGen_SampleCompute+0xbc>)
 8003720:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003724:	ee20 0a27 	vmul.f32	s0, s0, s15

	op->out = op->amp * y;
 8003728:	edd0 7a00 	vldr	s15, [r0]
 800372c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003730:	ed80 0a07 	vstr	s0, [r0, #28]

	return op->out;
}
 8003734:	bd30      	pop	{r4, r5, pc}
 8003736:	bf00      	nop
 8003738:	20003e40 	.word	0x20003e40
 800373c:	00000000 	.word	0x00000000
 8003740:	46ac4400 	.word	0x46ac4400
 8003744:	40c90fdb 	.word	0x40c90fdb
 8003748:	08016770 	.word	0x08016770
 800374c:	4322f983 	.word	0x4322f983
 8003750:	39156592 	.word	0x39156592
 8003754:	20003dbc 	.word	0x20003dbc

08003758 <waveCompute>:

/*-------------------------------------------------------------------------------------------------------------------*/

float waveCompute(uint8_t sound, float frq)
{
 8003758:	b510      	push	{r4, lr}
	op->freq = f;
 800375a:	4c6f      	ldr	r4, [pc, #444]	; (8003918 <waveCompute+0x1c0>)
{
 800375c:	ed2d 8b02 	vpush	{d8}
	op->freq = f;
 8003760:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
{
 8003764:	eeb0 8a40 	vmov.f32	s16, s0

	OpSetFreq(&op1, frq);


	/* choose waveform generator */
	switch (sound)
 8003768:	280f      	cmp	r0, #15
 800376a:	f200 80ce 	bhi.w	800390a <waveCompute+0x1b2>
 800376e:	e8df f000 	tbb	[pc, r0]
 8003772:	1008      	.short	0x1008
 8003774:	45625e32 	.word	0x45625e32
 8003778:	7469554c 	.word	0x7469554c
 800377c:	b7a8a587 	.word	0xb7a8a587
 8003780:	c3bd      	.short	0xc3bd
	{
	case MORPH_SAW : 	y = 0.8f * MorphingSaw_SampleCompute(&op1); 		break ;
 8003782:	4866      	ldr	r0, [pc, #408]	; (800391c <waveCompute+0x1c4>)
 8003784:	f7ff fe82 	bl	800348c <MorphingSaw_SampleCompute>
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;

	case BLEPSQUARE : 		mbRectOsc.freq = frq;
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;

	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 8003788:	eddf 7a65 	vldr	s15, [pc, #404]	; 8003920 <waveCompute+0x1c8>

	case VOICES3 :	{ // 3 slightly detuned oscillators with drifters

		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800378c:	ee20 0a27 	vmul.f32	s0, s0, s15
	} break;
 8003790:	e031      	b.n	80037f6 <waveCompute+0x9e>
		if (frq < 200) y =  OpSampleCompute1(&op1);
 8003792:	eddf 7a64 	vldr	s15, [pc, #400]	; 8003924 <waveCompute+0x1cc>
 8003796:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379e:	d506      	bpl.n	80037ae <waveCompute+0x56>
		y = 0;	break ;

	}

	return y;
}
 80037a0:	ecbd 8b02 	vpop	{d8}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 80037a4:	485d      	ldr	r0, [pc, #372]	; (800391c <waveCompute+0x1c4>)
}
 80037a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (frq < 200) y =  OpSampleCompute1(&op1);
 80037aa:	f7ff bd5b 	b.w	8003264 <OpSampleCompute1>
		else if (frq < 600) y = OpSampleCompute2(&op1);
 80037ae:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8003928 <waveCompute+0x1d0>
 80037b2:	485a      	ldr	r0, [pc, #360]	; (800391c <waveCompute+0x1c4>)
 80037b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	d505      	bpl.n	80037ca <waveCompute+0x72>
}
 80037be:	ecbd 8b02 	vpop	{d8}
 80037c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else if (frq < 600) y = OpSampleCompute2(&op1);
 80037c6:	f7ff bd99 	b.w	80032fc <OpSampleCompute2>
}
 80037ca:	ecbd 8b02 	vpop	{d8}
 80037ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else y = OpSampleCompute5(&op1);
 80037d2:	f7ff be15 	b.w	8003400 <OpSampleCompute5>
	case ACC_SINE : 		y = 0.8 * OpSampleCompute0(&op1); 		break;
 80037d6:	4851      	ldr	r0, [pc, #324]	; (800391c <waveCompute+0x1c4>)
 80037d8:	f7ff fc00 	bl	8002fdc <OpSampleCompute0>
 80037dc:	ee10 0a10 	vmov	r0, s0
 80037e0:	f7fc feaa 	bl	8000538 <__aeabi_f2d>
 80037e4:	a34a      	add	r3, pc, #296	; (adr r3, 8003910 <waveCompute+0x1b8>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f7fc fefd 	bl	80005e8 <__aeabi_dmul>
 80037ee:	f7fd f995 	bl	8000b1c <__aeabi_d2f>
 80037f2:	ee00 0a10 	vmov	s0, r0
}
 80037f6:	ecbd 8b02 	vpop	{d8}
 80037fa:	bd10      	pop	{r4, pc}
 80037fc:	ecbd 8b02 	vpop	{d8}
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 8003800:	4846      	ldr	r0, [pc, #280]	; (800391c <waveCompute+0x1c4>)
}
 8003802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case POWER_SINE : 		y = OpSampleCompute3(&op1);				break;
 8003806:	f7ff bdbb 	b.w	8003380 <OpSampleCompute3>
}
 800380a:	ecbd 8b02 	vpop	{d8}
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 800380e:	4847      	ldr	r0, [pc, #284]	; (800392c <waveCompute+0x1d4>)
}
 8003810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BLEPTRIANGLE :	 	mbTriOsc.freq = frq;
 8003814:	ed80 0a03 	vstr	s0, [r0, #12]
	y = VCO_bleptri_SampleCompute(&mbTriOsc); break;
 8003818:	f7fe b90e 	b.w	8001a38 <VCO_bleptri_SampleCompute>
}
 800381c:	ecbd 8b02 	vpop	{d8}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 8003820:	4843      	ldr	r0, [pc, #268]	; (8003930 <waveCompute+0x1d8>)
}
 8003822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BLEPSQUARE : 		mbRectOsc.freq = frq;
 8003826:	ed80 0a03 	vstr	s0, [r0, #12]
	y = VCO_bleprect_SampleCompute(&mbRectOsc);		break;
 800382a:	f7fd bf0d 	b.w	8001648 <VCO_bleprect_SampleCompute>
	case WT_SINE : 			y = 0.8f * Osc_WT_SINE_SampleCompute(&op1);		break;
 800382e:	483b      	ldr	r0, [pc, #236]	; (800391c <waveCompute+0x1c4>)
 8003830:	f7ff fc00 	bl	8003034 <Osc_WT_SINE_SampleCompute>
 8003834:	e7a8      	b.n	8003788 <waveCompute+0x30>
}
 8003836:	ecbd 8b02 	vpop	{d8}
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 800383a:	4838      	ldr	r0, [pc, #224]	; (800391c <waveCompute+0x1c4>)
}
 800383c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case ADDITIVE : 		y = AdditiveGen_SampleCompute(&op1);	break;
 8003840:	f7ff bf2a 	b.w	8003698 <AdditiveGen_SampleCompute>
	case NOISE : 			y = op1.amp * frand_a_b(-.8f , .8f);	break; // noise !
 8003844:	eddf 0a36 	vldr	s1, [pc, #216]	; 8003920 <waveCompute+0x1c8>
 8003848:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8003934 <waveCompute+0x1dc>
 800384c:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 8003850:	f000 f972 	bl	8003b38 <frand_a_b>
 8003854:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003858:	e7cd      	b.n	80037f6 <waveCompute+0x9e>
		OpSetFreq(&op2, frq * 1.50f);
 800385a:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800385e:	ee28 8a00 	vmul.f32	s16, s16, s0
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 8003862:	482e      	ldr	r0, [pc, #184]	; (800391c <waveCompute+0x1c4>)
	op->freq = f;
 8003864:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
		y =  0.5f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2));
 8003868:	f7ff fe10 	bl	800348c <MorphingSaw_SampleCompute>
 800386c:	4832      	ldr	r0, [pc, #200]	; (8003938 <waveCompute+0x1e0>)
 800386e:	eeb0 4a40 	vmov.f32	s8, s0
 8003872:	f7ff fe0b 	bl	800348c <MorphingSaw_SampleCompute>
 8003876:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800387a:	ee34 0a00 	vadd.f32	s0, s8, s0
 800387e:	e785      	b.n	800378c <waveCompute+0x34>
		OpSetFreq(&op2, frq * 1.26f);
 8003880:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800393c <waveCompute+0x1e4>
		OpSetFreq(&op2, frq * 1.1892f);
 8003884:	ee68 7a27 	vmul.f32	s15, s16, s15
		OpSetFreq(&op3, frq * 1.5f);
 8003888:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
	op->freq = f;
 800388c:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 8003890:	ee20 8a08 	vmul.f32	s16, s0, s16
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 8003894:	4821      	ldr	r0, [pc, #132]	; (800391c <waveCompute+0x1c4>)
	op->freq = f;
 8003896:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
		y = 0.33f *(MorphingSaw_SampleCompute(&op1) + MorphingSaw_SampleCompute(&op2) + MorphingSaw_SampleCompute(&op3));
 800389a:	f7ff fdf7 	bl	800348c <MorphingSaw_SampleCompute>
 800389e:	4826      	ldr	r0, [pc, #152]	; (8003938 <waveCompute+0x1e0>)
 80038a0:	eeb0 4a40 	vmov.f32	s8, s0
 80038a4:	f7ff fdf2 	bl	800348c <MorphingSaw_SampleCompute>
 80038a8:	4825      	ldr	r0, [pc, #148]	; (8003940 <waveCompute+0x1e8>)
 80038aa:	ee34 4a00 	vadd.f32	s8, s8, s0
 80038ae:	f7ff fded 	bl	800348c <MorphingSaw_SampleCompute>
 80038b2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003944 <waveCompute+0x1ec>
 80038b6:	ee34 0a00 	vadd.f32	s0, s8, s0
 80038ba:	e767      	b.n	800378c <waveCompute+0x34>
		OpSetFreq(&op2, frq * 1.1892f);
 80038bc:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003948 <waveCompute+0x1f0>
 80038c0:	e7e0      	b.n	8003884 <waveCompute+0x12c>
		OpSetFreq(&op2, frq * (1 + d1_drifter_nextSample()));
 80038c2:	f7fe feb9 	bl	8002638 <d1_drifter_nextSample>
 80038c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80038ca:	ee30 0a28 	vadd.f32	s0, s0, s17
 80038ce:	ee20 0a08 	vmul.f32	s0, s0, s16
	op->freq = f;
 80038d2:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
		OpSetFreq(&op3, frq * (1 + d2_drifter_nextSample()));
 80038d6:	f7fe feb5 	bl	8002644 <d2_drifter_nextSample>
 80038da:	ee30 0a28 	vadd.f32	s0, s0, s17
 80038de:	e7d7      	b.n	8003890 <waveCompute+0x138>
}
 80038e0:	ecbd 8b02 	vpop	{d8}
 80038e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case DRIFTERS : 	y = Drifters_sampleCompute(); break;
 80038e8:	f7ff be44 	b.w	8003574 <Drifters_sampleCompute>
}
 80038ec:	ecbd 8b02 	vpop	{d8}
 80038f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case FM2 : 			y = FM2_sampleCompute(frq); break;
 80038f4:	f7ff bc2c 	b.w	8003150 <FM2_sampleCompute>
}
 80038f8:	ecbd 8b02 	vpop	{d8}
		mbSawOsc.freq = frq;
 80038fc:	4813      	ldr	r0, [pc, #76]	; (800394c <waveCompute+0x1f4>)
}
 80038fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mbSawOsc.freq = frq;
 8003902:	ed80 0a03 	vstr	s0, [r0, #12]
		y = VCO_blepsaw_SampleCompute(&mbSawOsc);
 8003906:	f7fd bdab 	b.w	8001460 <VCO_blepsaw_SampleCompute>
		y = 0;	break ;
 800390a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003950 <waveCompute+0x1f8>
	return y;
 800390e:	e772      	b.n	80037f6 <waveCompute+0x9e>
 8003910:	9999999a 	.word	0x9999999a
 8003914:	3fe99999 	.word	0x3fe99999
 8003918:	20003dbc 	.word	0x20003dbc
 800391c:	20003e1c 	.word	0x20003e1c
 8003920:	3f4ccccd 	.word	0x3f4ccccd
 8003924:	43480000 	.word	0x43480000
 8003928:	44160000 	.word	0x44160000
 800392c:	20000128 	.word	0x20000128
 8003930:	20000680 	.word	0x20000680
 8003934:	bf4ccccd 	.word	0xbf4ccccd
 8003938:	20003dfc 	.word	0x20003dfc
 800393c:	3fa147ae 	.word	0x3fa147ae
 8003940:	20003ddc 	.word	0x20003ddc
 8003944:	3ea8f5c3 	.word	0x3ea8f5c3
 8003948:	3f9837b5 	.word	0x3f9837b5
 800394c:	20000bdc 	.word	0x20000bdc
 8003950:	00000000 	.word	0x00000000

08003954 <PhaserInit>:
void PhaserInit(void)
{
	f_min = 200.f;
	f_max = 1700.f;
	swrate = 0.1f;
	fb = 0.7f;
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <PhaserInit+0x20>)
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <PhaserInit+0x24>)
 8003958:	601a      	str	r2, [r3, #0]
	wet = 0.3f;
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <PhaserInit+0x28>)
 800395c:	4a08      	ldr	r2, [pc, #32]	; (8003980 <PhaserInit+0x2c>)
 800395e:	601a      	str	r2, [r3, #0]

	dmin = 2 * f_min / SAMPLERATE;
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <PhaserInit+0x30>)
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <PhaserInit+0x34>)
 8003964:	601a      	str	r2, [r3, #0]
	dmax = 2 * f_max / SAMPLERATE;
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <PhaserInit+0x38>)
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <PhaserInit+0x3c>)
 800396a:	601a      	str	r2, [r3, #0]
	lfoInc = _2PI * swrate / SAMPLERATE;
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <PhaserInit+0x40>)
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <PhaserInit+0x44>)
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	4770      	bx	lr
 8003974:	20012a80 	.word	0x20012a80
 8003978:	3f333333 	.word	0x3f333333
 800397c:	20012aa4 	.word	0x20012aa4
 8003980:	3e99999a 	.word	0x3e99999a
 8003984:	20012a7c 	.word	0x20012a7c
 8003988:	3c149b93 	.word	0x3c149b93
 800398c:	20012a78 	.word	0x20012a78
 8003990:	3d9de54c 	.word	0x3d9de54c
 8003994:	20012a84 	.word	0x20012a84
 8003998:	376f08eb 	.word	0x376f08eb

0800399c <Phaser_Rate_set>:
/*---------------------------------------------------------------------*/
void Phaser_Rate_set(uint8_t val)
{
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 800399c:	ee07 0a90 	vmov	s15, r0
 80039a0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80039c8 <Phaser_Rate_set+0x2c>
	lfoInc = _2PI * swrate / SAMPLERATE;
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <Phaser_Rate_set+0x30>)
	swrate = (MAX_RATE - MIN_RATE) / MIDI_MAX * val + MIN_RATE;
 80039a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039aa:	eddf 7a09 	vldr	s15, [pc, #36]	; 80039d0 <Phaser_Rate_set+0x34>
 80039ae:	eee6 7a87 	vfma.f32	s15, s13, s14
	lfoInc = _2PI * swrate / SAMPLERATE;
 80039b2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80039d4 <Phaser_Rate_set+0x38>
 80039b6:	eddf 6a08 	vldr	s13, [pc, #32]	; 80039d8 <Phaser_Rate_set+0x3c>
 80039ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039c2:	ed83 7a00 	vstr	s14, [r3]
}
 80039c6:	4770      	bx	lr
 80039c8:	3d611e66 	.word	0x3d611e66
 80039cc:	20012a84 	.word	0x20012a84
 80039d0:	3ca3d70a 	.word	0x3ca3d70a
 80039d4:	40c90fdb 	.word	0x40c90fdb
 80039d8:	472c4400 	.word	0x472c4400

080039dc <Phaser_Feedback_set>:
/*---------------------------------------------------------------------*/
void Phaser_Feedback_set(uint8_t val)
{
	fb = 0.999f * val / MIDI_MAX;
 80039dc:	ee07 0a90 	vmov	s15, r0
 80039e0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80039fc <Phaser_Feedback_set+0x20>
 80039e4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003a00 <Phaser_Feedback_set+0x24>
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <Phaser_Feedback_set+0x28>)
 80039ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039f6:	ed83 7a00 	vstr	s14, [r3]
}
 80039fa:	4770      	bx	lr
 80039fc:	3f7fbe77 	.word	0x3f7fbe77
 8003a00:	42fe0000 	.word	0x42fe0000
 8003a04:	20012a80 	.word	0x20012a80

08003a08 <Phaser_Wet_set>:
/*---------------------------------------------------------------------*/
void Phaser_Wet_set(uint8_t val)
{
	wet = val / MIDI_MAX;
 8003a08:	ee07 0a90 	vmov	s15, r0
 8003a0c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003a20 <Phaser_Wet_set+0x18>
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <Phaser_Wet_set+0x1c>)
 8003a12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a1a:	edc3 7a00 	vstr	s15, [r3]
}
 8003a1e:	4770      	bx	lr
 8003a20:	42fe0000 	.word	0x42fe0000
 8003a24:	20012aa4 	.word	0x20012aa4

08003a28 <Phaser_compute>:
	return yout;
}

/*---------------------------------------------------------------------*/
float Phaser_compute(float xin)
{
 8003a28:	b510      	push	{r4, lr}
	int i;
	float d;

	//calculate and update phaser sweep lfo...

	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003a2a:	4c37      	ldr	r4, [pc, #220]	; (8003b08 <Phaser_compute+0xe0>)
 8003a2c:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <Phaser_compute+0xe4>)
{
 8003a2e:	ed2d 8b04 	vpush	{d8-d9}
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003a32:	ed94 8a00 	vldr	s16, [r4]
 8003a36:	edd3 8a00 	vldr	s17, [r3]
 8003a3a:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <Phaser_compute+0xe8>)
{
 8003a3c:	eef0 9a40 	vmov.f32	s19, s0
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003a40:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8003b14 <Phaser_compute+0xec>
 8003a44:	ed93 9a00 	vldr	s18, [r3]
 8003a48:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003a4c:	f003 fe62 	bl	8007714 <lrintf>
 8003a50:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <Phaser_compute+0xf0>)
	//update filter coeffs
	a1 = (1.f - d) / (1.f + d);

	//calculate output

	yout = allpass(xin + zm1 * fb, 0);
 8003a52:	4932      	ldr	r1, [pc, #200]	; (8003b1c <Phaser_compute+0xf4>)
	yout = - yin * a1 + old[ind];
 8003a54:	4a32      	ldr	r2, [pc, #200]	; (8003b20 <Phaser_compute+0xf8>)
	yout = allpass(xin + zm1 * fb, 0);
 8003a56:	ed91 6a00 	vldr	s12, [r1]
	yout = - yin * a1 + old[ind];
 8003a5a:	ed92 0a00 	vldr	s0, [r2]
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003a5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003a62:	ed90 7a00 	vldr	s14, [r0]
	lfoPhase += lfoInc;
 8003a66:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <Phaser_compute+0xfc>)
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003a68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a70:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003a74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a78:	ee39 9a68 	vsub.f32	s18, s18, s17
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003a7c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003b28 <Phaser_compute+0x100>
	d  = dmin + (dmax - dmin) * ((sinetable[lrintf(ALPHA * lfoPhase)] + 1.f)*0.5f);
 8003a80:	eee9 8a07 	vfma.f32	s17, s18, s14
	lfoPhase += lfoInc;
 8003a84:	ed93 7a00 	vldr	s14, [r3]
	a1 = (1.f - d) / (1.f + d);
 8003a88:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <Phaser_compute+0x104>)
	lfoPhase += lfoInc;
 8003a8a:	ee38 7a07 	vadd.f32	s14, s16, s14
	yout = allpass(xin + zm1 * fb, 0);
 8003a8e:	eef0 5a69 	vmov.f32	s11, s19
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003a92:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	bfa8      	it	ge
 8003a9c:	ee37 7a66 	vsubge.f32	s14, s14, s13
	a1 = (1.f - d) / (1.f + d);
 8003aa0:	ee77 6ae8 	vsub.f32	s13, s15, s17
 8003aa4:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if( lfoPhase >= _2PI ) 	lfoPhase -= _2PI;
 8003aa8:	ed84 7a00 	vstr	s14, [r4]
	a1 = (1.f - d) / (1.f + d);
 8003aac:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 8003ab0:	ed83 7a00 	vstr	s14, [r3]
	yout = allpass(xin + zm1 * fb, 0);
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <Phaser_compute+0x108>)
 8003ab6:	edd3 6a00 	vldr	s13, [r3]
 8003aba:	eee6 5a26 	vfma.f32	s11, s12, s13
	old[ind] = yout * a1 + yin;
 8003abe:	4613      	mov	r3, r2
 8003ac0:	3218      	adds	r2, #24
	yout = - yin * a1 + old[ind];
 8003ac2:	eea5 0ac7 	vfms.f32	s0, s11, s14
	yout = allpass(xin + zm1 * fb, 0);
 8003ac6:	eef0 6a65 	vmov.f32	s13, s11
	old[ind] = yout * a1 + yin;
 8003aca:	eee7 6a00 	vfma.f32	s13, s14, s0
 8003ace:	ece3 6a01 	vstmia	r3!, {s13}
	yout = - yin * a1 + old[ind];
 8003ad2:	edd3 6a00 	vldr	s13, [r3]
 8003ad6:	eee0 6a47 	vfms.f32	s13, s0, s14
	old[ind] = yout * a1 + yin;
 8003ada:	eea7 0a26 	vfma.f32	s0, s14, s13
 8003ade:	eca3 0a01 	vstmia	r3!, {s0}

	for(i = 1; i < PH_STAGES; i++)
 8003ae2:	429a      	cmp	r2, r3
	yout = - yin * a1 + old[ind];
 8003ae4:	eeb0 0a66 	vmov.f32	s0, s13
	for(i = 1; i < PH_STAGES; i++)
 8003ae8:	d1f3      	bne.n	8003ad2 <Phaser_compute+0xaa>
	{
		yout = allpass(yout, i);
	}
	zm1 = yout;

	yout = (1 - wet) * xin + wet * yout;
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <Phaser_compute+0x10c>)
	zm1 = yout;
 8003aec:	edc1 6a00 	vstr	s13, [r1]
	yout = (1 - wet) * xin + wet * yout;
 8003af0:	ed93 7a00 	vldr	s14, [r3]
 8003af4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003af8:	ee27 0a26 	vmul.f32	s0, s14, s13

	return yout;
}
 8003afc:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8003b00:	ecbd 8b04 	vpop	{d8-d9}
 8003b04:	bd10      	pop	{r4, pc}
 8003b06:	bf00      	nop
 8003b08:	20012a88 	.word	0x20012a88
 8003b0c:	20012a7c 	.word	0x20012a7c
 8003b10:	20012a78 	.word	0x20012a78
 8003b14:	4322f983 	.word	0x4322f983
 8003b18:	08016770 	.word	0x08016770
 8003b1c:	20012aa8 	.word	0x20012aa8
 8003b20:	20012a8c 	.word	0x20012a8c
 8003b24:	20012a84 	.word	0x20012a84
 8003b28:	40c90fdb 	.word	0x40c90fdb
 8003b2c:	20012a74 	.word	0x20012a74
 8003b30:	20012a80 	.word	0x20012a80
 8003b34:	20012aa4 	.word	0x20012aa4

08003b38 <frand_a_b>:
//---------------------------------------------------------------------------
/**************
 * returns a random float between a and b
 *****************/
float_t frand_a_b(float_t a, float_t b)
{
 8003b38:	b508      	push	{r3, lr}
 8003b3a:	ed2d 8b02 	vpush	{d8}
 8003b3e:	eef0 8a40 	vmov.f32	s17, s0
 8003b42:	eeb0 8a60 	vmov.f32	s16, s1
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 8003b46:	f003 f96b 	bl	8006e20 <rand>
 8003b4a:	ee78 0a68 	vsub.f32	s1, s16, s17
}
 8003b4e:	eeb0 0a68 	vmov.f32	s0, s17
 8003b52:	ecbd 8b02 	vpop	{d8}
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 8003b56:	ee07 0a90 	vmov	s15, r0
 8003b5a:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
}
 8003b5e:	eea7 0aa0 	vfma.f32	s0, s15, s1
 8003b62:	bd08      	pop	{r3, pc}

08003b64 <MIDIrandVal>:
/*-----------------------------------------------------------------------------*/
/**************
 * returns a random integer between 0 and MIDI_MAX
 *****************/
uint8_t MIDIrandVal(void)
{
 8003b64:	b508      	push	{r3, lr}
	return (uint8_t)lrintf(frand_a_b(0 , MIDI_MAX));
 8003b66:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003b7c <MIDIrandVal+0x18>
 8003b6a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003b80 <MIDIrandVal+0x1c>
 8003b6e:	f7ff ffe3 	bl	8003b38 <frand_a_b>
 8003b72:	f003 fdcf 	bl	8007714 <lrintf>
}
 8003b76:	b2c0      	uxtb	r0, r0
 8003b78:	bd08      	pop	{r3, pc}
 8003b7a:	bf00      	nop
 8003b7c:	42fe0000 	.word	0x42fe0000
 8003b80:	00000000 	.word	0x00000000

08003b84 <SVF_setReso>:

/****************************************************************************************************************/

void SVF_setReso(ResonantFilter* filter, float feedback)
{
	filter->q = 1-feedback;
 8003b84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003b88:	ee37 0ac0 	vsub.f32	s0, s15, s0
	if(filter->q < 0.01f) filter->q = 0.01f;
 8003b8c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003ba4 <SVF_setReso+0x20>
 8003b90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	filter->q = 1-feedback;
 8003b98:	bf58      	it	pl
 8003b9a:	eef0 7a40 	vmovpl.f32	s15, s0
 8003b9e:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8003ba2:	4770      	bx	lr
 8003ba4:	3c23d70a 	.word	0x3c23d70a

08003ba8 <SVF_setDrive>:
{
#if USE_SHAPER_NONLINEARITY
	filter->drive = drive;
	setDistortionShape(&filter->shaper, filter->drive);
#else
	filter->drive =  /*  0.4f +  */ (drive/MIDI_MAX)*(drive/MIDI_MAX)*6; // the output can be muted (at 0)
 8003ba8:	ee07 1a90 	vmov	s15, r1
 8003bac:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003bcc <SVF_setDrive+0x24>
 8003bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bb8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003bbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc4:	edc0 7a06 	vstr	s15, [r0, #24]
#endif

}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	42fe0000 	.word	0x42fe0000

08003bd0 <SVF_directSetFilterValue>:
//------------------------------------------------------------------------------------
void SVF_directSetFilterValue(ResonantFilter* filter, float val) // 0 < val < 1
{
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	ed2d 8b02 	vpush	{d8}
	if (val > 0.95) val = 0.95f;
 8003bd8:	ee10 0a10 	vmov	r0, s0
{
 8003bdc:	eeb0 8a40 	vmov.f32	s16, s0
	if (val > 0.95) val = 0.95f;
 8003be0:	f7fc fcaa 	bl	8000538 <__aeabi_f2d>
 8003be4:	a310      	add	r3, pc, #64	; (adr r3, 8003c28 <SVF_directSetFilterValue+0x58>)
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f7fc ff8d 	bl	8000b08 <__aeabi_dcmpgt>
 8003bee:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003c20 <SVF_directSetFilterValue+0x50>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	bf18      	it	ne
 8003bf6:	eeb0 8a67 	vmovne.f32	s16, s15
	filter->f = val*0.5f;
 8003bfa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003bfe:	ee28 8a00 	vmul.f32	s16, s16, s0
	filter->g  = fastTan(_PI * filter->f );
 8003c02:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003c24 <SVF_directSetFilterValue+0x54>
	filter->f = val*0.5f;
 8003c06:	ed84 8a01 	vstr	s16, [r4, #4]
	filter->g  = fastTan(_PI * filter->f );
 8003c0a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003c0e:	f7fe ff57 	bl	8002ac0 <fastTan>

}
 8003c12:	ecbd 8b02 	vpop	{d8}
	filter->g  = fastTan(_PI * filter->f );
 8003c16:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8003c1a:	bd10      	pop	{r4, pc}
 8003c1c:	f3af 8000 	nop.w
 8003c20:	3f733333 	.word	0x3f733333
 8003c24:	40490fdb 	.word	0x40490fdb
 8003c28:	66666666 	.word	0x66666666
 8003c2c:	3fee6666 	.word	0x3fee6666

08003c30 <SVF_initialize>:
{
 8003c30:	b538      	push	{r3, r4, r5, lr}
	filter->type = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	7003      	strb	r3, [r0, #0]
	filter->f = 0.20f;
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <SVF_initialize+0x28>)
 8003c38:	6043      	str	r3, [r0, #4]
	filter->q = 0.9f;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <SVF_initialize+0x2c>)
 8003c3c:	60c3      	str	r3, [r0, #12]
	filter->s1 = 0;
 8003c3e:	2500      	movs	r5, #0
{
 8003c40:	4604      	mov	r4, r0
	filter->drive = 0.4f;
 8003c42:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <SVF_initialize+0x30>)
	filter->s1 = 0;
 8003c44:	6105      	str	r5, [r0, #16]
	filter->s2 = 0;
 8003c46:	6145      	str	r5, [r0, #20]
	filter->drive = 0.4f;
 8003c48:	6183      	str	r3, [r0, #24]
	SVF_directSetFilterValue(filter,0.25f);
 8003c4a:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8003c4e:	f7ff ffbf 	bl	8003bd0 <SVF_directSetFilterValue>
	filter->zi = 0;	//input z^(-1)
 8003c52:	61e5      	str	r5, [r4, #28]
}
 8003c54:	bd38      	pop	{r3, r4, r5, pc}
 8003c56:	bf00      	nop
 8003c58:	3e4ccccd 	.word	0x3e4ccccd
 8003c5c:	3f666666 	.word	0x3f666666
 8003c60:	3ecccccd 	.word	0x3ecccccd

08003c64 <SVF_init>:
//=====================================================================================================
void SVF_init(void)
{
 8003c64:	b510      	push	{r4, lr}
	SVF_initialize(&SVFilter);
 8003c66:	4c05      	ldr	r4, [pc, #20]	; (8003c7c <SVF_init+0x18>)
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff ffe1 	bl	8003c30 <SVF_initialize>
	SVF_initialize(&SVFilter2);
 8003c6e:	f104 0020 	add.w	r0, r4, #32
}
 8003c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SVF_initialize(&SVFilter2);
 8003c76:	f7ff bfdb 	b.w	8003c30 <SVF_initialize>
 8003c7a:	bf00      	nop
 8003c7c:	20003f14 	.word	0x20003f14

08003c80 <Filter1Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter1Freq_set(uint8_t val)
{
 8003c80:	b508      	push	{r3, lr}
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003c82:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003ca8 <Filter1Freq_set+0x28>
 8003c86:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003cac <Filter1Freq_set+0x2c>
 8003c8a:	f7fe feaf 	bl	80029ec <Lin2Exp>
 8003c8e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003cb0 <Filter1Freq_set+0x30>
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <Filter1Freq_set+0x34>)
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003c94:	4808      	ldr	r0, [pc, #32]	; (8003cb8 <Filter1Freq_set+0x38>)
	filterFreq = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003c96:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003c9a:	ed83 0a00 	vstr	s0, [r3]
}
 8003c9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SVF_directSetFilterValue(&SVFilter, filterFreq);
 8003ca2:	f7ff bf95 	b.w	8003bd0 <SVF_directSetFilterValue>
 8003ca6:	bf00      	nop
 8003ca8:	45fa0000 	.word	0x45fa0000
 8003cac:	42a00000 	.word	0x42a00000
 8003cb0:	472c4400 	.word	0x472c4400
 8003cb4:	20013eb8 	.word	0x20013eb8
 8003cb8:	20003f14 	.word	0x20003f14

08003cbc <Filter1Res_set>:
//------------------------------------------------------------------------------------
void 	Filter1Res_set(uint8_t val)
{
	SVF_setReso(&SVFilter, val / MIDI_MAX);
 8003cbc:	ee07 0a90 	vmov	s15, r0
 8003cc0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003cc4:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003cd4 <Filter1Res_set+0x18>
 8003cc8:	4803      	ldr	r0, [pc, #12]	; (8003cd8 <Filter1Res_set+0x1c>)
 8003cca:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003cce:	f7ff bf59 	b.w	8003b84 <SVF_setReso>
 8003cd2:	bf00      	nop
 8003cd4:	42fe0000 	.word	0x42fe0000
 8003cd8:	20003f14 	.word	0x20003f14

08003cdc <Filter1Drive_set>:
}
//------------------------------------------------------------------------------------
void	Filter1Drive_set(uint8_t val)
{
	SVF_setDrive(&SVFilter, val);
 8003cdc:	4601      	mov	r1, r0
 8003cde:	4801      	ldr	r0, [pc, #4]	; (8003ce4 <Filter1Drive_set+0x8>)
 8003ce0:	f7ff bf62 	b.w	8003ba8 <SVF_setDrive>
 8003ce4:	20003f14 	.word	0x20003f14

08003ce8 <Filter1Type_set>:
}
//------------------------------------------------------------------------------------
void 	Filter1Type_set(uint8_t val)
{
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003ce8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003cec:	ee07 0a90 	vmov	s15, r0
 8003cf0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003cf4:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003d08 <Filter1Type_set+0x20>
{
 8003cf8:	b508      	push	{r3, lr}
	SVFilter.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003cfa:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003cfe:	f003 fd09 	bl	8007714 <lrintf>
 8003d02:	4b02      	ldr	r3, [pc, #8]	; (8003d0c <Filter1Type_set+0x24>)
 8003d04:	7018      	strb	r0, [r3, #0]
}
 8003d06:	bd08      	pop	{r3, pc}
 8003d08:	42fe0000 	.word	0x42fe0000
 8003d0c:	20003f14 	.word	0x20003f14

08003d10 <Filter2Freq_set>:

//------------------------------------------------------------------------------------
void 	Filter2Freq_set(uint8_t val)
{
 8003d10:	b508      	push	{r3, lr}
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003d12:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003d38 <Filter2Freq_set+0x28>
 8003d16:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003d3c <Filter2Freq_set+0x2c>
 8003d1a:	f7fe fe67 	bl	80029ec <Lin2Exp>
 8003d1e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003d40 <Filter2Freq_set+0x30>
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <Filter2Freq_set+0x34>)
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 8003d24:	4808      	ldr	r0, [pc, #32]	; (8003d48 <Filter2Freq_set+0x38>)
	filterFreq2 = Lin2Exp(val, MIN_FREQ, MAX_FREQ) / SAMPLERATE ;
 8003d26:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003d2a:	ed83 0a00 	vstr	s0, [r3]
}
 8003d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SVF_directSetFilterValue(&SVFilter2, filterFreq2);
 8003d32:	f7ff bf4d 	b.w	8003bd0 <SVF_directSetFilterValue>
 8003d36:	bf00      	nop
 8003d38:	45fa0000 	.word	0x45fa0000
 8003d3c:	42a00000 	.word	0x42a00000
 8003d40:	472c4400 	.word	0x472c4400
 8003d44:	20013ebc 	.word	0x20013ebc
 8003d48:	20003f34 	.word	0x20003f34

08003d4c <Filter2Res_set>:
//------------------------------------------------------------------------------------
void 	Filter2Res_set(uint8_t val)
{
	SVF_setReso(&SVFilter2, val / MIDI_MAX);
 8003d4c:	ee07 0a90 	vmov	s15, r0
 8003d50:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003d54:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003d64 <Filter2Res_set+0x18>
 8003d58:	4803      	ldr	r0, [pc, #12]	; (8003d68 <Filter2Res_set+0x1c>)
 8003d5a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003d5e:	f7ff bf11 	b.w	8003b84 <SVF_setReso>
 8003d62:	bf00      	nop
 8003d64:	42fe0000 	.word	0x42fe0000
 8003d68:	20003f34 	.word	0x20003f34

08003d6c <Filter2Drive_set>:
}
//------------------------------------------------------------------------------------
void	Filter2Drive_set(uint8_t val)
{
	SVF_setDrive(&SVFilter2, val);
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	4801      	ldr	r0, [pc, #4]	; (8003d74 <Filter2Drive_set+0x8>)
 8003d70:	f7ff bf1a 	b.w	8003ba8 <SVF_setDrive>
 8003d74:	20003f34 	.word	0x20003f34

08003d78 <Filter2Type_set>:
}
//------------------------------------------------------------------------------------
void 	Filter2Type_set(uint8_t val)
{
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003d78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003d7c:	ee07 0a90 	vmov	s15, r0
 8003d80:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003d84:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003d9c <Filter2Type_set+0x24>
{
 8003d88:	b508      	push	{r3, lr}
	SVFilter2.type = (uint8_t)lrintf(FILTER_TYPES * val / MIDI_MAX);
 8003d8a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003d8e:	f003 fcc1 	bl	8007714 <lrintf>
 8003d92:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <Filter2Type_set+0x28>)
 8003d94:	f883 0020 	strb.w	r0, [r3, #32]
}
 8003d98:	bd08      	pop	{r3, pc}
 8003d9a:	bf00      	nop
 8003d9c:	42fe0000 	.word	0x42fe0000
 8003da0:	20003f14 	.word	0x20003f14

08003da4 <SVF_calcSample>:

//------------------------------------------------------------------------------------

float SVF_calcSample(ResonantFilter* filter, float in)
{
 8003da4:	b510      	push	{r4, lr}
	const float f 	= filter->g;
	//fix unstable filter for high f and r settings
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003da6:	ed90 7a01 	vldr	s14, [r0, #4]
 8003daa:	eddf 7a66 	vldr	s15, [pc, #408]	; 8003f44 <SVF_calcSample+0x1a0>
{
 8003dae:	ed2d 8b0c 	vpush	{d8-d13}
 8003db2:	eeb0 8a40 	vmov.f32	s16, s0


#if USE_SHAPER_NONLINEARITY
	const float x = (buf[i]/((float)0x7fff));
#else
	const float x = softClipTwo( in * filter->drive);
 8003db6:	ed90 0a06 	vldr	s0, [r0, #24]
	const float f 	= filter->g;
 8003dba:	edd0 8a02 	vldr	s17, [r0, #8]
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	const float x = softClipTwo( in * filter->drive);
 8003dca:	ee28 0a00 	vmul.f32	s0, s16, s0
{
 8003dce:	4604      	mov	r4, r0
	const float R 	= filter->f >= 0.4499f ? 1 : filter->q;
 8003dd0:	bfb4      	ite	lt
 8003dd2:	ed90 aa03 	vldrlt	s20, [r0, #12]
 8003dd6:	eeb0 aa6b 	vmovge.f32	s20, s23
	const float x = softClipTwo( in * filter->drive);
 8003dda:	f7fe fe65 	bl	8002aa8 <softClipTwo>
#endif

#if ENABLE_NONLINEAR_INTEGRATORS
	// input with half sample delay, for non-linearities
	float ih = 0.5f * (x + filter->zi);
 8003dde:	edd4 7a07 	vldr	s15, [r4, #28]
	filter->zi = x;
 8003de2:	ed84 0a07 	vstr	s0, [r4, #28]
	const float x = softClipTwo( in * filter->drive);
 8003de6:	eeb0 ca40 	vmov.f32	s24, s0
	float ih = 0.5f * (x + filter->zi);
 8003dea:	ee70 7a27 	vadd.f32	s15, s0, s15
		You can trivially remove any saturator by setting the corresponding gain t0,...,t1 to 1. Also, you can simply scale any saturator (i.e. change clipping threshold) to 1/a*tanh(a*x) by writing
		double t1 = tanhXdX(a*s[0]);
	 */
#if ENABLE_NONLINEAR_INTEGRATORS
	const float scale = 0.5f;
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 8003dee:	ee7a ca0a 	vadd.f32	s25, s20, s20
 8003df2:	ed94 0a04 	vldr	s0, [r4, #16]
 8003df6:	ee20 0a6c 	vnmul.f32	s0, s0, s25
 8003dfa:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8003dfe:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8003e02:	edd4 7a05 	vldr	s15, [r4, #20]
 8003e06:	ee30 0a67 	vsub.f32	s0, s0, s15
	const float ff 	= f*f;
 8003e0a:	ee28 9aa8 	vmul.f32	s18, s17, s17
	const float t0 = tanhXdX(scale* (ih - 2*R*filter->s1 - filter->s2 ) );
 8003e0e:	ee20 0a29 	vmul.f32	s0, s0, s19
 8003e12:	f7fe fe03 	bl	8002a1c <tanhXdX>
 8003e16:	eef0 aa40 	vmov.f32	s21, s0
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 8003e1a:	ed94 0a04 	vldr	s0, [r4, #16]
 8003e1e:	ee20 0a29 	vmul.f32	s0, s0, s19
 8003e22:	f7fe fdfb 	bl	8002a1c <tanhXdX>
	const float t0 = 1;
	const float t1 = 1;
#endif

	// g# the denominators for solutions of individual stages
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003e26:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8003e2a:	eeb0 7a6b 	vmov.f32	s14, s23
 8003e2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
	const float t1 = tanhXdX(scale* (filter->s1 ) );
 8003e32:	eeb0 da40 	vmov.f32	s26, s0
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003e36:	eea7 7a8a 	vfma.f32	s14, s15, s20

	const float s1 = filter->s1;
 8003e3a:	ed94 0a04 	vldr	s0, [r4, #16]
	const float g0 = 1.f / (1.f + f*t0*2*R);
 8003e3e:	eecb da87 	vdiv.f32	s27, s23, s14
	const float s2 = filter->s2;

	// solve feedback
	const float f1 = ff*g0*t0*t1;
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003e42:	ed94 7a05 	vldr	s14, [r4, #20]
	const float f1 = ff*g0*t0*t1;
 8003e46:	ee69 7a2d 	vmul.f32	s15, s18, s27
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003e4a:	ee68 6aad 	vmul.f32	s13, s17, s27
	const float f1 = ff*g0*t0*t1;
 8003e4e:	ee67 7aaa 	vmul.f32	s15, s15, s21
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003e52:	ee66 6a8d 	vmul.f32	s13, s13, s26
	const float f1 = ff*g0*t0*t1;
 8003e56:	ee67 7a8d 	vmul.f32	s15, s15, s26
	float y1=(f1*x+s2+f*g0*t1*s1)/(f1+1);
 8003e5a:	eeac 7a27 	vfma.f32	s14, s24, s15
 8003e5e:	ee77 7aab 	vadd.f32	s15, s15, s23
 8003e62:	eea6 7a80 	vfma.f32	s14, s13, s0
 8003e66:	eec7 9a27 	vdiv.f32	s19, s14, s15


	// solve the remaining stages with nonlinear gain
	const float xx = t0*(x - y1);
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003e6a:	f7fe fe1d 	bl	8002aa8 <softClipTwo>
	const float xx = t0*(x - y1);
 8003e6e:	ee3c ba69 	vsub.f32	s22, s24, s19
 8003e72:	ee2b ba2a 	vmul.f32	s22, s22, s21
	const float y0 = (softClipTwo(s1) + f*xx)*g0;
 8003e76:	eea8 0a8b 	vfma.f32	s0, s17, s22
 8003e7a:	ee60 da2d 	vmul.f32	s27, s0, s27

	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003e7e:	ed94 0a04 	vldr	s0, [r4, #16]
 8003e82:	f7fe fe11 	bl	8002aa8 <softClipTwo>
 8003e86:	ee7a aaaa 	vadd.f32	s21, s21, s21
 8003e8a:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8003e8e:	ee2a aa6a 	vnmul.f32	s20, s20, s21
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003e92:	edd4 7a05 	vldr	s15, [r4, #20]

	float out;


	switch(filter->type)
 8003e96:	7823      	ldrb	r3, [r4, #0]
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003e98:	eeaa ba2d 	vfma.f32	s22, s20, s27
	switch(filter->type)
 8003e9c:	3b01      	subs	r3, #1
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003e9e:	eea8 0a8b 	vfma.f32	s0, s17, s22
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003ea2:	ee68 8a8d 	vmul.f32	s17, s17, s26
	filter->s1   = softClipTwo(filter->s1) + 2*f*(xx - t0*2*R*y0);
 8003ea6:	ed84 0a04 	vstr	s0, [r4, #16]
	filter->s2   = (filter->s2)    + 2*f* t1*y0;
 8003eaa:	eee8 7aad 	vfma.f32	s15, s17, s27
 8003eae:	edc4 7a05 	vstr	s15, [r4, #20]
	switch(filter->type)
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d80a      	bhi.n	8003ecc <SVF_calcSample+0x128>
 8003eb6:	e8df f003 	tbb	[pc, r3]
 8003eba:	1c03      	.short	0x1c03
 8003ebc:	2c27      	.short	0x2c27
 8003ebe:	35          	.byte	0x35
 8003ebf:	00          	.byte	0x00
	case FILTER_LP:
#if USE_SHAPER_NONLINEARITY

		buf[i] = FILTER_GAIN * fastTanh( distortion_calcSampleFloat(&filter->shaper, y1));
#else
		out = fastTanh(y1) ;
 8003ec0:	eeb0 0a69 	vmov.f32	s0, s19
 8003ec4:	f7fe fdc8 	bl	8002a58 <fastTanh>
 8003ec8:	eeb0 8a40 	vmov.f32	s16, s0
	default:
		out = in ;
		break;
	}

	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 8003ecc:	eeb4 8aeb 	vcmpe.f32	s16, s23
 8003ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed4:	dc33      	bgt.n	8003f3e <SVF_calcSample+0x19a>
	out = (out < -1.0f) ? -1.0f : out;
 8003ed6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003eda:	eeb4 8a67 	vcmp.f32	s16, s15
 8003ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee2:	bf48      	it	mi
 8003ee4:	eeb0 8a67 	vmovmi.f32	s16, s15

	return out;

}
 8003ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8003eec:	ecbd 8b0c 	vpop	{d8-d13}
 8003ef0:	bd10      	pop	{r4, pc}
		const float h = x - ugb - y1;
 8003ef2:	eeb0 0a4c 	vmov.f32	s0, s24
 8003ef6:	eeac 0aed 	vfms.f32	s0, s25, s27
		out = h * FILTER_GAIN_F;
 8003efa:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003f48 <SVF_calcSample+0x1a4>
		const float h = x - ugb - y1;
 8003efe:	ee30 8a69 	vsub.f32	s16, s0, s19
		out = h * FILTER_GAIN_F;
 8003f02:	ee28 8a27 	vmul.f32	s16, s16, s15
	break;
 8003f06:	e7e1      	b.n	8003ecc <SVF_calcSample+0x128>
		out = y0 * FILTER_GAIN_F;
 8003f08:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 8003f48 <SVF_calcSample+0x1a4>
 8003f0c:	ee2d 8a88 	vmul.f32	s16, s27, s16
		break;
 8003f10:	e7dc      	b.n	8003ecc <SVF_calcSample+0x128>
		out = (x-ugb) * FILTER_GAIN_F;
 8003f12:	eeb0 0a4c 	vmov.f32	s0, s24
 8003f16:	eeac 0aed 	vfms.f32	s0, s25, s27
 8003f1a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003f48 <SVF_calcSample+0x1a4>
 8003f1e:	ee20 8a27 	vmul.f32	s16, s0, s15
	break;
 8003f22:	e7d3      	b.n	8003ecc <SVF_calcSample+0x128>
		const float h = x - ugb - y1;
 8003f24:	eeb0 0a4c 	vmov.f32	s0, s24
 8003f28:	eeac 0aed 	vfms.f32	s0, s25, s27
		out = (y1-h) * FILTER_GAIN_F;
 8003f2c:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8003f48 <SVF_calcSample+0x1a4>
		const float h = x - ugb - y1;
 8003f30:	ee30 0a69 	vsub.f32	s0, s0, s19
		out = (y1-h) * FILTER_GAIN_F;
 8003f34:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8003f38:	ee20 8a08 	vmul.f32	s16, s0, s16
	break;
 8003f3c:	e7c6      	b.n	8003ecc <SVF_calcSample+0x128>
	out = (out > 1.0f) ? 1.0f : out; //clip too loud samples
 8003f3e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003f42:	e7d1      	b.n	8003ee8 <SVF_calcSample+0x144>
 8003f44:	3ee6594b 	.word	0x3ee6594b
 8003f48:	3f6147ae 	.word	0x3f6147ae

08003f4c <seq_tempo_set>:
Sequencer_t seq _CCM_;
NoteGenerator_t noteGen _CCM_;

/*--------------------------------------------------------------------------------------------*/
void seq_tempo_set(uint8_t val) {
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 8003f4c:	ee07 0a90 	vmov	s15, r0
 8003f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f54:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003f84 <seq_tempo_set+0x38>
 8003f58:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003f88 <seq_tempo_set+0x3c>
 8003f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f60:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
void seq_tempo_set(uint8_t val) {
 8003f68:	b510      	push	{r4, lr}
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 8003f6a:	4c08      	ldr	r4, [pc, #32]	; (8003f8c <seq_tempo_set+0x40>)
 8003f6c:	ee77 7a80 	vadd.f32	s15, s15, s0
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003f70:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003f90 <seq_tempo_set+0x44>
	seq.tempo = (float) (800.f * val / MIDI_MAX + 20); // unit : bpm
 8003f74:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8003f78:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003f7c:	f003 fbca 	bl	8007714 <lrintf>
 8003f80:	6460      	str	r0, [r4, #68]	; 0x44
	//seq.smp_count = seq.steptime;
}
 8003f82:	bd10      	pop	{r4, pc}
 8003f84:	44480000 	.word	0x44480000
 8003f88:	42fe0000 	.word	0x42fe0000
 8003f8c:	20003f54 	.word	0x20003f54
 8003f90:	4a217fc0 	.word	0x4a217fc0

08003f94 <seq_gateTime_set>:
/*-------------------------------------------------------*/
void seq_gateTime_set(uint8_t val) // val is a number of samples
{
	seq.gateTime = seq.steptime * ((0.9f - 0.1f) * val / MIDI_MAX + 0.1f); // from 10% to 90% of each step duration
 8003f94:	ee07 0a90 	vmov	s15, r0
 8003f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003fcc <seq_gateTime_set+0x38>
 8003fa0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003fd0 <seq_gateTime_set+0x3c>
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <seq_gateTime_set+0x40>)
 8003fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003fd8 <seq_gateTime_set+0x44>
 8003fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fb6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003fba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fc6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8003fca:	4770      	bx	lr
 8003fcc:	3f4ccccc 	.word	0x3f4ccccc
 8003fd0:	42fe0000 	.word	0x42fe0000
 8003fd4:	20003f54 	.word	0x20003f54
 8003fd8:	3dcccccd 	.word	0x3dcccccd

08003fdc <seq_chooseScale>:
		noteGen.transpose = -2;
	}
}

/*-------------------------------------------------------*/
void seq_chooseScale(int16_t idx) {
 8003fdc:	b280      	uxth	r0, r0
 8003fde:	280e      	cmp	r0, #14
 8003fe0:	bf96      	itet	ls
 8003fe2:	4b05      	ldrls	r3, [pc, #20]	; (8003ff8 <seq_chooseScale+0x1c>)
 8003fe4:	4a05      	ldrhi	r2, [pc, #20]	; (8003ffc <seq_chooseScale+0x20>)
 8003fe6:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
		break;
	default:
		currentScale = (uint8_t*) MIDIscale11;
		break;
	}
	noteGen.currentScale = currentScale;
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <seq_chooseScale+0x24>)
 8003fec:	659a      	str	r2, [r3, #88]	; 0x58
	noteGen.chRequested = true;
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	08016734 	.word	0x08016734
 8003ffc:	0801656b 	.word	0x0801656b
 8004000:	20003f54 	.word	0x20003f54

08004004 <seq_scale_set>:
		seq_chooseScale(noteGen.scaleIndex);
	}
}
/*-------------------------------------------------------*/
void seq_scale_set(uint8_t val) {
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 8004004:	ee07 0a90 	vmov	s15, r0
 8004008:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800400c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8004038 <seq_scale_set+0x34>
void seq_scale_set(uint8_t val) {
 8004010:	b507      	push	{r0, r1, r2, lr}
	noteGen.scaleIndex = (uint8_t) rintf(MAX_SCALE_INDEX / MIDI_MAX * val);
 8004012:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004016:	f003 fbbd 	bl	8007794 <rintf>
 800401a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <seq_scale_set+0x38>)
 8004020:	edcd 7a01 	vstr	s15, [sp, #4]
 8004024:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004028:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	seq_chooseScale(noteGen.scaleIndex);
}
 800402c:	b003      	add	sp, #12
 800402e:	f85d eb04 	ldr.w	lr, [sp], #4
	seq_chooseScale(noteGen.scaleIndex);
 8004032:	f7ff bfd3 	b.w	8003fdc <seq_chooseScale>
 8004036:	bf00      	nop
 8004038:	3de1c387 	.word	0x3de1c387
 800403c:	20003f54 	.word	0x20003f54

08004040 <seq_switchMovingSeq>:
	else
		noteGen.automaticON = true;
}
/*-------------------------------------------------------*/
void seq_switchMovingSeq(uint8_t val) {
	if (val > 63)
 8004040:	283f      	cmp	r0, #63	; 0x3f
 8004042:	4b03      	ldr	r3, [pc, #12]	; (8004050 <seq_switchMovingSeq+0x10>)
		noteGen.automaticON = true;
 8004044:	bf8c      	ite	hi
 8004046:	2201      	movhi	r2, #1
	else
		noteGen.automaticON = false;
 8004048:	2200      	movls	r2, #0
 800404a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
}
 800404e:	4770      	bx	lr
 8004050:	20003f54 	.word	0x20003f54

08004054 <seq_switchMute>:
	else
		noteGen.someNotesMuted = true;
}
/*-------------------------------------------------------*/
void seq_switchMute(uint8_t val) {
	switch (val) {
 8004054:	b130      	cbz	r0, 8004064 <seq_switchMute+0x10>
 8004056:	287f      	cmp	r0, #127	; 0x7f
 8004058:	d107      	bne.n	800406a <seq_switchMute+0x16>
	case MIDI_MAXi:
		noteGen.someNotesMuted = true;
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <seq_switchMute+0x18>)
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		break;
 8004062:	4770      	bx	lr
	case 0:
		noteGen.someNotesMuted = false;
 8004064:	4b01      	ldr	r3, [pc, #4]	; (800406c <seq_switchMute+0x18>)
 8004066:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
		break;
	}
}
 800406a:	4770      	bx	lr
 800406c:	20003f54 	.word	0x20003f54

08004070 <seq_freqMax_set>:
		//pitchGenChangePoints();
	}
}
/*-------------------------------------------------------*/
void seq_freqMax_set(uint8_t val) {
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 8004070:	ee07 0a90 	vmov	s15, r0
 8004074:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80040a0 <seq_freqMax_set+0x30>
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <seq_freqMax_set+0x34>)
 800407a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void seq_freqMax_set(uint8_t val) {
 800407e:	b082      	sub	sp, #8
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
 8004080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004088:	edcd 7a01 	vstr	s15, [sp, #4]
 800408c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004090:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
	noteGen.chRequested = true;
 8004094:	2301      	movs	r3, #1
 8004096:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
}
 800409a:	b002      	add	sp, #8
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	3d810204 	.word	0x3d810204
 80040a4:	20003f54 	.word	0x20003f54

080040a8 <seq_sequence_new>:

/*--------------------------------------------------------------------------------------------*/
void seq_sequence_new(void) {
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int16_t relativeNote;
	int16_t octaveShift;
	int16_t index;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		relativeNote = noteGen.currentScale[lrintf(
 80040aa:	4d1d      	ldr	r5, [pc, #116]	; (8004120 <seq_sequence_new+0x78>)
void seq_sequence_new(void) {
 80040ac:	ed2d 8b02 	vpush	{d8}
				frand_a_b(1, noteGen.currentScale[0]))];
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 80040b0:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8004124 <seq_sequence_new+0x7c>
void seq_sequence_new(void) {
 80040b4:	2400      	movs	r4, #0
 80040b6:	462f      	mov	r7, r5
		relativeNote = noteGen.currentScale[lrintf(
 80040b8:	6dae      	ldr	r6, [r5, #88]	; 0x58
 80040ba:	7833      	ldrb	r3, [r6, #0]
 80040bc:	ee00 3a90 	vmov	s1, r3
 80040c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80040c4:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80040c8:	f7ff fd36 	bl	8003b38 <frand_a_b>
 80040cc:	f003 fb22 	bl	8007714 <lrintf>
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 80040d0:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
		relativeNote = noteGen.currentScale[lrintf(
 80040d4:	5c36      	ldrb	r6, [r6, r0]
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 80040d6:	ee00 3a90 	vmov	s1, r3
 80040da:	eeb0 0a48 	vmov.f32	s0, s16
 80040de:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80040e2:	f7ff fd29 	bl	8003b38 <frand_a_b>
 80040e6:	f003 fb15 	bl	8007714 <lrintf>
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 80040ea:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 80040ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 80040f2:	3b15      	subs	r3, #21
 80040f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80040f8:	4430      	add	r0, r6
 80040fa:	b200      	sxth	r0, r0

		while (index > MAX_NOTE_INDEX)
 80040fc:	286a      	cmp	r0, #106	; 0x6a
 80040fe:	dc09      	bgt.n	8004114 <seq_sequence_new+0x6c>
			index -= 12;
		while (index < 0)
 8004100:	2800      	cmp	r0, #0
 8004102:	db09      	blt.n	8004118 <seq_sequence_new+0x70>
			index += 12;
		seq.track1.note[i] = index; // note frequency is in notesFreq[index]
 8004104:	f827 0014 	strh.w	r0, [r7, r4, lsl #1]
 8004108:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 800410a:	2c10      	cmp	r4, #16
 800410c:	d1d4      	bne.n	80040b8 <seq_sequence_new+0x10>
	}
}
 800410e:	ecbd 8b02 	vpop	{d8}
 8004112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004114:	380c      	subs	r0, #12
 8004116:	e7f0      	b.n	80040fa <seq_sequence_new+0x52>
 8004118:	300c      	adds	r0, #12
 800411a:	b200      	sxth	r0, r0
 800411c:	e7f0      	b.n	8004100 <seq_sequence_new+0x58>
 800411e:	bf00      	nop
 8004120:	20003f54 	.word	0x20003f54
 8004124:	00000000 	.word	0x00000000

08004128 <seq_transpose>:
/*--------------------------------------------------------------------------------------------*/
void seq_transpose(void) {
	int16_t noteIndex;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 8004128:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <seq_transpose+0x38>)
void seq_transpose(void) {
 800412a:	b510      	push	{r4, lr}
		noteIndex = seq.track1.note[i] + noteGen.transpose;
 800412c:	f8b2 4060 	ldrh.w	r4, [r2, #96]	; 0x60
 8004130:	1e91      	subs	r1, r2, #2
 8004132:	f102 001e 	add.w	r0, r2, #30
 8004136:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800413a:	4423      	add	r3, r4
 800413c:	b21b      	sxth	r3, r3
		while (noteIndex > MAX_NOTE_INDEX)
 800413e:	2b6a      	cmp	r3, #106	; 0x6a
 8004140:	dc08      	bgt.n	8004154 <seq_transpose+0x2c>
			noteIndex -= 12;
		while (noteIndex < 0)
 8004142:	2b00      	cmp	r3, #0
 8004144:	db08      	blt.n	8004158 <seq_transpose+0x30>
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8004146:	4281      	cmp	r1, r0
			noteIndex += 12;
		seq.track1.note[i] = noteIndex;
 8004148:	800b      	strh	r3, [r1, #0]
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 800414a:	d1f4      	bne.n	8004136 <seq_transpose+0xe>
	}
	noteGen.transpose = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
}
 8004152:	bd10      	pop	{r4, pc}
 8004154:	3b0c      	subs	r3, #12
 8004156:	e7f1      	b.n	800413c <seq_transpose+0x14>
 8004158:	330c      	adds	r3, #12
 800415a:	b21b      	sxth	r3, r3
 800415c:	e7f1      	b.n	8004142 <seq_transpose+0x1a>
 800415e:	bf00      	nop
 8004160:	20003f54 	.word	0x20003f54

08004164 <sequencer_init>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_init(void) {
 8004164:	b510      	push	{r4, lr}
	seq.tempo = INIT_TEMPO;
 8004166:	4c11      	ldr	r4, [pc, #68]	; (80041ac <sequencer_init+0x48>)
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <sequencer_init+0x4c>)
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 800416a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80041b4 <sequencer_init+0x50>
	seq.tempo = INIT_TEMPO;
 800416e:	6423      	str	r3, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8004170:	f003 fad0 	bl	8007714 <lrintf>
	seq.smp_count = 0;
 8004174:	2300      	movs	r3, #0
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8004176:	6460      	str	r0, [r4, #68]	; 0x44
	seq.smp_count = 0;
 8004178:	64a3      	str	r3, [r4, #72]	; 0x48
	seq.step_idx = 0;
 800417a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	seq.gateTime = seq.steptime / 2;

	noteGen.transpose = 0;
	noteGen.automaticON = false;
 800417e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	noteGen.glideON = false;
 8004182:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	noteGen.chRequested = false;
 8004186:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	noteGen.someNotesMuted = false;
 800418a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	noteGen.scaleIndex = 0;
 800418e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	noteGen.octaveSpread = 4;
	noteGen.rootNote = 36;
 8004192:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	seq.gateTime = seq.steptime / 2;
 8004196:	1040      	asrs	r0, r0, #1
	noteGen.octaveSpread = 4;
 8004198:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <sequencer_init+0x54>)
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 800419a:	4b08      	ldr	r3, [pc, #32]	; (80041bc <sequencer_init+0x58>)
	seq.gateTime = seq.steptime / 2;
 800419c:	6520      	str	r0, [r4, #80]	; 0x50
	noteGen.octaveSpread = 4;
 800419e:	65e2      	str	r2, [r4, #92]	; 0x5c
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 80041a0:	65a3      	str	r3, [r4, #88]	; 0x58

	seq_sequence_new();
}
 80041a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seq_sequence_new();
 80041a6:	f7ff bf7f 	b.w	80040a8 <seq_sequence_new>
 80041aa:	bf00      	nop
 80041ac:	20003f54 	.word	0x20003f54
 80041b0:	43a00000 	.word	0x43a00000
 80041b4:	46013300 	.word	0x46013300
 80041b8:	00240004 	.word	0x00240004
 80041bc:	08016580 	.word	0x08016580

080041c0 <sequencer_process>:
/*--------------------------------------------------------------------------------------------*/
void sequencer_process(void) // To be called at each sample treatment
{
 80041c0:	b510      	push	{r4, lr}
	/* If we have reached a new step ....  */
	if (seq.smp_count-- <= 0) {
 80041c2:	4c0c      	ldr	r4, [pc, #48]	; (80041f4 <sequencer_process+0x34>)
 80041c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80041c6:	1e5a      	subs	r2, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	64a2      	str	r2, [r4, #72]	; 0x48
 80041cc:	dc11      	bgt.n	80041f2 <sequencer_process+0x32>
		/* If we are at the beginning of a new sequence .... */
		if (seq.step_idx == 0) {
 80041ce:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 80041d2:	b90b      	cbnz	r3, 80041d8 <sequencer_process+0x18>
			sequencer_newSequence_action();
 80041d4:	f000 fa74 	bl	80046c0 <sequencer_newSequence_action>
		}
		sequencer_newStep_action();
 80041d8:	f000 f9d0 	bl	800457c <sequencer_newStep_action>

		seq.smp_count = seq.steptime; // reload the counter
 80041dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041de:	64a3      	str	r3, [r4, #72]	; 0x48
		seq.step_idx++;
 80041e0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 80041e4:	3301      	adds	r3, #1
 80041e6:	b21b      	sxth	r3, r3
		if (seq.step_idx >= NUMBER_STEPS)
 80041e8:	2b0f      	cmp	r3, #15
			seq.step_idx = 0;
 80041ea:	bfc8      	it	gt
 80041ec:	2300      	movgt	r3, #0
 80041ee:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c

	}
}
 80041f2:	bd10      	pop	{r4, pc}
 80041f4:	20003f54 	.word	0x20003f54

080041f8 <autoSound_set>:
static enum timbre sound _CCM_;

/*===============================================================================================================*/

void autoSound_set(int8_t val) {
	autoSound = val;
 80041f8:	4b01      	ldr	r3, [pc, #4]	; (8004200 <autoSound_set+0x8>)
 80041fa:	7018      	strb	r0, [r3, #0]
}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20003fbc 	.word	0x20003fbc

08004204 <soundNumber_get>:
	}
}
/*---------------------------------------------------------*/
uint8_t soundNumber_get(void) {
	return sound;
}
 8004204:	4b01      	ldr	r3, [pc, #4]	; (800420c <soundNumber_get+0x8>)
 8004206:	7858      	ldrb	r0, [r3, #1]
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20003fbc 	.word	0x20003fbc

08004210 <AmpLFO_amp_set>:
	}
}

/*-------------------------------------------------------*/
void AmpLFO_amp_set(uint8_t val) {
	amp_lfo.amp = val / MIDI_MAX;
 8004210:	ee07 0a90 	vmov	s15, r0
 8004214:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004228 <AmpLFO_amp_set+0x18>
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <AmpLFO_amp_set+0x1c>)
 800421a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800421e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004222:	edc3 7a00 	vstr	s15, [r3]
}
 8004226:	4770      	bx	lr
 8004228:	42fe0000 	.word	0x42fe0000
 800422c:	20003e94 	.word	0x20003e94

08004230 <AmpLFO_freq_set>:
/*-------------------------------------------------------*/
void AmpLFO_freq_set(uint8_t val) {
	amp_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8004230:	ee07 0a90 	vmov	s15, r0
 8004234:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004248 <AmpLFO_freq_set+0x18>
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <AmpLFO_freq_set+0x1c>)
 800423a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800423e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004242:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004246:	4770      	bx	lr
 8004248:	3dc18306 	.word	0x3dc18306
 800424c:	20003e94 	.word	0x20003e94

08004250 <Filt1LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt1LFO_amp_set(uint8_t val) {
	filt_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 8004250:	ee07 0a90 	vmov	s15, r0
 8004254:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004268 <Filt1LFO_amp_set+0x18>
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <Filt1LFO_amp_set+0x1c>)
 800425a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004262:	edc3 7a00 	vstr	s15, [r3]
}
 8004266:	4770      	bx	lr
 8004268:	3e810204 	.word	0x3e810204
 800426c:	20003ed4 	.word	0x20003ed4

08004270 <Filt1LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt1LFO_freq_set(uint8_t val) {
	filt_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 8004270:	ee07 0a90 	vmov	s15, r0
 8004274:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004288 <Filt1LFO_freq_set+0x18>
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <Filt1LFO_freq_set+0x1c>)
 800427a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800427e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004282:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004286:	4770      	bx	lr
 8004288:	3dc18306 	.word	0x3dc18306
 800428c:	20003ed4 	.word	0x20003ed4

08004290 <Filt2LFO_amp_set>:
/*-------------------------------------------------------*/
void Filt2LFO_amp_set(uint8_t val) {
	filt2_lfo.amp = MAX_FILTER_LFO_AMP / MIDI_MAX * val;
 8004290:	ee07 0a90 	vmov	s15, r0
 8004294:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80042a8 <Filt2LFO_amp_set+0x18>
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <Filt2LFO_amp_set+0x1c>)
 800429a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800429e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a2:	edc3 7a00 	vstr	s15, [r3]
}
 80042a6:	4770      	bx	lr
 80042a8:	3e810204 	.word	0x3e810204
 80042ac:	20003eb4 	.word	0x20003eb4

080042b0 <Filt2LFO_freq_set>:
/*-------------------------------------------------------*/
void Filt2LFO_freq_set(uint8_t val) {
	filt2_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 80042b0:	ee07 0a90 	vmov	s15, r0
 80042b4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80042c8 <Filt2LFO_freq_set+0x18>
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <Filt2LFO_freq_set+0x1c>)
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80042c6:	4770      	bx	lr
 80042c8:	3dc18306 	.word	0x3dc18306
 80042cc:	20003eb4 	.word	0x20003eb4

080042d0 <VibratoAmp_set>:
	} else
		vibr_lfo.amp = vibr_lfo.last_amp;
}
/*-------------------------------------------------------*/
void VibratoAmp_set(uint8_t val) {
	vibr_lfo.amp = MAX_VIBRATO_AMP / MIDI_MAX * val;
 80042d0:	ee07 0a90 	vmov	s15, r0
 80042d4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80042e8 <VibratoAmp_set+0x18>
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <VibratoAmp_set+0x1c>)
 80042da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042e2:	edc3 7a00 	vstr	s15, [r3]
}
 80042e6:	4770      	bx	lr
 80042e8:	3b810204 	.word	0x3b810204
 80042ec:	20003ef4 	.word	0x20003ef4

080042f0 <VibratoFreq_set>:
/*-------------------------------------------------------*/
void VibratoFreq_set(uint8_t val) {
	vibr_lfo.freq = MAX_VIBRATO_FREQ / MIDI_MAX * val;
 80042f0:	ee07 0a90 	vmov	s15, r0
 80042f4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004308 <VibratoFreq_set+0x18>
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <VibratoFreq_set+0x1c>)
 80042fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004302:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004306:	4770      	bx	lr
 8004308:	3dc18306 	.word	0x3dc18306
 800430c:	20003ef4 	.word	0x20003ef4

08004310 <Delay_switch>:
		delayON = true;
}
/*-------------------------------------------------------*/
void Delay_switch(uint8_t val) {

	if (val > 63)
 8004310:	283f      	cmp	r0, #63	; 0x3f
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <Delay_switch+0x14>)
 8004314:	d902      	bls.n	800431c <Delay_switch+0xc>
		delayON = true;
 8004316:	2201      	movs	r2, #1
 8004318:	709a      	strb	r2, [r3, #2]
	else {
		delayON = false;
		Delay_clean();
	}
}
 800431a:	4770      	bx	lr
		delayON = false;
 800431c:	2200      	movs	r2, #0
 800431e:	709a      	strb	r2, [r3, #2]
		Delay_clean();
 8004320:	f7fe b826 	b.w	8002370 <Delay_clean>
 8004324:	20003fbc 	.word	0x20003fbc

08004328 <Filter_Random_switch>:
	else
		autoFilterON = true;
}
/*-------------------------------------------------------*/
void Filter_Random_switch(uint8_t val) {
	if (val > 63)
 8004328:	283f      	cmp	r0, #63	; 0x3f
 800432a:	4b03      	ldr	r3, [pc, #12]	; (8004338 <Filter_Random_switch+0x10>)
		autoFilterON = true;
 800432c:	bf8c      	ite	hi
 800432e:	2201      	movhi	r2, #1
	else
		autoFilterON = false;
 8004330:	2200      	movls	r2, #0
 8004332:	70da      	strb	r2, [r3, #3]
}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20003fbc 	.word	0x20003fbc

0800433c <Chorus_switch>:
		chorusON = true;
}
/*-------------------------------------------------------*/
void Chorus_switch(uint8_t val) {

	if (val > 63)
 800433c:	283f      	cmp	r0, #63	; 0x3f
 800433e:	4b03      	ldr	r3, [pc, #12]	; (800434c <Chorus_switch+0x10>)
		chorusON = true;
 8004340:	bf8c      	ite	hi
 8004342:	2201      	movhi	r2, #1
	else
		chorusON = false;
 8004344:	2200      	movls	r2, #0
 8004346:	711a      	strb	r2, [r3, #4]
}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20003fbc 	.word	0x20003fbc

08004350 <Phaser_switch>:
/*-------------------------------------------------------*/
void Phaser_switch(uint8_t val) {

	if (val > 63)
 8004350:	283f      	cmp	r0, #63	; 0x3f
 8004352:	4b03      	ldr	r3, [pc, #12]	; (8004360 <Phaser_switch+0x10>)
		phaserON = true;
 8004354:	bf8c      	ite	hi
 8004356:	2201      	movhi	r2, #1
	else
		phaserON = false;
 8004358:	2200      	movls	r2, #0
 800435a:	715a      	strb	r2, [r3, #5]
}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20003fbc 	.word	0x20003fbc

08004364 <Sound_set>:
	else
		sound = 0;
}
/*-------------------------------------------------------*/
void Sound_set(uint8_t val) {
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 8004364:	ee07 0a90 	vmov	s15, r0
 8004368:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800436c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80043a0 <Sound_set+0x3c>
void Sound_set(uint8_t val) {
 8004370:	b507      	push	{r0, r1, r2, lr}
	sound = (uint8_t) rintf((LAST_SOUND - 1) / MIDI_MAX * val);
 8004372:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004376:	f003 fa0d 	bl	8007794 <rintf>
 800437a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <Sound_set+0x40>)
 8004380:	edcd 7a01 	vstr	s15, [sp, #4]
 8004384:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004388:	7053      	strb	r3, [r2, #1]
	if (sound != ADDITIVE)
 800438a:	2b04      	cmp	r3, #4
 800438c:	d004      	beq.n	8004398 <Sound_set+0x34>
		AdditiveGen_newWaveform();
}
 800438e:	b003      	add	sp, #12
 8004390:	f85d eb04 	ldr.w	lr, [sp], #4
		AdditiveGen_newWaveform();
 8004394:	f7ff b942 	b.w	800361c <AdditiveGen_newWaveform>
}
 8004398:	b003      	add	sp, #12
 800439a:	f85d fb04 	ldr.w	pc, [sp], #4
 800439e:	bf00      	nop
 80043a0:	3df1e3c8 	.word	0x3df1e3c8
 80043a4:	20003fbc 	.word	0x20003fbc

080043a8 <FM_OP1_freq_set>:
/*******************************************************************************************************************************/

void FM_OP1_freq_set(uint8_t val) {
	FM_op_freq_set(&op1, val);
 80043a8:	4601      	mov	r1, r0
 80043aa:	4801      	ldr	r0, [pc, #4]	; (80043b0 <FM_OP1_freq_set+0x8>)
 80043ac:	f7fe bdf2 	b.w	8002f94 <FM_op_freq_set>
 80043b0:	20003e1c 	.word	0x20003e1c

080043b4 <FM_OP1_modInd_set>:
}
/*-------------------------------------------------------*/
void FM_OP1_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op1, val);
 80043b4:	4601      	mov	r1, r0
 80043b6:	4801      	ldr	r0, [pc, #4]	; (80043bc <FM_OP1_modInd_set+0x8>)
 80043b8:	f7fe bdfa 	b.w	8002fb0 <FM_op_modInd_set>
 80043bc:	20003e1c 	.word	0x20003e1c

080043c0 <FM_OP2_freq_set>:
}

/*----------------------------------------------------------------------------------------------------------------------------*/
void FM_OP2_freq_set(uint8_t val) {
 80043c0:	b508      	push	{r3, lr}
	//FM_op_freq_set(&op2, val);
	op2.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op2 is a multiple of the main pitch freq (op1)
 80043c2:	eddf 0a05 	vldr	s1, [pc, #20]	; 80043d8 <FM_OP2_freq_set+0x18>
 80043c6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80043dc <FM_OP2_freq_set+0x1c>
 80043ca:	f7fe fb0f 	bl	80029ec <Lin2Exp>
 80043ce:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <FM_OP2_freq_set+0x20>)
 80043d0:	ed83 0a06 	vstr	s0, [r3, #24]
	//op2.mul = roundf(32 * val/MIDI_MAX);
}
 80043d4:	bd08      	pop	{r3, pc}
 80043d6:	bf00      	nop
 80043d8:	42000000 	.word	0x42000000
 80043dc:	3e4ccccd 	.word	0x3e4ccccd
 80043e0:	20003dfc 	.word	0x20003dfc

080043e4 <FM_OP2_modInd_set>:
		op2.mul *= 0.99f;
	}
}
/*-------------------------------------------------------*/
void FM_OP2_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op2, val);
 80043e4:	4601      	mov	r1, r0
 80043e6:	4801      	ldr	r0, [pc, #4]	; (80043ec <FM_OP2_modInd_set+0x8>)
 80043e8:	f7fe bde2 	b.w	8002fb0 <FM_op_modInd_set>
 80043ec:	20003dfc 	.word	0x20003dfc

080043f0 <FM_OP3_freq_set>:
}

/*------------------------------------------------------------------------------------------------------------------------------*/
void FM_OP3_freq_set(uint8_t val) {
 80043f0:	b508      	push	{r3, lr}
	op3.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op3 is a multiple of the main pitch freq (op1)
 80043f2:	eddf 0a05 	vldr	s1, [pc, #20]	; 8004408 <FM_OP3_freq_set+0x18>
 80043f6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800440c <FM_OP3_freq_set+0x1c>
 80043fa:	f7fe faf7 	bl	80029ec <Lin2Exp>
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <FM_OP3_freq_set+0x20>)
 8004400:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8004404:	bd08      	pop	{r3, pc}
 8004406:	bf00      	nop
 8004408:	42000000 	.word	0x42000000
 800440c:	3e4ccccd 	.word	0x3e4ccccd
 8004410:	20003ddc 	.word	0x20003ddc

08004414 <FM_OP3_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP3_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op3, val);
 8004414:	4601      	mov	r1, r0
 8004416:	4801      	ldr	r0, [pc, #4]	; (800441c <FM_OP3_modInd_set+0x8>)
 8004418:	f7fe bdca 	b.w	8002fb0 <FM_op_modInd_set>
 800441c:	20003ddc 	.word	0x20003ddc

08004420 <FM_OP4_freq_set>:
		op3.mul *= 0.99f;
	}
}

/*--------------------------------------------------------------------------------------------------------------------------*/
void FM_OP4_freq_set(uint8_t val) {
 8004420:	b508      	push	{r3, lr}
	op4.mul = Lin2Exp(val, 0.2f, 32.f); // the freq of op4 is a multiple of the main pitch freq (op1)
 8004422:	eddf 0a05 	vldr	s1, [pc, #20]	; 8004438 <FM_OP4_freq_set+0x18>
 8004426:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800443c <FM_OP4_freq_set+0x1c>
 800442a:	f7fe fadf 	bl	80029ec <Lin2Exp>
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <FM_OP4_freq_set+0x20>)
 8004430:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8004434:	bd08      	pop	{r3, pc}
 8004436:	bf00      	nop
 8004438:	42000000 	.word	0x42000000
 800443c:	3e4ccccd 	.word	0x3e4ccccd
 8004440:	20003dbc 	.word	0x20003dbc

08004444 <FM_OP4_modInd_set>:
/*-------------------------------------------------------*/
void FM_OP4_modInd_set(uint8_t val) {
	FM_op_modInd_set(&op4, val);
 8004444:	4601      	mov	r1, r0
 8004446:	4801      	ldr	r0, [pc, #4]	; (800444c <FM_OP4_modInd_set+0x8>)
 8004448:	f7fe bdb2 	b.w	8002fb0 <FM_op_modInd_set>
 800444c:	20003dbc 	.word	0x20003dbc

08004450 <Synth_Init>:
	}
}

/*===============================================================================================================*/

void Synth_Init(void) {
 8004450:	b508      	push	{r3, lr}

	vol = env = 1;
 8004452:	4b38      	ldr	r3, [pc, #224]	; (8004534 <Synth_Init+0xe4>)
 8004454:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
void Synth_Init(void) {
 8004458:	ed2d 8b02 	vpush	{d8}
	vol = env = 1;
 800445c:	609a      	str	r2, [r3, #8]
	sound = WT_SINE;
 800445e:	2203      	movs	r2, #3
 8004460:	705a      	strb	r2, [r3, #1]
	autoFilterON = false;
 8004462:	2200      	movs	r2, #0
 8004464:	70da      	strb	r2, [r3, #3]
	autoSound = 0;
 8004466:	701a      	strb	r2, [r3, #0]
	chorusON = false;
 8004468:	711a      	strb	r2, [r3, #4]
	delayON = false;
 800446a:	709a      	strb	r2, [r3, #2]
	phaserON = true;
 800446c:	2201      	movs	r2, #1
 800446e:	715a      	strb	r2, [r3, #5]

	Delay_init();
 8004470:	f7fd ff68 	bl	8002344 <Delay_init>
	drifter_init();
 8004474:	f7fe f8fa 	bl	800266c <drifter_init>
//	pitchGen_init();
	sequencer_init();
 8004478:	f7ff fe74 	bl	8004164 <sequencer_init>
	ADSR_init(&adsr);
 800447c:	482e      	ldr	r0, [pc, #184]	; (8004538 <Synth_Init+0xe8>)
	Chorus_init();
	PhaserInit();
	SVF_init();
	filterFreq = 0.25f;
	filterFreq2 = 0.25f;
	osc_init(&op1, 0.8f, 587.f);
 800447e:	eddf 8a2f 	vldr	s17, [pc, #188]	; 800453c <Synth_Init+0xec>
 8004482:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8004540 <Synth_Init+0xf0>
	ADSR_init(&adsr);
 8004486:	f7fc fe69 	bl	800115c <ADSR_init>
	Chorus_init();
 800448a:	f7fd fd57 	bl	8001f3c <Chorus_init>
	PhaserInit();
 800448e:	f7ff fa61 	bl	8003954 <PhaserInit>
	SVF_init();
 8004492:	f7ff fbe7 	bl	8003c64 <SVF_init>
	filterFreq = 0.25f;
 8004496:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <Synth_Init+0xf4>)
	osc_init(&op1, 0.8f, 587.f);
 8004498:	482b      	ldr	r0, [pc, #172]	; (8004548 <Synth_Init+0xf8>)
	filterFreq = 0.25f;
 800449a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800449e:	6013      	str	r3, [r2, #0]
	filterFreq2 = 0.25f;
 80044a0:	4a2a      	ldr	r2, [pc, #168]	; (800454c <Synth_Init+0xfc>)
	osc_init(&op1, 0.8f, 587.f);
 80044a2:	eef0 0a68 	vmov.f32	s1, s17
 80044a6:	eeb0 0a48 	vmov.f32	s0, s16
	filterFreq2 = 0.25f;
 80044aa:	6013      	str	r3, [r2, #0]
	osc_init(&op1, 0.8f, 587.f);
 80044ac:	f7fe fd54 	bl	8002f58 <osc_init>
	osc_init(&op2, 0.8f, 587.f);
 80044b0:	eef0 0a68 	vmov.f32	s1, s17
 80044b4:	eeb0 0a48 	vmov.f32	s0, s16
 80044b8:	4825      	ldr	r0, [pc, #148]	; (8004550 <Synth_Init+0x100>)
 80044ba:	f7fe fd4d 	bl	8002f58 <osc_init>
	osc_init(&op3, 0.8f, 587.f);
 80044be:	eef0 0a68 	vmov.f32	s1, s17
 80044c2:	eeb0 0a48 	vmov.f32	s0, s16
 80044c6:	4823      	ldr	r0, [pc, #140]	; (8004554 <Synth_Init+0x104>)
 80044c8:	f7fe fd46 	bl	8002f58 <osc_init>
	osc_init(&op4, 0.8f, 587.f);
 80044cc:	eeb0 0a48 	vmov.f32	s0, s16
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 80044d0:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8004558 <Synth_Init+0x108>
	osc_init(&op4, 0.8f, 587.f);
 80044d4:	4821      	ldr	r0, [pc, #132]	; (800455c <Synth_Init+0x10c>)
 80044d6:	eef0 0a68 	vmov.f32	s1, s17
 80044da:	f7fe fd3d 	bl	8002f58 <osc_init>
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 80044de:	eeb0 0a48 	vmov.f32	s0, s16
 80044e2:	eef1 0a06 	vmov.f32	s1, #22	; 0x40b00000  5.5
 80044e6:	481e      	ldr	r0, [pc, #120]	; (8004560 <Synth_Init+0x110>)
 80044e8:	f7fe fd36 	bl	8002f58 <osc_init>
	osc_init(&filt_lfo, 0, 0);
 80044ec:	eef0 0a48 	vmov.f32	s1, s16
 80044f0:	eeb0 0a48 	vmov.f32	s0, s16
 80044f4:	481b      	ldr	r0, [pc, #108]	; (8004564 <Synth_Init+0x114>)
 80044f6:	f7fe fd2f 	bl	8002f58 <osc_init>
	osc_init(&filt2_lfo, 0, 0);
 80044fa:	eef0 0a48 	vmov.f32	s1, s16
 80044fe:	eeb0 0a48 	vmov.f32	s0, s16
 8004502:	4819      	ldr	r0, [pc, #100]	; (8004568 <Synth_Init+0x118>)
 8004504:	f7fe fd28 	bl	8002f58 <osc_init>
	osc_init(&amp_lfo, 0, 0);
 8004508:	eef0 0a48 	vmov.f32	s1, s16
 800450c:	eeb0 0a48 	vmov.f32	s0, s16
 8004510:	4816      	ldr	r0, [pc, #88]	; (800456c <Synth_Init+0x11c>)
 8004512:	f7fe fd21 	bl	8002f58 <osc_init>
	AdditiveGen_newWaveform();
 8004516:	f7ff f881 	bl	800361c <AdditiveGen_newWaveform>
	VCO_blepsaw_Init(&mbSawOsc);
 800451a:	4815      	ldr	r0, [pc, #84]	; (8004570 <Synth_Init+0x120>)
 800451c:	f7fc ff8a 	bl	8001434 <VCO_blepsaw_Init>
	VCO_bleprect_Init(&mbRectOsc);
 8004520:	4814      	ldr	r0, [pc, #80]	; (8004574 <Synth_Init+0x124>)
 8004522:	f7fd f87b 	bl	800161c <VCO_bleprect_Init>
	VCO_bleptri_Init(&mbTriOsc);
}
 8004526:	ecbd 8b02 	vpop	{d8}
	VCO_bleptri_Init(&mbTriOsc);
 800452a:	4813      	ldr	r0, [pc, #76]	; (8004578 <Synth_Init+0x128>)
}
 800452c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	VCO_bleptri_Init(&mbTriOsc);
 8004530:	f7fd ba6a 	b.w	8001a08 <VCO_bleptri_Init>
 8004534:	20003fbc 	.word	0x20003fbc
 8004538:	20000100 	.word	0x20000100
 800453c:	4412c000 	.word	0x4412c000
 8004540:	3f4ccccd 	.word	0x3f4ccccd
 8004544:	20013eb8 	.word	0x20013eb8
 8004548:	20003e1c 	.word	0x20003e1c
 800454c:	20013ebc 	.word	0x20013ebc
 8004550:	20003dfc 	.word	0x20003dfc
 8004554:	20003ddc 	.word	0x20003ddc
 8004558:	00000000 	.word	0x00000000
 800455c:	20003dbc 	.word	0x20003dbc
 8004560:	20003ef4 	.word	0x20003ef4
 8004564:	20003ed4 	.word	0x20003ed4
 8004568:	20003eb4 	.word	0x20003eb4
 800456c:	20003e94 	.word	0x20003e94
 8004570:	20000bdc 	.word	0x20000bdc
 8004574:	20000680 	.word	0x20000680
 8004578:	20000128 	.word	0x20000128

0800457c <sequencer_newStep_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newStep_action(void) // User callback function called by sequencer_process()
{
 800457c:	b538      	push	{r3, r4, r5, lr}
	if ((noteGen.automaticON || noteGen.chRequested)) {
 800457e:	4d45      	ldr	r5, [pc, #276]	; (8004694 <sequencer_newStep_action+0x118>)
 8004580:	7bab      	ldrb	r3, [r5, #14]
 8004582:	b90b      	cbnz	r3, 8004588 <sequencer_newStep_action+0xc>
 8004584:	7c2b      	ldrb	r3, [r5, #16]
 8004586:	b12b      	cbz	r3, 8004594 <sequencer_newStep_action+0x18>
		seq_sequence_new();
 8004588:	f7ff fd8e 	bl	80040a8 <seq_sequence_new>
		noteGen.chRequested = false;
 800458c:	2300      	movs	r3, #0
 800458e:	742b      	strb	r3, [r5, #16]
		AdditiveGen_newWaveform();
 8004590:	f7ff f844 	bl	800361c <AdditiveGen_newWaveform>
	}

	if ((noteGen.someNotesMuted) && (rintf(frand_a_b(0.4f, 1)) == 0))
 8004594:	7c6b      	ldrb	r3, [r5, #17]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d040      	beq.n	800461c <sequencer_newStep_action+0xa0>
 800459a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800459e:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004698 <sequencer_newStep_action+0x11c>
 80045a2:	f7ff fac9 	bl	8003b38 <frand_a_b>
 80045a6:	f003 f8f5 	bl	8007794 <rintf>
 80045aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80045ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b2:	d133      	bne.n	800461c <sequencer_newStep_action+0xa0>
		ADSR_keyOff(&adsr);
 80045b4:	4839      	ldr	r0, [pc, #228]	; (800469c <sequencer_newStep_action+0x120>)
 80045b6:	f7fc fdee 	bl	8001196 <ADSR_keyOff>
	else
		ADSR_keyOn(&adsr);

	if (autoFilterON)
 80045ba:	4c39      	ldr	r4, [pc, #228]	; (80046a0 <sequencer_newStep_action+0x124>)
 80045bc:	78e3      	ldrb	r3, [r4, #3]
 80045be:	b193      	cbz	r3, 80045e6 <sequencer_newStep_action+0x6a>
		SVF_directSetFilterValue(&SVFilter,
		Ts * 600.f * powf(5000.f / 600.f, frand_a_b(0, 1)));
 80045c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80045c4:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80046a4 <sequencer_newStep_action+0x128>
 80045c8:	f7ff fab6 	bl	8003b38 <frand_a_b>
 80045cc:	eef0 0a40 	vmov.f32	s1, s0
 80045d0:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80046a8 <sequencer_newStep_action+0x12c>
 80045d4:	f003 f97a 	bl	80078cc <powf>
		SVF_directSetFilterValue(&SVFilter,
 80045d8:	eddf 7a34 	vldr	s15, [pc, #208]	; 80046ac <sequencer_newStep_action+0x130>
 80045dc:	4834      	ldr	r0, [pc, #208]	; (80046b0 <sequencer_newStep_action+0x134>)
 80045de:	ee20 0a27 	vmul.f32	s0, s0, s15
 80045e2:	f7ff faf5 	bl	8003bd0 <SVF_directSetFilterValue>

	if (noteGen.transpose != 0) {
 80045e6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80045ea:	b123      	cbz	r3, 80045f6 <sequencer_newStep_action+0x7a>
		noteGen.rootNote += noteGen.transpose;
 80045ec:	896a      	ldrh	r2, [r5, #10]
 80045ee:	4413      	add	r3, r2
 80045f0:	816b      	strh	r3, [r5, #10]
		seq_transpose();
 80045f2:	f7ff fd99 	bl	8004128 <seq_transpose>
	}

	if (autoSound == 1) {
 80045f6:	f994 3000 	ldrsb.w	r3, [r4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d114      	bne.n	8004628 <sequencer_newStep_action+0xac>
		switch (rand() % 4) // 4 random timbers
 80045fe:	f002 fc0f 	bl	8006e20 <rand>
 8004602:	4243      	negs	r3, r0
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	f000 0003 	and.w	r0, r0, #3
 800460c:	bf58      	it	pl
 800460e:	4258      	negpl	r0, r3
 8004610:	2803      	cmp	r0, #3
 8004612:	d809      	bhi.n	8004628 <sequencer_newStep_action+0xac>
 8004614:	e8df f000 	tbb	[pc, r0]
 8004618:	3b393506 	.word	0x3b393506
		ADSR_keyOn(&adsr);
 800461c:	481f      	ldr	r0, [pc, #124]	; (800469c <sequencer_newStep_action+0x120>)
 800461e:	f7fc fdb1 	bl	8001184 <ADSR_keyOn>
 8004622:	e7ca      	b.n	80045ba <sequencer_newStep_action+0x3e>
		{
		case 0:
			sound = CHORD15;
 8004624:	2309      	movs	r3, #9
			break;
		case 2:
			sound = CHORD13min5;
			break;
		case 3:
			sound = VOICES3;
 8004626:	7063      	strb	r3, [r4, #1]
			break;
		}
	}
	if (autoSound == 2) {
 8004628:	f994 3000 	ldrsb.w	r3, [r4]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d115      	bne.n	800465c <sequencer_newStep_action+0xe0>
		sound = rand() % LAST_SOUND;
 8004630:	f002 fbf6 	bl	8006e20 <rand>
 8004634:	4243      	negs	r3, r0
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	f000 000f 	and.w	r0, r0, #15
 800463e:	bf58      	it	pl
 8004640:	4258      	negpl	r0, r3
 8004642:	b2c0      	uxtb	r0, r0
		if ((sound == CHORD13min5) || (sound == CHORD135))
 8004644:	f1a0 030a 	sub.w	r3, r0, #10
 8004648:	2b01      	cmp	r3, #1
			sound = VOICES3;
 800464a:	bf96      	itet	ls
 800464c:	230c      	movls	r3, #12
		sound = rand() % LAST_SOUND;
 800464e:	7060      	strbhi	r0, [r4, #1]
			sound = VOICES3;
 8004650:	7063      	strbls	r3, [r4, #1]
		if (sound == ADDITIVE)
 8004652:	7863      	ldrb	r3, [r4, #1]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d101      	bne.n	800465c <sequencer_newStep_action+0xe0>
			AdditiveGen_newWaveform();
 8004658:	f7fe ffe0 	bl	800361c <AdditiveGen_newWaveform>
	}

	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <sequencer_newStep_action+0x138>)
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 800465e:	eddf 0a16 	vldr	s1, [pc, #88]	; 80046b8 <sequencer_newStep_action+0x13c>
	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 8004662:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 8004666:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004698 <sequencer_newStep_action+0x11c>
	f0 = notesFreq[seq.track1.note[seq.step_idx]]; // Main "melody" frequency
 800466a:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800466e:	4b13      	ldr	r3, [pc, #76]	; (80046bc <sequencer_newStep_action+0x140>)
 8004670:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60e3      	str	r3, [r4, #12]
	vol = frand_a_b(0.4f, .8f); // slightly random volume for each note
 8004678:	f7ff fa5e 	bl	8003b38 <frand_a_b>
 800467c:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8004680:	bd38      	pop	{r3, r4, r5, pc}
			AdditiveGen_newWaveform();
 8004682:	f7fe ffcb 	bl	800361c <AdditiveGen_newWaveform>
			sound = ADDITIVE;
 8004686:	2304      	movs	r3, #4
 8004688:	e7cd      	b.n	8004626 <sequencer_newStep_action+0xaa>
			sound = CHORD13min5;
 800468a:	230b      	movs	r3, #11
 800468c:	e7cb      	b.n	8004626 <sequencer_newStep_action+0xaa>
			sound = VOICES3;
 800468e:	230c      	movs	r3, #12
 8004690:	e7c9      	b.n	8004626 <sequencer_newStep_action+0xaa>
 8004692:	bf00      	nop
 8004694:	20003fa8 	.word	0x20003fa8
 8004698:	3ecccccd 	.word	0x3ecccccd
 800469c:	20000100 	.word	0x20000100
 80046a0:	20003fbc 	.word	0x20003fbc
 80046a4:	00000000 	.word	0x00000000
 80046a8:	41055555 	.word	0x41055555
 80046ac:	3c5ee95c 	.word	0x3c5ee95c
 80046b0:	20003f14 	.word	0x20003f14
 80046b4:	20003f54 	.word	0x20003f54
 80046b8:	3f4ccccd 	.word	0x3f4ccccd
 80046bc:	08016588 	.word	0x08016588

080046c0 <sequencer_newSequence_action>:
/*---------------------------------------------------------------------------------------*/

void sequencer_newSequence_action(void) // User callback function called by sequencer_process()
{
 80046c0:	b508      	push	{r3, lr}
	/* A new sequence begins ... */
	if ((demoMode == true) && (freeze == false)) {
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <sequencer_newSequence_action+0x20>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b153      	cbz	r3, 80046de <sequencer_newSequence_action+0x1e>
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <sequencer_newSequence_action+0x24>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b93b      	cbnz	r3, 80046de <sequencer_newSequence_action+0x1e>
		MagicPatch(MIDI_MAXi);
 80046ce:	207f      	movs	r0, #127	; 0x7f
 80046d0:	f7fc fc64 	bl	8000f9c <MagicPatch>
		MagicFX(MIDI_MAXi);
 80046d4:	207f      	movs	r0, #127	; 0x7f
	}
}
 80046d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		MagicFX(MIDI_MAXi);
 80046da:	f7fc bc1c 	b.w	8000f16 <MagicFX>
}
 80046de:	bd08      	pop	{r3, pc}
 80046e0:	2000000c 	.word	0x2000000c
 80046e4:	20012a64 	.word	0x20012a64

080046e8 <make_sound>:
/*===============================================================================================================*/

void make_sound(uint16_t *buf, uint16_t length) // To be used with the Sequencer
{
 80046e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ec:	ed2d 8b04 	vpush	{d8-d9}
 80046f0:	1d06      	adds	r6, r0, #4

	for (pos = 0; pos < length; pos++) {
		/*--- Sequencer actions and update ---*/
		//sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
		// GRA
		if (sequencerIsOn == true) {
 80046f2:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8004900 <make_sound+0x218>
 80046f6:	4c72      	ldr	r4, [pc, #456]	; (80048c0 <make_sound+0x1d8>)
 80046f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{
 80046fc:	b082      	sub	sp, #8
 80046fe:	1d05      	adds	r5, r0, #4
	for (pos = 0; pos < length; pos++) {
 8004700:	42ae      	cmp	r6, r5
 8004702:	d104      	bne.n	800470e <make_sound+0x26>

		*outp++ = valueL; // left channel sample
		*outp++ = valueR; // right channel sample
	}

}
 8004704:	b002      	add	sp, #8
 8004706:	ecbd 8b04 	vpop	{d8-d9}
 800470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sequencerIsOn == true) {
 800470e:	f898 3000 	ldrb.w	r3, [r8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80b3 	beq.w	800487e <make_sound+0x196>
			sequencer_process(); //computes f0 and calls sequencer_newStep_action() and sequencer_newSequence_action()
 8004718:	f7ff fd52 	bl	80041c0 <sequencer_process>
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 800471c:	4869      	ldr	r0, [pc, #420]	; (80048c4 <make_sound+0x1dc>)
		env = ADSR_computeSample(&adsr)
 800471e:	4f6a      	ldr	r7, [pc, #424]	; (80048c8 <make_sound+0x1e0>)
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 8004720:	f7fe fc88 	bl	8003034 <Osc_WT_SINE_SampleCompute>
 8004724:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004728:	edd4 7a03 	vldr	s15, [r4, #12]
		y = waveCompute(sound, f1);
 800472c:	7860      	ldrb	r0, [r4, #1]
		f1 = f0 * (1 + Osc_WT_SINE_SampleCompute(&vibr_lfo));
 800472e:	ee30 0a28 	vadd.f32	s0, s0, s17
		y = waveCompute(sound, f1);
 8004732:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004736:	f7ff f80f 	bl	8003758 <waveCompute>
		env = ADSR_computeSample(&adsr)
 800473a:	4638      	mov	r0, r7
		y = waveCompute(sound, f1);
 800473c:	eeb0 8a40 	vmov.f32	s16, s0
		env = ADSR_computeSample(&adsr)
 8004740:	f7fc fdb6 	bl	80012b0 <ADSR_computeSample>
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 8004744:	4861      	ldr	r0, [pc, #388]	; (80048cc <make_sound+0x1e4>)
		env = ADSR_computeSample(&adsr)
 8004746:	eef0 9a40 	vmov.f32	s19, s0
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 800474a:	f7fe fc73 	bl	8003034 <Osc_WT_SINE_SampleCompute>
 800474e:	ee30 9a28 	vadd.f32	s18, s0, s17
		y *= vol * env; // apply volume and envelop
 8004752:	ed94 0a02 	vldr	s0, [r4, #8]
		if (sequencerIsOn == true) {
 8004756:	f898 3000 	ldrb.w	r3, [r8]
				* (1 + Osc_WT_SINE_SampleCompute(&amp_lfo));
 800475a:	ee29 9a29 	vmul.f32	s18, s18, s19
		y *= vol * env; // apply volume and envelop
 800475e:	ee29 9a00 	vmul.f32	s18, s18, s0
 8004762:	ee29 9a08 	vmul.f32	s18, s18, s16
		if (sequencerIsOn == true) {
 8004766:	b13b      	cbz	r3, 8004778 <make_sound+0x90>
			if (adsr.cnt_ >= seq.gateTime)
 8004768:	4b59      	ldr	r3, [pc, #356]	; (80048d0 <make_sound+0x1e8>)
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476e:	429a      	cmp	r2, r3
 8004770:	d302      	bcc.n	8004778 <make_sound+0x90>
				ADSR_keyOff(&adsr);
 8004772:	4638      	mov	r0, r7
 8004774:	f7fc fd0f 	bl	8001196 <ADSR_keyOff>
		if ((!autoFilterON) && (filt_lfo.amp != 0))
 8004778:	78e3      	ldrb	r3, [r4, #3]
 800477a:	b99b      	cbnz	r3, 80047a4 <make_sound+0xbc>
 800477c:	4855      	ldr	r0, [pc, #340]	; (80048d4 <make_sound+0x1ec>)
 800477e:	edd0 7a00 	vldr	s15, [r0]
 8004782:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	d00b      	beq.n	80047a4 <make_sound+0xbc>
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 800478c:	f7fe fd1e 	bl	80031cc <OpSampleCompute7bis>
			SVF_directSetFilterValue(&SVFilter,
 8004790:	4b51      	ldr	r3, [pc, #324]	; (80048d8 <make_sound+0x1f0>)
 8004792:	4852      	ldr	r0, [pc, #328]	; (80048dc <make_sound+0x1f4>)
 8004794:	edd3 7a00 	vldr	s15, [r3]
					filterFreq * (1 + OpSampleCompute7bis(&filt_lfo)));
 8004798:	ee30 0a28 	vadd.f32	s0, s0, s17
			SVF_directSetFilterValue(&SVFilter,
 800479c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80047a0:	f7ff fa16 	bl	8003bd0 <SVF_directSetFilterValue>
		if (filt2_lfo.amp != 0)
 80047a4:	484e      	ldr	r0, [pc, #312]	; (80048e0 <make_sound+0x1f8>)
 80047a6:	edd0 7a00 	vldr	s15, [r0]
 80047aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b2:	d00b      	beq.n	80047cc <make_sound+0xe4>
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 80047b4:	f7fe fd0a 	bl	80031cc <OpSampleCompute7bis>
			SVF_directSetFilterValue(&SVFilter2,
 80047b8:	4b4a      	ldr	r3, [pc, #296]	; (80048e4 <make_sound+0x1fc>)
 80047ba:	484b      	ldr	r0, [pc, #300]	; (80048e8 <make_sound+0x200>)
 80047bc:	edd3 7a00 	vldr	s15, [r3]
					filterFreq2 * (1 + OpSampleCompute7bis(&filt2_lfo)));
 80047c0:	ee30 0a28 	vadd.f32	s0, s0, s17
			SVF_directSetFilterValue(&SVFilter2,
 80047c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80047c8:	f7ff fa02 	bl	8003bd0 <SVF_directSetFilterValue>
						* (SVF_calcSample(&SVFilter, y)
 80047cc:	4843      	ldr	r0, [pc, #268]	; (80048dc <make_sound+0x1f4>)
 80047ce:	eeb0 0a49 	vmov.f32	s0, s18
 80047d2:	f7ff fae7 	bl	8003da4 <SVF_calcSample>
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 80047d6:	4844      	ldr	r0, [pc, #272]	; (80048e8 <make_sound+0x200>)
						* (SVF_calcSample(&SVFilter, y)
 80047d8:	eeb0 8a40 	vmov.f32	s16, s0
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 80047dc:	eeb0 0a49 	vmov.f32	s0, s18
 80047e0:	f7ff fae0 	bl	8003da4 <SVF_calcSample>
		if (delayON)
 80047e4:	78a3      	ldrb	r3, [r4, #2]
								+ SVF_calcSample(&SVFilter2, y)); // Two filters in parallel
 80047e6:	ee38 0a00 	vadd.f32	s0, s16, s0
		y =
 80047ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80047ee:	ee20 0a27 	vmul.f32	s0, s0, s15
		if (delayON)
 80047f2:	b10b      	cbz	r3, 80047f8 <make_sound+0x110>
			y = Delay_compute(y);
 80047f4:	f7fd fe12 	bl	800241c <Delay_compute>
		if (phaserON)
 80047f8:	7963      	ldrb	r3, [r4, #5]
 80047fa:	b10b      	cbz	r3, 8004800 <make_sound+0x118>
			y = Phaser_compute(y);
 80047fc:	f7ff f914 	bl	8003a28 <Phaser_compute>
		if (chorusON)
 8004800:	7923      	ldrb	r3, [r4, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d051      	beq.n	80048aa <make_sound+0x1c2>
			stereoChorus_compute(&yL, &yR, y);
 8004806:	a901      	add	r1, sp, #4
 8004808:	4668      	mov	r0, sp
 800480a:	f7fd fd7b 	bl	8002304 <stereoChorus_compute>
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 800480e:	ed9d 7a00 	vldr	s14, [sp]
 8004812:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	dc4b      	bgt.n	80048b4 <make_sound+0x1cc>
		yL = (yL < -1.0f) ? -1.0f : yL;
 800481c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004820:	eeb4 7a67 	vcmp.f32	s14, s15
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	bf48      	it	mi
 800482a:	eeb0 7a67 	vmovmi.f32	s14, s15
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 800482e:	eddd 7a01 	vldr	s15, [sp, #4]
		yL = (yL < -1.0f) ? -1.0f : yL;
 8004832:	ed8d 7a00 	vstr	s14, [sp]
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 8004836:	eef4 7ae8 	vcmpe.f32	s15, s17
 800483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483e:	dc3c      	bgt.n	80048ba <make_sound+0x1d2>
		yR = (yR < -1.0f) ? -1.0f : yR;
 8004840:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8004844:	eef4 7a66 	vcmp.f32	s15, s13
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	bf48      	it	mi
 800484e:	eef0 7a66 	vmovmi.f32	s15, s13
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 8004852:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048ec <make_sound+0x204>
		yR = (yR < -1.0f) ? -1.0f : yR;
 8004856:	edcd 7a01 	vstr	s15, [sp, #4]
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 800485a:	ee27 7a26 	vmul.f32	s14, s14, s13
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 800485e:	ee67 7aa6 	vmul.f32	s15, s15, s13
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 8004862:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 8004866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		valueL = (uint16_t) ((int16_t) ((32767.0f) * yL)); // conversion float -> int
 800486a:	ee17 3a10 	vmov	r3, s14
 800486e:	f826 3c04 	strh.w	r3, [r6, #-4]
		valueR = (uint16_t) ((int16_t) ((32767.0f) * yR));
 8004872:	ee17 3a90 	vmov	r3, s15
 8004876:	3604      	adds	r6, #4
 8004878:	f826 3c06 	strh.w	r3, [r6, #-6]
 800487c:	e740      	b.n	8004700 <make_sound+0x18>
			f0 = notesFreq[currentNote];
 800487e:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <make_sound+0x208>)
			vol = (float) velocity / 127.0f;
 8004880:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80048f4 <make_sound+0x20c>
			f0 = notesFreq[currentNote];
 8004884:	f993 2000 	ldrsb.w	r2, [r3]
 8004888:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <make_sound+0x210>)
 800488a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60e3      	str	r3, [r4, #12]
			vol = (float) velocity / 127.0f;
 8004892:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <make_sound+0x214>)
 8004894:	f993 3000 	ldrsb.w	r3, [r3]
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80048a4:	ed84 7a02 	vstr	s14, [r4, #8]
 80048a8:	e738      	b.n	800471c <make_sound+0x34>
			yL = yR = y;
 80048aa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80048ae:	ed8d 0a00 	vstr	s0, [sp]
 80048b2:	e7ac      	b.n	800480e <make_sound+0x126>
		yL = (yL > 1.0f) ? 1.0f : yL; //clip too loud left samples
 80048b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048b8:	e7b9      	b.n	800482e <make_sound+0x146>
		yR = (yR > 1.0f) ? 1.0f : yR; //clip too loud right samples
 80048ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80048be:	e7c8      	b.n	8004852 <make_sound+0x16a>
 80048c0:	20003fbc 	.word	0x20003fbc
 80048c4:	20003ef4 	.word	0x20003ef4
 80048c8:	20000100 	.word	0x20000100
 80048cc:	20003e94 	.word	0x20003e94
 80048d0:	20003f54 	.word	0x20003f54
 80048d4:	20003ed4 	.word	0x20003ed4
 80048d8:	20013eb8 	.word	0x20013eb8
 80048dc:	20003f14 	.word	0x20003f14
 80048e0:	20003eb4 	.word	0x20003eb4
 80048e4:	20013ebc 	.word	0x20013ebc
 80048e8:	20003f34 	.word	0x20003f34
 80048ec:	46fffe00 	.word	0x46fffe00
 80048f0:	20000000 	.word	0x20000000
 80048f4:	42fe0000 	.word	0x42fe0000
 80048f8:	08016588 	.word	0x08016588
 80048fc:	20012ac0 	.word	0x20012ac0
 8004900:	20012a65 	.word	0x20012a65

08004904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004904:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <HAL_MspInit+0x34>)
 8004908:	2100      	movs	r1, #0
 800490a:	9100      	str	r1, [sp, #0]
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004912:	645a      	str	r2, [r3, #68]	; 0x44
 8004914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004916:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800491a:	9200      	str	r2, [sp, #0]
 800491c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	9101      	str	r1, [sp, #4]
 8004920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004922:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004932:	b002      	add	sp, #8
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800

0800493c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800493c:	b530      	push	{r4, r5, lr}
 800493e:	4604      	mov	r4, r0
 8004940:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004942:	2214      	movs	r2, #20
 8004944:	2100      	movs	r1, #0
 8004946:	a803      	add	r0, sp, #12
 8004948:	f002 fa61 	bl	8006e0e <memset>
  if(hi2c->Instance==I2C2)
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <HAL_I2C_MspInit+0x68>)
 8004950:	429a      	cmp	r2, r3
 8004952:	d124      	bne.n	800499e <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004954:	4c14      	ldr	r4, [pc, #80]	; (80049a8 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004956:	4815      	ldr	r0, [pc, #84]	; (80049ac <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004958:	2500      	movs	r5, #0
 800495a:	9501      	str	r5, [sp, #4]
 800495c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	6323      	str	r3, [r4, #48]	; 0x30
 8004964:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800496e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004972:	2312      	movs	r3, #18
 8004974:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004978:	2101      	movs	r1, #1
 800497a:	2303      	movs	r3, #3
 800497c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004980:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004982:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004984:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004986:	f000 fd99 	bl	80054bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800498a:	9502      	str	r5, [sp, #8]
 800498c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800498e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004992:	6423      	str	r3, [r4, #64]	; 0x40
 8004994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	9302      	str	r3, [sp, #8]
 800499c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800499e:	b009      	add	sp, #36	; 0x24
 80049a0:	bd30      	pop	{r4, r5, pc}
 80049a2:	bf00      	nop
 80049a4:	40005800 	.word	0x40005800
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40020400 	.word	0x40020400

080049b0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80049b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b4:	4606      	mov	r6, r0
 80049b6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b8:	2214      	movs	r2, #20
 80049ba:	2100      	movs	r1, #0
 80049bc:	a803      	add	r0, sp, #12
 80049be:	f002 fa26 	bl	8006e0e <memset>
  if(hi2s->Instance==SPI2)
 80049c2:	6832      	ldr	r2, [r6, #0]
 80049c4:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_I2S_MspInit+0xf0>)
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d167      	bne.n	8004a9a <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049ca:	2500      	movs	r5, #0
 80049cc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049d0:	9500      	str	r5, [sp, #0]
 80049d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d4:	4833      	ldr	r0, [pc, #204]	; (8004aa4 <HAL_I2S_MspInit+0xf4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
 80049dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80049e2:	9200      	str	r2, [sp, #0]
 80049e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e6:	9501      	str	r5, [sp, #4]
 80049e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ea:	f042 0202 	orr.w	r2, r2, #2
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
 80049f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f2:	f002 0202 	and.w	r2, r2, #2
 80049f6:	9201      	str	r2, [sp, #4]
 80049f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049fa:	9502      	str	r5, [sp, #8]
 80049fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fe:	f042 0204 	orr.w	r2, r2, #4
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a10:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a14:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a18:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a1e:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a22:	f000 fd4b 	bl	80054bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004a26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a2a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004a30:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a32:	481c      	ldr	r0, [pc, #112]	; (8004aa4 <HAL_I2S_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004a34:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a36:	2740      	movs	r7, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a38:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a3c:	f000 fd3e 	bl	80054bc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a40:	a903      	add	r1, sp, #12
 8004a42:	4819      	ldr	r0, [pc, #100]	; (8004aa8 <HAL_I2S_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a44:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a48:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4c:	e9cd 5505 	strd	r5, r5, [sp, #20]

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004a50:	4c16      	ldr	r4, [pc, #88]	; (8004aac <HAL_I2S_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a52:	f000 fd33 	bl	80054bc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <HAL_I2S_MspInit+0x100>)
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004a58:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004a5a:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a66:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a72:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004a76:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	e9c4 0308 	strd	r0, r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004a80:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a82:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a84:	e9c4 7502 	strd	r7, r5, [r4, #8]
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004a88:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a8c:	f000 fba0 	bl	80051d0 <HAL_DMA_Init>
 8004a90:	b108      	cbz	r0, 8004a96 <HAL_I2S_MspInit+0xe6>
    {
      Error_Handler();
 8004a92:	f7fd ffa9 	bl	80029e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8004a96:	63b4      	str	r4, [r6, #56]	; 0x38
 8004a98:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004a9a:	b008      	add	sp, #32
 8004a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa0:	40003800 	.word	0x40003800
 8004aa4:	40020400 	.word	0x40020400
 8004aa8:	40020800 	.word	0x40020800
 8004aac:	20013ba4 	.word	0x20013ba4
 8004ab0:	40026070 	.word	0x40026070

08004ab4 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004ab4:	6802      	ldr	r2, [r0, #0]
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RNG_MspInit+0x28>)
 8004ab8:	429a      	cmp	r2, r3
{
 8004aba:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8004abc:	d10b      	bne.n	8004ad6 <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <HAL_RNG_MspInit+0x2c>)
 8004ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aca:	635a      	str	r2, [r3, #52]	; 0x34
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004ad6:	b002      	add	sp, #8
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	50060800 	.word	0x50060800
 8004ae0:	40023800 	.word	0x40023800

08004ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aea:	2214      	movs	r2, #20
 8004aec:	2100      	movs	r1, #0
 8004aee:	a803      	add	r0, sp, #12
 8004af0:	f002 f98d 	bl	8006e0e <memset>
  if(hspi->Instance==SPI3)
 8004af4:	6822      	ldr	r2, [r4, #0]
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <HAL_SPI_MspInit+0x64>)
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d123      	bne.n	8004b44 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004afc:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8004b00:	2100      	movs	r1, #0
 8004b02:	9101      	str	r1, [sp, #4]
 8004b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b06:	4811      	ldr	r0, [pc, #68]	; (8004b4c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b10:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004b14:	9201      	str	r2, [sp, #4]
 8004b16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b18:	9102      	str	r1, [sp, #8]
 8004b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1c:	f042 0204 	orr.w	r2, r2, #4
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	9302      	str	r3, [sp, #8]
 8004b2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8004b30:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b32:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b34:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b38:	2306      	movs	r3, #6
 8004b3a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b3e:	a903      	add	r1, sp, #12
 8004b40:	f000 fcbc 	bl	80054bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004b44:	b008      	add	sp, #32
 8004b46:	bd10      	pop	{r4, pc}
 8004b48:	40003c00 	.word	0x40003c00
 8004b4c:	40020800 	.word	0x40020800

08004b50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b50:	b510      	push	{r4, lr}
 8004b52:	4604      	mov	r4, r0
 8004b54:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b56:	2214      	movs	r2, #20
 8004b58:	2100      	movs	r1, #0
 8004b5a:	a803      	add	r0, sp, #12
 8004b5c:	f002 f957 	bl	8006e0e <memset>
  if(htim_encoder->Instance==TIM1)
 8004b60:	6822      	ldr	r2, [r4, #0]
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <HAL_TIM_Encoder_MspInit+0x64>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d122      	bne.n	8004bae <HAL_TIM_Encoder_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b68:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	9101      	str	r1, [sp, #4]
 8004b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b72:	4811      	ldr	r0, [pc, #68]	; (8004bb8 <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b74:	f042 0201 	orr.w	r2, r2, #1
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
 8004b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b7c:	f002 0201 	and.w	r2, r2, #1
 8004b80:	9201      	str	r2, [sp, #4]
 8004b82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b84:	9102      	str	r1, [sp, #8]
 8004b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	9302      	str	r3, [sp, #8]
 8004b96:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ba8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004baa:	f000 fc87 	bl	80054bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004bae:	b008      	add	sp, #32
 8004bb0:	bd10      	pop	{r4, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40020000 	.word	0x40020000

08004bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc2:	2214      	movs	r2, #20
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	a803      	add	r0, sp, #12
 8004bc8:	f002 f921 	bl	8006e0e <memset>
  if(huart->Instance==USART1)
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <HAL_UART_MspInit+0x64>)
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d122      	bne.n	8004c1a <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bd4:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004bd8:	2100      	movs	r1, #0
 8004bda:	9101      	str	r1, [sp, #4]
 8004bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bde:	4811      	ldr	r0, [pc, #68]	; (8004c24 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004be0:	f042 0210 	orr.w	r2, r2, #16
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
 8004be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004be8:	f002 0210 	and.w	r2, r2, #16
 8004bec:	9201      	str	r2, [sp, #4]
 8004bee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf0:	9102      	str	r1, [sp, #8]
 8004bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf4:	f042 0202 	orr.w	r2, r2, #2
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	9302      	str	r3, [sp, #8]
 8004c02:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c04:	22c0      	movs	r2, #192	; 0xc0
 8004c06:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c08:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c0e:	2307      	movs	r3, #7
 8004c10:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c14:	a903      	add	r1, sp, #12
 8004c16:	f000 fc51 	bl	80054bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c1a:	b008      	add	sp, #32
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	bf00      	nop
 8004c20:	40011000 	.word	0x40011000
 8004c24:	40020400 	.word	0x40020400

08004c28 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c28:	4770      	bx	lr

08004c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c2a:	e7fe      	b.n	8004c2a <HardFault_Handler>

08004c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c2c:	e7fe      	b.n	8004c2c <MemManage_Handler>

08004c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c2e:	e7fe      	b.n	8004c2e <BusFault_Handler>

08004c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c30:	e7fe      	b.n	8004c30 <UsageFault_Handler>

08004c32 <SVC_Handler>:
 8004c32:	4770      	bx	lr

08004c34 <DebugMon_Handler>:
 8004c34:	4770      	bx	lr

08004c36 <PendSV_Handler>:
 8004c36:	4770      	bx	lr

08004c38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c38:	f000 ba24 	b.w	8005084 <HAL_IncTick>

08004c3c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004c3c:	4801      	ldr	r0, [pc, #4]	; (8004c44 <DMA1_Stream4_IRQHandler+0x8>)
 8004c3e:	f000 bb7f 	b.w	8005340 <HAL_DMA_IRQHandler>
 8004c42:	bf00      	nop
 8004c44:	20013ba4 	.word	0x20013ba4

08004c48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004c48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  TriggerSound();
 8004c4a:	f7fc f937 	bl	8000ebc <TriggerSound>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004c4e:	2080      	movs	r0, #128	; 0x80
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004c54:	f000 bd18 	b.w	8005688 <HAL_GPIO_EXTI_IRQHandler>

08004c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8004c5a:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <EXTI15_10_IRQHandler+0x68>)
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	049a      	lsls	r2, r3, #18
 8004c60:	d50a      	bpl.n	8004c78 <EXTI15_10_IRQHandler+0x20>
  { // SW1_A
    if (sw1bon)
 8004c62:	4918      	ldr	r1, [pc, #96]	; (8004cc4 <EXTI15_10_IRQHandler+0x6c>)
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <EXTI15_10_IRQHandler+0x70>)
 8004c66:	7808      	ldrb	r0, [r1, #0]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	b318      	cbz	r0, 8004cb4 <EXTI15_10_IRQHandler+0x5c>
    {
      sw1dir = true;
 8004c6c:	701a      	strb	r2, [r3, #0]
      sw1bon = false;
 8004c6e:	2200      	movs	r2, #0
    }
    else
    {
      sw1aon = true;
 8004c70:	700a      	strb	r2, [r1, #0]
    }
    TriggerENC1(sw1dir);
 8004c72:	7818      	ldrb	r0, [r3, #0]
 8004c74:	f7fe f830 	bl	8002cd8 <TriggerENC1>
  }
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))
 8004c78:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <EXTI15_10_IRQHandler+0x68>)
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	045b      	lsls	r3, r3, #17
 8004c7e:	d509      	bpl.n	8004c94 <EXTI15_10_IRQHandler+0x3c>
  { // SW1_B
    if (sw1aon)
 8004c80:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <EXTI15_10_IRQHandler+0x74>)
 8004c82:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <EXTI15_10_IRQHandler+0x70>)
 8004c84:	7811      	ldrb	r1, [r2, #0]
 8004c86:	b1b9      	cbz	r1, 8004cb8 <EXTI15_10_IRQHandler+0x60>
    {
      sw1dir = false;
 8004c88:	2100      	movs	r1, #0
 8004c8a:	7019      	strb	r1, [r3, #0]
      sw1aon = false;
    }
    else
    {
      sw1bon = true;
 8004c8c:	7011      	strb	r1, [r2, #0]
    }
    TriggerENC1(sw1dir);
 8004c8e:	7818      	ldrb	r0, [r3, #0]
 8004c90:	f7fe f822 	bl	8002cd8 <TriggerENC1>
  }
  TriggerSound();
 8004c94:	f7fc f912 	bl	8000ebc <TriggerSound>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004c98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c9c:	f000 fcf4 	bl	8005688 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004ca0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004ca4:	f000 fcf0 	bl	8005688 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004ca8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004cb0:	f000 bcea 	b.w	8005688 <HAL_GPIO_EXTI_IRQHandler>
      sw1aon = true;
 8004cb4:	4905      	ldr	r1, [pc, #20]	; (8004ccc <EXTI15_10_IRQHandler+0x74>)
 8004cb6:	e7db      	b.n	8004c70 <EXTI15_10_IRQHandler+0x18>
      sw1bon = true;
 8004cb8:	4a02      	ldr	r2, [pc, #8]	; (8004cc4 <EXTI15_10_IRQHandler+0x6c>)
 8004cba:	2101      	movs	r1, #1
 8004cbc:	e7e6      	b.n	8004c8c <EXTI15_10_IRQHandler+0x34>
 8004cbe:	bf00      	nop
 8004cc0:	40013c00 	.word	0x40013c00
 8004cc4:	20013ec2 	.word	0x20013ec2
 8004cc8:	20013ec1 	.word	0x20013ec1
 8004ccc:	20013ec0 	.word	0x20013ec0

08004cd0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <_sbrk+0x30>)
 8004cd2:	6819      	ldr	r1, [r3, #0]
{
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8004cd8:	b909      	cbnz	r1, 8004cde <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004cda:	490a      	ldr	r1, [pc, #40]	; (8004d04 <_sbrk+0x34>)
 8004cdc:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4909      	ldr	r1, [pc, #36]	; (8004d08 <_sbrk+0x38>)
 8004ce2:	4c0a      	ldr	r4, [pc, #40]	; (8004d0c <_sbrk+0x3c>)
 8004ce4:	4402      	add	r2, r0
 8004ce6:	1b09      	subs	r1, r1, r4
 8004ce8:	428a      	cmp	r2, r1
 8004cea:	d906      	bls.n	8004cfa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004cec:	f002 f85a 	bl	8006da4 <__errno>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004cf8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004cfa:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8004cfc:	e7fc      	b.n	8004cf8 <_sbrk+0x28>
 8004cfe:	bf00      	nop
 8004d00:	20012aac 	.word	0x20012aac
 8004d04:	20013ed0 	.word	0x20013ed0
 8004d08:	20020000 	.word	0x20020000
 8004d0c:	00000400 	.word	0x00000400

08004d10 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <SystemInit+0x18>)
 8004d12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d16:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d22:	609a      	str	r2, [r3, #8]
#endif
}
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	e000ed00 	.word	0xe000ed00

08004d2c <WM8978_Write_Reg>:
        0X0000, 0X0000, 0X0000, 0X0000, 0X0003, 0X0010, 0X0010, 0X0100,
        0X0100, 0X0002, 0X0001, 0X0001, 0X0039, 0X0039, 0X0039, 0X0039,
        0X0001, 0X0001};

uint8_t WM8978_Write_Reg(uint8_t reg, uint16_t val)
{
 8004d2c:	b530      	push	{r4, r5, lr}
    uint8_t res;
    uint8_t RegAddr;
    uint8_t RegValue;
    RegAddr = (reg << 1) | ((uint8_t)((val >> 8) & 0x01)); //reg address + data highest bit
 8004d2e:	f3c1 2300 	ubfx	r3, r1, #8, #1
{
 8004d32:	b085      	sub	sp, #20
    RegAddr = (reg << 1) | ((uint8_t)((val >> 8) & 0x01)); //reg address + data highest bit
 8004d34:	ea43 0340 	orr.w	r3, r3, r0, lsl #1

    HAL_StatusTypeDef status = HAL_OK;
    uint8_t data[2];

    //     /* Assemble 2-byte data in WM8731 format */
    data[0] = RegAddr;  // 0x0C in your example
 8004d38:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = RegValue; // MSB byte of 16bit data

    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 8004d3c:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
{
 8004d40:	4605      	mov	r5, r0
 8004d42:	460c      	mov	r4, r1
    RegValue = (uint8_t)(val & 0XFF);
 8004d44:	f88d 100d 	strb.w	r1, [sp, #13]
    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT); // data is the start pointer of our array
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	aa03      	add	r2, sp, #12
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	2134      	movs	r1, #52	; 0x34
 8004d50:	4808      	ldr	r0, [pc, #32]	; (8004d74 <WM8978_Write_Reg+0x48>)
 8004d52:	f000 fe23 	bl	800599c <HAL_I2C_Master_Transmit>
                                                                                          //     /* Check the communication status */
    if (status != HAL_OK)
 8004d56:	b138      	cbz	r0, 8004d68 <WM8978_Write_Reg+0x3c>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d5e:	4806      	ldr	r0, [pc, #24]	; (8004d78 <WM8978_Write_Reg+0x4c>)
 8004d60:	f000 fc8c 	bl	800567c <HAL_GPIO_WritePin>
        // Error handling, for example re-initialization of the I2C peripheral
        Error_Handler();
 8004d64:	f7fd fe40 	bl	80029e8 <Error_Handler>
    }

    WM8978_REGVAL[reg] = val;
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <WM8978_Write_Reg+0x50>)
    return res;
}
 8004d6a:	2000      	movs	r0, #0
    WM8978_REGVAL[reg] = val;
 8004d6c:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
}
 8004d70:	b005      	add	sp, #20
 8004d72:	bd30      	pop	{r4, r5, pc}
 8004d74:	20013a68 	.word	0x20013a68
 8004d78:	40020800 	.word	0x40020800
 8004d7c:	2000001e 	.word	0x2000001e

08004d80 <WM8978_ADDA_Cfg>:

//WM8978 DAC/ADC config
//adcen:adc enable(1)/disable(0)
//dacen:dac enable(1)/disable(0)
void WM8978_ADDA_Cfg(uint8_t dacen, uint8_t adcen)
{
 8004d80:	b538      	push	{r3, r4, r5, lr}
    return WM8978_REGVAL[reg];
 8004d82:	4c0d      	ldr	r4, [pc, #52]	; (8004db8 <WM8978_ADDA_Cfg+0x38>)
{
 8004d84:	460d      	mov	r5, r1
    return WM8978_REGVAL[reg];
 8004d86:	88e1      	ldrh	r1, [r4, #6]
    uint16_t regval;
    regval = WM8978_Read_Reg(3); //read R3
    if (dacen)
 8004d88:	b168      	cbz	r0, 8004da6 <WM8978_ADDA_Cfg+0x26>
        regval |= 3 << 0; //R3 set lowest 2 bits to 1,enable DACR&DACL
 8004d8a:	f041 0103 	orr.w	r1, r1, #3
    else
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
    WM8978_Write_Reg(3, regval);
 8004d8e:	2003      	movs	r0, #3
 8004d90:	f7ff ffcc 	bl	8004d2c <WM8978_Write_Reg>
    return WM8978_REGVAL[reg];
 8004d94:	88a1      	ldrh	r1, [r4, #4]
    regval = WM8978_Read_Reg(2); //read R2
    if (adcen)
 8004d96:	b155      	cbz	r5, 8004dae <WM8978_ADDA_Cfg+0x2e>
        regval |= 3 << 0; //R2 set lowest bits to 1, enable ADCR&ADCL
 8004d98:	f041 0103 	orr.w	r1, r1, #3
    else
        regval &= ~(3 << 0);     //R2 set lowest bits to 0, disable ADCR&ADCL.
    WM8978_Write_Reg(2, regval); //R2
 8004d9c:	2002      	movs	r0, #2
}
 8004d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WM8978_Write_Reg(2, regval); //R2
 8004da2:	f7ff bfc3 	b.w	8004d2c <WM8978_Write_Reg>
        regval &= ~(3 << 0); //R3 set lowest 2 bits to 0,disable DACR&DACL.
 8004da6:	f021 0103 	bic.w	r1, r1, #3
 8004daa:	b289      	uxth	r1, r1
 8004dac:	e7ef      	b.n	8004d8e <WM8978_ADDA_Cfg+0xe>
        regval &= ~(3 << 0);     //R2 set lowest bits to 0, disable ADCR&ADCL.
 8004dae:	f021 0103 	bic.w	r1, r1, #3
 8004db2:	b289      	uxth	r1, r1
 8004db4:	e7f2      	b.n	8004d9c <WM8978_ADDA_Cfg+0x1c>
 8004db6:	bf00      	nop
 8004db8:	2000001e 	.word	0x2000001e

08004dbc <WM8978_LINEIN_Gain>:
}

//WM8978 L2/R2(Line In)db config(L2/R2-->ADC input db)
//gain:0~7,0 means channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void WM8978_LINEIN_Gain(uint8_t gain)
{
 8004dbc:	b538      	push	{r3, r4, r5, lr}
    return WM8978_REGVAL[reg];
 8004dbe:	4d0b      	ldr	r5, [pc, #44]	; (8004dec <WM8978_LINEIN_Gain+0x30>)
    uint16_t regval;
    gain &= 0X07;
    regval = WM8978_Read_Reg(47);
    regval &= ~(7 << 4); //reset old config
 8004dc0:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    WM8978_Write_Reg(47, regval | gain << 4);
 8004dc4:	f000 0007 	and.w	r0, r0, #7
 8004dc8:	0104      	lsls	r4, r0, #4
    regval &= ~(7 << 4); //reset old config
 8004dca:	f021 0170 	bic.w	r1, r1, #112	; 0x70
    WM8978_Write_Reg(47, regval | gain << 4);
 8004dce:	4321      	orrs	r1, r4
 8004dd0:	202f      	movs	r0, #47	; 0x2f
 8004dd2:	f7ff ffab 	bl	8004d2c <WM8978_Write_Reg>
    regval = WM8978_Read_Reg(48);
    regval &= ~(7 << 4); //reset old config
 8004dd6:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
 8004dda:	f021 0170 	bic.w	r1, r1, #112	; 0x70
    WM8978_Write_Reg(48, regval | gain << 4);
 8004dde:	4321      	orrs	r1, r4
 8004de0:	2030      	movs	r0, #48	; 0x30
}
 8004de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WM8978_Write_Reg(48, regval | gain << 4);
 8004de6:	f7ff bfa1 	b.w	8004d2c <WM8978_Write_Reg>
 8004dea:	bf00      	nop
 8004dec:	2000001e 	.word	0x2000001e

08004df0 <WM8978_AUX_Gain>:
//WM8978 AUXR,AUXL(PWM audio config)db config(AUXR/L-->ADC input db)
//gain:0~7,0 channel mute,1~7,��Ӧ-12dB~6dB,3dB/Step
void WM8978_AUX_Gain(uint8_t gain)
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
    return WM8978_REGVAL[reg];
 8004df2:	4d0a      	ldr	r5, [pc, #40]	; (8004e1c <WM8978_AUX_Gain+0x2c>)
    uint16_t regval;
    gain &= 0X07;
    regval = WM8978_Read_Reg(47);
    regval &= ~(7 << 0); //reset old config
 8004df4:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    WM8978_Write_Reg(47, regval | gain << 0);
 8004df8:	f000 0407 	and.w	r4, r0, #7
    regval &= ~(7 << 0); //reset old config
 8004dfc:	f021 0107 	bic.w	r1, r1, #7
    WM8978_Write_Reg(47, regval | gain << 0);
 8004e00:	4321      	orrs	r1, r4
 8004e02:	202f      	movs	r0, #47	; 0x2f
 8004e04:	f7ff ff92 	bl	8004d2c <WM8978_Write_Reg>
    regval = WM8978_Read_Reg(48);
    regval &= ~(7 << 0); //reset old config
 8004e08:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
 8004e0c:	f021 0107 	bic.w	r1, r1, #7
    WM8978_Write_Reg(48, regval | gain << 0);
 8004e10:	4321      	orrs	r1, r4
 8004e12:	2030      	movs	r0, #48	; 0x30
}
 8004e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WM8978_Write_Reg(48, regval | gain << 0);
 8004e18:	f7ff bf88 	b.w	8004d2c <WM8978_Write_Reg>
 8004e1c:	2000001e 	.word	0x2000001e

08004e20 <WM8978_Input_Cfg>:
{
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return WM8978_REGVAL[reg];
 8004e22:	4e14      	ldr	r6, [pc, #80]	; (8004e74 <WM8978_Input_Cfg+0x54>)
{
 8004e24:	460d      	mov	r5, r1
 8004e26:	4614      	mov	r4, r2
    return WM8978_REGVAL[reg];
 8004e28:	88b1      	ldrh	r1, [r6, #4]
    if (micen)
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	b1b0      	cbz	r0, 8004e5c <WM8978_Input_Cfg+0x3c>
        regval |= 3 << 2; //open INPPGAENR,INPPGAENL(MIC��PGA�Ŵ�)
 8004e2e:	f041 010c 	orr.w	r1, r1, #12
    WM8978_Write_Reg(2, regval);
 8004e32:	2002      	movs	r0, #2
 8004e34:	f7ff ff7a 	bl	8004d2c <WM8978_Write_Reg>
    return WM8978_REGVAL[reg];
 8004e38:	f8b6 1058 	ldrh.w	r1, [r6, #88]	; 0x58
    if (micen)
 8004e3c:	b197      	cbz	r7, 8004e64 <WM8978_Input_Cfg+0x44>
        regval |= 3 << 4 | 3 << 0; //enable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 8004e3e:	f041 0133 	orr.w	r1, r1, #51	; 0x33
    WM8978_Write_Reg(44, regval);
 8004e42:	202c      	movs	r0, #44	; 0x2c
 8004e44:	f7ff ff72 	bl	8004d2c <WM8978_Write_Reg>
    if (lineinen)
 8004e48:	b185      	cbz	r5, 8004e6c <WM8978_Input_Cfg+0x4c>
        WM8978_LINEIN_Gain(5); //LINE IN 0dB
 8004e4a:	2005      	movs	r0, #5
        WM8978_LINEIN_Gain(0); //disable LINE IN
 8004e4c:	f7ff ffb6 	bl	8004dbc <WM8978_LINEIN_Gain>
    if (auxen)
 8004e50:	b174      	cbz	r4, 8004e70 <WM8978_Input_Cfg+0x50>
        WM8978_AUX_Gain(7); //AUX 6dB
 8004e52:	2007      	movs	r0, #7
}
 8004e54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        WM8978_AUX_Gain(0); //disable AUX input
 8004e58:	f7ff bfca 	b.w	8004df0 <WM8978_AUX_Gain>
        regval &= ~(3 << 2); //close INPPGAENR,INPPGAENL.
 8004e5c:	f021 010c 	bic.w	r1, r1, #12
 8004e60:	b289      	uxth	r1, r1
 8004e62:	e7e6      	b.n	8004e32 <WM8978_Input_Cfg+0x12>
        regval &= ~(3 << 4 | 3 << 0); //disable LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
 8004e64:	f021 0133 	bic.w	r1, r1, #51	; 0x33
 8004e68:	b289      	uxth	r1, r1
 8004e6a:	e7ea      	b.n	8004e42 <WM8978_Input_Cfg+0x22>
        WM8978_LINEIN_Gain(0); //disable LINE IN
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	e7ed      	b.n	8004e4c <WM8978_Input_Cfg+0x2c>
        WM8978_AUX_Gain(0); //disable AUX input
 8004e70:	4620      	mov	r0, r4
 8004e72:	e7ef      	b.n	8004e54 <WM8978_Input_Cfg+0x34>
 8004e74:	2000001e 	.word	0x2000001e

08004e78 <WM8978_Output_Cfg>:

//WM8978 output setting
//dacen:DAC output enabled(1)/disabled(0)
//bpsen:Bypass output(record,include MIC,LINE IN,AUX��) enabled(1)/disabled(0)
void WM8978_Output_Cfg(uint8_t dacen, uint8_t bpsen)
{
 8004e78:	b510      	push	{r4, lr}
    uint16_t regval = 0;
 8004e7a:	1c04      	adds	r4, r0, #0
 8004e7c:	bf18      	it	ne
 8004e7e:	2401      	movne	r4, #1
    if (dacen)
        regval |= 1 << 0; //DAC output enabled
    if (bpsen)
 8004e80:	b109      	cbz	r1, 8004e86 <WM8978_Output_Cfg+0xe>
    {
        regval |= 1 << 1; //BYPASS enabled
        regval |= 5 << 2; //0dB
 8004e82:	f044 0416 	orr.w	r4, r4, #22
    }
    WM8978_Write_Reg(50, regval);
 8004e86:	4621      	mov	r1, r4
 8004e88:	2032      	movs	r0, #50	; 0x32
 8004e8a:	f7ff ff4f 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(51, regval);
 8004e8e:	4621      	mov	r1, r4
 8004e90:	2033      	movs	r0, #51	; 0x33
}
 8004e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WM8978_Write_Reg(51, regval);
 8004e96:	f7ff bf49 	b.w	8004d2c <WM8978_Write_Reg>
	...

08004e9c <WM8978_HPvol_Set>:

//Headphone volume
void WM8978_HPvol_Set(uint8_t voll, uint8_t volr)
{
 8004e9c:	b510      	push	{r4, lr}
	WM8978_HP_Volume = voll;
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <WM8978_HPvol_Set+0x2c>)
 8004ea0:	7018      	strb	r0, [r3, #0]

    voll &= 0X3F;
    volr &= 0X3F;
    if (voll == 0)
 8004ea2:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
        voll |= 1 << 6; //volume is 0, mute on
 8004ea6:	bf08      	it	eq
 8004ea8:	2040      	moveq	r0, #64	; 0x40
    if (volr == 0)
 8004eaa:	f011 043f 	ands.w	r4, r1, #63	; 0x3f
        volr |= 1 << 6;                    //volume is 0, mute on
 8004eae:	bf08      	it	eq
 8004eb0:	2440      	moveq	r4, #64	; 0x40
    WM8978_Write_Reg(52, voll);            //R52, left channel volume
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	2034      	movs	r0, #52	; 0x34
 8004eb6:	f7ff ff39 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(53, volr | (1 << 8)); //R53, right channel volume
 8004eba:	f444 7180 	orr.w	r1, r4, #256	; 0x100
 8004ebe:	2035      	movs	r0, #53	; 0x35
}
 8004ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WM8978_Write_Reg(53, volr | (1 << 8)); //R53, right channel volume
 8004ec4:	f7ff bf32 	b.w	8004d2c <WM8978_Write_Reg>
 8004ec8:	2000001c 	.word	0x2000001c

08004ecc <WM8978_SPKvol_Set>:

//speaker volume
//voll:left channel volume(0~63)
void WM8978_SPKvol_Set(uint8_t volx)
{
 8004ecc:	b510      	push	{r4, lr}
	WM8978_SPK_Volume = volx;
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <WM8978_SPKvol_Set+0x24>)
    volx &= 0X3F;
    if (volx == 0)
 8004ed0:	f010 043f 	ands.w	r4, r0, #63	; 0x3f
        volx |= 1 << 6;                    //volume is 0, mute on
 8004ed4:	bf08      	it	eq
 8004ed6:	2440      	moveq	r4, #64	; 0x40
    WM8978_Write_Reg(54, volx);            //R54, left channel audio volume
 8004ed8:	4621      	mov	r1, r4
	WM8978_SPK_Volume = volx;
 8004eda:	7018      	strb	r0, [r3, #0]
    WM8978_Write_Reg(54, volx);            //R54, left channel audio volume
 8004edc:	2036      	movs	r0, #54	; 0x36
 8004ede:	f7ff ff25 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(55, volx | (1 << 8)); //R55, right channel audio volume
 8004ee2:	f444 7180 	orr.w	r1, r4, #256	; 0x100
 8004ee6:	2037      	movs	r0, #55	; 0x37
}
 8004ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WM8978_Write_Reg(55, volx | (1 << 8)); //R55, right channel audio volume
 8004eec:	f7ff bf1e 	b.w	8004d2c <WM8978_Write_Reg>
 8004ef0:	20000092 	.word	0x20000092

08004ef4 <WM8978_Init>:
    Res = WM8978_Write_Reg(0, 0); //soft reset WM8978
 8004ef4:	2100      	movs	r1, #0
{
 8004ef6:	b510      	push	{r4, lr}
    Res = WM8978_Write_Reg(0, 0); //soft reset WM8978
 8004ef8:	4608      	mov	r0, r1
 8004efa:	f7ff ff17 	bl	8004d2c <WM8978_Write_Reg>
    if (Res)
 8004efe:	4604      	mov	r4, r0
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d14c      	bne.n	8004f9e <WM8978_Init+0xaa>
    WM8978_Write_Reg(1, 0X1B);  //R1,MICEN 1(MIC enabled),BIASEN 1(emu on),VMIDSEL[1:0]:11(5K) R1,MICEN设置为1(MIC使能)，BIASEN设置为1(模拟工作，VMIDSEL[1:0]设置为：11（5）)
 8004f04:	211b      	movs	r1, #27
 8004f06:	2001      	movs	r0, #1
 8004f08:	f7ff ff10 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(2, 0X1B0); //R2, ROUT1,LOUT1 output enabled(headphone),BOOSTENR,BOOSTENL enabled.
 8004f0c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004f10:	2002      	movs	r0, #2
 8004f12:	f7ff ff0b 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(3, 0X6C);  //R3, LOUT2,ROUT2 output enabled(speaker on),RMIX,LMIX enabled
 8004f16:	216c      	movs	r1, #108	; 0x6c
 8004f18:	2003      	movs	r0, #3
 8004f1a:	f7ff ff07 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(6, 0); //R6, MCLK from out
 8004f1e:	4621      	mov	r1, r4
 8004f20:	2006      	movs	r0, #6
 8004f22:	f7ff ff03 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(43, 1 << 4); //R43,INVROUT2 inverted, drive speaker
 8004f26:	2110      	movs	r1, #16
 8004f28:	202b      	movs	r0, #43	; 0x2b
 8004f2a:	f7ff feff 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(47, 1 << 8); //R47,PGABOOSTL,left MIC got 20 db
 8004f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f32:	202f      	movs	r0, #47	; 0x2f
 8004f34:	f7ff fefa 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(48, 1 << 8); //R48,PGABOOSTR, right MIC got 20 db
 8004f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f3c:	2030      	movs	r0, #48	; 0x30
 8004f3e:	f7ff fef5 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(49, 1 << 1); //R49,TSDEN, open hot protecting
 8004f42:	2102      	movs	r1, #2
 8004f44:	2031      	movs	r0, #49	; 0x31
 8004f46:	f7ff fef1 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(10, 1 << 3); //R10,SOFTMUTE closed,128x sample rate, best SNR
 8004f4a:	2108      	movs	r1, #8
 8004f4c:	200a      	movs	r0, #10
 8004f4e:	f7ff feed 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_Write_Reg(14, 1 << 3); //R14,ADC 128x sample rate
 8004f52:	2108      	movs	r1, #8
 8004f54:	200e      	movs	r0, #14
 8004f56:	f7ff fee9 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_ADDA_Cfg(1, 1);     //open DAC
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	f7ff ff0f 	bl	8004d80 <WM8978_ADDA_Cfg>
    WM8978_Input_Cfg(1, 0, 0); //close input channel
 8004f62:	4622      	mov	r2, r4
 8004f64:	4621      	mov	r1, r4
 8004f66:	2001      	movs	r0, #1
 8004f68:	f7ff ff5a 	bl	8004e20 <WM8978_Input_Cfg>
    WM8978_Output_Cfg(1, 0);   //open DAC output
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	2001      	movs	r0, #1
 8004f70:	f7ff ff82 	bl	8004e78 <WM8978_Output_Cfg>
//len:0,16bist;1,20bits;2,24bits;3,32bits;
void WM8978_I2S_Cfg(uint8_t fmt, uint8_t len)
{
    fmt &= 0x02;
    len &= 0x03;
    WM8978_Write_Reg(4, (fmt << 3) | (len << 5)); //R4,WM8978 working mode
 8004f74:	2110      	movs	r1, #16
 8004f76:	2004      	movs	r0, #4
 8004f78:	f7ff fed8 	bl	8004d2c <WM8978_Write_Reg>
    WM8978_HPvol_Set(WM8978_HP_Volume, WM8978_HP_Volume);
 8004f7c:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <WM8978_Init+0xb0>)
 8004f7e:	7819      	ldrb	r1, [r3, #0]
 8004f80:	4608      	mov	r0, r1
 8004f82:	f7ff ff8b 	bl	8004e9c <WM8978_HPvol_Set>
    WM8978_SPKvol_Set(WM8978_SPK_Volume);
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <WM8978_Init+0xb4>)
 8004f88:	7818      	ldrb	r0, [r3, #0]
 8004f8a:	f7ff ff9f 	bl	8004ecc <WM8978_SPKvol_Set>
    HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)&audiobuff[0], DMA_MAX((2 * BUFF_LEN) / AUDIODATA_SIZE)); // size must be in bytes
 8004f8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004f92:	4906      	ldr	r1, [pc, #24]	; (8004fac <WM8978_Init+0xb8>)
 8004f94:	4806      	ldr	r0, [pc, #24]	; (8004fb0 <WM8978_Init+0xbc>)
 8004f96:	f000 fe6d 	bl	8005c74 <HAL_I2S_Transmit_DMA>
}
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	bd10      	pop	{r4, pc}
        return 1; //reset failed, WM8978 exception
 8004f9e:	2401      	movs	r4, #1
 8004fa0:	e7fb      	b.n	8004f9a <WM8978_Init+0xa6>
 8004fa2:	bf00      	nop
 8004fa4:	2000001c 	.word	0x2000001c
 8004fa8:	20000092 	.word	0x20000092
 8004fac:	20012ac2 	.word	0x20012ac2
 8004fb0:	20013c04 	.word	0x20013c04

08004fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004fb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fba:	e003      	b.n	8004fc4 <LoopCopyDataInit>

08004fbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004fbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fc2:	3104      	adds	r1, #4

08004fc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fc4:	480b      	ldr	r0, [pc, #44]	; (8004ff4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004fc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004fcc:	d3f6      	bcc.n	8004fbc <CopyDataInit>
  ldr  r2, =_sbss
 8004fce:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004fd0:	e002      	b.n	8004fd8 <LoopFillZerobss>

08004fd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004fd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004fd4:	f842 3b04 	str.w	r3, [r2], #4

08004fd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004fda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004fdc:	d3f9      	bcc.n	8004fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004fde:	f7ff fe97 	bl	8004d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fe2:	f001 fee5 	bl	8006db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fe6:	f7fd fbad 	bl	8002744 <main>
  bx  lr    
 8004fea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004fec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ff0:	08017bd8 	.word	0x08017bd8
  ldr  r0, =_sdata
 8004ff4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ff8:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8004ffc:	20003fcc 	.word	0x20003fcc
  ldr  r3, = _ebss
 8005000:	20013ecc 	.word	0x20013ecc

08005004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005004:	e7fe      	b.n	8005004 <ADC_IRQHandler>
	...

08005008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005008:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800500a:	4a0e      	ldr	r2, [pc, #56]	; (8005044 <HAL_InitTick+0x3c>)
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_InitTick+0x40>)
{
 800500e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005010:	7818      	ldrb	r0, [r3, #0]
 8005012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005016:	fbb3 f3f0 	udiv	r3, r3, r0
 800501a:	6810      	ldr	r0, [r2, #0]
 800501c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005020:	f000 f8aa 	bl	8005178 <HAL_SYSTICK_Config>
 8005024:	4604      	mov	r4, r0
 8005026:	b958      	cbnz	r0, 8005040 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005028:	2d0f      	cmp	r5, #15
 800502a:	d809      	bhi.n	8005040 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800502c:	4602      	mov	r2, r0
 800502e:	4629      	mov	r1, r5
 8005030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005034:	f000 f85e 	bl	80050f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <HAL_InitTick+0x44>)
 800503a:	4620      	mov	r0, r4
 800503c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800503e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005040:	2001      	movs	r0, #1
 8005042:	e7fc      	b.n	800503e <HAL_InitTick+0x36>
 8005044:	20000018 	.word	0x20000018
 8005048:	20000093 	.word	0x20000093
 800504c:	20000094 	.word	0x20000094

08005050 <HAL_Init>:
{
 8005050:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_Init+0x30>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005062:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800506c:	2003      	movs	r0, #3
 800506e:	f000 f82f 	bl	80050d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005072:	2000      	movs	r0, #0
 8005074:	f7ff ffc8 	bl	8005008 <HAL_InitTick>
  HAL_MspInit();
 8005078:	f7ff fc44 	bl	8004904 <HAL_MspInit>
}
 800507c:	2000      	movs	r0, #0
 800507e:	bd08      	pop	{r3, pc}
 8005080:	40023c00 	.word	0x40023c00

08005084 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005084:	4a03      	ldr	r2, [pc, #12]	; (8005094 <HAL_IncTick+0x10>)
 8005086:	4b04      	ldr	r3, [pc, #16]	; (8005098 <HAL_IncTick+0x14>)
 8005088:	6811      	ldr	r1, [r2, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	440b      	add	r3, r1
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20013ec4 	.word	0x20013ec4
 8005098:	20000093 	.word	0x20000093

0800509c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800509c:	4b01      	ldr	r3, [pc, #4]	; (80050a4 <HAL_GetTick+0x8>)
 800509e:	6818      	ldr	r0, [r3, #0]
}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20013ec4 	.word	0x20013ec4

080050a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7ff fff6 	bl	800509c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050b0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80050b2:	bf1c      	itt	ne
 80050b4:	4b05      	ldrne	r3, [pc, #20]	; (80050cc <HAL_Delay+0x24>)
 80050b6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80050b8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80050ba:	bf18      	it	ne
 80050bc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050be:	f7ff ffed 	bl	800509c <HAL_GetTick>
 80050c2:	1b40      	subs	r0, r0, r5
 80050c4:	42a0      	cmp	r0, r4
 80050c6:	d3fa      	bcc.n	80050be <HAL_Delay+0x16>
  {
  }
}
 80050c8:	bd38      	pop	{r3, r4, r5, pc}
 80050ca:	bf00      	nop
 80050cc:	20000093 	.word	0x20000093

080050d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d0:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80050d2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050e0:	0200      	lsls	r0, r0, #8
 80050e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80050ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80050ec:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80050ee:	4770      	bx	lr
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050f4:	4b17      	ldr	r3, [pc, #92]	; (8005154 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050f6:	b570      	push	{r4, r5, r6, lr}
 80050f8:	68dc      	ldr	r4, [r3, #12]
 80050fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050fe:	f1c4 0507 	rsb	r5, r4, #7
 8005102:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005104:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005108:	bf28      	it	cs
 800510a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800510c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005110:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005112:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005116:	bf8c      	ite	hi
 8005118:	3c03      	subhi	r4, #3
 800511a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800511c:	ea21 0303 	bic.w	r3, r1, r3
 8005120:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005122:	fa06 f404 	lsl.w	r4, r6, r4
 8005126:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800512a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800512c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005130:	bfa8      	it	ge
 8005132:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8005136:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800513a:	bfbc      	itt	lt
 800513c:	f000 000f 	andlt.w	r0, r0, #15
 8005140:	4a05      	ldrlt	r2, [pc, #20]	; (8005158 <HAL_NVIC_SetPriority+0x64>)
 8005142:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005144:	bfaa      	itet	ge
 8005146:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005150:	bd70      	pop	{r4, r5, r6, pc}
 8005152:	bf00      	nop
 8005154:	e000ed00 	.word	0xe000ed00
 8005158:	e000ed14 	.word	0xe000ed14

0800515c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800515c:	2800      	cmp	r0, #0
 800515e:	db08      	blt.n	8005172 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005160:	0942      	lsrs	r2, r0, #5
 8005162:	2301      	movs	r3, #1
 8005164:	f000 001f 	and.w	r0, r0, #31
 8005168:	fa03 f000 	lsl.w	r0, r3, r0
 800516c:	4b01      	ldr	r3, [pc, #4]	; (8005174 <HAL_NVIC_EnableIRQ+0x18>)
 800516e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005172:	4770      	bx	lr
 8005174:	e000e100 	.word	0xe000e100

08005178 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005178:	3801      	subs	r0, #1
 800517a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800517e:	d20a      	bcs.n	8005196 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005182:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005184:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005186:	21f0      	movs	r1, #240	; 0xf0
 8005188:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800518c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800518e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005190:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005196:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	e000e010 	.word	0xe000e010
 80051a0:	e000ed00 	.word	0xe000ed00

080051a4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051a4:	6803      	ldr	r3, [r0, #0]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051ac:	f023 0303 	bic.w	r3, r3, #3
 80051b0:	2118      	movs	r1, #24
 80051b2:	3a10      	subs	r2, #16
 80051b4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051b8:	4904      	ldr	r1, [pc, #16]	; (80051cc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80051ba:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051bc:	bf88      	it	hi
 80051be:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051c0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051c2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051c4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80051c6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	0801778c 	.word	0x0801778c

080051d0 <HAL_DMA_Init>:
{
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80051d4:	f7ff ff62 	bl	800509c <HAL_GetTick>
 80051d8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80051da:	2c00      	cmp	r4, #0
 80051dc:	d071      	beq.n	80052c2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80051de:	2300      	movs	r3, #0
 80051e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80051e4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80051e6:	2302      	movs	r3, #2
 80051e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80051ec:	6813      	ldr	r3, [r2, #0]
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f4:	6821      	ldr	r1, [r4, #0]
 80051f6:	680b      	ldr	r3, [r1, #0]
 80051f8:	07d8      	lsls	r0, r3, #31
 80051fa:	d43c      	bmi.n	8005276 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80051fc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051fe:	4d32      	ldr	r5, [pc, #200]	; (80052c8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005200:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005202:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005204:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8005208:	4313      	orrs	r3, r2
 800520a:	68e2      	ldr	r2, [r4, #12]
 800520c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520e:	6922      	ldr	r2, [r4, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	6962      	ldr	r2, [r4, #20]
 8005214:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005216:	69e2      	ldr	r2, [r4, #28]
 8005218:	4303      	orrs	r3, r0
 800521a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800521c:	6a22      	ldr	r2, [r4, #32]
 800521e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005220:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005222:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005224:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005228:	bf02      	ittt	eq
 800522a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800522e:	4335      	orreq	r5, r6
 8005230:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8005232:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8005234:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005236:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005238:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800523c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005240:	d10b      	bne.n	800525a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8005242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005244:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8005246:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005248:	b13d      	cbz	r5, 800525a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800524a:	b9f8      	cbnz	r0, 800528c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800524c:	2a01      	cmp	r2, #1
 800524e:	d02d      	beq.n	80052ac <HAL_DMA_Init+0xdc>
 8005250:	d301      	bcc.n	8005256 <HAL_DMA_Init+0x86>
 8005252:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005254:	d101      	bne.n	800525a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005256:	01ea      	lsls	r2, r5, #7
 8005258:	d42b      	bmi.n	80052b2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800525a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800525c:	4620      	mov	r0, r4
 800525e:	f7ff ffa1 	bl	80051a4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005262:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005264:	233f      	movs	r3, #63	; 0x3f
 8005266:	4093      	lsls	r3, r2
 8005268:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800526a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800526c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800526e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005270:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005274:	e009      	b.n	800528a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005276:	f7ff ff11 	bl	800509c <HAL_GetTick>
 800527a:	1b40      	subs	r0, r0, r5
 800527c:	2805      	cmp	r0, #5
 800527e:	d9b9      	bls.n	80051f4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005280:	2320      	movs	r3, #32
 8005282:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005284:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8005286:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800528a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800528c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005290:	d113      	bne.n	80052ba <HAL_DMA_Init+0xea>
    switch (tmp)
 8005292:	2a03      	cmp	r2, #3
 8005294:	d8e1      	bhi.n	800525a <HAL_DMA_Init+0x8a>
 8005296:	a001      	add	r0, pc, #4	; (adr r0, 800529c <HAL_DMA_Init+0xcc>)
 8005298:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800529c:	080052b3 	.word	0x080052b3
 80052a0:	08005257 	.word	0x08005257
 80052a4:	080052b3 	.word	0x080052b3
 80052a8:	080052ad 	.word	0x080052ad
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052ac:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80052b0:	d1d3      	bne.n	800525a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052b2:	2340      	movs	r3, #64	; 0x40
 80052b4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80052b6:	2001      	movs	r0, #1
 80052b8:	e7e5      	b.n	8005286 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80052ba:	2a02      	cmp	r2, #2
 80052bc:	d9f9      	bls.n	80052b2 <HAL_DMA_Init+0xe2>
 80052be:	2a03      	cmp	r2, #3
 80052c0:	e7c8      	b.n	8005254 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80052c2:	2001      	movs	r0, #1
 80052c4:	e7e1      	b.n	800528a <HAL_DMA_Init+0xba>
 80052c6:	bf00      	nop
 80052c8:	f010803f 	.word	0xf010803f

080052cc <HAL_DMA_Start_IT>:
{
 80052cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80052ce:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80052d2:	2c01      	cmp	r4, #1
 80052d4:	d032      	beq.n	800533c <HAL_DMA_Start_IT+0x70>
 80052d6:	2401      	movs	r4, #1
 80052d8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80052dc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80052e2:	2c01      	cmp	r4, #1
 80052e4:	f04f 0500 	mov.w	r5, #0
 80052e8:	f04f 0402 	mov.w	r4, #2
 80052ec:	d124      	bne.n	8005338 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ee:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052f2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052f6:	6825      	ldr	r5, [r4, #0]
 80052f8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80052fc:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80052fe:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005300:	6883      	ldr	r3, [r0, #8]
 8005302:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8005304:	bf0e      	itee	eq
 8005306:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8005308:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800530a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800530c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800530e:	bf08      	it	eq
 8005310:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005312:	233f      	movs	r3, #63	; 0x3f
 8005314:	4093      	lsls	r3, r2
 8005316:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f043 0316 	orr.w	r3, r3, #22
 800531e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005320:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005322:	b11b      	cbz	r3, 800532c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	f043 0308 	orr.w	r3, r3, #8
 800532a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2000      	movs	r0, #0
}
 8005336:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8005338:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800533c:	2002      	movs	r0, #2
 800533e:	e7fa      	b.n	8005336 <HAL_DMA_Start_IT+0x6a>

08005340 <HAL_DMA_IRQHandler>:
{
 8005340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005346:	4b5c      	ldr	r3, [pc, #368]	; (80054b8 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005348:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800534a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800534c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800534e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005350:	2208      	movs	r2, #8
 8005352:	409a      	lsls	r2, r3
 8005354:	4232      	tst	r2, r6
{
 8005356:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005358:	d00c      	beq.n	8005374 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800535a:	6801      	ldr	r1, [r0, #0]
 800535c:	6808      	ldr	r0, [r1, #0]
 800535e:	0740      	lsls	r0, r0, #29
 8005360:	d508      	bpl.n	8005374 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005362:	6808      	ldr	r0, [r1, #0]
 8005364:	f020 0004 	bic.w	r0, r0, #4
 8005368:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800536a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800536c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005374:	2201      	movs	r2, #1
 8005376:	409a      	lsls	r2, r3
 8005378:	4232      	tst	r2, r6
 800537a:	d008      	beq.n	800538e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800537c:	6821      	ldr	r1, [r4, #0]
 800537e:	6949      	ldr	r1, [r1, #20]
 8005380:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005382:	bf41      	itttt	mi
 8005384:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005386:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8005388:	f042 0202 	orrmi.w	r2, r2, #2
 800538c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800538e:	2204      	movs	r2, #4
 8005390:	409a      	lsls	r2, r3
 8005392:	4232      	tst	r2, r6
 8005394:	d008      	beq.n	80053a8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005396:	6821      	ldr	r1, [r4, #0]
 8005398:	6809      	ldr	r1, [r1, #0]
 800539a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800539c:	bf41      	itttt	mi
 800539e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053a0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80053a2:	f042 0204 	orrmi.w	r2, r2, #4
 80053a6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053a8:	2210      	movs	r2, #16
 80053aa:	409a      	lsls	r2, r3
 80053ac:	4232      	tst	r2, r6
 80053ae:	d010      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	0709      	lsls	r1, r1, #28
 80053b6:	d50c      	bpl.n	80053d2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053b8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	0350      	lsls	r0, r2, #13
 80053be:	d537      	bpl.n	8005430 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	0319      	lsls	r1, r3, #12
 80053c4:	d401      	bmi.n	80053ca <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80053c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c8:	e000      	b.n	80053cc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80053cc:	b10b      	cbz	r3, 80053d2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80053ce:	4620      	mov	r0, r4
 80053d0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80053d4:	2220      	movs	r2, #32
 80053d6:	408a      	lsls	r2, r1
 80053d8:	4232      	tst	r2, r6
 80053da:	d03a      	beq.n	8005452 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	06c6      	lsls	r6, r0, #27
 80053e2:	d536      	bpl.n	8005452 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053e4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053e6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80053ea:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ec:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053ee:	d127      	bne.n	8005440 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053f0:	f022 0216 	bic.w	r2, r2, #22
 80053f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005400:	b90a      	cbnz	r2, 8005406 <HAL_DMA_IRQHandler+0xc6>
 8005402:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005404:	b11a      	cbz	r2, 800540e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	f022 0208 	bic.w	r2, r2, #8
 800540c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800540e:	233f      	movs	r3, #63	; 0x3f
 8005410:	408b      	lsls	r3, r1
 8005412:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8005414:	2300      	movs	r3, #0
 8005416:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800541a:	2301      	movs	r3, #1
 800541c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005420:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8005422:	2b00      	cmp	r3, #0
 8005424:	d045      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8005426:	4620      	mov	r0, r4
}
 8005428:	b003      	add	sp, #12
 800542a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800542e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005434:	bf5e      	ittt	pl
 8005436:	681a      	ldrpl	r2, [r3, #0]
 8005438:	f022 0208 	bicpl.w	r2, r2, #8
 800543c:	601a      	strpl	r2, [r3, #0]
 800543e:	e7c2      	b.n	80053c6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005440:	0350      	lsls	r0, r2, #13
 8005442:	d527      	bpl.n	8005494 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	0319      	lsls	r1, r3, #12
 8005448:	d431      	bmi.n	80054ae <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800544a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800544c:	b10b      	cbz	r3, 8005452 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800544e:	4620      	mov	r0, r4
 8005450:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005452:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005454:	b36b      	cbz	r3, 80054b2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005456:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005458:	07da      	lsls	r2, r3, #31
 800545a:	d519      	bpl.n	8005490 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 800545c:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800545e:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005460:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005464:	6813      	ldr	r3, [r2, #0]
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800546c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005470:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8005474:	9b01      	ldr	r3, [sp, #4]
 8005476:	3301      	adds	r3, #1
 8005478:	42bb      	cmp	r3, r7
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	d802      	bhi.n	8005484 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	07db      	lsls	r3, r3, #31
 8005482:	d4f7      	bmi.n	8005474 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8005484:	2300      	movs	r3, #0
 8005486:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800548a:	2301      	movs	r3, #1
 800548c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005490:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005492:	e7c6      	b.n	8005422 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800549a:	d108      	bne.n	80054ae <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800549c:	6819      	ldr	r1, [r3, #0]
 800549e:	f021 0110 	bic.w	r1, r1, #16
 80054a2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80054a4:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80054a6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80054aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80054ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054b0:	e7cc      	b.n	800544c <HAL_DMA_IRQHandler+0x10c>
}
 80054b2:	b003      	add	sp, #12
 80054b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000018 	.word	0x20000018

080054bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054c2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005674 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054c8:	4a68      	ldr	r2, [pc, #416]	; (800566c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054ca:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8005678 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054ce:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054d0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80054d2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054d4:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80054d6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054d8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80054da:	42ac      	cmp	r4, r5
 80054dc:	f040 80b0 	bne.w	8005640 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054e0:	684c      	ldr	r4, [r1, #4]
 80054e2:	f024 0c10 	bic.w	ip, r4, #16
 80054e6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80054ea:	2603      	movs	r6, #3
 80054ec:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 80054f0:	fa06 f60e 	lsl.w	r6, r6, lr
 80054f4:	2f01      	cmp	r7, #1
 80054f6:	ea6f 0606 	mvn.w	r6, r6
 80054fa:	d811      	bhi.n	8005520 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 80054fc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054fe:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005502:	68cf      	ldr	r7, [r1, #12]
 8005504:	fa07 f70e 	lsl.w	r7, r7, lr
 8005508:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800550c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800550e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005510:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005514:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8005518:	409f      	lsls	r7, r3
 800551a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800551e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8005520:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005522:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005526:	688f      	ldr	r7, [r1, #8]
 8005528:	fa07 f70e 	lsl.w	r7, r7, lr
 800552c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005530:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8005534:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005536:	d116      	bne.n	8005566 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8005538:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800553c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005540:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005544:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005548:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800554c:	f04f 0c0f 	mov.w	ip, #15
 8005550:	fa0c fc0b 	lsl.w	ip, ip, fp
 8005554:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005558:	690f      	ldr	r7, [r1, #16]
 800555a:	fa07 f70b 	lsl.w	r7, r7, fp
 800555e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8005562:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8005566:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005568:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800556a:	f004 0703 	and.w	r7, r4, #3
 800556e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8005572:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8005576:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005578:	00e6      	lsls	r6, r4, #3
 800557a:	d561      	bpl.n	8005640 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800557c:	f04f 0b00 	mov.w	fp, #0
 8005580:	f8cd b00c 	str.w	fp, [sp, #12]
 8005584:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005588:	4e39      	ldr	r6, [pc, #228]	; (8005670 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800558a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800558e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8005592:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8005596:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800559a:	9703      	str	r7, [sp, #12]
 800559c:	9f03      	ldr	r7, [sp, #12]
 800559e:	f023 0703 	bic.w	r7, r3, #3
 80055a2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80055a6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055aa:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80055ae:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80055b6:	f04f 0c0f 	mov.w	ip, #15
 80055ba:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055be:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055c0:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055c4:	d043      	beq.n	800564e <HAL_GPIO_Init+0x192>
 80055c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055ca:	42b0      	cmp	r0, r6
 80055cc:	d041      	beq.n	8005652 <HAL_GPIO_Init+0x196>
 80055ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055d2:	42b0      	cmp	r0, r6
 80055d4:	d03f      	beq.n	8005656 <HAL_GPIO_Init+0x19a>
 80055d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055da:	42b0      	cmp	r0, r6
 80055dc:	d03d      	beq.n	800565a <HAL_GPIO_Init+0x19e>
 80055de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055e2:	42b0      	cmp	r0, r6
 80055e4:	d03b      	beq.n	800565e <HAL_GPIO_Init+0x1a2>
 80055e6:	4548      	cmp	r0, r9
 80055e8:	d03b      	beq.n	8005662 <HAL_GPIO_Init+0x1a6>
 80055ea:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80055ee:	42b0      	cmp	r0, r6
 80055f0:	d039      	beq.n	8005666 <HAL_GPIO_Init+0x1aa>
 80055f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055f6:	42b0      	cmp	r0, r6
 80055f8:	bf14      	ite	ne
 80055fa:	2608      	movne	r6, #8
 80055fc:	2607      	moveq	r6, #7
 80055fe:	fa06 f60e 	lsl.w	r6, r6, lr
 8005602:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005606:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8005608:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800560a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800560c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8005610:	bf0c      	ite	eq
 8005612:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005614:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8005616:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8005618:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800561a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800561e:	bf0c      	ite	eq
 8005620:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005622:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8005624:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005626:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005628:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800562c:	bf0c      	ite	eq
 800562e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005630:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8005632:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8005634:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005636:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8005638:	bf54      	ite	pl
 800563a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800563c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800563e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005640:	3301      	adds	r3, #1
 8005642:	2b10      	cmp	r3, #16
 8005644:	f47f af45 	bne.w	80054d2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8005648:	b005      	add	sp, #20
 800564a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800564e:	465e      	mov	r6, fp
 8005650:	e7d5      	b.n	80055fe <HAL_GPIO_Init+0x142>
 8005652:	2601      	movs	r6, #1
 8005654:	e7d3      	b.n	80055fe <HAL_GPIO_Init+0x142>
 8005656:	2602      	movs	r6, #2
 8005658:	e7d1      	b.n	80055fe <HAL_GPIO_Init+0x142>
 800565a:	2603      	movs	r6, #3
 800565c:	e7cf      	b.n	80055fe <HAL_GPIO_Init+0x142>
 800565e:	2604      	movs	r6, #4
 8005660:	e7cd      	b.n	80055fe <HAL_GPIO_Init+0x142>
 8005662:	2605      	movs	r6, #5
 8005664:	e7cb      	b.n	80055fe <HAL_GPIO_Init+0x142>
 8005666:	2606      	movs	r6, #6
 8005668:	e7c9      	b.n	80055fe <HAL_GPIO_Init+0x142>
 800566a:	bf00      	nop
 800566c:	40013c00 	.word	0x40013c00
 8005670:	40020000 	.word	0x40020000
 8005674:	40023800 	.word	0x40023800
 8005678:	40021400 	.word	0x40021400

0800567c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800567c:	b10a      	cbz	r2, 8005682 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800567e:	6181      	str	r1, [r0, #24]
  }
}
 8005680:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005682:	0409      	lsls	r1, r1, #16
 8005684:	e7fb      	b.n	800567e <HAL_GPIO_WritePin+0x2>

08005686 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005686:	4770      	bx	lr

08005688 <HAL_GPIO_EXTI_IRQHandler>:
{
 8005688:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	4201      	tst	r1, r0
 8005690:	d002      	beq.n	8005698 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005692:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005694:	f7ff fff7 	bl	8005686 <HAL_GPIO_EXTI_Callback>
}
 8005698:	bd08      	pop	{r3, pc}
 800569a:	bf00      	nop
 800569c:	40013c00 	.word	0x40013c00

080056a0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056a0:	6801      	ldr	r1, [r0, #0]
 80056a2:	694b      	ldr	r3, [r1, #20]
 80056a4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	d010      	beq.n	80056d0 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ae:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80056b2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80056b4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80056b6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056bc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056c0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056c6:	f043 0304 	orr.w	r3, r3, #4
 80056ca:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80056cc:	2001      	movs	r0, #1
 80056ce:	4770      	bx	lr
  }
  return HAL_OK;
 80056d0:	4618      	mov	r0, r3
}
 80056d2:	4770      	bx	lr

080056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80056d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d8:	4604      	mov	r4, r0
 80056da:	4616      	mov	r6, r2
 80056dc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056de:	b28f      	uxth	r7, r1
 80056e0:	6825      	ldr	r5, [r4, #0]
 80056e2:	6968      	ldr	r0, [r5, #20]
 80056e4:	ea37 0000 	bics.w	r0, r7, r0
 80056e8:	d017      	beq.n	800571a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ea:	696b      	ldr	r3, [r5, #20]
 80056ec:	055a      	lsls	r2, r3, #21
 80056ee:	d516      	bpl.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056f6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80056fc:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80056fe:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005700:	2300      	movs	r3, #0
 8005702:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005704:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005708:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800570c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800570e:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005712:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005714:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005718:	2001      	movs	r0, #1
}
 800571a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800571e:	1c73      	adds	r3, r6, #1
 8005720:	d0df      	beq.n	80056e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7ff fcbb 	bl	800509c <HAL_GetTick>
 8005726:	eba0 0008 	sub.w	r0, r0, r8
 800572a:	42b0      	cmp	r0, r6
 800572c:	d801      	bhi.n	8005732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 800572e:	2e00      	cmp	r6, #0
 8005730:	d1d6      	bne.n	80056e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005732:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005734:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005736:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005738:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005740:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005742:	f042 0220 	orr.w	r2, r2, #32
 8005746:	e7e4      	b.n	8005712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08005748 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	4604      	mov	r4, r0
 800574c:	460d      	mov	r5, r1
 800574e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	075b      	lsls	r3, r3, #29
 8005756:	d501      	bpl.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005758:	2000      	movs	r0, #0
}
 800575a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800575c:	4620      	mov	r0, r4
 800575e:	f7ff ff9f 	bl	80056a0 <I2C_IsAcknowledgeFailed>
 8005762:	b9a8      	cbnz	r0, 8005790 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005764:	1c6a      	adds	r2, r5, #1
 8005766:	d0f3      	beq.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005768:	f7ff fc98 	bl	800509c <HAL_GetTick>
 800576c:	1b80      	subs	r0, r0, r6
 800576e:	42a8      	cmp	r0, r5
 8005770:	d801      	bhi.n	8005776 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005772:	2d00      	cmp	r5, #0
 8005774:	d1ec      	bne.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005776:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005778:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800577a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800577c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005780:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005784:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005786:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800578a:	f042 0220 	orr.w	r2, r2, #32
 800578e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005790:	2001      	movs	r0, #1
 8005792:	e7e2      	b.n	800575a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005794 <I2C_WaitOnFlagUntilTimeout>:
{
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	9e08      	ldr	r6, [sp, #32]
 800579a:	4604      	mov	r4, r0
 800579c:	4690      	mov	r8, r2
 800579e:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057a0:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80057a4:	b28d      	uxth	r5, r1
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	f1b9 0f01 	cmp.w	r9, #1
 80057ac:	bf0c      	ite	eq
 80057ae:	694b      	ldreq	r3, [r1, #20]
 80057b0:	698b      	ldrne	r3, [r1, #24]
 80057b2:	ea35 0303 	bics.w	r3, r5, r3
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	4598      	cmp	r8, r3
 80057be:	d001      	beq.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80057c0:	2000      	movs	r0, #0
 80057c2:	e016      	b.n	80057f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80057c4:	1c7b      	adds	r3, r7, #1
 80057c6:	d0ef      	beq.n	80057a8 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c8:	f7ff fc68 	bl	800509c <HAL_GetTick>
 80057cc:	1b80      	subs	r0, r0, r6
 80057ce:	42b8      	cmp	r0, r7
 80057d0:	d801      	bhi.n	80057d6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80057d2:	2f00      	cmp	r7, #0
 80057d4:	d1e7      	bne.n	80057a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057d6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80057d8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057da:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80057e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057ea:	f042 0220 	orr.w	r2, r2, #32
 80057ee:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80057f0:	2001      	movs	r0, #1
}
 80057f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080057f6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	460d      	mov	r5, r1
 80057fc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	061b      	lsls	r3, r3, #24
 8005804:	d501      	bpl.n	800580a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005806:	2000      	movs	r0, #0
}
 8005808:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800580a:	4620      	mov	r0, r4
 800580c:	f7ff ff48 	bl	80056a0 <I2C_IsAcknowledgeFailed>
 8005810:	b9a8      	cbnz	r0, 800583e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005812:	1c6a      	adds	r2, r5, #1
 8005814:	d0f3      	beq.n	80057fe <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005816:	f7ff fc41 	bl	800509c <HAL_GetTick>
 800581a:	1b80      	subs	r0, r0, r6
 800581c:	42a8      	cmp	r0, r5
 800581e:	d801      	bhi.n	8005824 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005820:	2d00      	cmp	r5, #0
 8005822:	d1ec      	bne.n	80057fe <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005824:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005826:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005828:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800582a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800582e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005832:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005834:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005838:	f042 0220 	orr.w	r2, r2, #32
 800583c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800583e:	2001      	movs	r0, #1
 8005840:	e7e2      	b.n	8005808 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08005844 <HAL_I2C_Init>:
{
 8005844:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005846:	4604      	mov	r4, r0
 8005848:	b908      	cbnz	r0, 800584e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800584a:	2001      	movs	r0, #1
}
 800584c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800584e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005852:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005856:	b91b      	cbnz	r3, 8005860 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005858:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800585c:	f7ff f86e 	bl	800493c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005860:	2324      	movs	r3, #36	; 0x24
 8005862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800587e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005880:	f000 fe90 	bl	80065a4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	4a41      	ldr	r2, [pc, #260]	; (800598c <HAL_I2C_Init+0x148>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d84d      	bhi.n	8005928 <HAL_I2C_Init+0xe4>
 800588c:	4a40      	ldr	r2, [pc, #256]	; (8005990 <HAL_I2C_Init+0x14c>)
 800588e:	4290      	cmp	r0, r2
 8005890:	d9db      	bls.n	800584a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005892:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005894:	493f      	ldr	r1, [pc, #252]	; (8005994 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005896:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005898:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800589c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80058a0:	430d      	orrs	r5, r1
 80058a2:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058a4:	6a15      	ldr	r5, [r2, #32]
 80058a6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80058aa:	3101      	adds	r1, #1
 80058ac:	4329      	orrs	r1, r5
 80058ae:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058b0:	69d1      	ldr	r1, [r2, #28]
 80058b2:	4d36      	ldr	r5, [pc, #216]	; (800598c <HAL_I2C_Init+0x148>)
 80058b4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80058be:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80058c2:	d848      	bhi.n	8005956 <HAL_I2C_Init+0x112>
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	bf38      	it	cc
 80058d4:	2304      	movcc	r3, #4
 80058d6:	430b      	orrs	r3, r1
 80058d8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058da:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80058de:	6811      	ldr	r1, [r2, #0]
 80058e0:	4303      	orrs	r3, r0
 80058e2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80058e6:	430b      	orrs	r3, r1
 80058e8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058ea:	6891      	ldr	r1, [r2, #8]
 80058ec:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80058f0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80058f4:	4303      	orrs	r3, r0
 80058f6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80058fa:	430b      	orrs	r3, r1
 80058fc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058fe:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005902:	68d1      	ldr	r1, [r2, #12]
 8005904:	4303      	orrs	r3, r0
 8005906:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800590a:	430b      	orrs	r3, r1
 800590c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005916:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005918:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800591a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800591c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005920:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005922:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005926:	e791      	b.n	800584c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005928:	4a1b      	ldr	r2, [pc, #108]	; (8005998 <HAL_I2C_Init+0x154>)
 800592a:	4290      	cmp	r0, r2
 800592c:	d98d      	bls.n	800584a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800592e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005930:	4e18      	ldr	r6, [pc, #96]	; (8005994 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005932:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005934:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005938:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800593c:	4335      	orrs	r5, r6
 800593e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005940:	6a15      	ldr	r5, [r2, #32]
 8005942:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005946:	4371      	muls	r1, r6
 8005948:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800594c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005950:	fbb1 f1f6 	udiv	r1, r1, r6
 8005954:	e7a9      	b.n	80058aa <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005956:	68a5      	ldr	r5, [r4, #8]
 8005958:	b955      	cbnz	r5, 8005970 <HAL_I2C_Init+0x12c>
 800595a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800595e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005968:	b16b      	cbz	r3, 8005986 <HAL_I2C_Init+0x142>
 800596a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596e:	e7b2      	b.n	80058d6 <HAL_I2C_Init+0x92>
 8005970:	2519      	movs	r5, #25
 8005972:	436b      	muls	r3, r5
 8005974:	fbb0 f0f3 	udiv	r0, r0, r3
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597e:	b113      	cbz	r3, 8005986 <HAL_I2C_Init+0x142>
 8005980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005984:	e7a7      	b.n	80058d6 <HAL_I2C_Init+0x92>
 8005986:	2301      	movs	r3, #1
 8005988:	e7a5      	b.n	80058d6 <HAL_I2C_Init+0x92>
 800598a:	bf00      	nop
 800598c:	000186a0 	.word	0x000186a0
 8005990:	001e847f 	.word	0x001e847f
 8005994:	000f4240 	.word	0x000f4240
 8005998:	003d08ff 	.word	0x003d08ff

0800599c <HAL_I2C_Master_Transmit>:
{
 800599c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80059a0:	4604      	mov	r4, r0
 80059a2:	461f      	mov	r7, r3
 80059a4:	460d      	mov	r5, r1
 80059a6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80059a8:	f7ff fb78 	bl	800509c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80059b0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80059b2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b4:	d004      	beq.n	80059c0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80059b6:	2502      	movs	r5, #2
}
 80059b8:	4628      	mov	r0, r5
 80059ba:	b004      	add	sp, #16
 80059bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059c0:	9000      	str	r0, [sp, #0]
 80059c2:	2319      	movs	r3, #25
 80059c4:	2201      	movs	r2, #1
 80059c6:	495b      	ldr	r1, [pc, #364]	; (8005b34 <HAL_I2C_Master_Transmit+0x198>)
 80059c8:	4620      	mov	r0, r4
 80059ca:	f7ff fee3 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d1f1      	bne.n	80059b6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80059d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d0ed      	beq.n	80059b6 <HAL_I2C_Master_Transmit+0x1a>
 80059da:	2301      	movs	r3, #1
 80059dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80059e6:	bf5e      	ittt	pl
 80059e8:	681a      	ldrpl	r2, [r3, #0]
 80059ea:	f042 0201 	orrpl.w	r2, r2, #1
 80059ee:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80059f8:	2221      	movs	r2, #33	; 0x21
 80059fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059fe:	2210      	movs	r2, #16
 8005a00:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a04:	2200      	movs	r2, #0
 8005a06:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005a08:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a0c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a0e:	4a4a      	ldr	r2, [pc, #296]	; (8005b38 <HAL_I2C_Master_Transmit+0x19c>)
 8005a10:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8005a14:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a18:	2a08      	cmp	r2, #8
 8005a1a:	d004      	beq.n	8005a26 <HAL_I2C_Master_Transmit+0x8a>
 8005a1c:	2a01      	cmp	r2, #1
 8005a1e:	d002      	beq.n	8005a26 <HAL_I2C_Master_Transmit+0x8a>
 8005a20:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005a24:	d104      	bne.n	8005a30 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e002      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a32:	2a12      	cmp	r2, #18
 8005a34:	d0f7      	beq.n	8005a26 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a36:	2200      	movs	r2, #0
 8005a38:	9600      	str	r6, [sp, #0]
 8005a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7ff fea7 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	b138      	cbz	r0, 8005a5a <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a4e:	bf44      	itt	mi
 8005a50:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8005a54:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005a56:	2501      	movs	r5, #1
 8005a58:	e7ae      	b.n	80059b8 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a60:	d121      	bne.n	8005aa6 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a62:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005a66:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a68:	4633      	mov	r3, r6
 8005a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a6c:	4933      	ldr	r1, [pc, #204]	; (8005b3c <HAL_I2C_Master_Transmit+0x1a0>)
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f7ff fe30 	bl	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a74:	4605      	mov	r5, r0
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d1ed      	bne.n	8005a56 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	9003      	str	r0, [sp, #12]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	9203      	str	r2, [sp, #12]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	9303      	str	r3, [sp, #12]
 8005a86:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8005a88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005a8a:	b9f3      	cbnz	r3, 8005aca <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8c:	6821      	ldr	r1, [r4, #0]
 8005a8e:	680a      	ldr	r2, [r1, #0]
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a96:	2220      	movs	r2, #32
 8005a98:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005a9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005aa4:	e788      	b.n	80059b8 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005aa6:	11eb      	asrs	r3, r5, #7
 8005aa8:	f003 0306 	and.w	r3, r3, #6
 8005aac:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005ab0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ab2:	4923      	ldr	r1, [pc, #140]	; (8005b40 <HAL_I2C_Master_Transmit+0x1a4>)
 8005ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab6:	4633      	mov	r3, r6
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f7ff fe0b 	bl	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d1c9      	bne.n	8005a56 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	b2ed      	uxtb	r5, r5
 8005ac6:	611d      	str	r5, [r3, #16]
 8005ac8:	e7ce      	b.n	8005a68 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aca:	4632      	mov	r2, r6
 8005acc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f7ff fe91 	bl	80057f6 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad4:	b140      	cbz	r0, 8005ae8 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d1bc      	bne.n	8005a56 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e7b6      	b.n	8005a56 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005af2:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8005af4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005af6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005af8:	3a01      	subs	r2, #1
 8005afa:	b292      	uxth	r2, r2
 8005afc:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005afe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b00:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8005b02:	1e51      	subs	r1, r2, #1
 8005b04:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b06:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8005b08:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b0a:	d50a      	bpl.n	8005b22 <HAL_I2C_Master_Transmit+0x186>
 8005b0c:	b149      	cbz	r1, 8005b22 <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b0e:	7859      	ldrb	r1, [r3, #1]
 8005b10:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8005b12:	3302      	adds	r3, #2
 8005b14:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005b16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005b1c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8005b1e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005b20:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b22:	4632      	mov	r2, r6
 8005b24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7ff fe0e 	bl	8005748 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d0ab      	beq.n	8005a88 <HAL_I2C_Master_Transmit+0xec>
 8005b30:	e7d1      	b.n	8005ad6 <HAL_I2C_Master_Transmit+0x13a>
 8005b32:	bf00      	nop
 8005b34:	00100002 	.word	0x00100002
 8005b38:	ffff0000 	.word	0xffff0000
 8005b3c:	00010002 	.word	0x00010002
 8005b40:	00010008 	.word	0x00010008

08005b44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005b46:	4604      	mov	r4, r0
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d041      	beq.n	8005bd0 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005b4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b54:	b92b      	cbnz	r3, 8005b62 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b56:	4b42      	ldr	r3, [pc, #264]	; (8005c60 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8005b58:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b5c:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b5e:	f7fe ff27 	bl	80049b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b62:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b64:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b66:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b6a:	69d3      	ldr	r3, [r2, #28]
 8005b6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b70:	f023 030f 	bic.w	r3, r3, #15
 8005b74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005b76:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8005b78:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005b7a:	428b      	cmp	r3, r1
 8005b7c:	d031      	beq.n	8005be2 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005b7e:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005b80:	2b00      	cmp	r3, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005b82:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8005b84:	bf14      	ite	ne
 8005b86:	2520      	movne	r5, #32
 8005b88:	2510      	moveq	r5, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b8a:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005b8c:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8005b8e:	bf98      	it	ls
 8005b90:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b92:	f000 fdbf 	bl	8006714 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	6961      	ldr	r1, [r4, #20]
 8005b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ba0:	68e3      	ldr	r3, [r4, #12]
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	b1b3      	cbz	r3, 8005bd4 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ba6:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ba8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bac:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005bae:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bb4:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8005bb6:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005bba:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005bbe:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005bc0:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005bc2:	1e99      	subs	r1, r3, #2
 8005bc4:	29fd      	cmp	r1, #253	; 0xfd
 8005bc6:	d90e      	bls.n	8005be6 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005bc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bca:	f043 0310 	orr.w	r3, r3, #16
 8005bce:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	e044      	b.n	8005c5e <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bd4:	00eb      	lsls	r3, r5, #3
 8005bd6:	e7e7      	b.n	8005ba8 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bd8:	230a      	movs	r3, #10
 8005bda:	fbb0 f0f5 	udiv	r0, r0, r5
 8005bde:	4343      	muls	r3, r0
 8005be0:	e7e5      	b.n	8005bae <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8005be2:	2200      	movs	r2, #0
 8005be4:	e7ed      	b.n	8005bc2 <HAL_I2S_Init+0x7e>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005be6:	4313      	orrs	r3, r2
 8005be8:	6922      	ldr	r2, [r4, #16]
 8005bea:	6821      	ldr	r1, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005bec:	68e5      	ldr	r5, [r4, #12]
 8005bee:	69a0      	ldr	r0, [r4, #24]
 8005bf0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005c70 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005bf8:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8005bfc:	ea46 0203 	orr.w	r2, r6, r3
 8005c00:	69cf      	ldr	r7, [r1, #28]
 8005c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c06:	432a      	orrs	r2, r5
 8005c08:	4302      	orrs	r2, r0
 8005c0a:	ea07 070c 	and.w	r7, r7, ip
 8005c0e:	433a      	orrs	r2, r7
 8005c10:	61ca      	str	r2, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005c12:	6a22      	ldr	r2, [r4, #32]
 8005c14:	2a01      	cmp	r2, #1
 8005c16:	d11d      	bne.n	8005c54 <HAL_I2S_Init+0x110>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005c18:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <HAL_I2S_Init+0x120>)
 8005c1a:	6362      	str	r2, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c1c:	4f12      	ldr	r7, [pc, #72]	; (8005c68 <HAL_I2S_Init+0x124>)
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <HAL_I2S_Init+0x128>)
 8005c20:	42b9      	cmp	r1, r7
 8005c22:	bf18      	it	ne
 8005c24:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005c28:	432b      	orrs	r3, r5
 8005c2a:	69d1      	ldr	r1, [r2, #28]
 8005c2c:	ea01 010c 	and.w	r1, r1, ip
 8005c30:	61d1      	str	r1, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c32:	2102      	movs	r1, #2
 8005c34:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c36:	69d7      	ldr	r7, [r2, #28]
 8005c38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c3c:	4303      	orrs	r3, r0

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c3e:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8005c42:	ea43 0307 	orr.w	r3, r3, r7
 8005c46:	bf14      	ite	ne
 8005c48:	2100      	movne	r1, #0
 8005c4a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005c4e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c50:	430b      	orrs	r3, r1
 8005c52:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c54:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c56:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c58:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8005c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c60:	08005d5d 	.word	0x08005d5d
 8005c64:	08005e81 	.word	0x08005e81
 8005c68:	40003800 	.word	0x40003800
 8005c6c:	40003400 	.word	0x40003400
 8005c70:	fffff040 	.word	0xfffff040

08005c74 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4604      	mov	r4, r0
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	d04e      	beq.n	8005d1a <HAL_I2S_Transmit_DMA+0xa6>
 8005c7c:	2a00      	cmp	r2, #0
 8005c7e:	d04c      	beq.n	8005d1a <HAL_I2S_Transmit_DMA+0xa6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c80:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d00a      	beq.n	8005c9e <HAL_I2S_Transmit_DMA+0x2a>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005c8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_I2S_Transmit_DMA+0x2e>
  {
    __HAL_UNLOCK(hi2s);
 8005c9a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8005c9e:	2002      	movs	r0, #2
 8005ca0:	e027      	b.n	8005cf2 <HAL_I2S_Transmit_DMA+0x7e>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005ca2:	2003      	movs	r0, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005ca4:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005ca6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005caa:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005cac:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 8005cae:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005cb0:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005cb4:	4283      	cmp	r3, r0
 8005cb6:	d001      	beq.n	8005cbc <HAL_I2S_Transmit_DMA+0x48>
 8005cb8:	2b05      	cmp	r3, #5
 8005cba:	d11b      	bne.n	8005cf4 <HAL_I2S_Transmit_DMA+0x80>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005cbc:	0053      	lsls	r3, r2, #1
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005cc2:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->TxXferSize = Size;
    hi2s->TxXferCount = Size;
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005cc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <HAL_I2S_Transmit_DMA+0xac>)
 8005cc8:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005cca:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <HAL_I2S_Transmit_DMA+0xb0>)
 8005ccc:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005cce:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <HAL_I2S_Transmit_DMA+0xb4>)
 8005cd0:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005cd2:	f105 020c 	add.w	r2, r5, #12
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8005cd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005cd8:	f7ff faf8 	bl	80052cc <HAL_DMA_Start_IT>
 8005cdc:	b168      	cbz	r0, 8005cfa <HAL_I2S_Transmit_DMA+0x86>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cde:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005ce0:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ce2:	f043 0308 	orr.w	r3, r3, #8
 8005ce6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005ce8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
  }

  __HAL_UNLOCK(hi2s);
 8005cec:	2300      	movs	r3, #0
 8005cee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = Size;
 8005cf4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005cf6:	8562      	strh	r2, [r4, #42]	; 0x2a
 8005cf8:	e7e4      	b.n	8005cc4 <HAL_I2S_Transmit_DMA+0x50>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8005d00:	bf5e      	ittt	pl
 8005d02:	69da      	ldrpl	r2, [r3, #28]
 8005d04:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8005d08:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d0e:	bf5e      	ittt	pl
 8005d10:	685a      	ldrpl	r2, [r3, #4]
 8005d12:	f042 0202 	orrpl.w	r2, r2, #2
 8005d16:	605a      	strpl	r2, [r3, #4]
 8005d18:	e7e8      	b.n	8005cec <HAL_I2S_Transmit_DMA+0x78>
    return  HAL_ERROR;
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	e7e9      	b.n	8005cf2 <HAL_I2S_Transmit_DMA+0x7e>
 8005d1e:	bf00      	nop
 8005d20:	08005d2d 	.word	0x08005d2d
 8005d24:	08005d37 	.word	0x08005d37
 8005d28:	08005e57 	.word	0x08005e57

08005d2c <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005d2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005d30:	f7fb fa06 	bl	8001140 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d34:	bd08      	pop	{r3, pc}

08005d36 <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8005d36:	69c1      	ldr	r1, [r0, #28]
{
 8005d38:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8005d3c:	b941      	cbnz	r1, 8005d50 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	6842      	ldr	r2, [r0, #4]
 8005d42:	f022 0202 	bic.w	r2, r2, #2
 8005d46:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005d48:	2201      	movs	r2, #1
    hi2s->TxXferCount = 0U;
 8005d4a:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fb f9e7 	bl	8001124 <HAL_I2S_TxCpltCallback>
}
 8005d56:	bd08      	pop	{r3, pc}

08005d58 <HAL_I2S_RxCpltCallback>:
 8005d58:	4770      	bx	lr

08005d5a <HAL_I2S_ErrorCallback>:
 8005d5a:	4770      	bx	lr

08005d5c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d5e:	6803      	ldr	r3, [r0, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d64:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005d68:	2a04      	cmp	r2, #4
{
 8005d6a:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d6c:	d136      	bne.n	8005ddc <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d6e:	9a01      	ldr	r2, [sp, #4]
 8005d70:	07d1      	lsls	r1, r2, #31
 8005d72:	d517      	bpl.n	8005da4 <I2S_IRQHandler+0x48>
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	0652      	lsls	r2, r2, #25
 8005d78:	d514      	bpl.n	8005da4 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005d7c:	68d9      	ldr	r1, [r3, #12]
 8005d7e:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8005d82:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005d84:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005d86:	3a01      	subs	r2, #1
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8005d8c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005d8e:	b292      	uxth	r2, r2
 8005d90:	b942      	cbnz	r2, 8005da4 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d98:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8005da0:	f7ff ffda 	bl	8005d58 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	0659      	lsls	r1, r3, #25
 8005da8:	d518      	bpl.n	8005ddc <I2S_IRQHandler+0x80>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	0692      	lsls	r2, r2, #26
 8005db0:	d514      	bpl.n	8005ddc <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005db8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005dba:	2200      	movs	r2, #0
 8005dbc:	9202      	str	r2, [sp, #8]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	9202      	str	r2, [sp, #8]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	9302      	str	r3, [sp, #8]
 8005dc6:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f7ff ffbf 	bl	8005d5a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ddc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d136      	bne.n	8005e52 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005de4:	9b01      	ldr	r3, [sp, #4]
 8005de6:	079b      	lsls	r3, r3, #30
 8005de8:	d519      	bpl.n	8005e1e <I2S_IRQHandler+0xc2>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	6853      	ldr	r3, [r2, #4]
 8005dee:	0618      	lsls	r0, r3, #24
 8005df0:	d515      	bpl.n	8005e1e <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df4:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005df8:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8005dfa:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8005dfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005e04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	b94b      	cbnz	r3, 8005e1e <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e0a:	6853      	ldr	r3, [r2, #4]
 8005e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e10:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f7fb f983 	bl	8001124 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	0719      	lsls	r1, r3, #28
 8005e22:	d516      	bpl.n	8005e52 <I2S_IRQHandler+0xf6>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	0692      	lsls	r2, r2, #26
 8005e2a:	d512      	bpl.n	8005e52 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e32:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e34:	2200      	movs	r2, #0
 8005e36:	9203      	str	r2, [sp, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f7ff ff84 	bl	8005d5a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e52:	b004      	add	sp, #16
 8005e54:	bd10      	pop	{r4, pc}

08005e56 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e56:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005e58:	6802      	ldr	r2, [r0, #0]
{
 8005e5a:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005e5c:	6853      	ldr	r3, [r2, #4]
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005e68:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e70:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005e72:	f043 0308 	orr.w	r3, r3, #8
 8005e76:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8005e78:	f7ff ff6f 	bl	8005d5a <HAL_I2S_ErrorCallback>
}
 8005e7c:	bd08      	pop	{r3, pc}

08005e7e <HAL_I2SEx_TxRxCpltCallback>:
 8005e7e:	4770      	bx	lr

08005e80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e80:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e82:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005e84:	498e      	ldr	r1, [pc, #568]	; (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e86:	6893      	ldr	r3, [r2, #8]
{
 8005e88:	b086      	sub	sp, #24
 8005e8a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e8c:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005e8e:	4b8d      	ldr	r3, [pc, #564]	; (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005e90:	428a      	cmp	r2, r1
 8005e92:	bf18      	it	ne
 8005e94:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005e98:	6899      	ldr	r1, [r3, #8]
 8005e9a:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005e9c:	6851      	ldr	r1, [r2, #4]
 8005e9e:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005ea0:	6859      	ldr	r1, [r3, #4]
 8005ea2:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ea4:	6841      	ldr	r1, [r0, #4]
 8005ea6:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8005eaa:	f040 8093 	bne.w	8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005eae:	9b00      	ldr	r3, [sp, #0]
 8005eb0:	0799      	lsls	r1, r3, #30
 8005eb2:	d51a      	bpl.n	8005eea <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8005eb4:	9b02      	ldr	r3, [sp, #8]
 8005eb6:	061b      	lsls	r3, r3, #24
 8005eb8:	d517      	bpl.n	8005eea <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005eba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ebc:	1c99      	adds	r1, r3, #2
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	6241      	str	r1, [r0, #36]	; 0x24
 8005ec2:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8005ec4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ecc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	b95b      	cbnz	r3, 8005eea <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ed2:	6853      	ldr	r3, [r2, #4]
 8005ed4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ed8:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8005eda:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	b923      	cbnz	r3, 8005eea <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ee6:	f7ff ffca 	bl	8005e7e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005eea:	9b01      	ldr	r3, [sp, #4]
 8005eec:	07d8      	lsls	r0, r3, #31
 8005eee:	d522      	bpl.n	8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	0659      	lsls	r1, r3, #25
 8005ef4:	d51f      	bpl.n	8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ef6:	6821      	ldr	r1, [r4, #0]
 8005ef8:	4a71      	ldr	r2, [pc, #452]	; (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005efa:	4b72      	ldr	r3, [pc, #456]	; (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005efc:	4291      	cmp	r1, r2
 8005efe:	bf18      	it	ne
 8005f00:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8005f04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f06:	68d9      	ldr	r1, [r3, #12]
 8005f08:	1c90      	adds	r0, r2, #2
 8005f0a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8005f0c:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8005f0e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005f10:	3a01      	subs	r2, #1
 8005f12:	b292      	uxth	r2, r2
 8005f14:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f16:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	b962      	cbnz	r2, 8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f22:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	b92b      	cbnz	r3, 8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff ffa4 	bl	8005e7e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	065a      	lsls	r2, r3, #25
 8005f3a:	d522      	bpl.n	8005f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	069b      	lsls	r3, r3, #26
 8005f40:	d51f      	bpl.n	8005f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	495e      	ldr	r1, [pc, #376]	; (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8005f46:	4a5f      	ldr	r2, [pc, #380]	; (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	bf18      	it	ne
 8005f4c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8005f50:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f52:	6851      	ldr	r1, [r2, #4]
 8005f54:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005f58:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f60:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f62:	2200      	movs	r2, #0
 8005f64:	9204      	str	r2, [sp, #16]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	9204      	str	r2, [sp, #16]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f78:	f043 0302 	orr.w	r3, r3, #2
 8005f7c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005f7e:	f7ff feec 	bl	8005d5a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f82:	9b00      	ldr	r3, [sp, #0]
 8005f84:	0718      	lsls	r0, r3, #28
 8005f86:	f140 8098 	bpl.w	80060ba <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8005f8a:	9b02      	ldr	r3, [sp, #8]
 8005f8c:	0699      	lsls	r1, r3, #26
 8005f8e:	f140 8094 	bpl.w	80060ba <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f92:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f94:	494a      	ldr	r1, [pc, #296]	; (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f9c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f9e:	4a49      	ldr	r2, [pc, #292]	; (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf18      	it	ne
 8005fa4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8005fa8:	6851      	ldr	r1, [r2, #4]
 8005faa:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005fae:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	9205      	str	r2, [sp, #20]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	9305      	str	r3, [sp, #20]
 8005fb8:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005fc2:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fc4:	f043 0304 	orr.w	r3, r3, #4
 8005fc8:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005fca:	b006      	add	sp, #24
 8005fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8005fd0:	f7ff bec3 	b.w	8005d5a <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005fd4:	9a01      	ldr	r2, [sp, #4]
 8005fd6:	0792      	lsls	r2, r2, #30
 8005fd8:	d51a      	bpl.n	8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8005fda:	9a03      	ldr	r2, [sp, #12]
 8005fdc:	0611      	lsls	r1, r2, #24
 8005fde:	d517      	bpl.n	8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005fe0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005fe2:	1c91      	adds	r1, r2, #2
 8005fe4:	8812      	ldrh	r2, [r2, #0]
 8005fe6:	6241      	str	r1, [r0, #36]	; 0x24
 8005fe8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fea:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005fec:	3a01      	subs	r2, #1
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8005ff2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	b95a      	cbnz	r2, 8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ffe:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8006000:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006002:	b29b      	uxth	r3, r3
 8006004:	b923      	cbnz	r3, 8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 8006006:	2301      	movs	r3, #1
 8006008:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800600c:	f7ff ff37 	bl	8005e7e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006010:	9b00      	ldr	r3, [sp, #0]
 8006012:	07da      	lsls	r2, r3, #31
 8006014:	d51c      	bpl.n	8006050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8006016:	9b02      	ldr	r3, [sp, #8]
 8006018:	065b      	lsls	r3, r3, #25
 800601a:	d519      	bpl.n	8006050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800601c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	1c98      	adds	r0, r3, #2
 8006022:	68d1      	ldr	r1, [r2, #12]
 8006024:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006026:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8006028:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800602a:	3b01      	subs	r3, #1
 800602c:	b29b      	uxth	r3, r3
 800602e:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8006030:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006032:	b29b      	uxth	r3, r3
 8006034:	b963      	cbnz	r3, 8006050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006036:	6853      	ldr	r3, [r2, #4]
 8006038:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800603c:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 800603e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	b92b      	cbnz	r3, 8006050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8006044:	2301      	movs	r3, #1
 8006046:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff ff17 	bl	8005e7e <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006050:	9b00      	ldr	r3, [sp, #0]
 8006052:	0658      	lsls	r0, r3, #25
 8006054:	d51b      	bpl.n	800608e <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	0699      	lsls	r1, r3, #26
 800605a:	d518      	bpl.n	800608e <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800605c:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800605e:	4918      	ldr	r1, [pc, #96]	; (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006060:	6853      	ldr	r3, [r2, #4]
 8006062:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006066:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006068:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800606a:	428a      	cmp	r2, r1
 800606c:	bf18      	it	ne
 800606e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8006072:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800607a:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800607c:	2301      	movs	r3, #1
 800607e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006082:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006084:	f043 0302 	orr.w	r3, r3, #2
 8006088:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800608a:	f7ff fe66 	bl	8005d5a <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800608e:	9b01      	ldr	r3, [sp, #4]
 8006090:	071a      	lsls	r2, r3, #28
 8006092:	d512      	bpl.n	80060ba <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	069b      	lsls	r3, r3, #26
 8006098:	d50f      	bpl.n	80060ba <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	4908      	ldr	r1, [pc, #32]	; (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80060a0:	428a      	cmp	r2, r1
 80060a2:	bf18      	it	ne
 80060a4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80060a8:	6859      	ldr	r1, [r3, #4]
 80060aa:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80060ae:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060b0:	6853      	ldr	r3, [r2, #4]
 80060b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80060b6:	6053      	str	r3, [r2, #4]
 80060b8:	e77f      	b.n	8005fba <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 80060ba:	b006      	add	sp, #24
 80060bc:	bd10      	pop	{r4, pc}
 80060be:	bf00      	nop
 80060c0:	40003800 	.word	0x40003800
 80060c4:	40003400 	.word	0x40003400

080060c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060cc:	4604      	mov	r4, r0
 80060ce:	b908      	cbnz	r0, 80060d4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80060d0:	2001      	movs	r0, #1
 80060d2:	e03f      	b.n	8006154 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060d4:	6803      	ldr	r3, [r0, #0]
 80060d6:	07dd      	lsls	r5, r3, #31
 80060d8:	d410      	bmi.n	80060fc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	0798      	lsls	r0, r3, #30
 80060de:	d45a      	bmi.n	8006196 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	071a      	lsls	r2, r3, #28
 80060e4:	f100 809c 	bmi.w	8006220 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	075b      	lsls	r3, r3, #29
 80060ec:	f100 80ba 	bmi.w	8006264 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f0:	69a0      	ldr	r0, [r4, #24]
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f040 811b 	bne.w	800632e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80060f8:	2000      	movs	r0, #0
 80060fa:	e02b      	b.n	8006154 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060fc:	4ba7      	ldr	r3, [pc, #668]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	f002 020c 	and.w	r2, r2, #12
 8006104:	2a04      	cmp	r2, #4
 8006106:	d007      	beq.n	8006118 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800610e:	2a08      	cmp	r2, #8
 8006110:	d10a      	bne.n	8006128 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	0259      	lsls	r1, r3, #9
 8006116:	d507      	bpl.n	8006128 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006118:	4ba0      	ldr	r3, [pc, #640]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	039a      	lsls	r2, r3, #14
 800611e:	d5dc      	bpl.n	80060da <HAL_RCC_OscConfig+0x12>
 8006120:	6863      	ldr	r3, [r4, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1d9      	bne.n	80060da <HAL_RCC_OscConfig+0x12>
 8006126:	e7d3      	b.n	80060d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006128:	6863      	ldr	r3, [r4, #4]
 800612a:	4d9c      	ldr	r5, [pc, #624]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 800612c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006130:	d113      	bne.n	800615a <HAL_RCC_OscConfig+0x92>
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006138:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800613a:	f7fe ffaf 	bl	800509c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	4d97      	ldr	r5, [pc, #604]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8006140:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006142:	682b      	ldr	r3, [r5, #0]
 8006144:	039b      	lsls	r3, r3, #14
 8006146:	d4c8      	bmi.n	80060da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006148:	f7fe ffa8 	bl	800509c <HAL_GetTick>
 800614c:	1b80      	subs	r0, r0, r6
 800614e:	2864      	cmp	r0, #100	; 0x64
 8006150:	d9f7      	bls.n	8006142 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8006152:	2003      	movs	r0, #3
}
 8006154:	b002      	add	sp, #8
 8006156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800615a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800615e:	d104      	bne.n	800616a <HAL_RCC_OscConfig+0xa2>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	e7e3      	b.n	8006132 <HAL_RCC_OscConfig+0x6a>
 800616a:	682a      	ldr	r2, [r5, #0]
 800616c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006170:	602a      	str	r2, [r5, #0]
 8006172:	682a      	ldr	r2, [r5, #0]
 8006174:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006178:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1dd      	bne.n	800613a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800617e:	f7fe ff8d 	bl	800509c <HAL_GetTick>
 8006182:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	039f      	lsls	r7, r3, #14
 8006188:	d5a7      	bpl.n	80060da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800618a:	f7fe ff87 	bl	800509c <HAL_GetTick>
 800618e:	1b80      	subs	r0, r0, r6
 8006190:	2864      	cmp	r0, #100	; 0x64
 8006192:	d9f7      	bls.n	8006184 <HAL_RCC_OscConfig+0xbc>
 8006194:	e7dd      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006196:	4b81      	ldr	r3, [pc, #516]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	f012 0f0c 	tst.w	r2, #12
 800619e:	d007      	beq.n	80061b0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061a6:	2a08      	cmp	r2, #8
 80061a8:	d111      	bne.n	80061ce <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	025e      	lsls	r6, r3, #9
 80061ae:	d40e      	bmi.n	80061ce <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b0:	4b7a      	ldr	r3, [pc, #488]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	0795      	lsls	r5, r2, #30
 80061b6:	d502      	bpl.n	80061be <HAL_RCC_OscConfig+0xf6>
 80061b8:	68e2      	ldr	r2, [r4, #12]
 80061ba:	2a01      	cmp	r2, #1
 80061bc:	d188      	bne.n	80060d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	6921      	ldr	r1, [r4, #16]
 80061c2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80061c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80061ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061cc:	e788      	b.n	80060e0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061ce:	68e2      	ldr	r2, [r4, #12]
 80061d0:	4b73      	ldr	r3, [pc, #460]	; (80063a0 <HAL_RCC_OscConfig+0x2d8>)
 80061d2:	b1b2      	cbz	r2, 8006202 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80061d8:	f7fe ff60 	bl	800509c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061dc:	4d6f      	ldr	r5, [pc, #444]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80061de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	0798      	lsls	r0, r3, #30
 80061e4:	d507      	bpl.n	80061f6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e6:	682b      	ldr	r3, [r5, #0]
 80061e8:	6922      	ldr	r2, [r4, #16]
 80061ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	e774      	b.n	80060e0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061f6:	f7fe ff51 	bl	800509c <HAL_GetTick>
 80061fa:	1b80      	subs	r0, r0, r6
 80061fc:	2802      	cmp	r0, #2
 80061fe:	d9ef      	bls.n	80061e0 <HAL_RCC_OscConfig+0x118>
 8006200:	e7a7      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8006202:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006204:	f7fe ff4a 	bl	800509c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006208:	4d64      	ldr	r5, [pc, #400]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800620a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	0799      	lsls	r1, r3, #30
 8006210:	f57f af66 	bpl.w	80060e0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006214:	f7fe ff42 	bl	800509c <HAL_GetTick>
 8006218:	1b80      	subs	r0, r0, r6
 800621a:	2802      	cmp	r0, #2
 800621c:	d9f6      	bls.n	800620c <HAL_RCC_OscConfig+0x144>
 800621e:	e798      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006220:	6962      	ldr	r2, [r4, #20]
 8006222:	4b60      	ldr	r3, [pc, #384]	; (80063a4 <HAL_RCC_OscConfig+0x2dc>)
 8006224:	b17a      	cbz	r2, 8006246 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8006226:	2201      	movs	r2, #1
 8006228:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800622a:	f7fe ff37 	bl	800509c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622e:	4d5b      	ldr	r5, [pc, #364]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8006230:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006232:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006234:	079f      	lsls	r7, r3, #30
 8006236:	f53f af57 	bmi.w	80060e8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800623a:	f7fe ff2f 	bl	800509c <HAL_GetTick>
 800623e:	1b80      	subs	r0, r0, r6
 8006240:	2802      	cmp	r0, #2
 8006242:	d9f6      	bls.n	8006232 <HAL_RCC_OscConfig+0x16a>
 8006244:	e785      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8006246:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006248:	f7fe ff28 	bl	800509c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800624c:	4d53      	ldr	r5, [pc, #332]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800624e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006250:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006252:	0798      	lsls	r0, r3, #30
 8006254:	f57f af48 	bpl.w	80060e8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006258:	f7fe ff20 	bl	800509c <HAL_GetTick>
 800625c:	1b80      	subs	r0, r0, r6
 800625e:	2802      	cmp	r0, #2
 8006260:	d9f6      	bls.n	8006250 <HAL_RCC_OscConfig+0x188>
 8006262:	e776      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006264:	4b4d      	ldr	r3, [pc, #308]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 8006266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006268:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800626c:	d128      	bne.n	80062c0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800626e:	9201      	str	r2, [sp, #4]
 8006270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006272:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006276:	641a      	str	r2, [r3, #64]	; 0x40
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006282:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006284:	4d48      	ldr	r5, [pc, #288]	; (80063a8 <HAL_RCC_OscConfig+0x2e0>)
 8006286:	682b      	ldr	r3, [r5, #0]
 8006288:	05d9      	lsls	r1, r3, #23
 800628a:	d51b      	bpl.n	80062c4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800628c:	68a3      	ldr	r3, [r4, #8]
 800628e:	4d43      	ldr	r5, [pc, #268]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 8006290:	2b01      	cmp	r3, #1
 8006292:	d127      	bne.n	80062e4 <HAL_RCC_OscConfig+0x21c>
 8006294:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800629c:	f7fe fefe 	bl	800509c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a0:	4d3e      	ldr	r5, [pc, #248]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80062a2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80062aa:	079b      	lsls	r3, r3, #30
 80062ac:	d539      	bpl.n	8006322 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	f43f af1e 	beq.w	80060f0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b4:	4a39      	ldr	r2, [pc, #228]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 80062b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80062b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062bc:	6413      	str	r3, [r2, #64]	; 0x40
 80062be:	e717      	b.n	80060f0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80062c0:	2600      	movs	r6, #0
 80062c2:	e7df      	b.n	8006284 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80062cc:	f7fe fee6 	bl	800509c <HAL_GetTick>
 80062d0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	05da      	lsls	r2, r3, #23
 80062d6:	d4d9      	bmi.n	800628c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d8:	f7fe fee0 	bl	800509c <HAL_GetTick>
 80062dc:	1bc0      	subs	r0, r0, r7
 80062de:	2802      	cmp	r0, #2
 80062e0:	d9f7      	bls.n	80062d2 <HAL_RCC_OscConfig+0x20a>
 80062e2:	e736      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e4:	2b05      	cmp	r3, #5
 80062e6:	d104      	bne.n	80062f2 <HAL_RCC_OscConfig+0x22a>
 80062e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	672b      	str	r3, [r5, #112]	; 0x70
 80062f0:	e7d0      	b.n	8006294 <HAL_RCC_OscConfig+0x1cc>
 80062f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80062f4:	f022 0201 	bic.w	r2, r2, #1
 80062f8:	672a      	str	r2, [r5, #112]	; 0x70
 80062fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80062fc:	f022 0204 	bic.w	r2, r2, #4
 8006300:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1ca      	bne.n	800629c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8006306:	f7fe fec9 	bl	800509c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800630a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800630e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006310:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006312:	0798      	lsls	r0, r3, #30
 8006314:	d5cb      	bpl.n	80062ae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fe fec1 	bl	800509c <HAL_GetTick>
 800631a:	1bc0      	subs	r0, r0, r7
 800631c:	4540      	cmp	r0, r8
 800631e:	d9f7      	bls.n	8006310 <HAL_RCC_OscConfig+0x248>
 8006320:	e717      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fe febb 	bl	800509c <HAL_GetTick>
 8006326:	1bc0      	subs	r0, r0, r7
 8006328:	4540      	cmp	r0, r8
 800632a:	d9bd      	bls.n	80062a8 <HAL_RCC_OscConfig+0x1e0>
 800632c:	e711      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800632e:	4d1b      	ldr	r5, [pc, #108]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
 8006330:	68ab      	ldr	r3, [r5, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b08      	cmp	r3, #8
 8006338:	d047      	beq.n	80063ca <HAL_RCC_OscConfig+0x302>
 800633a:	4e1c      	ldr	r6, [pc, #112]	; (80063ac <HAL_RCC_OscConfig+0x2e4>)
 800633c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800633e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006340:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006342:	d135      	bne.n	80063b0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8006344:	f7fe feaa 	bl	800509c <HAL_GetTick>
 8006348:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	0199      	lsls	r1, r3, #6
 800634e:	d41e      	bmi.n	800638e <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006350:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8006354:	4313      	orrs	r3, r2
 8006356:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006358:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800635c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800635e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006362:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006364:	4c0d      	ldr	r4, [pc, #52]	; (800639c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006366:	0852      	lsrs	r2, r2, #1
 8006368:	3a01      	subs	r2, #1
 800636a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800636e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006370:	2301      	movs	r3, #1
 8006372:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006374:	f7fe fe92 	bl	800509c <HAL_GetTick>
 8006378:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	019a      	lsls	r2, r3, #6
 800637e:	f53f aebb 	bmi.w	80060f8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006382:	f7fe fe8b 	bl	800509c <HAL_GetTick>
 8006386:	1b40      	subs	r0, r0, r5
 8006388:	2802      	cmp	r0, #2
 800638a:	d9f6      	bls.n	800637a <HAL_RCC_OscConfig+0x2b2>
 800638c:	e6e1      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638e:	f7fe fe85 	bl	800509c <HAL_GetTick>
 8006392:	1bc0      	subs	r0, r0, r7
 8006394:	2802      	cmp	r0, #2
 8006396:	d9d8      	bls.n	800634a <HAL_RCC_OscConfig+0x282>
 8006398:	e6db      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
 800639a:	bf00      	nop
 800639c:	40023800 	.word	0x40023800
 80063a0:	42470000 	.word	0x42470000
 80063a4:	42470e80 	.word	0x42470e80
 80063a8:	40007000 	.word	0x40007000
 80063ac:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80063b0:	f7fe fe74 	bl	800509c <HAL_GetTick>
 80063b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	f57f ae9d 	bpl.w	80060f8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063be:	f7fe fe6d 	bl	800509c <HAL_GetTick>
 80063c2:	1b00      	subs	r0, r0, r4
 80063c4:	2802      	cmp	r0, #2
 80063c6:	d9f6      	bls.n	80063b6 <HAL_RCC_OscConfig+0x2ee>
 80063c8:	e6c3      	b.n	8006152 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063ca:	2801      	cmp	r0, #1
 80063cc:	f43f aec2 	beq.w	8006154 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 80063d0:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d2:	69e3      	ldr	r3, [r4, #28]
 80063d4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80063d8:	429a      	cmp	r2, r3
 80063da:	f47f ae79 	bne.w	80060d0 <HAL_RCC_OscConfig+0x8>
 80063de:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063e0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e4:	4293      	cmp	r3, r2
 80063e6:	f47f ae73 	bne.w	80060d0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80063ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063f0:	4003      	ands	r3, r0
 80063f2:	4293      	cmp	r3, r2
 80063f4:	f47f ae6c 	bne.w	80060d0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80063f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063fa:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80063fe:	4293      	cmp	r3, r2
 8006400:	f47f ae66 	bne.w	80060d0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006404:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006406:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 800640a:	1ac0      	subs	r0, r0, r3
 800640c:	bf18      	it	ne
 800640e:	2001      	movne	r0, #1
 8006410:	e6a0      	b.n	8006154 <HAL_RCC_OscConfig+0x8c>
 8006412:	bf00      	nop

08006414 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006414:	4913      	ldr	r1, [pc, #76]	; (8006464 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006416:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006418:	688b      	ldr	r3, [r1, #8]
 800641a:	f003 030c 	and.w	r3, r3, #12
 800641e:	2b04      	cmp	r3, #4
 8006420:	d003      	beq.n	800642a <HAL_RCC_GetSysClockFreq+0x16>
 8006422:	2b08      	cmp	r3, #8
 8006424:	d003      	beq.n	800642e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006426:	4810      	ldr	r0, [pc, #64]	; (8006468 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8006428:	e000      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800642a:	4810      	ldr	r0, [pc, #64]	; (800646c <HAL_RCC_GetSysClockFreq+0x58>)
}
 800642c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800642e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006430:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006432:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006434:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006438:	bf14      	ite	ne
 800643a:	480c      	ldrne	r0, [pc, #48]	; (800646c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800643c:	480a      	ldreq	r0, [pc, #40]	; (8006468 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800643e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006442:	bf18      	it	ne
 8006444:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006446:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800644a:	fba1 0100 	umull	r0, r1, r1, r0
 800644e:	f7fa fbb5 	bl	8000bbc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006452:	4b04      	ldr	r3, [pc, #16]	; (8006464 <HAL_RCC_GetSysClockFreq+0x50>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800645a:	3301      	adds	r3, #1
 800645c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800645e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006462:	e7e3      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x18>
 8006464:	40023800 	.word	0x40023800
 8006468:	00f42400 	.word	0x00f42400
 800646c:	017d7840 	.word	0x017d7840

08006470 <HAL_RCC_ClockConfig>:
{
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006476:	4604      	mov	r4, r0
 8006478:	b910      	cbnz	r0, 8006480 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800647a:	2001      	movs	r0, #1
}
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006480:	4b43      	ldr	r3, [pc, #268]	; (8006590 <HAL_RCC_ClockConfig+0x120>)
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	f002 020f 	and.w	r2, r2, #15
 8006488:	428a      	cmp	r2, r1
 800648a:	d328      	bcc.n	80064de <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800648c:	6821      	ldr	r1, [r4, #0]
 800648e:	078f      	lsls	r7, r1, #30
 8006490:	d42d      	bmi.n	80064ee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006492:	07c8      	lsls	r0, r1, #31
 8006494:	d440      	bmi.n	8006518 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <HAL_RCC_ClockConfig+0x120>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	f002 020f 	and.w	r2, r2, #15
 800649e:	42aa      	cmp	r2, r5
 80064a0:	d865      	bhi.n	800656e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	0751      	lsls	r1, r2, #29
 80064a6:	d46b      	bmi.n	8006580 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a8:	0713      	lsls	r3, r2, #28
 80064aa:	d507      	bpl.n	80064bc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ac:	4a39      	ldr	r2, [pc, #228]	; (8006594 <HAL_RCC_ClockConfig+0x124>)
 80064ae:	6921      	ldr	r1, [r4, #16]
 80064b0:	6893      	ldr	r3, [r2, #8]
 80064b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80064b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80064ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064bc:	f7ff ffaa 	bl	8006414 <HAL_RCC_GetSysClockFreq>
 80064c0:	4b34      	ldr	r3, [pc, #208]	; (8006594 <HAL_RCC_ClockConfig+0x124>)
 80064c2:	4a35      	ldr	r2, [pc, #212]	; (8006598 <HAL_RCC_ClockConfig+0x128>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80064ca:	5cd3      	ldrb	r3, [r2, r3]
 80064cc:	40d8      	lsrs	r0, r3
 80064ce:	4b33      	ldr	r3, [pc, #204]	; (800659c <HAL_RCC_ClockConfig+0x12c>)
 80064d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80064d2:	4b33      	ldr	r3, [pc, #204]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	f7fe fd97 	bl	8005008 <HAL_InitTick>
  return HAL_OK;
 80064da:	2000      	movs	r0, #0
 80064dc:	e7ce      	b.n	800647c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064de:	b2ca      	uxtb	r2, r1
 80064e0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	428b      	cmp	r3, r1
 80064ea:	d1c6      	bne.n	800647a <HAL_RCC_ClockConfig+0xa>
 80064ec:	e7ce      	b.n	800648c <HAL_RCC_ClockConfig+0x1c>
 80064ee:	4b29      	ldr	r3, [pc, #164]	; (8006594 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064f4:	bf1e      	ittt	ne
 80064f6:	689a      	ldrne	r2, [r3, #8]
 80064f8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80064fc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fe:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006500:	bf42      	ittt	mi
 8006502:	689a      	ldrmi	r2, [r3, #8]
 8006504:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8006508:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	68a0      	ldr	r0, [r4, #8]
 800650e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006512:	4302      	orrs	r2, r0
 8006514:	609a      	str	r2, [r3, #8]
 8006516:	e7bc      	b.n	8006492 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006518:	6862      	ldr	r2, [r4, #4]
 800651a:	4b1e      	ldr	r3, [pc, #120]	; (8006594 <HAL_RCC_ClockConfig+0x124>)
 800651c:	2a01      	cmp	r2, #1
 800651e:	d11c      	bne.n	800655a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006526:	d0a8      	beq.n	800647a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006528:	4e1a      	ldr	r6, [pc, #104]	; (8006594 <HAL_RCC_ClockConfig+0x124>)
 800652a:	68b3      	ldr	r3, [r6, #8]
 800652c:	f023 0303 	bic.w	r3, r3, #3
 8006530:	4313      	orrs	r3, r2
 8006532:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006534:	f7fe fdb2 	bl	800509c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006538:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800653c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653e:	68b3      	ldr	r3, [r6, #8]
 8006540:	6862      	ldr	r2, [r4, #4]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800654a:	d0a4      	beq.n	8006496 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800654c:	f7fe fda6 	bl	800509c <HAL_GetTick>
 8006550:	1bc0      	subs	r0, r0, r7
 8006552:	4540      	cmp	r0, r8
 8006554:	d9f3      	bls.n	800653e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8006556:	2003      	movs	r0, #3
 8006558:	e790      	b.n	800647c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800655a:	1e91      	subs	r1, r2, #2
 800655c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800655e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006560:	d802      	bhi.n	8006568 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006562:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006566:	e7de      	b.n	8006526 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006568:	f013 0f02 	tst.w	r3, #2
 800656c:	e7db      	b.n	8006526 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656e:	b2ea      	uxtb	r2, r5
 8006570:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	42ab      	cmp	r3, r5
 800657a:	f47f af7e 	bne.w	800647a <HAL_RCC_ClockConfig+0xa>
 800657e:	e790      	b.n	80064a2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006580:	4904      	ldr	r1, [pc, #16]	; (8006594 <HAL_RCC_ClockConfig+0x124>)
 8006582:	68e0      	ldr	r0, [r4, #12]
 8006584:	688b      	ldr	r3, [r1, #8]
 8006586:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800658a:	4303      	orrs	r3, r0
 800658c:	608b      	str	r3, [r1, #8]
 800658e:	e78b      	b.n	80064a8 <HAL_RCC_ClockConfig+0x38>
 8006590:	40023c00 	.word	0x40023c00
 8006594:	40023800 	.word	0x40023800
 8006598:	08017774 	.word	0x08017774
 800659c:	20000018 	.word	0x20000018
 80065a0:	20000094 	.word	0x20000094

080065a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80065a6:	4a05      	ldr	r2, [pc, #20]	; (80065bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80065ae:	5cd3      	ldrb	r3, [r2, r3]
 80065b0:	4a03      	ldr	r2, [pc, #12]	; (80065c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80065b2:	6810      	ldr	r0, [r2, #0]
}
 80065b4:	40d8      	lsrs	r0, r3
 80065b6:	4770      	bx	lr
 80065b8:	40023800 	.word	0x40023800
 80065bc:	08017784 	.word	0x08017784
 80065c0:	20000018 	.word	0x20000018

080065c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065c4:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80065c6:	4a05      	ldr	r2, [pc, #20]	; (80065dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80065ce:	5cd3      	ldrb	r3, [r2, r3]
 80065d0:	4a03      	ldr	r2, [pc, #12]	; (80065e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80065d2:	6810      	ldr	r0, [r2, #0]
}
 80065d4:	40d8      	lsrs	r0, r3
 80065d6:	4770      	bx	lr
 80065d8:	40023800 	.word	0x40023800
 80065dc:	08017784 	.word	0x08017784
 80065e0:	20000018 	.word	0x20000018

080065e4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065e4:	6803      	ldr	r3, [r0, #0]
 80065e6:	f013 0f05 	tst.w	r3, #5
{
 80065ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ec:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065ee:	d105      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065f0:	6828      	ldr	r0, [r5, #0]
 80065f2:	f010 0002 	ands.w	r0, r0, #2
 80065f6:	d128      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80065f8:	b003      	add	sp, #12
 80065fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80065fc:	4c41      	ldr	r4, [pc, #260]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065fe:	4e42      	ldr	r6, [pc, #264]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8006600:	2300      	movs	r3, #0
 8006602:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006604:	f7fe fd4a 	bl	800509c <HAL_GetTick>
 8006608:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800660a:	6833      	ldr	r3, [r6, #0]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	d415      	bmi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006610:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8006614:	071b      	lsls	r3, r3, #28
 8006616:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800661a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800661e:	2301      	movs	r3, #1
 8006620:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006622:	f7fe fd3b 	bl	800509c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006626:	4c38      	ldr	r4, [pc, #224]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8006628:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	0118      	lsls	r0, r3, #4
 800662e:	d4df      	bmi.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006630:	f7fe fd34 	bl	800509c <HAL_GetTick>
 8006634:	1b80      	subs	r0, r0, r6
 8006636:	2802      	cmp	r0, #2
 8006638:	d9f7      	bls.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x46>
 800663a:	e004      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800663c:	f7fe fd2e 	bl	800509c <HAL_GetTick>
 8006640:	1bc0      	subs	r0, r0, r7
 8006642:	2802      	cmp	r0, #2
 8006644:	d9e1      	bls.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8006646:	2003      	movs	r0, #3
 8006648:	e7d6      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 800664a:	2300      	movs	r3, #0
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	4b2e      	ldr	r3, [pc, #184]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8006650:	4c2e      	ldr	r4, [pc, #184]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006654:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006658:	641a      	str	r2, [r3, #64]	; 0x40
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800666c:	f7fe fd16 	bl	800509c <HAL_GetTick>
 8006670:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	05d9      	lsls	r1, r3, #23
 8006676:	d51b      	bpl.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006678:	4c23      	ldr	r4, [pc, #140]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800667a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800667c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006680:	d11c      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006682:	68eb      	ldr	r3, [r5, #12]
 8006684:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006688:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800668c:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800668e:	d134      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006690:	6891      	ldr	r1, [r2, #8]
 8006692:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8006696:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800669a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800669e:	4301      	orrs	r1, r0
 80066a0:	6091      	str	r1, [r2, #8]
 80066a2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80066a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80066ac:	2000      	movs	r0, #0
 80066ae:	e7a3      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066b0:	f7fe fcf4 	bl	800509c <HAL_GetTick>
 80066b4:	1b80      	subs	r0, r0, r6
 80066b6:	2802      	cmp	r0, #2
 80066b8:	d9db      	bls.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80066ba:	e7c4      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066bc:	68ea      	ldr	r2, [r5, #12]
 80066be:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d0dd      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80066c8:	4a11      	ldr	r2, [pc, #68]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80066ca:	2101      	movs	r1, #1
 80066cc:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066d2:	2100      	movs	r1, #0
 80066d4:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80066d6:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80066da:	07da      	lsls	r2, r3, #31
 80066dc:	d5d1      	bpl.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 80066de:	f7fe fcdd 	bl	800509c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80066e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80066ea:	079b      	lsls	r3, r3, #30
 80066ec:	d4c9      	bmi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ee:	f7fe fcd5 	bl	800509c <HAL_GetTick>
 80066f2:	1b80      	subs	r0, r0, r6
 80066f4:	42b8      	cmp	r0, r7
 80066f6:	d9f7      	bls.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80066f8:	e7a5      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066fa:	6891      	ldr	r1, [r2, #8]
 80066fc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006700:	e7ce      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8006702:	bf00      	nop
 8006704:	42470068 	.word	0x42470068
 8006708:	40023800 	.word	0x40023800
 800670c:	40007000 	.word	0x40007000
 8006710:	42470e40 	.word	0x42470e40

08006714 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8006714:	2801      	cmp	r0, #1
 8006716:	d120      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006718:	4b11      	ldr	r3, [pc, #68]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800671a:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 800671c:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8006720:	d004      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8006722:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006724:	480f      	ldr	r0, [pc, #60]	; (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8006726:	bf18      	it	ne
 8006728:	2000      	movne	r0, #0
 800672a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800672c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800672e:	490c      	ldr	r1, [pc, #48]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006730:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006732:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006734:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006738:	bf4c      	ite	mi
 800673a:	4b0b      	ldrmi	r3, [pc, #44]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800673c:	4b0b      	ldrpl	r3, [pc, #44]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800673e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006742:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006746:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800674a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800674e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006750:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8006754:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8006758:	4770      	bx	lr
          frequency = 0U;
 800675a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40023800 	.word	0x40023800
 8006764:	00bb8000 	.word	0x00bb8000
 8006768:	017d7840 	.word	0x017d7840
 800676c:	00f42400 	.word	0x00f42400

08006770 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006770:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006772:	4604      	mov	r4, r0
 8006774:	b190      	cbz	r0, 800679c <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006776:	7943      	ldrb	r3, [r0, #5]
 8006778:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800677c:	b913      	cbnz	r3, 8006784 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800677e:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006780:	f7fe f998 	bl	8004ab4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006784:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006786:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8006788:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800678a:	6813      	ldr	r3, [r2, #0]
 800678c:	f043 0304 	orr.w	r3, r3, #4
 8006790:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006792:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8006794:	2301      	movs	r3, #1
 8006796:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006798:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 800679a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800679c:	2001      	movs	r0, #1
 800679e:	e7fc      	b.n	800679a <HAL_RNG_Init+0x2a>

080067a0 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	4604      	mov	r4, r0
 80067a4:	460e      	mov	r6, r1
 80067a6:	4615      	mov	r5, r2
 80067a8:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067aa:	6821      	ldr	r1, [r4, #0]
 80067ac:	688a      	ldr	r2, [r1, #8]
 80067ae:	ea36 0302 	bics.w	r3, r6, r2
 80067b2:	d001      	beq.n	80067b8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80067b4:	2000      	movs	r0, #0
 80067b6:	e02d      	b.n	8006814 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80067b8:	1c6b      	adds	r3, r5, #1
 80067ba:	d0f7      	beq.n	80067ac <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80067bc:	f7fe fc6e 	bl	800509c <HAL_GetTick>
 80067c0:	1bc0      	subs	r0, r0, r7
 80067c2:	4285      	cmp	r5, r0
 80067c4:	d8f1      	bhi.n	80067aa <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067ce:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d0:	6862      	ldr	r2, [r4, #4]
 80067d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80067d6:	d10a      	bne.n	80067ee <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 80067d8:	68a2      	ldr	r2, [r4, #8]
 80067da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80067de:	d002      	beq.n	80067e6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80067e4:	d103      	bne.n	80067ee <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ec:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80067f0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80067f4:	d107      	bne.n	8006806 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006804:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006806:	2301      	movs	r3, #1
 8006808:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800680c:	2300      	movs	r3, #0
 800680e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006812:	2003      	movs	r0, #3
}
 8006814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800681a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800681c:	4a12      	ldr	r2, [pc, #72]	; (8006868 <SPI_EndRxTxTransaction+0x50>)
 800681e:	4e13      	ldr	r6, [pc, #76]	; (800686c <SPI_EndRxTxTransaction+0x54>)
 8006820:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006822:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006824:	fbb5 f6f6 	udiv	r6, r5, r6
 8006828:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800682c:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8006832:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006834:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006836:	d10b      	bne.n	8006850 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006838:	460a      	mov	r2, r1
 800683a:	2180      	movs	r1, #128	; 0x80
 800683c:	f7ff ffb0 	bl	80067a0 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8006840:	b178      	cbz	r0, 8006862 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006842:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006844:	f043 0320 	orr.w	r3, r3, #32
 8006848:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800684a:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 800684c:	b002      	add	sp, #8
 800684e:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8006850:	9b01      	ldr	r3, [sp, #4]
 8006852:	b133      	cbz	r3, 8006862 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	3b01      	subs	r3, #1
 8006858:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	d4f6      	bmi.n	8006850 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8006862:	2000      	movs	r0, #0
 8006864:	e7f2      	b.n	800684c <SPI_EndRxTxTransaction+0x34>
 8006866:	bf00      	nop
 8006868:	20000018 	.word	0x20000018
 800686c:	016e3600 	.word	0x016e3600

08006870 <HAL_SPI_Init>:
{
 8006870:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8006872:	4604      	mov	r4, r0
 8006874:	2800      	cmp	r0, #0
 8006876:	d036      	beq.n	80068e6 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006878:	2300      	movs	r3, #0
 800687a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800687c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006880:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006884:	b91b      	cbnz	r3, 800688e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8006886:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800688a:	f7fe f92b 	bl	8004ae4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800688e:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006890:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006892:	2302      	movs	r3, #2
 8006894:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006898:	680b      	ldr	r3, [r1, #0]
 800689a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80068a0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80068a4:	4303      	orrs	r3, r0
 80068a6:	68e0      	ldr	r0, [r4, #12]
 80068a8:	4303      	orrs	r3, r0
 80068aa:	6920      	ldr	r0, [r4, #16]
 80068ac:	4303      	orrs	r3, r0
 80068ae:	6960      	ldr	r0, [r4, #20]
 80068b0:	4303      	orrs	r3, r0
 80068b2:	69e0      	ldr	r0, [r4, #28]
 80068b4:	4303      	orrs	r3, r0
 80068b6:	6a20      	ldr	r0, [r4, #32]
 80068b8:	4303      	orrs	r3, r0
 80068ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80068bc:	4303      	orrs	r3, r0
 80068be:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80068c2:	4303      	orrs	r3, r0
 80068c4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80068c6:	0c12      	lsrs	r2, r2, #16
 80068c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068ca:	f002 0204 	and.w	r2, r2, #4
 80068ce:	431a      	orrs	r2, r3
 80068d0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068d2:	69cb      	ldr	r3, [r1, #28]
 80068d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068d8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068da:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80068dc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068de:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80068e4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80068e6:	2001      	movs	r0, #1
 80068e8:	e7fc      	b.n	80068e4 <HAL_SPI_Init+0x74>

080068ea <HAL_SPI_Transmit>:
{
 80068ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068ee:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80068f0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80068f4:	2b01      	cmp	r3, #1
{
 80068f6:	4604      	mov	r4, r0
 80068f8:	460d      	mov	r5, r1
 80068fa:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80068fc:	f000 809b 	beq.w	8006a36 <HAL_SPI_Transmit+0x14c>
 8006900:	2301      	movs	r3, #1
 8006902:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006906:	f7fe fbc9 	bl	800509c <HAL_GetTick>
 800690a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800690c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006910:	b2c0      	uxtb	r0, r0
 8006912:	2801      	cmp	r0, #1
 8006914:	f040 808d 	bne.w	8006a32 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8006918:	2d00      	cmp	r5, #0
 800691a:	d05d      	beq.n	80069d8 <HAL_SPI_Transmit+0xee>
 800691c:	f1b8 0f00 	cmp.w	r8, #0
 8006920:	d05a      	beq.n	80069d8 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006922:	2303      	movs	r3, #3
 8006924:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006928:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800692c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800692e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006930:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8006934:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006936:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006938:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 800693c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800693e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8006944:	bf08      	it	eq
 8006946:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8006948:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800694c:	bf04      	itt	eq
 800694e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8006952:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006954:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006956:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006958:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800695a:	bf5e      	ittt	pl
 800695c:	6803      	ldrpl	r3, [r0, #0]
 800695e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8006962:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006964:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006968:	6863      	ldr	r3, [r4, #4]
 800696a:	d13e      	bne.n	80069ea <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696c:	b113      	cbz	r3, 8006974 <HAL_SPI_Transmit+0x8a>
 800696e:	f1b8 0f01 	cmp.w	r8, #1
 8006972:	d107      	bne.n	8006984 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006974:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006978:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800697a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800697c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800697e:	3b01      	subs	r3, #1
 8006980:	b29b      	uxth	r3, r3
 8006982:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006984:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006986:	b29b      	uxth	r3, r3
 8006988:	b9a3      	cbnz	r3, 80069b4 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800698a:	463a      	mov	r2, r7
 800698c:	4631      	mov	r1, r6
 800698e:	4620      	mov	r0, r4
 8006990:	f7ff ff42 	bl	8006818 <SPI_EndRxTxTransaction>
 8006994:	2800      	cmp	r0, #0
 8006996:	d149      	bne.n	8006a2c <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006998:	68a3      	ldr	r3, [r4, #8]
 800699a:	b933      	cbnz	r3, 80069aa <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	9201      	str	r2, [sp, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80069ac:	3000      	adds	r0, #0
 80069ae:	bf18      	it	ne
 80069b0:	2001      	movne	r0, #1
error:
 80069b2:	e011      	b.n	80069d8 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069b4:	6822      	ldr	r2, [r4, #0]
 80069b6:	6893      	ldr	r3, [r2, #8]
 80069b8:	0798      	lsls	r0, r3, #30
 80069ba:	d505      	bpl.n	80069c8 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069be:	f833 1b02 	ldrh.w	r1, [r3], #2
 80069c2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c4:	6323      	str	r3, [r4, #48]	; 0x30
 80069c6:	e7d9      	b.n	800697c <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c8:	f7fe fb68 	bl	800509c <HAL_GetTick>
 80069cc:	1bc0      	subs	r0, r0, r7
 80069ce:	42b0      	cmp	r0, r6
 80069d0:	d3d8      	bcc.n	8006984 <HAL_SPI_Transmit+0x9a>
 80069d2:	1c71      	adds	r1, r6, #1
 80069d4:	d0d6      	beq.n	8006984 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80069d6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80069d8:	2301      	movs	r3, #1
 80069da:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069de:	2300      	movs	r3, #0
 80069e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80069e4:	b002      	add	sp, #8
 80069e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ea:	b113      	cbz	r3, 80069f2 <HAL_SPI_Transmit+0x108>
 80069ec:	f1b8 0f01 	cmp.w	r8, #1
 80069f0:	d108      	bne.n	8006a04 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069f2:	782b      	ldrb	r3, [r5, #0]
 80069f4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069f8:	3301      	adds	r3, #1
 80069fa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80069fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006a04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0be      	beq.n	800698a <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	0792      	lsls	r2, r2, #30
 8006a12:	d503      	bpl.n	8006a1c <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	731a      	strb	r2, [r3, #12]
 8006a1a:	e7ec      	b.n	80069f6 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1c:	f7fe fb3e 	bl	800509c <HAL_GetTick>
 8006a20:	1bc0      	subs	r0, r0, r7
 8006a22:	42b0      	cmp	r0, r6
 8006a24:	d3ee      	bcc.n	8006a04 <HAL_SPI_Transmit+0x11a>
 8006a26:	1c73      	adds	r3, r6, #1
 8006a28:	d0ec      	beq.n	8006a04 <HAL_SPI_Transmit+0x11a>
 8006a2a:	e7d4      	b.n	80069d6 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	6563      	str	r3, [r4, #84]	; 0x54
 8006a30:	e7b2      	b.n	8006998 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8006a32:	2002      	movs	r0, #2
 8006a34:	e7d0      	b.n	80069d8 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8006a36:	2002      	movs	r0, #2
 8006a38:	e7d4      	b.n	80069e4 <HAL_SPI_Transmit+0xfa>

08006a3a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a3a:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a3c:	b189      	cbz	r1, 8006a62 <HAL_TIM_Encoder_Start+0x28>
 8006a3e:	2904      	cmp	r1, #4
 8006a40:	d007      	beq.n	8006a52 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a42:	6a1a      	ldr	r2, [r3, #32]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	f042 0201 	orr.w	r2, r2, #1
 8006a50:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	f022 0210 	bic.w	r2, r2, #16
 8006a58:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	f042 0210 	orr.w	r2, r2, #16
 8006a60:	e006      	b.n	8006a70 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	f022 0201 	bic.w	r2, r2, #1
 8006a68:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
}
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	4770      	bx	lr
	...

08006a80 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a80:	4a30      	ldr	r2, [pc, #192]	; (8006b44 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006a82:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a84:	4290      	cmp	r0, r2
 8006a86:	d012      	beq.n	8006aae <TIM_Base_SetConfig+0x2e>
 8006a88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006a8c:	d00f      	beq.n	8006aae <TIM_Base_SetConfig+0x2e>
 8006a8e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006a92:	4290      	cmp	r0, r2
 8006a94:	d00b      	beq.n	8006aae <TIM_Base_SetConfig+0x2e>
 8006a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a9a:	4290      	cmp	r0, r2
 8006a9c:	d007      	beq.n	8006aae <TIM_Base_SetConfig+0x2e>
 8006a9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aa2:	4290      	cmp	r0, r2
 8006aa4:	d003      	beq.n	8006aae <TIM_Base_SetConfig+0x2e>
 8006aa6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006aaa:	4290      	cmp	r0, r2
 8006aac:	d119      	bne.n	8006ae2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8006aae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ab4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ab6:	4a23      	ldr	r2, [pc, #140]	; (8006b44 <TIM_Base_SetConfig+0xc4>)
 8006ab8:	4290      	cmp	r0, r2
 8006aba:	d029      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006abc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ac0:	d026      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006ac2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006ac6:	4290      	cmp	r0, r2
 8006ac8:	d022      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ace:	4290      	cmp	r0, r2
 8006ad0:	d01e      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ad6:	4290      	cmp	r0, r2
 8006ad8:	d01a      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006ada:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006ade:	4290      	cmp	r0, r2
 8006ae0:	d016      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006ae2:	4a19      	ldr	r2, [pc, #100]	; (8006b48 <TIM_Base_SetConfig+0xc8>)
 8006ae4:	4290      	cmp	r0, r2
 8006ae6:	d013      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aec:	4290      	cmp	r0, r2
 8006aee:	d00f      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006af0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006af4:	4290      	cmp	r0, r2
 8006af6:	d00b      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006af8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006afc:	4290      	cmp	r0, r2
 8006afe:	d007      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006b00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b04:	4290      	cmp	r0, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_Base_SetConfig+0x90>
 8006b08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b0c:	4290      	cmp	r0, r2
 8006b0e:	d103      	bne.n	8006b18 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b10:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b16:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b18:	694a      	ldr	r2, [r1, #20]
 8006b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b1e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b20:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b22:	688b      	ldr	r3, [r1, #8]
 8006b24:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b26:	680b      	ldr	r3, [r1, #0]
 8006b28:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <TIM_Base_SetConfig+0xc4>)
 8006b2c:	4298      	cmp	r0, r3
 8006b2e:	d003      	beq.n	8006b38 <TIM_Base_SetConfig+0xb8>
 8006b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b34:	4298      	cmp	r0, r3
 8006b36:	d101      	bne.n	8006b3c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006b38:	690b      	ldr	r3, [r1, #16]
 8006b3a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	6143      	str	r3, [r0, #20]
}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40014000 	.word	0x40014000

08006b4c <HAL_TIM_Encoder_Init>:
{
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	460c      	mov	r4, r1
  if (htim == NULL)
 8006b50:	4605      	mov	r5, r0
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d043      	beq.n	8006bde <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006b5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b5e:	b91b      	cbnz	r3, 8006b68 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8006b60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006b64:	f7fd fff4 	bl	8004b50 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b68:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b6c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b74:	6883      	ldr	r3, [r0, #8]
 8006b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7a:	f023 0307 	bic.w	r3, r3, #7
 8006b7e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b80:	f7ff ff7e 	bl	8006a80 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8006b84:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8006b86:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006b88:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8006b8a:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b8c:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8006b8e:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8006b90:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b92:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b98:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b9c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8006ba0:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ba2:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ba6:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ba8:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006bb0:	68e1      	ldr	r1, [r4, #12]
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bb6:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bba:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8006bbe:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bc0:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bc2:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bc6:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8006bc8:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bca:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8006bce:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bd0:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 8006bd2:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8006bd4:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8006bd6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8006bda:	2000      	movs	r0, #0
}
 8006bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006bde:	2001      	movs	r0, #1
 8006be0:	e7fc      	b.n	8006bdc <HAL_TIM_Encoder_Init+0x90>
	...

08006be4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006be8:	2b01      	cmp	r3, #1
{
 8006bea:	b530      	push	{r4, r5, lr}
 8006bec:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006bf0:	d035      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bf8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8006bfa:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bfc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8006c00:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c02:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8006c04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006c08:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c0a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c0c:	4c15      	ldr	r4, [pc, #84]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	d01a      	beq.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c16:	d017      	beq.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c18:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d013      	beq.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c20:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d00f      	beq.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c28:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	d00b      	beq.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c30:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	d007      	beq.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c38:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	d003      	beq.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c40:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	d104      	bne.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c48:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c4e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006c5e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006c60:	bd30      	pop	{r4, r5, pc}
 8006c62:	bf00      	nop
 8006c64:	40010000 	.word	0x40010000

08006c68 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	6803      	ldr	r3, [r0, #0]
 8006c6a:	68c1      	ldr	r1, [r0, #12]
 8006c6c:	691a      	ldr	r2, [r3, #16]
{
 8006c6e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8006c74:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c76:	430a      	orrs	r2, r1
 8006c78:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c7a:	6925      	ldr	r5, [r4, #16]
 8006c7c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c7e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c80:	69c0      	ldr	r0, [r0, #28]
 8006c82:	432a      	orrs	r2, r5
 8006c84:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006c86:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c8a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8006c8c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c90:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006c92:	430a      	orrs	r2, r1
 8006c94:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c96:	695a      	ldr	r2, [r3, #20]
 8006c98:	69a1      	ldr	r1, [r4, #24]
 8006c9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c9e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ca4:	615a      	str	r2, [r3, #20]
 8006ca6:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca8:	d129      	bne.n	8006cfe <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <UART_SetConfig+0x4e>
 8006cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d120      	bne.n	8006cf8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cb6:	f7ff fc85 	bl	80065c4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cba:	6862      	ldr	r2, [r4, #4]
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	1892      	adds	r2, r2, r2
 8006cc0:	f04f 0119 	mov.w	r1, #25
 8006cc4:	eb46 0306 	adc.w	r3, r6, r6
 8006cc8:	fba0 0101 	umull	r0, r1, r0, r1
 8006ccc:	f7f9 ff76 	bl	8000bbc <__aeabi_uldivmod>
 8006cd0:	2164      	movs	r1, #100	; 0x64
 8006cd2:	fbb0 f5f1 	udiv	r5, r0, r1
 8006cd6:	fb01 0315 	mls	r3, r1, r5, r0
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	3332      	adds	r3, #50	; 0x32
 8006cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ce2:	f003 0207 	and.w	r2, r3, #7
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	6821      	ldr	r1, [r4, #0]
 8006cea:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8006cee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cf2:	4413      	add	r3, r2
 8006cf4:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cf8:	f7ff fc54 	bl	80065a4 <HAL_RCC_GetPCLK1Freq>
 8006cfc:	e7dd      	b.n	8006cba <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d002      	beq.n	8006d08 <UART_SetConfig+0xa0>
 8006d02:	4a10      	ldr	r2, [pc, #64]	; (8006d44 <UART_SetConfig+0xdc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d117      	bne.n	8006d38 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d08:	f7ff fc5c 	bl	80065c4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	2119      	movs	r1, #25
 8006d10:	009a      	lsls	r2, r3, #2
 8006d12:	fba0 0101 	umull	r0, r1, r0, r1
 8006d16:	0f9b      	lsrs	r3, r3, #30
 8006d18:	f7f9 ff50 	bl	8000bbc <__aeabi_uldivmod>
 8006d1c:	2264      	movs	r2, #100	; 0x64
 8006d1e:	fbb0 f1f2 	udiv	r1, r0, r2
 8006d22:	fb02 0311 	mls	r3, r2, r1, r0
 8006d26:	6824      	ldr	r4, [r4, #0]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	3332      	adds	r3, #50	; 0x32
 8006d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d30:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006d34:	60a3      	str	r3, [r4, #8]
}
 8006d36:	e7de      	b.n	8006cf6 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d38:	f7ff fc34 	bl	80065a4 <HAL_RCC_GetPCLK1Freq>
 8006d3c:	e7e6      	b.n	8006d0c <UART_SetConfig+0xa4>
 8006d3e:	bf00      	nop
 8006d40:	40011000 	.word	0x40011000
 8006d44:	40011400 	.word	0x40011400

08006d48 <HAL_UART_Init>:
{
 8006d48:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	b340      	cbz	r0, 8006da0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d56:	b91b      	cbnz	r3, 8006d60 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006d58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006d5c:	f7fd ff2e 	bl	8004bbc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006d60:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006d62:	2324      	movs	r3, #36	; 0x24
 8006d64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006d68:	68d3      	ldr	r3, [r2, #12]
 8006d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d6e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7ff ff79 	bl	8006c68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d86:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d8e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006d92:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006d9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006da0:	2001      	movs	r0, #1
 8006da2:	e7fc      	b.n	8006d9e <HAL_UART_Init+0x56>

08006da4 <__errno>:
 8006da4:	4b01      	ldr	r3, [pc, #4]	; (8006dac <__errno+0x8>)
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20000098 	.word	0x20000098

08006db0 <__libc_init_array>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	4e0d      	ldr	r6, [pc, #52]	; (8006de8 <__libc_init_array+0x38>)
 8006db4:	4c0d      	ldr	r4, [pc, #52]	; (8006dec <__libc_init_array+0x3c>)
 8006db6:	1ba4      	subs	r4, r4, r6
 8006db8:	10a4      	asrs	r4, r4, #2
 8006dba:	2500      	movs	r5, #0
 8006dbc:	42a5      	cmp	r5, r4
 8006dbe:	d109      	bne.n	8006dd4 <__libc_init_array+0x24>
 8006dc0:	4e0b      	ldr	r6, [pc, #44]	; (8006df0 <__libc_init_array+0x40>)
 8006dc2:	4c0c      	ldr	r4, [pc, #48]	; (8006df4 <__libc_init_array+0x44>)
 8006dc4:	f001 fe84 	bl	8008ad0 <_init>
 8006dc8:	1ba4      	subs	r4, r4, r6
 8006dca:	10a4      	asrs	r4, r4, #2
 8006dcc:	2500      	movs	r5, #0
 8006dce:	42a5      	cmp	r5, r4
 8006dd0:	d105      	bne.n	8006dde <__libc_init_array+0x2e>
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}
 8006dd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dd8:	4798      	blx	r3
 8006dda:	3501      	adds	r5, #1
 8006ddc:	e7ee      	b.n	8006dbc <__libc_init_array+0xc>
 8006dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006de2:	4798      	blx	r3
 8006de4:	3501      	adds	r5, #1
 8006de6:	e7f2      	b.n	8006dce <__libc_init_array+0x1e>
 8006de8:	08017bd0 	.word	0x08017bd0
 8006dec:	08017bd0 	.word	0x08017bd0
 8006df0:	08017bd0 	.word	0x08017bd0
 8006df4:	08017bd4 	.word	0x08017bd4

08006df8 <memcpy>:
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	1e43      	subs	r3, r0, #1
 8006dfc:	440a      	add	r2, r1
 8006dfe:	4291      	cmp	r1, r2
 8006e00:	d100      	bne.n	8006e04 <memcpy+0xc>
 8006e02:	bd10      	pop	{r4, pc}
 8006e04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e0c:	e7f7      	b.n	8006dfe <memcpy+0x6>

08006e0e <memset>:
 8006e0e:	4402      	add	r2, r0
 8006e10:	4603      	mov	r3, r0
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d100      	bne.n	8006e18 <memset+0xa>
 8006e16:	4770      	bx	lr
 8006e18:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1c:	e7f9      	b.n	8006e12 <memset+0x4>
	...

08006e20 <rand>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <rand+0x50>)
 8006e24:	681c      	ldr	r4, [r3, #0]
 8006e26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e28:	b97b      	cbnz	r3, 8006e4a <rand+0x2a>
 8006e2a:	2018      	movs	r0, #24
 8006e2c:	f000 f84c 	bl	8006ec8 <malloc>
 8006e30:	4a10      	ldr	r2, [pc, #64]	; (8006e74 <rand+0x54>)
 8006e32:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <rand+0x58>)
 8006e34:	63a0      	str	r0, [r4, #56]	; 0x38
 8006e36:	e9c0 2300 	strd	r2, r3, [r0]
 8006e3a:	4b10      	ldr	r3, [pc, #64]	; (8006e7c <rand+0x5c>)
 8006e3c:	6083      	str	r3, [r0, #8]
 8006e3e:	230b      	movs	r3, #11
 8006e40:	8183      	strh	r3, [r0, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	2300      	movs	r3, #0
 8006e46:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006e4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e4c:	480c      	ldr	r0, [pc, #48]	; (8006e80 <rand+0x60>)
 8006e4e:	690a      	ldr	r2, [r1, #16]
 8006e50:	694b      	ldr	r3, [r1, #20]
 8006e52:	4c0c      	ldr	r4, [pc, #48]	; (8006e84 <rand+0x64>)
 8006e54:	4350      	muls	r0, r2
 8006e56:	fb04 0003 	mla	r0, r4, r3, r0
 8006e5a:	fba2 2304 	umull	r2, r3, r2, r4
 8006e5e:	4403      	add	r3, r0
 8006e60:	1c54      	adds	r4, r2, #1
 8006e62:	f143 0500 	adc.w	r5, r3, #0
 8006e66:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8006e6a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20000098 	.word	0x20000098
 8006e74:	abcd330e 	.word	0xabcd330e
 8006e78:	e66d1234 	.word	0xe66d1234
 8006e7c:	0005deec 	.word	0x0005deec
 8006e80:	5851f42d 	.word	0x5851f42d
 8006e84:	4c957f2d 	.word	0x4c957f2d

08006e88 <siprintf>:
 8006e88:	b40e      	push	{r1, r2, r3}
 8006e8a:	b500      	push	{lr}
 8006e8c:	b09c      	sub	sp, #112	; 0x70
 8006e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e90:	9002      	str	r0, [sp, #8]
 8006e92:	9006      	str	r0, [sp, #24]
 8006e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e98:	4809      	ldr	r0, [pc, #36]	; (8006ec0 <siprintf+0x38>)
 8006e9a:	9107      	str	r1, [sp, #28]
 8006e9c:	9104      	str	r1, [sp, #16]
 8006e9e:	4909      	ldr	r1, [pc, #36]	; (8006ec4 <siprintf+0x3c>)
 8006ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea4:	9105      	str	r1, [sp, #20]
 8006ea6:	6800      	ldr	r0, [r0, #0]
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	a902      	add	r1, sp, #8
 8006eac:	f000 f916 	bl	80070dc <_svfiprintf_r>
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	b01c      	add	sp, #112	; 0x70
 8006eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ebc:	b003      	add	sp, #12
 8006ebe:	4770      	bx	lr
 8006ec0:	20000098 	.word	0x20000098
 8006ec4:	ffff0208 	.word	0xffff0208

08006ec8 <malloc>:
 8006ec8:	4b02      	ldr	r3, [pc, #8]	; (8006ed4 <malloc+0xc>)
 8006eca:	4601      	mov	r1, r0
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	f000 b851 	b.w	8006f74 <_malloc_r>
 8006ed2:	bf00      	nop
 8006ed4:	20000098 	.word	0x20000098

08006ed8 <_free_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4605      	mov	r5, r0
 8006edc:	2900      	cmp	r1, #0
 8006ede:	d045      	beq.n	8006f6c <_free_r+0x94>
 8006ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ee4:	1f0c      	subs	r4, r1, #4
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	bfb8      	it	lt
 8006eea:	18e4      	addlt	r4, r4, r3
 8006eec:	f000 fb9f 	bl	800762e <__malloc_lock>
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <_free_r+0x98>)
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	b933      	cbnz	r3, 8006f06 <_free_r+0x2e>
 8006ef8:	6063      	str	r3, [r4, #4]
 8006efa:	6014      	str	r4, [r2, #0]
 8006efc:	4628      	mov	r0, r5
 8006efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f02:	f000 bb95 	b.w	8007630 <__malloc_unlock>
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	d90c      	bls.n	8006f24 <_free_r+0x4c>
 8006f0a:	6821      	ldr	r1, [r4, #0]
 8006f0c:	1862      	adds	r2, r4, r1
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	bf04      	itt	eq
 8006f12:	681a      	ldreq	r2, [r3, #0]
 8006f14:	685b      	ldreq	r3, [r3, #4]
 8006f16:	6063      	str	r3, [r4, #4]
 8006f18:	bf04      	itt	eq
 8006f1a:	1852      	addeq	r2, r2, r1
 8006f1c:	6022      	streq	r2, [r4, #0]
 8006f1e:	6004      	str	r4, [r0, #0]
 8006f20:	e7ec      	b.n	8006efc <_free_r+0x24>
 8006f22:	4613      	mov	r3, r2
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	b10a      	cbz	r2, 8006f2c <_free_r+0x54>
 8006f28:	42a2      	cmp	r2, r4
 8006f2a:	d9fa      	bls.n	8006f22 <_free_r+0x4a>
 8006f2c:	6819      	ldr	r1, [r3, #0]
 8006f2e:	1858      	adds	r0, r3, r1
 8006f30:	42a0      	cmp	r0, r4
 8006f32:	d10b      	bne.n	8006f4c <_free_r+0x74>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	4401      	add	r1, r0
 8006f38:	1858      	adds	r0, r3, r1
 8006f3a:	4282      	cmp	r2, r0
 8006f3c:	6019      	str	r1, [r3, #0]
 8006f3e:	d1dd      	bne.n	8006efc <_free_r+0x24>
 8006f40:	6810      	ldr	r0, [r2, #0]
 8006f42:	6852      	ldr	r2, [r2, #4]
 8006f44:	605a      	str	r2, [r3, #4]
 8006f46:	4401      	add	r1, r0
 8006f48:	6019      	str	r1, [r3, #0]
 8006f4a:	e7d7      	b.n	8006efc <_free_r+0x24>
 8006f4c:	d902      	bls.n	8006f54 <_free_r+0x7c>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	602b      	str	r3, [r5, #0]
 8006f52:	e7d3      	b.n	8006efc <_free_r+0x24>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	1821      	adds	r1, r4, r0
 8006f58:	428a      	cmp	r2, r1
 8006f5a:	bf04      	itt	eq
 8006f5c:	6811      	ldreq	r1, [r2, #0]
 8006f5e:	6852      	ldreq	r2, [r2, #4]
 8006f60:	6062      	str	r2, [r4, #4]
 8006f62:	bf04      	itt	eq
 8006f64:	1809      	addeq	r1, r1, r0
 8006f66:	6021      	streq	r1, [r4, #0]
 8006f68:	605c      	str	r4, [r3, #4]
 8006f6a:	e7c7      	b.n	8006efc <_free_r+0x24>
 8006f6c:	bd38      	pop	{r3, r4, r5, pc}
 8006f6e:	bf00      	nop
 8006f70:	20012ab0 	.word	0x20012ab0

08006f74 <_malloc_r>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	1ccd      	adds	r5, r1, #3
 8006f78:	f025 0503 	bic.w	r5, r5, #3
 8006f7c:	3508      	adds	r5, #8
 8006f7e:	2d0c      	cmp	r5, #12
 8006f80:	bf38      	it	cc
 8006f82:	250c      	movcc	r5, #12
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	4606      	mov	r6, r0
 8006f88:	db01      	blt.n	8006f8e <_malloc_r+0x1a>
 8006f8a:	42a9      	cmp	r1, r5
 8006f8c:	d903      	bls.n	8006f96 <_malloc_r+0x22>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	6033      	str	r3, [r6, #0]
 8006f92:	2000      	movs	r0, #0
 8006f94:	bd70      	pop	{r4, r5, r6, pc}
 8006f96:	f000 fb4a 	bl	800762e <__malloc_lock>
 8006f9a:	4a21      	ldr	r2, [pc, #132]	; (8007020 <_malloc_r+0xac>)
 8006f9c:	6814      	ldr	r4, [r2, #0]
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	b991      	cbnz	r1, 8006fc8 <_malloc_r+0x54>
 8006fa2:	4c20      	ldr	r4, [pc, #128]	; (8007024 <_malloc_r+0xb0>)
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	b91b      	cbnz	r3, 8006fb0 <_malloc_r+0x3c>
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f000 fb17 	bl	80075dc <_sbrk_r>
 8006fae:	6020      	str	r0, [r4, #0]
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f000 fb12 	bl	80075dc <_sbrk_r>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d124      	bne.n	8007006 <_malloc_r+0x92>
 8006fbc:	230c      	movs	r3, #12
 8006fbe:	6033      	str	r3, [r6, #0]
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f000 fb35 	bl	8007630 <__malloc_unlock>
 8006fc6:	e7e4      	b.n	8006f92 <_malloc_r+0x1e>
 8006fc8:	680b      	ldr	r3, [r1, #0]
 8006fca:	1b5b      	subs	r3, r3, r5
 8006fcc:	d418      	bmi.n	8007000 <_malloc_r+0x8c>
 8006fce:	2b0b      	cmp	r3, #11
 8006fd0:	d90f      	bls.n	8006ff2 <_malloc_r+0x7e>
 8006fd2:	600b      	str	r3, [r1, #0]
 8006fd4:	50cd      	str	r5, [r1, r3]
 8006fd6:	18cc      	adds	r4, r1, r3
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f000 fb29 	bl	8007630 <__malloc_unlock>
 8006fde:	f104 000b 	add.w	r0, r4, #11
 8006fe2:	1d23      	adds	r3, r4, #4
 8006fe4:	f020 0007 	bic.w	r0, r0, #7
 8006fe8:	1ac3      	subs	r3, r0, r3
 8006fea:	d0d3      	beq.n	8006f94 <_malloc_r+0x20>
 8006fec:	425a      	negs	r2, r3
 8006fee:	50e2      	str	r2, [r4, r3]
 8006ff0:	e7d0      	b.n	8006f94 <_malloc_r+0x20>
 8006ff2:	428c      	cmp	r4, r1
 8006ff4:	684b      	ldr	r3, [r1, #4]
 8006ff6:	bf16      	itet	ne
 8006ff8:	6063      	strne	r3, [r4, #4]
 8006ffa:	6013      	streq	r3, [r2, #0]
 8006ffc:	460c      	movne	r4, r1
 8006ffe:	e7eb      	b.n	8006fd8 <_malloc_r+0x64>
 8007000:	460c      	mov	r4, r1
 8007002:	6849      	ldr	r1, [r1, #4]
 8007004:	e7cc      	b.n	8006fa0 <_malloc_r+0x2c>
 8007006:	1cc4      	adds	r4, r0, #3
 8007008:	f024 0403 	bic.w	r4, r4, #3
 800700c:	42a0      	cmp	r0, r4
 800700e:	d005      	beq.n	800701c <_malloc_r+0xa8>
 8007010:	1a21      	subs	r1, r4, r0
 8007012:	4630      	mov	r0, r6
 8007014:	f000 fae2 	bl	80075dc <_sbrk_r>
 8007018:	3001      	adds	r0, #1
 800701a:	d0cf      	beq.n	8006fbc <_malloc_r+0x48>
 800701c:	6025      	str	r5, [r4, #0]
 800701e:	e7db      	b.n	8006fd8 <_malloc_r+0x64>
 8007020:	20012ab0 	.word	0x20012ab0
 8007024:	20012ab4 	.word	0x20012ab4

08007028 <__ssputs_r>:
 8007028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	688e      	ldr	r6, [r1, #8]
 800702e:	429e      	cmp	r6, r3
 8007030:	4682      	mov	sl, r0
 8007032:	460c      	mov	r4, r1
 8007034:	4690      	mov	r8, r2
 8007036:	4699      	mov	r9, r3
 8007038:	d837      	bhi.n	80070aa <__ssputs_r+0x82>
 800703a:	898a      	ldrh	r2, [r1, #12]
 800703c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007040:	d031      	beq.n	80070a6 <__ssputs_r+0x7e>
 8007042:	6825      	ldr	r5, [r4, #0]
 8007044:	6909      	ldr	r1, [r1, #16]
 8007046:	1a6f      	subs	r7, r5, r1
 8007048:	6965      	ldr	r5, [r4, #20]
 800704a:	2302      	movs	r3, #2
 800704c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007050:	fb95 f5f3 	sdiv	r5, r5, r3
 8007054:	f109 0301 	add.w	r3, r9, #1
 8007058:	443b      	add	r3, r7
 800705a:	429d      	cmp	r5, r3
 800705c:	bf38      	it	cc
 800705e:	461d      	movcc	r5, r3
 8007060:	0553      	lsls	r3, r2, #21
 8007062:	d530      	bpl.n	80070c6 <__ssputs_r+0x9e>
 8007064:	4629      	mov	r1, r5
 8007066:	f7ff ff85 	bl	8006f74 <_malloc_r>
 800706a:	4606      	mov	r6, r0
 800706c:	b950      	cbnz	r0, 8007084 <__ssputs_r+0x5c>
 800706e:	230c      	movs	r3, #12
 8007070:	f8ca 3000 	str.w	r3, [sl]
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007084:	463a      	mov	r2, r7
 8007086:	6921      	ldr	r1, [r4, #16]
 8007088:	f7ff feb6 	bl	8006df8 <memcpy>
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007096:	81a3      	strh	r3, [r4, #12]
 8007098:	6126      	str	r6, [r4, #16]
 800709a:	6165      	str	r5, [r4, #20]
 800709c:	443e      	add	r6, r7
 800709e:	1bed      	subs	r5, r5, r7
 80070a0:	6026      	str	r6, [r4, #0]
 80070a2:	60a5      	str	r5, [r4, #8]
 80070a4:	464e      	mov	r6, r9
 80070a6:	454e      	cmp	r6, r9
 80070a8:	d900      	bls.n	80070ac <__ssputs_r+0x84>
 80070aa:	464e      	mov	r6, r9
 80070ac:	4632      	mov	r2, r6
 80070ae:	4641      	mov	r1, r8
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	f000 faa3 	bl	80075fc <memmove>
 80070b6:	68a3      	ldr	r3, [r4, #8]
 80070b8:	1b9b      	subs	r3, r3, r6
 80070ba:	60a3      	str	r3, [r4, #8]
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	441e      	add	r6, r3
 80070c0:	6026      	str	r6, [r4, #0]
 80070c2:	2000      	movs	r0, #0
 80070c4:	e7dc      	b.n	8007080 <__ssputs_r+0x58>
 80070c6:	462a      	mov	r2, r5
 80070c8:	f000 fab3 	bl	8007632 <_realloc_r>
 80070cc:	4606      	mov	r6, r0
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d1e2      	bne.n	8007098 <__ssputs_r+0x70>
 80070d2:	6921      	ldr	r1, [r4, #16]
 80070d4:	4650      	mov	r0, sl
 80070d6:	f7ff feff 	bl	8006ed8 <_free_r>
 80070da:	e7c8      	b.n	800706e <__ssputs_r+0x46>

080070dc <_svfiprintf_r>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	461d      	mov	r5, r3
 80070e2:	898b      	ldrh	r3, [r1, #12]
 80070e4:	061f      	lsls	r7, r3, #24
 80070e6:	b09d      	sub	sp, #116	; 0x74
 80070e8:	4680      	mov	r8, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4616      	mov	r6, r2
 80070ee:	d50f      	bpl.n	8007110 <_svfiprintf_r+0x34>
 80070f0:	690b      	ldr	r3, [r1, #16]
 80070f2:	b96b      	cbnz	r3, 8007110 <_svfiprintf_r+0x34>
 80070f4:	2140      	movs	r1, #64	; 0x40
 80070f6:	f7ff ff3d 	bl	8006f74 <_malloc_r>
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	6120      	str	r0, [r4, #16]
 80070fe:	b928      	cbnz	r0, 800710c <_svfiprintf_r+0x30>
 8007100:	230c      	movs	r3, #12
 8007102:	f8c8 3000 	str.w	r3, [r8]
 8007106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800710a:	e0c8      	b.n	800729e <_svfiprintf_r+0x1c2>
 800710c:	2340      	movs	r3, #64	; 0x40
 800710e:	6163      	str	r3, [r4, #20]
 8007110:	2300      	movs	r3, #0
 8007112:	9309      	str	r3, [sp, #36]	; 0x24
 8007114:	2320      	movs	r3, #32
 8007116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800711a:	2330      	movs	r3, #48	; 0x30
 800711c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007120:	9503      	str	r5, [sp, #12]
 8007122:	f04f 0b01 	mov.w	fp, #1
 8007126:	4637      	mov	r7, r6
 8007128:	463d      	mov	r5, r7
 800712a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800712e:	b10b      	cbz	r3, 8007134 <_svfiprintf_r+0x58>
 8007130:	2b25      	cmp	r3, #37	; 0x25
 8007132:	d13e      	bne.n	80071b2 <_svfiprintf_r+0xd6>
 8007134:	ebb7 0a06 	subs.w	sl, r7, r6
 8007138:	d00b      	beq.n	8007152 <_svfiprintf_r+0x76>
 800713a:	4653      	mov	r3, sl
 800713c:	4632      	mov	r2, r6
 800713e:	4621      	mov	r1, r4
 8007140:	4640      	mov	r0, r8
 8007142:	f7ff ff71 	bl	8007028 <__ssputs_r>
 8007146:	3001      	adds	r0, #1
 8007148:	f000 80a4 	beq.w	8007294 <_svfiprintf_r+0x1b8>
 800714c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714e:	4453      	add	r3, sl
 8007150:	9309      	str	r3, [sp, #36]	; 0x24
 8007152:	783b      	ldrb	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 809d 	beq.w	8007294 <_svfiprintf_r+0x1b8>
 800715a:	2300      	movs	r3, #0
 800715c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	9307      	str	r3, [sp, #28]
 8007168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800716c:	931a      	str	r3, [sp, #104]	; 0x68
 800716e:	462f      	mov	r7, r5
 8007170:	2205      	movs	r2, #5
 8007172:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007176:	4850      	ldr	r0, [pc, #320]	; (80072b8 <_svfiprintf_r+0x1dc>)
 8007178:	f7f9 f82a 	bl	80001d0 <memchr>
 800717c:	9b04      	ldr	r3, [sp, #16]
 800717e:	b9d0      	cbnz	r0, 80071b6 <_svfiprintf_r+0xda>
 8007180:	06d9      	lsls	r1, r3, #27
 8007182:	bf44      	itt	mi
 8007184:	2220      	movmi	r2, #32
 8007186:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800718a:	071a      	lsls	r2, r3, #28
 800718c:	bf44      	itt	mi
 800718e:	222b      	movmi	r2, #43	; 0x2b
 8007190:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007194:	782a      	ldrb	r2, [r5, #0]
 8007196:	2a2a      	cmp	r2, #42	; 0x2a
 8007198:	d015      	beq.n	80071c6 <_svfiprintf_r+0xea>
 800719a:	9a07      	ldr	r2, [sp, #28]
 800719c:	462f      	mov	r7, r5
 800719e:	2000      	movs	r0, #0
 80071a0:	250a      	movs	r5, #10
 80071a2:	4639      	mov	r1, r7
 80071a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a8:	3b30      	subs	r3, #48	; 0x30
 80071aa:	2b09      	cmp	r3, #9
 80071ac:	d94d      	bls.n	800724a <_svfiprintf_r+0x16e>
 80071ae:	b1b8      	cbz	r0, 80071e0 <_svfiprintf_r+0x104>
 80071b0:	e00f      	b.n	80071d2 <_svfiprintf_r+0xf6>
 80071b2:	462f      	mov	r7, r5
 80071b4:	e7b8      	b.n	8007128 <_svfiprintf_r+0x4c>
 80071b6:	4a40      	ldr	r2, [pc, #256]	; (80072b8 <_svfiprintf_r+0x1dc>)
 80071b8:	1a80      	subs	r0, r0, r2
 80071ba:	fa0b f000 	lsl.w	r0, fp, r0
 80071be:	4318      	orrs	r0, r3
 80071c0:	9004      	str	r0, [sp, #16]
 80071c2:	463d      	mov	r5, r7
 80071c4:	e7d3      	b.n	800716e <_svfiprintf_r+0x92>
 80071c6:	9a03      	ldr	r2, [sp, #12]
 80071c8:	1d11      	adds	r1, r2, #4
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	9103      	str	r1, [sp, #12]
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	db01      	blt.n	80071d6 <_svfiprintf_r+0xfa>
 80071d2:	9207      	str	r2, [sp, #28]
 80071d4:	e004      	b.n	80071e0 <_svfiprintf_r+0x104>
 80071d6:	4252      	negs	r2, r2
 80071d8:	f043 0302 	orr.w	r3, r3, #2
 80071dc:	9207      	str	r2, [sp, #28]
 80071de:	9304      	str	r3, [sp, #16]
 80071e0:	783b      	ldrb	r3, [r7, #0]
 80071e2:	2b2e      	cmp	r3, #46	; 0x2e
 80071e4:	d10c      	bne.n	8007200 <_svfiprintf_r+0x124>
 80071e6:	787b      	ldrb	r3, [r7, #1]
 80071e8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ea:	d133      	bne.n	8007254 <_svfiprintf_r+0x178>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	9203      	str	r2, [sp, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfb8      	it	lt
 80071f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071fc:	3702      	adds	r7, #2
 80071fe:	9305      	str	r3, [sp, #20]
 8007200:	4d2e      	ldr	r5, [pc, #184]	; (80072bc <_svfiprintf_r+0x1e0>)
 8007202:	7839      	ldrb	r1, [r7, #0]
 8007204:	2203      	movs	r2, #3
 8007206:	4628      	mov	r0, r5
 8007208:	f7f8 ffe2 	bl	80001d0 <memchr>
 800720c:	b138      	cbz	r0, 800721e <_svfiprintf_r+0x142>
 800720e:	2340      	movs	r3, #64	; 0x40
 8007210:	1b40      	subs	r0, r0, r5
 8007212:	fa03 f000 	lsl.w	r0, r3, r0
 8007216:	9b04      	ldr	r3, [sp, #16]
 8007218:	4303      	orrs	r3, r0
 800721a:	3701      	adds	r7, #1
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	7839      	ldrb	r1, [r7, #0]
 8007220:	4827      	ldr	r0, [pc, #156]	; (80072c0 <_svfiprintf_r+0x1e4>)
 8007222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007226:	2206      	movs	r2, #6
 8007228:	1c7e      	adds	r6, r7, #1
 800722a:	f7f8 ffd1 	bl	80001d0 <memchr>
 800722e:	2800      	cmp	r0, #0
 8007230:	d038      	beq.n	80072a4 <_svfiprintf_r+0x1c8>
 8007232:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <_svfiprintf_r+0x1e8>)
 8007234:	bb13      	cbnz	r3, 800727c <_svfiprintf_r+0x1a0>
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	3307      	adds	r3, #7
 800723a:	f023 0307 	bic.w	r3, r3, #7
 800723e:	3308      	adds	r3, #8
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007244:	444b      	add	r3, r9
 8007246:	9309      	str	r3, [sp, #36]	; 0x24
 8007248:	e76d      	b.n	8007126 <_svfiprintf_r+0x4a>
 800724a:	fb05 3202 	mla	r2, r5, r2, r3
 800724e:	2001      	movs	r0, #1
 8007250:	460f      	mov	r7, r1
 8007252:	e7a6      	b.n	80071a2 <_svfiprintf_r+0xc6>
 8007254:	2300      	movs	r3, #0
 8007256:	3701      	adds	r7, #1
 8007258:	9305      	str	r3, [sp, #20]
 800725a:	4619      	mov	r1, r3
 800725c:	250a      	movs	r5, #10
 800725e:	4638      	mov	r0, r7
 8007260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007264:	3a30      	subs	r2, #48	; 0x30
 8007266:	2a09      	cmp	r2, #9
 8007268:	d903      	bls.n	8007272 <_svfiprintf_r+0x196>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0c8      	beq.n	8007200 <_svfiprintf_r+0x124>
 800726e:	9105      	str	r1, [sp, #20]
 8007270:	e7c6      	b.n	8007200 <_svfiprintf_r+0x124>
 8007272:	fb05 2101 	mla	r1, r5, r1, r2
 8007276:	2301      	movs	r3, #1
 8007278:	4607      	mov	r7, r0
 800727a:	e7f0      	b.n	800725e <_svfiprintf_r+0x182>
 800727c:	ab03      	add	r3, sp, #12
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4622      	mov	r2, r4
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <_svfiprintf_r+0x1ec>)
 8007284:	a904      	add	r1, sp, #16
 8007286:	4640      	mov	r0, r8
 8007288:	f3af 8000 	nop.w
 800728c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007290:	4681      	mov	r9, r0
 8007292:	d1d6      	bne.n	8007242 <_svfiprintf_r+0x166>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	065b      	lsls	r3, r3, #25
 8007298:	f53f af35 	bmi.w	8007106 <_svfiprintf_r+0x2a>
 800729c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800729e:	b01d      	add	sp, #116	; 0x74
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	ab03      	add	r3, sp, #12
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4622      	mov	r2, r4
 80072aa:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <_svfiprintf_r+0x1ec>)
 80072ac:	a904      	add	r1, sp, #16
 80072ae:	4640      	mov	r0, r8
 80072b0:	f000 f882 	bl	80073b8 <_printf_i>
 80072b4:	e7ea      	b.n	800728c <_svfiprintf_r+0x1b0>
 80072b6:	bf00      	nop
 80072b8:	08017794 	.word	0x08017794
 80072bc:	0801779a 	.word	0x0801779a
 80072c0:	0801779e 	.word	0x0801779e
 80072c4:	00000000 	.word	0x00000000
 80072c8:	08007029 	.word	0x08007029

080072cc <_printf_common>:
 80072cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	4691      	mov	r9, r2
 80072d2:	461f      	mov	r7, r3
 80072d4:	688a      	ldr	r2, [r1, #8]
 80072d6:	690b      	ldr	r3, [r1, #16]
 80072d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072dc:	4293      	cmp	r3, r2
 80072de:	bfb8      	it	lt
 80072e0:	4613      	movlt	r3, r2
 80072e2:	f8c9 3000 	str.w	r3, [r9]
 80072e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072ea:	4606      	mov	r6, r0
 80072ec:	460c      	mov	r4, r1
 80072ee:	b112      	cbz	r2, 80072f6 <_printf_common+0x2a>
 80072f0:	3301      	adds	r3, #1
 80072f2:	f8c9 3000 	str.w	r3, [r9]
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	0699      	lsls	r1, r3, #26
 80072fa:	bf42      	ittt	mi
 80072fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007300:	3302      	addmi	r3, #2
 8007302:	f8c9 3000 	strmi.w	r3, [r9]
 8007306:	6825      	ldr	r5, [r4, #0]
 8007308:	f015 0506 	ands.w	r5, r5, #6
 800730c:	d107      	bne.n	800731e <_printf_common+0x52>
 800730e:	f104 0a19 	add.w	sl, r4, #25
 8007312:	68e3      	ldr	r3, [r4, #12]
 8007314:	f8d9 2000 	ldr.w	r2, [r9]
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	42ab      	cmp	r3, r5
 800731c:	dc28      	bgt.n	8007370 <_printf_common+0xa4>
 800731e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	3300      	adds	r3, #0
 8007326:	bf18      	it	ne
 8007328:	2301      	movne	r3, #1
 800732a:	0692      	lsls	r2, r2, #26
 800732c:	d42d      	bmi.n	800738a <_printf_common+0xbe>
 800732e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007332:	4639      	mov	r1, r7
 8007334:	4630      	mov	r0, r6
 8007336:	47c0      	blx	r8
 8007338:	3001      	adds	r0, #1
 800733a:	d020      	beq.n	800737e <_printf_common+0xb2>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	68e5      	ldr	r5, [r4, #12]
 8007340:	f8d9 2000 	ldr.w	r2, [r9]
 8007344:	f003 0306 	and.w	r3, r3, #6
 8007348:	2b04      	cmp	r3, #4
 800734a:	bf08      	it	eq
 800734c:	1aad      	subeq	r5, r5, r2
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	bf0c      	ite	eq
 8007354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007358:	2500      	movne	r5, #0
 800735a:	4293      	cmp	r3, r2
 800735c:	bfc4      	itt	gt
 800735e:	1a9b      	subgt	r3, r3, r2
 8007360:	18ed      	addgt	r5, r5, r3
 8007362:	f04f 0900 	mov.w	r9, #0
 8007366:	341a      	adds	r4, #26
 8007368:	454d      	cmp	r5, r9
 800736a:	d11a      	bne.n	80073a2 <_printf_common+0xd6>
 800736c:	2000      	movs	r0, #0
 800736e:	e008      	b.n	8007382 <_printf_common+0xb6>
 8007370:	2301      	movs	r3, #1
 8007372:	4652      	mov	r2, sl
 8007374:	4639      	mov	r1, r7
 8007376:	4630      	mov	r0, r6
 8007378:	47c0      	blx	r8
 800737a:	3001      	adds	r0, #1
 800737c:	d103      	bne.n	8007386 <_printf_common+0xba>
 800737e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007386:	3501      	adds	r5, #1
 8007388:	e7c3      	b.n	8007312 <_printf_common+0x46>
 800738a:	18e1      	adds	r1, r4, r3
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	2030      	movs	r0, #48	; 0x30
 8007390:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007394:	4422      	add	r2, r4
 8007396:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800739a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800739e:	3302      	adds	r3, #2
 80073a0:	e7c5      	b.n	800732e <_printf_common+0x62>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4622      	mov	r2, r4
 80073a6:	4639      	mov	r1, r7
 80073a8:	4630      	mov	r0, r6
 80073aa:	47c0      	blx	r8
 80073ac:	3001      	adds	r0, #1
 80073ae:	d0e6      	beq.n	800737e <_printf_common+0xb2>
 80073b0:	f109 0901 	add.w	r9, r9, #1
 80073b4:	e7d8      	b.n	8007368 <_printf_common+0x9c>
	...

080073b8 <_printf_i>:
 80073b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073c0:	460c      	mov	r4, r1
 80073c2:	7e09      	ldrb	r1, [r1, #24]
 80073c4:	b085      	sub	sp, #20
 80073c6:	296e      	cmp	r1, #110	; 0x6e
 80073c8:	4617      	mov	r7, r2
 80073ca:	4606      	mov	r6, r0
 80073cc:	4698      	mov	r8, r3
 80073ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073d0:	f000 80b3 	beq.w	800753a <_printf_i+0x182>
 80073d4:	d822      	bhi.n	800741c <_printf_i+0x64>
 80073d6:	2963      	cmp	r1, #99	; 0x63
 80073d8:	d036      	beq.n	8007448 <_printf_i+0x90>
 80073da:	d80a      	bhi.n	80073f2 <_printf_i+0x3a>
 80073dc:	2900      	cmp	r1, #0
 80073de:	f000 80b9 	beq.w	8007554 <_printf_i+0x19c>
 80073e2:	2958      	cmp	r1, #88	; 0x58
 80073e4:	f000 8083 	beq.w	80074ee <_printf_i+0x136>
 80073e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073f0:	e032      	b.n	8007458 <_printf_i+0xa0>
 80073f2:	2964      	cmp	r1, #100	; 0x64
 80073f4:	d001      	beq.n	80073fa <_printf_i+0x42>
 80073f6:	2969      	cmp	r1, #105	; 0x69
 80073f8:	d1f6      	bne.n	80073e8 <_printf_i+0x30>
 80073fa:	6820      	ldr	r0, [r4, #0]
 80073fc:	6813      	ldr	r3, [r2, #0]
 80073fe:	0605      	lsls	r5, r0, #24
 8007400:	f103 0104 	add.w	r1, r3, #4
 8007404:	d52a      	bpl.n	800745c <_printf_i+0xa4>
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6011      	str	r1, [r2, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	da03      	bge.n	8007416 <_printf_i+0x5e>
 800740e:	222d      	movs	r2, #45	; 0x2d
 8007410:	425b      	negs	r3, r3
 8007412:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007416:	486f      	ldr	r0, [pc, #444]	; (80075d4 <_printf_i+0x21c>)
 8007418:	220a      	movs	r2, #10
 800741a:	e039      	b.n	8007490 <_printf_i+0xd8>
 800741c:	2973      	cmp	r1, #115	; 0x73
 800741e:	f000 809d 	beq.w	800755c <_printf_i+0x1a4>
 8007422:	d808      	bhi.n	8007436 <_printf_i+0x7e>
 8007424:	296f      	cmp	r1, #111	; 0x6f
 8007426:	d020      	beq.n	800746a <_printf_i+0xb2>
 8007428:	2970      	cmp	r1, #112	; 0x70
 800742a:	d1dd      	bne.n	80073e8 <_printf_i+0x30>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	f043 0320 	orr.w	r3, r3, #32
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	e003      	b.n	800743e <_printf_i+0x86>
 8007436:	2975      	cmp	r1, #117	; 0x75
 8007438:	d017      	beq.n	800746a <_printf_i+0xb2>
 800743a:	2978      	cmp	r1, #120	; 0x78
 800743c:	d1d4      	bne.n	80073e8 <_printf_i+0x30>
 800743e:	2378      	movs	r3, #120	; 0x78
 8007440:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007444:	4864      	ldr	r0, [pc, #400]	; (80075d8 <_printf_i+0x220>)
 8007446:	e055      	b.n	80074f4 <_printf_i+0x13c>
 8007448:	6813      	ldr	r3, [r2, #0]
 800744a:	1d19      	adds	r1, r3, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6011      	str	r1, [r2, #0]
 8007450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007458:	2301      	movs	r3, #1
 800745a:	e08c      	b.n	8007576 <_printf_i+0x1be>
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6011      	str	r1, [r2, #0]
 8007460:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007464:	bf18      	it	ne
 8007466:	b21b      	sxthne	r3, r3
 8007468:	e7cf      	b.n	800740a <_printf_i+0x52>
 800746a:	6813      	ldr	r3, [r2, #0]
 800746c:	6825      	ldr	r5, [r4, #0]
 800746e:	1d18      	adds	r0, r3, #4
 8007470:	6010      	str	r0, [r2, #0]
 8007472:	0628      	lsls	r0, r5, #24
 8007474:	d501      	bpl.n	800747a <_printf_i+0xc2>
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	e002      	b.n	8007480 <_printf_i+0xc8>
 800747a:	0668      	lsls	r0, r5, #25
 800747c:	d5fb      	bpl.n	8007476 <_printf_i+0xbe>
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	4854      	ldr	r0, [pc, #336]	; (80075d4 <_printf_i+0x21c>)
 8007482:	296f      	cmp	r1, #111	; 0x6f
 8007484:	bf14      	ite	ne
 8007486:	220a      	movne	r2, #10
 8007488:	2208      	moveq	r2, #8
 800748a:	2100      	movs	r1, #0
 800748c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007490:	6865      	ldr	r5, [r4, #4]
 8007492:	60a5      	str	r5, [r4, #8]
 8007494:	2d00      	cmp	r5, #0
 8007496:	f2c0 8095 	blt.w	80075c4 <_printf_i+0x20c>
 800749a:	6821      	ldr	r1, [r4, #0]
 800749c:	f021 0104 	bic.w	r1, r1, #4
 80074a0:	6021      	str	r1, [r4, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d13d      	bne.n	8007522 <_printf_i+0x16a>
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	f040 808e 	bne.w	80075c8 <_printf_i+0x210>
 80074ac:	4665      	mov	r5, ip
 80074ae:	2a08      	cmp	r2, #8
 80074b0:	d10b      	bne.n	80074ca <_printf_i+0x112>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	07db      	lsls	r3, r3, #31
 80074b6:	d508      	bpl.n	80074ca <_printf_i+0x112>
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	6862      	ldr	r2, [r4, #4]
 80074bc:	429a      	cmp	r2, r3
 80074be:	bfde      	ittt	le
 80074c0:	2330      	movle	r3, #48	; 0x30
 80074c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074ca:	ebac 0305 	sub.w	r3, ip, r5
 80074ce:	6123      	str	r3, [r4, #16]
 80074d0:	f8cd 8000 	str.w	r8, [sp]
 80074d4:	463b      	mov	r3, r7
 80074d6:	aa03      	add	r2, sp, #12
 80074d8:	4621      	mov	r1, r4
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff fef6 	bl	80072cc <_printf_common>
 80074e0:	3001      	adds	r0, #1
 80074e2:	d14d      	bne.n	8007580 <_printf_i+0x1c8>
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074e8:	b005      	add	sp, #20
 80074ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074ee:	4839      	ldr	r0, [pc, #228]	; (80075d4 <_printf_i+0x21c>)
 80074f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074f4:	6813      	ldr	r3, [r2, #0]
 80074f6:	6821      	ldr	r1, [r4, #0]
 80074f8:	1d1d      	adds	r5, r3, #4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6015      	str	r5, [r2, #0]
 80074fe:	060a      	lsls	r2, r1, #24
 8007500:	d50b      	bpl.n	800751a <_printf_i+0x162>
 8007502:	07ca      	lsls	r2, r1, #31
 8007504:	bf44      	itt	mi
 8007506:	f041 0120 	orrmi.w	r1, r1, #32
 800750a:	6021      	strmi	r1, [r4, #0]
 800750c:	b91b      	cbnz	r3, 8007516 <_printf_i+0x15e>
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	f022 0220 	bic.w	r2, r2, #32
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	2210      	movs	r2, #16
 8007518:	e7b7      	b.n	800748a <_printf_i+0xd2>
 800751a:	064d      	lsls	r5, r1, #25
 800751c:	bf48      	it	mi
 800751e:	b29b      	uxthmi	r3, r3
 8007520:	e7ef      	b.n	8007502 <_printf_i+0x14a>
 8007522:	4665      	mov	r5, ip
 8007524:	fbb3 f1f2 	udiv	r1, r3, r2
 8007528:	fb02 3311 	mls	r3, r2, r1, r3
 800752c:	5cc3      	ldrb	r3, [r0, r3]
 800752e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007532:	460b      	mov	r3, r1
 8007534:	2900      	cmp	r1, #0
 8007536:	d1f5      	bne.n	8007524 <_printf_i+0x16c>
 8007538:	e7b9      	b.n	80074ae <_printf_i+0xf6>
 800753a:	6813      	ldr	r3, [r2, #0]
 800753c:	6825      	ldr	r5, [r4, #0]
 800753e:	6961      	ldr	r1, [r4, #20]
 8007540:	1d18      	adds	r0, r3, #4
 8007542:	6010      	str	r0, [r2, #0]
 8007544:	0628      	lsls	r0, r5, #24
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	d501      	bpl.n	800754e <_printf_i+0x196>
 800754a:	6019      	str	r1, [r3, #0]
 800754c:	e002      	b.n	8007554 <_printf_i+0x19c>
 800754e:	066a      	lsls	r2, r5, #25
 8007550:	d5fb      	bpl.n	800754a <_printf_i+0x192>
 8007552:	8019      	strh	r1, [r3, #0]
 8007554:	2300      	movs	r3, #0
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	4665      	mov	r5, ip
 800755a:	e7b9      	b.n	80074d0 <_printf_i+0x118>
 800755c:	6813      	ldr	r3, [r2, #0]
 800755e:	1d19      	adds	r1, r3, #4
 8007560:	6011      	str	r1, [r2, #0]
 8007562:	681d      	ldr	r5, [r3, #0]
 8007564:	6862      	ldr	r2, [r4, #4]
 8007566:	2100      	movs	r1, #0
 8007568:	4628      	mov	r0, r5
 800756a:	f7f8 fe31 	bl	80001d0 <memchr>
 800756e:	b108      	cbz	r0, 8007574 <_printf_i+0x1bc>
 8007570:	1b40      	subs	r0, r0, r5
 8007572:	6060      	str	r0, [r4, #4]
 8007574:	6863      	ldr	r3, [r4, #4]
 8007576:	6123      	str	r3, [r4, #16]
 8007578:	2300      	movs	r3, #0
 800757a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757e:	e7a7      	b.n	80074d0 <_printf_i+0x118>
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	462a      	mov	r2, r5
 8007584:	4639      	mov	r1, r7
 8007586:	4630      	mov	r0, r6
 8007588:	47c0      	blx	r8
 800758a:	3001      	adds	r0, #1
 800758c:	d0aa      	beq.n	80074e4 <_printf_i+0x12c>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	079b      	lsls	r3, r3, #30
 8007592:	d413      	bmi.n	80075bc <_printf_i+0x204>
 8007594:	68e0      	ldr	r0, [r4, #12]
 8007596:	9b03      	ldr	r3, [sp, #12]
 8007598:	4298      	cmp	r0, r3
 800759a:	bfb8      	it	lt
 800759c:	4618      	movlt	r0, r3
 800759e:	e7a3      	b.n	80074e8 <_printf_i+0x130>
 80075a0:	2301      	movs	r3, #1
 80075a2:	464a      	mov	r2, r9
 80075a4:	4639      	mov	r1, r7
 80075a6:	4630      	mov	r0, r6
 80075a8:	47c0      	blx	r8
 80075aa:	3001      	adds	r0, #1
 80075ac:	d09a      	beq.n	80074e4 <_printf_i+0x12c>
 80075ae:	3501      	adds	r5, #1
 80075b0:	68e3      	ldr	r3, [r4, #12]
 80075b2:	9a03      	ldr	r2, [sp, #12]
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	42ab      	cmp	r3, r5
 80075b8:	dcf2      	bgt.n	80075a0 <_printf_i+0x1e8>
 80075ba:	e7eb      	b.n	8007594 <_printf_i+0x1dc>
 80075bc:	2500      	movs	r5, #0
 80075be:	f104 0919 	add.w	r9, r4, #25
 80075c2:	e7f5      	b.n	80075b0 <_printf_i+0x1f8>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1ac      	bne.n	8007522 <_printf_i+0x16a>
 80075c8:	7803      	ldrb	r3, [r0, #0]
 80075ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075d2:	e76c      	b.n	80074ae <_printf_i+0xf6>
 80075d4:	080177a5 	.word	0x080177a5
 80075d8:	080177b6 	.word	0x080177b6

080075dc <_sbrk_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4c06      	ldr	r4, [pc, #24]	; (80075f8 <_sbrk_r+0x1c>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	4605      	mov	r5, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	f7fd fb72 	bl	8004cd0 <_sbrk>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_sbrk_r+0x1a>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_sbrk_r+0x1a>
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	20013ec8 	.word	0x20013ec8

080075fc <memmove>:
 80075fc:	4288      	cmp	r0, r1
 80075fe:	b510      	push	{r4, lr}
 8007600:	eb01 0302 	add.w	r3, r1, r2
 8007604:	d807      	bhi.n	8007616 <memmove+0x1a>
 8007606:	1e42      	subs	r2, r0, #1
 8007608:	4299      	cmp	r1, r3
 800760a:	d00a      	beq.n	8007622 <memmove+0x26>
 800760c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007610:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007614:	e7f8      	b.n	8007608 <memmove+0xc>
 8007616:	4283      	cmp	r3, r0
 8007618:	d9f5      	bls.n	8007606 <memmove+0xa>
 800761a:	1881      	adds	r1, r0, r2
 800761c:	1ad2      	subs	r2, r2, r3
 800761e:	42d3      	cmn	r3, r2
 8007620:	d100      	bne.n	8007624 <memmove+0x28>
 8007622:	bd10      	pop	{r4, pc}
 8007624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007628:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800762c:	e7f7      	b.n	800761e <memmove+0x22>

0800762e <__malloc_lock>:
 800762e:	4770      	bx	lr

08007630 <__malloc_unlock>:
 8007630:	4770      	bx	lr

08007632 <_realloc_r>:
 8007632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007634:	4607      	mov	r7, r0
 8007636:	4614      	mov	r4, r2
 8007638:	460e      	mov	r6, r1
 800763a:	b921      	cbnz	r1, 8007646 <_realloc_r+0x14>
 800763c:	4611      	mov	r1, r2
 800763e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007642:	f7ff bc97 	b.w	8006f74 <_malloc_r>
 8007646:	b922      	cbnz	r2, 8007652 <_realloc_r+0x20>
 8007648:	f7ff fc46 	bl	8006ed8 <_free_r>
 800764c:	4625      	mov	r5, r4
 800764e:	4628      	mov	r0, r5
 8007650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007652:	f000 f814 	bl	800767e <_malloc_usable_size_r>
 8007656:	42a0      	cmp	r0, r4
 8007658:	d20f      	bcs.n	800767a <_realloc_r+0x48>
 800765a:	4621      	mov	r1, r4
 800765c:	4638      	mov	r0, r7
 800765e:	f7ff fc89 	bl	8006f74 <_malloc_r>
 8007662:	4605      	mov	r5, r0
 8007664:	2800      	cmp	r0, #0
 8007666:	d0f2      	beq.n	800764e <_realloc_r+0x1c>
 8007668:	4631      	mov	r1, r6
 800766a:	4622      	mov	r2, r4
 800766c:	f7ff fbc4 	bl	8006df8 <memcpy>
 8007670:	4631      	mov	r1, r6
 8007672:	4638      	mov	r0, r7
 8007674:	f7ff fc30 	bl	8006ed8 <_free_r>
 8007678:	e7e9      	b.n	800764e <_realloc_r+0x1c>
 800767a:	4635      	mov	r5, r6
 800767c:	e7e7      	b.n	800764e <_realloc_r+0x1c>

0800767e <_malloc_usable_size_r>:
 800767e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007682:	1f18      	subs	r0, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfbc      	itt	lt
 8007688:	580b      	ldrlt	r3, [r1, r0]
 800768a:	18c0      	addlt	r0, r0, r3
 800768c:	4770      	bx	lr
	...

08007690 <floorf>:
 8007690:	ee10 3a10 	vmov	r3, s0
 8007694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007698:	0dca      	lsrs	r2, r1, #23
 800769a:	3a7f      	subs	r2, #127	; 0x7f
 800769c:	2a16      	cmp	r2, #22
 800769e:	dc2a      	bgt.n	80076f6 <floorf+0x66>
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	da11      	bge.n	80076c8 <floorf+0x38>
 80076a4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007708 <floorf+0x78>
 80076a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80076ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80076b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b4:	dd05      	ble.n	80076c2 <floorf+0x32>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da23      	bge.n	8007702 <floorf+0x72>
 80076ba:	4a14      	ldr	r2, [pc, #80]	; (800770c <floorf+0x7c>)
 80076bc:	2900      	cmp	r1, #0
 80076be:	bf18      	it	ne
 80076c0:	4613      	movne	r3, r2
 80076c2:	ee00 3a10 	vmov	s0, r3
 80076c6:	4770      	bx	lr
 80076c8:	4911      	ldr	r1, [pc, #68]	; (8007710 <floorf+0x80>)
 80076ca:	4111      	asrs	r1, r2
 80076cc:	420b      	tst	r3, r1
 80076ce:	d0fa      	beq.n	80076c6 <floorf+0x36>
 80076d0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007708 <floorf+0x78>
 80076d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80076d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80076dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e0:	ddef      	ble.n	80076c2 <floorf+0x32>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	bfbe      	ittt	lt
 80076e6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80076ea:	fa40 f202 	asrlt.w	r2, r0, r2
 80076ee:	189b      	addlt	r3, r3, r2
 80076f0:	ea23 0301 	bic.w	r3, r3, r1
 80076f4:	e7e5      	b.n	80076c2 <floorf+0x32>
 80076f6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80076fa:	d3e4      	bcc.n	80076c6 <floorf+0x36>
 80076fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007700:	4770      	bx	lr
 8007702:	2300      	movs	r3, #0
 8007704:	e7dd      	b.n	80076c2 <floorf+0x32>
 8007706:	bf00      	nop
 8007708:	7149f2ca 	.word	0x7149f2ca
 800770c:	bf800000 	.word	0xbf800000
 8007710:	007fffff 	.word	0x007fffff

08007714 <lrintf>:
 8007714:	ee10 3a10 	vmov	r3, s0
 8007718:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800771c:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8007720:	281e      	cmp	r0, #30
 8007722:	b082      	sub	sp, #8
 8007724:	dc2e      	bgt.n	8007784 <lrintf+0x70>
 8007726:	1c41      	adds	r1, r0, #1
 8007728:	da02      	bge.n	8007730 <lrintf+0x1c>
 800772a:	2000      	movs	r0, #0
 800772c:	b002      	add	sp, #8
 800772e:	4770      	bx	lr
 8007730:	2816      	cmp	r0, #22
 8007732:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8007736:	dd09      	ble.n	800774c <lrintf+0x38>
 8007738:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800773c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007740:	3a96      	subs	r2, #150	; 0x96
 8007742:	4090      	lsls	r0, r2
 8007744:	2900      	cmp	r1, #0
 8007746:	d0f1      	beq.n	800772c <lrintf+0x18>
 8007748:	4240      	negs	r0, r0
 800774a:	e7ef      	b.n	800772c <lrintf+0x18>
 800774c:	4b10      	ldr	r3, [pc, #64]	; (8007790 <lrintf+0x7c>)
 800774e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007752:	ed93 7a00 	vldr	s14, [r3]
 8007756:	ee37 0a00 	vadd.f32	s0, s14, s0
 800775a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800775e:	eddd 7a01 	vldr	s15, [sp, #4]
 8007762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007766:	ee17 3a90 	vmov	r3, s15
 800776a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800776e:	d0dc      	beq.n	800772a <lrintf+0x16>
 8007770:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007774:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800777c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007780:	40d8      	lsrs	r0, r3
 8007782:	e7df      	b.n	8007744 <lrintf+0x30>
 8007784:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007788:	ee17 0a90 	vmov	r0, s15
 800778c:	e7ce      	b.n	800772c <lrintf+0x18>
 800778e:	bf00      	nop
 8007790:	080177c8 	.word	0x080177c8

08007794 <rintf>:
 8007794:	b513      	push	{r0, r1, r4, lr}
 8007796:	ee10 1a10 	vmov	r1, s0
 800779a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800779e:	0ddc      	lsrs	r4, r3, #23
 80077a0:	3c7f      	subs	r4, #127	; 0x7f
 80077a2:	2c16      	cmp	r4, #22
 80077a4:	dc46      	bgt.n	8007834 <rintf+0xa0>
 80077a6:	b32b      	cbz	r3, 80077f4 <rintf+0x60>
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	ee10 2a10 	vmov	r2, s0
 80077ae:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80077b2:	da21      	bge.n	80077f8 <rintf+0x64>
 80077b4:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80077b8:	425b      	negs	r3, r3
 80077ba:	4a21      	ldr	r2, [pc, #132]	; (8007840 <rintf+0xac>)
 80077bc:	0a5b      	lsrs	r3, r3, #9
 80077be:	0d09      	lsrs	r1, r1, #20
 80077c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077c4:	0509      	lsls	r1, r1, #20
 80077c6:	430b      	orrs	r3, r1
 80077c8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	edd2 6a00 	vldr	s13, [r2]
 80077d4:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80077d8:	ed8d 7a01 	vstr	s14, [sp, #4]
 80077dc:	eddd 7a01 	vldr	s15, [sp, #4]
 80077e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077e4:	ee17 3a90 	vmov	r3, s15
 80077e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80077f0:	ee00 3a10 	vmov	s0, r3
 80077f4:	b002      	add	sp, #8
 80077f6:	bd10      	pop	{r4, pc}
 80077f8:	4b12      	ldr	r3, [pc, #72]	; (8007844 <rintf+0xb0>)
 80077fa:	4123      	asrs	r3, r4
 80077fc:	4219      	tst	r1, r3
 80077fe:	d0f9      	beq.n	80077f4 <rintf+0x60>
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	4219      	tst	r1, r3
 8007804:	d006      	beq.n	8007814 <rintf+0x80>
 8007806:	ea21 0203 	bic.w	r2, r1, r3
 800780a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800780e:	fa43 f404 	asr.w	r4, r3, r4
 8007812:	4322      	orrs	r2, r4
 8007814:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <rintf+0xac>)
 8007816:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800781a:	ed90 7a00 	vldr	s14, [r0]
 800781e:	ee07 2a90 	vmov	s15, r2
 8007822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007826:	edcd 7a01 	vstr	s15, [sp, #4]
 800782a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800782e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007832:	e7df      	b.n	80077f4 <rintf+0x60>
 8007834:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007838:	d3dc      	bcc.n	80077f4 <rintf+0x60>
 800783a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800783e:	e7d9      	b.n	80077f4 <rintf+0x60>
 8007840:	080177d0 	.word	0x080177d0
 8007844:	007fffff 	.word	0x007fffff

08007848 <sinf>:
 8007848:	ee10 3a10 	vmov	r3, s0
 800784c:	b507      	push	{r0, r1, r2, lr}
 800784e:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <sinf+0x7c>)
 8007850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007854:	4293      	cmp	r3, r2
 8007856:	dc05      	bgt.n	8007864 <sinf+0x1c>
 8007858:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80078c8 <sinf+0x80>
 800785c:	2000      	movs	r0, #0
 800785e:	f001 f869 	bl	8008934 <__kernel_sinf>
 8007862:	e004      	b.n	800786e <sinf+0x26>
 8007864:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007868:	db04      	blt.n	8007874 <sinf+0x2c>
 800786a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800786e:	b003      	add	sp, #12
 8007870:	f85d fb04 	ldr.w	pc, [sp], #4
 8007874:	4668      	mov	r0, sp
 8007876:	f000 fc4d 	bl	8008114 <__ieee754_rem_pio2f>
 800787a:	f000 0003 	and.w	r0, r0, #3
 800787e:	2801      	cmp	r0, #1
 8007880:	d008      	beq.n	8007894 <sinf+0x4c>
 8007882:	2802      	cmp	r0, #2
 8007884:	d00d      	beq.n	80078a2 <sinf+0x5a>
 8007886:	b9b0      	cbnz	r0, 80078b6 <sinf+0x6e>
 8007888:	2001      	movs	r0, #1
 800788a:	eddd 0a01 	vldr	s1, [sp, #4]
 800788e:	ed9d 0a00 	vldr	s0, [sp]
 8007892:	e7e4      	b.n	800785e <sinf+0x16>
 8007894:	eddd 0a01 	vldr	s1, [sp, #4]
 8007898:	ed9d 0a00 	vldr	s0, [sp]
 800789c:	f000 fd6a 	bl	8008374 <__kernel_cosf>
 80078a0:	e7e5      	b.n	800786e <sinf+0x26>
 80078a2:	2001      	movs	r0, #1
 80078a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80078a8:	ed9d 0a00 	vldr	s0, [sp]
 80078ac:	f001 f842 	bl	8008934 <__kernel_sinf>
 80078b0:	eeb1 0a40 	vneg.f32	s0, s0
 80078b4:	e7db      	b.n	800786e <sinf+0x26>
 80078b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80078ba:	ed9d 0a00 	vldr	s0, [sp]
 80078be:	f000 fd59 	bl	8008374 <__kernel_cosf>
 80078c2:	e7f5      	b.n	80078b0 <sinf+0x68>
 80078c4:	3f490fd8 	.word	0x3f490fd8
 80078c8:	00000000 	.word	0x00000000

080078cc <powf>:
 80078cc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80078d0:	ed2d 8b04 	vpush	{d8-d9}
 80078d4:	4ca7      	ldr	r4, [pc, #668]	; (8007b74 <powf+0x2a8>)
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	eef0 8a40 	vmov.f32	s17, s0
 80078dc:	eeb0 8a60 	vmov.f32	s16, s1
 80078e0:	f000 f958 	bl	8007b94 <__ieee754_powf>
 80078e4:	f994 5000 	ldrsb.w	r5, [r4]
 80078e8:	1c6b      	adds	r3, r5, #1
 80078ea:	eeb0 9a40 	vmov.f32	s18, s0
 80078ee:	4626      	mov	r6, r4
 80078f0:	d05f      	beq.n	80079b2 <powf+0xe6>
 80078f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80078f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fa:	d65a      	bvs.n	80079b2 <powf+0xe6>
 80078fc:	eef4 8a68 	vcmp.f32	s17, s17
 8007900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007904:	d721      	bvc.n	800794a <powf+0x7e>
 8007906:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800790a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790e:	d150      	bne.n	80079b2 <powf+0xe6>
 8007910:	2301      	movs	r3, #1
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4b98      	ldr	r3, [pc, #608]	; (8007b78 <powf+0x2ac>)
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	ee18 0a90 	vmov	r0, s17
 800791c:	2300      	movs	r3, #0
 800791e:	9308      	str	r3, [sp, #32]
 8007920:	f7f8 fe0a 	bl	8000538 <__aeabi_f2d>
 8007924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007928:	ee18 0a10 	vmov	r0, s16
 800792c:	f7f8 fe04 	bl	8000538 <__aeabi_f2d>
 8007930:	4b92      	ldr	r3, [pc, #584]	; (8007b7c <powf+0x2b0>)
 8007932:	2200      	movs	r2, #0
 8007934:	2d02      	cmp	r5, #2
 8007936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800793a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800793e:	d032      	beq.n	80079a6 <powf+0xda>
 8007940:	4668      	mov	r0, sp
 8007942:	f001 f83f 	bl	80089c4 <matherr>
 8007946:	bb40      	cbnz	r0, 800799a <powf+0xce>
 8007948:	e065      	b.n	8007a16 <powf+0x14a>
 800794a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8007b80 <powf+0x2b4>
 800794e:	eef4 8a69 	vcmp.f32	s17, s19
 8007952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007956:	d163      	bne.n	8007a20 <powf+0x154>
 8007958:	eeb4 8a69 	vcmp.f32	s16, s19
 800795c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007960:	d12e      	bne.n	80079c0 <powf+0xf4>
 8007962:	2301      	movs	r3, #1
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	4b84      	ldr	r3, [pc, #528]	; (8007b78 <powf+0x2ac>)
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	ee18 0a90 	vmov	r0, s17
 800796e:	2300      	movs	r3, #0
 8007970:	9308      	str	r3, [sp, #32]
 8007972:	f7f8 fde1 	bl	8000538 <__aeabi_f2d>
 8007976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800797a:	ee18 0a10 	vmov	r0, s16
 800797e:	f7f8 fddb 	bl	8000538 <__aeabi_f2d>
 8007982:	2200      	movs	r2, #0
 8007984:	2300      	movs	r3, #0
 8007986:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800798a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800798e:	2d00      	cmp	r5, #0
 8007990:	d0d6      	beq.n	8007940 <powf+0x74>
 8007992:	4b7a      	ldr	r3, [pc, #488]	; (8007b7c <powf+0x2b0>)
 8007994:	2200      	movs	r2, #0
 8007996:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	b11b      	cbz	r3, 80079a6 <powf+0xda>
 800799e:	f7ff fa01 	bl	8006da4 <__errno>
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	6003      	str	r3, [r0, #0]
 80079a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079aa:	f7f9 f8b7 	bl	8000b1c <__aeabi_d2f>
 80079ae:	ee09 0a10 	vmov	s18, r0
 80079b2:	eeb0 0a49 	vmov.f32	s0, s18
 80079b6:	b00a      	add	sp, #40	; 0x28
 80079b8:	ecbd 8b04 	vpop	{d8-d9}
 80079bc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80079c0:	eeb0 0a48 	vmov.f32	s0, s16
 80079c4:	f001 f807 	bl	80089d6 <finitef>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d0f2      	beq.n	80079b2 <powf+0xe6>
 80079cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80079d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d4:	d5ed      	bpl.n	80079b2 <powf+0xe6>
 80079d6:	2301      	movs	r3, #1
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	4b67      	ldr	r3, [pc, #412]	; (8007b78 <powf+0x2ac>)
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	ee18 0a90 	vmov	r0, s17
 80079e2:	2300      	movs	r3, #0
 80079e4:	9308      	str	r3, [sp, #32]
 80079e6:	f7f8 fda7 	bl	8000538 <__aeabi_f2d>
 80079ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ee:	ee18 0a10 	vmov	r0, s16
 80079f2:	f7f8 fda1 	bl	8000538 <__aeabi_f2d>
 80079f6:	f994 3000 	ldrsb.w	r3, [r4]
 80079fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079fe:	b923      	cbnz	r3, 8007a0a <powf+0x13e>
 8007a00:	2200      	movs	r2, #0
 8007a02:	2300      	movs	r3, #0
 8007a04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a08:	e79a      	b.n	8007940 <powf+0x74>
 8007a0a:	495e      	ldr	r1, [pc, #376]	; (8007b84 <powf+0x2b8>)
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d194      	bne.n	8007940 <powf+0x74>
 8007a16:	f7ff f9c5 	bl	8006da4 <__errno>
 8007a1a:	2321      	movs	r3, #33	; 0x21
 8007a1c:	6003      	str	r3, [r0, #0]
 8007a1e:	e7bc      	b.n	800799a <powf+0xce>
 8007a20:	f000 ffd9 	bl	80089d6 <finitef>
 8007a24:	4605      	mov	r5, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d173      	bne.n	8007b12 <powf+0x246>
 8007a2a:	eeb0 0a68 	vmov.f32	s0, s17
 8007a2e:	f000 ffd2 	bl	80089d6 <finitef>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d06d      	beq.n	8007b12 <powf+0x246>
 8007a36:	eeb0 0a48 	vmov.f32	s0, s16
 8007a3a:	f000 ffcc 	bl	80089d6 <finitef>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d067      	beq.n	8007b12 <powf+0x246>
 8007a42:	ee18 0a90 	vmov	r0, s17
 8007a46:	f7f8 fd77 	bl	8000538 <__aeabi_f2d>
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	ee18 0a10 	vmov	r0, s16
 8007a50:	4689      	mov	r9, r1
 8007a52:	f7f8 fd71 	bl	8000538 <__aeabi_f2d>
 8007a56:	eeb4 9a49 	vcmp.f32	s18, s18
 8007a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5e:	f994 4000 	ldrsb.w	r4, [r4]
 8007a62:	4b45      	ldr	r3, [pc, #276]	; (8007b78 <powf+0x2ac>)
 8007a64:	d713      	bvc.n	8007a8e <powf+0x1c2>
 8007a66:	2201      	movs	r2, #1
 8007a68:	e9cd 2300 	strd	r2, r3, [sp]
 8007a6c:	9508      	str	r5, [sp, #32]
 8007a6e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a76:	2c00      	cmp	r4, #0
 8007a78:	d0c2      	beq.n	8007a00 <powf+0x134>
 8007a7a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8007a7e:	ee17 0a90 	vmov	r0, s15
 8007a82:	f7f8 fd59 	bl	8000538 <__aeabi_f2d>
 8007a86:	2c02      	cmp	r4, #2
 8007a88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a8c:	e7c2      	b.n	8007a14 <powf+0x148>
 8007a8e:	2203      	movs	r2, #3
 8007a90:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007a94:	e9cd 2300 	strd	r2, r3, [sp]
 8007a98:	9508      	str	r5, [sp, #32]
 8007a9a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aa2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007aa6:	b9fc      	cbnz	r4, 8007ae8 <powf+0x21c>
 8007aa8:	4b37      	ldr	r3, [pc, #220]	; (8007b88 <powf+0x2bc>)
 8007aaa:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007aae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007aba:	d553      	bpl.n	8007b64 <powf+0x298>
 8007abc:	eeb0 0a48 	vmov.f32	s0, s16
 8007ac0:	f7ff fe68 	bl	8007794 <rintf>
 8007ac4:	eeb4 0a48 	vcmp.f32	s0, s16
 8007ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007acc:	d004      	beq.n	8007ad8 <powf+0x20c>
 8007ace:	4b2f      	ldr	r3, [pc, #188]	; (8007b8c <powf+0x2c0>)
 8007ad0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007ad4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ad8:	f996 3000 	ldrsb.w	r3, [r6]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d141      	bne.n	8007b64 <powf+0x298>
 8007ae0:	f7ff f960 	bl	8006da4 <__errno>
 8007ae4:	2322      	movs	r3, #34	; 0x22
 8007ae6:	e799      	b.n	8007a1c <powf+0x150>
 8007ae8:	4b29      	ldr	r3, [pc, #164]	; (8007b90 <powf+0x2c4>)
 8007aea:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007aee:	2200      	movs	r2, #0
 8007af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007af8:	d5ee      	bpl.n	8007ad8 <powf+0x20c>
 8007afa:	eeb0 0a48 	vmov.f32	s0, s16
 8007afe:	f7ff fe49 	bl	8007794 <rintf>
 8007b02:	eeb4 0a48 	vcmp.f32	s0, s16
 8007b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0a:	d0e5      	beq.n	8007ad8 <powf+0x20c>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	4b1d      	ldr	r3, [pc, #116]	; (8007b84 <powf+0x2b8>)
 8007b10:	e7e0      	b.n	8007ad4 <powf+0x208>
 8007b12:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1a:	f47f af4a 	bne.w	80079b2 <powf+0xe6>
 8007b1e:	eeb0 0a68 	vmov.f32	s0, s17
 8007b22:	f000 ff58 	bl	80089d6 <finitef>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f43f af43 	beq.w	80079b2 <powf+0xe6>
 8007b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b30:	f000 ff51 	bl	80089d6 <finitef>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f43f af3c 	beq.w	80079b2 <powf+0xe6>
 8007b3a:	2304      	movs	r3, #4
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <powf+0x2ac>)
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	ee18 0a90 	vmov	r0, s17
 8007b46:	2300      	movs	r3, #0
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	f7f8 fcf5 	bl	8000538 <__aeabi_f2d>
 8007b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b52:	ee18 0a10 	vmov	r0, s16
 8007b56:	f7f8 fcef 	bl	8000538 <__aeabi_f2d>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b60:	2300      	movs	r3, #0
 8007b62:	e7b7      	b.n	8007ad4 <powf+0x208>
 8007b64:	4668      	mov	r0, sp
 8007b66:	f000 ff2d 	bl	80089c4 <matherr>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f47f af15 	bne.w	800799a <powf+0xce>
 8007b70:	e7b6      	b.n	8007ae0 <powf+0x214>
 8007b72:	bf00      	nop
 8007b74:	200000fc 	.word	0x200000fc
 8007b78:	080177d8 	.word	0x080177d8
 8007b7c:	3ff00000 	.word	0x3ff00000
 8007b80:	00000000 	.word	0x00000000
 8007b84:	fff00000 	.word	0xfff00000
 8007b88:	47efffff 	.word	0x47efffff
 8007b8c:	c7efffff 	.word	0xc7efffff
 8007b90:	7ff00000 	.word	0x7ff00000

08007b94 <__ieee754_powf>:
 8007b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	ee10 5a90 	vmov	r5, s1
 8007b9c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007ba0:	ed2d 8b02 	vpush	{d8}
 8007ba4:	eeb0 8a40 	vmov.f32	s16, s0
 8007ba8:	eef0 8a60 	vmov.f32	s17, s1
 8007bac:	f000 8293 	beq.w	80080d6 <__ieee754_powf+0x542>
 8007bb0:	ee10 8a10 	vmov	r8, s0
 8007bb4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007bb8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007bbc:	dc06      	bgt.n	8007bcc <__ieee754_powf+0x38>
 8007bbe:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007bc2:	dd0a      	ble.n	8007bda <__ieee754_powf+0x46>
 8007bc4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007bc8:	f000 8285 	beq.w	80080d6 <__ieee754_powf+0x542>
 8007bcc:	ecbd 8b02 	vpop	{d8}
 8007bd0:	48d9      	ldr	r0, [pc, #868]	; (8007f38 <__ieee754_powf+0x3a4>)
 8007bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	f000 bf09 	b.w	80089ec <nanf>
 8007bda:	f1b8 0f00 	cmp.w	r8, #0
 8007bde:	da1d      	bge.n	8007c1c <__ieee754_powf+0x88>
 8007be0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007be4:	da2c      	bge.n	8007c40 <__ieee754_powf+0xac>
 8007be6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007bea:	db30      	blt.n	8007c4e <__ieee754_powf+0xba>
 8007bec:	15fb      	asrs	r3, r7, #23
 8007bee:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007bf2:	fa47 f603 	asr.w	r6, r7, r3
 8007bf6:	fa06 f303 	lsl.w	r3, r6, r3
 8007bfa:	42bb      	cmp	r3, r7
 8007bfc:	d127      	bne.n	8007c4e <__ieee754_powf+0xba>
 8007bfe:	f006 0601 	and.w	r6, r6, #1
 8007c02:	f1c6 0602 	rsb	r6, r6, #2
 8007c06:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007c0a:	d122      	bne.n	8007c52 <__ieee754_powf+0xbe>
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	f280 8268 	bge.w	80080e2 <__ieee754_powf+0x54e>
 8007c12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007c16:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007c1a:	e00d      	b.n	8007c38 <__ieee754_powf+0xa4>
 8007c1c:	2600      	movs	r6, #0
 8007c1e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007c22:	d1f0      	bne.n	8007c06 <__ieee754_powf+0x72>
 8007c24:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007c28:	f000 8255 	beq.w	80080d6 <__ieee754_powf+0x542>
 8007c2c:	dd0a      	ble.n	8007c44 <__ieee754_powf+0xb0>
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	f280 8254 	bge.w	80080dc <__ieee754_powf+0x548>
 8007c34:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8007f3c <__ieee754_powf+0x3a8>
 8007c38:	ecbd 8b02 	vpop	{d8}
 8007c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c40:	2602      	movs	r6, #2
 8007c42:	e7ec      	b.n	8007c1e <__ieee754_powf+0x8a>
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	daf5      	bge.n	8007c34 <__ieee754_powf+0xa0>
 8007c48:	eeb1 0a68 	vneg.f32	s0, s17
 8007c4c:	e7f4      	b.n	8007c38 <__ieee754_powf+0xa4>
 8007c4e:	2600      	movs	r6, #0
 8007c50:	e7d9      	b.n	8007c06 <__ieee754_powf+0x72>
 8007c52:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007c56:	d102      	bne.n	8007c5e <__ieee754_powf+0xca>
 8007c58:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007c5c:	e7ec      	b.n	8007c38 <__ieee754_powf+0xa4>
 8007c5e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007c62:	eeb0 0a48 	vmov.f32	s0, s16
 8007c66:	d108      	bne.n	8007c7a <__ieee754_powf+0xe6>
 8007c68:	f1b8 0f00 	cmp.w	r8, #0
 8007c6c:	db05      	blt.n	8007c7a <__ieee754_powf+0xe6>
 8007c6e:	ecbd 8b02 	vpop	{d8}
 8007c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c76:	f000 bb79 	b.w	800836c <__ieee754_sqrtf>
 8007c7a:	f000 fea5 	bl	80089c8 <fabsf>
 8007c7e:	b124      	cbz	r4, 8007c8a <__ieee754_powf+0xf6>
 8007c80:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007c84:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007c88:	d117      	bne.n	8007cba <__ieee754_powf+0x126>
 8007c8a:	2d00      	cmp	r5, #0
 8007c8c:	bfbc      	itt	lt
 8007c8e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007c92:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007c96:	f1b8 0f00 	cmp.w	r8, #0
 8007c9a:	dacd      	bge.n	8007c38 <__ieee754_powf+0xa4>
 8007c9c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007ca0:	ea54 0306 	orrs.w	r3, r4, r6
 8007ca4:	d104      	bne.n	8007cb0 <__ieee754_powf+0x11c>
 8007ca6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007caa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007cae:	e7c3      	b.n	8007c38 <__ieee754_powf+0xa4>
 8007cb0:	2e01      	cmp	r6, #1
 8007cb2:	d1c1      	bne.n	8007c38 <__ieee754_powf+0xa4>
 8007cb4:	eeb1 0a40 	vneg.f32	s0, s0
 8007cb8:	e7be      	b.n	8007c38 <__ieee754_powf+0xa4>
 8007cba:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007cbe:	3801      	subs	r0, #1
 8007cc0:	ea56 0300 	orrs.w	r3, r6, r0
 8007cc4:	d104      	bne.n	8007cd0 <__ieee754_powf+0x13c>
 8007cc6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007cca:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007cce:	e7b3      	b.n	8007c38 <__ieee754_powf+0xa4>
 8007cd0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007cd4:	dd6d      	ble.n	8007db2 <__ieee754_powf+0x21e>
 8007cd6:	4b9a      	ldr	r3, [pc, #616]	; (8007f40 <__ieee754_powf+0x3ac>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	dc06      	bgt.n	8007cea <__ieee754_powf+0x156>
 8007cdc:	2d00      	cmp	r5, #0
 8007cde:	daa9      	bge.n	8007c34 <__ieee754_powf+0xa0>
 8007ce0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8007f44 <__ieee754_powf+0x3b0>
 8007ce4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007ce8:	e7a6      	b.n	8007c38 <__ieee754_powf+0xa4>
 8007cea:	4b97      	ldr	r3, [pc, #604]	; (8007f48 <__ieee754_powf+0x3b4>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	dd02      	ble.n	8007cf6 <__ieee754_powf+0x162>
 8007cf0:	2d00      	cmp	r5, #0
 8007cf2:	dcf5      	bgt.n	8007ce0 <__ieee754_powf+0x14c>
 8007cf4:	e79e      	b.n	8007c34 <__ieee754_powf+0xa0>
 8007cf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007cfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007cfe:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8007f4c <__ieee754_powf+0x3b8>
 8007d02:	eef1 6a40 	vneg.f32	s13, s0
 8007d06:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007d0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007d12:	eee7 7a40 	vfms.f32	s15, s14, s0
 8007d16:	ee60 0a00 	vmul.f32	s1, s0, s0
 8007d1a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8007f50 <__ieee754_powf+0x3bc>
 8007d1e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8007d22:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8007f54 <__ieee754_powf+0x3c0>
 8007d26:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8007d2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007d2e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007f58 <__ieee754_powf+0x3c4>
 8007d32:	eeb0 6a67 	vmov.f32	s12, s15
 8007d36:	eea0 6a07 	vfma.f32	s12, s0, s14
 8007d3a:	ee16 3a10 	vmov	r3, s12
 8007d3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d42:	f023 030f 	bic.w	r3, r3, #15
 8007d46:	ee00 3a90 	vmov	s1, r3
 8007d4a:	eee6 0a87 	vfma.f32	s1, s13, s14
 8007d4e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007d52:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007d56:	f025 050f 	bic.w	r5, r5, #15
 8007d5a:	ee07 5a10 	vmov	s14, r5
 8007d5e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007d62:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007d6e:	3e01      	subs	r6, #1
 8007d70:	ea56 0200 	orrs.w	r2, r6, r0
 8007d74:	ee07 5a10 	vmov	s14, r5
 8007d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d7c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007d80:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007d84:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007d88:	ee17 4a10 	vmov	r4, s14
 8007d8c:	bf08      	it	eq
 8007d8e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007d92:	2c00      	cmp	r4, #0
 8007d94:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007d98:	f340 8184 	ble.w	80080a4 <__ieee754_powf+0x510>
 8007d9c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007da0:	f340 80fc 	ble.w	8007f9c <__ieee754_powf+0x408>
 8007da4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007f44 <__ieee754_powf+0x3b0>
 8007da8:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007dac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007db0:	e742      	b.n	8007c38 <__ieee754_powf+0xa4>
 8007db2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8007db6:	bfbf      	itttt	lt
 8007db8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8007f5c <__ieee754_powf+0x3c8>
 8007dbc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007dc0:	f06f 0217 	mvnlt.w	r2, #23
 8007dc4:	ee17 4a90 	vmovlt	r4, s15
 8007dc8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007dcc:	bfa8      	it	ge
 8007dce:	2200      	movge	r2, #0
 8007dd0:	3b7f      	subs	r3, #127	; 0x7f
 8007dd2:	4413      	add	r3, r2
 8007dd4:	4a62      	ldr	r2, [pc, #392]	; (8007f60 <__ieee754_powf+0x3cc>)
 8007dd6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007dda:	4294      	cmp	r4, r2
 8007ddc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007de0:	dd06      	ble.n	8007df0 <__ieee754_powf+0x25c>
 8007de2:	4a60      	ldr	r2, [pc, #384]	; (8007f64 <__ieee754_powf+0x3d0>)
 8007de4:	4294      	cmp	r4, r2
 8007de6:	f340 80a5 	ble.w	8007f34 <__ieee754_powf+0x3a0>
 8007dea:	3301      	adds	r3, #1
 8007dec:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007df0:	2400      	movs	r4, #0
 8007df2:	4a5d      	ldr	r2, [pc, #372]	; (8007f68 <__ieee754_powf+0x3d4>)
 8007df4:	00a7      	lsls	r7, r4, #2
 8007df6:	443a      	add	r2, r7
 8007df8:	ee07 1a90 	vmov	s15, r1
 8007dfc:	ed92 7a00 	vldr	s14, [r2]
 8007e00:	4a5a      	ldr	r2, [pc, #360]	; (8007f6c <__ieee754_powf+0x3d8>)
 8007e02:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007e06:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007e0a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007e0e:	1049      	asrs	r1, r1, #1
 8007e10:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007e14:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007e18:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007e1c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8007e20:	ee06 1a10 	vmov	s12, r1
 8007e24:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8007e28:	ee14 ca90 	vmov	ip, s9
 8007e2c:	ea02 0c0c 	and.w	ip, r2, ip
 8007e30:	ee05 ca10 	vmov	s10, ip
 8007e34:	eeb1 4a45 	vneg.f32	s8, s10
 8007e38:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007e3c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007e40:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007f70 <__ieee754_powf+0x3dc>
 8007e44:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8007e48:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007e4c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007e50:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8007e54:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8007e58:	eddf 5a46 	vldr	s11, [pc, #280]	; 8007f74 <__ieee754_powf+0x3e0>
 8007e5c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007e60:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f78 <__ieee754_powf+0x3e4>
 8007e64:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007e68:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007f4c <__ieee754_powf+0x3b8>
 8007e6c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007e70:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007f7c <__ieee754_powf+0x3e8>
 8007e74:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007e78:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007f80 <__ieee754_powf+0x3ec>
 8007e7c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8007e80:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007e84:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007e88:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8007e8c:	eef0 7a65 	vmov.f32	s15, s11
 8007e90:	eee3 6a87 	vfma.f32	s13, s7, s14
 8007e94:	eee5 7a05 	vfma.f32	s15, s10, s10
 8007e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9c:	ee17 1a90 	vmov	r1, s15
 8007ea0:	4011      	ands	r1, r2
 8007ea2:	ee07 1a90 	vmov	s15, r1
 8007ea6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8007eaa:	eddf 5a36 	vldr	s11, [pc, #216]	; 8007f84 <__ieee754_powf+0x3f0>
 8007eae:	eea4 7a05 	vfma.f32	s14, s8, s10
 8007eb2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007eb6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007eba:	eea7 7a86 	vfma.f32	s14, s15, s12
 8007ebe:	eeb0 6a47 	vmov.f32	s12, s14
 8007ec2:	eea5 6a27 	vfma.f32	s12, s10, s15
 8007ec6:	ee16 1a10 	vmov	r1, s12
 8007eca:	4011      	ands	r1, r2
 8007ecc:	ee06 1a90 	vmov	s13, r1
 8007ed0:	eee4 6a27 	vfma.f32	s13, s8, s15
 8007ed4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8007f88 <__ieee754_powf+0x3f4>
 8007ed8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007edc:	ee06 1a10 	vmov	s12, r1
 8007ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ee4:	eddf 7a29 	vldr	s15, [pc, #164]	; 8007f8c <__ieee754_powf+0x3f8>
 8007ee8:	4929      	ldr	r1, [pc, #164]	; (8007f90 <__ieee754_powf+0x3fc>)
 8007eea:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007eee:	4439      	add	r1, r7
 8007ef0:	edd1 7a00 	vldr	s15, [r1]
 8007ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ef8:	ee07 3a90 	vmov	s15, r3
 8007efc:	eef0 0a47 	vmov.f32	s1, s14
 8007f00:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <__ieee754_powf+0x400>)
 8007f02:	eee6 0a25 	vfma.f32	s1, s12, s11
 8007f06:	443b      	add	r3, r7
 8007f08:	ed93 5a00 	vldr	s10, [r3]
 8007f0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007f10:	ee70 0a85 	vadd.f32	s1, s1, s10
 8007f14:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8007f18:	ee17 3a90 	vmov	r3, s15
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f26:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007f2a:	eee6 7a65 	vfms.f32	s15, s12, s11
 8007f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f32:	e70e      	b.n	8007d52 <__ieee754_powf+0x1be>
 8007f34:	2401      	movs	r4, #1
 8007f36:	e75c      	b.n	8007df2 <__ieee754_powf+0x25e>
 8007f38:	08008b05 	.word	0x08008b05
 8007f3c:	00000000 	.word	0x00000000
 8007f40:	3f7ffff7 	.word	0x3f7ffff7
 8007f44:	7149f2ca 	.word	0x7149f2ca
 8007f48:	3f800007 	.word	0x3f800007
 8007f4c:	3eaaaaab 	.word	0x3eaaaaab
 8007f50:	36eca570 	.word	0x36eca570
 8007f54:	3fb8aa3b 	.word	0x3fb8aa3b
 8007f58:	3fb8aa00 	.word	0x3fb8aa00
 8007f5c:	4b800000 	.word	0x4b800000
 8007f60:	001cc471 	.word	0x001cc471
 8007f64:	005db3d6 	.word	0x005db3d6
 8007f68:	080177e0 	.word	0x080177e0
 8007f6c:	fffff000 	.word	0xfffff000
 8007f70:	3e6c3255 	.word	0x3e6c3255
 8007f74:	3e53f142 	.word	0x3e53f142
 8007f78:	3e8ba305 	.word	0x3e8ba305
 8007f7c:	3edb6db7 	.word	0x3edb6db7
 8007f80:	3f19999a 	.word	0x3f19999a
 8007f84:	3f763800 	.word	0x3f763800
 8007f88:	3f76384f 	.word	0x3f76384f
 8007f8c:	369dc3a0 	.word	0x369dc3a0
 8007f90:	080177f0 	.word	0x080177f0
 8007f94:	080177e8 	.word	0x080177e8
 8007f98:	3338aa3c 	.word	0x3338aa3c
 8007f9c:	f040 8092 	bne.w	80080c4 <__ieee754_powf+0x530>
 8007fa0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007f98 <__ieee754_powf+0x404>
 8007fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007fa8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007fac:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb4:	f73f aef6 	bgt.w	8007da4 <__ieee754_powf+0x210>
 8007fb8:	15db      	asrs	r3, r3, #23
 8007fba:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007fbe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007fc2:	4103      	asrs	r3, r0
 8007fc4:	4423      	add	r3, r4
 8007fc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007fca:	4947      	ldr	r1, [pc, #284]	; (80080e8 <__ieee754_powf+0x554>)
 8007fcc:	3a7f      	subs	r2, #127	; 0x7f
 8007fce:	4111      	asrs	r1, r2
 8007fd0:	ea23 0101 	bic.w	r1, r3, r1
 8007fd4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007fd8:	ee07 1a10 	vmov	s14, r1
 8007fdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007fe0:	f1c2 0217 	rsb	r2, r2, #23
 8007fe4:	4110      	asrs	r0, r2
 8007fe6:	2c00      	cmp	r4, #0
 8007fe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fec:	bfb8      	it	lt
 8007fee:	4240      	neglt	r0, r0
 8007ff0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007ff4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080ec <__ieee754_powf+0x558>
 8007ff8:	ee17 3a10 	vmov	r3, s14
 8007ffc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008000:	f023 030f 	bic.w	r3, r3, #15
 8008004:	ee07 3a10 	vmov	s14, r3
 8008008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800800c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008010:	eddf 7a37 	vldr	s15, [pc, #220]	; 80080f0 <__ieee754_powf+0x55c>
 8008014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008018:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800801c:	eddf 6a35 	vldr	s13, [pc, #212]	; 80080f4 <__ieee754_powf+0x560>
 8008020:	eeb0 0a67 	vmov.f32	s0, s15
 8008024:	eea7 0a26 	vfma.f32	s0, s14, s13
 8008028:	eeb0 6a40 	vmov.f32	s12, s0
 800802c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008030:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008034:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008038:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80080f8 <__ieee754_powf+0x564>
 800803c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80080fc <__ieee754_powf+0x568>
 8008040:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008044:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8008100 <__ieee754_powf+0x56c>
 8008048:	eee6 6a07 	vfma.f32	s13, s12, s14
 800804c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8008104 <__ieee754_powf+0x570>
 8008050:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008054:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8008108 <__ieee754_powf+0x574>
 8008058:	eee6 6a07 	vfma.f32	s13, s12, s14
 800805c:	eeb0 6a40 	vmov.f32	s12, s0
 8008060:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008064:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008068:	eeb0 7a46 	vmov.f32	s14, s12
 800806c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008070:	ee20 6a06 	vmul.f32	s12, s0, s12
 8008074:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008078:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800807c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008080:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008088:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800808c:	ee10 3a10 	vmov	r3, s0
 8008090:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008098:	da1a      	bge.n	80080d0 <__ieee754_powf+0x53c>
 800809a:	f000 fcad 	bl	80089f8 <scalbnf>
 800809e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80080a2:	e5c9      	b.n	8007c38 <__ieee754_powf+0xa4>
 80080a4:	4a19      	ldr	r2, [pc, #100]	; (800810c <__ieee754_powf+0x578>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	dd02      	ble.n	80080b0 <__ieee754_powf+0x51c>
 80080aa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008110 <__ieee754_powf+0x57c>
 80080ae:	e67b      	b.n	8007da8 <__ieee754_powf+0x214>
 80080b0:	d108      	bne.n	80080c4 <__ieee754_powf+0x530>
 80080b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80080b6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80080ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080be:	f6ff af7b 	blt.w	8007fb8 <__ieee754_powf+0x424>
 80080c2:	e7f2      	b.n	80080aa <__ieee754_powf+0x516>
 80080c4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80080c8:	f73f af76 	bgt.w	8007fb8 <__ieee754_powf+0x424>
 80080cc:	2000      	movs	r0, #0
 80080ce:	e78f      	b.n	8007ff0 <__ieee754_powf+0x45c>
 80080d0:	ee00 3a10 	vmov	s0, r3
 80080d4:	e7e3      	b.n	800809e <__ieee754_powf+0x50a>
 80080d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80080da:	e5ad      	b.n	8007c38 <__ieee754_powf+0xa4>
 80080dc:	eeb0 0a68 	vmov.f32	s0, s17
 80080e0:	e5aa      	b.n	8007c38 <__ieee754_powf+0xa4>
 80080e2:	eeb0 0a48 	vmov.f32	s0, s16
 80080e6:	e5a7      	b.n	8007c38 <__ieee754_powf+0xa4>
 80080e8:	007fffff 	.word	0x007fffff
 80080ec:	3f317218 	.word	0x3f317218
 80080f0:	35bfbe8c 	.word	0x35bfbe8c
 80080f4:	3f317200 	.word	0x3f317200
 80080f8:	3331bb4c 	.word	0x3331bb4c
 80080fc:	b5ddea0e 	.word	0xb5ddea0e
 8008100:	388ab355 	.word	0x388ab355
 8008104:	bb360b61 	.word	0xbb360b61
 8008108:	3e2aaaab 	.word	0x3e2aaaab
 800810c:	43160000 	.word	0x43160000
 8008110:	0da24260 	.word	0x0da24260

08008114 <__ieee754_rem_pio2f>:
 8008114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008116:	ee10 6a10 	vmov	r6, s0
 800811a:	4b86      	ldr	r3, [pc, #536]	; (8008334 <__ieee754_rem_pio2f+0x220>)
 800811c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008120:	429c      	cmp	r4, r3
 8008122:	b087      	sub	sp, #28
 8008124:	4605      	mov	r5, r0
 8008126:	dc05      	bgt.n	8008134 <__ieee754_rem_pio2f+0x20>
 8008128:	2300      	movs	r3, #0
 800812a:	ed85 0a00 	vstr	s0, [r5]
 800812e:	6043      	str	r3, [r0, #4]
 8008130:	2000      	movs	r0, #0
 8008132:	e020      	b.n	8008176 <__ieee754_rem_pio2f+0x62>
 8008134:	4b80      	ldr	r3, [pc, #512]	; (8008338 <__ieee754_rem_pio2f+0x224>)
 8008136:	429c      	cmp	r4, r3
 8008138:	dc38      	bgt.n	80081ac <__ieee754_rem_pio2f+0x98>
 800813a:	2e00      	cmp	r6, #0
 800813c:	f024 040f 	bic.w	r4, r4, #15
 8008140:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800833c <__ieee754_rem_pio2f+0x228>
 8008144:	4b7e      	ldr	r3, [pc, #504]	; (8008340 <__ieee754_rem_pio2f+0x22c>)
 8008146:	dd18      	ble.n	800817a <__ieee754_rem_pio2f+0x66>
 8008148:	429c      	cmp	r4, r3
 800814a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800814e:	bf09      	itett	eq
 8008150:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008344 <__ieee754_rem_pio2f+0x230>
 8008154:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008348 <__ieee754_rem_pio2f+0x234>
 8008158:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800815c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800834c <__ieee754_rem_pio2f+0x238>
 8008160:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008164:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008168:	edc0 6a00 	vstr	s13, [r0]
 800816c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008170:	edc0 7a01 	vstr	s15, [r0, #4]
 8008174:	2001      	movs	r0, #1
 8008176:	b007      	add	sp, #28
 8008178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800817a:	429c      	cmp	r4, r3
 800817c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008180:	bf09      	itett	eq
 8008182:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008344 <__ieee754_rem_pio2f+0x230>
 8008186:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008348 <__ieee754_rem_pio2f+0x234>
 800818a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800818e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800834c <__ieee754_rem_pio2f+0x238>
 8008192:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008196:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800819a:	edc0 6a00 	vstr	s13, [r0]
 800819e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80081a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081aa:	e7e4      	b.n	8008176 <__ieee754_rem_pio2f+0x62>
 80081ac:	4b68      	ldr	r3, [pc, #416]	; (8008350 <__ieee754_rem_pio2f+0x23c>)
 80081ae:	429c      	cmp	r4, r3
 80081b0:	dc71      	bgt.n	8008296 <__ieee754_rem_pio2f+0x182>
 80081b2:	f000 fc09 	bl	80089c8 <fabsf>
 80081b6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008354 <__ieee754_rem_pio2f+0x240>
 80081ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80081be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80081c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081c6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80081ca:	ee17 0a90 	vmov	r0, s15
 80081ce:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800833c <__ieee754_rem_pio2f+0x228>
 80081d2:	eeb1 7a46 	vneg.f32	s14, s12
 80081d6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80081da:	281f      	cmp	r0, #31
 80081dc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008348 <__ieee754_rem_pio2f+0x234>
 80081e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80081e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80081e8:	ee16 3a90 	vmov	r3, s13
 80081ec:	dc1c      	bgt.n	8008228 <__ieee754_rem_pio2f+0x114>
 80081ee:	1e47      	subs	r7, r0, #1
 80081f0:	4959      	ldr	r1, [pc, #356]	; (8008358 <__ieee754_rem_pio2f+0x244>)
 80081f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80081f6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80081fa:	428a      	cmp	r2, r1
 80081fc:	d014      	beq.n	8008228 <__ieee754_rem_pio2f+0x114>
 80081fe:	602b      	str	r3, [r5, #0]
 8008200:	ed95 7a00 	vldr	s14, [r5]
 8008204:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008208:	2e00      	cmp	r6, #0
 800820a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800820e:	ed85 0a01 	vstr	s0, [r5, #4]
 8008212:	dab0      	bge.n	8008176 <__ieee754_rem_pio2f+0x62>
 8008214:	eeb1 7a47 	vneg.f32	s14, s14
 8008218:	eeb1 0a40 	vneg.f32	s0, s0
 800821c:	ed85 7a00 	vstr	s14, [r5]
 8008220:	ed85 0a01 	vstr	s0, [r5, #4]
 8008224:	4240      	negs	r0, r0
 8008226:	e7a6      	b.n	8008176 <__ieee754_rem_pio2f+0x62>
 8008228:	15e4      	asrs	r4, r4, #23
 800822a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800822e:	1aa2      	subs	r2, r4, r2
 8008230:	2a08      	cmp	r2, #8
 8008232:	dde4      	ble.n	80081fe <__ieee754_rem_pio2f+0xea>
 8008234:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008344 <__ieee754_rem_pio2f+0x230>
 8008238:	eef0 6a40 	vmov.f32	s13, s0
 800823c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008240:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008244:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008248:	eddf 7a40 	vldr	s15, [pc, #256]	; 800834c <__ieee754_rem_pio2f+0x238>
 800824c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008250:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008254:	eef0 7a40 	vmov.f32	s15, s0
 8008258:	ee15 3a90 	vmov	r3, s11
 800825c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008260:	1aa4      	subs	r4, r4, r2
 8008262:	2c19      	cmp	r4, #25
 8008264:	dc04      	bgt.n	8008270 <__ieee754_rem_pio2f+0x15c>
 8008266:	edc5 5a00 	vstr	s11, [r5]
 800826a:	eeb0 0a66 	vmov.f32	s0, s13
 800826e:	e7c7      	b.n	8008200 <__ieee754_rem_pio2f+0xec>
 8008270:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800835c <__ieee754_rem_pio2f+0x248>
 8008274:	eeb0 0a66 	vmov.f32	s0, s13
 8008278:	eea7 0a25 	vfma.f32	s0, s14, s11
 800827c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008280:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008284:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008360 <__ieee754_rem_pio2f+0x24c>
 8008288:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800828c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008290:	ed85 7a00 	vstr	s14, [r5]
 8008294:	e7b4      	b.n	8008200 <__ieee754_rem_pio2f+0xec>
 8008296:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800829a:	db06      	blt.n	80082aa <__ieee754_rem_pio2f+0x196>
 800829c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80082a0:	edc0 7a01 	vstr	s15, [r0, #4]
 80082a4:	edc0 7a00 	vstr	s15, [r0]
 80082a8:	e742      	b.n	8008130 <__ieee754_rem_pio2f+0x1c>
 80082aa:	15e2      	asrs	r2, r4, #23
 80082ac:	3a86      	subs	r2, #134	; 0x86
 80082ae:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082ba:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008364 <__ieee754_rem_pio2f+0x250>
 80082be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80082c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80082ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80082ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80082d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082da:	ed8d 7a04 	vstr	s14, [sp, #16]
 80082de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80082e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80082e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ea:	edcd 7a05 	vstr	s15, [sp, #20]
 80082ee:	d11e      	bne.n	800832e <__ieee754_rem_pio2f+0x21a>
 80082f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80082f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f8:	bf0c      	ite	eq
 80082fa:	2301      	moveq	r3, #1
 80082fc:	2302      	movne	r3, #2
 80082fe:	491a      	ldr	r1, [pc, #104]	; (8008368 <__ieee754_rem_pio2f+0x254>)
 8008300:	9101      	str	r1, [sp, #4]
 8008302:	2102      	movs	r1, #2
 8008304:	9100      	str	r1, [sp, #0]
 8008306:	a803      	add	r0, sp, #12
 8008308:	4629      	mov	r1, r5
 800830a:	f000 f891 	bl	8008430 <__kernel_rem_pio2f>
 800830e:	2e00      	cmp	r6, #0
 8008310:	f6bf af31 	bge.w	8008176 <__ieee754_rem_pio2f+0x62>
 8008314:	edd5 7a00 	vldr	s15, [r5]
 8008318:	eef1 7a67 	vneg.f32	s15, s15
 800831c:	edc5 7a00 	vstr	s15, [r5]
 8008320:	edd5 7a01 	vldr	s15, [r5, #4]
 8008324:	eef1 7a67 	vneg.f32	s15, s15
 8008328:	edc5 7a01 	vstr	s15, [r5, #4]
 800832c:	e77a      	b.n	8008224 <__ieee754_rem_pio2f+0x110>
 800832e:	2303      	movs	r3, #3
 8008330:	e7e5      	b.n	80082fe <__ieee754_rem_pio2f+0x1ea>
 8008332:	bf00      	nop
 8008334:	3f490fd8 	.word	0x3f490fd8
 8008338:	4016cbe3 	.word	0x4016cbe3
 800833c:	3fc90f80 	.word	0x3fc90f80
 8008340:	3fc90fd0 	.word	0x3fc90fd0
 8008344:	37354400 	.word	0x37354400
 8008348:	37354443 	.word	0x37354443
 800834c:	2e85a308 	.word	0x2e85a308
 8008350:	43490f80 	.word	0x43490f80
 8008354:	3f22f984 	.word	0x3f22f984
 8008358:	080177f8 	.word	0x080177f8
 800835c:	2e85a300 	.word	0x2e85a300
 8008360:	248d3132 	.word	0x248d3132
 8008364:	43800000 	.word	0x43800000
 8008368:	08017878 	.word	0x08017878

0800836c <__ieee754_sqrtf>:
 800836c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008370:	4770      	bx	lr
	...

08008374 <__kernel_cosf>:
 8008374:	ee10 3a10 	vmov	r3, s0
 8008378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800837c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008384:	da05      	bge.n	8008392 <__kernel_cosf+0x1e>
 8008386:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800838a:	ee17 2a90 	vmov	r2, s15
 800838e:	2a00      	cmp	r2, #0
 8008390:	d03b      	beq.n	800840a <__kernel_cosf+0x96>
 8008392:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008396:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800839a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008410 <__kernel_cosf+0x9c>
 800839e:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <__kernel_cosf+0xa0>)
 80083a0:	ee66 7a07 	vmul.f32	s15, s12, s14
 80083a4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008418 <__kernel_cosf+0xa4>
 80083a8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80083ac:	4293      	cmp	r3, r2
 80083ae:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800841c <__kernel_cosf+0xa8>
 80083b2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80083b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008420 <__kernel_cosf+0xac>
 80083ba:	eea5 7a86 	vfma.f32	s14, s11, s12
 80083be:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008424 <__kernel_cosf+0xb0>
 80083c2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80083c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008428 <__kernel_cosf+0xb4>
 80083ca:	eea5 7a86 	vfma.f32	s14, s11, s12
 80083ce:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80083d2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80083d6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80083da:	dc04      	bgt.n	80083e6 <__kernel_cosf+0x72>
 80083dc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80083e0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80083e4:	4770      	bx	lr
 80083e6:	4a11      	ldr	r2, [pc, #68]	; (800842c <__kernel_cosf+0xb8>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	bfda      	itte	le
 80083ec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80083f0:	ee07 3a10 	vmovle	s14, r3
 80083f4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80083f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083fc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008400:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008404:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008408:	4770      	bx	lr
 800840a:	eeb0 0a66 	vmov.f32	s0, s13
 800840e:	4770      	bx	lr
 8008410:	ad47d74e 	.word	0xad47d74e
 8008414:	3e999999 	.word	0x3e999999
 8008418:	310f74f6 	.word	0x310f74f6
 800841c:	b493f27c 	.word	0xb493f27c
 8008420:	37d00d01 	.word	0x37d00d01
 8008424:	bab60b61 	.word	0xbab60b61
 8008428:	3d2aaaab 	.word	0x3d2aaaab
 800842c:	3f480000 	.word	0x3f480000

08008430 <__kernel_rem_pio2f>:
 8008430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	ed2d 8b04 	vpush	{d8-d9}
 8008438:	b0d7      	sub	sp, #348	; 0x15c
 800843a:	469b      	mov	fp, r3
 800843c:	460e      	mov	r6, r1
 800843e:	4bbe      	ldr	r3, [pc, #760]	; (8008738 <__kernel_rem_pio2f+0x308>)
 8008440:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008442:	9002      	str	r0, [sp, #8]
 8008444:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008448:	9865      	ldr	r0, [sp, #404]	; 0x194
 800844a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008748 <__kernel_rem_pio2f+0x318>
 800844e:	1ed1      	subs	r1, r2, #3
 8008450:	2308      	movs	r3, #8
 8008452:	fb91 f1f3 	sdiv	r1, r1, r3
 8008456:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800845a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800845e:	1c4c      	adds	r4, r1, #1
 8008460:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008464:	eba1 050a 	sub.w	r5, r1, sl
 8008468:	aa1a      	add	r2, sp, #104	; 0x68
 800846a:	eb09 070a 	add.w	r7, r9, sl
 800846e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008472:	4696      	mov	lr, r2
 8008474:	2300      	movs	r3, #0
 8008476:	42bb      	cmp	r3, r7
 8008478:	dd0f      	ble.n	800849a <__kernel_rem_pio2f+0x6a>
 800847a:	af42      	add	r7, sp, #264	; 0x108
 800847c:	2200      	movs	r2, #0
 800847e:	454a      	cmp	r2, r9
 8008480:	dc27      	bgt.n	80084d2 <__kernel_rem_pio2f+0xa2>
 8008482:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008486:	eb0b 0302 	add.w	r3, fp, r2
 800848a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800848e:	9d02      	ldr	r5, [sp, #8]
 8008490:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008748 <__kernel_rem_pio2f+0x318>
 8008494:	f04f 0c00 	mov.w	ip, #0
 8008498:	e015      	b.n	80084c6 <__kernel_rem_pio2f+0x96>
 800849a:	42dd      	cmn	r5, r3
 800849c:	bf5d      	ittte	pl
 800849e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80084a2:	ee07 2a90 	vmovpl	s15, r2
 80084a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80084aa:	eef0 7a47 	vmovmi.f32	s15, s14
 80084ae:	ecee 7a01 	vstmia	lr!, {s15}
 80084b2:	3301      	adds	r3, #1
 80084b4:	e7df      	b.n	8008476 <__kernel_rem_pio2f+0x46>
 80084b6:	ecf5 6a01 	vldmia	r5!, {s13}
 80084ba:	ed33 7a01 	vldmdb	r3!, {s14}
 80084be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80084c2:	f10c 0c01 	add.w	ip, ip, #1
 80084c6:	45d4      	cmp	ip, sl
 80084c8:	ddf5      	ble.n	80084b6 <__kernel_rem_pio2f+0x86>
 80084ca:	ece7 7a01 	vstmia	r7!, {s15}
 80084ce:	3201      	adds	r2, #1
 80084d0:	e7d5      	b.n	800847e <__kernel_rem_pio2f+0x4e>
 80084d2:	ab06      	add	r3, sp, #24
 80084d4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008744 <__kernel_rem_pio2f+0x314>
 80084de:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008740 <__kernel_rem_pio2f+0x310>
 80084e2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	464d      	mov	r5, r9
 80084ea:	ab56      	add	r3, sp, #344	; 0x158
 80084ec:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80084f0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80084f4:	3f01      	subs	r7, #1
 80084f6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80084fa:	00bf      	lsls	r7, r7, #2
 80084fc:	ab56      	add	r3, sp, #344	; 0x158
 80084fe:	19da      	adds	r2, r3, r7
 8008500:	3a4c      	subs	r2, #76	; 0x4c
 8008502:	2300      	movs	r3, #0
 8008504:	1ae9      	subs	r1, r5, r3
 8008506:	2900      	cmp	r1, #0
 8008508:	dc4c      	bgt.n	80085a4 <__kernel_rem_pio2f+0x174>
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fa74 	bl	80089f8 <scalbnf>
 8008510:	eeb0 8a40 	vmov.f32	s16, s0
 8008514:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008518:	ee28 0a00 	vmul.f32	s0, s16, s0
 800851c:	f7ff f8b8 	bl	8007690 <floorf>
 8008520:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008524:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008528:	2c00      	cmp	r4, #0
 800852a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800852e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008536:	ee38 8a67 	vsub.f32	s16, s16, s15
 800853a:	dd48      	ble.n	80085ce <__kernel_rem_pio2f+0x19e>
 800853c:	1e69      	subs	r1, r5, #1
 800853e:	ab06      	add	r3, sp, #24
 8008540:	f1c4 0008 	rsb	r0, r4, #8
 8008544:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008548:	9a01      	ldr	r2, [sp, #4]
 800854a:	fa4c f300 	asr.w	r3, ip, r0
 800854e:	441a      	add	r2, r3
 8008550:	4083      	lsls	r3, r0
 8008552:	9201      	str	r2, [sp, #4]
 8008554:	ebac 0203 	sub.w	r2, ip, r3
 8008558:	ab06      	add	r3, sp, #24
 800855a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800855e:	f1c4 0307 	rsb	r3, r4, #7
 8008562:	fa42 f803 	asr.w	r8, r2, r3
 8008566:	f1b8 0f00 	cmp.w	r8, #0
 800856a:	dd41      	ble.n	80085f0 <__kernel_rem_pio2f+0x1c0>
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	2000      	movs	r0, #0
 8008570:	3301      	adds	r3, #1
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	4601      	mov	r1, r0
 8008576:	4285      	cmp	r5, r0
 8008578:	dc6d      	bgt.n	8008656 <__kernel_rem_pio2f+0x226>
 800857a:	2c00      	cmp	r4, #0
 800857c:	dd04      	ble.n	8008588 <__kernel_rem_pio2f+0x158>
 800857e:	2c01      	cmp	r4, #1
 8008580:	d07e      	beq.n	8008680 <__kernel_rem_pio2f+0x250>
 8008582:	2c02      	cmp	r4, #2
 8008584:	f000 8086 	beq.w	8008694 <__kernel_rem_pio2f+0x264>
 8008588:	f1b8 0f02 	cmp.w	r8, #2
 800858c:	d130      	bne.n	80085f0 <__kernel_rem_pio2f+0x1c0>
 800858e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008592:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008596:	b359      	cbz	r1, 80085f0 <__kernel_rem_pio2f+0x1c0>
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fa2d 	bl	80089f8 <scalbnf>
 800859e:	ee38 8a40 	vsub.f32	s16, s16, s0
 80085a2:	e025      	b.n	80085f0 <__kernel_rem_pio2f+0x1c0>
 80085a4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80085a8:	a806      	add	r0, sp, #24
 80085aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80085b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80085ba:	ee10 1a10 	vmov	r1, s0
 80085be:	ed32 0a01 	vldmdb	r2!, {s0}
 80085c2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80085c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80085ca:	3301      	adds	r3, #1
 80085cc:	e79a      	b.n	8008504 <__kernel_rem_pio2f+0xd4>
 80085ce:	d106      	bne.n	80085de <__kernel_rem_pio2f+0x1ae>
 80085d0:	1e6b      	subs	r3, r5, #1
 80085d2:	aa06      	add	r2, sp, #24
 80085d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085d8:	ea4f 2822 	mov.w	r8, r2, asr #8
 80085dc:	e7c3      	b.n	8008566 <__kernel_rem_pio2f+0x136>
 80085de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80085e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80085e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ea:	da31      	bge.n	8008650 <__kernel_rem_pio2f+0x220>
 80085ec:	f04f 0800 	mov.w	r8, #0
 80085f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80085f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f8:	f040 80a8 	bne.w	800874c <__kernel_rem_pio2f+0x31c>
 80085fc:	1e6b      	subs	r3, r5, #1
 80085fe:	4618      	mov	r0, r3
 8008600:	2200      	movs	r2, #0
 8008602:	4548      	cmp	r0, r9
 8008604:	da4d      	bge.n	80086a2 <__kernel_rem_pio2f+0x272>
 8008606:	2a00      	cmp	r2, #0
 8008608:	f000 8087 	beq.w	800871a <__kernel_rem_pio2f+0x2ea>
 800860c:	aa06      	add	r2, sp, #24
 800860e:	3c08      	subs	r4, #8
 8008610:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008614:	2900      	cmp	r1, #0
 8008616:	f000 808d 	beq.w	8008734 <__kernel_rem_pio2f+0x304>
 800861a:	4620      	mov	r0, r4
 800861c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	f000 f9e9 	bl	80089f8 <scalbnf>
 8008626:	9b02      	ldr	r3, [sp, #8]
 8008628:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008744 <__kernel_rem_pio2f+0x314>
 800862c:	0099      	lsls	r1, r3, #2
 800862e:	aa42      	add	r2, sp, #264	; 0x108
 8008630:	1850      	adds	r0, r2, r1
 8008632:	1d05      	adds	r5, r0, #4
 8008634:	461c      	mov	r4, r3
 8008636:	2c00      	cmp	r4, #0
 8008638:	f280 80b8 	bge.w	80087ac <__kernel_rem_pio2f+0x37c>
 800863c:	2500      	movs	r5, #0
 800863e:	1b5c      	subs	r4, r3, r5
 8008640:	2c00      	cmp	r4, #0
 8008642:	f2c0 80d8 	blt.w	80087f6 <__kernel_rem_pio2f+0x3c6>
 8008646:	4f3d      	ldr	r7, [pc, #244]	; (800873c <__kernel_rem_pio2f+0x30c>)
 8008648:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008748 <__kernel_rem_pio2f+0x318>
 800864c:	2400      	movs	r4, #0
 800864e:	e0c6      	b.n	80087de <__kernel_rem_pio2f+0x3ae>
 8008650:	f04f 0802 	mov.w	r8, #2
 8008654:	e78a      	b.n	800856c <__kernel_rem_pio2f+0x13c>
 8008656:	ab06      	add	r3, sp, #24
 8008658:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800865c:	b949      	cbnz	r1, 8008672 <__kernel_rem_pio2f+0x242>
 800865e:	b12b      	cbz	r3, 800866c <__kernel_rem_pio2f+0x23c>
 8008660:	aa06      	add	r2, sp, #24
 8008662:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008666:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800866a:	2301      	movs	r3, #1
 800866c:	3001      	adds	r0, #1
 800866e:	4619      	mov	r1, r3
 8008670:	e781      	b.n	8008576 <__kernel_rem_pio2f+0x146>
 8008672:	aa06      	add	r2, sp, #24
 8008674:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008678:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800867c:	460b      	mov	r3, r1
 800867e:	e7f5      	b.n	800866c <__kernel_rem_pio2f+0x23c>
 8008680:	1e68      	subs	r0, r5, #1
 8008682:	ab06      	add	r3, sp, #24
 8008684:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800868c:	aa06      	add	r2, sp, #24
 800868e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008692:	e779      	b.n	8008588 <__kernel_rem_pio2f+0x158>
 8008694:	1e68      	subs	r0, r5, #1
 8008696:	ab06      	add	r3, sp, #24
 8008698:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800869c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086a0:	e7f4      	b.n	800868c <__kernel_rem_pio2f+0x25c>
 80086a2:	a906      	add	r1, sp, #24
 80086a4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80086a8:	3801      	subs	r0, #1
 80086aa:	430a      	orrs	r2, r1
 80086ac:	e7a9      	b.n	8008602 <__kernel_rem_pio2f+0x1d2>
 80086ae:	f10c 0c01 	add.w	ip, ip, #1
 80086b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	d0f9      	beq.n	80086ae <__kernel_rem_pio2f+0x27e>
 80086ba:	eb0b 0305 	add.w	r3, fp, r5
 80086be:	aa1a      	add	r2, sp, #104	; 0x68
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	1898      	adds	r0, r3, r2
 80086c4:	3004      	adds	r0, #4
 80086c6:	1c69      	adds	r1, r5, #1
 80086c8:	3704      	adds	r7, #4
 80086ca:	2200      	movs	r2, #0
 80086cc:	4465      	add	r5, ip
 80086ce:	9005      	str	r0, [sp, #20]
 80086d0:	428d      	cmp	r5, r1
 80086d2:	f6ff af0a 	blt.w	80084ea <__kernel_rem_pio2f+0xba>
 80086d6:	a81a      	add	r0, sp, #104	; 0x68
 80086d8:	eb02 0c03 	add.w	ip, r2, r3
 80086dc:	4484      	add	ip, r0
 80086de:	9803      	ldr	r0, [sp, #12]
 80086e0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80086e4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80086e8:	9001      	str	r0, [sp, #4]
 80086ea:	ee07 0a90 	vmov	s15, r0
 80086ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086f2:	9805      	ldr	r0, [sp, #20]
 80086f4:	edcc 7a00 	vstr	s15, [ip]
 80086f8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008748 <__kernel_rem_pio2f+0x318>
 80086fc:	eb00 0802 	add.w	r8, r0, r2
 8008700:	f04f 0c00 	mov.w	ip, #0
 8008704:	45d4      	cmp	ip, sl
 8008706:	dd0c      	ble.n	8008722 <__kernel_rem_pio2f+0x2f2>
 8008708:	eb02 0c07 	add.w	ip, r2, r7
 800870c:	a842      	add	r0, sp, #264	; 0x108
 800870e:	4484      	add	ip, r0
 8008710:	edcc 7a01 	vstr	s15, [ip, #4]
 8008714:	3101      	adds	r1, #1
 8008716:	3204      	adds	r2, #4
 8008718:	e7da      	b.n	80086d0 <__kernel_rem_pio2f+0x2a0>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	f04f 0c01 	mov.w	ip, #1
 8008720:	e7c7      	b.n	80086b2 <__kernel_rem_pio2f+0x282>
 8008722:	ecfe 6a01 	vldmia	lr!, {s13}
 8008726:	ed38 7a01 	vldmdb	r8!, {s14}
 800872a:	f10c 0c01 	add.w	ip, ip, #1
 800872e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008732:	e7e7      	b.n	8008704 <__kernel_rem_pio2f+0x2d4>
 8008734:	3b01      	subs	r3, #1
 8008736:	e769      	b.n	800860c <__kernel_rem_pio2f+0x1dc>
 8008738:	08017bbc 	.word	0x08017bbc
 800873c:	08017b90 	.word	0x08017b90
 8008740:	43800000 	.word	0x43800000
 8008744:	3b800000 	.word	0x3b800000
 8008748:	00000000 	.word	0x00000000
 800874c:	4260      	negs	r0, r4
 800874e:	eeb0 0a48 	vmov.f32	s0, s16
 8008752:	f000 f951 	bl	80089f8 <scalbnf>
 8008756:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008740 <__kernel_rem_pio2f+0x310>
 800875a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800875e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008762:	db1a      	blt.n	800879a <__kernel_rem_pio2f+0x36a>
 8008764:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008744 <__kernel_rem_pio2f+0x314>
 8008768:	ee60 7a27 	vmul.f32	s15, s0, s15
 800876c:	aa06      	add	r2, sp, #24
 800876e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008772:	a906      	add	r1, sp, #24
 8008774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008778:	3408      	adds	r4, #8
 800877a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800877e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008782:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008786:	ee10 3a10 	vmov	r3, s0
 800878a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800878e:	1c6b      	adds	r3, r5, #1
 8008790:	ee17 2a90 	vmov	r2, s15
 8008794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008798:	e73f      	b.n	800861a <__kernel_rem_pio2f+0x1ea>
 800879a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800879e:	aa06      	add	r2, sp, #24
 80087a0:	ee10 3a10 	vmov	r3, s0
 80087a4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80087a8:	462b      	mov	r3, r5
 80087aa:	e736      	b.n	800861a <__kernel_rem_pio2f+0x1ea>
 80087ac:	aa06      	add	r2, sp, #24
 80087ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80087b2:	9202      	str	r2, [sp, #8]
 80087b4:	ee07 2a90 	vmov	s15, r2
 80087b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087bc:	3c01      	subs	r4, #1
 80087be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80087c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80087c6:	ed65 7a01 	vstmdb	r5!, {s15}
 80087ca:	e734      	b.n	8008636 <__kernel_rem_pio2f+0x206>
 80087cc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80087d0:	ecf7 6a01 	vldmia	r7!, {s13}
 80087d4:	ed9c 7a00 	vldr	s14, [ip]
 80087d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80087dc:	3401      	adds	r4, #1
 80087de:	454c      	cmp	r4, r9
 80087e0:	dc01      	bgt.n	80087e6 <__kernel_rem_pio2f+0x3b6>
 80087e2:	42a5      	cmp	r5, r4
 80087e4:	daf2      	bge.n	80087cc <__kernel_rem_pio2f+0x39c>
 80087e6:	aa56      	add	r2, sp, #344	; 0x158
 80087e8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80087ec:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80087f0:	3501      	adds	r5, #1
 80087f2:	3804      	subs	r0, #4
 80087f4:	e723      	b.n	800863e <__kernel_rem_pio2f+0x20e>
 80087f6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80087f8:	2a03      	cmp	r2, #3
 80087fa:	d84d      	bhi.n	8008898 <__kernel_rem_pio2f+0x468>
 80087fc:	e8df f002 	tbb	[pc, r2]
 8008800:	021f1f3e 	.word	0x021f1f3e
 8008804:	aa56      	add	r2, sp, #344	; 0x158
 8008806:	4411      	add	r1, r2
 8008808:	399c      	subs	r1, #156	; 0x9c
 800880a:	4608      	mov	r0, r1
 800880c:	461c      	mov	r4, r3
 800880e:	2c00      	cmp	r4, #0
 8008810:	dc5f      	bgt.n	80088d2 <__kernel_rem_pio2f+0x4a2>
 8008812:	4608      	mov	r0, r1
 8008814:	461c      	mov	r4, r3
 8008816:	2c01      	cmp	r4, #1
 8008818:	dc6b      	bgt.n	80088f2 <__kernel_rem_pio2f+0x4c2>
 800881a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008748 <__kernel_rem_pio2f+0x318>
 800881e:	2b01      	cmp	r3, #1
 8008820:	dc77      	bgt.n	8008912 <__kernel_rem_pio2f+0x4e2>
 8008822:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008826:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800882a:	f1b8 0f00 	cmp.w	r8, #0
 800882e:	d176      	bne.n	800891e <__kernel_rem_pio2f+0x4ee>
 8008830:	edc6 6a00 	vstr	s13, [r6]
 8008834:	ed86 7a01 	vstr	s14, [r6, #4]
 8008838:	edc6 7a02 	vstr	s15, [r6, #8]
 800883c:	e02c      	b.n	8008898 <__kernel_rem_pio2f+0x468>
 800883e:	aa56      	add	r2, sp, #344	; 0x158
 8008840:	4411      	add	r1, r2
 8008842:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008748 <__kernel_rem_pio2f+0x318>
 8008846:	399c      	subs	r1, #156	; 0x9c
 8008848:	4618      	mov	r0, r3
 800884a:	2800      	cmp	r0, #0
 800884c:	da32      	bge.n	80088b4 <__kernel_rem_pio2f+0x484>
 800884e:	f1b8 0f00 	cmp.w	r8, #0
 8008852:	d035      	beq.n	80088c0 <__kernel_rem_pio2f+0x490>
 8008854:	eef1 7a47 	vneg.f32	s15, s14
 8008858:	edc6 7a00 	vstr	s15, [r6]
 800885c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008864:	a82f      	add	r0, sp, #188	; 0xbc
 8008866:	2101      	movs	r1, #1
 8008868:	428b      	cmp	r3, r1
 800886a:	da2c      	bge.n	80088c6 <__kernel_rem_pio2f+0x496>
 800886c:	f1b8 0f00 	cmp.w	r8, #0
 8008870:	d001      	beq.n	8008876 <__kernel_rem_pio2f+0x446>
 8008872:	eef1 7a67 	vneg.f32	s15, s15
 8008876:	edc6 7a01 	vstr	s15, [r6, #4]
 800887a:	e00d      	b.n	8008898 <__kernel_rem_pio2f+0x468>
 800887c:	aa56      	add	r2, sp, #344	; 0x158
 800887e:	4411      	add	r1, r2
 8008880:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008748 <__kernel_rem_pio2f+0x318>
 8008884:	399c      	subs	r1, #156	; 0x9c
 8008886:	2b00      	cmp	r3, #0
 8008888:	da0e      	bge.n	80088a8 <__kernel_rem_pio2f+0x478>
 800888a:	f1b8 0f00 	cmp.w	r8, #0
 800888e:	d001      	beq.n	8008894 <__kernel_rem_pio2f+0x464>
 8008890:	eef1 7a67 	vneg.f32	s15, s15
 8008894:	edc6 7a00 	vstr	s15, [r6]
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	f003 0007 	and.w	r0, r3, #7
 800889e:	b057      	add	sp, #348	; 0x15c
 80088a0:	ecbd 8b04 	vpop	{d8-d9}
 80088a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a8:	ed31 7a01 	vldmdb	r1!, {s14}
 80088ac:	3b01      	subs	r3, #1
 80088ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088b2:	e7e8      	b.n	8008886 <__kernel_rem_pio2f+0x456>
 80088b4:	ed71 7a01 	vldmdb	r1!, {s15}
 80088b8:	3801      	subs	r0, #1
 80088ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088be:	e7c4      	b.n	800884a <__kernel_rem_pio2f+0x41a>
 80088c0:	eef0 7a47 	vmov.f32	s15, s14
 80088c4:	e7c8      	b.n	8008858 <__kernel_rem_pio2f+0x428>
 80088c6:	ecb0 7a01 	vldmia	r0!, {s14}
 80088ca:	3101      	adds	r1, #1
 80088cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088d0:	e7ca      	b.n	8008868 <__kernel_rem_pio2f+0x438>
 80088d2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80088d6:	ed70 6a01 	vldmdb	r0!, {s13}
 80088da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80088de:	3c01      	subs	r4, #1
 80088e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088e4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80088e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ec:	edc0 7a00 	vstr	s15, [r0]
 80088f0:	e78d      	b.n	800880e <__kernel_rem_pio2f+0x3de>
 80088f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80088f6:	ed70 6a01 	vldmdb	r0!, {s13}
 80088fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80088fe:	3c01      	subs	r4, #1
 8008900:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008904:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890c:	edc0 7a00 	vstr	s15, [r0]
 8008910:	e781      	b.n	8008816 <__kernel_rem_pio2f+0x3e6>
 8008912:	ed31 7a01 	vldmdb	r1!, {s14}
 8008916:	3b01      	subs	r3, #1
 8008918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800891c:	e77f      	b.n	800881e <__kernel_rem_pio2f+0x3ee>
 800891e:	eef1 6a66 	vneg.f32	s13, s13
 8008922:	eeb1 7a47 	vneg.f32	s14, s14
 8008926:	edc6 6a00 	vstr	s13, [r6]
 800892a:	ed86 7a01 	vstr	s14, [r6, #4]
 800892e:	eef1 7a67 	vneg.f32	s15, s15
 8008932:	e781      	b.n	8008838 <__kernel_rem_pio2f+0x408>

08008934 <__kernel_sinf>:
 8008934:	ee10 3a10 	vmov	r3, s0
 8008938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800893c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008940:	da04      	bge.n	800894c <__kernel_sinf+0x18>
 8008942:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008946:	ee17 3a90 	vmov	r3, s15
 800894a:	b35b      	cbz	r3, 80089a4 <__kernel_sinf+0x70>
 800894c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008950:	eddf 7a15 	vldr	s15, [pc, #84]	; 80089a8 <__kernel_sinf+0x74>
 8008954:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80089ac <__kernel_sinf+0x78>
 8008958:	eea7 6a27 	vfma.f32	s12, s14, s15
 800895c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80089b0 <__kernel_sinf+0x7c>
 8008960:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008964:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80089b4 <__kernel_sinf+0x80>
 8008968:	eea7 6a87 	vfma.f32	s12, s15, s14
 800896c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80089b8 <__kernel_sinf+0x84>
 8008970:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008974:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008978:	b930      	cbnz	r0, 8008988 <__kernel_sinf+0x54>
 800897a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80089bc <__kernel_sinf+0x88>
 800897e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008982:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008986:	4770      	bx	lr
 8008988:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800898c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008990:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008994:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008998:	eddf 7a09 	vldr	s15, [pc, #36]	; 80089c0 <__kernel_sinf+0x8c>
 800899c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80089a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	2f2ec9d3 	.word	0x2f2ec9d3
 80089ac:	b2d72f34 	.word	0xb2d72f34
 80089b0:	3638ef1b 	.word	0x3638ef1b
 80089b4:	b9500d01 	.word	0xb9500d01
 80089b8:	3c088889 	.word	0x3c088889
 80089bc:	be2aaaab 	.word	0xbe2aaaab
 80089c0:	3e2aaaab 	.word	0x3e2aaaab

080089c4 <matherr>:
 80089c4:	2000      	movs	r0, #0
 80089c6:	4770      	bx	lr

080089c8 <fabsf>:
 80089c8:	ee10 3a10 	vmov	r3, s0
 80089cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089d0:	ee00 3a10 	vmov	s0, r3
 80089d4:	4770      	bx	lr

080089d6 <finitef>:
 80089d6:	ee10 3a10 	vmov	r3, s0
 80089da:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80089de:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80089e2:	bfac      	ite	ge
 80089e4:	2000      	movge	r0, #0
 80089e6:	2001      	movlt	r0, #1
 80089e8:	4770      	bx	lr
	...

080089ec <nanf>:
 80089ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089f4 <nanf+0x8>
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	7fc00000 	.word	0x7fc00000

080089f8 <scalbnf>:
 80089f8:	b508      	push	{r3, lr}
 80089fa:	ee10 2a10 	vmov	r2, s0
 80089fe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008a02:	ed2d 8b02 	vpush	{d8}
 8008a06:	eef0 0a40 	vmov.f32	s1, s0
 8008a0a:	d004      	beq.n	8008a16 <scalbnf+0x1e>
 8008a0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a10:	d306      	bcc.n	8008a20 <scalbnf+0x28>
 8008a12:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008a16:	ecbd 8b02 	vpop	{d8}
 8008a1a:	eeb0 0a60 	vmov.f32	s0, s1
 8008a1e:	bd08      	pop	{r3, pc}
 8008a20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a24:	d21c      	bcs.n	8008a60 <scalbnf+0x68>
 8008a26:	4b1f      	ldr	r3, [pc, #124]	; (8008aa4 <scalbnf+0xac>)
 8008a28:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008aa8 <scalbnf+0xb0>
 8008a2c:	4298      	cmp	r0, r3
 8008a2e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008a32:	db10      	blt.n	8008a56 <scalbnf+0x5e>
 8008a34:	ee10 2a90 	vmov	r2, s1
 8008a38:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008a3c:	3b19      	subs	r3, #25
 8008a3e:	4403      	add	r3, r0
 8008a40:	2bfe      	cmp	r3, #254	; 0xfe
 8008a42:	dd0f      	ble.n	8008a64 <scalbnf+0x6c>
 8008a44:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008aac <scalbnf+0xb4>
 8008a48:	eeb0 0a48 	vmov.f32	s0, s16
 8008a4c:	f000 f834 	bl	8008ab8 <copysignf>
 8008a50:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008a54:	e7df      	b.n	8008a16 <scalbnf+0x1e>
 8008a56:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008ab0 <scalbnf+0xb8>
 8008a5a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008a5e:	e7da      	b.n	8008a16 <scalbnf+0x1e>
 8008a60:	0ddb      	lsrs	r3, r3, #23
 8008a62:	e7ec      	b.n	8008a3e <scalbnf+0x46>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dd06      	ble.n	8008a76 <scalbnf+0x7e>
 8008a68:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008a6c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008a70:	ee00 3a90 	vmov	s1, r3
 8008a74:	e7cf      	b.n	8008a16 <scalbnf+0x1e>
 8008a76:	f113 0f16 	cmn.w	r3, #22
 8008a7a:	da06      	bge.n	8008a8a <scalbnf+0x92>
 8008a7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008a80:	4298      	cmp	r0, r3
 8008a82:	dcdf      	bgt.n	8008a44 <scalbnf+0x4c>
 8008a84:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008ab0 <scalbnf+0xb8>
 8008a88:	e7de      	b.n	8008a48 <scalbnf+0x50>
 8008a8a:	3319      	adds	r3, #25
 8008a8c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008a90:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008a94:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008ab4 <scalbnf+0xbc>
 8008a98:	ee07 3a10 	vmov	s14, r3
 8008a9c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008aa0:	e7b9      	b.n	8008a16 <scalbnf+0x1e>
 8008aa2:	bf00      	nop
 8008aa4:	ffff3cb0 	.word	0xffff3cb0
 8008aa8:	4c000000 	.word	0x4c000000
 8008aac:	7149f2ca 	.word	0x7149f2ca
 8008ab0:	0da24260 	.word	0x0da24260
 8008ab4:	33000000 	.word	0x33000000

08008ab8 <copysignf>:
 8008ab8:	ee10 3a10 	vmov	r3, s0
 8008abc:	ee10 2a90 	vmov	r2, s1
 8008ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ac4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	ee00 3a10 	vmov	s0, r3
 8008ace:	4770      	bx	lr

08008ad0 <_init>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	bf00      	nop
 8008ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad6:	bc08      	pop	{r3}
 8008ad8:	469e      	mov	lr, r3
 8008ada:	4770      	bx	lr

08008adc <_fini>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr
