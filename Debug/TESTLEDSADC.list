
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003410  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  00023f3c  2**0
                  CONTENTS
  4 .ARM          00000008  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e0  080035e0  00023f3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00003ecc  20000070  08003658  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000fc64  20003f3c  08007524  00023f3c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013ba0  08007524  00033ba0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00023f3c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002159b  00000000  00000000  00023f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000055d7  00000000  00000000  00045507  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000afb9  00000000  00000000  0004aade  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001228  00000000  00000000  00055a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001928  00000000  00000000  00056cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00006f2b  00000000  00000000  000585e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014e91  00000000  00000000  0005f513  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c3c4a  00000000  00000000  000743a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f4  00000000  00000000  00137fee  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003574  00000000  00000000  001380e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20003f3c 	.word	0x20003f3c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003580 	.word	0x08003580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20003f40 	.word	0x20003f40
 80001c4:	08003580 	.word	0x08003580

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000660:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000664:	f000 b972 	b.w	800094c <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9e08      	ldr	r6, [sp, #32]
 8000686:	4604      	mov	r4, r0
 8000688:	4688      	mov	r8, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14b      	bne.n	8000726 <__udivmoddi4+0xa6>
 800068e:	428a      	cmp	r2, r1
 8000690:	4615      	mov	r5, r2
 8000692:	d967      	bls.n	8000764 <__udivmoddi4+0xe4>
 8000694:	fab2 f282 	clz	r2, r2
 8000698:	b14a      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069a:	f1c2 0720 	rsb	r7, r2, #32
 800069e:	fa01 f302 	lsl.w	r3, r1, r2
 80006a2:	fa20 f707 	lsr.w	r7, r0, r7
 80006a6:	4095      	lsls	r5, r2
 80006a8:	ea47 0803 	orr.w	r8, r7, r3
 80006ac:	4094      	lsls	r4, r2
 80006ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b8:	fa1f fc85 	uxth.w	ip, r5
 80006bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006c4:	fb07 f10c 	mul.w	r1, r7, ip
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x60>
 80006cc:	18eb      	adds	r3, r5, r3
 80006ce:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006d2:	f080 811b 	bcs.w	800090c <__udivmoddi4+0x28c>
 80006d6:	4299      	cmp	r1, r3
 80006d8:	f240 8118 	bls.w	800090c <__udivmoddi4+0x28c>
 80006dc:	3f02      	subs	r7, #2
 80006de:	442b      	add	r3, r5
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80006f4:	45a4      	cmp	ip, r4
 80006f6:	d909      	bls.n	800070c <__udivmoddi4+0x8c>
 80006f8:	192c      	adds	r4, r5, r4
 80006fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006fe:	f080 8107 	bcs.w	8000910 <__udivmoddi4+0x290>
 8000702:	45a4      	cmp	ip, r4
 8000704:	f240 8104 	bls.w	8000910 <__udivmoddi4+0x290>
 8000708:	3802      	subs	r0, #2
 800070a:	442c      	add	r4, r5
 800070c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000710:	eba4 040c 	sub.w	r4, r4, ip
 8000714:	2700      	movs	r7, #0
 8000716:	b11e      	cbz	r6, 8000720 <__udivmoddi4+0xa0>
 8000718:	40d4      	lsrs	r4, r2
 800071a:	2300      	movs	r3, #0
 800071c:	e9c6 4300 	strd	r4, r3, [r6]
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d909      	bls.n	800073e <__udivmoddi4+0xbe>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80eb 	beq.w	8000906 <__udivmoddi4+0x286>
 8000730:	2700      	movs	r7, #0
 8000732:	e9c6 0100 	strd	r0, r1, [r6]
 8000736:	4638      	mov	r0, r7
 8000738:	4639      	mov	r1, r7
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	fab3 f783 	clz	r7, r3
 8000742:	2f00      	cmp	r7, #0
 8000744:	d147      	bne.n	80007d6 <__udivmoddi4+0x156>
 8000746:	428b      	cmp	r3, r1
 8000748:	d302      	bcc.n	8000750 <__udivmoddi4+0xd0>
 800074a:	4282      	cmp	r2, r0
 800074c:	f200 80fa 	bhi.w	8000944 <__udivmoddi4+0x2c4>
 8000750:	1a84      	subs	r4, r0, r2
 8000752:	eb61 0303 	sbc.w	r3, r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	4698      	mov	r8, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d0e0      	beq.n	8000720 <__udivmoddi4+0xa0>
 800075e:	e9c6 4800 	strd	r4, r8, [r6]
 8000762:	e7dd      	b.n	8000720 <__udivmoddi4+0xa0>
 8000764:	b902      	cbnz	r2, 8000768 <__udivmoddi4+0xe8>
 8000766:	deff      	udf	#255	; 0xff
 8000768:	fab2 f282 	clz	r2, r2
 800076c:	2a00      	cmp	r2, #0
 800076e:	f040 808f 	bne.w	8000890 <__udivmoddi4+0x210>
 8000772:	1b49      	subs	r1, r1, r5
 8000774:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000778:	fa1f f885 	uxth.w	r8, r5
 800077c:	2701      	movs	r7, #1
 800077e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000782:	0c23      	lsrs	r3, r4, #16
 8000784:	fb0e 111c 	mls	r1, lr, ip, r1
 8000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078c:	fb08 f10c 	mul.w	r1, r8, ip
 8000790:	4299      	cmp	r1, r3
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x124>
 8000794:	18eb      	adds	r3, r5, r3
 8000796:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x122>
 800079c:	4299      	cmp	r1, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2bc>
 80007a2:	4684      	mov	ip, r0
 80007a4:	1a59      	subs	r1, r3, r1
 80007a6:	b2a3      	uxth	r3, r4
 80007a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007b4:	fb08 f800 	mul.w	r8, r8, r0
 80007b8:	45a0      	cmp	r8, r4
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x14c>
 80007bc:	192c      	adds	r4, r5, r4
 80007be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x14a>
 80007c4:	45a0      	cmp	r8, r4
 80007c6:	f200 80b6 	bhi.w	8000936 <__udivmoddi4+0x2b6>
 80007ca:	4618      	mov	r0, r3
 80007cc:	eba4 0408 	sub.w	r4, r4, r8
 80007d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007d4:	e79f      	b.n	8000716 <__udivmoddi4+0x96>
 80007d6:	f1c7 0c20 	rsb	ip, r7, #32
 80007da:	40bb      	lsls	r3, r7
 80007dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007e4:	fa01 f407 	lsl.w	r4, r1, r7
 80007e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007f4:	4325      	orrs	r5, r4
 80007f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80007fa:	0c2c      	lsrs	r4, r5, #16
 80007fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000800:	fa1f fa8e 	uxth.w	sl, lr
 8000804:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000808:	fb09 f40a 	mul.w	r4, r9, sl
 800080c:	429c      	cmp	r4, r3
 800080e:	fa02 f207 	lsl.w	r2, r2, r7
 8000812:	fa00 f107 	lsl.w	r1, r0, r7
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b0>
 8000818:	eb1e 0303 	adds.w	r3, lr, r3
 800081c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000820:	f080 8087 	bcs.w	8000932 <__udivmoddi4+0x2b2>
 8000824:	429c      	cmp	r4, r3
 8000826:	f240 8084 	bls.w	8000932 <__udivmoddi4+0x2b2>
 800082a:	f1a9 0902 	sub.w	r9, r9, #2
 800082e:	4473      	add	r3, lr
 8000830:	1b1b      	subs	r3, r3, r4
 8000832:	b2ad      	uxth	r5, r5
 8000834:	fbb3 f0f8 	udiv	r0, r3, r8
 8000838:	fb08 3310 	mls	r3, r8, r0, r3
 800083c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000840:	fb00 fa0a 	mul.w	sl, r0, sl
 8000844:	45a2      	cmp	sl, r4
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1da>
 8000848:	eb1e 0404 	adds.w	r4, lr, r4
 800084c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000850:	d26b      	bcs.n	800092a <__udivmoddi4+0x2aa>
 8000852:	45a2      	cmp	sl, r4
 8000854:	d969      	bls.n	800092a <__udivmoddi4+0x2aa>
 8000856:	3802      	subs	r0, #2
 8000858:	4474      	add	r4, lr
 800085a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800085e:	fba0 8902 	umull	r8, r9, r0, r2
 8000862:	eba4 040a 	sub.w	r4, r4, sl
 8000866:	454c      	cmp	r4, r9
 8000868:	46c2      	mov	sl, r8
 800086a:	464b      	mov	r3, r9
 800086c:	d354      	bcc.n	8000918 <__udivmoddi4+0x298>
 800086e:	d051      	beq.n	8000914 <__udivmoddi4+0x294>
 8000870:	2e00      	cmp	r6, #0
 8000872:	d069      	beq.n	8000948 <__udivmoddi4+0x2c8>
 8000874:	ebb1 050a 	subs.w	r5, r1, sl
 8000878:	eb64 0403 	sbc.w	r4, r4, r3
 800087c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000880:	40fd      	lsrs	r5, r7
 8000882:	40fc      	lsrs	r4, r7
 8000884:	ea4c 0505 	orr.w	r5, ip, r5
 8000888:	e9c6 5400 	strd	r5, r4, [r6]
 800088c:	2700      	movs	r7, #0
 800088e:	e747      	b.n	8000720 <__udivmoddi4+0xa0>
 8000890:	f1c2 0320 	rsb	r3, r2, #32
 8000894:	fa20 f703 	lsr.w	r7, r0, r3
 8000898:	4095      	lsls	r5, r2
 800089a:	fa01 f002 	lsl.w	r0, r1, r2
 800089e:	fa21 f303 	lsr.w	r3, r1, r3
 80008a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008a6:	4338      	orrs	r0, r7
 80008a8:	0c01      	lsrs	r1, r0, #16
 80008aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80008ae:	fa1f f885 	uxth.w	r8, r5
 80008b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80008b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ba:	fb07 f308 	mul.w	r3, r7, r8
 80008be:	428b      	cmp	r3, r1
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x256>
 80008c6:	1869      	adds	r1, r5, r1
 80008c8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008cc:	d22f      	bcs.n	800092e <__udivmoddi4+0x2ae>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d92d      	bls.n	800092e <__udivmoddi4+0x2ae>
 80008d2:	3f02      	subs	r7, #2
 80008d4:	4429      	add	r1, r5
 80008d6:	1acb      	subs	r3, r1, r3
 80008d8:	b281      	uxth	r1, r0
 80008da:	fbb3 f0fe 	udiv	r0, r3, lr
 80008de:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e6:	fb00 f308 	mul.w	r3, r0, r8
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d907      	bls.n	80008fe <__udivmoddi4+0x27e>
 80008ee:	1869      	adds	r1, r5, r1
 80008f0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008f4:	d217      	bcs.n	8000926 <__udivmoddi4+0x2a6>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d915      	bls.n	8000926 <__udivmoddi4+0x2a6>
 80008fa:	3802      	subs	r0, #2
 80008fc:	4429      	add	r1, r5
 80008fe:	1ac9      	subs	r1, r1, r3
 8000900:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000904:	e73b      	b.n	800077e <__udivmoddi4+0xfe>
 8000906:	4637      	mov	r7, r6
 8000908:	4630      	mov	r0, r6
 800090a:	e709      	b.n	8000720 <__udivmoddi4+0xa0>
 800090c:	4607      	mov	r7, r0
 800090e:	e6e7      	b.n	80006e0 <__udivmoddi4+0x60>
 8000910:	4618      	mov	r0, r3
 8000912:	e6fb      	b.n	800070c <__udivmoddi4+0x8c>
 8000914:	4541      	cmp	r1, r8
 8000916:	d2ab      	bcs.n	8000870 <__udivmoddi4+0x1f0>
 8000918:	ebb8 0a02 	subs.w	sl, r8, r2
 800091c:	eb69 020e 	sbc.w	r2, r9, lr
 8000920:	3801      	subs	r0, #1
 8000922:	4613      	mov	r3, r2
 8000924:	e7a4      	b.n	8000870 <__udivmoddi4+0x1f0>
 8000926:	4660      	mov	r0, ip
 8000928:	e7e9      	b.n	80008fe <__udivmoddi4+0x27e>
 800092a:	4618      	mov	r0, r3
 800092c:	e795      	b.n	800085a <__udivmoddi4+0x1da>
 800092e:	4667      	mov	r7, ip
 8000930:	e7d1      	b.n	80008d6 <__udivmoddi4+0x256>
 8000932:	4681      	mov	r9, r0
 8000934:	e77c      	b.n	8000830 <__udivmoddi4+0x1b0>
 8000936:	3802      	subs	r0, #2
 8000938:	442c      	add	r4, r5
 800093a:	e747      	b.n	80007cc <__udivmoddi4+0x14c>
 800093c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000940:	442b      	add	r3, r5
 8000942:	e72f      	b.n	80007a4 <__udivmoddi4+0x124>
 8000944:	4638      	mov	r0, r7
 8000946:	e708      	b.n	800075a <__udivmoddi4+0xda>
 8000948:	4637      	mov	r7, r6
 800094a:	e6e9      	b.n	8000720 <__udivmoddi4+0xa0>

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <ADSR_init>:

/*---------------------------------------------------------------------------*/

void ADSR_init(ADSR_t *env)
{
  env->target_ = 0.0;
 8000950:	2300      	movs	r3, #0
 8000952:	6183      	str	r3, [r0, #24]
  env->value_ = 0.0;
 8000954:	6103      	str	r3, [r0, #16]
  env->attackRate_ = 0.001;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <ADSR_init+0x20>)
 8000958:	6003      	str	r3, [r0, #0]
  env->decayRate_ = 0.001;
 800095a:	6043      	str	r3, [r0, #4]
  env->sustainLevel_ = 0.5;
 800095c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000960:	6083      	str	r3, [r0, #8]
  env->releaseRate_ = 0.01;
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <ADSR_init+0x24>)
 8000964:	60c3      	str	r3, [r0, #12]
  env->state_ = ATTACK;
 8000966:	2300      	movs	r3, #0
  env->cnt_ = 0;
 8000968:	e9c0 3308 	strd	r3, r3, [r0, #32]
  //env->gateTime_ = 10000;
}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	3a83126f 	.word	0x3a83126f
 8000974:	3c23d70a 	.word	0x3c23d70a

08000978 <VCO_blepsaw_Init>:

/* ==== hard-sync-capable sawtooth oscillator ==== */

void VCO_blepsaw_Init(VCO_blepsaw_t *vco)
{
	vco->_init = true;
 8000978:	2301      	movs	r3, #1
 800097a:	f880 3548 	strb.w	r3, [r0, #1352]	; 0x548
	vco->amp = 1.0f;
 800097e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000982:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <VCO_blepsaw_Init+0x28>)
 8000986:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 8000988:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 800098a:	2300      	movs	r3, #0
 800098c:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 800098e:	6203      	str	r3, [r0, #32]
	vco->_j = 0;
 8000990:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 8000994:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000998:	3024      	adds	r0, #36	; 0x24
 800099a:	f002 bd01 	b.w	80033a0 <memset>
 800099e:	bf00      	nop
 80009a0:	43dc0000 	.word	0x43dc0000

080009a4 <VCO_bleprect_Init>:
//----------------------------------------------------------------------------------------------------------
/* ==== variable-width, hard-sync-capable rectangular oscillator ==== */

void VCO_bleprect_Init(VCO_bleprect_t *vco)
{
	vco->_init = true;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f880 3558 	strb.w	r3, [r0, #1368]	; 0x558
	vco->amp = 1.0f;
 80009aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80009ae:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <VCO_bleprect_Init+0x28>)
 80009b2:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_z = 0.0f;
	vco->_j = 0;
 80009b4:	2100      	movs	r1, #0
	vco->syncin = 0.0f;
 80009b6:	2300      	movs	r3, #0
 80009b8:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 80009ba:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 80009bc:	62c3      	str	r3, [r0, #44]	; 0x2c
	vco->_j = 0;
 80009be:	f8c0 1550 	str.w	r1, [r0, #1360]	; 0x550
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 80009c2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80009c6:	3030      	adds	r0, #48	; 0x30
 80009c8:	f002 bcea 	b.w	80033a0 <memset>
 80009cc:	43dc0000 	.word	0x43dc0000

080009d0 <VCO_bleptri_Init>:

///* ==== variable-slope, hard-sync-capable triangle oscillator ==== */

void VCO_bleptri_Init(VCO_bleptri_t *vco)
{
	vco->amp = 1.0f;
 80009d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80009d4:	6043      	str	r3, [r0, #4]
	vco->freq = 440.f;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <VCO_bleptri_Init+0x28>)
 80009d8:	60c3      	str	r3, [r0, #12]
	vco->syncin = 0.0f;
	vco->waveform = 0.0f;
	vco->_init = true;
 80009da:	2201      	movs	r2, #1
	vco->syncin = 0.0f;
 80009dc:	2300      	movs	r3, #0
	vco->_z = 0.0f;
	vco->_j = 0;
 80009de:	2100      	movs	r1, #0
	vco->_init = true;
 80009e0:	f880 2554 	strb.w	r2, [r0, #1364]	; 0x554
	vco->syncin = 0.0f;
 80009e4:	6143      	str	r3, [r0, #20]
	vco->waveform = 0.0f;
 80009e6:	6103      	str	r3, [r0, #16]
	vco->_z = 0.0f;
 80009e8:	6283      	str	r3, [r0, #40]	; 0x28
	vco->_j = 0;
 80009ea:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
	memset (vco->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 80009ee:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80009f2:	302c      	adds	r0, #44	; 0x2c
 80009f4:	f002 bcd4 	b.w	80033a0 <memset>
 80009f8:	43dc0000 	.word	0x43dc0000

080009fc <Chorus_init>:
		}
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_delay(monochorus_t *del, float delay)
{
	del->baseDelay = delay;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <Chorus_init+0x68>)
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fb(monochorus_t *del, float val)
{
	del->fb = val;
 80009fe:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <Chorus_init+0x6c>)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
	del->baseDelay = delay;
 8000a02:	4f1a      	ldr	r7, [pc, #104]	; (8000a6c <Chorus_init+0x70>)
 8000a04:	601f      	str	r7, [r3, #0]
	del->fb = val;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <Chorus_init+0x74>)
 8000a08:	4c1a      	ldr	r4, [pc, #104]	; (8000a74 <Chorus_init+0x78>)
 8000a0a:	6054      	str	r4, [r2, #4]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_fw(monochorus_t *del, float val)
{
	del->fw = val;
 8000a0c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	del->mode = 1;
 8000a10:	f241 50f4 	movw	r0, #5620	; 0x15f4
 8000a14:	2501      	movs	r5, #1
	del->fw = val;
 8000a16:	6091      	str	r1, [r2, #8]
}
/*-------------------------------------------------------------------------------------------*/
void Delay_set_mix(monochorus_t *del, float val)
{
	del->mix = val;
 8000a18:	6011      	str	r1, [r2, #0]
	del->fw = val;
 8000a1a:	6099      	str	r1, [r3, #8]
	del->mix = val;
 8000a1c:	6019      	str	r1, [r3, #0]
	lfoL.amp = LEFT_SWEEP;
 8000a1e:	4916      	ldr	r1, [pc, #88]	; (8000a78 <Chorus_init+0x7c>)
	del->mode = 1;
 8000a20:	5415      	strb	r5, [r2, r0]
 8000a22:	541d      	strb	r5, [r3, r0]
	lfoL.amp = LEFT_SWEEP;
 8000a24:	4815      	ldr	r0, [pc, #84]	; (8000a7c <Chorus_init+0x80>)
 8000a26:	6008      	str	r0, [r1, #0]
	lfoR.amp = RIGHT_SWEEP;
 8000a28:	6108      	str	r0, [r1, #16]
	lfoL.freq = LEFT_RATE ;
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <Chorus_init+0x84>)
 8000a2c:	6048      	str	r0, [r1, #4]
	lfoR.freq = RIGHT_RATE ;
 8000a2e:	4815      	ldr	r0, [pc, #84]	; (8000a84 <Chorus_init+0x88>)
 8000a30:	6148      	str	r0, [r1, #20]
	rateCoeff = 1;
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <Chorus_init+0x8c>)
	del->fb = val;
 8000a34:	605c      	str	r4, [r3, #4]
	rateCoeff = 1;
 8000a36:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	del->baseDelay = delay;
 8000a3a:	4c14      	ldr	r4, [pc, #80]	; (8000a8c <Chorus_init+0x90>)
	rateCoeff = 1;
 8000a3c:	6005      	str	r5, [r0, #0]
	lfoL.phase = _PI/2; // initial phases for quadrature
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <Chorus_init+0x94>)
 8000a40:	6088      	str	r0, [r1, #8]
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8000a42:	f240 5677 	movw	r6, #1399	; 0x577
	lfoR.phase = 0;
 8000a46:	2000      	movs	r0, #0
	del->in_idx = DEPTH - 1;// Place the input pointer at the end of the buffer
 8000a48:	60d6      	str	r6, [r2, #12]
 8000a4a:	60de      	str	r6, [r3, #12]
	lfoR.phase = 0;
 8000a4c:	6188      	str	r0, [r1, #24]
	del->baseDelay = delay;
 8000a4e:	6027      	str	r7, [r4, #0]
 8000a50:	3310      	adds	r3, #16
 8000a52:	3210      	adds	r2, #16
 8000a54:	4601      	mov	r1, r0
		delR.dline[var] = 0;
 8000a56:	f843 1b04 	str.w	r1, [r3], #4
	for (int var = 0; var < DEPTH; ++var) {
 8000a5a:	42a3      	cmp	r3, r4
		delL.dline[var] = 0;
 8000a5c:	f842 1b04 	str.w	r1, [r2], #4
	for (int var = 0; var < DEPTH; ++var) {
 8000a60:	d1f9      	bne.n	8000a56 <Chorus_init+0x5a>
}
 8000a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a64:	200026a8 	.word	0x200026a8
 8000a68:	200010b8 	.word	0x200010b8
 8000a6c:	43700000 	.word	0x43700000
 8000a70:	200026b0 	.word	0x200026b0
 8000a74:	be4ccccd 	.word	0xbe4ccccd
 8000a78:	20001098 	.word	0x20001098
 8000a7c:	42480000 	.word	0x42480000
 8000a80:	3de147ae 	.word	0x3de147ae
 8000a84:	3df5c28f 	.word	0x3df5c28f
 8000a88:	20013990 	.word	0x20013990
 8000a8c:	20003ca0 	.word	0x20003ca0
 8000a90:	3fc90fdb 	.word	0x3fc90fdb

08000a94 <Delay_init>:

/*-------------------------------------------------------------------------------------------*/
void Delay_init(void)
{
	/* initialize pointers positions for delay effect */
	shift = INIT_DELAY;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <Delay_init+0x18>)
 8000a96:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000a9a:	601a      	str	r2, [r3, #0]
	readpos = delayline;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <Delay_init+0x1c>)
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <Delay_init+0x20>)
 8000aa0:	601a      	str	r2, [r3, #0]
	writepos = delayline + INIT_DELAY;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <Delay_init+0x24>)
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <Delay_init+0x28>)
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200129c4 	.word	0x200129c4
 8000ab0:	200129c0 	.word	0x200129c0
 8000ab4:	20003f58 	.word	0x20003f58
 8000ab8:	200129c8 	.word	0x200129c8
 8000abc:	20010a78 	.word	0x20010a78

08000ac0 <drifter_newSegment>:
/*-------------------------------------------------------------------------------------------*/
void drifter_newSegment(Drifter_t *d) //
{
	d->n = 0;
	d->initial = d->final;
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 8000ac0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8000b20 <drifter_newSegment+0x60>
 8000ac4:	ed90 7a00 	vldr	s14, [r0]
 8000ac8:	ee87 0a87 	vdiv.f32	s0, s15, s14
	d->n = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	6183      	str	r3, [r0, #24]
	d->initial = d->final;
 8000ad0:	6a03      	ldr	r3, [r0, #32]
 8000ad2:	61c3      	str	r3, [r0, #28]
{
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	4604      	mov	r4, r0
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 8000ad8:	ed90 7a01 	vldr	s14, [r0, #4]
	d->minLength = 0.5f * SAMPLERATE / d->fmax ;
 8000adc:	ed80 0a03 	vstr	s0, [r0, #12]
	d->maxLength = 0.5f * SAMPLERATE / d->fmin ;
 8000ae0:	eec7 0a87 	vdiv.f32	s1, s15, s14
 8000ae4:	edc0 0a04 	vstr	s1, [r0, #16]
	d->length = frand_a_b(d->minLength,d->maxLength);
 8000ae8:	f000 fa6c 	bl	8000fc4 <frand_a_b>
 8000aec:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	d->final = frand_a_b(-1, 1);
 8000af0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	d->length = frand_a_b(d->minLength,d->maxLength);
 8000af4:	ed84 0a05 	vstr	s0, [r4, #20]
	d->final = frand_a_b(-1, 1);
 8000af8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8000afc:	f000 fa62 	bl	8000fc4 <frand_a_b>
	d->slope = (d->final - d->initial) / d->length ;
 8000b00:	edd4 7a07 	vldr	s15, [r4, #28]
	d->final = frand_a_b(-1, 1);
 8000b04:	ed84 0a08 	vstr	s0, [r4, #32]
	d->slope = (d->final - d->initial) / d->length ;
 8000b08:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000b0c:	edd4 7a05 	vldr	s15, [r4, #20]
 8000b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b14:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8000b18:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 8000b1c:	bd10      	pop	{r4, pc}
 8000b1e:	bf00      	nop
 8000b20:	46ac4400 	.word	0x46ac4400

08000b24 <drifter_prepare>:
	return drifter_nextSample(&d2);
}
/*---------------------------------------------------------------------------------------------*/
void drifter_prepare(Drifter_t *d)
{
	d->final = 0;
 8000b24:	2200      	movs	r2, #0
 8000b26:	6202      	str	r2, [r0, #32]
	d->fmax = 4;
 8000b28:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000b2c:	6002      	str	r2, [r0, #0]
	d->fmin = 2;
 8000b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b32:	6042      	str	r2, [r0, #4]
	d->gain = .01f;
 8000b34:	4a01      	ldr	r2, [pc, #4]	; (8000b3c <drifter_prepare+0x18>)
 8000b36:	6082      	str	r2, [r0, #8]

	drifter_newSegment(d);
 8000b38:	f7ff bfc2 	b.w	8000ac0 <drifter_newSegment>
 8000b3c:	3c23d70a 	.word	0x3c23d70a

08000b40 <drifter_init>:
}
/*---------------------------------------------------------------------------------------------*/
void drifter_init(void)
{
 8000b40:	b510      	push	{r4, lr}
	drifter_prepare(&d1);
 8000b42:	4c07      	ldr	r4, [pc, #28]	; (8000b60 <drifter_init+0x20>)
 8000b44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b48:	f7ff ffec 	bl	8000b24 <drifter_prepare>
	drifter_prepare(&d2);
 8000b4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8000b50:	f7ff ffe8 	bl	8000b24 <drifter_prepare>
	drifter_prepare(&d3);
 8000b54:	4620      	mov	r0, r4
}
 8000b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	drifter_prepare(&d3);
 8000b5a:	f7ff bfe3 	b.w	8000b24 <drifter_prepare>
 8000b5e:	bf00      	nop
 8000b60:	20003ca8 	.word	0x20003ca8

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	2414      	movs	r4, #20
{
 8000b68:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	4622      	mov	r2, r4
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	a80d      	add	r0, sp, #52	; 0x34
 8000b70:	f002 fc16 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b76:	4622      	mov	r2, r4
 8000b78:	2100      	movs	r1, #0
 8000b7a:	a807      	add	r0, sp, #28
 8000b7c:	f002 fc10 	bl	80033a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b80:	4632      	mov	r2, r6
 8000b82:	2100      	movs	r1, #0
 8000b84:	a803      	add	r0, sp, #12
 8000b86:	f002 fc0b 	bl	80033a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <SystemClock_Config+0xa4>)
 8000b8e:	9501      	str	r5, [sp, #4]
 8000b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <SystemClock_Config+0xa8>)
 8000ba4:	9502      	str	r5, [sp, #8]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb4:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bb6:	2208      	movs	r2, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bba:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bbe:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc4:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bca:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bcc:	e9cd 760f 	strd	r7, r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd0:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd4:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f001 ffaf 	bl	8002b38 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	e9cd 3407 	strd	r3, r4, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be8:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bec:	a807      	add	r0, sp, #28
 8000bee:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf2:	f002 f975 	bl	8002ee0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000bf6:	2332      	movs	r3, #50	; 0x32
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bfa:	9703      	str	r7, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bfc:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c00:	f002 fa28 	bl	8003054 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000c04:	b019      	add	sp, #100	; 0x64
 8000c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 8000c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}

 	uint8_t data[2];


	/* Assemble 2-byte data in WM8731 format */
    data[0] = ((RegisterAddr<<1)&0xFE) | ((RegisterValue>>8)&0x01);     // 0x0C in your example
 8000c12:	f3c1 2300 	ubfx	r3, r1, #8, #1
 8000c16:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    data[1] = RegisterValue&0xFF;    // MSB byte of 16bit data


    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT);  // data is the start pointer of our array
 8000c1a:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
    data[0] = ((RegisterAddr<<1)&0xFE) | ((RegisterValue>>8)&0x01);     // 0x0C in your example
 8000c1e:	f88d 000c 	strb.w	r0, [sp, #12]
    data[1] = RegisterValue&0xFF;    // MSB byte of 16bit data
 8000c22:	f88d 100d 	strb.w	r1, [sp, #13]
    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 2, CODEC_LONG_TIMEOUT);  // data is the start pointer of our array
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	aa03      	add	r2, sp, #12
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	2134      	movs	r1, #52	; 0x34
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <Codec_WriteRegister+0x38>)
 8000c30:	f001 fbea 	bl	8002408 <HAL_I2C_Master_Transmit>
    /* Check the communication status */
    if(status != HAL_OK)
 8000c34:	4604      	mov	r4, r0
 8000c36:	b120      	cbz	r0, 8000c42 <Codec_WriteRegister+0x32>
    {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <Codec_WriteRegister+0x3c>)
 8000c3e:	f001 fa61 	bl	8002104 <HAL_GPIO_WritePin>
    }

      // data is the start pointer of our array
	/* Return the verifying value: 0 (Passed) or 1 (Failed) */
	return status;
}
 8000c42:	4620      	mov	r0, r4
 8000c44:	b004      	add	sp, #16
 8000c46:	bd10      	pop	{r4, pc}
 8000c48:	20013994 	.word	0x20013994
 8000c4c:	40020000 	.word	0x40020000

08000c50 <Codec_Reset>:
{
 8000c50:	b538      	push	{r3, r4, r5, lr}
	Codec_WriteRegister(0x0f, 0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	200f      	movs	r0, #15
 8000c56:	f7ff ffdb 	bl	8000c10 <Codec_WriteRegister>
		Codec_WriteRegister(i, w8731_init_data[i]);
 8000c5a:	4d05      	ldr	r5, [pc, #20]	; (8000c70 <Codec_Reset+0x20>)
	Codec_WriteRegister(0x0f, 0);
 8000c5c:	2400      	movs	r4, #0
		Codec_WriteRegister(i, w8731_init_data[i]);
 8000c5e:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8000c62:	b2e0      	uxtb	r0, r4
 8000c64:	3401      	adds	r4, #1
 8000c66:	f7ff ffd3 	bl	8000c10 <Codec_WriteRegister>
	for(i=0;i<W8731_NUM_REGS;i++)
 8000c6a:	2c0a      	cmp	r4, #10
 8000c6c:	d1f7      	bne.n	8000c5e <Codec_Reset+0xe>
}
 8000c6e:	bd38      	pop	{r3, r4, r5, pc}
 8000c70:	08003598 	.word	0x08003598

08000c74 <main>:
{
 8000c74:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	2614      	movs	r6, #20
{
 8000c78:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	4d7d      	ldr	r5, [pc, #500]	; (8000e74 <main+0x200>)
  HAL_Init();
 8000c7e:	f000 fd17 	bl	80016b0 <HAL_Init>
  SystemClock_Config();
 8000c82:	f7ff ff6f 	bl	8000b64 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	4632      	mov	r2, r6
 8000c88:	2100      	movs	r1, #0
 8000c8a:	a807      	add	r0, sp, #28
 8000c8c:	f002 fb88 	bl	80033a0 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c90:	9403      	str	r4, [sp, #12]
 8000c92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c94:	4878      	ldr	r0, [pc, #480]	; (8000e78 <main+0x204>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9a:	632b      	str	r3, [r5, #48]	; 0x30
 8000c9c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca2:	9303      	str	r3, [sp, #12]
 8000ca4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	9404      	str	r4, [sp, #16]
 8000ca8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	632b      	str	r3, [r5, #48]	; 0x30
 8000cb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	9304      	str	r3, [sp, #16]
 8000cb8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	9405      	str	r4, [sp, #20]
 8000cbc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	632b      	str	r3, [r5, #48]	; 0x30
 8000cc4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	9305      	str	r3, [sp, #20]
 8000ccc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	9406      	str	r4, [sp, #24]
 8000cd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	632b      	str	r3, [r5, #48]	; 0x30
 8000cd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000cde:	4622      	mov	r2, r4
 8000ce0:	4631      	mov	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ce8:	f001 fa0c 	bl	8002104 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	a907      	add	r1, sp, #28
 8000cee:	4862      	ldr	r0, [pc, #392]	; (8000e78 <main+0x204>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000cf0:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	e9cd 7408 	strd	r7, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f001 f924 	bl	8001f44 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cfc:	9401      	str	r4, [sp, #4]
 8000cfe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2c2.Init.ClockSpeed = 100000;
 8000d00:	4e5e      	ldr	r6, [pc, #376]	; (8000e7c <main+0x208>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d06:	632b      	str	r3, [r5, #48]	; 0x30
 8000d08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d12:	9402      	str	r4, [sp, #8]
 8000d14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d1a:	632b      	str	r3, [r5, #48]	; 0x30
 8000d1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000d1e:	4d58      	ldr	r5, [pc, #352]	; (8000e80 <main+0x20c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d24:	4622      	mov	r2, r4
 8000d26:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d28:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d2a:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d2e:	f000 ff25 	bl	8001b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 ff56 	bl	8001be4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d38:	4622      	mov	r2, r4
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	2038      	movs	r0, #56	; 0x38
 8000d3e:	f000 ff1d 	bl	8001b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d42:	2038      	movs	r0, #56	; 0x38
 8000d44:	f000 ff4e 	bl	8001be4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d48:	4621      	mov	r1, r4
 8000d4a:	2210      	movs	r2, #16
 8000d4c:	a807      	add	r0, sp, #28
 8000d4e:	f002 fb27 	bl	80033a0 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000d52:	4a4c      	ldr	r2, [pc, #304]	; (8000e84 <main+0x210>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d54:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5a:	e9c5 2300 	strd	r2, r3, [r5]
  hadc1.Init.NbrOfConversion = 4;
 8000d5e:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <main+0x214>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d64:	f885 4020 	strb.w	r4, [r5, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d68:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6c:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6e:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d70:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d72:	762f      	strb	r7, [r5, #24]
  hadc1.Init.NbrOfConversion = 4;
 8000d74:	f8c5 801c 	str.w	r8, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d78:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7c:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7e:	f000 fcd7 	bl	8001730 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_10;
 8000d82:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d84:	a907      	add	r1, sp, #28
 8000d86:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8000d88:	e9cd 3707 	strd	r3, r7, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d8c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8e:	f000 fe53 	bl	8001a38 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	210b      	movs	r1, #11
 8000d96:	e9cd 1307 	strd	r1, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9a:	4628      	mov	r0, r5
 8000d9c:	a907      	add	r1, sp, #28
 8000d9e:	f000 fe4b 	bl	8001a38 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 3;
 8000da2:	f04f 090c 	mov.w	r9, #12
 8000da6:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	a907      	add	r1, sp, #28
 8000daa:	4628      	mov	r0, r5
  sConfig.Rank = 3;
 8000dac:	e9cd 9307 	strd	r9, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db0:	f000 fe42 	bl	8001a38 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_13;
 8000db6:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db8:	4628      	mov	r0, r5
  sConfig.Rank = 4;
 8000dba:	e9cd 3807 	strd	r3, r8, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbe:	f000 fe3b 	bl	8001a38 <HAL_ADC_ConfigChannel>
  hi2c2.Instance = I2C2;
 8000dc2:	4832      	ldr	r0, [pc, #200]	; (8000e8c <main+0x218>)
  hi2c2.Init.ClockSpeed = 100000;
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <main+0x21c>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc6:	6204      	str	r4, [r0, #32]
  hi2c2.Init.ClockSpeed = 100000;
 8000dc8:	e9c0 6300 	strd	r6, r3, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2s2.Instance = SPI2;
 8000dd0:	4e30      	ldr	r6, [pc, #192]	; (8000e94 <main+0x220>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c2.Init.OwnAddress1 = 0;
 8000dd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dda:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dde:	f001 fa67 	bl	80022b0 <HAL_I2C_Init>
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000de2:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8000eb0 <main+0x23c>
 8000de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dea:	e9c6 c300 	strd	ip, r3, [r6]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dee:	6133      	str	r3, [r6, #16]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000df0:	4630      	mov	r0, r6
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000df2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000df6:	e9c6 3405 	strd	r3, r4, [r6, #20]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000dfa:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000dfe:	e9c6 4707 	strd	r4, r7, [r6, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000e02:	f001 fbd5 	bl	80025b0 <HAL_I2S_Init>
  huart1.Init.BaudRate = 115200;
 8000e06:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8000eb4 <main+0x240>
  huart1.Instance = USART1;
 8000e0a:	4823      	ldr	r0, [pc, #140]	; (8000e98 <main+0x224>)
  huart1.Init.BaudRate = 115200;
 8000e0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e10:	e9c0 e300 	strd	lr, r3, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e14:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e18:	e9c0 4904 	strd	r4, r9, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e20:	f002 fa66 	bl	80032f0 <HAL_UART_Init>
  hrng.Instance = RNG;
 8000e24:	481d      	ldr	r0, [pc, #116]	; (8000e9c <main+0x228>)
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <main+0x22c>)
 8000e28:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e2a:	f002 f9d9 	bl	80031e0 <HAL_RNG_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValArray, 4);
 8000e2e:	4642      	mov	r2, r8
 8000e30:	491c      	ldr	r1, [pc, #112]	; (8000ea4 <main+0x230>)
	  pin_state = !pin_state;
 8000e32:	4c1d      	ldr	r4, [pc, #116]	; (8000ea8 <main+0x234>)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValArray, 4);
 8000e34:	4628      	mov	r0, r5
 8000e36:	f000 fd21 	bl	800187c <HAL_ADC_Start_DMA>
  HAL_I2S_MspInit(&hi2s2);
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f000 fad4 	bl	80013e8 <HAL_I2S_MspInit>
	Synth_Init();
 8000e40:	f000 f994 	bl	800116c <Synth_Init>
  Codec_Reset();
 8000e44:	f7ff ff04 	bl	8000c50 <Codec_Reset>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)&audiobuff[0], 2*BUFF_LEN); // size must be in bytes
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000e4e:	4917      	ldr	r1, [pc, #92]	; (8000eac <main+0x238>)
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, pin_state);
 8000e50:	4e09      	ldr	r6, [pc, #36]	; (8000e78 <main+0x204>)
		  HAL_Delay(adcValArray[1]);
 8000e52:	4d14      	ldr	r5, [pc, #80]	; (8000ea4 <main+0x230>)
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)&audiobuff[0], 2*BUFF_LEN); // size must be in bytes
 8000e54:	f001 fc44 	bl	80026e0 <HAL_I2S_Transmit_DMA>
	  pin_state = !pin_state;
 8000e58:	8822      	ldrh	r2, [r4, #0]
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	0952      	lsrs	r2, r2, #5
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, pin_state);
 8000e60:	4630      	mov	r0, r6
 8000e62:	2104      	movs	r1, #4
	  pin_state = !pin_state;
 8000e64:	8022      	strh	r2, [r4, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, pin_state);
 8000e66:	f001 f94d 	bl	8002104 <HAL_GPIO_WritePin>
		  HAL_Delay(adcValArray[1]);
 8000e6a:	8868      	ldrh	r0, [r5, #2]
 8000e6c:	f000 fc4c 	bl	8001708 <HAL_Delay>
 8000e70:	e7f2      	b.n	8000e58 <main+0x1e4>
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40005800 	.word	0x40005800
 8000e80:	200139f0 	.word	0x200139f0
 8000e84:	40012000 	.word	0x40012000
 8000e88:	0f000001 	.word	0x0f000001
 8000e8c:	20013994 	.word	0x20013994
 8000e90:	000186a0 	.word	0x000186a0
 8000e94:	20013b48 	.word	0x20013b48
 8000e98:	20013a38 	.word	0x20013a38
 8000e9c:	20013ad8 	.word	0x20013ad8
 8000ea0:	50060800 	.word	0x50060800
 8000ea4:	200139e8 	.word	0x200139e8
 8000ea8:	200129cc 	.word	0x200129cc
 8000eac:	200129f0 	.word	0x200129f0
 8000eb0:	40003800 	.word	0x40003800
 8000eb4:	40011000 	.word	0x40011000

08000eb8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eb8:	4770      	bx	lr

08000eba <fastTan>:
	return in * tanhXdX(0.5*in);
}
//------------------------------------------------------------------------------------
float 	fastTan(float x)
{
	float A = -15*x+x*x*x;
 8000eba:	ee20 7a00 	vmul.f32	s14, s0, s0
	float B = 3*(-5+2*x*x);
 8000ebe:	ee70 6a00 	vadd.f32	s13, s0, s0
	float A = -15*x+x*x*x;
 8000ec2:	ee27 7a00 	vmul.f32	s14, s14, s0
 8000ec6:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
 8000eca:	eea0 7a27 	vfma.f32	s14, s0, s15
	float B = 3*(-5+2*x*x);
 8000ece:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 8000ed2:	eee6 7a80 	vfma.f32	s15, s13, s0
 8000ed6:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8000eda:	ee27 0a80 	vmul.f32	s0, s15, s0
	return A/B;
}
 8000ede:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8000ee2:	4770      	bx	lr

08000ee4 <osc_init>:
osc_init(Oscillator_t * op, float_t amp, float_t freq)
{
	op->amp = amp;
	op->last_amp = amp;
	op->freq = freq;
	op->phase = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60c3      	str	r3, [r0, #12]
	op->out = 0;
 8000ee8:	61c3      	str	r3, [r0, #28]
	op->modInd = 0;
 8000eea:	6143      	str	r3, [r0, #20]
	op->mul = 1;
 8000eec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	op->amp = amp;
 8000ef0:	ed80 0a00 	vstr	s0, [r0]
	op->last_amp = amp;
 8000ef4:	ed80 0a01 	vstr	s0, [r0, #4]
	op->freq = freq;
 8000ef8:	edc0 0a02 	vstr	s1, [r0, #8]
	op->mul = 1;
 8000efc:	6183      	str	r3, [r0, #24]
}
 8000efe:	4770      	bx	lr

08000f00 <AdditiveGen_newWaveform>:
	op->phase += _2PI * Ts * op->freq; // increment phase
	return op->out;
}
/*-------------------------------------------------------*/
void AdditiveGen_newWaveform(void) //
{
 8000f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t k;

	a[0] = a[1] = 1;
 8000f04:	4c1a      	ldr	r4, [pc, #104]	; (8000f70 <AdditiveGen_newWaveform+0x70>)
{
 8000f06:	ed2d 8b04 	vpush	{d8-d9}
	a[0] = a[1] = 1;
 8000f0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	ph[0] = ph[1] = 0;
 8000f0e:	2200      	movs	r2, #0

	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
	{
		a[k] = frand_a_b(0.001f , 0.98f);
 8000f10:	ed9f 9a18 	vldr	s18, [pc, #96]	; 8000f74 <AdditiveGen_newWaveform+0x74>
 8000f14:	eddf 8a18 	vldr	s17, [pc, #96]	; 8000f78 <AdditiveGen_newWaveform+0x78>
	a[0] = a[1] = 1;
 8000f18:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8000f1c:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
	ph[0] = ph[1] = 0;
 8000f20:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8000f24:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8000f28:	f104 0888 	add.w	r8, r4, #136	; 0x88
 8000f2c:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
	ph[0] = ph[1] = 0;
 8000f30:	2509      	movs	r5, #9
 8000f32:	eeb0 8a67 	vmov.f32	s16, s15
 8000f36:	4616      	mov	r6, r2
		a[k] = frand_a_b(0.001f , 0.98f);
 8000f38:	eef0 0a49 	vmov.f32	s1, s18
 8000f3c:	eeb0 0a68 	vmov.f32	s0, s17
 8000f40:	f000 f840 	bl	8000fc4 <frand_a_b>
 8000f44:	eca8 0a01 	vstmia	r8!, {s0}
		a[0] += a[k];
 8000f48:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
		ph[k] = 0;
 8000f4c:	f847 6b04 	str.w	r6, [r7], #4
		a[0] += a[k];
 8000f50:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000f54:	3d01      	subs	r5, #1
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8000f56:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		a[0] += a[k];
 8000f5a:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80
	for ( k= 2; k <= PARTIALS_NUMBER ; k++)
 8000f5e:	d1eb      	bne.n	8000f38 <AdditiveGen_newWaveform+0x38>
	}
	a[0] = 1.f / a[0];
 8000f60:	eec8 7a00 	vdiv.f32	s15, s16, s0
}
 8000f64:	ecbd 8b04 	vpop	{d8-d9}
	a[0] = 1.f / a[0];
 8000f68:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
}
 8000f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f70:	20003d2c 	.word	0x20003d2c
 8000f74:	3f7ae148 	.word	0x3f7ae148
 8000f78:	3a83126f 	.word	0x3a83126f

08000f7c <PhaserInit>:
void PhaserInit(void)
{
	f_min = 200.f;
	f_max = 1700.f;
	swrate = 0.1f;
	fb = 0.7f;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <PhaserInit+0x20>)
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <PhaserInit+0x24>)
 8000f80:	601a      	str	r2, [r3, #0]
	wet = 0.3f;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <PhaserInit+0x28>)
 8000f84:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <PhaserInit+0x2c>)
 8000f86:	601a      	str	r2, [r3, #0]

	dmin = 2 * f_min / SAMPLERATE;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <PhaserInit+0x30>)
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <PhaserInit+0x34>)
 8000f8c:	601a      	str	r2, [r3, #0]
	dmax = 2 * f_max / SAMPLERATE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <PhaserInit+0x38>)
 8000f90:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <PhaserInit+0x3c>)
 8000f92:	601a      	str	r2, [r3, #0]
	lfoInc = _2PI * swrate / SAMPLERATE;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <PhaserInit+0x40>)
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <PhaserInit+0x44>)
 8000f98:	601a      	str	r2, [r3, #0]
}
 8000f9a:	4770      	bx	lr
 8000f9c:	200129d8 	.word	0x200129d8
 8000fa0:	3f333333 	.word	0x3f333333
 8000fa4:	200129e0 	.word	0x200129e0
 8000fa8:	3e99999a 	.word	0x3e99999a
 8000fac:	200129d4 	.word	0x200129d4
 8000fb0:	3c149b93 	.word	0x3c149b93
 8000fb4:	200129d0 	.word	0x200129d0
 8000fb8:	3d9de54c 	.word	0x3d9de54c
 8000fbc:	200129dc 	.word	0x200129dc
 8000fc0:	376f08eb 	.word	0x376f08eb

08000fc4 <frand_a_b>:
//---------------------------------------------------------------------------
/**************
 * returns a random float between a and b
 *****************/
float_t frand_a_b(float_t a, float_t b)
{
 8000fc4:	b508      	push	{r3, lr}
 8000fc6:	ed2d 8b02 	vpush	{d8}
 8000fca:	eef0 8a40 	vmov.f32	s17, s0
 8000fce:	eeb0 8a60 	vmov.f32	s16, s1
	return ( rand()/(float_t)RAND_MAX ) * (b-a) + a ;
 8000fd2:	f002 f9ed 	bl	80033b0 <rand>
 8000fd6:	ee07 0a90 	vmov	s15, r0
 8000fda:	ee38 8a68 	vsub.f32	s16, s16, s17
 8000fde:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
}
 8000fe2:	eeb0 0a68 	vmov.f32	s0, s17
 8000fe6:	eea7 0a88 	vfma.f32	s0, s15, s16
 8000fea:	ecbd 8b02 	vpop	{d8}
 8000fee:	bd08      	pop	{r3, pc}

08000ff0 <SVF_directSetFilterValue>:
#endif

}
//------------------------------------------------------------------------------------
void SVF_directSetFilterValue(ResonantFilter* filter, float val) // 0 < val < 1
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	ed2d 8b02 	vpush	{d8}
	if (val > 0.95) val = 0.95f;
 8000ff8:	ee10 0a10 	vmov	r0, s0
{
 8000ffc:	eeb0 8a40 	vmov.f32	s16, s0
	if (val > 0.95) val = 0.95f;
 8001000:	f7ff fa46 	bl	8000490 <__aeabi_f2d>
 8001004:	a310      	add	r3, pc, #64	; (adr r3, 8001048 <SVF_directSetFilterValue+0x58>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fb17 	bl	800063c <__aeabi_dcmpgt>
 800100e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001040 <SVF_directSetFilterValue+0x50>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf18      	it	ne
 8001016:	eeb0 8a67 	vmovne.f32	s16, s15
	filter->f = val*0.5f;
 800101a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800101e:	ee28 8a00 	vmul.f32	s16, s16, s0
	filter->g  = fastTan(_PI * filter->f );
 8001022:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001044 <SVF_directSetFilterValue+0x54>
	filter->f = val*0.5f;
 8001026:	ed84 8a01 	vstr	s16, [r4, #4]
	filter->g  = fastTan(_PI * filter->f );
 800102a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800102e:	f7ff ff44 	bl	8000eba <fastTan>

}
 8001032:	ecbd 8b02 	vpop	{d8}
	filter->g  = fastTan(_PI * filter->f );
 8001036:	ed84 0a02 	vstr	s0, [r4, #8]
}
 800103a:	bd10      	pop	{r4, pc}
 800103c:	f3af 8000 	nop.w
 8001040:	3f733333 	.word	0x3f733333
 8001044:	40490fdb 	.word	0x40490fdb
 8001048:	66666666 	.word	0x66666666
 800104c:	3fee6666 	.word	0x3fee6666

08001050 <SVF_initialize>:
{
 8001050:	b538      	push	{r3, r4, r5, lr}
	filter->type = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	7003      	strb	r3, [r0, #0]
	filter->f = 0.20f;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <SVF_initialize+0x28>)
 8001058:	6043      	str	r3, [r0, #4]
	filter->q = 0.9f;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <SVF_initialize+0x2c>)
 800105c:	60c3      	str	r3, [r0, #12]
	filter->s1 = 0;
 800105e:	2500      	movs	r5, #0
{
 8001060:	4604      	mov	r4, r0
	filter->drive = 0.4f;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <SVF_initialize+0x30>)
	filter->s1 = 0;
 8001064:	6105      	str	r5, [r0, #16]
	filter->s2 = 0;
 8001066:	6145      	str	r5, [r0, #20]
	filter->drive = 0.4f;
 8001068:	6183      	str	r3, [r0, #24]
	SVF_directSetFilterValue(filter,0.25f);
 800106a:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800106e:	f7ff ffbf 	bl	8000ff0 <SVF_directSetFilterValue>
	filter->zi = 0;	//input z^(-1)
 8001072:	61e5      	str	r5, [r4, #28]
}
 8001074:	bd38      	pop	{r3, r4, r5, pc}
 8001076:	bf00      	nop
 8001078:	3e4ccccd 	.word	0x3e4ccccd
 800107c:	3f666666 	.word	0x3f666666
 8001080:	3ecccccd 	.word	0x3ecccccd

08001084 <SVF_init>:
//=====================================================================================================
void SVF_init(void)
{
 8001084:	b510      	push	{r4, lr}
	SVF_initialize(&SVFilter);
 8001086:	4c05      	ldr	r4, [pc, #20]	; (800109c <SVF_init+0x18>)
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff ffe1 	bl	8001050 <SVF_initialize>
	SVF_initialize(&SVFilter2);
 800108e:	f104 0020 	add.w	r0, r4, #32
}
 8001092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SVF_initialize(&SVFilter2);
 8001096:	f7ff bfdb 	b.w	8001050 <SVF_initialize>
 800109a:	bf00      	nop
 800109c:	20003e84 	.word	0x20003e84

080010a0 <seq_sequence_new>:
	noteGen.octaveSpread = (uint8_t) (8 / MIDI_MAX * val);
	noteGen.chRequested = true;
}

/*--------------------------------------------------------------------------------------------*/
void seq_sequence_new(void) {
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	4d1d      	ldr	r5, [pc, #116]	; (8001118 <seq_sequence_new+0x78>)
 80010a4:	ed2d 8b02 	vpush	{d8}
	int16_t index;

	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
		relativeNote = noteGen.currentScale[lrintf(
				frand_a_b(1, noteGen.currentScale[0]))];
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 80010a8:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 800111c <seq_sequence_new+0x7c>
void seq_sequence_new(void) {
 80010ac:	2410      	movs	r4, #16
 80010ae:	462e      	mov	r6, r5
		relativeNote = noteGen.currentScale[lrintf(
 80010b0:	6db7      	ldr	r7, [r6, #88]	; 0x58
 80010b2:	783b      	ldrb	r3, [r7, #0]
 80010b4:	ee00 3a90 	vmov	s1, r3
 80010b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010bc:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80010c0:	f7ff ff80 	bl	8000fc4 <frand_a_b>
 80010c4:	f002 fa1c 	bl	8003500 <lrintf>
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 80010c8:	f9b6 305c 	ldrsh.w	r3, [r6, #92]	; 0x5c
		relativeNote = noteGen.currentScale[lrintf(
 80010cc:	5c3f      	ldrb	r7, [r7, r0]
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 80010ce:	ee00 3a90 	vmov	s1, r3
 80010d2:	eeb0 0a48 	vmov.f32	s0, s16
 80010d6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80010da:	f7ff ff73 	bl	8000fc4 <frand_a_b>
 80010de:	f002 fa0f 	bl	8003500 <lrintf>
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 80010e2:	f8b6 205e 	ldrh.w	r2, [r6, #94]	; 0x5e
		octaveShift = 12 * lrintf(frand_a_b(0, noteGen.octaveSpread));
 80010e6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
		index = noteGen.rootNote + octaveShift + relativeNote - LOWEST_NOTE;
 80010ea:	3a15      	subs	r2, #21
 80010ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80010f0:	443b      	add	r3, r7
 80010f2:	b21b      	sxth	r3, r3

		while (index > MAX_NOTE_INDEX)
 80010f4:	2b6a      	cmp	r3, #106	; 0x6a
 80010f6:	dc0a      	bgt.n	800110e <seq_sequence_new+0x6e>
			index -= 12;
		while (index < 0)
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <seq_sequence_new+0x72>
			index += 12;
		seq.track1.note[i] = index; // note frequency is in notesFreq[index]
 80010fc:	3c01      	subs	r4, #1
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 80010fe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		seq.track1.note[i] = index; // note frequency is in notesFreq[index]
 8001102:	f825 3b02 	strh.w	r3, [r5], #2
	for (uint8_t i = 0; i < NUMBER_STEPS; i++) {
 8001106:	d1d3      	bne.n	80010b0 <seq_sequence_new+0x10>
	}
}
 8001108:	ecbd 8b02 	vpop	{d8}
 800110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			index -= 12;
 800110e:	3b0c      	subs	r3, #12
 8001110:	e7ef      	b.n	80010f2 <seq_sequence_new+0x52>
			index += 12;
 8001112:	330c      	adds	r3, #12
 8001114:	b21b      	sxth	r3, r3
 8001116:	e7ef      	b.n	80010f8 <seq_sequence_new+0x58>
 8001118:	20003ec4 	.word	0x20003ec4
 800111c:	00000000 	.word	0x00000000

08001120 <sequencer_init>:
		seq.track1.note[i] = noteIndex;
	}
	noteGen.transpose = 0;
}
/*--------------------------------------------------------------------------------------------*/
void sequencer_init(void) {
 8001120:	b510      	push	{r4, lr}
	seq.tempo = INIT_TEMPO;
 8001122:	4c0d      	ldr	r4, [pc, #52]	; (8001158 <sequencer_init+0x38>)
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <sequencer_init+0x3c>)
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8001126:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001160 <sequencer_init+0x40>
	seq.tempo = INIT_TEMPO;
 800112a:	6423      	str	r3, [r4, #64]	; 0x40
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 800112c:	f002 f9e8 	bl	8003500 <lrintf>
	noteGen.automaticON = false;
	noteGen.glideON = false;
	noteGen.chRequested = false;
	noteGen.someNotesMuted = false;
	noteGen.scaleIndex = 0;
	noteGen.octaveSpread = 4;
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <sequencer_init+0x44>)
	seq.steptime = lrintf(SAMPLERATE * 60 / seq.tempo);
 8001132:	6460      	str	r0, [r4, #68]	; 0x44
	seq.smp_count = 0;
 8001134:	2300      	movs	r3, #0
	noteGen.transpose = 0;
 8001136:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
	seq.smp_count = 0;
 800113a:	64a3      	str	r3, [r4, #72]	; 0x48
	seq.step_idx = 0;
 800113c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	noteGen.scaleIndex = 0;
 8001140:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	noteGen.chRequested = false;
 8001144:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	seq.gateTime = seq.steptime / 2;
 8001148:	1040      	asrs	r0, r0, #1
	noteGen.rootNote = 36;
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <sequencer_init+0x48>)
	seq.gateTime = seq.steptime / 2;
 800114c:	6520      	str	r0, [r4, #80]	; 0x50
	noteGen.currentScale = (uint8_t*) MIDIscale13;
 800114e:	65a3      	str	r3, [r4, #88]	; 0x58

	seq_sequence_new();
}
 8001150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seq_sequence_new();
 8001154:	f7ff bfa4 	b.w	80010a0 <seq_sequence_new>
 8001158:	20003ec4 	.word	0x20003ec4
 800115c:	43a00000 	.word	0x43a00000
 8001160:	46013300 	.word	0x46013300
 8001164:	00240004 	.word	0x00240004
 8001168:	080035ac 	.word	0x080035ac

0800116c <Synth_Init>:
	}
}

/*===============================================================================================================*/

void Synth_Init(void) {
 800116c:	b500      	push	{lr}
 800116e:	ed2d 8b02 	vpush	{d8}

	vol = env = 1;
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <Synth_Init+0xe4>)
	filterFreq2 = 0.25f;
	osc_init(&op1, 0.8f, 587.f);
	osc_init(&op2, 0.8f, 587.f);
	osc_init(&op3, 0.8f, 587.f);
	osc_init(&op4, 0.8f, 587.f);
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 8001174:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8001254 <Synth_Init+0xe8>
	vol = env = 1;
 8001178:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
void Synth_Init(void) {
 800117c:	b083      	sub	sp, #12
	vol = env = 1;
 800117e:	609a      	str	r2, [r3, #8]
	sound = MORPH_SAW;
 8001180:	2200      	movs	r2, #0
 8001182:	705a      	strb	r2, [r3, #1]
	autoFilterON = false;
 8001184:	70da      	strb	r2, [r3, #3]
	autoSound = 0;
 8001186:	701a      	strb	r2, [r3, #0]
	chorusON = false;
 8001188:	711a      	strb	r2, [r3, #4]
	delayON = false;
 800118a:	709a      	strb	r2, [r3, #2]
	phaserON = false;
 800118c:	715a      	strb	r2, [r3, #5]
	Delay_init();
 800118e:	f7ff fc81 	bl	8000a94 <Delay_init>
	drifter_init();
 8001192:	f7ff fcd5 	bl	8000b40 <drifter_init>
	sequencer_init();
 8001196:	f7ff ffc3 	bl	8001120 <sequencer_init>
	ADSR_init(&adsr);
 800119a:	482f      	ldr	r0, [pc, #188]	; (8001258 <Synth_Init+0xec>)
 800119c:	f7ff fbd8 	bl	8000950 <ADSR_init>
	Chorus_init();
 80011a0:	f7ff fc2c 	bl	80009fc <Chorus_init>
	PhaserInit();
 80011a4:	f7ff feea 	bl	8000f7c <PhaserInit>
	SVF_init();
 80011a8:	f7ff ff6c 	bl	8001084 <SVF_init>
	filterFreq = 0.25f;
 80011ac:	4a2b      	ldr	r2, [pc, #172]	; (800125c <Synth_Init+0xf0>)
	osc_init(&op1, 0.8f, 587.f);
 80011ae:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8001260 <Synth_Init+0xf4>
 80011b2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001264 <Synth_Init+0xf8>
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <Synth_Init+0xfc>)
 80011b8:	edcd 0a01 	vstr	s1, [sp, #4]
	filterFreq = 0.25f;
 80011bc:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80011c0:	6013      	str	r3, [r2, #0]
	filterFreq2 = 0.25f;
 80011c2:	4a2a      	ldr	r2, [pc, #168]	; (800126c <Synth_Init+0x100>)
	osc_init(&op1, 0.8f, 587.f);
 80011c4:	ed8d 0a00 	vstr	s0, [sp]
	filterFreq2 = 0.25f;
 80011c8:	6013      	str	r3, [r2, #0]
	osc_init(&op1, 0.8f, 587.f);
 80011ca:	f7ff fe8b 	bl	8000ee4 <osc_init>
	osc_init(&op2, 0.8f, 587.f);
 80011ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80011d2:	ed9d 0a00 	vldr	s0, [sp]
 80011d6:	4826      	ldr	r0, [pc, #152]	; (8001270 <Synth_Init+0x104>)
 80011d8:	f7ff fe84 	bl	8000ee4 <osc_init>
	osc_init(&op3, 0.8f, 587.f);
 80011dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80011e0:	ed9d 0a00 	vldr	s0, [sp]
 80011e4:	4823      	ldr	r0, [pc, #140]	; (8001274 <Synth_Init+0x108>)
 80011e6:	f7ff fe7d 	bl	8000ee4 <osc_init>
	osc_init(&op4, 0.8f, 587.f);
 80011ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80011ee:	ed9d 0a00 	vldr	s0, [sp]
 80011f2:	4821      	ldr	r0, [pc, #132]	; (8001278 <Synth_Init+0x10c>)
 80011f4:	f7ff fe76 	bl	8000ee4 <osc_init>
	osc_init(&vibr_lfo, 0, VIBRATO_FREQ);
 80011f8:	eeb0 0a48 	vmov.f32	s0, s16
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <Synth_Init+0x110>)
 80011fe:	eef1 0a06 	vmov.f32	s1, #22	; 0x40b00000  5.5
 8001202:	f7ff fe6f 	bl	8000ee4 <osc_init>
	osc_init(&filt_lfo, 0, 0);
 8001206:	eef0 0a48 	vmov.f32	s1, s16
 800120a:	eeb0 0a48 	vmov.f32	s0, s16
 800120e:	481c      	ldr	r0, [pc, #112]	; (8001280 <Synth_Init+0x114>)
 8001210:	f7ff fe68 	bl	8000ee4 <osc_init>
	osc_init(&filt2_lfo, 0, 0);
 8001214:	eef0 0a48 	vmov.f32	s1, s16
 8001218:	eeb0 0a48 	vmov.f32	s0, s16
 800121c:	4819      	ldr	r0, [pc, #100]	; (8001284 <Synth_Init+0x118>)
 800121e:	f7ff fe61 	bl	8000ee4 <osc_init>
	osc_init(&amp_lfo, 0, 0);
 8001222:	eef0 0a48 	vmov.f32	s1, s16
 8001226:	eeb0 0a48 	vmov.f32	s0, s16
 800122a:	4817      	ldr	r0, [pc, #92]	; (8001288 <Synth_Init+0x11c>)
 800122c:	f7ff fe5a 	bl	8000ee4 <osc_init>
	AdditiveGen_newWaveform();
 8001230:	f7ff fe66 	bl	8000f00 <AdditiveGen_newWaveform>
	VCO_blepsaw_Init(&mbSawOsc);
 8001234:	4815      	ldr	r0, [pc, #84]	; (800128c <Synth_Init+0x120>)
 8001236:	f7ff fb9f 	bl	8000978 <VCO_blepsaw_Init>
	VCO_bleprect_Init(&mbRectOsc);
 800123a:	4815      	ldr	r0, [pc, #84]	; (8001290 <Synth_Init+0x124>)
 800123c:	f7ff fbb2 	bl	80009a4 <VCO_bleprect_Init>
	VCO_bleptri_Init(&mbTriOsc);
 8001240:	4814      	ldr	r0, [pc, #80]	; (8001294 <Synth_Init+0x128>)
}
 8001242:	b003      	add	sp, #12
 8001244:	ecbd 8b02 	vpop	{d8}
 8001248:	f85d eb04 	ldr.w	lr, [sp], #4
	VCO_bleptri_Init(&mbTriOsc);
 800124c:	f7ff bbc0 	b.w	80009d0 <VCO_bleptri_Init>
 8001250:	20003f2c 	.word	0x20003f2c
 8001254:	00000000 	.word	0x00000000
 8001258:	20000070 	.word	0x20000070
 800125c:	20013b90 	.word	0x20013b90
 8001260:	4412c000 	.word	0x4412c000
 8001264:	3f4ccccd 	.word	0x3f4ccccd
 8001268:	20003d8c 	.word	0x20003d8c
 800126c:	20013b94 	.word	0x20013b94
 8001270:	20003d6c 	.word	0x20003d6c
 8001274:	20003d4c 	.word	0x20003d4c
 8001278:	20003d2c 	.word	0x20003d2c
 800127c:	20003e64 	.word	0x20003e64
 8001280:	20003e44 	.word	0x20003e44
 8001284:	20003e24 	.word	0x20003e24
 8001288:	20003e04 	.word	0x20003e04
 800128c:	20000b4c 	.word	0x20000b4c
 8001290:	200005f0 	.word	0x200005f0
 8001294:	20000098 	.word	0x20000098

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x34>)
 800129c:	2100      	movs	r1, #0
 800129e:	9100      	str	r1, [sp, #0]
 80012a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
 80012a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012ae:	9200      	str	r2, [sp, #0]
 80012b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	9101      	str	r1, [sp, #4]
 80012b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	b002      	add	sp, #8
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	4606      	mov	r6, r0
 80012d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	2214      	movs	r2, #20
 80012d8:	2100      	movs	r1, #0
 80012da:	a803      	add	r0, sp, #12
 80012dc:	f002 f860 	bl	80033a0 <memset>
  if(hadc->Instance==ADC1)
 80012e0:	6832      	ldr	r2, [r6, #0]
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_ADC_MspInit+0x94>)
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d13b      	bne.n	8001360 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012e8:	2500      	movs	r5, #0
 80012ea:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80012ee:	9501      	str	r5, [sp, #4]
 80012f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	481d      	ldr	r0, [pc, #116]	; (8001368 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012f4:	4c1d      	ldr	r4, [pc, #116]	; (800136c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
 80012fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001302:	9201      	str	r2, [sp, #4]
 8001304:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	9502      	str	r5, [sp, #8]
 8001308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800130a:	f042 0204 	orr.w	r2, r2, #4
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131c:	220f      	movs	r2, #15
 800131e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001320:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	f000 fe0d 	bl	8001f44 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800132c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001330:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001334:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001338:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133c:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001344:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001348:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800134a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134e:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001352:	f000 fc81 	bl	8001c58 <HAL_DMA_Init>
 8001356:	b108      	cbz	r0, 800135c <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
 8001358:	f7ff fdae 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800135c:	63b4      	str	r4, [r6, #56]	; 0x38
 800135e:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001360:	b008      	add	sp, #32
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	40012000 	.word	0x40012000
 8001368:	40020800 	.word	0x40020800
 800136c:	20013a78 	.word	0x20013a78
 8001370:	40026410 	.word	0x40026410

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b530      	push	{r4, r5, lr}
 8001376:	4604      	mov	r4, r0
 8001378:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	2214      	movs	r2, #20
 800137c:	2100      	movs	r1, #0
 800137e:	a803      	add	r0, sp, #12
 8001380:	f002 f80e 	bl	80033a0 <memset>
  if(hi2c->Instance==I2C2)
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_I2C_MspInit+0x68>)
 8001388:	429a      	cmp	r2, r3
 800138a:	d124      	bne.n	80013d6 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4c14      	ldr	r4, [pc, #80]	; (80013e0 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	4815      	ldr	r0, [pc, #84]	; (80013e4 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	2500      	movs	r5, #0
 8001392:	9501      	str	r5, [sp, #4]
 8001394:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	6323      	str	r3, [r4, #48]	; 0x30
 800139c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80013aa:	2312      	movs	r3, #18
 80013ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2101      	movs	r1, #1
 80013b2:	2303      	movs	r3, #3
 80013b4:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013b8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f000 fdc1 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013c2:	9502      	str	r5, [sp, #8]
 80013c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ca:	6423      	str	r3, [r4, #64]	; 0x40
 80013cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013d6:	b009      	add	sp, #36	; 0x24
 80013d8:	bd30      	pop	{r4, r5, pc}
 80013da:	bf00      	nop
 80013dc:	40005800 	.word	0x40005800
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020400 	.word	0x40020400

080013e8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ec:	4606      	mov	r6, r0
 80013ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	2214      	movs	r2, #20
 80013f2:	2100      	movs	r1, #0
 80013f4:	a803      	add	r0, sp, #12
 80013f6:	f001 ffd3 	bl	80033a0 <memset>
  if(hi2s->Instance==SPI2)
 80013fa:	6832      	ldr	r2, [r6, #0]
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 80013fe:	429a      	cmp	r2, r3
 8001400:	d169      	bne.n	80014d6 <HAL_I2S_MspInit+0xee>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001402:	2500      	movs	r5, #0
 8001404:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001408:	9500      	str	r5, [sp, #0]
 800140a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	4834      	ldr	r0, [pc, #208]	; (80014e0 <HAL_I2S_MspInit+0xf8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800140e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
 8001414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001416:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800141a:	9200      	str	r2, [sp, #0]
 800141c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	9501      	str	r5, [sp, #4]
 8001420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001422:	f042 0202 	orr.w	r2, r2, #2
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
 8001428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142a:	f002 0202 	and.w	r2, r2, #2
 800142e:	9201      	str	r2, [sp, #4]
 8001430:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	9502      	str	r5, [sp, #8]
 8001434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001436:	f042 0204 	orr.w	r2, r2, #4
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001448:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145a:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f000 fd71 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	481d      	ldr	r0, [pc, #116]	; (80014e0 <HAL_I2S_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800146c:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001470:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001472:	2740      	movs	r7, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f000 fd64 	bl	8001f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	4819      	ldr	r0, [pc, #100]	; (80014e4 <HAL_I2S_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147e:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	e9cd 5505 	strd	r5, r5, [sp, #20]

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800148c:	4c16      	ldr	r4, [pc, #88]	; (80014e8 <HAL_I2S_MspInit+0x100>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f000 fd59 	bl	8001f44 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_I2S_MspInit+0x104>)
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001494:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001496:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800149a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800149e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014a2:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80014b2:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014b6:	2304      	movs	r3, #4
 80014b8:	e9c4 0308 	strd	r0, r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014bc:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014be:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c0:	e9c4 7502 	strd	r7, r5, [r4, #8]
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80014c4:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014c8:	f000 fbc6 	bl	8001c58 <HAL_DMA_Init>
 80014cc:	b108      	cbz	r0, 80014d2 <HAL_I2S_MspInit+0xea>
    {
      Error_Handler();
 80014ce:	f7ff fcf3 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80014d2:	63b4      	str	r4, [r6, #56]	; 0x38
 80014d4:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014d6:	b008      	add	sp, #32
 80014d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014dc:	40003800 	.word	0x40003800
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20013ae8 	.word	0x20013ae8
 80014ec:	40026070 	.word	0x40026070

080014f0 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80014f0:	6802      	ldr	r2, [r0, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RNG_MspInit+0x28>)
 80014f4:	429a      	cmp	r2, r3
{
 80014f6:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 80014f8:	d10b      	bne.n	8001512 <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_RNG_MspInit+0x2c>)
 8001500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
 8001508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001512:	b002      	add	sp, #8
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	50060800 	.word	0x50060800
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b510      	push	{r4, lr}
 8001522:	4604      	mov	r4, r0
 8001524:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	2214      	movs	r2, #20
 8001528:	2100      	movs	r1, #0
 800152a:	a803      	add	r0, sp, #12
 800152c:	f001 ff38 	bl	80033a0 <memset>
  if(huart->Instance==USART1)
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_MspInit+0x64>)
 8001534:	429a      	cmp	r2, r3
 8001536:	d123      	bne.n	8001580 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001538:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800153c:	2200      	movs	r2, #0
 800153e:	9201      	str	r2, [sp, #4]
 8001540:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001542:	f041 0110 	orr.w	r1, r1, #16
 8001546:	6459      	str	r1, [r3, #68]	; 0x44
 8001548:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800154a:	f001 0110 	and.w	r1, r1, #16
 800154e:	9101      	str	r1, [sp, #4]
 8001550:	9901      	ldr	r1, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	9202      	str	r2, [sp, #8]
 8001554:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001556:	f041 0102 	orr.w	r1, r1, #2
 800155a:	6319      	str	r1, [r3, #48]	; 0x30
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001570:	2003      	movs	r0, #3
 8001572:	2307      	movs	r3, #7
 8001574:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	a903      	add	r1, sp, #12
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <HAL_UART_MspInit+0x68>)
 800157c:	f000 fce2 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001580:	b008      	add	sp, #32
 8001582:	bd10      	pop	{r4, pc}
 8001584:	40011000 	.word	0x40011000
 8001588:	40020400 	.word	0x40020400

0800158c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800158c:	4770      	bx	lr

0800158e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler>

08001590 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler>

08001592 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler>

08001594 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler>

08001596 <SVC_Handler>:
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 b8a2 	b.w	80016e4 <HAL_IncTick>

080015a0 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80015a0:	4801      	ldr	r0, [pc, #4]	; (80015a8 <DMA1_Stream4_IRQHandler+0x8>)
 80015a2:	f000 bc11 	b.w	8001dc8 <HAL_DMA_IRQHandler>
 80015a6:	bf00      	nop
 80015a8:	20013ae8 	.word	0x20013ae8

080015ac <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015ac:	4801      	ldr	r0, [pc, #4]	; (80015b4 <DMA2_Stream0_IRQHandler+0x8>)
 80015ae:	f000 bc0b 	b.w	8001dc8 <HAL_DMA_IRQHandler>
 80015b2:	bf00      	nop
 80015b4:	20013a78 	.word	0x20013a78

080015b8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <_sbrk+0x30>)
 80015ba:	6819      	ldr	r1, [r3, #0]
{
 80015bc:	b510      	push	{r4, lr}
 80015be:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80015c0:	b909      	cbnz	r1, 80015c6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <_sbrk+0x34>)
 80015c4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	4909      	ldr	r1, [pc, #36]	; (80015f0 <_sbrk+0x38>)
 80015ca:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <_sbrk+0x3c>)
 80015cc:	4402      	add	r2, r0
 80015ce:	1b09      	subs	r1, r1, r4
 80015d0:	428a      	cmp	r2, r1
 80015d2:	d906      	bls.n	80015e2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80015d4:	f001 feba 	bl	800334c <__errno>
 80015d8:	230c      	movs	r3, #12
 80015da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80015e0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80015e2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80015e4:	e7fc      	b.n	80015e0 <_sbrk+0x28>
 80015e6:	bf00      	nop
 80015e8:	200129e4 	.word	0x200129e4
 80015ec:	20013ba0 	.word	0x20013ba0
 80015f0:	20020000 	.word	0x20020000
 80015f4:	00000400 	.word	0x00000400

080015f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SystemInit+0x18>)
 80015fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80015fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160a:	609a      	str	r2, [r3, #8]
#endif
}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001618:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800161a:	e003      	b.n	8001624 <LoopCopyDataInit>

0800161c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800161e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001620:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001622:	3104      	adds	r1, #4

08001624 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001628:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800162a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800162c:	d3f6      	bcc.n	800161c <CopyDataInit>
  ldr  r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001630:	e002      	b.n	8001638 <LoopFillZerobss>

08001632 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001632:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001634:	f842 3b04 	str.w	r3, [r2], #4

08001638 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800163a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800163c:	d3f9      	bcc.n	8001632 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffdb 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f001 fe89 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fb15 	bl	8000c74 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800164c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001650:	080035e8 	.word	0x080035e8
  ldr  r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001658:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800165c:	20003f3c 	.word	0x20003f3c
  ldr  r3, = _ebss
 8001660:	20013ba0 	.word	0x20013ba0

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_InitTick+0x3c>)
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_InitTick+0x40>)
{
 800166e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	7818      	ldrb	r0, [r3, #0]
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f0 	udiv	r3, r3, r0
 800167a:	6810      	ldr	r0, [r2, #0]
 800167c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001680:	f000 fabe 	bl	8001c00 <HAL_SYSTICK_Config>
 8001684:	4604      	mov	r4, r0
 8001686:	b958      	cbnz	r0, 80016a0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001688:	2d0f      	cmp	r5, #15
 800168a:	d809      	bhi.n	80016a0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	4602      	mov	r2, r0
 800168e:	4629      	mov	r1, r5
 8001690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001694:	f000 fa72 	bl	8001b7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_InitTick+0x44>)
 800169a:	4620      	mov	r0, r4
 800169c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800169e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
 80016a2:	e7fc      	b.n	800169e <HAL_InitTick+0x36>
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_Init>:
{
 80016b0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_Init+0x30>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 fa43 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff ffc8 	bl	8001668 <HAL_InitTick>
  HAL_MspInit();
 80016d8:	f7ff fdde 	bl	8001298 <HAL_MspInit>
}
 80016dc:	2000      	movs	r0, #0
 80016de:	bd08      	pop	{r3, pc}
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_IncTick+0x10>)
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HAL_IncTick+0x14>)
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	440b      	add	r3, r1
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20013b98 	.word	0x20013b98
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016fc:	4b01      	ldr	r3, [pc, #4]	; (8001704 <HAL_GetTick+0x8>)
 80016fe:	6818      	ldr	r0, [r3, #0]
}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20013b98 	.word	0x20013b98

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b538      	push	{r3, r4, r5, lr}
 800170a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff fff6 	bl	80016fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001710:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	bf1c      	itt	ne
 8001714:	4b05      	ldrne	r3, [pc, #20]	; (800172c <HAL_Delay+0x24>)
 8001716:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001718:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800171a:	bf18      	it	ne
 800171c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171e:	f7ff ffed 	bl	80016fc <HAL_GetTick>
 8001722:	1b40      	subs	r0, r0, r5
 8001724:	42a0      	cmp	r0, r4
 8001726:	d3fa      	bcc.n	800171e <HAL_Delay+0x16>
  {
  }
}
 8001728:	bd38      	pop	{r3, r4, r5, pc}
 800172a:	bf00      	nop
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001730:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001732:	4604      	mov	r4, r0
 8001734:	2800      	cmp	r0, #0
 8001736:	f000 809b 	beq.w	8001870 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800173a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800173c:	b925      	cbnz	r5, 8001748 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800173e:	f7ff fdc7 	bl	80012d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001742:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001744:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001748:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800174a:	06db      	lsls	r3, r3, #27
 800174c:	f100 808e 	bmi.w	800186c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001752:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001756:	f023 0302 	bic.w	r3, r3, #2
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001760:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_ADC_Init+0x144>)
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001768:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	6861      	ldr	r1, [r4, #4]
 800176e:	430a      	orrs	r2, r1
 8001770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001772:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001774:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800177c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001784:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001786:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001788:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800178a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800178e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	430a      	orrs	r2, r1
 8001794:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001796:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001798:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800179a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a6:	4934      	ldr	r1, [pc, #208]	; (8001878 <HAL_ADC_Init+0x148>)
 80017a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017aa:	428a      	cmp	r2, r1
 80017ac:	d052      	beq.n	8001854 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ae:	6899      	ldr	r1, [r3, #8]
 80017b0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80017b4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017bc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ca:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017cc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ce:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d0:	f022 0202 	bic.w	r2, r2, #2
 80017d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80017dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017de:	f894 2020 	ldrb.w	r2, [r4, #32]
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	d03e      	beq.n	8001864 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	3901      	subs	r1, #1
 80017fc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001800:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001804:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180e:	3901      	subs	r1, #1
 8001810:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001816:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001818:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800181c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001828:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800182a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800182c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800182e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001834:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001836:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001838:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800183c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800183e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800184c:	2300      	movs	r3, #0
 800184e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001852:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800185a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001862:	e7b2      	b.n	80017ca <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186a:	e7c9      	b.n	8001800 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800186c:	2001      	movs	r0, #1
 800186e:	e7ed      	b.n	800184c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
 8001872:	e7ee      	b.n	8001852 <HAL_ADC_Init+0x122>
 8001874:	40012300 	.word	0x40012300
 8001878:	0f000001 	.word	0x0f000001

0800187c <HAL_ADC_Start_DMA>:
{
 800187c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800187e:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001880:	2200      	movs	r2, #0
 8001882:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001884:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001888:	2a01      	cmp	r2, #1
{
 800188a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800188c:	d077      	beq.n	800197e <HAL_ADC_Start_DMA+0x102>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800188e:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8001890:	2201      	movs	r2, #1
 8001892:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001896:	68aa      	ldr	r2, [r5, #8]
 8001898:	07d0      	lsls	r0, r2, #31
 800189a:	d505      	bpl.n	80018a8 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800189c:	68aa      	ldr	r2, [r5, #8]
 800189e:	07d2      	lsls	r2, r2, #31
 80018a0:	d415      	bmi.n	80018ce <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 80018a2:	2000      	movs	r0, #0
}
 80018a4:	b003      	add	sp, #12
 80018a6:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80018a8:	68aa      	ldr	r2, [r5, #8]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018b0:	4a34      	ldr	r2, [pc, #208]	; (8001984 <HAL_ADC_Start_DMA+0x108>)
 80018b2:	6810      	ldr	r0, [r2, #0]
 80018b4:	4a34      	ldr	r2, [pc, #208]	; (8001988 <HAL_ADC_Start_DMA+0x10c>)
 80018b6:	fbb0 f0f2 	udiv	r0, r0, r2
 80018ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80018be:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80018c0:	9a01      	ldr	r2, [sp, #4]
 80018c2:	2a00      	cmp	r2, #0
 80018c4:	d0ea      	beq.n	800189c <HAL_ADC_Start_DMA+0x20>
      counter--;
 80018c6:	9a01      	ldr	r2, [sp, #4]
 80018c8:	3a01      	subs	r2, #1
 80018ca:	9201      	str	r2, [sp, #4]
 80018cc:	e7f8      	b.n	80018c0 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80018ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80018d0:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80018d4:	f020 0001 	bic.w	r0, r0, #1
 80018d8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80018dc:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018de:	686a      	ldr	r2, [r5, #4]
 80018e0:	0550      	lsls	r0, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e2:	bf41      	itttt	mi
 80018e4:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 80018e6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80018ea:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80018ee:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018f8:	bf1c      	itt	ne
 80018fa:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80018fc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001900:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001902:	2200      	movs	r2, #0
 8001904:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001908:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_ADC_Start_DMA+0x110>)
 800190a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800190c:	4a20      	ldr	r2, [pc, #128]	; (8001990 <HAL_ADC_Start_DMA+0x114>)
 800190e:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001910:	4a20      	ldr	r2, [pc, #128]	; (8001994 <HAL_ADC_Start_DMA+0x118>)
 8001912:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001914:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001918:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800191a:	686a      	ldr	r2, [r5, #4]
 800191c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001920:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001922:	68aa      	ldr	r2, [r5, #8]
 8001924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001928:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800192a:	460a      	mov	r2, r1
 800192c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8001930:	f000 fa10 	bl	8001d54 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_ADC_Start_DMA+0x11c>)
 8001936:	4919      	ldr	r1, [pc, #100]	; (800199c <HAL_ADC_Start_DMA+0x120>)
 8001938:	6853      	ldr	r3, [r2, #4]
 800193a:	f013 0f1f 	tst.w	r3, #31
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	d11a      	bne.n	8001978 <HAL_ADC_Start_DMA+0xfc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001942:	428b      	cmp	r3, r1
 8001944:	d006      	beq.n	8001954 <HAL_ADC_Start_DMA+0xd8>
 8001946:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800194a:	428b      	cmp	r3, r1
 800194c:	d10b      	bne.n	8001966 <HAL_ADC_Start_DMA+0xea>
 800194e:	6852      	ldr	r2, [r2, #4]
 8001950:	06d2      	lsls	r2, r2, #27
 8001952:	d1a6      	bne.n	80018a2 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001954:	6898      	ldr	r0, [r3, #8]
 8001956:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800195a:	d1a2      	bne.n	80018a2 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e79e      	b.n	80018a4 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001966:	490e      	ldr	r1, [pc, #56]	; (80019a0 <HAL_ADC_Start_DMA+0x124>)
 8001968:	428b      	cmp	r3, r1
 800196a:	d19a      	bne.n	80018a2 <HAL_ADC_Start_DMA+0x26>
 800196c:	6852      	ldr	r2, [r2, #4]
 800196e:	f002 021f 	and.w	r2, r2, #31
 8001972:	2a0f      	cmp	r2, #15
 8001974:	d9ee      	bls.n	8001954 <HAL_ADC_Start_DMA+0xd8>
 8001976:	e794      	b.n	80018a2 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001978:	428b      	cmp	r3, r1
 800197a:	d192      	bne.n	80018a2 <HAL_ADC_Start_DMA+0x26>
 800197c:	e7ea      	b.n	8001954 <HAL_ADC_Start_DMA+0xd8>
  __HAL_LOCK(hadc);
 800197e:	2002      	movs	r0, #2
 8001980:	e790      	b.n	80018a4 <HAL_ADC_Start_DMA+0x28>
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	000f4240 	.word	0x000f4240
 800198c:	080019cb 	.word	0x080019cb
 8001990:	080019a9 	.word	0x080019a9
 8001994:	080019b5 	.word	0x080019b5
 8001998:	40012300 	.word	0x40012300
 800199c:	40012000 	.word	0x40012000
 80019a0:	40012200 	.word	0x40012200

080019a4 <HAL_ADC_ConvCpltCallback>:
 80019a4:	4770      	bx	lr

080019a6 <HAL_ADC_ConvHalfCpltCallback>:
 80019a6:	4770      	bx	lr

080019a8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019a8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80019ac:	f7ff fffb 	bl	80019a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019b0:	bd08      	pop	{r3, pc}

080019b2 <HAL_ADC_ErrorCallback>:
 80019b2:	4770      	bx	lr

080019b4 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80019b6:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019b8:	2340      	movs	r3, #64	; 0x40
 80019ba:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019c4:	f7ff fff5 	bl	80019b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019c8:	bd08      	pop	{r3, pc}

080019ca <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ce:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80019d2:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019d6:	d123      	bne.n	8001a20 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	6891      	ldr	r1, [r2, #8]
 80019e2:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80019e6:	d117      	bne.n	8001a18 <ADC_DMAConvCplt+0x4e>
 80019e8:	7e19      	ldrb	r1, [r3, #24]
 80019ea:	b9a9      	cbnz	r1, 8001a18 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019ee:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80019f2:	d002      	beq.n	80019fa <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019f4:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019f6:	0548      	lsls	r0, r1, #21
 80019f8:	d40e      	bmi.n	8001a18 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019fa:	6851      	ldr	r1, [r2, #4]
 80019fc:	f021 0120 	bic.w	r1, r1, #32
 8001a00:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0c:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a0e:	bf5e      	ittt	pl
 8001a10:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8001a12:	f042 0201 	orrpl.w	r2, r2, #1
 8001a16:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffc3 	bl	80019a4 <HAL_ADC_ConvCpltCallback>
}
 8001a1e:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a20:	06d2      	lsls	r2, r2, #27
 8001a22:	d503      	bpl.n	8001a2c <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ffc4 	bl	80019b2 <HAL_ADC_ErrorCallback>
 8001a2a:	e7f8      	b.n	8001a1e <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	4718      	bx	r3
	...

08001a38 <HAL_ADC_ConfigChannel>:
{
 8001a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001a3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d07e      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x10c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a46:	680d      	ldr	r5, [r1, #0]
 8001a48:	688e      	ldr	r6, [r1, #8]
  __HAL_LOCK(hadc);
 8001a4a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a4c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001a4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001a52:	b2ac      	uxth	r4, r5
 8001a54:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a56:	d929      	bls.n	8001aac <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a58:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001a5c:	68df      	ldr	r7, [r3, #12]
 8001a5e:	3a1e      	subs	r2, #30
 8001a60:	f04f 0c07 	mov.w	ip, #7
 8001a64:	fa0c fc02 	lsl.w	ip, ip, r2
 8001a68:	ea27 070c 	bic.w	r7, r7, ip
 8001a6c:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a6e:	68df      	ldr	r7, [r3, #12]
 8001a70:	fa06 f202 	lsl.w	r2, r6, r2
 8001a74:	433a      	orrs	r2, r7
 8001a76:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001a78:	6849      	ldr	r1, [r1, #4]
 8001a7a:	2906      	cmp	r1, #6
 8001a7c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001a80:	d824      	bhi.n	8001acc <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a84:	3a05      	subs	r2, #5
 8001a86:	261f      	movs	r6, #31
 8001a88:	4096      	lsls	r6, r2
 8001a8a:	ea21 0106 	bic.w	r1, r1, r6
 8001a8e:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a92:	fa04 f202 	lsl.w	r2, r4, r2
 8001a96:	430a      	orrs	r2, r1
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a9a:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <HAL_ADC_ConfigChannel+0x110>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d031      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001aa6:	4618      	mov	r0, r3
}
 8001aa8:	b003      	add	sp, #12
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001aac:	691f      	ldr	r7, [r3, #16]
 8001aae:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001ab2:	f04f 0c07 	mov.w	ip, #7
 8001ab6:	fa0c fc02 	lsl.w	ip, ip, r2
 8001aba:	ea27 070c 	bic.w	r7, r7, ip
 8001abe:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ac0:	691f      	ldr	r7, [r3, #16]
 8001ac2:	fa06 f202 	lsl.w	r2, r6, r2
 8001ac6:	433a      	orrs	r2, r7
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	e7d5      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001acc:	290c      	cmp	r1, #12
 8001ace:	f04f 011f 	mov.w	r1, #31
 8001ad2:	d80b      	bhi.n	8001aec <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ad4:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8001ad6:	3a23      	subs	r2, #35	; 0x23
 8001ad8:	4091      	lsls	r1, r2
 8001ada:	ea26 0101 	bic.w	r1, r6, r1
 8001ade:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ae0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae2:	fa04 f202 	lsl.w	r2, r4, r2
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aea:	e7d6      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aec:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001aee:	3a41      	subs	r2, #65	; 0x41
 8001af0:	4091      	lsls	r1, r2
 8001af2:	ea26 0101 	bic.w	r1, r6, r1
 8001af6:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afa:	fa04 f202 	lsl.w	r2, r4, r2
 8001afe:	430a      	orrs	r2, r1
 8001b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b02:	e7ca      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x62>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b04:	2d12      	cmp	r5, #18
 8001b06:	d104      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0xda>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b08:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <HAL_ADC_ConfigChannel+0x114>)
 8001b0a:	6853      	ldr	r3, [r2, #4]
 8001b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b10:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b12:	f1a5 0310 	sub.w	r3, r5, #16
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d8c2      	bhi.n	8001aa0 <HAL_ADC_ConfigChannel+0x68>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b1a:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <HAL_ADC_ConfigChannel+0x114>)
 8001b1c:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b1e:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b24:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b26:	d1bb      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x68>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_ADC_ConfigChannel+0x118>)
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_ADC_ConfigChannel+0x11c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b32:	230a      	movs	r3, #10
 8001b34:	4353      	muls	r3, r2
        counter--;
 8001b36:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001b38:	9b01      	ldr	r3, [sp, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0b0      	beq.n	8001aa0 <HAL_ADC_ConfigChannel+0x68>
        counter--;
 8001b3e:	9b01      	ldr	r3, [sp, #4]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	e7f8      	b.n	8001b36 <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 8001b44:	2002      	movs	r0, #2
 8001b46:	e7af      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x70>
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	40012300 	.word	0x40012300
 8001b50:	20000000 	.word	0x20000000
 8001b54:	000f4240 	.word	0x000f4240

08001b58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b5a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	0200      	lsls	r0, r0, #8
 8001b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001b72:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b74:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b570      	push	{r4, r5, r6, lr}
 8001b80:	68dc      	ldr	r4, [r3, #12]
 8001b82:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b86:	f1c4 0507 	rsb	r5, r4, #7
 8001b8a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	bf28      	it	cs
 8001b92:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b98:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	bf8c      	ite	hi
 8001ba0:	3c03      	subhi	r4, #3
 8001ba2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	ea21 0303 	bic.w	r3, r1, r3
 8001ba8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001baa:	fa06 f404 	lsl.w	r4, r6, r4
 8001bae:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	bfa8      	it	ge
 8001bba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001bbe:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	bfbc      	itt	lt
 8001bc4:	f000 000f 	andlt.w	r0, r0, #15
 8001bc8:	4a05      	ldrlt	r2, [pc, #20]	; (8001be0 <HAL_NVIC_SetPriority+0x64>)
 8001bca:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	bfaa      	itet	ge
 8001bce:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00
 8001be0:	e000ed14 	.word	0xe000ed14

08001be4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001be4:	2800      	cmp	r0, #0
 8001be6:	db08      	blt.n	8001bfa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be8:	0942      	lsrs	r2, r0, #5
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 001f 	and.w	r0, r0, #31
 8001bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8001bf4:	4b01      	ldr	r3, [pc, #4]	; (8001bfc <HAL_NVIC_EnableIRQ+0x18>)
 8001bf6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	3801      	subs	r0, #1
 8001c02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c06:	d20a      	bcs.n	8001c1e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	21f0      	movs	r1, #240	; 0xf0
 8001c10:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c14:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c2c:	6803      	ldr	r3, [r0, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c34:	f023 0303 	bic.w	r3, r3, #3
 8001c38:	2118      	movs	r1, #24
 8001c3a:	3a10      	subs	r2, #16
 8001c3c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c40:	4904      	ldr	r1, [pc, #16]	; (8001c54 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001c42:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c44:	bf88      	it	hi
 8001c46:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c48:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c4a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c4c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001c4e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	080035c6 	.word	0x080035c6

08001c58 <HAL_DMA_Init>:
{
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff fd4e 	bl	80016fc <HAL_GetTick>
 8001c60:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d071      	beq.n	8001d4a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001c66:	2300      	movs	r3, #0
 8001c68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001c6c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7c:	6821      	ldr	r1, [r4, #0]
 8001c7e:	680b      	ldr	r3, [r1, #0]
 8001c80:	07d8      	lsls	r0, r3, #31
 8001c82:	d43c      	bmi.n	8001cfe <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001c84:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c86:	4d32      	ldr	r5, [pc, #200]	; (8001d50 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c88:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c8a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	68e2      	ldr	r2, [r4, #12]
 8001c94:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c96:	6922      	ldr	r2, [r4, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	6962      	ldr	r2, [r4, #20]
 8001c9c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	69e2      	ldr	r2, [r4, #28]
 8001ca0:	4303      	orrs	r3, r0
 8001ca2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca4:	6a22      	ldr	r2, [r4, #32]
 8001ca6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001caa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cac:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cb0:	bf02      	ittt	eq
 8001cb2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001cb6:	4335      	orreq	r5, r6
 8001cb8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001cba:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001cbc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cbe:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001cc4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001cca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ccc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001cce:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd0:	b13d      	cbz	r5, 8001ce2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cd2:	b9f8      	cbnz	r0, 8001d14 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001cd4:	2a01      	cmp	r2, #1
 8001cd6:	d02d      	beq.n	8001d34 <HAL_DMA_Init+0xdc>
 8001cd8:	d301      	bcc.n	8001cde <HAL_DMA_Init+0x86>
 8001cda:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cdc:	d101      	bne.n	8001ce2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cde:	01ea      	lsls	r2, r5, #7
 8001ce0:	d42b      	bmi.n	8001d3a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001ce2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff ffa1 	bl	8001c2c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cec:	233f      	movs	r3, #63	; 0x3f
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001cfc:	e009      	b.n	8001d12 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfe:	f7ff fcfd 	bl	80016fc <HAL_GetTick>
 8001d02:	1b40      	subs	r0, r0, r5
 8001d04:	2805      	cmp	r0, #5
 8001d06:	d9b9      	bls.n	8001c7c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d0c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d14:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001d18:	d113      	bne.n	8001d42 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001d1a:	2a03      	cmp	r2, #3
 8001d1c:	d8e1      	bhi.n	8001ce2 <HAL_DMA_Init+0x8a>
 8001d1e:	a001      	add	r0, pc, #4	; (adr r0, 8001d24 <HAL_DMA_Init+0xcc>)
 8001d20:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001d24:	08001d3b 	.word	0x08001d3b
 8001d28:	08001cdf 	.word	0x08001cdf
 8001d2c:	08001d3b 	.word	0x08001d3b
 8001d30:	08001d35 	.word	0x08001d35
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d34:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001d38:	d1d3      	bne.n	8001ce2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	2001      	movs	r0, #1
 8001d40:	e7e5      	b.n	8001d0e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001d42:	2a02      	cmp	r2, #2
 8001d44:	d9f9      	bls.n	8001d3a <HAL_DMA_Init+0xe2>
 8001d46:	2a03      	cmp	r2, #3
 8001d48:	e7c8      	b.n	8001cdc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	e7e1      	b.n	8001d12 <HAL_DMA_Init+0xba>
 8001d4e:	bf00      	nop
 8001d50:	f010803f 	.word	0xf010803f

08001d54 <HAL_DMA_Start_IT>:
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001d56:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001d5a:	2c01      	cmp	r4, #1
 8001d5c:	d032      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x70>
 8001d5e:	2401      	movs	r4, #1
 8001d60:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d64:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d68:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d6a:	2c01      	cmp	r4, #1
 8001d6c:	f04f 0500 	mov.w	r5, #0
 8001d70:	f04f 0402 	mov.w	r4, #2
 8001d74:	d124      	bne.n	8001dc0 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d76:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d7a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d7e:	6825      	ldr	r5, [r4, #0]
 8001d80:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001d84:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001d86:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d88:	6883      	ldr	r3, [r0, #8]
 8001d8a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001d8c:	bf0e      	itee	eq
 8001d8e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001d90:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d92:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d94:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001d96:	bf08      	it	eq
 8001d98:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9a:	233f      	movs	r3, #63	; 0x3f
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	f043 0316 	orr.w	r3, r3, #22
 8001da6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001da8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001daa:	b11b      	cbz	r3, 8001db4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	2000      	movs	r0, #0
}
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001dc0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	e7fa      	b.n	8001dbe <HAL_DMA_Start_IT+0x6a>

08001dc8 <HAL_DMA_IRQHandler>:
{
 8001dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dce:	4b5c      	ldr	r3, [pc, #368]	; (8001f40 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001dd6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	2208      	movs	r2, #8
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	4232      	tst	r2, r6
{
 8001dde:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de0:	d00c      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001de2:	6801      	ldr	r1, [r0, #0]
 8001de4:	6808      	ldr	r0, [r1, #0]
 8001de6:	0740      	lsls	r0, r0, #29
 8001de8:	d508      	bpl.n	8001dfc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dea:	6808      	ldr	r0, [r1, #0]
 8001dec:	f020 0004 	bic.w	r0, r0, #4
 8001df0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001df2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	4232      	tst	r2, r6
 8001e02:	d008      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e04:	6821      	ldr	r1, [r4, #0]
 8001e06:	6949      	ldr	r1, [r1, #20]
 8001e08:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e0a:	bf41      	itttt	mi
 8001e0c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e0e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001e10:	f042 0202 	orrmi.w	r2, r2, #2
 8001e14:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e16:	2204      	movs	r2, #4
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	4232      	tst	r2, r6
 8001e1c:	d008      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e1e:	6821      	ldr	r1, [r4, #0]
 8001e20:	6809      	ldr	r1, [r1, #0]
 8001e22:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e24:	bf41      	itttt	mi
 8001e26:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e28:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001e2a:	f042 0204 	orrmi.w	r2, r2, #4
 8001e2e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	2210      	movs	r2, #16
 8001e32:	409a      	lsls	r2, r3
 8001e34:	4232      	tst	r2, r6
 8001e36:	d010      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	6819      	ldr	r1, [r3, #0]
 8001e3c:	0709      	lsls	r1, r1, #28
 8001e3e:	d50c      	bpl.n	8001e5a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e40:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	0350      	lsls	r0, r2, #13
 8001e46:	d537      	bpl.n	8001eb8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0319      	lsls	r1, r3, #12
 8001e4c:	d401      	bmi.n	8001e52 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e50:	e000      	b.n	8001e54 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001e54:	b10b      	cbz	r3, 8001e5a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001e56:	4620      	mov	r0, r4
 8001e58:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	408a      	lsls	r2, r1
 8001e60:	4232      	tst	r2, r6
 8001e62:	d03a      	beq.n	8001eda <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	06c6      	lsls	r6, r0, #27
 8001e6a:	d536      	bpl.n	8001eda <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e6c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e6e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001e72:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e74:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e76:	d127      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e78:	f022 0216 	bic.w	r2, r2, #22
 8001e7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e84:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e88:	b90a      	cbnz	r2, 8001e8e <HAL_DMA_IRQHandler+0xc6>
 8001e8a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001e8c:	b11a      	cbz	r2, 8001e96 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e96:	233f      	movs	r3, #63	; 0x3f
 8001e98:	408b      	lsls	r3, r1
 8001e9a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001ea8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d045      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001eae:	4620      	mov	r0, r4
}
 8001eb0:	b003      	add	sp, #12
 8001eb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001eb6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebc:	bf5e      	ittt	pl
 8001ebe:	681a      	ldrpl	r2, [r3, #0]
 8001ec0:	f022 0208 	bicpl.w	r2, r2, #8
 8001ec4:	601a      	strpl	r2, [r3, #0]
 8001ec6:	e7c2      	b.n	8001e4e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ec8:	0350      	lsls	r0, r2, #13
 8001eca:	d527      	bpl.n	8001f1c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0319      	lsls	r1, r3, #12
 8001ed0:	d431      	bmi.n	8001f36 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001ed2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001ed4:	b10b      	cbz	r3, 8001eda <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001edc:	b36b      	cbz	r3, 8001f3a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ede:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ee0:	07da      	lsls	r2, r3, #31
 8001ee2:	d519      	bpl.n	8001f18 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee4:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001ee6:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001eec:	6813      	ldr	r3, [r2, #0]
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001ef8:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001efc:	9b01      	ldr	r3, [sp, #4]
 8001efe:	3301      	adds	r3, #1
 8001f00:	42bb      	cmp	r3, r7
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	d802      	bhi.n	8001f0c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f06:	6813      	ldr	r3, [r2, #0]
 8001f08:	07db      	lsls	r3, r3, #31
 8001f0a:	d4f7      	bmi.n	8001efc <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001f18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f1a:	e7c6      	b.n	8001eaa <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001f22:	d108      	bne.n	8001f36 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	f021 0110 	bic.w	r1, r1, #16
 8001f2a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001f2e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001f32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001f36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f38:	e7cc      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x10c>
}
 8001f3a:	b003      	add	sp, #12
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f48:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80020fc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4a68      	ldr	r2, [pc, #416]	; (80020f4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f52:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8002100 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f56:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f58:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001f5a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8001f5e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f60:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8001f62:	42ac      	cmp	r4, r5
 8001f64:	f040 80b0 	bne.w	80020c8 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f68:	684c      	ldr	r4, [r1, #4]
 8001f6a:	f024 0c10 	bic.w	ip, r4, #16
 8001f6e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f72:	2603      	movs	r6, #3
 8001f74:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 8001f78:	fa06 f60e 	lsl.w	r6, r6, lr
 8001f7c:	2f01      	cmp	r7, #1
 8001f7e:	ea6f 0606 	mvn.w	r6, r6
 8001f82:	d811      	bhi.n	8001fa8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8001f84:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f86:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f8a:	68cf      	ldr	r7, [r1, #12]
 8001f8c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001f90:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001f94:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f96:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f98:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f9c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001fa0:	409f      	lsls	r7, r3
 8001fa2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8001fa6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001fa8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001faa:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fae:	688f      	ldr	r7, [r1, #8]
 8001fb0:	fa07 f70e 	lsl.w	r7, r7, lr
 8001fb4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001fbc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fbe:	d116      	bne.n	8001fee <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8001fc0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001fc4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001fcc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001fd4:	f04f 0c0f 	mov.w	ip, #15
 8001fd8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001fdc:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe0:	690f      	ldr	r7, [r1, #16]
 8001fe2:	fa07 f70b 	lsl.w	r7, r7, fp
 8001fe6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001fea:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001fee:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff2:	f004 0703 	and.w	r7, r4, #3
 8001ff6:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001ffa:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8001ffe:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002000:	00e6      	lsls	r6, r4, #3
 8002002:	d561      	bpl.n	80020c8 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002004:	f04f 0b00 	mov.w	fp, #0
 8002008:	f8cd b00c 	str.w	fp, [sp, #12]
 800200c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002010:	4e39      	ldr	r6, [pc, #228]	; (80020f8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002016:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800201a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800201e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002022:	9703      	str	r7, [sp, #12]
 8002024:	9f03      	ldr	r7, [sp, #12]
 8002026:	f023 0703 	bic.w	r7, r3, #3
 800202a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800202e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002032:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002036:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800203a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800203e:	f04f 0c0f 	mov.w	ip, #15
 8002042:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002048:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204c:	d043      	beq.n	80020d6 <HAL_GPIO_Init+0x192>
 800204e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002052:	42b0      	cmp	r0, r6
 8002054:	d041      	beq.n	80020da <HAL_GPIO_Init+0x196>
 8002056:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800205a:	42b0      	cmp	r0, r6
 800205c:	d03f      	beq.n	80020de <HAL_GPIO_Init+0x19a>
 800205e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002062:	42b0      	cmp	r0, r6
 8002064:	d03d      	beq.n	80020e2 <HAL_GPIO_Init+0x19e>
 8002066:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800206a:	42b0      	cmp	r0, r6
 800206c:	d03b      	beq.n	80020e6 <HAL_GPIO_Init+0x1a2>
 800206e:	4548      	cmp	r0, r9
 8002070:	d03b      	beq.n	80020ea <HAL_GPIO_Init+0x1a6>
 8002072:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002076:	42b0      	cmp	r0, r6
 8002078:	d039      	beq.n	80020ee <HAL_GPIO_Init+0x1aa>
 800207a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800207e:	42b0      	cmp	r0, r6
 8002080:	bf14      	ite	ne
 8002082:	2608      	movne	r6, #8
 8002084:	2607      	moveq	r6, #7
 8002086:	fa06 f60e 	lsl.w	r6, r6, lr
 800208a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8002090:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002092:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002094:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002098:	bf0c      	ite	eq
 800209a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800209c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800209e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80020a0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80020a6:	bf0c      	ite	eq
 80020a8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80020aa:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80020ac:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ae:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80020b4:	bf0c      	ite	eq
 80020b6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80020b8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80020ba:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80020bc:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020be:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80020c0:	bf54      	ite	pl
 80020c2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80020c4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80020c6:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c8:	3301      	adds	r3, #1
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	f47f af45 	bne.w	8001f5a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80020d0:	b005      	add	sp, #20
 80020d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d6:	465e      	mov	r6, fp
 80020d8:	e7d5      	b.n	8002086 <HAL_GPIO_Init+0x142>
 80020da:	2601      	movs	r6, #1
 80020dc:	e7d3      	b.n	8002086 <HAL_GPIO_Init+0x142>
 80020de:	2602      	movs	r6, #2
 80020e0:	e7d1      	b.n	8002086 <HAL_GPIO_Init+0x142>
 80020e2:	2603      	movs	r6, #3
 80020e4:	e7cf      	b.n	8002086 <HAL_GPIO_Init+0x142>
 80020e6:	2604      	movs	r6, #4
 80020e8:	e7cd      	b.n	8002086 <HAL_GPIO_Init+0x142>
 80020ea:	2605      	movs	r6, #5
 80020ec:	e7cb      	b.n	8002086 <HAL_GPIO_Init+0x142>
 80020ee:	2606      	movs	r6, #6
 80020f0:	e7c9      	b.n	8002086 <HAL_GPIO_Init+0x142>
 80020f2:	bf00      	nop
 80020f4:	40013c00 	.word	0x40013c00
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40021400 	.word	0x40021400

08002104 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002104:	b10a      	cbz	r2, 800210a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002106:	6181      	str	r1, [r0, #24]
  }
}
 8002108:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210a:	0409      	lsls	r1, r1, #16
 800210c:	e7fb      	b.n	8002106 <HAL_GPIO_WritePin+0x2>

0800210e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800210e:	6801      	ldr	r1, [r0, #0]
 8002110:	694b      	ldr	r3, [r1, #20]
 8002112:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	d010      	beq.n	800213e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002120:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002122:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002124:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002126:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800212e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800213a:	2001      	movs	r0, #1
 800213c:	4770      	bx	lr
  }
  return HAL_OK;
 800213e:	4618      	mov	r0, r3
}
 8002140:	4770      	bx	lr

08002142 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002146:	4604      	mov	r4, r0
 8002148:	4616      	mov	r6, r2
 800214a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800214c:	b28f      	uxth	r7, r1
 800214e:	6825      	ldr	r5, [r4, #0]
 8002150:	6968      	ldr	r0, [r5, #20]
 8002152:	ea37 0000 	bics.w	r0, r7, r0
 8002156:	d017      	beq.n	8002188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002158:	696b      	ldr	r3, [r5, #20]
 800215a:	055a      	lsls	r2, r3, #21
 800215c:	d516      	bpl.n	800218c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215e:	682b      	ldr	r3, [r5, #0]
 8002160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002164:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002166:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800216a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800216c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	2300      	movs	r3, #0
 8002170:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002172:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002176:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800217a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800217c:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002180:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002182:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002186:	2001      	movs	r0, #1
}
 8002188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800218c:	1c73      	adds	r3, r6, #1
 800218e:	d0df      	beq.n	8002150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002190:	f7ff fab4 	bl	80016fc <HAL_GetTick>
 8002194:	eba0 0008 	sub.w	r0, r0, r8
 8002198:	42b0      	cmp	r0, r6
 800219a:	d801      	bhi.n	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 800219c:	2e00      	cmp	r6, #0
 800219e:	d1d6      	bne.n	800214e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021a0:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80021a2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021a4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	e7e4      	b.n	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080021b6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80021b6:	b570      	push	{r4, r5, r6, lr}
 80021b8:	4604      	mov	r4, r0
 80021ba:	460d      	mov	r5, r1
 80021bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	075b      	lsls	r3, r3, #29
 80021c4:	d501      	bpl.n	80021ca <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80021c6:	2000      	movs	r0, #0
}
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff9f 	bl	800210e <I2C_IsAcknowledgeFailed>
 80021d0:	b9a8      	cbnz	r0, 80021fe <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80021d2:	1c6a      	adds	r2, r5, #1
 80021d4:	d0f3      	beq.n	80021be <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d6:	f7ff fa91 	bl	80016fc <HAL_GetTick>
 80021da:	1b80      	subs	r0, r0, r6
 80021dc:	42a8      	cmp	r0, r5
 80021de:	d801      	bhi.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80021e0:	2d00      	cmp	r5, #0
 80021e2:	d1ec      	bne.n	80021be <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021e4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80021e6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021e8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80021f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
 8002200:	e7e2      	b.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002202 <I2C_WaitOnFlagUntilTimeout>:
{
 8002202:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002206:	9e08      	ldr	r6, [sp, #32]
 8002208:	4604      	mov	r4, r0
 800220a:	4690      	mov	r8, r2
 800220c:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800220e:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8002212:	b28d      	uxth	r5, r1
 8002214:	6821      	ldr	r1, [r4, #0]
 8002216:	f1b9 0f01 	cmp.w	r9, #1
 800221a:	bf0c      	ite	eq
 800221c:	694b      	ldreq	r3, [r1, #20]
 800221e:	698b      	ldrne	r3, [r1, #24]
 8002220:	ea35 0303 	bics.w	r3, r5, r3
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	4598      	cmp	r8, r3
 800222c:	d001      	beq.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800222e:	2000      	movs	r0, #0
 8002230:	e016      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002232:	1c7b      	adds	r3, r7, #1
 8002234:	d0ef      	beq.n	8002216 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7ff fa61 	bl	80016fc <HAL_GetTick>
 800223a:	1b80      	subs	r0, r0, r6
 800223c:	42b8      	cmp	r0, r7
 800223e:	d801      	bhi.n	8002244 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002240:	2f00      	cmp	r7, #0
 8002242:	d1e7      	bne.n	8002214 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002244:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002246:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002248:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800224a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800224e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002252:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002254:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800225e:	2001      	movs	r0, #1
}
 8002260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002264 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4604      	mov	r4, r0
 8002268:	460d      	mov	r5, r1
 800226a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	d501      	bpl.n	8002278 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002274:	2000      	movs	r0, #0
}
 8002276:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff ff48 	bl	800210e <I2C_IsAcknowledgeFailed>
 800227e:	b9a8      	cbnz	r0, 80022ac <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002280:	1c6a      	adds	r2, r5, #1
 8002282:	d0f3      	beq.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7ff fa3a 	bl	80016fc <HAL_GetTick>
 8002288:	1b80      	subs	r0, r0, r6
 800228a:	42a8      	cmp	r0, r5
 800228c:	d801      	bhi.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800228e:	2d00      	cmp	r5, #0
 8002290:	d1ec      	bne.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002292:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002294:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002296:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002298:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800229c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80022a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022a6:	f042 0220 	orr.w	r2, r2, #32
 80022aa:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80022ac:	2001      	movs	r0, #1
 80022ae:	e7e2      	b.n	8002276 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080022b0 <HAL_I2C_Init>:
{
 80022b0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80022b2:	4604      	mov	r4, r0
 80022b4:	b908      	cbnz	r0, 80022ba <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
}
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022c2:	b91b      	cbnz	r3, 80022cc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80022c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80022c8:	f7ff f854 	bl	8001374 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80022cc:	2324      	movs	r3, #36	; 0x24
 80022ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ea:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022ec:	f000 fe92 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022f0:	6863      	ldr	r3, [r4, #4]
 80022f2:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <HAL_I2C_Init+0x148>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d84d      	bhi.n	8002394 <HAL_I2C_Init+0xe4>
 80022f8:	4a40      	ldr	r2, [pc, #256]	; (80023fc <HAL_I2C_Init+0x14c>)
 80022fa:	4290      	cmp	r0, r2
 80022fc:	d9db      	bls.n	80022b6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022fe:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002300:	493f      	ldr	r1, [pc, #252]	; (8002400 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002302:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002304:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002308:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800230c:	430d      	orrs	r5, r1
 800230e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002310:	6a15      	ldr	r5, [r2, #32]
 8002312:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002316:	3101      	adds	r1, #1
 8002318:	4329      	orrs	r1, r5
 800231a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800231c:	69d1      	ldr	r1, [r2, #28]
 800231e:	4d36      	ldr	r5, [pc, #216]	; (80023f8 <HAL_I2C_Init+0x148>)
 8002320:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002324:	42ab      	cmp	r3, r5
 8002326:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800232a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800232e:	d848      	bhi.n	80023c2 <HAL_I2C_Init+0x112>
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fbb0 f0f3 	udiv	r0, r0, r3
 8002336:	1c43      	adds	r3, r0, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b04      	cmp	r3, #4
 800233e:	bf38      	it	cc
 8002340:	2304      	movcc	r3, #4
 8002342:	430b      	orrs	r3, r1
 8002344:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002346:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	4303      	orrs	r3, r0
 800234e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002352:	430b      	orrs	r3, r1
 8002354:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002356:	6891      	ldr	r1, [r2, #8]
 8002358:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800235c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002360:	4303      	orrs	r3, r0
 8002362:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002366:	430b      	orrs	r3, r1
 8002368:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800236a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800236e:	68d1      	ldr	r1, [r2, #12]
 8002370:	4303      	orrs	r3, r0
 8002372:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002376:	430b      	orrs	r3, r1
 8002378:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800237a:	6813      	ldr	r3, [r2, #0]
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002382:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002384:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002386:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002388:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002392:	e791      	b.n	80022b8 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002394:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_I2C_Init+0x154>)
 8002396:	4290      	cmp	r0, r2
 8002398:	d98d      	bls.n	80022b6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800239c:	4e18      	ldr	r6, [pc, #96]	; (8002400 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80023a0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023a4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80023a8:	4335      	orrs	r5, r6
 80023aa:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ac:	6a15      	ldr	r5, [r2, #32]
 80023ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023b2:	4371      	muls	r1, r6
 80023b4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80023b8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80023bc:	fbb1 f1f6 	udiv	r1, r1, r6
 80023c0:	e7a9      	b.n	8002316 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023c2:	68a5      	ldr	r5, [r4, #8]
 80023c4:	b955      	cbnz	r5, 80023dc <HAL_I2C_Init+0x12c>
 80023c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80023ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80023ce:	1c43      	adds	r3, r0, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	b16b      	cbz	r3, 80023f2 <HAL_I2C_Init+0x142>
 80023d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023da:	e7b2      	b.n	8002342 <HAL_I2C_Init+0x92>
 80023dc:	2519      	movs	r5, #25
 80023de:	436b      	muls	r3, r5
 80023e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80023e4:	1c43      	adds	r3, r0, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	b113      	cbz	r3, 80023f2 <HAL_I2C_Init+0x142>
 80023ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f0:	e7a7      	b.n	8002342 <HAL_I2C_Init+0x92>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e7a5      	b.n	8002342 <HAL_I2C_Init+0x92>
 80023f6:	bf00      	nop
 80023f8:	000186a0 	.word	0x000186a0
 80023fc:	001e847f 	.word	0x001e847f
 8002400:	000f4240 	.word	0x000f4240
 8002404:	003d08ff 	.word	0x003d08ff

08002408 <HAL_I2C_Master_Transmit>:
{
 8002408:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800240c:	4604      	mov	r4, r0
 800240e:	461f      	mov	r7, r3
 8002410:	460d      	mov	r5, r1
 8002412:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff f972 	bl	80016fc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002418:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800241c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800241e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002420:	d004      	beq.n	800242c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002422:	2502      	movs	r5, #2
}
 8002424:	4628      	mov	r0, r5
 8002426:	b004      	add	sp, #16
 8002428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800242c:	9000      	str	r0, [sp, #0]
 800242e:	2319      	movs	r3, #25
 8002430:	2201      	movs	r2, #1
 8002432:	495b      	ldr	r1, [pc, #364]	; (80025a0 <HAL_I2C_Master_Transmit+0x198>)
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff fee4 	bl	8002202 <I2C_WaitOnFlagUntilTimeout>
 800243a:	2800      	cmp	r0, #0
 800243c:	d1f1      	bne.n	8002422 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800243e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d0ed      	beq.n	8002422 <HAL_I2C_Master_Transmit+0x1a>
 8002446:	2301      	movs	r3, #1
 8002448:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002452:	bf5e      	ittt	pl
 8002454:	681a      	ldrpl	r2, [r3, #0]
 8002456:	f042 0201 	orrpl.w	r2, r2, #1
 800245a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002464:	2221      	movs	r2, #33	; 0x21
 8002466:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800246a:	2210      	movs	r2, #16
 800246c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002470:	2200      	movs	r2, #0
 8002472:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002474:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002476:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002478:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800247a:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_I2C_Master_Transmit+0x19c>)
 800247c:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800247e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002480:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002484:	2a08      	cmp	r2, #8
 8002486:	d004      	beq.n	8002492 <HAL_I2C_Master_Transmit+0x8a>
 8002488:	2a01      	cmp	r2, #1
 800248a:	d002      	beq.n	8002492 <HAL_I2C_Master_Transmit+0x8a>
 800248c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002490:	d104      	bne.n	800249c <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e002      	b.n	80024a2 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800249c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800249e:	2a12      	cmp	r2, #18
 80024a0:	d0f7      	beq.n	8002492 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a2:	2200      	movs	r2, #0
 80024a4:	9600      	str	r6, [sp, #0]
 80024a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff fea8 	bl	8002202 <I2C_WaitOnFlagUntilTimeout>
 80024b2:	6822      	ldr	r2, [r4, #0]
 80024b4:	b138      	cbz	r0, 80024c6 <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ba:	bf44      	itt	mi
 80024bc:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80024c0:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80024c2:	2501      	movs	r5, #1
 80024c4:	e7ae      	b.n	8002424 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c6:	6923      	ldr	r3, [r4, #16]
 80024c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024cc:	d121      	bne.n	8002512 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ce:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80024d2:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024d4:	4633      	mov	r3, r6
 80024d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024d8:	4933      	ldr	r1, [pc, #204]	; (80025a8 <HAL_I2C_Master_Transmit+0x1a0>)
 80024da:	4620      	mov	r0, r4
 80024dc:	f7ff fe31 	bl	8002142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e0:	4605      	mov	r5, r0
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d1ed      	bne.n	80024c2 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	9003      	str	r0, [sp, #12]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	9203      	str	r2, [sp, #12]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	9303      	str	r3, [sp, #12]
 80024f2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80024f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80024f6:	b9f3      	cbnz	r3, 8002536 <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	6821      	ldr	r1, [r4, #0]
 80024fa:	680a      	ldr	r2, [r1, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002500:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002502:	2220      	movs	r2, #32
 8002504:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002508:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002510:	e788      	b.n	8002424 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002512:	11eb      	asrs	r3, r5, #7
 8002514:	f003 0306 	and.w	r3, r3, #6
 8002518:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800251c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800251e:	4923      	ldr	r1, [pc, #140]	; (80025ac <HAL_I2C_Master_Transmit+0x1a4>)
 8002520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002522:	4633      	mov	r3, r6
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff fe0c 	bl	8002142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800252a:	2800      	cmp	r0, #0
 800252c:	d1c9      	bne.n	80024c2 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	b2ed      	uxtb	r5, r5
 8002532:	611d      	str	r5, [r3, #16]
 8002534:	e7ce      	b.n	80024d4 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002536:	4632      	mov	r2, r6
 8002538:	990a      	ldr	r1, [sp, #40]	; 0x28
 800253a:	4620      	mov	r0, r4
 800253c:	f7ff fe92 	bl	8002264 <I2C_WaitOnTXEFlagUntilTimeout>
 8002540:	b140      	cbz	r0, 8002554 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002544:	2b04      	cmp	r3, #4
 8002546:	d1bc      	bne.n	80024c2 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	6822      	ldr	r2, [r4, #0]
 800254a:	6813      	ldr	r3, [r2, #0]
 800254c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e7b6      	b.n	80024c2 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800255e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8002560:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002562:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002564:	3a01      	subs	r2, #1
 8002566:	b292      	uxth	r2, r2
 8002568:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800256a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800256c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800256e:	1e51      	subs	r1, r2, #1
 8002570:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002572:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002574:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002576:	d50a      	bpl.n	800258e <HAL_I2C_Master_Transmit+0x186>
 8002578:	b149      	cbz	r1, 800258e <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257a:	7859      	ldrb	r1, [r3, #1]
 800257c:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 800257e:	3302      	adds	r3, #2
 8002580:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002582:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002584:	3b01      	subs	r3, #1
 8002586:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002588:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800258a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800258c:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258e:	4632      	mov	r2, r6
 8002590:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002592:	4620      	mov	r0, r4
 8002594:	f7ff fe0f 	bl	80021b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002598:	2800      	cmp	r0, #0
 800259a:	d0ab      	beq.n	80024f4 <HAL_I2C_Master_Transmit+0xec>
 800259c:	e7d1      	b.n	8002542 <HAL_I2C_Master_Transmit+0x13a>
 800259e:	bf00      	nop
 80025a0:	00100002 	.word	0x00100002
 80025a4:	ffff0000 	.word	0xffff0000
 80025a8:	00010002 	.word	0x00010002
 80025ac:	00010008 	.word	0x00010008

080025b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80025b2:	4604      	mov	r4, r0
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d041      	beq.n	800263c <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025c0:	b92b      	cbnz	r3, 80025ce <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80025c2:	4b42      	ldr	r3, [pc, #264]	; (80026cc <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 80025c4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80025c8:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80025ca:	f7fe ff0d 	bl	80013e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025ce:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025d0:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80025d2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025d6:	69d3      	ldr	r3, [r2, #28]
 80025d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025dc:	f023 030f 	bic.w	r3, r3, #15
 80025e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025e2:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80025e4:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025e6:	428b      	cmp	r3, r1
 80025e8:	d031      	beq.n	800264e <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025ea:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025ec:	2b00      	cmp	r3, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025ee:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 80025f0:	bf14      	ite	ne
 80025f2:	2520      	movne	r5, #32
 80025f4:	2510      	moveq	r5, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80025f6:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025f8:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80025fa:	bf98      	it	ls
 80025fc:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80025fe:	f000 fdc1 	bl	8003184 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002602:	6923      	ldr	r3, [r4, #16]
 8002604:	6961      	ldr	r1, [r4, #20]
 8002606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800260a:	d11b      	bne.n	8002644 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800260c:	68e3      	ldr	r3, [r4, #12]
 800260e:	220a      	movs	r2, #10
 8002610:	b1b3      	cbz	r3, 8002640 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002612:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002614:	fbb0 f3f3 	udiv	r3, r0, r3
 8002618:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800261a:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800261c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002620:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002622:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002626:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800262a:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800262c:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800262e:	1e99      	subs	r1, r3, #2
 8002630:	29fd      	cmp	r1, #253	; 0xfd
 8002632:	d90e      	bls.n	8002652 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002634:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800263c:	2001      	movs	r0, #1
 800263e:	e044      	b.n	80026ca <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002640:	00eb      	lsls	r3, r5, #3
 8002642:	e7e7      	b.n	8002614 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002644:	230a      	movs	r3, #10
 8002646:	fbb0 f0f5 	udiv	r0, r0, r5
 800264a:	4343      	muls	r3, r0
 800264c:	e7e5      	b.n	800261a <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 800264e:	2200      	movs	r2, #0
 8002650:	e7ed      	b.n	800262e <HAL_I2S_Init+0x7e>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002652:	4313      	orrs	r3, r2
 8002654:	6922      	ldr	r2, [r4, #16]
 8002656:	6821      	ldr	r1, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002658:	68e5      	ldr	r5, [r4, #12]
 800265a:	69a0      	ldr	r0, [r4, #24]
 800265c:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80026dc <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002664:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8002668:	ea46 0203 	orr.w	r2, r6, r3
 800266c:	69cf      	ldr	r7, [r1, #28]
 800266e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002672:	432a      	orrs	r2, r5
 8002674:	4302      	orrs	r2, r0
 8002676:	ea07 070c 	and.w	r7, r7, ip
 800267a:	433a      	orrs	r2, r7
 800267c:	61ca      	str	r2, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800267e:	6a22      	ldr	r2, [r4, #32]
 8002680:	2a01      	cmp	r2, #1
 8002682:	d11d      	bne.n	80026c0 <HAL_I2S_Init+0x110>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <HAL_I2S_Init+0x120>)
 8002686:	6362      	str	r2, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002688:	4f12      	ldr	r7, [pc, #72]	; (80026d4 <HAL_I2S_Init+0x124>)
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <HAL_I2S_Init+0x128>)
 800268c:	42b9      	cmp	r1, r7
 800268e:	bf18      	it	ne
 8002690:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002694:	432b      	orrs	r3, r5
 8002696:	69d1      	ldr	r1, [r2, #28]
 8002698:	ea01 010c 	and.w	r1, r1, ip
 800269c:	61d1      	str	r1, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800269e:	2102      	movs	r1, #2
 80026a0:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026a2:	69d7      	ldr	r7, [r2, #28]
 80026a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026a8:	4303      	orrs	r3, r0

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026aa:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 80026ae:	ea43 0307 	orr.w	r3, r3, r7
 80026b2:	bf14      	ite	ne
 80026b4:	2100      	movne	r1, #0
 80026b6:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80026ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026bc:	430b      	orrs	r3, r1
 80026be:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026c0:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80026c2:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026c4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 80026ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026cc:	080027cd 	.word	0x080027cd
 80026d0:	080028f1 	.word	0x080028f1
 80026d4:	40003800 	.word	0x40003800
 80026d8:	40003400 	.word	0x40003400
 80026dc:	fffff040 	.word	0xfffff040

080026e0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80026e0:	b538      	push	{r3, r4, r5, lr}
 80026e2:	4604      	mov	r4, r0
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80026e4:	2900      	cmp	r1, #0
 80026e6:	d04e      	beq.n	8002786 <HAL_I2S_Transmit_DMA+0xa6>
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d04c      	beq.n	8002786 <HAL_I2S_Transmit_DMA+0xa6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80026ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d00a      	beq.n	800270a <HAL_I2S_Transmit_DMA+0x2a>
 80026f4:	2301      	movs	r3, #1
 80026f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80026fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80026fe:	2b01      	cmp	r3, #1
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_I2S_Transmit_DMA+0x2e>
  {
    __HAL_UNLOCK(hi2s);
 8002706:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 800270a:	2002      	movs	r0, #2
 800270c:	e027      	b.n	800275e <HAL_I2S_Transmit_DMA+0x7e>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800270e:	2003      	movs	r0, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002710:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002712:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002716:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002718:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 800271a:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800271c:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002720:	4283      	cmp	r3, r0
 8002722:	d001      	beq.n	8002728 <HAL_I2S_Transmit_DMA+0x48>
 8002724:	2b05      	cmp	r3, #5
 8002726:	d11b      	bne.n	8002760 <HAL_I2S_Transmit_DMA+0x80>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002728:	0053      	lsls	r3, r2, #1
 800272a:	b29b      	uxth	r3, r3
 800272c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800272e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->TxXferSize = Size;
    hi2s->TxXferCount = Size;
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002730:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_I2S_Transmit_DMA+0xac>)
 8002734:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_I2S_Transmit_DMA+0xb0>)
 8002738:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_I2S_Transmit_DMA+0xb4>)
 800273c:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800273e:	f105 020c 	add.w	r2, r5, #12
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8002742:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002744:	f7ff fb06 	bl	8001d54 <HAL_DMA_Start_IT>
 8002748:	b168      	cbz	r0, 8002766 <HAL_I2S_Transmit_DMA+0x86>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800274a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800274c:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002754:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
  }

  __HAL_UNLOCK(hi2s);
 8002758:	2300      	movs	r3, #0
 800275a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 800275e:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = Size;
 8002760:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002762:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002764:	e7e4      	b.n	8002730 <HAL_I2S_Transmit_DMA+0x50>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 800276c:	bf5e      	ittt	pl
 800276e:	69da      	ldrpl	r2, [r3, #28]
 8002770:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002774:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800277a:	bf5e      	ittt	pl
 800277c:	685a      	ldrpl	r2, [r3, #4]
 800277e:	f042 0202 	orrpl.w	r2, r2, #2
 8002782:	605a      	strpl	r2, [r3, #4]
 8002784:	e7e8      	b.n	8002758 <HAL_I2S_Transmit_DMA+0x78>
    return  HAL_ERROR;
 8002786:	2001      	movs	r0, #1
 8002788:	e7e9      	b.n	800275e <HAL_I2S_Transmit_DMA+0x7e>
 800278a:	bf00      	nop
 800278c:	0800279b 	.word	0x0800279b
 8002790:	080027a7 	.word	0x080027a7
 8002794:	080028c7 	.word	0x080028c7

08002798 <HAL_I2S_TxHalfCpltCallback>:
 8002798:	4770      	bx	lr

0800279a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800279a:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800279c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800279e:	f7ff fffb 	bl	8002798 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027a2:	bd08      	pop	{r3, pc}

080027a4 <HAL_I2S_TxCpltCallback>:
 80027a4:	4770      	bx	lr

080027a6 <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 80027a6:	69c1      	ldr	r1, [r0, #28]
{
 80027a8:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 80027ac:	b941      	cbnz	r1, 80027c0 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	6842      	ldr	r2, [r0, #4]
 80027b2:	f022 0202 	bic.w	r2, r2, #2
 80027b6:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80027b8:	2201      	movs	r2, #1
    hi2s->TxXferCount = 0U;
 80027ba:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ffef 	bl	80027a4 <HAL_I2S_TxCpltCallback>
}
 80027c6:	bd08      	pop	{r3, pc}

080027c8 <HAL_I2S_RxCpltCallback>:
 80027c8:	4770      	bx	lr

080027ca <HAL_I2S_ErrorCallback>:
 80027ca:	4770      	bx	lr

080027cc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80027ce:	6803      	ldr	r3, [r0, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80027d4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80027d8:	2a04      	cmp	r2, #4
{
 80027da:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80027dc:	d136      	bne.n	800284c <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80027de:	9a01      	ldr	r2, [sp, #4]
 80027e0:	07d1      	lsls	r1, r2, #31
 80027e2:	d517      	bpl.n	8002814 <I2S_IRQHandler+0x48>
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	0652      	lsls	r2, r2, #25
 80027e8:	d514      	bpl.n	8002814 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80027ec:	68d9      	ldr	r1, [r3, #12]
 80027ee:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80027f2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80027f4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80027f6:	3a01      	subs	r2, #1
 80027f8:	b292      	uxth	r2, r2
 80027fa:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80027fc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80027fe:	b292      	uxth	r2, r2
 8002800:	b942      	cbnz	r2, 8002814 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002808:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800280a:	2301      	movs	r3, #1
 800280c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002810:	f7ff ffda 	bl	80027c8 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	0659      	lsls	r1, r3, #25
 8002818:	d518      	bpl.n	800284c <I2S_IRQHandler+0x80>
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	0692      	lsls	r2, r2, #26
 8002820:	d514      	bpl.n	800284c <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002828:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800282a:	2200      	movs	r2, #0
 800282c:	9202      	str	r2, [sp, #8]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	9202      	str	r2, [sp, #8]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002838:	2301      	movs	r3, #1
 800283a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800283e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002846:	4620      	mov	r0, r4
 8002848:	f7ff ffbf 	bl	80027ca <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800284c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002850:	2b03      	cmp	r3, #3
 8002852:	d136      	bne.n	80028c2 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002854:	9b01      	ldr	r3, [sp, #4]
 8002856:	079b      	lsls	r3, r3, #30
 8002858:	d519      	bpl.n	800288e <I2S_IRQHandler+0xc2>
 800285a:	6822      	ldr	r2, [r4, #0]
 800285c:	6853      	ldr	r3, [r2, #4]
 800285e:	0618      	lsls	r0, r3, #24
 8002860:	d515      	bpl.n	800288e <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002864:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002868:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 800286a:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800286c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800286e:	3b01      	subs	r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	b94b      	cbnz	r3, 800288e <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800287a:	6853      	ldr	r3, [r2, #4]
 800287c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002880:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002882:	2301      	movs	r3, #1
 8002884:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002888:	4620      	mov	r0, r4
 800288a:	f7ff ff8b 	bl	80027a4 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800288e:	9b01      	ldr	r3, [sp, #4]
 8002890:	0719      	lsls	r1, r3, #28
 8002892:	d516      	bpl.n	80028c2 <I2S_IRQHandler+0xf6>
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	0692      	lsls	r2, r2, #26
 800289a:	d512      	bpl.n	80028c2 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028a2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028a4:	2200      	movs	r2, #0
 80028a6:	9203      	str	r2, [sp, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	9303      	str	r3, [sp, #12]
 80028ac:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028bc:	4620      	mov	r0, r4
 80028be:	f7ff ff84 	bl	80027ca <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028c2:	b004      	add	sp, #16
 80028c4:	bd10      	pop	{r4, pc}

080028c6 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80028c8:	6802      	ldr	r2, [r0, #0]
{
 80028ca:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80028cc:	6853      	ldr	r3, [r2, #4]
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80028d8:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 80028da:	2301      	movs	r3, #1
 80028dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80028e8:	f7ff ff6f 	bl	80027ca <HAL_I2S_ErrorCallback>
}
 80028ec:	bd08      	pop	{r3, pc}

080028ee <HAL_I2SEx_TxRxCpltCallback>:
 80028ee:	4770      	bx	lr

080028f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80028f0:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80028f2:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80028f4:	498e      	ldr	r1, [pc, #568]	; (8002b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80028f6:	6893      	ldr	r3, [r2, #8]
{
 80028f8:	b086      	sub	sp, #24
 80028fa:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80028fc:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80028fe:	4b8d      	ldr	r3, [pc, #564]	; (8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002900:	428a      	cmp	r2, r1
 8002902:	bf18      	it	ne
 8002904:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800290c:	6851      	ldr	r1, [r2, #4]
 800290e:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002914:	6841      	ldr	r1, [r0, #4]
 8002916:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 800291a:	f040 8093 	bne.w	8002a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800291e:	9b00      	ldr	r3, [sp, #0]
 8002920:	0799      	lsls	r1, r3, #30
 8002922:	d51a      	bpl.n	800295a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8002924:	9b02      	ldr	r3, [sp, #8]
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	d517      	bpl.n	800295a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800292a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800292c:	1c99      	adds	r1, r3, #2
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	6241      	str	r1, [r0, #36]	; 0x24
 8002932:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002934:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002936:	3b01      	subs	r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800293c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	b95b      	cbnz	r3, 800295a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002942:	6853      	ldr	r3, [r2, #4]
 8002944:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002948:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 800294a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800294c:	b29b      	uxth	r3, r3
 800294e:	b923      	cbnz	r3, 800295a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002950:	2301      	movs	r3, #1
 8002952:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002956:	f7ff ffca 	bl	80028ee <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800295a:	9b01      	ldr	r3, [sp, #4]
 800295c:	07d8      	lsls	r0, r3, #31
 800295e:	d522      	bpl.n	80029a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8002960:	9b03      	ldr	r3, [sp, #12]
 8002962:	0659      	lsls	r1, r3, #25
 8002964:	d51f      	bpl.n	80029a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002966:	6821      	ldr	r1, [r4, #0]
 8002968:	4a71      	ldr	r2, [pc, #452]	; (8002b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800296a:	4b72      	ldr	r3, [pc, #456]	; (8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800296c:	4291      	cmp	r1, r2
 800296e:	bf18      	it	ne
 8002970:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002974:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002976:	68d9      	ldr	r1, [r3, #12]
 8002978:	1c90      	adds	r0, r2, #2
 800297a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800297c:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 800297e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002980:	3a01      	subs	r2, #1
 8002982:	b292      	uxth	r2, r2
 8002984:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002986:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002988:	b292      	uxth	r2, r2
 800298a:	b962      	cbnz	r2, 80029a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002992:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002994:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	b92b      	cbnz	r3, 80029a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800299a:	2301      	movs	r3, #1
 800299c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7ff ffa4 	bl	80028ee <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029a6:	9b01      	ldr	r3, [sp, #4]
 80029a8:	065a      	lsls	r2, r3, #25
 80029aa:	d522      	bpl.n	80029f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 80029ac:	9b03      	ldr	r3, [sp, #12]
 80029ae:	069b      	lsls	r3, r3, #26
 80029b0:	d51f      	bpl.n	80029f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	495e      	ldr	r1, [pc, #376]	; (8002b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80029b6:	4a5f      	ldr	r2, [pc, #380]	; (8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80029b8:	428b      	cmp	r3, r1
 80029ba:	bf18      	it	ne
 80029bc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80029c0:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029c2:	6851      	ldr	r1, [r2, #4]
 80029c4:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80029c8:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029d0:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029d2:	2200      	movs	r2, #0
 80029d4:	9204      	str	r2, [sp, #16]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	9204      	str	r2, [sp, #16]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	9304      	str	r3, [sp, #16]
 80029de:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80029ee:	f7ff feec 	bl	80027ca <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029f2:	9b00      	ldr	r3, [sp, #0]
 80029f4:	0718      	lsls	r0, r3, #28
 80029f6:	f140 8098 	bpl.w	8002b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 80029fa:	9b02      	ldr	r3, [sp, #8]
 80029fc:	0699      	lsls	r1, r3, #26
 80029fe:	f140 8094 	bpl.w	8002b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a02:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a04:	494a      	ldr	r1, [pc, #296]	; (8002b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a0c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a0e:	4a49      	ldr	r2, [pc, #292]	; (8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002a10:	428b      	cmp	r3, r1
 8002a12:	bf18      	it	ne
 8002a14:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002a18:	6851      	ldr	r1, [r2, #4]
 8002a1a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002a1e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a20:	2200      	movs	r2, #0
 8002a22:	9205      	str	r2, [sp, #20]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	9305      	str	r3, [sp, #20]
 8002a28:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002a32:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002a3a:	b006      	add	sp, #24
 8002a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8002a40:	f7ff bec3 	b.w	80027ca <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a44:	9a01      	ldr	r2, [sp, #4]
 8002a46:	0792      	lsls	r2, r2, #30
 8002a48:	d51a      	bpl.n	8002a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8002a4a:	9a03      	ldr	r2, [sp, #12]
 8002a4c:	0611      	lsls	r1, r2, #24
 8002a4e:	d517      	bpl.n	8002a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a50:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002a52:	1c91      	adds	r1, r2, #2
 8002a54:	8812      	ldrh	r2, [r2, #0]
 8002a56:	6241      	str	r1, [r0, #36]	; 0x24
 8002a58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a5a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002a62:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002a64:	b292      	uxth	r2, r2
 8002a66:	b95a      	cbnz	r2, 8002a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a6e:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8002a70:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	b923      	cbnz	r3, 8002a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a7c:	f7ff ff37 	bl	80028ee <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002a80:	9b00      	ldr	r3, [sp, #0]
 8002a82:	07da      	lsls	r2, r3, #31
 8002a84:	d51c      	bpl.n	8002ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8002a86:	9b02      	ldr	r3, [sp, #8]
 8002a88:	065b      	lsls	r3, r3, #25
 8002a8a:	d519      	bpl.n	8002ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002a8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a8e:	6822      	ldr	r2, [r4, #0]
 8002a90:	1c98      	adds	r0, r3, #2
 8002a92:	68d1      	ldr	r1, [r2, #12]
 8002a94:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002a96:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002a98:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002aa0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b963      	cbnz	r3, 8002ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa6:	6853      	ldr	r3, [r2, #4]
 8002aa8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002aac:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8002aae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b92b      	cbnz	r3, 8002ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff ff17 	bl	80028ee <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ac0:	9b00      	ldr	r3, [sp, #0]
 8002ac2:	0658      	lsls	r0, r3, #25
 8002ac4:	d51b      	bpl.n	8002afe <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 8002ac6:	9b02      	ldr	r3, [sp, #8]
 8002ac8:	0699      	lsls	r1, r3, #26
 8002aca:	d518      	bpl.n	8002afe <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002acc:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ace:	4918      	ldr	r1, [pc, #96]	; (8002b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad0:	6853      	ldr	r3, [r2, #4]
 8002ad2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002ad6:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002ada:	428a      	cmp	r2, r1
 8002adc:	bf18      	it	ne
 8002ade:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002ae2:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aea:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002af2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002afa:	f7ff fe66 	bl	80027ca <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002afe:	9b01      	ldr	r3, [sp, #4]
 8002b00:	071a      	lsls	r2, r3, #28
 8002b02:	d512      	bpl.n	8002b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8002b04:	9b03      	ldr	r3, [sp, #12]
 8002b06:	069b      	lsls	r3, r3, #26
 8002b08:	d50f      	bpl.n	8002b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	4908      	ldr	r1, [pc, #32]	; (8002b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002b10:	428a      	cmp	r2, r1
 8002b12:	bf18      	it	ne
 8002b14:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8002b1e:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b20:	6853      	ldr	r3, [r2, #4]
 8002b22:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002b26:	6053      	str	r3, [r2, #4]
 8002b28:	e77f      	b.n	8002a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8002b2a:	b006      	add	sp, #24
 8002b2c:	bd10      	pop	{r4, pc}
 8002b2e:	bf00      	nop
 8002b30:	40003800 	.word	0x40003800
 8002b34:	40003400 	.word	0x40003400

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	b908      	cbnz	r0, 8002b44 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002b40:	2001      	movs	r0, #1
 8002b42:	e03f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b44:	6803      	ldr	r3, [r0, #0]
 8002b46:	07dd      	lsls	r5, r3, #31
 8002b48:	d410      	bmi.n	8002b6c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	0798      	lsls	r0, r3, #30
 8002b4e:	d45a      	bmi.n	8002c06 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	071a      	lsls	r2, r3, #28
 8002b54:	f100 809c 	bmi.w	8002c90 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	075b      	lsls	r3, r3, #29
 8002b5c:	f100 80ba 	bmi.w	8002cd4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b60:	69a0      	ldr	r0, [r4, #24]
 8002b62:	2800      	cmp	r0, #0
 8002b64:	f040 811b 	bne.w	8002d9e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002b68:	2000      	movs	r0, #0
 8002b6a:	e02b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6c:	4ba7      	ldr	r3, [pc, #668]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	f002 020c 	and.w	r2, r2, #12
 8002b74:	2a04      	cmp	r2, #4
 8002b76:	d007      	beq.n	8002b88 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b7e:	2a08      	cmp	r2, #8
 8002b80:	d10a      	bne.n	8002b98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	0259      	lsls	r1, r3, #9
 8002b86:	d507      	bpl.n	8002b98 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	4ba0      	ldr	r3, [pc, #640]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	039a      	lsls	r2, r3, #14
 8002b8e:	d5dc      	bpl.n	8002b4a <HAL_RCC_OscConfig+0x12>
 8002b90:	6863      	ldr	r3, [r4, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1d9      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
 8002b96:	e7d3      	b.n	8002b40 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b98:	6863      	ldr	r3, [r4, #4]
 8002b9a:	4d9c      	ldr	r5, [pc, #624]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d113      	bne.n	8002bca <HAL_RCC_OscConfig+0x92>
 8002ba2:	682b      	ldr	r3, [r5, #0]
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002baa:	f7fe fda7 	bl	80016fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4d97      	ldr	r5, [pc, #604]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002bb0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	039b      	lsls	r3, r3, #14
 8002bb6:	d4c8      	bmi.n	8002b4a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fda0 	bl	80016fc <HAL_GetTick>
 8002bbc:	1b80      	subs	r0, r0, r6
 8002bbe:	2864      	cmp	r0, #100	; 0x64
 8002bc0:	d9f7      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8002bc2:	2003      	movs	r0, #3
}
 8002bc4:	b002      	add	sp, #8
 8002bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bce:	d104      	bne.n	8002bda <HAL_RCC_OscConfig+0xa2>
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd6:	602b      	str	r3, [r5, #0]
 8002bd8:	e7e3      	b.n	8002ba2 <HAL_RCC_OscConfig+0x6a>
 8002bda:	682a      	ldr	r2, [r5, #0]
 8002bdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002be0:	602a      	str	r2, [r5, #0]
 8002be2:	682a      	ldr	r2, [r5, #0]
 8002be4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002be8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1dd      	bne.n	8002baa <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8002bee:	f7fe fd85 	bl	80016fc <HAL_GetTick>
 8002bf2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	039f      	lsls	r7, r3, #14
 8002bf8:	d5a7      	bpl.n	8002b4a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fd7f 	bl	80016fc <HAL_GetTick>
 8002bfe:	1b80      	subs	r0, r0, r6
 8002c00:	2864      	cmp	r0, #100	; 0x64
 8002c02:	d9f7      	bls.n	8002bf4 <HAL_RCC_OscConfig+0xbc>
 8002c04:	e7dd      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c06:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	f012 0f0c 	tst.w	r2, #12
 8002c0e:	d007      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c16:	2a08      	cmp	r2, #8
 8002c18:	d111      	bne.n	8002c3e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	025e      	lsls	r6, r3, #9
 8002c1e:	d40e      	bmi.n	8002c3e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c20:	4b7a      	ldr	r3, [pc, #488]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	0795      	lsls	r5, r2, #30
 8002c26:	d502      	bpl.n	8002c2e <HAL_RCC_OscConfig+0xf6>
 8002c28:	68e2      	ldr	r2, [r4, #12]
 8002c2a:	2a01      	cmp	r2, #1
 8002c2c:	d188      	bne.n	8002b40 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	6921      	ldr	r1, [r4, #16]
 8002c32:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002c36:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002c3a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3c:	e788      	b.n	8002b50 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c3e:	68e2      	ldr	r2, [r4, #12]
 8002c40:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_OscConfig+0x2d8>)
 8002c42:	b1b2      	cbz	r2, 8002c72 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c48:	f7fe fd58 	bl	80016fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	4d6f      	ldr	r5, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002c4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	682b      	ldr	r3, [r5, #0]
 8002c52:	0798      	lsls	r0, r3, #30
 8002c54:	d507      	bpl.n	8002c66 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	6922      	ldr	r2, [r4, #16]
 8002c5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c5e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002c62:	602b      	str	r3, [r5, #0]
 8002c64:	e774      	b.n	8002b50 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c66:	f7fe fd49 	bl	80016fc <HAL_GetTick>
 8002c6a:	1b80      	subs	r0, r0, r6
 8002c6c:	2802      	cmp	r0, #2
 8002c6e:	d9ef      	bls.n	8002c50 <HAL_RCC_OscConfig+0x118>
 8002c70:	e7a7      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8002c72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c74:	f7fe fd42 	bl	80016fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c78:	4d64      	ldr	r5, [pc, #400]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002c7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	0799      	lsls	r1, r3, #30
 8002c80:	f57f af66 	bpl.w	8002b50 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe fd3a 	bl	80016fc <HAL_GetTick>
 8002c88:	1b80      	subs	r0, r0, r6
 8002c8a:	2802      	cmp	r0, #2
 8002c8c:	d9f6      	bls.n	8002c7c <HAL_RCC_OscConfig+0x144>
 8002c8e:	e798      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c90:	6962      	ldr	r2, [r4, #20]
 8002c92:	4b60      	ldr	r3, [pc, #384]	; (8002e14 <HAL_RCC_OscConfig+0x2dc>)
 8002c94:	b17a      	cbz	r2, 8002cb6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fd2f 	bl	80016fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	4d5b      	ldr	r5, [pc, #364]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002ca0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ca4:	079f      	lsls	r7, r3, #30
 8002ca6:	f53f af57 	bmi.w	8002b58 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe fd27 	bl	80016fc <HAL_GetTick>
 8002cae:	1b80      	subs	r0, r0, r6
 8002cb0:	2802      	cmp	r0, #2
 8002cb2:	d9f6      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x16a>
 8002cb4:	e785      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8002cb6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fd20 	bl	80016fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	4d53      	ldr	r5, [pc, #332]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002cbe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002cc2:	0798      	lsls	r0, r3, #30
 8002cc4:	f57f af48 	bpl.w	8002b58 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fe fd18 	bl	80016fc <HAL_GetTick>
 8002ccc:	1b80      	subs	r0, r0, r6
 8002cce:	2802      	cmp	r0, #2
 8002cd0:	d9f6      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x188>
 8002cd2:	e776      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002cdc:	d128      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	9201      	str	r2, [sp, #4]
 8002ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cf2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4d48      	ldr	r5, [pc, #288]	; (8002e18 <HAL_RCC_OscConfig+0x2e0>)
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	05d9      	lsls	r1, r3, #23
 8002cfa:	d51b      	bpl.n	8002d34 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	68a3      	ldr	r3, [r4, #8]
 8002cfe:	4d43      	ldr	r5, [pc, #268]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d127      	bne.n	8002d54 <HAL_RCC_OscConfig+0x21c>
 8002d04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fcf6 	bl	80016fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	4d3e      	ldr	r5, [pc, #248]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002d12:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d1a:	079b      	lsls	r3, r3, #30
 8002d1c:	d539      	bpl.n	8002d92 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002d1e:	2e00      	cmp	r6, #0
 8002d20:	f43f af1e 	beq.w	8002b60 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d24:	4a39      	ldr	r2, [pc, #228]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002d26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2e:	e717      	b.n	8002b60 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002d30:	2600      	movs	r6, #0
 8002d32:	e7df      	b.n	8002cf4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d34:	682b      	ldr	r3, [r5, #0]
 8002d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fcde 	bl	80016fc <HAL_GetTick>
 8002d40:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	682b      	ldr	r3, [r5, #0]
 8002d44:	05da      	lsls	r2, r3, #23
 8002d46:	d4d9      	bmi.n	8002cfc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d48:	f7fe fcd8 	bl	80016fc <HAL_GetTick>
 8002d4c:	1bc0      	subs	r0, r0, r7
 8002d4e:	2802      	cmp	r0, #2
 8002d50:	d9f7      	bls.n	8002d42 <HAL_RCC_OscConfig+0x20a>
 8002d52:	e736      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d104      	bne.n	8002d62 <HAL_RCC_OscConfig+0x22a>
 8002d58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	672b      	str	r3, [r5, #112]	; 0x70
 8002d60:	e7d0      	b.n	8002d04 <HAL_RCC_OscConfig+0x1cc>
 8002d62:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	672a      	str	r2, [r5, #112]	; 0x70
 8002d6a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002d6c:	f022 0204 	bic.w	r2, r2, #4
 8002d70:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ca      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002d76:	f7fe fcc1 	bl	80016fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d7e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d82:	0798      	lsls	r0, r3, #30
 8002d84:	d5cb      	bpl.n	8002d1e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fcb9 	bl	80016fc <HAL_GetTick>
 8002d8a:	1bc0      	subs	r0, r0, r7
 8002d8c:	4540      	cmp	r0, r8
 8002d8e:	d9f7      	bls.n	8002d80 <HAL_RCC_OscConfig+0x248>
 8002d90:	e717      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fe fcb3 	bl	80016fc <HAL_GetTick>
 8002d96:	1bc0      	subs	r0, r0, r7
 8002d98:	4540      	cmp	r0, r8
 8002d9a:	d9bd      	bls.n	8002d18 <HAL_RCC_OscConfig+0x1e0>
 8002d9c:	e711      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d9e:	4d1b      	ldr	r5, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
 8002da0:	68ab      	ldr	r3, [r5, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d047      	beq.n	8002e3a <HAL_RCC_OscConfig+0x302>
 8002daa:	4e1c      	ldr	r6, [pc, #112]	; (8002e1c <HAL_RCC_OscConfig+0x2e4>)
 8002dac:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002db0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	d135      	bne.n	8002e20 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002db4:	f7fe fca2 	bl	80016fc <HAL_GetTick>
 8002db8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	682b      	ldr	r3, [r5, #0]
 8002dbc:	0199      	lsls	r1, r3, #6
 8002dbe:	d41e      	bmi.n	8002dfe <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dc0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dc8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002dcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002dce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002dd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd4:	4c0d      	ldr	r4, [pc, #52]	; (8002e0c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd6:	0852      	lsrs	r2, r2, #1
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002dde:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002de0:	2301      	movs	r3, #1
 8002de2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002de4:	f7fe fc8a 	bl	80016fc <HAL_GetTick>
 8002de8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	019a      	lsls	r2, r3, #6
 8002dee:	f53f aebb 	bmi.w	8002b68 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fe fc83 	bl	80016fc <HAL_GetTick>
 8002df6:	1b40      	subs	r0, r0, r5
 8002df8:	2802      	cmp	r0, #2
 8002dfa:	d9f6      	bls.n	8002dea <HAL_RCC_OscConfig+0x2b2>
 8002dfc:	e6e1      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fc7d 	bl	80016fc <HAL_GetTick>
 8002e02:	1bc0      	subs	r0, r0, r7
 8002e04:	2802      	cmp	r0, #2
 8002e06:	d9d8      	bls.n	8002dba <HAL_RCC_OscConfig+0x282>
 8002e08:	e6db      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	42470000 	.word	0x42470000
 8002e14:	42470e80 	.word	0x42470e80
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002e20:	f7fe fc6c 	bl	80016fc <HAL_GetTick>
 8002e24:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	682b      	ldr	r3, [r5, #0]
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	f57f ae9d 	bpl.w	8002b68 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe fc65 	bl	80016fc <HAL_GetTick>
 8002e32:	1b00      	subs	r0, r0, r4
 8002e34:	2802      	cmp	r0, #2
 8002e36:	d9f6      	bls.n	8002e26 <HAL_RCC_OscConfig+0x2ee>
 8002e38:	e6c3      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3a:	2801      	cmp	r0, #1
 8002e3c:	f43f aec2 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8002e40:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	69e3      	ldr	r3, [r4, #28]
 8002e44:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f47f ae79 	bne.w	8002b40 <HAL_RCC_OscConfig+0x8>
 8002e4e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e50:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f47f ae73 	bne.w	8002b40 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e60:	4003      	ands	r3, r0
 8002e62:	4293      	cmp	r3, r2
 8002e64:	f47f ae6c 	bne.w	8002b40 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e6a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	f47f ae66 	bne.w	8002b40 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e76:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8002e7a:	1ac0      	subs	r0, r0, r3
 8002e7c:	bf18      	it	ne
 8002e7e:	2001      	movne	r0, #1
 8002e80:	e6a0      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8c>
 8002e82:	bf00      	nop

08002e84 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e84:	4913      	ldr	r1, [pc, #76]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002e86:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e88:	688b      	ldr	r3, [r1, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x16>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e96:	4810      	ldr	r0, [pc, #64]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8002e9a:	4810      	ldr	r0, [pc, #64]	; (8002edc <HAL_RCC_GetSysClockFreq+0x58>)
}
 8002e9c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e9e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	bf14      	ite	ne
 8002eaa:	480c      	ldrne	r0, [pc, #48]	; (8002edc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eac:	480a      	ldreq	r0, [pc, #40]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002eb2:	bf18      	it	ne
 8002eb4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	fba1 0100 	umull	r0, r1, r1, r0
 8002ebe:	f7fd fbc7 	bl	8000650 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec2:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x50>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002eca:	3301      	adds	r3, #1
 8002ecc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002ece:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ed2:	e7e3      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x18>
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	017d7840 	.word	0x017d7840

08002ee0 <HAL_RCC_ClockConfig>:
{
 8002ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	b910      	cbnz	r0, 8002ef0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
}
 8002eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCC_ClockConfig+0x120>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f002 020f 	and.w	r2, r2, #15
 8002ef8:	428a      	cmp	r2, r1
 8002efa:	d328      	bcc.n	8002f4e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	6821      	ldr	r1, [r4, #0]
 8002efe:	078f      	lsls	r7, r1, #30
 8002f00:	d42d      	bmi.n	8002f5e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	07c8      	lsls	r0, r1, #31
 8002f04:	d440      	bmi.n	8002f88 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <HAL_RCC_ClockConfig+0x120>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	f002 020f 	and.w	r2, r2, #15
 8002f0e:	42aa      	cmp	r2, r5
 8002f10:	d865      	bhi.n	8002fde <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f12:	6822      	ldr	r2, [r4, #0]
 8002f14:	0751      	lsls	r1, r2, #29
 8002f16:	d46b      	bmi.n	8002ff0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	0713      	lsls	r3, r2, #28
 8002f1a:	d507      	bpl.n	8002f2c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1c:	4a39      	ldr	r2, [pc, #228]	; (8003004 <HAL_RCC_ClockConfig+0x124>)
 8002f1e:	6921      	ldr	r1, [r4, #16]
 8002f20:	6893      	ldr	r3, [r2, #8]
 8002f22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f2a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f2c:	f7ff ffaa 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002f30:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCC_ClockConfig+0x124>)
 8002f32:	4a35      	ldr	r2, [pc, #212]	; (8003008 <HAL_RCC_ClockConfig+0x128>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	40d8      	lsrs	r0, r3
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCC_ClockConfig+0x12c>)
 8002f40:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002f42:	4b33      	ldr	r3, [pc, #204]	; (8003010 <HAL_RCC_ClockConfig+0x130>)
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	f7fe fb8f 	bl	8001668 <HAL_InitTick>
  return HAL_OK;
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e7ce      	b.n	8002eec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	b2ca      	uxtb	r2, r1
 8002f50:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	d1c6      	bne.n	8002eea <HAL_RCC_ClockConfig+0xa>
 8002f5c:	e7ce      	b.n	8002efc <HAL_RCC_ClockConfig+0x1c>
 8002f5e:	4b29      	ldr	r3, [pc, #164]	; (8003004 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f64:	bf1e      	ittt	ne
 8002f66:	689a      	ldrne	r2, [r3, #8]
 8002f68:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002f6c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f70:	bf42      	ittt	mi
 8002f72:	689a      	ldrmi	r2, [r3, #8]
 8002f74:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002f78:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68a0      	ldr	r0, [r4, #8]
 8002f7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f82:	4302      	orrs	r2, r0
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	e7bc      	b.n	8002f02 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f88:	6862      	ldr	r2, [r4, #4]
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_RCC_ClockConfig+0x124>)
 8002f8c:	2a01      	cmp	r2, #1
 8002f8e:	d11c      	bne.n	8002fca <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	d0a8      	beq.n	8002eea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f98:	4e1a      	ldr	r6, [pc, #104]	; (8003004 <HAL_RCC_ClockConfig+0x124>)
 8002f9a:	68b3      	ldr	r3, [r6, #8]
 8002f9c:	f023 0303 	bic.w	r3, r3, #3
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fbaa 	bl	80016fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002fac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	68b3      	ldr	r3, [r6, #8]
 8002fb0:	6862      	ldr	r2, [r4, #4]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fba:	d0a4      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe fb9e 	bl	80016fc <HAL_GetTick>
 8002fc0:	1bc0      	subs	r0, r0, r7
 8002fc2:	4540      	cmp	r0, r8
 8002fc4:	d9f3      	bls.n	8002fae <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002fc6:	2003      	movs	r0, #3
 8002fc8:	e790      	b.n	8002eec <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	1e91      	subs	r1, r2, #2
 8002fcc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd0:	d802      	bhi.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fd6:	e7de      	b.n	8002f96 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	f013 0f02 	tst.w	r3, #2
 8002fdc:	e7db      	b.n	8002f96 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	b2ea      	uxtb	r2, r5
 8002fe0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	42ab      	cmp	r3, r5
 8002fea:	f47f af7e 	bne.w	8002eea <HAL_RCC_ClockConfig+0xa>
 8002fee:	e790      	b.n	8002f12 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCC_ClockConfig+0x124>)
 8002ff2:	68e0      	ldr	r0, [r4, #12]
 8002ff4:	688b      	ldr	r3, [r1, #8]
 8002ff6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002ffa:	4303      	orrs	r3, r0
 8002ffc:	608b      	str	r3, [r1, #8]
 8002ffe:	e78b      	b.n	8002f18 <HAL_RCC_ClockConfig+0x38>
 8003000:	40023c00 	.word	0x40023c00
 8003004:	40023800 	.word	0x40023800
 8003008:	080035ae 	.word	0x080035ae
 800300c:	20000000 	.word	0x20000000
 8003010:	20000008 	.word	0x20000008

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	4a03      	ldr	r2, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003022:	6810      	ldr	r0, [r2, #0]
}
 8003024:	40d8      	lsrs	r0, r3
 8003026:	4770      	bx	lr
 8003028:	40023800 	.word	0x40023800
 800302c:	080035be 	.word	0x080035be
 8003030:	20000000 	.word	0x20000000

08003034 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003036:	4a05      	ldr	r2, [pc, #20]	; (800304c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	4a03      	ldr	r2, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003042:	6810      	ldr	r0, [r2, #0]
}
 8003044:	40d8      	lsrs	r0, r3
 8003046:	4770      	bx	lr
 8003048:	40023800 	.word	0x40023800
 800304c:	080035be 	.word	0x080035be
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003054:	6803      	ldr	r3, [r0, #0]
 8003056:	f013 0f05 	tst.w	r3, #5
{
 800305a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800305c:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003060:	6828      	ldr	r0, [r5, #0]
 8003062:	f010 0002 	ands.w	r0, r0, #2
 8003066:	d128      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8003068:	b003      	add	sp, #12
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800306c:	4c41      	ldr	r4, [pc, #260]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800306e:	4e42      	ldr	r6, [pc, #264]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003074:	f7fe fb42 	bl	80016fc <HAL_GetTick>
 8003078:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800307a:	6833      	ldr	r3, [r6, #0]
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	d415      	bmi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003080:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8003084:	071b      	lsls	r3, r3, #28
 8003086:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800308a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800308e:	2301      	movs	r3, #1
 8003090:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003092:	f7fe fb33 	bl	80016fc <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003096:	4c38      	ldr	r4, [pc, #224]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8003098:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	0118      	lsls	r0, r3, #4
 800309e:	d4df      	bmi.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030a0:	f7fe fb2c 	bl	80016fc <HAL_GetTick>
 80030a4:	1b80      	subs	r0, r0, r6
 80030a6:	2802      	cmp	r0, #2
 80030a8:	d9f7      	bls.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x46>
 80030aa:	e004      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ac:	f7fe fb26 	bl	80016fc <HAL_GetTick>
 80030b0:	1bc0      	subs	r0, r0, r7
 80030b2:	2802      	cmp	r0, #2
 80030b4:	d9e1      	bls.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 80030b6:	2003      	movs	r0, #3
 80030b8:	e7d6      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 80030c0:	4c2e      	ldr	r4, [pc, #184]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030da:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80030dc:	f7fe fb0e 	bl	80016fc <HAL_GetTick>
 80030e0:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	05d9      	lsls	r1, r3, #23
 80030e6:	d51b      	bpl.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030e8:	4c23      	ldr	r4, [pc, #140]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80030ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80030f0:	d11c      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f2:	68eb      	ldr	r3, [r5, #12]
 80030f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80030f8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80030fc:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80030fe:	d134      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003100:	6891      	ldr	r1, [r2, #8]
 8003102:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003106:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800310a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800310e:	4301      	orrs	r1, r0
 8003110:	6091      	str	r1, [r2, #8]
 8003112:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003118:	430b      	orrs	r3, r1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 800311c:	2000      	movs	r0, #0
 800311e:	e7a3      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7fe faec 	bl	80016fc <HAL_GetTick>
 8003124:	1b80      	subs	r0, r0, r6
 8003126:	2802      	cmp	r0, #2
 8003128:	d9db      	bls.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800312a:	e7c4      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800312c:	68ea      	ldr	r2, [r5, #12]
 800312e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003132:	4293      	cmp	r3, r2
 8003134:	d0dd      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003136:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800313a:	2101      	movs	r1, #1
 800313c:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800313e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003142:	2100      	movs	r1, #0
 8003144:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8003146:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003148:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800314a:	07da      	lsls	r2, r3, #31
 800314c:	d5d1      	bpl.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 800314e:	f7fe fad5 	bl	80016fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003156:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800315a:	079b      	lsls	r3, r3, #30
 800315c:	d4c9      	bmi.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fe facd 	bl	80016fc <HAL_GetTick>
 8003162:	1b80      	subs	r0, r0, r6
 8003164:	42b8      	cmp	r0, r7
 8003166:	d9f7      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003168:	e7a5      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316a:	6891      	ldr	r1, [r2, #8]
 800316c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003170:	e7ce      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8003172:	bf00      	nop
 8003174:	42470068 	.word	0x42470068
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470e40 	.word	0x42470e40

08003184 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003184:	2801      	cmp	r0, #1
 8003186:	d120      	bne.n	80031ca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800318a:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 800318c:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8003190:	d004      	beq.n	800319c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8003192:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003194:	480f      	ldr	r0, [pc, #60]	; (80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8003196:	bf18      	it	ne
 8003198:	2000      	movne	r0, #0
 800319a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800319c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800319e:	490c      	ldr	r1, [pc, #48]	; (80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031a0:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031a2:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80031a4:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031a8:	bf4c      	ite	mi
 80031aa:	4b0b      	ldrmi	r3, [pc, #44]	; (80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031ac:	4b0b      	ldrpl	r3, [pc, #44]	; (80031dc <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031ae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031b2:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80031b6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80031ba:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80031be:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80031c0:	f3c0 7002 	ubfx	r0, r0, #28, #3
 80031c4:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 80031c8:	4770      	bx	lr
          frequency = 0U;
 80031ca:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	00bb8000 	.word	0x00bb8000
 80031d8:	017d7840 	.word	0x017d7840
 80031dc:	00f42400 	.word	0x00f42400

080031e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80031e0:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80031e2:	4604      	mov	r4, r0
 80031e4:	b190      	cbz	r0, 800320c <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80031e6:	7943      	ldrb	r3, [r0, #5]
 80031e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031ec:	b913      	cbnz	r3, 80031f4 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80031ee:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80031f0:	f7fe f97e 	bl	80014f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80031f4:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80031f6:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80031f8:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003202:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8003204:	2301      	movs	r3, #1
 8003206:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003208:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 800320a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800320c:	2001      	movs	r0, #1
 800320e:	e7fc      	b.n	800320a <HAL_RNG_Init+0x2a>

08003210 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003210:	6803      	ldr	r3, [r0, #0]
 8003212:	68c1      	ldr	r1, [r0, #12]
 8003214:	691a      	ldr	r2, [r3, #16]
{
 8003216:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003218:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 800321c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321e:	430a      	orrs	r2, r1
 8003220:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003222:	6925      	ldr	r5, [r4, #16]
 8003224:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003226:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003228:	69c0      	ldr	r0, [r0, #28]
 800322a:	432a      	orrs	r2, r5
 800322c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800322e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003232:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8003234:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003238:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800323a:	430a      	orrs	r2, r1
 800323c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	69a1      	ldr	r1, [r4, #24]
 8003242:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003246:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003248:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800324c:	615a      	str	r2, [r3, #20]
 800324e:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003250:	d129      	bne.n	80032a6 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <UART_SetConfig+0x4e>
 8003256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800325a:	4293      	cmp	r3, r2
 800325c:	d120      	bne.n	80032a0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800325e:	f7ff fee9 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003262:	6862      	ldr	r2, [r4, #4]
 8003264:	2600      	movs	r6, #0
 8003266:	1892      	adds	r2, r2, r2
 8003268:	f04f 0119 	mov.w	r1, #25
 800326c:	eb46 0306 	adc.w	r3, r6, r6
 8003270:	fba0 0101 	umull	r0, r1, r0, r1
 8003274:	f7fd f9ec 	bl	8000650 <__aeabi_uldivmod>
 8003278:	2164      	movs	r1, #100	; 0x64
 800327a:	fbb0 f5f1 	udiv	r5, r0, r1
 800327e:	fb01 0315 	mls	r3, r1, r5, r0
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	3332      	adds	r3, #50	; 0x32
 8003286:	fbb3 f3f1 	udiv	r3, r3, r1
 800328a:	f003 0207 	and.w	r2, r3, #7
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	6821      	ldr	r1, [r4, #0]
 8003292:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8003296:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800329a:	4413      	add	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800329e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7ff feb8 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 80032a4:	e7dd      	b.n	8003262 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d002      	beq.n	80032b0 <UART_SetConfig+0xa0>
 80032aa:	4a10      	ldr	r2, [pc, #64]	; (80032ec <UART_SetConfig+0xdc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d117      	bne.n	80032e0 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7ff fec0 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	2119      	movs	r1, #25
 80032b8:	009a      	lsls	r2, r3, #2
 80032ba:	fba0 0101 	umull	r0, r1, r0, r1
 80032be:	0f9b      	lsrs	r3, r3, #30
 80032c0:	f7fd f9c6 	bl	8000650 <__aeabi_uldivmod>
 80032c4:	2264      	movs	r2, #100	; 0x64
 80032c6:	fbb0 f1f2 	udiv	r1, r0, r2
 80032ca:	fb02 0311 	mls	r3, r2, r1, r0
 80032ce:	6824      	ldr	r4, [r4, #0]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80032dc:	60a3      	str	r3, [r4, #8]
}
 80032de:	e7de      	b.n	800329e <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7ff fe98 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 80032e4:	e7e6      	b.n	80032b4 <UART_SetConfig+0xa4>
 80032e6:	bf00      	nop
 80032e8:	40011000 	.word	0x40011000
 80032ec:	40011400 	.word	0x40011400

080032f0 <HAL_UART_Init>:
{
 80032f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80032f2:	4604      	mov	r4, r0
 80032f4:	b340      	cbz	r0, 8003348 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80032f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80032fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032fe:	b91b      	cbnz	r3, 8003308 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003300:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003304:	f7fe f90c 	bl	8001520 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003308:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800330a:	2324      	movs	r3, #36	; 0x24
 800330c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003310:	68d3      	ldr	r3, [r2, #12]
 8003312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003316:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003318:	4620      	mov	r0, r4
 800331a:	f7ff ff79 	bl	8003210 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003326:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800332e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003336:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800333a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800333e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003342:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003346:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003348:	2001      	movs	r0, #1
 800334a:	e7fc      	b.n	8003346 <HAL_UART_Init+0x56>

0800334c <__errno>:
 800334c:	4b01      	ldr	r3, [pc, #4]	; (8003354 <__errno+0x8>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000000c 	.word	0x2000000c

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4e0d      	ldr	r6, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1ba4      	subs	r4, r4, r6
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2500      	movs	r5, #0
 8003364:	42a5      	cmp	r5, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4e0b      	ldr	r6, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f000 f908 	bl	8003580 <_init>
 8003370:	1ba4      	subs	r4, r4, r6
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2500      	movs	r5, #0
 8003376:	42a5      	cmp	r5, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003380:	4798      	blx	r3
 8003382:	3501      	adds	r5, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800338a:	4798      	blx	r3
 800338c:	3501      	adds	r5, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	080035e0 	.word	0x080035e0
 8003394:	080035e0 	.word	0x080035e0
 8003398:	080035e0 	.word	0x080035e0
 800339c:	080035e4 	.word	0x080035e4

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <rand>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <rand+0x50>)
 80033b4:	681c      	ldr	r4, [r3, #0]
 80033b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033b8:	b97b      	cbnz	r3, 80033da <rand+0x2a>
 80033ba:	2018      	movs	r0, #24
 80033bc:	f000 f82c 	bl	8003418 <malloc>
 80033c0:	4a10      	ldr	r2, [pc, #64]	; (8003404 <rand+0x54>)
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <rand+0x58>)
 80033c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80033c6:	e9c0 2300 	strd	r2, r3, [r0]
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <rand+0x5c>)
 80033cc:	6083      	str	r3, [r0, #8]
 80033ce:	230b      	movs	r3, #11
 80033d0:	8183      	strh	r3, [r0, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	2300      	movs	r3, #0
 80033d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80033da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80033dc:	480c      	ldr	r0, [pc, #48]	; (8003410 <rand+0x60>)
 80033de:	690a      	ldr	r2, [r1, #16]
 80033e0:	694b      	ldr	r3, [r1, #20]
 80033e2:	4c0c      	ldr	r4, [pc, #48]	; (8003414 <rand+0x64>)
 80033e4:	4350      	muls	r0, r2
 80033e6:	fb04 0003 	mla	r0, r4, r3, r0
 80033ea:	fba2 2304 	umull	r2, r3, r2, r4
 80033ee:	4403      	add	r3, r0
 80033f0:	1c54      	adds	r4, r2, #1
 80033f2:	f143 0500 	adc.w	r5, r3, #0
 80033f6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80033fa:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	2000000c 	.word	0x2000000c
 8003404:	abcd330e 	.word	0xabcd330e
 8003408:	e66d1234 	.word	0xe66d1234
 800340c:	0005deec 	.word	0x0005deec
 8003410:	5851f42d 	.word	0x5851f42d
 8003414:	4c957f2d 	.word	0x4c957f2d

08003418 <malloc>:
 8003418:	4b02      	ldr	r3, [pc, #8]	; (8003424 <malloc+0xc>)
 800341a:	4601      	mov	r1, r0
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	f000 b803 	b.w	8003428 <_malloc_r>
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c

08003428 <_malloc_r>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	1ccd      	adds	r5, r1, #3
 800342c:	f025 0503 	bic.w	r5, r5, #3
 8003430:	3508      	adds	r5, #8
 8003432:	2d0c      	cmp	r5, #12
 8003434:	bf38      	it	cc
 8003436:	250c      	movcc	r5, #12
 8003438:	2d00      	cmp	r5, #0
 800343a:	4606      	mov	r6, r0
 800343c:	db01      	blt.n	8003442 <_malloc_r+0x1a>
 800343e:	42a9      	cmp	r1, r5
 8003440:	d903      	bls.n	800344a <_malloc_r+0x22>
 8003442:	230c      	movs	r3, #12
 8003444:	6033      	str	r3, [r6, #0]
 8003446:	2000      	movs	r0, #0
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	f000 f857 	bl	80034fc <__malloc_lock>
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <_malloc_r+0xac>)
 8003450:	6814      	ldr	r4, [r2, #0]
 8003452:	4621      	mov	r1, r4
 8003454:	b991      	cbnz	r1, 800347c <_malloc_r+0x54>
 8003456:	4c20      	ldr	r4, [pc, #128]	; (80034d8 <_malloc_r+0xb0>)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	b91b      	cbnz	r3, 8003464 <_malloc_r+0x3c>
 800345c:	4630      	mov	r0, r6
 800345e:	f000 f83d 	bl	80034dc <_sbrk_r>
 8003462:	6020      	str	r0, [r4, #0]
 8003464:	4629      	mov	r1, r5
 8003466:	4630      	mov	r0, r6
 8003468:	f000 f838 	bl	80034dc <_sbrk_r>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d124      	bne.n	80034ba <_malloc_r+0x92>
 8003470:	230c      	movs	r3, #12
 8003472:	6033      	str	r3, [r6, #0]
 8003474:	4630      	mov	r0, r6
 8003476:	f000 f842 	bl	80034fe <__malloc_unlock>
 800347a:	e7e4      	b.n	8003446 <_malloc_r+0x1e>
 800347c:	680b      	ldr	r3, [r1, #0]
 800347e:	1b5b      	subs	r3, r3, r5
 8003480:	d418      	bmi.n	80034b4 <_malloc_r+0x8c>
 8003482:	2b0b      	cmp	r3, #11
 8003484:	d90f      	bls.n	80034a6 <_malloc_r+0x7e>
 8003486:	600b      	str	r3, [r1, #0]
 8003488:	50cd      	str	r5, [r1, r3]
 800348a:	18cc      	adds	r4, r1, r3
 800348c:	4630      	mov	r0, r6
 800348e:	f000 f836 	bl	80034fe <__malloc_unlock>
 8003492:	f104 000b 	add.w	r0, r4, #11
 8003496:	1d23      	adds	r3, r4, #4
 8003498:	f020 0007 	bic.w	r0, r0, #7
 800349c:	1ac3      	subs	r3, r0, r3
 800349e:	d0d3      	beq.n	8003448 <_malloc_r+0x20>
 80034a0:	425a      	negs	r2, r3
 80034a2:	50e2      	str	r2, [r4, r3]
 80034a4:	e7d0      	b.n	8003448 <_malloc_r+0x20>
 80034a6:	428c      	cmp	r4, r1
 80034a8:	684b      	ldr	r3, [r1, #4]
 80034aa:	bf16      	itet	ne
 80034ac:	6063      	strne	r3, [r4, #4]
 80034ae:	6013      	streq	r3, [r2, #0]
 80034b0:	460c      	movne	r4, r1
 80034b2:	e7eb      	b.n	800348c <_malloc_r+0x64>
 80034b4:	460c      	mov	r4, r1
 80034b6:	6849      	ldr	r1, [r1, #4]
 80034b8:	e7cc      	b.n	8003454 <_malloc_r+0x2c>
 80034ba:	1cc4      	adds	r4, r0, #3
 80034bc:	f024 0403 	bic.w	r4, r4, #3
 80034c0:	42a0      	cmp	r0, r4
 80034c2:	d005      	beq.n	80034d0 <_malloc_r+0xa8>
 80034c4:	1a21      	subs	r1, r4, r0
 80034c6:	4630      	mov	r0, r6
 80034c8:	f000 f808 	bl	80034dc <_sbrk_r>
 80034cc:	3001      	adds	r0, #1
 80034ce:	d0cf      	beq.n	8003470 <_malloc_r+0x48>
 80034d0:	6025      	str	r5, [r4, #0]
 80034d2:	e7db      	b.n	800348c <_malloc_r+0x64>
 80034d4:	200129e8 	.word	0x200129e8
 80034d8:	200129ec 	.word	0x200129ec

080034dc <_sbrk_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	4c06      	ldr	r4, [pc, #24]	; (80034f8 <_sbrk_r+0x1c>)
 80034e0:	2300      	movs	r3, #0
 80034e2:	4605      	mov	r5, r0
 80034e4:	4608      	mov	r0, r1
 80034e6:	6023      	str	r3, [r4, #0]
 80034e8:	f7fe f866 	bl	80015b8 <_sbrk>
 80034ec:	1c43      	adds	r3, r0, #1
 80034ee:	d102      	bne.n	80034f6 <_sbrk_r+0x1a>
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	b103      	cbz	r3, 80034f6 <_sbrk_r+0x1a>
 80034f4:	602b      	str	r3, [r5, #0]
 80034f6:	bd38      	pop	{r3, r4, r5, pc}
 80034f8:	20013b9c 	.word	0x20013b9c

080034fc <__malloc_lock>:
 80034fc:	4770      	bx	lr

080034fe <__malloc_unlock>:
 80034fe:	4770      	bx	lr

08003500 <lrintf>:
 8003500:	ee10 3a10 	vmov	r3, s0
 8003504:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003508:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 800350c:	281e      	cmp	r0, #30
 800350e:	b082      	sub	sp, #8
 8003510:	dc2e      	bgt.n	8003570 <lrintf+0x70>
 8003512:	1c41      	adds	r1, r0, #1
 8003514:	da02      	bge.n	800351c <lrintf+0x1c>
 8003516:	2000      	movs	r0, #0
 8003518:	b002      	add	sp, #8
 800351a:	4770      	bx	lr
 800351c:	2816      	cmp	r0, #22
 800351e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8003522:	dd09      	ble.n	8003538 <lrintf+0x38>
 8003524:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8003528:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800352c:	3a96      	subs	r2, #150	; 0x96
 800352e:	4090      	lsls	r0, r2
 8003530:	2900      	cmp	r1, #0
 8003532:	d0f1      	beq.n	8003518 <lrintf+0x18>
 8003534:	4240      	negs	r0, r0
 8003536:	e7ef      	b.n	8003518 <lrintf+0x18>
 8003538:	4b10      	ldr	r3, [pc, #64]	; (800357c <lrintf+0x7c>)
 800353a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800353e:	ed93 7a00 	vldr	s14, [r3]
 8003542:	ee37 0a00 	vadd.f32	s0, s14, s0
 8003546:	ed8d 0a01 	vstr	s0, [sp, #4]
 800354a:	eddd 7a01 	vldr	s15, [sp, #4]
 800354e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003552:	ee17 3a90 	vmov	r3, s15
 8003556:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800355a:	d0dc      	beq.n	8003516 <lrintf+0x16>
 800355c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8003560:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8003564:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003568:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800356c:	40d8      	lsrs	r0, r3
 800356e:	e7df      	b.n	8003530 <lrintf+0x30>
 8003570:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003574:	ee17 0a90 	vmov	r0, s15
 8003578:	e7ce      	b.n	8003518 <lrintf+0x18>
 800357a:	bf00      	nop
 800357c:	080035d0 	.word	0x080035d0

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
