
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002558  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002700  08002700  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002708  08002708  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  0800271c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800271c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfa5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de3  00000000  00000000  0002cfe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  0002f790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e8e5  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b9c  00000000  00000000  0004ea35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9e61  00000000  00000000  000585d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112432  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bb0  00000000  00000000  001124b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000078ce  00000000  00000000  00114060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080026c8 	.word	0x080026c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080026c8 	.word	0x080026c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2400      	movs	r4, #0
 80004ce:	9405      	str	r4, [sp, #20]
 80004d0:	9406      	str	r4, [sp, #24]
 80004d2:	9407      	str	r4, [sp, #28]
 80004d4:	9408      	str	r4, [sp, #32]
 80004d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d8:	9401      	str	r4, [sp, #4]
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_GPIO_Init+0x88>)
 80004dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
 80004e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80004ea:	9201      	str	r2, [sp, #4]
 80004ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	9402      	str	r4, [sp, #8]
 80004f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f2:	f042 0204 	orr.w	r2, r2, #4
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fa:	f002 0204 	and.w	r2, r2, #4
 80004fe:	9202      	str	r2, [sp, #8]
 8000500:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	9403      	str	r4, [sp, #12]
 8000504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000506:	f042 0201 	orr.w	r2, r2, #1
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
 800050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050e:	f002 0201 	and.w	r2, r2, #1
 8000512:	9203      	str	r2, [sp, #12]
 8000514:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	9404      	str	r4, [sp, #16]
 8000518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051a:	f042 0202 	orr.w	r2, r2, #2
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	9304      	str	r3, [sp, #16]
 8000528:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 800052a:	4d0a      	ldr	r5, [pc, #40]	; (8000554 <MX_GPIO_Init+0x8c>)
 800052c:	4622      	mov	r2, r4
 800052e:	2114      	movs	r1, #20
 8000530:	4628      	mov	r0, r5
 8000532:	f001 f8d1 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000536:	2314      	movs	r3, #20
 8000538:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	a905      	add	r1, sp, #20
 8000544:	4628      	mov	r0, r5
 8000546:	f000 ffe3 	bl	8001510 <HAL_GPIO_Init>

}
 800054a:	b00b      	add	sp, #44	; 0x2c
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000

08000558 <MX_DMA_Init>:
{
 8000558:	b500      	push	{lr}
 800055a:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 800055c:	2100      	movs	r1, #0
 800055e:	9101      	str	r1, [sp, #4]
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_DMA_Init+0x30>)
 8000562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000564:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000574:	460a      	mov	r2, r1
 8000576:	2038      	movs	r0, #56	; 0x38
 8000578:	f000 fd6c 	bl	8001054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800057c:	2038      	movs	r0, #56	; 0x38
 800057e:	f000 fd9d 	bl	80010bc <HAL_NVIC_EnableIRQ>
}
 8000582:	b003      	add	sp, #12
 8000584:	f85d fb04 	ldr.w	pc, [sp], #4
 8000588:	40023800 	.word	0x40023800

0800058c <MX_ADC1_Init>:
{
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000590:	2500      	movs	r5, #0
 8000592:	9500      	str	r5, [sp, #0]
 8000594:	9501      	str	r5, [sp, #4]
 8000596:	9502      	str	r5, [sp, #8]
 8000598:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 800059a:	4c1c      	ldr	r4, [pc, #112]	; (800060c <MX_ADC1_Init+0x80>)
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_ADC1_Init+0x84>)
 800059e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80005a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005a4:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a8:	2601      	movs	r6, #1
 80005aa:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ac:	7626      	strb	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ae:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b2:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_ADC1_Init+0x88>)
 80005b6:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b8:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005ba:	2704      	movs	r7, #4
 80005bc:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005be:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c4:	4620      	mov	r0, r4
 80005c6:	f000 fb33 	bl	8000c30 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_10;
 80005ca:	230a      	movs	r3, #10
 80005cc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80005ce:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d0:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	4669      	mov	r1, sp
 80005d4:	4620      	mov	r0, r4
 80005d6:	f000 fc63 	bl	8000ea0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_11;
 80005da:	230b      	movs	r3, #11
 80005dc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e2:	4669      	mov	r1, sp
 80005e4:	4620      	mov	r0, r4
 80005e6:	f000 fc5b 	bl	8000ea0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_12;
 80005ea:	230c      	movs	r3, #12
 80005ec:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 80005ee:	2303      	movs	r3, #3
 80005f0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	4669      	mov	r1, sp
 80005f4:	4620      	mov	r0, r4
 80005f6:	f000 fc53 	bl	8000ea0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_13;
 80005fa:	230d      	movs	r3, #13
 80005fc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 80005fe:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	4669      	mov	r1, sp
 8000602:	4620      	mov	r0, r4
 8000604:	f000 fc4c 	bl	8000ea0 <HAL_ADC_ConfigChannel>
}
 8000608:	b005      	add	sp, #20
 800060a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060c:	20000088 	.word	0x20000088
 8000610:	40012000 	.word	0x40012000
 8000614:	0f000001 	.word	0x0f000001

08000618 <MX_I2C2_Init>:
{
 8000618:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <MX_I2C2_Init+0x28>)
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_I2C2_Init+0x2c>)
 800061e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C2_Init+0x30>)
 8000622:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	2300      	movs	r3, #0
 8000626:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000628:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000630:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000632:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000638:	f001 f854 	bl	80016e4 <HAL_I2C_Init>
}
 800063c:	bd08      	pop	{r3, pc}
 800063e:	bf00      	nop
 8000640:	2000002c 	.word	0x2000002c
 8000644:	40005800 	.word	0x40005800
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S2_Init>:
{
 800064c:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 800064e:	480a      	ldr	r0, [pc, #40]	; (8000678 <MX_I2S2_Init+0x2c>)
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2S2_Init+0x30>)
 8000652:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	6042      	str	r2, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800065a:	2300      	movs	r3, #0
 800065c:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800065e:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000660:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000662:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000666:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000668:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800066c:	2301      	movs	r3, #1
 800066e:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000670:	f001 f912 	bl	8001898 <HAL_I2S_Init>
}
 8000674:	bd08      	pop	{r3, pc}
 8000676:	bf00      	nop
 8000678:	20000130 	.word	0x20000130
 800067c:	40003800 	.word	0x40003800

08000680 <SystemClock_Config>:
{
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000684:	2230      	movs	r2, #48	; 0x30
 8000686:	2100      	movs	r1, #0
 8000688:	eb0d 0002 	add.w	r0, sp, r2
 800068c:	f002 f814 	bl	80026b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	2400      	movs	r4, #0
 8000692:	9407      	str	r4, [sp, #28]
 8000694:	9408      	str	r4, [sp, #32]
 8000696:	9409      	str	r4, [sp, #36]	; 0x24
 8000698:	940a      	str	r4, [sp, #40]	; 0x28
 800069a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800069c:	9403      	str	r4, [sp, #12]
 800069e:	9404      	str	r4, [sp, #16]
 80006a0:	9405      	str	r4, [sp, #20]
 80006a2:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <SystemClock_Config+0xa0>)
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80006ac:	f042 0210 	orr.w	r2, r2, #16
 80006b0:	605a      	str	r2, [r3, #4]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80006b8:	605a      	str	r2, [r3, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	9401      	str	r4, [sp, #4]
 80006bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006c2:	641a      	str	r2, [r3, #64]	; 0x40
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ce:	9402      	str	r4, [sp, #8]
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <SystemClock_Config+0xa4>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2502      	movs	r5, #2
 80006e6:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2601      	movs	r6, #1
 80006ea:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f0:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	a80c      	add	r0, sp, #48	; 0x30
 80006f6:	f001 fbc7 	bl	8001e88 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fe:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000706:	4621      	mov	r1, r4
 8000708:	a807      	add	r0, sp, #28
 800070a:	f001 fe07 	bl	800231c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800070e:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000710:	23c0      	movs	r3, #192	; 0xc0
 8000712:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000714:	9505      	str	r5, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000716:	a803      	add	r0, sp, #12
 8000718:	f001 fec6 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
}
 800071c:	b018      	add	sp, #96	; 0x60
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <main>:
{
 8000728:	b508      	push	{r3, lr}
  HAL_Init();
 800072a:	f000 f9a7 	bl	8000a7c <HAL_Init>
  SystemClock_Config();
 800072e:	f7ff ffa7 	bl	8000680 <SystemClock_Config>
  MX_GPIO_Init();
 8000732:	f7ff fec9 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000736:	f7ff ff0f 	bl	8000558 <MX_DMA_Init>
  MX_ADC1_Init();
 800073a:	f7ff ff27 	bl	800058c <MX_ADC1_Init>
  MX_I2C2_Init();
 800073e:	f7ff ff6b 	bl	8000618 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000742:	f7ff ff83 	bl	800064c <MX_I2S2_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValArray, 4);
 8000746:	2204      	movs	r2, #4
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <main+0x54>)
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <main+0x58>)
 800074c:	f000 fa9c 	bl	8000c88 <HAL_ADC_Start_DMA>
	  pin_state = !pin_state;
 8000750:	4c0c      	ldr	r4, [pc, #48]	; (8000784 <main+0x5c>)
 8000752:	8822      	ldrh	r2, [r4, #0]
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	0952      	lsrs	r2, r2, #5
 800075a:	8022      	strh	r2, [r4, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, pin_state);
 800075c:	4d0a      	ldr	r5, [pc, #40]	; (8000788 <main+0x60>)
 800075e:	2104      	movs	r1, #4
 8000760:	4628      	mov	r0, r5
 8000762:	f000 ffb9 	bl	80016d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, pin_state);
 8000766:	7822      	ldrb	r2, [r4, #0]
 8000768:	2110      	movs	r1, #16
 800076a:	4628      	mov	r0, r5
 800076c:	f000 ffb4 	bl	80016d8 <HAL_GPIO_WritePin>
		  HAL_Delay(adcValArray[1]);
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <main+0x54>)
 8000772:	8858      	ldrh	r0, [r3, #2]
 8000774:	f000 f9ae 	bl	8000ad4 <HAL_Delay>
 8000778:	e7ea      	b.n	8000750 <main+0x28>
 800077a:	bf00      	nop
 800077c:	20000080 	.word	0x20000080
 8000780:	20000088 	.word	0x20000088
 8000784:	20000028 	.word	0x20000028
 8000788:	40020000 	.word	0x40020000

0800078c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800078c:	4770      	bx	lr
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2100      	movs	r1, #0
 8000794:	9100      	str	r1, [sp, #0]
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_MspInit+0x34>)
 8000798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800079a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800079e:	645a      	str	r2, [r3, #68]	; 0x44
 80007a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	9101      	str	r1, [sp, #4]
 80007ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	b002      	add	sp, #8
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c8:	b530      	push	{r4, r5, lr}
 80007ca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	2300      	movs	r3, #0
 80007ce:	9303      	str	r3, [sp, #12]
 80007d0:	9304      	str	r3, [sp, #16]
 80007d2:	9305      	str	r3, [sp, #20]
 80007d4:	9306      	str	r3, [sp, #24]
 80007d6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80007d8:	6802      	ldr	r2, [r0, #0]
 80007da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007de:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d001      	beq.n	80007ea <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007e6:	b009      	add	sp, #36	; 0x24
 80007e8:	bd30      	pop	{r4, r5, pc}
 80007ea:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ec:	2500      	movs	r5, #0
 80007ee:	9501      	str	r5, [sp, #4]
 80007f0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80007f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007fa:	645a      	str	r2, [r3, #68]	; 0x44
 80007fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000802:	9201      	str	r2, [sp, #4]
 8000804:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	9502      	str	r5, [sp, #8]
 8000808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800080a:	f042 0204 	orr.w	r2, r2, #4
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800081a:	230f      	movs	r3, #15
 800081c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000822:	a903      	add	r1, sp, #12
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <HAL_ADC_MspInit+0xa0>)
 8000826:	f000 fe73 	bl	8001510 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <HAL_ADC_MspInit+0xa4>)
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_ADC_MspInit+0xa8>)
 800082e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000830:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000832:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000834:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083a:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800083c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000840:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800084e:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000850:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000852:	f000 fcd3 	bl	80011fc <HAL_DMA_Init>
 8000856:	b918      	cbnz	r0, 8000860 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <HAL_ADC_MspInit+0xa4>)
 800085a:	63a3      	str	r3, [r4, #56]	; 0x38
 800085c:	639c      	str	r4, [r3, #56]	; 0x38
}
 800085e:	e7c2      	b.n	80007e6 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000860:	f7ff ff94 	bl	800078c <Error_Handler>
 8000864:	e7f8      	b.n	8000858 <HAL_ADC_MspInit+0x90>
 8000866:	bf00      	nop
 8000868:	40020800 	.word	0x40020800
 800086c:	200000d0 	.word	0x200000d0
 8000870:	40026410 	.word	0x40026410

08000874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000874:	b530      	push	{r4, r5, lr}
 8000876:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	2300      	movs	r3, #0
 800087a:	9303      	str	r3, [sp, #12]
 800087c:	9304      	str	r3, [sp, #16]
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	9306      	str	r3, [sp, #24]
 8000882:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8000884:	6802      	ldr	r2, [r0, #0]
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_I2C_MspInit+0x68>)
 8000888:	429a      	cmp	r2, r3
 800088a:	d001      	beq.n	8000890 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800088c:	b009      	add	sp, #36	; 0x24
 800088e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	2500      	movs	r5, #0
 8000892:	9501      	str	r5, [sp, #4]
 8000894:	4c12      	ldr	r4, [pc, #72]	; (80008e0 <HAL_I2C_MspInit+0x6c>)
 8000896:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6323      	str	r3, [r4, #48]	; 0x30
 800089e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008a0:	f003 0302 	and.w	r3, r3, #2
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ae:	2312      	movs	r3, #18
 80008b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008ba:	2304      	movs	r3, #4
 80008bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	a903      	add	r1, sp, #12
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <HAL_I2C_MspInit+0x70>)
 80008c2:	f000 fe25 	bl	8001510 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008c6:	9502      	str	r5, [sp, #8]
 80008c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ce:	6423      	str	r3, [r4, #64]	; 0x40
 80008d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	9b02      	ldr	r3, [sp, #8]
}
 80008da:	e7d7      	b.n	800088c <HAL_I2C_MspInit+0x18>
 80008dc:	40005800 	.word	0x40005800
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400

080008e8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	2300      	movs	r3, #0
 80008ee:	9303      	str	r3, [sp, #12]
 80008f0:	9304      	str	r3, [sp, #16]
 80008f2:	9305      	str	r3, [sp, #20]
 80008f4:	9306      	str	r3, [sp, #24]
 80008f6:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI2)
 80008f8:	6802      	ldr	r2, [r0, #0]
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <HAL_I2S_MspInit+0xa4>)
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d001      	beq.n	8000904 <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000900:	b009      	add	sp, #36	; 0x24
 8000902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000904:	2400      	movs	r4, #0
 8000906:	9400      	str	r4, [sp, #0]
 8000908:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800090c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000912:	641a      	str	r2, [r3, #64]	; 0x40
 8000914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000916:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800091a:	9200      	str	r2, [sp, #0]
 800091c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	9401      	str	r4, [sp, #4]
 8000920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000922:	f042 0202 	orr.w	r2, r2, #2
 8000926:	631a      	str	r2, [r3, #48]	; 0x30
 8000928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092a:	f002 0202 	and.w	r2, r2, #2
 800092e:	9201      	str	r2, [sp, #4]
 8000930:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	9402      	str	r4, [sp, #8]
 8000934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000936:	f042 0204 	orr.w	r2, r2, #4
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000946:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800094a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2502      	movs	r5, #2
 800094e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000950:	2605      	movs	r6, #5
 8000952:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	4f0e      	ldr	r7, [pc, #56]	; (8000990 <HAL_I2S_MspInit+0xa8>)
 8000956:	a903      	add	r1, sp, #12
 8000958:	4638      	mov	r0, r7
 800095a:	f000 fdd9 	bl	8001510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800095e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000962:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800096a:	2306      	movs	r3, #6
 800096c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	a903      	add	r1, sp, #12
 8000970:	4638      	mov	r0, r7
 8000972:	f000 fdcd 	bl	8001510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000976:	2340      	movs	r3, #64	; 0x40
 8000978:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000980:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	a903      	add	r1, sp, #12
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <HAL_I2S_MspInit+0xac>)
 8000986:	f000 fdc3 	bl	8001510 <HAL_GPIO_Init>
}
 800098a:	e7b9      	b.n	8000900 <HAL_I2S_MspInit+0x18>
 800098c:	40003800 	.word	0x40003800
 8000990:	40020400 	.word	0x40020400
 8000994:	40020800 	.word	0x40020800

08000998 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000998:	4770      	bx	lr

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	e7fe      	b.n	800099a <HardFault_Handler>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	e7fe      	b.n	800099c <MemManage_Handler>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	e7fe      	b.n	800099e <BusFault_Handler>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler>

080009a2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 f881 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bd08      	pop	{r3, pc}

080009b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009b2:	4802      	ldr	r0, [pc, #8]	; (80009bc <DMA2_Stream0_IRQHandler+0xc>)
 80009b4:	f000 fcbe 	bl	8001334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009b8:	bd08      	pop	{r3, pc}
 80009ba:	bf00      	nop
 80009bc:	200000d0 	.word	0x200000d0

080009c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SystemInit+0x18>)
 80009c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80009c6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80009ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d2:	609a      	str	r2, [r3, #8]
#endif
}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009e2:	e003      	b.n	80009ec <LoopCopyDataInit>

080009e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ea:	3104      	adds	r1, #4

080009ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009f4:	d3f6      	bcc.n	80009e4 <CopyDataInit>
  ldr  r2, =_sbss
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009f8:	e002      	b.n	8000a00 <LoopFillZerobss>

080009fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009fc:	f842 3b04 	str.w	r3, [r2], #4

08000a00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a04:	d3f9      	bcc.n	80009fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a06:	f7ff ffdb 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f001 fe31 	bl	8002670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fe8b 	bl	8000728 <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a18:	08002710 	.word	0x08002710
  ldr  r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a20:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a28:	2000017c 	.word	0x2000017c

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_InitTick+0x40>)
 8000a36:	7818      	ldrb	r0, [r3, #0]
 8000a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_InitTick+0x44>)
 8000a42:	6810      	ldr	r0, [r2, #0]
 8000a44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a48:	f000 fb46 	bl	80010d8 <HAL_SYSTICK_Config>
 8000a4c:	b968      	cbnz	r0, 8000a6a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	2c0f      	cmp	r4, #15
 8000a50:	d901      	bls.n	8000a56 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a52:	2001      	movs	r0, #1
 8000a54:	e00a      	b.n	8000a6c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a56:	2200      	movs	r2, #0
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5e:	f000 faf9 	bl	8001054 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_InitTick+0x48>)
 8000a64:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2000      	movs	r0, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a6a:	2001      	movs	r0, #1
}
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000004 	.word	0x20000004
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008

08000a7c <HAL_Init>:
{
 8000a7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x30>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 fac9 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ffc6 	bl	8000a30 <HAL_InitTick>
  HAL_MspInit();
 8000aa4:	f7ff fe74 	bl	8000790 <HAL_MspInit>
}
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd08      	pop	{r3, pc}
 8000aac:	40023c00 	.word	0x40023c00

08000ab0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <HAL_IncTick+0x10>)
 8000ab2:	6811      	ldr	r1, [r2, #0]
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_IncTick+0x14>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	440b      	add	r3, r1
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000178 	.word	0x20000178
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ac8:	4b01      	ldr	r3, [pc, #4]	; (8000ad0 <HAL_GetTick+0x8>)
 8000aca:	6818      	ldr	r0, [r3, #0]
}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000178 	.word	0x20000178

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b538      	push	{r3, r4, r5, lr}
 8000ad6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff6 	bl	8000ac8 <HAL_GetTick>
 8000adc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ade:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000ae2:	d002      	beq.n	8000aea <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <HAL_Delay+0x24>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	f7ff ffed 	bl	8000ac8 <HAL_GetTick>
 8000aee:	1b40      	subs	r0, r0, r5
 8000af0:	42a0      	cmp	r0, r4
 8000af2:	d3fa      	bcc.n	8000aea <HAL_Delay+0x16>
  {
  }
}
 8000af4:	bd38      	pop	{r3, r4, r5, pc}
 8000af6:	bf00      	nop
 8000af8:	20000004 	.word	0x20000004

08000afc <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <ADC_Init+0x12c>)
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000b04:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	6841      	ldr	r1, [r0, #4]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b0e:	6802      	ldr	r2, [r0, #0]
 8000b10:	6853      	ldr	r3, [r2, #4]
 8000b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b16:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b18:	6802      	ldr	r2, [r0, #0]
 8000b1a:	6853      	ldr	r3, [r2, #4]
 8000b1c:	6901      	ldr	r1, [r0, #16]
 8000b1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000b22:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b24:	6802      	ldr	r2, [r0, #0]
 8000b26:	6853      	ldr	r3, [r2, #4]
 8000b28:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000b2c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b2e:	6802      	ldr	r2, [r0, #0]
 8000b30:	6853      	ldr	r3, [r2, #4]
 8000b32:	6881      	ldr	r1, [r0, #8]
 8000b34:	430b      	orrs	r3, r1
 8000b36:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b38:	6802      	ldr	r2, [r0, #0]
 8000b3a:	6893      	ldr	r3, [r2, #8]
 8000b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b40:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b42:	6802      	ldr	r2, [r0, #0]
 8000b44:	6893      	ldr	r3, [r2, #8]
 8000b46:	68c1      	ldr	r1, [r0, #12]
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b4c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <ADC_Init+0x130>)
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d04b      	beq.n	8000bec <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b54:	6802      	ldr	r2, [r0, #0]
 8000b56:	6893      	ldr	r3, [r2, #8]
 8000b58:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000b5c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b5e:	6802      	ldr	r2, [r0, #0]
 8000b60:	6893      	ldr	r3, [r2, #8]
 8000b62:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b68:	6802      	ldr	r2, [r0, #0]
 8000b6a:	6893      	ldr	r3, [r2, #8]
 8000b6c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000b70:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b72:	6802      	ldr	r2, [r0, #0]
 8000b74:	6893      	ldr	r3, [r2, #8]
 8000b76:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000b7c:	6802      	ldr	r2, [r0, #0]
 8000b7e:	6893      	ldr	r3, [r2, #8]
 8000b80:	f023 0302 	bic.w	r3, r3, #2
 8000b84:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000b86:	6802      	ldr	r2, [r0, #0]
 8000b88:	6893      	ldr	r3, [r2, #8]
 8000b8a:	7e01      	ldrb	r1, [r0, #24]
 8000b8c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000b90:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000b92:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d133      	bne.n	8000c02 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000b9a:	6802      	ldr	r2, [r0, #0]
 8000b9c:	6853      	ldr	r3, [r2, #4]
 8000b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ba2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ba4:	6802      	ldr	r2, [r0, #0]
 8000ba6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ba8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000bac:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000bae:	6801      	ldr	r1, [r0, #0]
 8000bb0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000bb2:	69c2      	ldr	r2, [r0, #28]
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000bba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000bbc:	6802      	ldr	r2, [r0, #0]
 8000bbe:	6893      	ldr	r3, [r2, #8]
 8000bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bc4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000bc6:	6802      	ldr	r2, [r0, #0]
 8000bc8:	6893      	ldr	r3, [r2, #8]
 8000bca:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000bce:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000bd2:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000bd4:	6802      	ldr	r2, [r0, #0]
 8000bd6:	6893      	ldr	r3, [r2, #8]
 8000bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bdc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000bde:	6802      	ldr	r2, [r0, #0]
 8000be0:	6893      	ldr	r3, [r2, #8]
 8000be2:	6941      	ldr	r1, [r0, #20]
 8000be4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000be8:	6093      	str	r3, [r2, #8]
}
 8000bea:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bec:	6802      	ldr	r2, [r0, #0]
 8000bee:	6893      	ldr	r3, [r2, #8]
 8000bf0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000bf4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bf6:	6802      	ldr	r2, [r0, #0]
 8000bf8:	6893      	ldr	r3, [r2, #8]
 8000bfa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000bfe:	6093      	str	r3, [r2, #8]
 8000c00:	e7bc      	b.n	8000b7c <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c02:	6802      	ldr	r2, [r0, #0]
 8000c04:	6853      	ldr	r3, [r2, #4]
 8000c06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c0a:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c0c:	6802      	ldr	r2, [r0, #0]
 8000c0e:	6853      	ldr	r3, [r2, #4]
 8000c10:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c14:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c16:	6801      	ldr	r1, [r0, #0]
 8000c18:	684b      	ldr	r3, [r1, #4]
 8000c1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000c22:	604b      	str	r3, [r1, #4]
 8000c24:	e7be      	b.n	8000ba4 <ADC_Init+0xa8>
 8000c26:	bf00      	nop
 8000c28:	40012300 	.word	0x40012300
 8000c2c:	0f000001 	.word	0x0f000001

08000c30 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000c30:	b338      	cbz	r0, 8000c82 <HAL_ADC_Init+0x52>
{
 8000c32:	b510      	push	{r4, lr}
 8000c34:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c38:	b143      	cbz	r3, 8000c4c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c3c:	f013 0f10 	tst.w	r3, #16
 8000c40:	d00b      	beq.n	8000c5a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8000c42:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000c44:	2300      	movs	r3, #0
 8000c46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000c4a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8000c4c:	f7ff fdbc 	bl	80007c8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c50:	2300      	movs	r3, #0
 8000c52:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8000c54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000c58:	e7ef      	b.n	8000c3a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000c5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c60:	f023 0302 	bic.w	r3, r3, #2
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff ff46 	bl	8000afc <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	2000      	movs	r0, #0
 8000c72:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000c74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6423      	str	r3, [r4, #64]	; 0x40
 8000c80:	e7e0      	b.n	8000c44 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000c82:	2001      	movs	r0, #1
}
 8000c84:	4770      	bx	lr
	...

08000c88 <HAL_ADC_Start_DMA>:
{
 8000c88:	b530      	push	{r4, r5, lr}
 8000c8a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000c90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	f000 809b 	beq.w	8000dd0 <HAL_ADC_Start_DMA+0x148>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ca0:	6804      	ldr	r4, [r0, #0]
 8000ca2:	68a3      	ldr	r3, [r4, #8]
 8000ca4:	f013 0f01 	tst.w	r3, #1
 8000ca8:	d113      	bne.n	8000cd2 <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 8000caa:	68a3      	ldr	r3, [r4, #8]
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cb2:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <HAL_ADC_Start_DMA+0x160>)
 8000cb4:	681c      	ldr	r4, [r3, #0]
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <HAL_ADC_Start_DMA+0x164>)
 8000cb8:	fba3 3404 	umull	r3, r4, r3, r4
 8000cbc:	0ca4      	lsrs	r4, r4, #18
 8000cbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000cc2:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8000cc4:	e002      	b.n	8000ccc <HAL_ADC_Start_DMA+0x44>
      counter--;
 8000cc6:	9c01      	ldr	r4, [sp, #4]
 8000cc8:	3c01      	subs	r4, #1
 8000cca:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8000ccc:	9c01      	ldr	r4, [sp, #4]
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d1f9      	bne.n	8000cc6 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cd2:	6803      	ldr	r3, [r0, #0]
 8000cd4:	689c      	ldr	r4, [r3, #8]
 8000cd6:	f014 0f01 	tst.w	r4, #1
 8000cda:	d07b      	beq.n	8000dd4 <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000cde:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8000ce2:	f024 0401 	bic.w	r4, r4, #1
 8000ce6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000cea:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000cf2:	d005      	beq.n	8000d00 <HAL_ADC_Start_DMA+0x78>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cf4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfe:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d00:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d02:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000d06:	d038      	beq.n	8000d7a <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d08:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d0a:	f023 0306 	bic.w	r3, r3, #6
 8000d0e:	6443      	str	r3, [r0, #68]	; 0x44
 8000d10:	4613      	mov	r3, r2
 8000d12:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8000d14:	2200      	movs	r2, #0
 8000d16:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d1a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000d1c:	4834      	ldr	r0, [pc, #208]	; (8000df0 <HAL_ADC_Start_DMA+0x168>)
 8000d1e:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000d22:	4834      	ldr	r0, [pc, #208]	; (8000df4 <HAL_ADC_Start_DMA+0x16c>)
 8000d24:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000d28:	4833      	ldr	r0, [pc, #204]	; (8000df8 <HAL_ADC_Start_DMA+0x170>)
 8000d2a:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d2c:	6822      	ldr	r2, [r4, #0]
 8000d2e:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000d32:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d34:	6825      	ldr	r5, [r4, #0]
 8000d36:	6868      	ldr	r0, [r5, #4]
 8000d38:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8000d3c:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000d3e:	6825      	ldr	r5, [r4, #0]
 8000d40:	68a8      	ldr	r0, [r5, #8]
 8000d42:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000d46:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d48:	6820      	ldr	r0, [r4, #0]
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8000d50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d52:	f000 fab9 	bl	80012c8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <HAL_ADC_Start_DMA+0x174>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f013 0f1f 	tst.w	r3, #31
 8000d5e:	d127      	bne.n	8000db0 <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <HAL_ADC_Start_DMA+0x178>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d019      	beq.n	8000d9c <HAL_ADC_Start_DMA+0x114>
 8000d68:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d007      	beq.n	8000d80 <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <HAL_ADC_Start_DMA+0x17c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00b      	beq.n	8000d8e <HAL_ADC_Start_DMA+0x106>
  return HAL_OK;
 8000d76:	2000      	movs	r0, #0
 8000d78:	e02d      	b.n	8000dd6 <HAL_ADC_Start_DMA+0x14e>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6443      	str	r3, [r0, #68]	; 0x44
 8000d7e:	e7c7      	b.n	8000d10 <HAL_ADC_Start_DMA+0x88>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d80:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000d84:	6852      	ldr	r2, [r2, #4]
 8000d86:	f012 0f1f 	tst.w	r2, #31
 8000d8a:	d007      	beq.n	8000d9c <HAL_ADC_Start_DMA+0x114>
 8000d8c:	e7f0      	b.n	8000d70 <HAL_ADC_Start_DMA+0xe8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d8e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000d92:	6852      	ldr	r2, [r2, #4]
 8000d94:	f002 021f 	and.w	r2, r2, #31
 8000d98:	2a0f      	cmp	r2, #15
 8000d9a:	d81e      	bhi.n	8000dda <HAL_ADC_Start_DMA+0x152>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000da2:	d11c      	bne.n	8000dde <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000daa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000dac:	2000      	movs	r0, #0
 8000dae:	e012      	b.n	8000dd6 <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <HAL_ADC_Start_DMA+0x178>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d001      	beq.n	8000dbc <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 8000db8:	2000      	movs	r0, #0
 8000dba:	e00c      	b.n	8000dd6 <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000dc2:	d10e      	bne.n	8000de2 <HAL_ADC_Start_DMA+0x15a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e002      	b.n	8000dd6 <HAL_ADC_Start_DMA+0x14e>
  __HAL_LOCK(hadc);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	e000      	b.n	8000dd6 <HAL_ADC_Start_DMA+0x14e>
  return HAL_OK;
 8000dd4:	2000      	movs	r0, #0
}
 8000dd6:	b003      	add	sp, #12
 8000dd8:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8000dda:	2000      	movs	r0, #0
 8000ddc:	e7fb      	b.n	8000dd6 <HAL_ADC_Start_DMA+0x14e>
 8000dde:	2000      	movs	r0, #0
 8000de0:	e7f9      	b.n	8000dd6 <HAL_ADC_Start_DMA+0x14e>
 8000de2:	2000      	movs	r0, #0
 8000de4:	e7f7      	b.n	8000dd6 <HAL_ADC_Start_DMA+0x14e>
 8000de6:	bf00      	nop
 8000de8:	20000000 	.word	0x20000000
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	08000e2f 	.word	0x08000e2f
 8000df4:	08000e0d 	.word	0x08000e0d
 8000df8:	08000e19 	.word	0x08000e19
 8000dfc:	40012300 	.word	0x40012300
 8000e00:	40012000 	.word	0x40012000
 8000e04:	40012200 	.word	0x40012200

08000e08 <HAL_ADC_ConvCpltCallback>:
}
 8000e08:	4770      	bx	lr

08000e0a <HAL_ADC_ConvHalfCpltCallback>:
}
 8000e0a:	4770      	bx	lr

08000e0c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e0c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000e0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000e10:	f7ff fffb 	bl	8000e0a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e14:	bd08      	pop	{r3, pc}

08000e16 <HAL_ADC_ErrorCallback>:
}
 8000e16:	4770      	bx	lr

08000e18 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000e18:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000e1c:	2340      	movs	r3, #64	; 0x40
 8000e1e:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000e20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e28:	f7ff fff5 	bl	8000e16 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e2c:	bd08      	pop	{r3, pc}

08000e2e <ADC_DMAConvCplt>:
{
 8000e2e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e30:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e34:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000e38:	d126      	bne.n	8000e88 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	6891      	ldr	r1, [r2, #8]
 8000e46:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000e4a:	d119      	bne.n	8000e80 <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e4c:	7e19      	ldrb	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e4e:	b9b9      	cbnz	r1, 8000e80 <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e52:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000e56:	d003      	beq.n	8000e60 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e58:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e5a:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8000e5e:	d10f      	bne.n	8000e80 <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e60:	6851      	ldr	r1, [r2, #4]
 8000e62:	f021 0120 	bic.w	r1, r1, #32
 8000e66:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e72:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000e76:	d103      	bne.n	8000e80 <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffc1 	bl	8000e08 <HAL_ADC_ConvCpltCallback>
}
 8000e86:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8a:	f012 0f10 	tst.w	r2, #16
 8000e8e:	d103      	bne.n	8000e98 <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	4798      	blx	r3
}
 8000e96:	e7f6      	b.n	8000e86 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ffbc 	bl	8000e16 <HAL_ADC_ErrorCallback>
 8000e9e:	e7f2      	b.n	8000e86 <ADC_DMAConvCplt+0x58>

08000ea0 <HAL_ADC_ConfigChannel>:
{
 8000ea0:	b430      	push	{r4, r5}
 8000ea2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000ea8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f000 80b7 	beq.w	8001020 <HAL_ADC_ConfigChannel+0x180>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000eb8:	680b      	ldr	r3, [r1, #0]
 8000eba:	2b09      	cmp	r3, #9
 8000ebc:	d93e      	bls.n	8000f3c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ebe:	6805      	ldr	r5, [r0, #0]
 8000ec0:	68ea      	ldr	r2, [r5, #12]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ec8:	3b1e      	subs	r3, #30
 8000eca:	2407      	movs	r4, #7
 8000ecc:	fa04 f303 	lsl.w	r3, r4, r3
 8000ed0:	ea22 0303 	bic.w	r3, r2, r3
 8000ed4:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ed6:	6805      	ldr	r5, [r0, #0]
 8000ed8:	68ea      	ldr	r2, [r5, #12]
 8000eda:	688c      	ldr	r4, [r1, #8]
 8000edc:	880b      	ldrh	r3, [r1, #0]
 8000ede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ee2:	3b1e      	subs	r3, #30
 8000ee4:	fa04 f303 	lsl.w	r3, r4, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8000eec:	684b      	ldr	r3, [r1, #4]
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d83a      	bhi.n	8000f68 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ef2:	6805      	ldr	r5, [r0, #0]
 8000ef4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ef6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000efa:	3b05      	subs	r3, #5
 8000efc:	241f      	movs	r4, #31
 8000efe:	fa04 f303 	lsl.w	r3, r4, r3
 8000f02:	ea22 0303 	bic.w	r3, r2, r3
 8000f06:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f08:	6805      	ldr	r5, [r0, #0]
 8000f0a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000f0c:	684b      	ldr	r3, [r1, #4]
 8000f0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f12:	3b05      	subs	r3, #5
 8000f14:	880c      	ldrh	r4, [r1, #0]
 8000f16:	fa04 f303 	lsl.w	r3, r4, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f1e:	6802      	ldr	r2, [r0, #0]
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <HAL_ADC_ConfigChannel+0x184>)
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d050      	beq.n	8000fc8 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f26:	6802      	ldr	r2, [r0, #0]
 8000f28:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <HAL_ADC_ConfigChannel+0x184>)
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d055      	beq.n	8000fda <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000f34:	4618      	mov	r0, r3
}
 8000f36:	b002      	add	sp, #8
 8000f38:	bc30      	pop	{r4, r5}
 8000f3a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f3c:	6805      	ldr	r5, [r0, #0]
 8000f3e:	692a      	ldr	r2, [r5, #16]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f46:	2407      	movs	r4, #7
 8000f48:	fa04 f303 	lsl.w	r3, r4, r3
 8000f4c:	ea22 0303 	bic.w	r3, r2, r3
 8000f50:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f52:	6805      	ldr	r5, [r0, #0]
 8000f54:	692a      	ldr	r2, [r5, #16]
 8000f56:	688c      	ldr	r4, [r1, #8]
 8000f58:	880b      	ldrh	r3, [r1, #0]
 8000f5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f5e:	fa04 f303 	lsl.w	r3, r4, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	612b      	str	r3, [r5, #16]
 8000f66:	e7c1      	b.n	8000eec <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8000f68:	2b0c      	cmp	r3, #12
 8000f6a:	d816      	bhi.n	8000f9a <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f6c:	6805      	ldr	r5, [r0, #0]
 8000f6e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f74:	3b23      	subs	r3, #35	; 0x23
 8000f76:	241f      	movs	r4, #31
 8000f78:	fa04 f303 	lsl.w	r3, r4, r3
 8000f7c:	ea22 0303 	bic.w	r3, r2, r3
 8000f80:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f82:	6805      	ldr	r5, [r0, #0]
 8000f84:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f86:	684b      	ldr	r3, [r1, #4]
 8000f88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f8c:	3b23      	subs	r3, #35	; 0x23
 8000f8e:	880c      	ldrh	r4, [r1, #0]
 8000f90:	fa04 f303 	lsl.w	r3, r4, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	632b      	str	r3, [r5, #48]	; 0x30
 8000f98:	e7c1      	b.n	8000f1e <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f9a:	6805      	ldr	r5, [r0, #0]
 8000f9c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000f9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fa2:	3b41      	subs	r3, #65	; 0x41
 8000fa4:	241f      	movs	r4, #31
 8000fa6:	fa04 f303 	lsl.w	r3, r4, r3
 8000faa:	ea22 0303 	bic.w	r3, r2, r3
 8000fae:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fb0:	6805      	ldr	r5, [r0, #0]
 8000fb2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000fb4:	684b      	ldr	r3, [r1, #4]
 8000fb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fba:	3b41      	subs	r3, #65	; 0x41
 8000fbc:	880c      	ldrh	r4, [r1, #0]
 8000fbe:	fa04 f303 	lsl.w	r3, r4, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000fc6:	e7aa      	b.n	8000f1e <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fc8:	680b      	ldr	r3, [r1, #0]
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d1ab      	bne.n	8000f26 <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000fce:	4a16      	ldr	r2, [pc, #88]	; (8001028 <HAL_ADC_ConfigChannel+0x188>)
 8000fd0:	6853      	ldr	r3, [r2, #4]
 8000fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd6:	6053      	str	r3, [r2, #4]
 8000fd8:	e7a5      	b.n	8000f26 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000fda:	680b      	ldr	r3, [r1, #0]
 8000fdc:	3b10      	subs	r3, #16
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d8a5      	bhi.n	8000f2e <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <HAL_ADC_ConfigChannel+0x188>)
 8000fe4:	6853      	ldr	r3, [r2, #4]
 8000fe6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fea:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fec:	680b      	ldr	r3, [r1, #0]
 8000fee:	2b10      	cmp	r3, #16
 8000ff0:	d19d      	bne.n	8000f2e <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_ADC_ConfigChannel+0x18c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8000ffa:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8000ffe:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9b      	lsrs	r3, r3, #18
 8001008:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800100c:	005a      	lsls	r2, r3, #1
 800100e:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8001010:	e002      	b.n	8001018 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	3b01      	subs	r3, #1
 8001016:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001018:	9b01      	ldr	r3, [sp, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f9      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x172>
 800101e:	e786      	b.n	8000f2e <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8001020:	2002      	movs	r0, #2
 8001022:	e788      	b.n	8000f36 <HAL_ADC_ConfigChannel+0x96>
 8001024:	40012000 	.word	0x40012000
 8001028:	40012300 	.word	0x40012300
 800102c:	20000000 	.word	0x20000000

08001030 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001032:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001038:	041b      	lsls	r3, r3, #16
 800103a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	0200      	lsls	r0, r0, #8
 800103e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001042:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001044:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001048:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800104c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001054:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_NVIC_SetPriority+0x60>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105e:	f1c3 0407 	rsb	r4, r3, #7
 8001062:	2c04      	cmp	r4, #4
 8001064:	bf28      	it	cs
 8001066:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001068:	1d1d      	adds	r5, r3, #4
 800106a:	2d06      	cmp	r5, #6
 800106c:	d918      	bls.n	80010a0 <HAL_NVIC_SetPriority+0x4c>
 800106e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001074:	fa05 f404 	lsl.w	r4, r5, r4
 8001078:	ea21 0104 	bic.w	r1, r1, r4
 800107c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107e:	fa05 f303 	lsl.w	r3, r5, r3
 8001082:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001086:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001088:	2800      	cmp	r0, #0
 800108a:	db0b      	blt.n	80010a4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	0109      	lsls	r1, r1, #4
 800108e:	b2c9      	uxtb	r1, r1
 8001090:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001094:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001098:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800109c:	bc30      	pop	{r4, r5}
 800109e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a0:	2300      	movs	r3, #0
 80010a2:	e7e5      	b.n	8001070 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	f000 000f 	and.w	r0, r0, #15
 80010a8:	0109      	lsls	r1, r1, #4
 80010aa:	b2c9      	uxtb	r1, r1
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <HAL_NVIC_SetPriority+0x64>)
 80010ae:	5419      	strb	r1, [r3, r0]
 80010b0:	e7f4      	b.n	800109c <HAL_NVIC_SetPriority+0x48>
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	e000ed14 	.word	0xe000ed14

080010bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010bc:	2800      	cmp	r0, #0
 80010be:	db07      	blt.n	80010d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c0:	f000 021f 	and.w	r2, r0, #31
 80010c4:	0940      	lsrs	r0, r0, #5
 80010c6:	2301      	movs	r3, #1
 80010c8:	4093      	lsls	r3, r2
 80010ca:	4a02      	ldr	r2, [pc, #8]	; (80010d4 <HAL_NVIC_EnableIRQ+0x18>)
 80010cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	3801      	subs	r0, #1
 80010da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010de:	d20a      	bcs.n	80010f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_SYSTICK_Config+0x24>)
 80010e2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_SYSTICK_Config+0x28>)
 80010e6:	21f0      	movs	r1, #240	; 0xf0
 80010e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	2000      	movs	r0, #0
 80010ee:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001104:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001106:	6805      	ldr	r5, [r0, #0]
 8001108:	682c      	ldr	r4, [r5, #0]
 800110a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800110e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001110:	6804      	ldr	r4, [r0, #0]
 8001112:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001114:	6883      	ldr	r3, [r0, #8]
 8001116:	2b40      	cmp	r3, #64	; 0x40
 8001118:	d005      	beq.n	8001126 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800111a:	6803      	ldr	r3, [r0, #0]
 800111c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800111e:	6803      	ldr	r3, [r0, #0]
 8001120:	60da      	str	r2, [r3, #12]
  }
}
 8001122:	bc30      	pop	{r4, r5}
 8001124:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001126:	6803      	ldr	r3, [r0, #0]
 8001128:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800112a:	6803      	ldr	r3, [r0, #0]
 800112c:	60d9      	str	r1, [r3, #12]
 800112e:	e7f8      	b.n	8001122 <DMA_SetConfig+0x1e>

08001130 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001130:	6802      	ldr	r2, [r0, #0]
 8001132:	b2d3      	uxtb	r3, r2
 8001134:	3b10      	subs	r3, #16
 8001136:	490b      	ldr	r1, [pc, #44]	; (8001164 <DMA_CalcBaseAndBitshift+0x34>)
 8001138:	fba1 1303 	umull	r1, r3, r1, r3
 800113c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800113e:	490a      	ldr	r1, [pc, #40]	; (8001168 <DMA_CalcBaseAndBitshift+0x38>)
 8001140:	5cc9      	ldrb	r1, [r1, r3]
 8001142:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001144:	2b03      	cmp	r3, #3
 8001146:	d806      	bhi.n	8001156 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001148:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800114c:	f022 0203 	bic.w	r2, r2, #3
 8001150:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001152:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001154:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001156:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800115a:	f022 0203 	bic.w	r2, r2, #3
 800115e:	3204      	adds	r2, #4
 8001160:	6582      	str	r2, [r0, #88]	; 0x58
 8001162:	e7f6      	b.n	8001152 <DMA_CalcBaseAndBitshift+0x22>
 8001164:	aaaaaaab 	.word	0xaaaaaaab
 8001168:	080026f8 	.word	0x080026f8

0800116c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800116c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800116e:	6982      	ldr	r2, [r0, #24]
 8001170:	b992      	cbnz	r2, 8001198 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001172:	2b01      	cmp	r3, #1
 8001174:	d00a      	beq.n	800118c <DMA_CheckFifoParam+0x20>
 8001176:	b11b      	cbz	r3, 8001180 <DMA_CheckFifoParam+0x14>
 8001178:	2b02      	cmp	r3, #2
 800117a:	d001      	beq.n	8001180 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 800117c:	2000      	movs	r0, #0
 800117e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001180:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001182:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001186:	d12c      	bne.n	80011e2 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001188:	2000      	movs	r0, #0
 800118a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800118c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800118e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001192:	d028      	beq.n	80011e6 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001194:	2000      	movs	r0, #0
 8001196:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001198:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800119c:	d005      	beq.n	80011aa <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d929      	bls.n	80011f6 <DMA_CheckFifoParam+0x8a>
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d015      	beq.n	80011d2 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80011a6:	2000      	movs	r0, #0
 80011a8:	4770      	bx	lr
    switch (tmp)
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d803      	bhi.n	80011b6 <DMA_CheckFifoParam+0x4a>
 80011ae:	e8df f003 	tbb	[pc, r3]
 80011b2:	041c      	.short	0x041c
 80011b4:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2000      	movs	r0, #0
 80011b8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80011bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80011c0:	d115      	bne.n	80011ee <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2000      	movs	r0, #0
 80011c4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80011c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80011cc:	d011      	beq.n	80011f2 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2000      	movs	r0, #0
 80011d0:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80011d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80011d8:	d001      	beq.n	80011de <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80011da:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80011dc:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80011de:	2000      	movs	r0, #0
 80011e0:	4770      	bx	lr
        status = HAL_ERROR;
 80011e2:	2001      	movs	r0, #1
 80011e4:	4770      	bx	lr
        status = HAL_ERROR;
 80011e6:	2001      	movs	r0, #1
 80011e8:	4770      	bx	lr
      status = HAL_ERROR;
 80011ea:	2001      	movs	r0, #1
 80011ec:	4770      	bx	lr
        status = HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
 80011f0:	4770      	bx	lr
        status = HAL_ERROR;
 80011f2:	2001      	movs	r0, #1
 80011f4:	4770      	bx	lr
      status = HAL_ERROR;
 80011f6:	2001      	movs	r0, #1
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_DMA_Init>:
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
 80011fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff fc62 	bl	8000ac8 <HAL_GetTick>
  if(hdma == NULL)
 8001204:	2c00      	cmp	r4, #0
 8001206:	d05b      	beq.n	80012c0 <HAL_DMA_Init+0xc4>
 8001208:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800120a:	2300      	movs	r3, #0
 800120c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001210:	2302      	movs	r3, #2
 8001212:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001216:	6822      	ldr	r2, [r4, #0]
 8001218:	6813      	ldr	r3, [r2, #0]
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f012 0f01 	tst.w	r2, #1
 8001228:	d00a      	beq.n	8001240 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800122a:	f7ff fc4d 	bl	8000ac8 <HAL_GetTick>
 800122e:	1b40      	subs	r0, r0, r5
 8001230:	2805      	cmp	r0, #5
 8001232:	d9f5      	bls.n	8001220 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001234:	2320      	movs	r3, #32
 8001236:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001238:	2003      	movs	r0, #3
 800123a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800123e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001240:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001242:	4820      	ldr	r0, [pc, #128]	; (80012c4 <HAL_DMA_Init+0xc8>)
 8001244:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001246:	6861      	ldr	r1, [r4, #4]
 8001248:	68a2      	ldr	r2, [r4, #8]
 800124a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001250:	6921      	ldr	r1, [r4, #16]
 8001252:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001254:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001256:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001258:	69a1      	ldr	r1, [r4, #24]
 800125a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800125c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001260:	6a21      	ldr	r1, [r4, #32]
 8001262:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001264:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001266:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001268:	2904      	cmp	r1, #4
 800126a:	d01e      	beq.n	80012aa <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800126c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800126e:	6826      	ldr	r6, [r4, #0]
 8001270:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001272:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001278:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800127a:	2b04      	cmp	r3, #4
 800127c:	d107      	bne.n	800128e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800127e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001280:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001282:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001284:	b11b      	cbz	r3, 800128e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff ff70 	bl	800116c <DMA_CheckFifoParam>
 800128c:	b990      	cbnz	r0, 80012b4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800128e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff ff4d 	bl	8001130 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001296:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001298:	233f      	movs	r3, #63	; 0x3f
 800129a:	4093      	lsls	r3, r2
 800129c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129e:	2000      	movs	r0, #0
 80012a0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80012a8:	e7c9      	b.n	800123e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80012ae:	4301      	orrs	r1, r0
 80012b0:	430a      	orrs	r2, r1
 80012b2:	e7db      	b.n	800126c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80012b8:	2001      	movs	r0, #1
 80012ba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80012be:	e7be      	b.n	800123e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80012c0:	2001      	movs	r0, #1
 80012c2:	e7bc      	b.n	800123e <HAL_DMA_Init+0x42>
 80012c4:	f010803f 	.word	0xf010803f

080012c8 <HAL_DMA_Start_IT>:
{
 80012c8:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ca:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80012cc:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80012d0:	2c01      	cmp	r4, #1
 80012d2:	d02c      	beq.n	800132e <HAL_DMA_Start_IT+0x66>
 80012d4:	2401      	movs	r4, #1
 80012d6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80012da:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80012de:	b2e4      	uxtb	r4, r4
 80012e0:	2c01      	cmp	r4, #1
 80012e2:	d004      	beq.n	80012ee <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80012e4:	2300      	movs	r3, #0
 80012e6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80012ea:	2002      	movs	r0, #2
}
 80012ec:	bd38      	pop	{r3, r4, r5, pc}
 80012ee:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f0:	2002      	movs	r0, #2
 80012f2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f6:	2000      	movs	r0, #0
 80012f8:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff ff02 	bl	8001104 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001300:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001302:	233f      	movs	r3, #63	; 0x3f
 8001304:	4093      	lsls	r3, r2
 8001306:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	f043 0316 	orr.w	r3, r3, #22
 8001310:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001314:	b123      	cbz	r3, 8001320 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001320:	6822      	ldr	r2, [r4, #0]
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800132a:	2000      	movs	r0, #0
 800132c:	e7de      	b.n	80012ec <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 800132e:	2002      	movs	r0, #2
 8001330:	e7dc      	b.n	80012ec <HAL_DMA_Start_IT+0x24>
	...

08001334 <HAL_DMA_IRQHandler>:
{
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800133e:	4b72      	ldr	r3, [pc, #456]	; (8001508 <HAL_DMA_IRQHandler+0x1d4>)
 8001340:	681d      	ldr	r5, [r3, #0]
 8001342:	4b72      	ldr	r3, [pc, #456]	; (800150c <HAL_DMA_IRQHandler+0x1d8>)
 8001344:	fba3 3505 	umull	r3, r5, r3, r5
 8001348:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800134c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800134e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001350:	2308      	movs	r3, #8
 8001352:	4093      	lsls	r3, r2
 8001354:	4233      	tst	r3, r6
 8001356:	d010      	beq.n	800137a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001358:	6803      	ldr	r3, [r0, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	f012 0f04 	tst.w	r2, #4
 8001360:	d00b      	beq.n	800137a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	f022 0204 	bic.w	r2, r2, #4
 8001368:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800136a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800136c:	2308      	movs	r3, #8
 800136e:	4093      	lsls	r3, r2
 8001370:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001372:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800137a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800137c:	2301      	movs	r3, #1
 800137e:	4093      	lsls	r3, r2
 8001380:	4233      	tst	r3, r6
 8001382:	d009      	beq.n	8001398 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	6952      	ldr	r2, [r2, #20]
 8001388:	f012 0f80 	tst.w	r2, #128	; 0x80
 800138c:	d004      	beq.n	8001398 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800138e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001390:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001398:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800139a:	2304      	movs	r3, #4
 800139c:	4093      	lsls	r3, r2
 800139e:	4233      	tst	r3, r6
 80013a0:	d009      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013a2:	6822      	ldr	r2, [r4, #0]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	f012 0f02 	tst.w	r2, #2
 80013aa:	d004      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013ac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013b8:	2310      	movs	r3, #16
 80013ba:	4093      	lsls	r3, r2
 80013bc:	4233      	tst	r3, r6
 80013be:	d024      	beq.n	800140a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c0:	6822      	ldr	r2, [r4, #0]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	f012 0f08 	tst.w	r2, #8
 80013c8:	d01f      	beq.n	800140a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ca:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80013d4:	d00d      	beq.n	80013f2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80013dc:	d104      	bne.n	80013e8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80013de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013e0:	b19b      	cbz	r3, 800140a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80013e2:	4620      	mov	r0, r4
 80013e4:	4798      	blx	r3
 80013e6:	e010      	b.n	800140a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013ea:	b173      	cbz	r3, 800140a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80013ec:	4620      	mov	r0, r4
 80013ee:	4798      	blx	r3
 80013f0:	e00b      	b.n	800140a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80013f8:	d103      	bne.n	8001402 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f022 0208 	bic.w	r2, r2, #8
 8001400:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001404:	b10b      	cbz	r3, 800140a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001406:	4620      	mov	r0, r4
 8001408:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800140a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800140c:	2320      	movs	r3, #32
 800140e:	4093      	lsls	r3, r2
 8001410:	4233      	tst	r3, r6
 8001412:	d055      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001414:	6822      	ldr	r2, [r4, #0]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	f012 0f10 	tst.w	r2, #16
 800141c:	d050      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800141e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001420:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b05      	cmp	r3, #5
 8001428:	d00e      	beq.n	8001448 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001432:	d033      	beq.n	800149c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800143a:	d12a      	bne.n	8001492 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800143c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800143e:	2b00      	cmp	r3, #0
 8001440:	d03e      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001442:	4620      	mov	r0, r4
 8001444:	4798      	blx	r3
 8001446:	e03b      	b.n	80014c0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001448:	6822      	ldr	r2, [r4, #0]
 800144a:	6813      	ldr	r3, [r2, #0]
 800144c:	f023 0316 	bic.w	r3, r3, #22
 8001450:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001452:	6822      	ldr	r2, [r4, #0]
 8001454:	6953      	ldr	r3, [r2, #20]
 8001456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800145a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800145c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800145e:	b1a3      	cbz	r3, 800148a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001460:	6822      	ldr	r2, [r4, #0]
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	f023 0308 	bic.w	r3, r3, #8
 8001468:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800146c:	233f      	movs	r3, #63	; 0x3f
 800146e:	4093      	lsls	r3, r2
 8001470:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001472:	2300      	movs	r3, #0
 8001474:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001478:	2301      	movs	r3, #1
 800147a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800147e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001480:	2b00      	cmp	r3, #0
 8001482:	d03f      	beq.n	8001504 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001484:	4620      	mov	r0, r4
 8001486:	4798      	blx	r3
 8001488:	e03c      	b.n	8001504 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e7      	bne.n	8001460 <HAL_DMA_IRQHandler+0x12c>
 8001490:	e7eb      	b.n	800146a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001492:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001494:	b1a3      	cbz	r3, 80014c0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001496:	4620      	mov	r0, r4
 8001498:	4798      	blx	r3
 800149a:	e011      	b.n	80014c0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f412 7f80 	tst.w	r2, #256	; 0x100
 80014a2:	d109      	bne.n	80014b8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	f022 0210 	bic.w	r2, r2, #16
 80014aa:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80014ac:	2300      	movs	r3, #0
 80014ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80014b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014ba:	b10b      	cbz	r3, 80014c0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80014bc:	4620      	mov	r0, r4
 80014be:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014c2:	b1fb      	cbz	r3, 8001504 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014c6:	f013 0f01 	tst.w	r3, #1
 80014ca:	d017      	beq.n	80014fc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80014cc:	2305      	movs	r3, #5
 80014ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80014dc:	9b01      	ldr	r3, [sp, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	42ab      	cmp	r3, r5
 80014e4:	d804      	bhi.n	80014f0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f013 0f01 	tst.w	r3, #1
 80014ee:	d1f5      	bne.n	80014dc <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80014f0:	2300      	movs	r3, #0
 80014f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80014fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014fe:	b10b      	cbz	r3, 8001504 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001500:	4620      	mov	r0, r4
 8001502:	4798      	blx	r3
}
 8001504:	b003      	add	sp, #12
 8001506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001508:	20000000 	.word	0x20000000
 800150c:	1b4e81b5 	.word	0x1b4e81b5

08001510 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001510:	2300      	movs	r3, #0
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f200 80d7 	bhi.w	80016c6 <HAL_GPIO_Init+0x1b6>
{
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	b083      	sub	sp, #12
 800151c:	e039      	b.n	8001592 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151e:	2207      	movs	r2, #7
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x14>
 8001522:	2200      	movs	r2, #0
 8001524:	40aa      	lsls	r2, r5
 8001526:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001528:	3402      	adds	r4, #2
 800152a:	4d67      	ldr	r5, [pc, #412]	; (80016c8 <HAL_GPIO_Init+0x1b8>)
 800152c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001530:	4a66      	ldr	r2, [pc, #408]	; (80016cc <HAL_GPIO_Init+0x1bc>)
 8001532:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001534:	43f2      	mvns	r2, r6
 8001536:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800153a:	684f      	ldr	r7, [r1, #4]
 800153c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001540:	d001      	beq.n	8001546 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001542:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8001546:	4c61      	ldr	r4, [pc, #388]	; (80016cc <HAL_GPIO_Init+0x1bc>)
 8001548:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800154a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800154c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001550:	684f      	ldr	r7, [r1, #4]
 8001552:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001556:	d001      	beq.n	800155c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001558:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 800155c:	4c5b      	ldr	r4, [pc, #364]	; (80016cc <HAL_GPIO_Init+0x1bc>)
 800155e:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001560:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001562:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001566:	684f      	ldr	r7, [r1, #4]
 8001568:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800156c:	d001      	beq.n	8001572 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800156e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8001572:	4c56      	ldr	r4, [pc, #344]	; (80016cc <HAL_GPIO_Init+0x1bc>)
 8001574:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001576:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001578:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157a:	684d      	ldr	r5, [r1, #4]
 800157c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001580:	d001      	beq.n	8001586 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001582:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8001586:	4c51      	ldr	r4, [pc, #324]	; (80016cc <HAL_GPIO_Init+0x1bc>)
 8001588:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	3301      	adds	r3, #1
 800158c:	2b0f      	cmp	r3, #15
 800158e:	f200 8098 	bhi.w	80016c2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001592:	2201      	movs	r2, #1
 8001594:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	680c      	ldr	r4, [r1, #0]
 8001598:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 800159c:	42b2      	cmp	r2, r6
 800159e:	d1f4      	bne.n	800158a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a0:	684c      	ldr	r4, [r1, #4]
 80015a2:	1e65      	subs	r5, r4, #1
 80015a4:	2d01      	cmp	r5, #1
 80015a6:	d903      	bls.n	80015b0 <HAL_GPIO_Init+0xa0>
 80015a8:	2c11      	cmp	r4, #17
 80015aa:	d001      	beq.n	80015b0 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ac:	2c12      	cmp	r4, #18
 80015ae:	d112      	bne.n	80015d6 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 80015b0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b2:	005f      	lsls	r7, r3, #1
 80015b4:	2403      	movs	r4, #3
 80015b6:	40bc      	lsls	r4, r7
 80015b8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015bc:	68cc      	ldr	r4, [r1, #12]
 80015be:	40bc      	lsls	r4, r7
 80015c0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80015c2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80015c4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c6:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015ca:	684c      	ldr	r4, [r1, #4]
 80015cc:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80015d0:	409a      	lsls	r2, r3
 80015d2:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80015d4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80015d6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d8:	005f      	lsls	r7, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	40ba      	lsls	r2, r7
 80015de:	43d2      	mvns	r2, r2
 80015e0:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e2:	688d      	ldr	r5, [r1, #8]
 80015e4:	40bd      	lsls	r5, r7
 80015e6:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 80015e8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ea:	684c      	ldr	r4, [r1, #4]
 80015ec:	2c02      	cmp	r4, #2
 80015ee:	d001      	beq.n	80015f4 <HAL_GPIO_Init+0xe4>
 80015f0:	2c12      	cmp	r4, #18
 80015f2:	d113      	bne.n	800161c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 80015f4:	08dd      	lsrs	r5, r3, #3
 80015f6:	3508      	adds	r5, #8
 80015f8:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fc:	f003 0407 	and.w	r4, r3, #7
 8001600:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001604:	240f      	movs	r4, #15
 8001606:	fa04 f40c 	lsl.w	r4, r4, ip
 800160a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800160e:	690c      	ldr	r4, [r1, #16]
 8001610:	fa04 f40c 	lsl.w	r4, r4, ip
 8001614:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001618:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800161c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001620:	684c      	ldr	r4, [r1, #4]
 8001622:	f004 0403 	and.w	r4, r4, #3
 8001626:	40bc      	lsls	r4, r7
 8001628:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800162a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162c:	684a      	ldr	r2, [r1, #4]
 800162e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001632:	d0aa      	beq.n	800158a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001634:	2200      	movs	r2, #0
 8001636:	9201      	str	r2, [sp, #4]
 8001638:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <HAL_GPIO_Init+0x1c0>)
 800163a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800163c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001640:	6454      	str	r4, [r2, #68]	; 0x44
 8001642:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001644:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001648:	9201      	str	r2, [sp, #4]
 800164a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800164c:	089c      	lsrs	r4, r3, #2
 800164e:	1ca5      	adds	r5, r4, #2
 8001650:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <HAL_GPIO_Init+0x1b8>)
 8001652:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001656:	f003 0203 	and.w	r2, r3, #3
 800165a:	0095      	lsls	r5, r2, #2
 800165c:	220f      	movs	r2, #15
 800165e:	40aa      	lsls	r2, r5
 8001660:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001664:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <HAL_GPIO_Init+0x1c4>)
 8001666:	4290      	cmp	r0, r2
 8001668:	f43f af5b 	beq.w	8001522 <HAL_GPIO_Init+0x12>
 800166c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001670:	4290      	cmp	r0, r2
 8001672:	d01a      	beq.n	80016aa <HAL_GPIO_Init+0x19a>
 8001674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001678:	4290      	cmp	r0, r2
 800167a:	d018      	beq.n	80016ae <HAL_GPIO_Init+0x19e>
 800167c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001680:	4290      	cmp	r0, r2
 8001682:	d016      	beq.n	80016b2 <HAL_GPIO_Init+0x1a2>
 8001684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001688:	4290      	cmp	r0, r2
 800168a:	d014      	beq.n	80016b6 <HAL_GPIO_Init+0x1a6>
 800168c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001690:	4290      	cmp	r0, r2
 8001692:	d012      	beq.n	80016ba <HAL_GPIO_Init+0x1aa>
 8001694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001698:	4290      	cmp	r0, r2
 800169a:	d010      	beq.n	80016be <HAL_GPIO_Init+0x1ae>
 800169c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016a0:	4290      	cmp	r0, r2
 80016a2:	f43f af3c 	beq.w	800151e <HAL_GPIO_Init+0xe>
 80016a6:	2208      	movs	r2, #8
 80016a8:	e73c      	b.n	8001524 <HAL_GPIO_Init+0x14>
 80016aa:	2201      	movs	r2, #1
 80016ac:	e73a      	b.n	8001524 <HAL_GPIO_Init+0x14>
 80016ae:	2202      	movs	r2, #2
 80016b0:	e738      	b.n	8001524 <HAL_GPIO_Init+0x14>
 80016b2:	2203      	movs	r2, #3
 80016b4:	e736      	b.n	8001524 <HAL_GPIO_Init+0x14>
 80016b6:	2204      	movs	r2, #4
 80016b8:	e734      	b.n	8001524 <HAL_GPIO_Init+0x14>
 80016ba:	2205      	movs	r2, #5
 80016bc:	e732      	b.n	8001524 <HAL_GPIO_Init+0x14>
 80016be:	2206      	movs	r2, #6
 80016c0:	e730      	b.n	8001524 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80016c2:	b003      	add	sp, #12
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	4770      	bx	lr
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40013c00 	.word	0x40013c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000

080016d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	b912      	cbnz	r2, 80016e0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016da:	0409      	lsls	r1, r1, #16
 80016dc:	6181      	str	r1, [r0, #24]
  }
}
 80016de:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80016e0:	6181      	str	r1, [r0, #24]
 80016e2:	4770      	bx	lr

080016e4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e4:	2800      	cmp	r0, #0
 80016e6:	f000 80c8 	beq.w	800187a <HAL_I2C_Init+0x196>
{
 80016ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ec:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d075      	beq.n	80017e2 <HAL_I2C_Init+0xfe>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f6:	2324      	movs	r3, #36	; 0x24
 80016f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016fc:	6822      	ldr	r2, [r4, #0]
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001706:	6822      	ldr	r2, [r4, #0]
 8001708:	6813      	ldr	r3, [r2, #0]
 800170a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001710:	6822      	ldr	r2, [r4, #0]
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001718:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800171a:	f000 feb5 	bl	8002488 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171e:	6862      	ldr	r2, [r4, #4]
 8001720:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_I2C_Init+0x1a0>)
 8001722:	429a      	cmp	r2, r3
 8001724:	d862      	bhi.n	80017ec <HAL_I2C_Init+0x108>
 8001726:	4b58      	ldr	r3, [pc, #352]	; (8001888 <HAL_I2C_Init+0x1a4>)
 8001728:	4298      	cmp	r0, r3
 800172a:	bf8c      	ite	hi
 800172c:	2300      	movhi	r3, #0
 800172e:	2301      	movls	r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 80a4 	bne.w	800187e <HAL_I2C_Init+0x19a>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001736:	4b55      	ldr	r3, [pc, #340]	; (800188c <HAL_I2C_Init+0x1a8>)
 8001738:	fba3 2300 	umull	r2, r3, r3, r0
 800173c:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800173e:	6821      	ldr	r1, [r4, #0]
 8001740:	684a      	ldr	r2, [r1, #4]
 8001742:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001746:	431a      	orrs	r2, r3
 8001748:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800174a:	6825      	ldr	r5, [r4, #0]
 800174c:	6a2a      	ldr	r2, [r5, #32]
 800174e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001752:	6866      	ldr	r6, [r4, #4]
 8001754:	494b      	ldr	r1, [pc, #300]	; (8001884 <HAL_I2C_Init+0x1a0>)
 8001756:	428e      	cmp	r6, r1
 8001758:	d84e      	bhi.n	80017f8 <HAL_I2C_Init+0x114>
 800175a:	3301      	adds	r3, #1
 800175c:	4313      	orrs	r3, r2
 800175e:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001760:	6825      	ldr	r5, [r4, #0]
 8001762:	69e9      	ldr	r1, [r5, #28]
 8001764:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001768:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800176c:	6863      	ldr	r3, [r4, #4]
 800176e:	4a45      	ldr	r2, [pc, #276]	; (8001884 <HAL_I2C_Init+0x1a0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d84b      	bhi.n	800180c <HAL_I2C_Init+0x128>
 8001774:	3801      	subs	r0, #1
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fbb0 f3f3 	udiv	r3, r0, r3
 800177c:	3301      	adds	r3, #1
 800177e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf38      	it	cc
 8001786:	2304      	movcc	r3, #4
 8001788:	430b      	orrs	r3, r1
 800178a:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800178c:	6821      	ldr	r1, [r4, #0]
 800178e:	680b      	ldr	r3, [r1, #0]
 8001790:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001794:	69e2      	ldr	r2, [r4, #28]
 8001796:	6a20      	ldr	r0, [r4, #32]
 8001798:	4302      	orrs	r2, r0
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800179e:	6821      	ldr	r1, [r4, #0]
 80017a0:	688b      	ldr	r3, [r1, #8]
 80017a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017aa:	6922      	ldr	r2, [r4, #16]
 80017ac:	68e0      	ldr	r0, [r4, #12]
 80017ae:	4302      	orrs	r2, r0
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017b4:	6821      	ldr	r1, [r4, #0]
 80017b6:	68cb      	ldr	r3, [r1, #12]
 80017b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017bc:	6962      	ldr	r2, [r4, #20]
 80017be:	69a0      	ldr	r0, [r4, #24]
 80017c0:	4302      	orrs	r2, r0
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c6:	6822      	ldr	r2, [r4, #0]
 80017c8:	6813      	ldr	r3, [r2, #0]
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d0:	2000      	movs	r0, #0
 80017d2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	2320      	movs	r3, #32
 80017d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017da:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017dc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 80017e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80017e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80017e6:	f7ff f845 	bl	8000874 <HAL_I2C_MspInit>
 80017ea:	e784      	b.n	80016f6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <HAL_I2C_Init+0x1ac>)
 80017ee:	4298      	cmp	r0, r3
 80017f0:	bf8c      	ite	hi
 80017f2:	2300      	movhi	r3, #0
 80017f4:	2301      	movls	r3, #1
 80017f6:	e79b      	b.n	8001730 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017f8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4924      	ldr	r1, [pc, #144]	; (8001894 <HAL_I2C_Init+0x1b0>)
 8001802:	fba1 1303 	umull	r1, r3, r1, r3
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	3301      	adds	r3, #1
 800180a:	e7a7      	b.n	800175c <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800180c:	68a2      	ldr	r2, [r4, #8]
 800180e:	b9ba      	cbnz	r2, 8001840 <HAL_I2C_Init+0x15c>
 8001810:	1e46      	subs	r6, r0, #1
 8001812:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001816:	fbb6 f6f7 	udiv	r6, r6, r7
 800181a:	3601      	adds	r6, #1
 800181c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001820:	fab6 f686 	clz	r6, r6
 8001824:	0976      	lsrs	r6, r6, #5
 8001826:	bb36      	cbnz	r6, 8001876 <HAL_I2C_Init+0x192>
 8001828:	b9c2      	cbnz	r2, 800185c <HAL_I2C_Init+0x178>
 800182a:	3801      	subs	r0, #1
 800182c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001830:	fbb0 f3f3 	udiv	r3, r0, r3
 8001834:	3301      	adds	r3, #1
 8001836:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800183a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800183e:	e7a3      	b.n	8001788 <HAL_I2C_Init+0xa4>
 8001840:	1e46      	subs	r6, r0, #1
 8001842:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001846:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800184a:	fbb6 f6f7 	udiv	r6, r6, r7
 800184e:	3601      	adds	r6, #1
 8001850:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001854:	fab6 f686 	clz	r6, r6
 8001858:	0976      	lsrs	r6, r6, #5
 800185a:	e7e4      	b.n	8001826 <HAL_I2C_Init+0x142>
 800185c:	3801      	subs	r0, #1
 800185e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001862:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001866:	fbb0 f2f3 	udiv	r2, r0, r3
 800186a:	3201      	adds	r2, #1
 800186c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001870:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001874:	e788      	b.n	8001788 <HAL_I2C_Init+0xa4>
 8001876:	2301      	movs	r3, #1
 8001878:	e786      	b.n	8001788 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 800187a:	2001      	movs	r0, #1
}
 800187c:	4770      	bx	lr
    return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
 8001880:	e7ae      	b.n	80017e0 <HAL_I2C_Init+0xfc>
 8001882:	bf00      	nop
 8001884:	000186a0 	.word	0x000186a0
 8001888:	001e847f 	.word	0x001e847f
 800188c:	431bde83 	.word	0x431bde83
 8001890:	003d08ff 	.word	0x003d08ff
 8001894:	10624dd3 	.word	0x10624dd3

08001898 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001898:	2800      	cmp	r0, #0
 800189a:	f000 80bf 	beq.w	8001a1c <HAL_I2S_Init+0x184>
{
 800189e:	b570      	push	{r4, r5, r6, lr}
 80018a0:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d051      	beq.n	800194e <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018aa:	2202      	movs	r2, #2
 80018ac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018b0:	6821      	ldr	r1, [r4, #0]
 80018b2:	69cb      	ldr	r3, [r1, #28]
 80018b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018b8:	f023 030f 	bic.w	r3, r3, #15
 80018bc:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018c2:	6963      	ldr	r3, [r4, #20]
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d063      	beq.n	8001990 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018c8:	68e3      	ldr	r3, [r4, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d146      	bne.n	800195c <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018ce:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018d0:	68a3      	ldr	r3, [r4, #8]
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d800      	bhi.n	80018d8 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80018d6:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018d8:	2001      	movs	r0, #1
 80018da:	f000 fe8f 	bl	80025fc <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018de:	6923      	ldr	r3, [r4, #16]
 80018e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e4:	d03c      	beq.n	8001960 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018e6:	fbb0 f0f5 	udiv	r0, r0, r5
 80018ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018ee:	0043      	lsls	r3, r0, #1
 80018f0:	6962      	ldr	r2, [r4, #20]
 80018f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018f6:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018f8:	4a49      	ldr	r2, [pc, #292]	; (8001a20 <HAL_I2S_Init+0x188>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001900:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001908:	0212      	lsls	r2, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800190a:	1e99      	subs	r1, r3, #2
 800190c:	29fd      	cmp	r1, #253	; 0xfd
 800190e:	d841      	bhi.n	8001994 <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001910:	6921      	ldr	r1, [r4, #16]
 8001912:	430a      	orrs	r2, r1
 8001914:	6821      	ldr	r1, [r4, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800191a:	6821      	ldr	r1, [r4, #0]
 800191c:	69cb      	ldr	r3, [r1, #28]
 800191e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001922:	f023 030f 	bic.w	r3, r3, #15
 8001926:	6862      	ldr	r2, [r4, #4]
 8001928:	68a0      	ldr	r0, [r4, #8]
 800192a:	4302      	orrs	r2, r0
 800192c:	68e0      	ldr	r0, [r4, #12]
 800192e:	4302      	orrs	r2, r0
 8001930:	69a0      	ldr	r0, [r4, #24]
 8001932:	4302      	orrs	r2, r0
 8001934:	4313      	orrs	r3, r2
 8001936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800193a:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800193c:	6a23      	ldr	r3, [r4, #32]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d02e      	beq.n	80019a0 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001942:	2000      	movs	r0, #0
 8001944:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001946:	2301      	movs	r3, #1
 8001948:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 800194c:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 800194e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_I2S_Init+0x18c>)
 8001954:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8001956:	f7fe ffc7 	bl	80008e8 <HAL_I2S_MspInit>
 800195a:	e7a6      	b.n	80018aa <HAL_I2S_Init+0x12>
      packetlength = 32U;
 800195c:	2520      	movs	r5, #32
 800195e:	e7b7      	b.n	80018d0 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001960:	68e3      	ldr	r3, [r4, #12]
 8001962:	b153      	cbz	r3, 800197a <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001964:	00ad      	lsls	r5, r5, #2
 8001966:	fbb0 f0f5 	udiv	r0, r0, r5
 800196a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800196e:	0043      	lsls	r3, r0, #1
 8001970:	6962      	ldr	r2, [r4, #20]
 8001972:	fbb3 f3f2 	udiv	r3, r3, r2
 8001976:	3305      	adds	r3, #5
 8001978:	e7be      	b.n	80018f8 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800197a:	00ed      	lsls	r5, r5, #3
 800197c:	fbb0 f0f5 	udiv	r0, r0, r5
 8001980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001984:	0043      	lsls	r3, r0, #1
 8001986:	6962      	ldr	r2, [r4, #20]
 8001988:	fbb3 f3f2 	udiv	r3, r3, r2
 800198c:	3305      	adds	r3, #5
 800198e:	e7b3      	b.n	80018f8 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8001990:	2200      	movs	r2, #0
 8001992:	e7ba      	b.n	800190a <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001994:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 800199c:	2001      	movs	r0, #1
 800199e:	e7d5      	b.n	800194c <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_I2S_Init+0x190>)
 80019a2:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_I2S_Init+0x194>)
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d01f      	beq.n	80019ec <HAL_I2S_Init+0x154>
 80019ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019b0:	69d3      	ldr	r3, [r2, #28]
 80019b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019b6:	f023 030f 	bic.w	r3, r3, #15
 80019ba:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80019bc:	6822      	ldr	r2, [r4, #0]
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_I2S_Init+0x194>)
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d015      	beq.n	80019f0 <HAL_I2S_Init+0x158>
 80019c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019c8:	2202      	movs	r2, #2
 80019ca:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80019cc:	6822      	ldr	r2, [r4, #0]
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_I2S_Init+0x194>)
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d010      	beq.n	80019f6 <HAL_I2S_Init+0x15e>
 80019d4:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 80019d8:	69ca      	ldr	r2, [r1, #28]
 80019da:	b292      	uxth	r2, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019dc:	6863      	ldr	r3, [r4, #4]
 80019de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e2:	d00a      	beq.n	80019fa <HAL_I2S_Init+0x162>
 80019e4:	b9c3      	cbnz	r3, 8001a18 <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 80019e6:	f44f 7680 	mov.w	r6, #256	; 0x100
 80019ea:	e008      	b.n	80019fe <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019ec:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_I2S_Init+0x198>)
 80019ee:	e7df      	b.n	80019b0 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80019f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80019f4:	e7e8      	b.n	80019c8 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80019f6:	490e      	ldr	r1, [pc, #56]	; (8001a30 <HAL_I2S_Init+0x198>)
 80019f8:	e7ee      	b.n	80019d8 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 80019fa:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80019fe:	68a0      	ldr	r0, [r4, #8]
 8001a00:	68e5      	ldr	r5, [r4, #12]
                                    (uint16_t)hi2s->Init.CPOL))));
 8001a02:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001a04:	432b      	orrs	r3, r5
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4303      	orrs	r3, r0
 8001a0a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001a0c:	4333      	orrs	r3, r6
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001a14:	61cb      	str	r3, [r1, #28]
 8001a16:	e794      	b.n	8001942 <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8001a18:	2600      	movs	r6, #0
 8001a1a:	e7f0      	b.n	80019fe <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
}
 8001a1e:	4770      	bx	lr
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	08001aa7 	.word	0x08001aa7
 8001a28:	08001cb1 	.word	0x08001cb1
 8001a2c:	40003800 	.word	0x40003800
 8001a30:	40003400 	.word	0x40003400

08001a34 <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a34:	4770      	bx	lr

08001a36 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a36:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a38:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001a3a:	6803      	ldr	r3, [r0, #0]
 8001a3c:	8812      	ldrh	r2, [r2, #0]
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a42:	3302      	adds	r3, #2
 8001a44:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a46:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a4e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b103      	cbz	r3, 8001a56 <I2S_Transmit_IT+0x20>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a54:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a56:	6802      	ldr	r2, [r0, #0]
 8001a58:	6853      	ldr	r3, [r2, #4]
 8001a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a5e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001a66:	f7ff ffe5 	bl	8001a34 <HAL_I2S_TxCpltCallback>
}
 8001a6a:	e7f3      	b.n	8001a54 <I2S_Transmit_IT+0x1e>

08001a6c <HAL_I2S_RxCpltCallback>:
}
 8001a6c:	4770      	bx	lr

08001a6e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a6e:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a70:	6803      	ldr	r3, [r0, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a76:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001a78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001a7e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001a86:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b103      	cbz	r3, 8001a8e <I2S_Receive_IT+0x20>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a8c:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a8e:	6802      	ldr	r2, [r0, #0]
 8001a90:	6853      	ldr	r3, [r2, #4]
 8001a92:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001a96:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001a9e:	f7ff ffe5 	bl	8001a6c <HAL_I2S_RxCpltCallback>
}
 8001aa2:	e7f3      	b.n	8001a8c <I2S_Receive_IT+0x1e>

08001aa4 <HAL_I2S_ErrorCallback>:
}
 8001aa4:	4770      	bx	lr

08001aa6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001aac:	6802      	ldr	r2, [r0, #0]
 8001aae:	6893      	ldr	r3, [r2, #8]
 8001ab0:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ab2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d006      	beq.n	8001aca <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001abc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d02c      	beq.n	8001b20 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001aca:	9b03      	ldr	r3, [sp, #12]
 8001acc:	f013 0f01 	tst.w	r3, #1
 8001ad0:	d003      	beq.n	8001ada <I2S_IRQHandler+0x34>
 8001ad2:	6853      	ldr	r3, [r2, #4]
 8001ad4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ad8:	d11f      	bne.n	8001b1a <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ada:	9b03      	ldr	r3, [sp, #12]
 8001adc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ae0:	d0ec      	beq.n	8001abc <I2S_IRQHandler+0x16>
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	f012 0f20 	tst.w	r2, #32
 8001aea:	d0e7      	beq.n	8001abc <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001af2:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001af4:	2300      	movs	r3, #0
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff ffc6 	bl	8001aa4 <HAL_I2S_ErrorCallback>
 8001b18:	e7d0      	b.n	8001abc <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8001b1a:	f7ff ffa8 	bl	8001a6e <I2S_Receive_IT>
 8001b1e:	e7dc      	b.n	8001ada <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b20:	9b03      	ldr	r3, [sp, #12]
 8001b22:	f013 0f02 	tst.w	r3, #2
 8001b26:	d004      	beq.n	8001b32 <I2S_IRQHandler+0x8c>
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b30:	d11d      	bne.n	8001b6e <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b32:	9b03      	ldr	r3, [sp, #12]
 8001b34:	f013 0f08 	tst.w	r3, #8
 8001b38:	d0c5      	beq.n	8001ac6 <I2S_IRQHandler+0x20>
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	f012 0f20 	tst.w	r2, #32
 8001b42:	d0c0      	beq.n	8001ac6 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b4a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff ff9c 	bl	8001aa4 <HAL_I2S_ErrorCallback>
}
 8001b6c:	e7ab      	b.n	8001ac6 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff ff61 	bl	8001a36 <I2S_Transmit_IT>
 8001b74:	e7dd      	b.n	8001b32 <I2S_IRQHandler+0x8c>

08001b76 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001b76:	4770      	bx	lr

08001b78 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001b78:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001b7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b7c:	1c9a      	adds	r2, r3, #2
 8001b7e:	6242      	str	r2, [r0, #36]	; 0x24
 8001b80:	6802      	ldr	r2, [r0, #0]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001b86:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b8e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b93b      	cbnz	r3, 8001ba4 <I2SEx_TxISR_I2S+0x2c>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b94:	6802      	ldr	r2, [r0, #0]
 8001b96:	6853      	ldr	r3, [r2, #4]
 8001b98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b9c:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001b9e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	b103      	cbz	r3, 8001ba6 <I2SEx_TxISR_I2S+0x2e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ba4:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001bac:	f7ff ffe3 	bl	8001b76 <HAL_I2SEx_TxRxCpltCallback>
}
 8001bb0:	e7f8      	b.n	8001ba4 <I2SEx_TxISR_I2S+0x2c>
	...

08001bb4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001bb4:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001bb6:	6802      	ldr	r2, [r0, #0]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <I2SEx_RxISR_I2SExt+0x58>)
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d01b      	beq.n	8001bf6 <I2SEx_RxISR_I2SExt+0x42>
 8001bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bc6:	1c99      	adds	r1, r3, #2
 8001bc8:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001bca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001bcc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001bd4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b963      	cbnz	r3, 8001bf4 <I2SEx_RxISR_I2SExt+0x40>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bda:	6802      	ldr	r2, [r0, #0]
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <I2SEx_RxISR_I2SExt+0x58>)
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d00c      	beq.n	8001bfc <I2SEx_RxISR_I2SExt+0x48>
 8001be2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001be6:	6853      	ldr	r3, [r2, #4]
 8001be8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001bec:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8001bee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b12b      	cbz	r3, 8001c00 <I2SEx_RxISR_I2SExt+0x4c>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bf4:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001bf6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001bfa:	e7e2      	b.n	8001bc2 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <I2SEx_RxISR_I2SExt+0x5c>)
 8001bfe:	e7f2      	b.n	8001be6 <I2SEx_RxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c06:	f7ff ffb6 	bl	8001b76 <HAL_I2SEx_TxRxCpltCallback>
}
 8001c0a:	e7f3      	b.n	8001bf4 <I2SEx_RxISR_I2SExt+0x40>
 8001c0c:	40003800 	.word	0x40003800
 8001c10:	40003400 	.word	0x40003400

08001c14 <I2SEx_TxISR_I2SExt>:
{
 8001c14:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c16:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c18:	1c9a      	adds	r2, r3, #2
 8001c1a:	6242      	str	r2, [r0, #36]	; 0x24
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	6801      	ldr	r1, [r0, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <I2SEx_TxISR_I2SExt+0x58>)
 8001c22:	4299      	cmp	r1, r3
 8001c24:	d017      	beq.n	8001c56 <I2SEx_TxISR_I2SExt+0x42>
 8001c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c2a:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001c2c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001c34:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b963      	cbnz	r3, 8001c54 <I2SEx_TxISR_I2SExt+0x40>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c3a:	6802      	ldr	r2, [r0, #0]
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <I2SEx_TxISR_I2SExt+0x58>)
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d00c      	beq.n	8001c5c <I2SEx_TxISR_I2SExt+0x48>
 8001c42:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c46:	6853      	ldr	r3, [r2, #4]
 8001c48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c4c:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8001c4e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	b12b      	cbz	r3, 8001c60 <I2SEx_TxISR_I2SExt+0x4c>
}
 8001c54:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c56:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001c5a:	e7e6      	b.n	8001c2a <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <I2SEx_TxISR_I2SExt+0x5c>)
 8001c5e:	e7f2      	b.n	8001c46 <I2SEx_TxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c66:	f7ff ff86 	bl	8001b76 <HAL_I2SEx_TxRxCpltCallback>
}
 8001c6a:	e7f3      	b.n	8001c54 <I2SEx_TxISR_I2SExt+0x40>
 8001c6c:	40003800 	.word	0x40003800
 8001c70:	40003400 	.word	0x40003400

08001c74 <I2SEx_RxISR_I2S>:
{
 8001c74:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001c76:	6803      	ldr	r3, [r0, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c7c:	1c99      	adds	r1, r3, #2
 8001c7e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001c80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001c82:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001c8a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	b93b      	cbnz	r3, 8001ca0 <I2SEx_RxISR_I2S+0x2c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c90:	6802      	ldr	r2, [r0, #0]
 8001c92:	6853      	ldr	r3, [r2, #4]
 8001c94:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c98:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001c9a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b103      	cbz	r3, 8001ca2 <I2SEx_RxISR_I2S+0x2e>
}
 8001ca0:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ca8:	f7ff ff65 	bl	8001b76 <HAL_I2SEx_TxRxCpltCallback>
}
 8001cac:	e7f8      	b.n	8001ca0 <I2SEx_RxISR_I2S+0x2c>
	...

08001cb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001cb6:	6803      	ldr	r3, [r0, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001cbc:	4a70      	ldr	r2, [pc, #448]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d06f      	beq.n	8001da2 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8001cc2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cc6:	6891      	ldr	r1, [r2, #8]
 8001cc8:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001cce:	6853      	ldr	r3, [r2, #4]
 8001cd0:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd8:	d001      	beq.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d170      	bne.n	8001dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001cde:	9b05      	ldr	r3, [sp, #20]
 8001ce0:	f013 0f02 	tst.w	r3, #2
 8001ce4:	d003      	beq.n	8001cee <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8001ce6:	9b03      	ldr	r3, [sp, #12]
 8001ce8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cec:	d15c      	bne.n	8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001cee:	9b04      	ldr	r3, [sp, #16]
 8001cf0:	f013 0f01 	tst.w	r3, #1
 8001cf4:	d003      	beq.n	8001cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8001cf6:	9b02      	ldr	r3, [sp, #8]
 8001cf8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cfc:	d158      	bne.n	8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cfe:	9b04      	ldr	r3, [sp, #16]
 8001d00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d04:	d024      	beq.n	8001d50 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 8001d06:	9b02      	ldr	r3, [sp, #8]
 8001d08:	f013 0f20 	tst.w	r3, #32
 8001d0c:	d020      	beq.n	8001d50 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d050      	beq.n	8001db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8001d16:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d1a:	6853      	ldr	r3, [r2, #4]
 8001d1c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001d20:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	6853      	ldr	r3, [r2, #4]
 8001d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d2a:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	9200      	str	r2, [sp, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7ff feaa 	bl	8001aa4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d50:	9b05      	ldr	r3, [sp, #20]
 8001d52:	f013 0f08 	tst.w	r3, #8
 8001d56:	d022      	beq.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001d58:	9b03      	ldr	r3, [sp, #12]
 8001d5a:	f013 0f20 	tst.w	r3, #32
 8001d5e:	d01e      	beq.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	6853      	ldr	r3, [r2, #4]
 8001d64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d68:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d6a:	6822      	ldr	r2, [r4, #0]
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d024      	beq.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d72:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d76:	6853      	ldr	r3, [r2, #4]
 8001d78:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001d7c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff fe83 	bl	8001aa4 <HAL_I2S_ErrorCallback>
}
 8001d9e:	b006      	add	sp, #24
 8001da0:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001da2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001da6:	e78e      	b.n	8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fee5 	bl	8001b78 <I2SEx_TxISR_I2S>
 8001dae:	e79e      	b.n	8001cee <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff feff 	bl	8001bb4 <I2SEx_RxISR_I2SExt>
 8001db6:	e7a2      	b.n	8001cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001db8:	4a32      	ldr	r2, [pc, #200]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001dba:	e7ae      	b.n	8001d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dbc:	4a31      	ldr	r2, [pc, #196]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001dbe:	e7da      	b.n	8001d76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001dc0:	9b04      	ldr	r3, [sp, #16]
 8001dc2:	f013 0f02 	tst.w	r3, #2
 8001dc6:	d003      	beq.n	8001dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8001dc8:	9b02      	ldr	r3, [sp, #8]
 8001dca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001dce:	d14a      	bne.n	8001e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001dd0:	9b05      	ldr	r3, [sp, #20]
 8001dd2:	f013 0f01 	tst.w	r3, #1
 8001dd6:	d003      	beq.n	8001de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001dd8:	9b03      	ldr	r3, [sp, #12]
 8001dda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001dde:	d146      	bne.n	8001e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001de0:	9b05      	ldr	r3, [sp, #20]
 8001de2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001de6:	d01c      	beq.n	8001e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8001de8:	9b03      	ldr	r3, [sp, #12]
 8001dea:	f013 0f20 	tst.w	r3, #32
 8001dee:	d018      	beq.n	8001e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	6853      	ldr	r3, [r2, #4]
 8001df4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001df8:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dfa:	6822      	ldr	r2, [r4, #0]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d039      	beq.n	8001e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8001e02:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e06:	6853      	ldr	r3, [r2, #4]
 8001e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e0c:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7ff fe41 	bl	8001aa4 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e22:	9b04      	ldr	r3, [sp, #16]
 8001e24:	f013 0f08 	tst.w	r3, #8
 8001e28:	d0b9      	beq.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001e2a:	9b02      	ldr	r3, [sp, #8]
 8001e2c:	f013 0f20 	tst.w	r3, #32
 8001e30:	d0b5      	beq.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d01f      	beq.n	8001e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001e3a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e3e:	6853      	ldr	r3, [r2, #4]
 8001e40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e44:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	6853      	ldr	r3, [r2, #4]
 8001e4a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e4e:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff fe20 	bl	8001aa4 <HAL_I2S_ErrorCallback>
}
 8001e64:	e79b      	b.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7ff fed4 	bl	8001c14 <I2SEx_TxISR_I2SExt>
 8001e6c:	e7b0      	b.n	8001dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f7ff ff00 	bl	8001c74 <I2SEx_RxISR_I2S>
 8001e74:	e7b4      	b.n	8001de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e76:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001e78:	e7c5      	b.n	8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e7a:	4a02      	ldr	r2, [pc, #8]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001e7c:	e7df      	b.n	8001e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001e7e:	bf00      	nop
 8001e80:	40003800 	.word	0x40003800
 8001e84:	40003400 	.word	0x40003400

08001e88 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	f000 81e4 	beq.w	8002256 <HAL_RCC_OscConfig+0x3ce>
{
 8001e8e:	b570      	push	{r4, r5, r6, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e94:	6803      	ldr	r3, [r0, #0]
 8001e96:	f013 0f01 	tst.w	r3, #1
 8001e9a:	d03b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9c:	4ba7      	ldr	r3, [pc, #668]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d02c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea8:	4ba4      	ldr	r3, [pc, #656]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d021      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb4:	6863      	ldr	r3, [r4, #4]
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d04f      	beq.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec0:	d052      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe0>
 8001ec2:	4b9e      	ldr	r3, [pc, #632]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed4:	6863      	ldr	r3, [r4, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d050      	beq.n	8001f7c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7fe fdf5 	bl	8000ac8 <HAL_GetTick>
 8001ede:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee0:	4b96      	ldr	r3, [pc, #600]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ee8:	d114      	bne.n	8001f14 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eea:	f7fe fded 	bl	8000ac8 <HAL_GetTick>
 8001eee:	1b40      	subs	r0, r0, r5
 8001ef0:	2864      	cmp	r0, #100	; 0x64
 8001ef2:	d9f5      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	e1b3      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef8:	4b90      	ldr	r3, [pc, #576]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f00:	d0d8      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b8e      	ldr	r3, [pc, #568]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f0a:	d003      	beq.n	8001f14 <HAL_RCC_OscConfig+0x8c>
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 81a3 	beq.w	800225a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	f013 0f02 	tst.w	r3, #2
 8001f1a:	d055      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1c:	4b87      	ldr	r3, [pc, #540]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f013 0f0c 	tst.w	r3, #12
 8001f24:	d03e      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b85      	ldr	r3, [pc, #532]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d033      	beq.n	8001f9a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f32:	68e3      	ldr	r3, [r4, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d068      	beq.n	800200a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b81      	ldr	r3, [pc, #516]	; (8002140 <HAL_RCC_OscConfig+0x2b8>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fdc3 	bl	8000ac8 <HAL_GetTick>
 8001f42:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	4b7d      	ldr	r3, [pc, #500]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f013 0f02 	tst.w	r3, #2
 8001f4c:	d154      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7fe fdbb 	bl	8000ac8 <HAL_GetTick>
 8001f52:	1b40      	subs	r0, r0, r5
 8001f54:	2802      	cmp	r0, #2
 8001f56:	d9f5      	bls.n	8001f44 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001f58:	2003      	movs	r0, #3
 8001f5a:	e181      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	4a77      	ldr	r2, [pc, #476]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001f5e:	6813      	ldr	r3, [r2, #0]
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e7b5      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4c>
 8001f68:	4b74      	ldr	r3, [pc, #464]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e7ab      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fda4 	bl	8000ac8 <HAL_GetTick>
 8001f80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b6e      	ldr	r3, [pc, #440]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f8a:	d0c3      	beq.n	8001f14 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe fd9c 	bl	8000ac8 <HAL_GetTick>
 8001f90:	1b40      	subs	r0, r0, r5
 8001f92:	2864      	cmp	r0, #100	; 0x64
 8001f94:	d9f5      	bls.n	8001f82 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001f96:	2003      	movs	r0, #3
 8001f98:	e162      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001fa2:	d1c6      	bne.n	8001f32 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa4:	4b65      	ldr	r3, [pc, #404]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f013 0f02 	tst.w	r3, #2
 8001fac:	d004      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x130>
 8001fae:	68e3      	ldr	r3, [r4, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	e153      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4a60      	ldr	r2, [pc, #384]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fc0:	6921      	ldr	r1, [r4, #16]
 8001fc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fc6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	f013 0f08 	tst.w	r3, #8
 8001fce:	d040      	beq.n	8002052 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fd0:	6963      	ldr	r3, [r4, #20]
 8001fd2:	b363      	cbz	r3, 800202e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <HAL_RCC_OscConfig+0x2bc>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7fe fd75 	bl	8000ac8 <HAL_GetTick>
 8001fde:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe0:	4b56      	ldr	r3, [pc, #344]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f013 0f02 	tst.w	r3, #2
 8001fe8:	d133      	bne.n	8002052 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7fe fd6d 	bl	8000ac8 <HAL_GetTick>
 8001fee:	1b40      	subs	r0, r0, r5
 8001ff0:	2802      	cmp	r0, #2
 8001ff2:	d9f5      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	e133      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4a50      	ldr	r2, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002000:	6921      	ldr	r1, [r4, #16]
 8002002:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e7de      	b.n	8001fc8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_RCC_OscConfig+0x2b8>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002010:	f7fe fd5a 	bl	8000ac8 <HAL_GetTick>
 8002014:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f013 0f02 	tst.w	r3, #2
 800201e:	d0d3      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002020:	f7fe fd52 	bl	8000ac8 <HAL_GetTick>
 8002024:	1b40      	subs	r0, r0, r5
 8002026:	2802      	cmp	r0, #2
 8002028:	d9f5      	bls.n	8002016 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800202a:	2003      	movs	r0, #3
 800202c:	e118      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b45      	ldr	r3, [pc, #276]	; (8002144 <HAL_RCC_OscConfig+0x2bc>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7fe fd48 	bl	8000ac8 <HAL_GetTick>
 8002038:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203a:	4b40      	ldr	r3, [pc, #256]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	f013 0f02 	tst.w	r3, #2
 8002042:	d006      	beq.n	8002052 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fd40 	bl	8000ac8 <HAL_GetTick>
 8002048:	1b40      	subs	r0, r0, r5
 800204a:	2802      	cmp	r0, #2
 800204c:	d9f5      	bls.n	800203a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800204e:	2003      	movs	r0, #3
 8002050:	e106      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	f013 0f04 	tst.w	r3, #4
 8002058:	d079      	beq.n	800214e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b38      	ldr	r3, [pc, #224]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002062:	d133      	bne.n	80020cc <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 800206a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800207c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_RCC_OscConfig+0x2c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002086:	d023      	beq.n	80020d0 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	68a3      	ldr	r3, [r4, #8]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d034      	beq.n	80020f8 <HAL_RCC_OscConfig+0x270>
 800208e:	2b05      	cmp	r3, #5
 8002090:	d038      	beq.n	8002104 <HAL_RCC_OscConfig+0x27c>
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8002094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	671a      	str	r2, [r3, #112]	; 0x70
 800209c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800209e:	f022 0204 	bic.w	r2, r2, #4
 80020a2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a4:	68a3      	ldr	r3, [r4, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7fe fd0d 	bl	8000ac8 <HAL_GetTick>
 80020ae:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	f013 0f02 	tst.w	r3, #2
 80020b8:	d148      	bne.n	800214c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fd05 	bl	8000ac8 <HAL_GetTick>
 80020be:	1b80      	subs	r0, r0, r6
 80020c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c4:	4298      	cmp	r0, r3
 80020c6:	d9f3      	bls.n	80020b0 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80020c8:	2003      	movs	r0, #3
 80020ca:	e0c9      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 80020cc:	2500      	movs	r5, #0
 80020ce:	e7d6      	b.n	800207e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_RCC_OscConfig+0x2c0>)
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80020da:	f7fe fcf5 	bl	8000ac8 <HAL_GetTick>
 80020de:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_RCC_OscConfig+0x2c0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020e8:	d1ce      	bne.n	8002088 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ea:	f7fe fced 	bl	8000ac8 <HAL_GetTick>
 80020ee:	1b80      	subs	r0, r0, r6
 80020f0:	2802      	cmp	r0, #2
 80020f2:	d9f5      	bls.n	80020e0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e0b3      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 80020fa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	e7cf      	b.n	80020a4 <HAL_RCC_OscConfig+0x21c>
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8002106:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002108:	f042 0204 	orr.w	r2, r2, #4
 800210c:	671a      	str	r2, [r3, #112]	; 0x70
 800210e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	671a      	str	r2, [r3, #112]	; 0x70
 8002116:	e7c5      	b.n	80020a4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7fe fcd6 	bl	8000ac8 <HAL_GetTick>
 800211c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCC_OscConfig+0x2b4>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	f013 0f02 	tst.w	r3, #2
 8002126:	d011      	beq.n	800214c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fcce 	bl	8000ac8 <HAL_GetTick>
 800212c:	1b80      	subs	r0, r0, r6
 800212e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002132:	4298      	cmp	r0, r3
 8002134:	d9f3      	bls.n	800211e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002136:	2003      	movs	r0, #3
 8002138:	e092      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	42470000 	.word	0x42470000
 8002144:	42470e80 	.word	0x42470e80
 8002148:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214c:	b9ed      	cbnz	r5, 800218a <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214e:	69a3      	ldr	r3, [r4, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 8084 	beq.w	800225e <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002156:	4a45      	ldr	r2, [pc, #276]	; (800226c <HAL_RCC_OscConfig+0x3e4>)
 8002158:	6892      	ldr	r2, [r2, #8]
 800215a:	f002 020c 	and.w	r2, r2, #12
 800215e:	2a08      	cmp	r2, #8
 8002160:	d051      	beq.n	8002206 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002162:	2b02      	cmp	r3, #2
 8002164:	d017      	beq.n	8002196 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002166:	4b42      	ldr	r3, [pc, #264]	; (8002270 <HAL_RCC_OscConfig+0x3e8>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe fcac 	bl	8000ac8 <HAL_GetTick>
 8002170:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_RCC_OscConfig+0x3e4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800217a:	d042      	beq.n	8002202 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe fca4 	bl	8000ac8 <HAL_GetTick>
 8002180:	1b00      	subs	r0, r0, r4
 8002182:	2802      	cmp	r0, #2
 8002184:	d9f5      	bls.n	8002172 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002186:	2003      	movs	r0, #3
 8002188:	e06a      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4a38      	ldr	r2, [pc, #224]	; (800226c <HAL_RCC_OscConfig+0x3e4>)
 800218c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
 8002194:	e7db      	b.n	800214e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <HAL_RCC_OscConfig+0x3e8>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800219c:	f7fe fc94 	bl	8000ac8 <HAL_GetTick>
 80021a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_RCC_OscConfig+0x3e4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021aa:	d006      	beq.n	80021ba <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe fc8c 	bl	8000ac8 <HAL_GetTick>
 80021b0:	1b40      	subs	r0, r0, r5
 80021b2:	2802      	cmp	r0, #2
 80021b4:	d9f5      	bls.n	80021a2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
 80021b8:	e052      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ba:	69e3      	ldr	r3, [r4, #28]
 80021bc:	6a22      	ldr	r2, [r4, #32]
 80021be:	4313      	orrs	r3, r2
 80021c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021c2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80021c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021c8:	0852      	lsrs	r2, r2, #1
 80021ca:	3a01      	subs	r2, #1
 80021cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80021d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <HAL_RCC_OscConfig+0x3e4>)
 80021d8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_OscConfig+0x3e8>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021e0:	f7fe fc72 	bl	8000ac8 <HAL_GetTick>
 80021e4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_OscConfig+0x3e4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe fc6a 	bl	8000ac8 <HAL_GetTick>
 80021f4:	1b00      	subs	r0, r0, r4
 80021f6:	2802      	cmp	r0, #2
 80021f8:	d9f5      	bls.n	80021e6 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80021fa:	2003      	movs	r0, #3
 80021fc:	e030      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80021fe:	2000      	movs	r0, #0
 8002200:	e02e      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
 8002202:	2000      	movs	r0, #0
 8002204:	e02c      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002206:	2b01      	cmp	r3, #1
 8002208:	d02c      	beq.n	8002264 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x3e4>)
 800220c:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002212:	69e2      	ldr	r2, [r4, #28]
 8002214:	4291      	cmp	r1, r2
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8002218:	2001      	movs	r0, #1
 800221a:	e021      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800221c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002220:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	428a      	cmp	r2, r1
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8002226:	2001      	movs	r0, #1
 8002228:	e01a      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800222a:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002230:	401a      	ands	r2, r3
 8002232:	428a      	cmp	r2, r1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8002236:	2001      	movs	r0, #1
 8002238:	e012      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800223a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800223e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002240:	428a      	cmp	r2, r1
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8002244:	2001      	movs	r0, #1
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002248:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800224c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800224e:	4293      	cmp	r3, r2
 8002250:	d00a      	beq.n	8002268 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8002252:	2001      	movs	r0, #1
 8002254:	e004      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8002256:	2001      	movs	r0, #1
}
 8002258:	4770      	bx	lr
        return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 800225e:	2000      	movs	r0, #0
}
 8002260:	b002      	add	sp, #8
 8002262:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002264:	2001      	movs	r0, #1
 8002266:	e7fb      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8002268:	2000      	movs	r0, #0
 800226a:	e7f9      	b.n	8002260 <HAL_RCC_OscConfig+0x3d8>
 800226c:	40023800 	.word	0x40023800
 8002270:	42470060 	.word	0x42470060

08002274 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b04      	cmp	r3, #4
 800227e:	d044      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x96>
 8002280:	2b08      	cmp	r3, #8
 8002282:	d001      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002284:	4823      	ldr	r0, [pc, #140]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002286:	4770      	bx	lr
{
 8002288:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80022a4:	2300      	movs	r3, #0
 80022a6:	481c      	ldr	r0, [pc, #112]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a8:	fba1 0100 	umull	r0, r1, r1, r0
 80022ac:	f7fd ff8c 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022b8:	3301      	adds	r3, #1
 80022ba:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80022bc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80022c0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80022cc:	461e      	mov	r6, r3
 80022ce:	2700      	movs	r7, #0
 80022d0:	015c      	lsls	r4, r3, #5
 80022d2:	2500      	movs	r5, #0
 80022d4:	1ae4      	subs	r4, r4, r3
 80022d6:	eb65 0507 	sbc.w	r5, r5, r7
 80022da:	01a9      	lsls	r1, r5, #6
 80022dc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80022e0:	01a0      	lsls	r0, r4, #6
 80022e2:	1b00      	subs	r0, r0, r4
 80022e4:	eb61 0105 	sbc.w	r1, r1, r5
 80022e8:	00cb      	lsls	r3, r1, #3
 80022ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022ee:	00c4      	lsls	r4, r0, #3
 80022f0:	19a0      	adds	r0, r4, r6
 80022f2:	eb43 0107 	adc.w	r1, r3, r7
 80022f6:	028b      	lsls	r3, r1, #10
 80022f8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80022fc:	0284      	lsls	r4, r0, #10
 80022fe:	4620      	mov	r0, r4
 8002300:	4619      	mov	r1, r3
 8002302:	2300      	movs	r3, #0
 8002304:	f7fd ff60 	bl	80001c8 <__aeabi_uldivmod>
 8002308:	e7d2      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800230a:	4803      	ldr	r0, [pc, #12]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	00f42400 	.word	0x00f42400
 8002318:	017d7840 	.word	0x017d7840

0800231c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800231c:	2800      	cmp	r0, #0
 800231e:	f000 809e 	beq.w	800245e <HAL_RCC_ClockConfig+0x142>
{
 8002322:	b570      	push	{r4, r5, r6, lr}
 8002324:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002326:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCC_ClockConfig+0x14c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	428b      	cmp	r3, r1
 8002330:	d209      	bcs.n	8002346 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	b2cb      	uxtb	r3, r1
 8002334:	4a4c      	ldr	r2, [pc, #304]	; (8002468 <HAL_RCC_ClockConfig+0x14c>)
 8002336:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	428b      	cmp	r3, r1
 8002340:	d001      	beq.n	8002346 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8002342:	2001      	movs	r0, #1
}
 8002344:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f013 0f02 	tst.w	r3, #2
 800234c:	d017      	beq.n	800237e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234e:	f013 0f04 	tst.w	r3, #4
 8002352:	d004      	beq.n	800235e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 8002356:	6893      	ldr	r3, [r2, #8]
 8002358:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800235c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	f013 0f08 	tst.w	r3, #8
 8002364:	d004      	beq.n	8002370 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002366:	4a41      	ldr	r2, [pc, #260]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 8002368:	6893      	ldr	r3, [r2, #8]
 800236a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4a3e      	ldr	r2, [pc, #248]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 8002372:	6893      	ldr	r3, [r2, #8]
 8002374:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002378:	68a0      	ldr	r0, [r4, #8]
 800237a:	4303      	orrs	r3, r0
 800237c:	6093      	str	r3, [r2, #8]
 800237e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	f013 0f01 	tst.w	r3, #1
 8002386:	d032      	beq.n	80023ee <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002388:	6863      	ldr	r3, [r4, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d021      	beq.n	80023d2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	1e9a      	subs	r2, r3, #2
 8002390:	2a01      	cmp	r2, #1
 8002392:	d925      	bls.n	80023e0 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	4a35      	ldr	r2, [pc, #212]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f012 0f02 	tst.w	r2, #2
 800239c:	d061      	beq.n	8002462 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4933      	ldr	r1, [pc, #204]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 80023a0:	688a      	ldr	r2, [r1, #8]
 80023a2:	f022 0203 	bic.w	r2, r2, #3
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80023aa:	f7fe fb8d 	bl	8000ac8 <HAL_GetTick>
 80023ae:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b0:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	6862      	ldr	r2, [r4, #4]
 80023ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023be:	d016      	beq.n	80023ee <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe fb82 	bl	8000ac8 <HAL_GetTick>
 80023c4:	1b80      	subs	r0, r0, r6
 80023c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80023ca:	4298      	cmp	r0, r3
 80023cc:	d9f0      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80023ce:	2003      	movs	r0, #3
 80023d0:	e7b8      	b.n	8002344 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4a26      	ldr	r2, [pc, #152]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80023da:	d1e0      	bne.n	800239e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80023dc:	2001      	movs	r0, #1
 80023de:	e7b1      	b.n	8002344 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80023e8:	d1d9      	bne.n	800239e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80023ea:	2001      	movs	r0, #1
 80023ec:	e7aa      	b.n	8002344 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ee:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_RCC_ClockConfig+0x14c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	42ab      	cmp	r3, r5
 80023f8:	d909      	bls.n	800240e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	b2ea      	uxtb	r2, r5
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_RCC_ClockConfig+0x14c>)
 80023fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	42ab      	cmp	r3, r5
 8002408:	d001      	beq.n	800240e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800240a:	2001      	movs	r0, #1
 800240c:	e79a      	b.n	8002344 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	f013 0f04 	tst.w	r3, #4
 8002414:	d006      	beq.n	8002424 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 8002418:	6893      	ldr	r3, [r2, #8]
 800241a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800241e:	68e1      	ldr	r1, [r4, #12]
 8002420:	430b      	orrs	r3, r1
 8002422:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	f013 0f08 	tst.w	r3, #8
 800242a:	d007      	beq.n	800243c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 800242e:	6893      	ldr	r3, [r2, #8]
 8002430:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002434:	6921      	ldr	r1, [r4, #16]
 8002436:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800243a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243c:	f7ff ff1a 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x150>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002448:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x154>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	40d8      	lsrs	r0, r3
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x158>)
 8002450:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x15c>)
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	f7fe faeb 	bl	8000a30 <HAL_InitTick>
  return HAL_OK;
 800245a:	2000      	movs	r0, #0
 800245c:	e772      	b.n	8002344 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800245e:	2001      	movs	r0, #1
}
 8002460:	4770      	bx	lr
        return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
 8002464:	e76e      	b.n	8002344 <HAL_RCC_ClockConfig+0x28>
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00
 800246c:	40023800 	.word	0x40023800
 8002470:	080026e0 	.word	0x080026e0
 8002474:	20000000 	.word	0x20000000
 8002478:	20000008 	.word	0x20000008

0800247c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800247c:	4b01      	ldr	r3, [pc, #4]	; (8002484 <HAL_RCC_GetHCLKFreq+0x8>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002488:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800248a:	f7ff fff7 	bl	800247c <HAL_RCC_GetHCLKFreq>
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002496:	4a03      	ldr	r2, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
}
 800249a:	40d8      	lsrs	r0, r3
 800249c:	bd08      	pop	{r3, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	080026f0 	.word	0x080026f0

080024a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a8:	b530      	push	{r4, r5, lr}
 80024aa:	b083      	sub	sp, #12
 80024ac:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024ae:	6803      	ldr	r3, [r0, #0]
 80024b0:	f013 0f05 	tst.w	r3, #5
 80024b4:	d106      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	f013 0f02 	tst.w	r3, #2
 80024bc:	d12e      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80024be:	2000      	movs	r0, #0
}
 80024c0:	b003      	add	sp, #12
 80024c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80024c4:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80024ca:	f7fe fafd 	bl	8000ac8 <HAL_GetTick>
 80024ce:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024d0:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80024d8:	d006      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024da:	f7fe faf5 	bl	8000ac8 <HAL_GetTick>
 80024de:	1b40      	subs	r0, r0, r5
 80024e0:	2802      	cmp	r0, #2
 80024e2:	d9f5      	bls.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 80024e4:	2003      	movs	r0, #3
 80024e6:	e7eb      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80024e8:	6862      	ldr	r2, [r4, #4]
 80024ea:	68a3      	ldr	r3, [r4, #8]
 80024ec:	071b      	lsls	r3, r3, #28
 80024ee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024f2:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80024f8:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80024fe:	f7fe fae3 	bl	8000ac8 <HAL_GetTick>
 8002502:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002504:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800250c:	d1d3      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800250e:	f7fe fadb 	bl	8000ac8 <HAL_GetTick>
 8002512:	1b40      	subs	r0, r0, r5
 8002514:	2802      	cmp	r0, #2
 8002516:	d9f5      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002518:	2003      	movs	r0, #3
 800251a:	e7d1      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002534:	4a2f      	ldr	r2, [pc, #188]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002536:	6813      	ldr	r3, [r2, #0]
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800253e:	f7fe fac3 	bl	8000ac8 <HAL_GetTick>
 8002542:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f413 7f80 	tst.w	r3, #256	; 0x100
 800254c:	d106      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7fe fabb 	bl	8000ac8 <HAL_GetTick>
 8002552:	1b40      	subs	r0, r0, r5
 8002554:	2802      	cmp	r0, #2
 8002556:	d9f5      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002558:	2003      	movs	r0, #3
 800255a:	e7b1      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002560:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002564:	d012      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8002566:	68e2      	ldr	r2, [r4, #12]
 8002568:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800256c:	429a      	cmp	r2, r3
 800256e:	d00d      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002572:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002574:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002578:	491f      	ldr	r1, [pc, #124]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800257a:	2001      	movs	r0, #1
 800257c:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800257e:	2000      	movs	r0, #0
 8002580:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8002582:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	f013 0f01 	tst.w	r3, #1
 800258a:	d113      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258c:	68e3      	ldr	r3, [r4, #12]
 800258e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002592:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002596:	d01e      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800259a:	6893      	ldr	r3, [r2, #8]
 800259c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025a0:	6093      	str	r3, [r2, #8]
 80025a2:	4913      	ldr	r1, [pc, #76]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80025a4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80025a6:	68e2      	ldr	r2, [r4, #12]
 80025a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80025ac:	4313      	orrs	r3, r2
 80025ae:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 80025b0:	2000      	movs	r0, #0
 80025b2:	e785      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80025b4:	f7fe fa88 	bl	8000ac8 <HAL_GetTick>
 80025b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	f013 0f02 	tst.w	r3, #2
 80025c2:	d1e3      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fa80 	bl	8000ac8 <HAL_GetTick>
 80025c8:	1b40      	subs	r0, r0, r5
 80025ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80025ce:	4298      	cmp	r0, r3
 80025d0:	d9f3      	bls.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
 80025d4:	e774      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d6:	4906      	ldr	r1, [pc, #24]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80025d8:	688a      	ldr	r2, [r1, #8]
 80025da:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80025de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
 80025ea:	e7da      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80025ec:	42470068 	.word	0x42470068
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42470e40 	.word	0x42470e40

080025fc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80025fc:	2801      	cmp	r0, #1
 80025fe:	d12a      	bne.n	8002656 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002602:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8002604:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8002608:	d003      	beq.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 800260a:	2b01      	cmp	r3, #1
 800260c:	d125      	bne.n	800265a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800260e:	4815      	ldr	r0, [pc, #84]	; (8002664 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002610:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800261a:	d014      	beq.n	8002646 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002624:	4810      	ldr	r0, [pc, #64]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8002626:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800262a:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800262c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002630:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002634:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002638:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800263c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002640:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002644:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8002650:	fbb0 f0f3 	udiv	r0, r0, r3
 8002654:	e7e9      	b.n	800262a <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t frequency = 0U;
 8002656:	2000      	movs	r0, #0
 8002658:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800265a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	00bb8000 	.word	0x00bb8000
 8002668:	017d7840 	.word	0x017d7840
 800266c:	00f42400 	.word	0x00f42400

08002670 <__libc_init_array>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	4e0d      	ldr	r6, [pc, #52]	; (80026a8 <__libc_init_array+0x38>)
 8002674:	4c0d      	ldr	r4, [pc, #52]	; (80026ac <__libc_init_array+0x3c>)
 8002676:	1ba4      	subs	r4, r4, r6
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	2500      	movs	r5, #0
 800267c:	42a5      	cmp	r5, r4
 800267e:	d109      	bne.n	8002694 <__libc_init_array+0x24>
 8002680:	4e0b      	ldr	r6, [pc, #44]	; (80026b0 <__libc_init_array+0x40>)
 8002682:	4c0c      	ldr	r4, [pc, #48]	; (80026b4 <__libc_init_array+0x44>)
 8002684:	f000 f820 	bl	80026c8 <_init>
 8002688:	1ba4      	subs	r4, r4, r6
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	2500      	movs	r5, #0
 800268e:	42a5      	cmp	r5, r4
 8002690:	d105      	bne.n	800269e <__libc_init_array+0x2e>
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002698:	4798      	blx	r3
 800269a:	3501      	adds	r5, #1
 800269c:	e7ee      	b.n	800267c <__libc_init_array+0xc>
 800269e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026a2:	4798      	blx	r3
 80026a4:	3501      	adds	r5, #1
 80026a6:	e7f2      	b.n	800268e <__libc_init_array+0x1e>
 80026a8:	08002708 	.word	0x08002708
 80026ac:	08002708 	.word	0x08002708
 80026b0:	08002708 	.word	0x08002708
 80026b4:	0800270c 	.word	0x0800270c

080026b8 <memset>:
 80026b8:	4402      	add	r2, r0
 80026ba:	4603      	mov	r3, r0
 80026bc:	4293      	cmp	r3, r2
 80026be:	d100      	bne.n	80026c2 <memset+0xa>
 80026c0:	4770      	bx	lr
 80026c2:	f803 1b01 	strb.w	r1, [r3], #1
 80026c6:	e7f9      	b.n	80026bc <memset+0x4>

080026c8 <_init>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr

080026d4 <_fini>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr
