
TESTLEDSADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030bc  080030bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030c4  080030c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  080030d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080030d8  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f639  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000213f  00000000  00000000  0002f675  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008f6c  00000000  00000000  000317b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000bc8  00000000  00000000  0003a720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bb0  00000000  00000000  0003b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001fa92  00000000  00000000  0003be98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b08c  00000000  00000000  0005b92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c053f  00000000  00000000  000669b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00126ef5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002144  00000000  00000000  00126f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003070 	.word	0x08003070

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003070 	.word	0x08003070

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2400      	movs	r4, #0
 80004ce:	9405      	str	r4, [sp, #20]
 80004d0:	9406      	str	r4, [sp, #24]
 80004d2:	9407      	str	r4, [sp, #28]
 80004d4:	9408      	str	r4, [sp, #32]
 80004d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d8:	9401      	str	r4, [sp, #4]
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_GPIO_Init+0x88>)
 80004dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
 80004e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80004ea:	9201      	str	r2, [sp, #4]
 80004ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	9402      	str	r4, [sp, #8]
 80004f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f2:	f042 0204 	orr.w	r2, r2, #4
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fa:	f002 0204 	and.w	r2, r2, #4
 80004fe:	9202      	str	r2, [sp, #8]
 8000500:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	9403      	str	r4, [sp, #12]
 8000504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000506:	f042 0201 	orr.w	r2, r2, #1
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
 800050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050e:	f002 0201 	and.w	r2, r2, #1
 8000512:	9203      	str	r2, [sp, #12]
 8000514:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	9404      	str	r4, [sp, #16]
 8000518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051a:	f042 0202 	orr.w	r2, r2, #2
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	9304      	str	r3, [sp, #16]
 8000528:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 800052a:	4d0a      	ldr	r5, [pc, #40]	; (8000554 <MX_GPIO_Init+0x8c>)
 800052c:	4622      	mov	r2, r4
 800052e:	2114      	movs	r1, #20
 8000530:	4628      	mov	r0, r5
 8000532:	f001 f9af 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000536:	2314      	movs	r3, #20
 8000538:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	a905      	add	r1, sp, #20
 8000544:	4628      	mov	r0, r5
 8000546:	f001 f8c1 	bl	80016cc <HAL_GPIO_Init>

}
 800054a:	b00b      	add	sp, #44	; 0x2c
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000

08000558 <MX_DMA_Init>:
{
 8000558:	b510      	push	{r4, lr}
 800055a:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800055c:	2400      	movs	r4, #0
 800055e:	9400      	str	r4, [sp, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_DMA_Init+0x54>)
 8000562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000564:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
 800056a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800056c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000570:	9200      	str	r2, [sp, #0]
 8000572:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000574:	9401      	str	r4, [sp, #4]
 8000576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000578:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800057c:	631a      	str	r2, [r3, #48]	; 0x30
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000588:	4622      	mov	r2, r4
 800058a:	4621      	mov	r1, r4
 800058c:	200f      	movs	r0, #15
 800058e:	f000 fe3f 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000592:	200f      	movs	r0, #15
 8000594:	f000 fe70 	bl	8001278 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000598:	4622      	mov	r2, r4
 800059a:	4621      	mov	r1, r4
 800059c:	2038      	movs	r0, #56	; 0x38
 800059e:	f000 fe37 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005a2:	2038      	movs	r0, #56	; 0x38
 80005a4:	f000 fe68 	bl	8001278 <HAL_NVIC_EnableIRQ>
}
 80005a8:	b002      	add	sp, #8
 80005aa:	bd10      	pop	{r4, pc}
 80005ac:	40023800 	.word	0x40023800

080005b0 <MX_ADC1_Init>:
{
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80005b4:	2500      	movs	r5, #0
 80005b6:	9500      	str	r5, [sp, #0]
 80005b8:	9501      	str	r5, [sp, #4]
 80005ba:	9502      	str	r5, [sp, #8]
 80005bc:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 80005be:	4c1c      	ldr	r4, [pc, #112]	; (8000630 <MX_ADC1_Init+0x80>)
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_ADC1_Init+0x84>)
 80005c2:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80005c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005c8:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ca:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005cc:	2601      	movs	r6, #1
 80005ce:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d0:	7626      	strb	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_ADC1_Init+0x88>)
 80005da:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005dc:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005de:	2704      	movs	r7, #4
 80005e0:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005e2:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e6:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e8:	4620      	mov	r0, r4
 80005ea:	f000 fbff 	bl	8000dec <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_10;
 80005ee:	230a      	movs	r3, #10
 80005f0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80005f2:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f4:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	4669      	mov	r1, sp
 80005f8:	4620      	mov	r0, r4
 80005fa:	f000 fd2f 	bl	800105c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_11;
 80005fe:	230b      	movs	r3, #11
 8000600:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	4669      	mov	r1, sp
 8000608:	4620      	mov	r0, r4
 800060a:	f000 fd27 	bl	800105c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_12;
 800060e:	230c      	movs	r3, #12
 8000610:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000612:	2303      	movs	r3, #3
 8000614:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000616:	4669      	mov	r1, sp
 8000618:	4620      	mov	r0, r4
 800061a:	f000 fd1f 	bl	800105c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_13;
 800061e:	230d      	movs	r3, #13
 8000620:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8000622:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	4669      	mov	r1, sp
 8000626:	4620      	mov	r0, r4
 8000628:	f000 fd18 	bl	800105c <HAL_ADC_ConfigChannel>
}
 800062c:	b005      	add	sp, #20
 800062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000630:	20000088 	.word	0x20000088
 8000634:	40012000 	.word	0x40012000
 8000638:	0f000001 	.word	0x0f000001

0800063c <MX_I2C2_Init>:
{
 800063c:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <MX_I2C2_Init+0x28>)
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C2_Init+0x2c>)
 8000642:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C2_Init+0x30>)
 8000646:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000648:	2300      	movs	r3, #0
 800064a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800064c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000656:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800065c:	f001 fa76 	bl	8001b4c <HAL_I2C_Init>
}
 8000660:	bd08      	pop	{r3, pc}
 8000662:	bf00      	nop
 8000664:	2000002c 	.word	0x2000002c
 8000668:	40005800 	.word	0x40005800
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_I2S2_Init>:
{
 8000670:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 8000672:	480a      	ldr	r0, [pc, #40]	; (800069c <MX_I2S2_Init+0x2c>)
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2S2_Init+0x30>)
 8000676:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	6042      	str	r2, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	2300      	movs	r3, #0
 8000680:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000682:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000684:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000686:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800068a:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800068c:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000690:	2301      	movs	r3, #1
 8000692:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000694:	f001 fbee 	bl	8001e74 <HAL_I2S_Init>
}
 8000698:	bd08      	pop	{r3, pc}
 800069a:	bf00      	nop
 800069c:	200001d4 	.word	0x200001d4
 80006a0:	40003800 	.word	0x40003800

080006a4 <MX_USART1_UART_Init>:
{
 80006a4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <MX_USART1_UART_Init+0x24>)
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART1_UART_Init+0x28>)
 80006aa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80006ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006b0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	2300      	movs	r3, #0
 80006b4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ba:	220c      	movs	r2, #12
 80006bc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c2:	f002 fc79 	bl	8002fb8 <HAL_UART_Init>
}
 80006c6:	bd08      	pop	{r3, pc}
 80006c8:	200000d4 	.word	0x200000d4
 80006cc:	40011000 	.word	0x40011000

080006d0 <SystemClock_Config>:
{
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d4:	2230      	movs	r2, #48	; 0x30
 80006d6:	2100      	movs	r1, #0
 80006d8:	eb0d 0002 	add.w	r0, sp, r2
 80006dc:	f002 fcc0 	bl	8003060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	2400      	movs	r4, #0
 80006e2:	9407      	str	r4, [sp, #28]
 80006e4:	9408      	str	r4, [sp, #32]
 80006e6:	9409      	str	r4, [sp, #36]	; 0x24
 80006e8:	940a      	str	r4, [sp, #40]	; 0x28
 80006ea:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ec:	9403      	str	r4, [sp, #12]
 80006ee:	9404      	str	r4, [sp, #16]
 80006f0:	9405      	str	r4, [sp, #20]
 80006f2:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	9401      	str	r4, [sp, #4]
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xa4>)
 80006f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070a:	9402      	str	r4, [sp, #8]
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <SystemClock_Config+0xa8>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	9302      	str	r3, [sp, #8]
 800071e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2502      	movs	r5, #2
 8000722:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2601      	movs	r6, #1
 8000726:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072e:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800073a:	2304      	movs	r3, #4
 800073c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	a80c      	add	r0, sp, #48	; 0x30
 8000740:	f001 ff2a 	bl	8002598 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000750:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000758:	2105      	movs	r1, #5
 800075a:	a807      	add	r0, sp, #28
 800075c:	f002 f966 	bl	8002a2c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000760:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000762:	2332      	movs	r3, #50	; 0x32
 8000764:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000766:	9505      	str	r5, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000768:	a803      	add	r0, sp, #12
 800076a:	f002 fa35 	bl	8002bd8 <HAL_RCCEx_PeriphCLKConfig>
}
 800076e:	b018      	add	sp, #96	; 0x60
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 800077c:	b510      	push	{r4, lr}
 800077e:	b084      	sub	sp, #16
	HAL_StatusTypeDef status = HAL_OK;

 	uint8_t data[3];

    data[0] = RegisterAddr;     // 0x0C in your example
 8000780:	f88d 000c 	strb.w	r0, [sp, #12]
    data[1] = RegisterValue>>8;    // MSB byte of 16bit data
 8000784:	0a0b      	lsrs	r3, r1, #8
 8000786:	f88d 300d 	strb.w	r3, [sp, #13]
    data[2] = RegisterValue;       // LSB byte of 16bit data
 800078a:	f88d 100e 	strb.w	r1, [sp, #14]


    status = HAL_I2C_Master_Transmit(&hi2c2, CODEC_ADDRESS, data, 3, CODEC_LONG_TIMEOUT);  // data is the start pointer of our array
 800078e:	f44f 1396 	mov.w	r3, #1228800	; 0x12c000
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2303      	movs	r3, #3
 8000796:	aa03      	add	r2, sp, #12
 8000798:	2134      	movs	r1, #52	; 0x34
 800079a:	4807      	ldr	r0, [pc, #28]	; (80007b8 <Codec_WriteRegister+0x3c>)
 800079c:	f001 fab0 	bl	8001d00 <HAL_I2C_Master_Transmit>
    /* Check the communication status */
    if(status != HAL_OK)
 80007a0:	4604      	mov	r4, r0
 80007a2:	b910      	cbnz	r0, 80007aa <Codec_WriteRegister+0x2e>
    }

      // data is the start pointer of our array
	/* Return the verifying value: 0 (Passed) or 1 (Failed) */
	return status;
}
 80007a4:	4620      	mov	r0, r4
 80007a6:	b004      	add	sp, #16
 80007a8:	bd10      	pop	{r4, pc}
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2104      	movs	r1, #4
 80007ae:	4803      	ldr	r0, [pc, #12]	; (80007bc <Codec_WriteRegister+0x40>)
 80007b0:	f001 f870 	bl	8001894 <HAL_GPIO_WritePin>
 80007b4:	e7f6      	b.n	80007a4 <Codec_WriteRegister+0x28>
 80007b6:	bf00      	nop
 80007b8:	2000002c 	.word	0x2000002c
 80007bc:	40020000 	.word	0x40020000

080007c0 <Codec_Reset>:
{
 80007c0:	b510      	push	{r4, lr}
	Codec_WriteRegister(0x0f, 0);
 80007c2:	2100      	movs	r1, #0
 80007c4:	200f      	movs	r0, #15
 80007c6:	f7ff ffd9 	bl	800077c <Codec_WriteRegister>
	for(i=0;i<W8731_NUM_REGS;i++)
 80007ca:	2400      	movs	r4, #0
 80007cc:	e007      	b.n	80007de <Codec_Reset+0x1e>
		Codec_WriteRegister(i, w8731_init_data[i]);
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <Codec_Reset+0x24>)
 80007d0:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 80007d4:	4620      	mov	r0, r4
 80007d6:	f7ff ffd1 	bl	800077c <Codec_WriteRegister>
	for(i=0;i<W8731_NUM_REGS;i++)
 80007da:	3401      	adds	r4, #1
 80007dc:	b2e4      	uxtb	r4, r4
 80007de:	2c09      	cmp	r4, #9
 80007e0:	d9f5      	bls.n	80007ce <Codec_Reset+0xe>
}
 80007e2:	bd10      	pop	{r4, pc}
 80007e4:	08003088 	.word	0x08003088

080007e8 <main>:
{
 80007e8:	b508      	push	{r3, lr}
  audiobuff[0] = 3000;
 80007ea:	4d1a      	ldr	r5, [pc, #104]	; (8000854 <main+0x6c>)
 80007ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007f0:	802b      	strh	r3, [r5, #0]
  HAL_Init();
 80007f2:	f000 fa21 	bl	8000c38 <HAL_Init>
  SystemClock_Config();
 80007f6:	f7ff ff6b 	bl	80006d0 <SystemClock_Config>
  MX_GPIO_Init();
 80007fa:	f7ff fe65 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fe:	f7ff feab 	bl	8000558 <MX_DMA_Init>
  MX_ADC1_Init();
 8000802:	f7ff fed5 	bl	80005b0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000806:	f7ff ff19 	bl	800063c <MX_I2C2_Init>
  MX_I2S2_Init();
 800080a:	f7ff ff31 	bl	8000670 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800080e:	f7ff ff49 	bl	80006a4 <MX_USART1_UART_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValArray, 4);
 8000812:	2204      	movs	r2, #4
 8000814:	4910      	ldr	r1, [pc, #64]	; (8000858 <main+0x70>)
 8000816:	4811      	ldr	r0, [pc, #68]	; (800085c <main+0x74>)
 8000818:	f000 fb14 	bl	8000e44 <HAL_ADC_Start_DMA>
  HAL_I2S_MspInit(&hi2s2);
 800081c:	4c10      	ldr	r4, [pc, #64]	; (8000860 <main+0x78>)
 800081e:	4620      	mov	r0, r4
 8000820:	f000 f8d2 	bl	80009c8 <HAL_I2S_MspInit>
  Codec_Reset();
 8000824:	f7ff ffcc 	bl	80007c0 <Codec_Reset>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)&audiobuff[0], 2*BUFF_LEN); // size must be in bytes
 8000828:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800082c:	4629      	mov	r1, r5
 800082e:	4620      	mov	r0, r4
 8000830:	f001 fbee 	bl	8002010 <HAL_I2S_Transmit_DMA>
	  pin_state = !pin_state;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <main+0x7c>)
 8000836:	881a      	ldrh	r2, [r3, #0]
 8000838:	fab2 f282 	clz	r2, r2
 800083c:	0952      	lsrs	r2, r2, #5
 800083e:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, pin_state);
 8000840:	2104      	movs	r1, #4
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <main+0x80>)
 8000844:	f001 f826 	bl	8001894 <HAL_GPIO_WritePin>
		  HAL_Delay(adcValArray[1]);
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <main+0x70>)
 800084a:	8858      	ldrh	r0, [r3, #2]
 800084c:	f000 fa20 	bl	8000c90 <HAL_Delay>
 8000850:	e7f0      	b.n	8000834 <main+0x4c>
 8000852:	bf00      	nop
 8000854:	200000d0 	.word	0x200000d0
 8000858:	20000080 	.word	0x20000080
 800085c:	20000088 	.word	0x20000088
 8000860:	200001d4 	.word	0x200001d4
 8000864:	20000028 	.word	0x20000028
 8000868:	40020000 	.word	0x40020000

0800086c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800086c:	4770      	bx	lr
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2100      	movs	r1, #0
 8000874:	9100      	str	r1, [sp, #0]
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_MspInit+0x34>)
 8000878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800087a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800087e:	645a      	str	r2, [r3, #68]	; 0x44
 8000880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000882:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000886:	9200      	str	r2, [sp, #0]
 8000888:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	9101      	str	r1, [sp, #4]
 800088c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000892:	641a      	str	r2, [r3, #64]	; 0x40
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	b002      	add	sp, #8
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a8:	b530      	push	{r4, r5, lr}
 80008aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	2300      	movs	r3, #0
 80008ae:	9303      	str	r3, [sp, #12]
 80008b0:	9304      	str	r3, [sp, #16]
 80008b2:	9305      	str	r3, [sp, #20]
 80008b4:	9306      	str	r3, [sp, #24]
 80008b6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80008b8:	6802      	ldr	r2, [r0, #0]
 80008ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008be:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d001      	beq.n	80008ca <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008c6:	b009      	add	sp, #36	; 0x24
 80008c8:	bd30      	pop	{r4, r5, pc}
 80008ca:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008cc:	2500      	movs	r5, #0
 80008ce:	9501      	str	r5, [sp, #4]
 80008d0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80008d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008da:	645a      	str	r2, [r3, #68]	; 0x44
 80008dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008de:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80008e2:	9201      	str	r2, [sp, #4]
 80008e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	9502      	str	r5, [sp, #8]
 80008e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ea:	f042 0204 	orr.w	r2, r2, #4
 80008ee:	631a      	str	r2, [r3, #48]	; 0x30
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	9302      	str	r3, [sp, #8]
 80008f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008fa:	230f      	movs	r3, #15
 80008fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	a903      	add	r1, sp, #12
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <HAL_ADC_MspInit+0xa0>)
 8000906:	f000 fee1 	bl	80016cc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800090a:	4810      	ldr	r0, [pc, #64]	; (800094c <HAL_ADC_MspInit+0xa4>)
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_ADC_MspInit+0xa8>)
 800090e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000910:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000912:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000914:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800091c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000920:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800092e:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000930:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000932:	f000 fd41 	bl	80013b8 <HAL_DMA_Init>
 8000936:	b918      	cbnz	r0, 8000940 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_ADC_MspInit+0xa4>)
 800093a:	63a3      	str	r3, [r4, #56]	; 0x38
 800093c:	639c      	str	r4, [r3, #56]	; 0x38
}
 800093e:	e7c2      	b.n	80008c6 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000940:	f7ff ff94 	bl	800086c <Error_Handler>
 8000944:	e7f8      	b.n	8000938 <HAL_ADC_MspInit+0x90>
 8000946:	bf00      	nop
 8000948:	40020800 	.word	0x40020800
 800094c:	20000114 	.word	0x20000114
 8000950:	40026410 	.word	0x40026410

08000954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000954:	b530      	push	{r4, r5, lr}
 8000956:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	2300      	movs	r3, #0
 800095a:	9303      	str	r3, [sp, #12]
 800095c:	9304      	str	r3, [sp, #16]
 800095e:	9305      	str	r3, [sp, #20]
 8000960:	9306      	str	r3, [sp, #24]
 8000962:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8000964:	6802      	ldr	r2, [r0, #0]
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_I2C_MspInit+0x68>)
 8000968:	429a      	cmp	r2, r3
 800096a:	d001      	beq.n	8000970 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800096c:	b009      	add	sp, #36	; 0x24
 800096e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	2500      	movs	r5, #0
 8000972:	9501      	str	r5, [sp, #4]
 8000974:	4c12      	ldr	r4, [pc, #72]	; (80009c0 <HAL_I2C_MspInit+0x6c>)
 8000976:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6323      	str	r3, [r4, #48]	; 0x30
 800097e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800098c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	2312      	movs	r3, #18
 8000990:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800099a:	2304      	movs	r3, #4
 800099c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	a903      	add	r1, sp, #12
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <HAL_I2C_MspInit+0x70>)
 80009a2:	f000 fe93 	bl	80016cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009a6:	9502      	str	r5, [sp, #8]
 80009a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ae:	6423      	str	r3, [r4, #64]	; 0x40
 80009b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	9b02      	ldr	r3, [sp, #8]
}
 80009ba:	e7d7      	b.n	800096c <HAL_I2C_MspInit+0x18>
 80009bc:	40005800 	.word	0x40005800
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400

080009c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	2300      	movs	r3, #0
 80009d0:	9303      	str	r3, [sp, #12]
 80009d2:	9304      	str	r3, [sp, #16]
 80009d4:	9305      	str	r3, [sp, #20]
 80009d6:	9306      	str	r3, [sp, #24]
 80009d8:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI2)
 80009da:	6802      	ldr	r2, [r0, #0]
 80009dc:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <HAL_I2S_MspInit+0xf8>)
 80009de:	429a      	cmp	r2, r3
 80009e0:	d002      	beq.n	80009e8 <HAL_I2S_MspInit+0x20>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009e2:	b008      	add	sp, #32
 80009e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009e8:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ea:	2500      	movs	r5, #0
 80009ec:	9500      	str	r5, [sp, #0]
 80009ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80009f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40
 80009fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a00:	9200      	str	r2, [sp, #0]
 8000a02:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	9501      	str	r5, [sp, #4]
 8000a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a08:	f042 0202 	orr.w	r2, r2, #2
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a10:	f002 0202 	and.w	r2, r2, #2
 8000a14:	9201      	str	r2, [sp, #4]
 8000a16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a18:	9502      	str	r5, [sp, #8]
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	f042 0204 	orr.w	r2, r2, #4
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	9302      	str	r3, [sp, #8]
 8000a2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a2c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2602      	movs	r6, #2
 8000a34:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a36:	f04f 0805 	mov.w	r8, #5
 8000a3a:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	4f21      	ldr	r7, [pc, #132]	; (8000ac4 <HAL_I2S_MspInit+0xfc>)
 8000a40:	a903      	add	r1, sp, #12
 8000a42:	4638      	mov	r0, r7
 8000a44:	f000 fe42 	bl	80016cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a54:	2306      	movs	r3, #6
 8000a56:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	a903      	add	r1, sp, #12
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	f000 fe36 	bl	80016cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a60:	2740      	movs	r7, #64	; 0x40
 8000a62:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6a:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	a903      	add	r1, sp, #12
 8000a70:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <HAL_I2S_MspInit+0x100>)
 8000a72:	f000 fe2b 	bl	80016cc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a76:	4815      	ldr	r0, [pc, #84]	; (8000acc <HAL_I2S_MspInit+0x104>)
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_I2S_MspInit+0x108>)
 8000a7a:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a7c:	6045      	str	r5, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a7e:	6087      	str	r7, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a80:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a8c:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a92:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a98:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a9e:	6203      	str	r3, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000aa8:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000aaa:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000aac:	f000 fc84 	bl	80013b8 <HAL_DMA_Init>
 8000ab0:	b918      	cbnz	r0, 8000aba <HAL_I2S_MspInit+0xf2>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_I2S_MspInit+0x104>)
 8000ab4:	63a3      	str	r3, [r4, #56]	; 0x38
 8000ab6:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000ab8:	e793      	b.n	80009e2 <HAL_I2S_MspInit+0x1a>
      Error_Handler();
 8000aba:	f7ff fed7 	bl	800086c <Error_Handler>
 8000abe:	e7f8      	b.n	8000ab2 <HAL_I2S_MspInit+0xea>
 8000ac0:	40003800 	.word	0x40003800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	20000174 	.word	0x20000174
 8000ad0:	40026070 	.word	0x40026070

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b500      	push	{lr}
 8000ad6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	2300      	movs	r3, #0
 8000ada:	9303      	str	r3, [sp, #12]
 8000adc:	9304      	str	r3, [sp, #16]
 8000ade:	9305      	str	r3, [sp, #20]
 8000ae0:	9306      	str	r3, [sp, #24]
 8000ae2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000ae4:	6802      	ldr	r2, [r0, #0]
 8000ae6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000aea:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d002      	beq.n	8000af8 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000af2:	b009      	add	sp, #36	; 0x24
 8000af4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af8:	2100      	movs	r1, #0
 8000afa:	9101      	str	r1, [sp, #4]
 8000afc:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b02:	f042 0210 	orr.w	r2, r2, #16
 8000b06:	645a      	str	r2, [r3, #68]	; 0x44
 8000b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b0a:	f002 0210 	and.w	r2, r2, #16
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	9102      	str	r1, [sp, #8]
 8000b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b16:	f042 0202 	orr.w	r2, r2, #2
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b26:	23c0      	movs	r3, #192	; 0xc0
 8000b28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b32:	2307      	movs	r3, #7
 8000b34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	a903      	add	r1, sp, #12
 8000b38:	4801      	ldr	r0, [pc, #4]	; (8000b40 <HAL_UART_MspInit+0x6c>)
 8000b3a:	f000 fdc7 	bl	80016cc <HAL_GPIO_Init>
}
 8000b3e:	e7d8      	b.n	8000af2 <HAL_UART_MspInit+0x1e>
 8000b40:	40020400 	.word	0x40020400

08000b44 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b44:	4770      	bx	lr

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler>

08000b4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f889 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bd08      	pop	{r3, pc}

08000b5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b5e:	4802      	ldr	r0, [pc, #8]	; (8000b68 <DMA1_Stream4_IRQHandler+0xc>)
 8000b60:	f000 fcc6 	bl	80014f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b64:	bd08      	pop	{r3, pc}
 8000b66:	bf00      	nop
 8000b68:	20000174 	.word	0x20000174

08000b6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <DMA2_Stream0_IRQHandler+0xc>)
 8000b70:	f000 fcbe 	bl	80014f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b74:	bd08      	pop	{r3, pc}
 8000b76:	bf00      	nop
 8000b78:	20000114 	.word	0x20000114

08000b7c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <SystemInit+0x18>)
 8000b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000b82:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b9e:	e003      	b.n	8000ba8 <LoopCopyDataInit>

08000ba0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ba2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ba4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ba6:	3104      	adds	r1, #4

08000ba8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb0:	d3f6      	bcc.n	8000ba0 <CopyDataInit>
  ldr  r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bb4:	e002      	b.n	8000bbc <LoopFillZerobss>

08000bb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bb8:	f842 3b04 	str.w	r3, [r2], #4

08000bbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc0:	d3f9      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffdb 	bl	8000b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f002 fa27 	bl	8003018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fe0d 	bl	80007e8 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bd4:	080030cc 	.word	0x080030cc
  ldr  r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bdc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000be0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000be4:	20000220 	.word	0x20000220

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b510      	push	{r4, lr}
 8000bee:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_InitTick+0x40>)
 8000bf2:	7818      	ldrb	r0, [r3, #0]
 8000bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <HAL_InitTick+0x44>)
 8000bfe:	6810      	ldr	r0, [r2, #0]
 8000c00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c04:	f000 fb46 	bl	8001294 <HAL_SYSTICK_Config>
 8000c08:	b968      	cbnz	r0, 8000c26 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	2c0f      	cmp	r4, #15
 8000c0c:	d901      	bls.n	8000c12 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e00a      	b.n	8000c28 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c12:	2200      	movs	r2, #0
 8000c14:	4621      	mov	r1, r4
 8000c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c1a:	f000 faf9 	bl	8001210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_InitTick+0x48>)
 8000c20:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c22:	2000      	movs	r0, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c26:	2001      	movs	r0, #1
}
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000008 	.word	0x20000008

08000c38 <HAL_Init>:
{
 8000c38:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x30>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c52:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 fac9 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ffc6 	bl	8000bec <HAL_InitTick>
  HAL_MspInit();
 8000c60:	f7ff fe06 	bl	8000870 <HAL_MspInit>
}
 8000c64:	2000      	movs	r0, #0
 8000c66:	bd08      	pop	{r3, pc}
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_IncTick+0x10>)
 8000c6e:	6811      	ldr	r1, [r2, #0]
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_IncTick+0x14>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	440b      	add	r3, r1
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2000021c 	.word	0x2000021c
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c84:	4b01      	ldr	r3, [pc, #4]	; (8000c8c <HAL_GetTick+0x8>)
 8000c86:	6818      	ldr	r0, [r3, #0]
}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000021c 	.word	0x2000021c

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff fff6 	bl	8000c84 <HAL_GetTick>
 8000c98:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000c9e:	d002      	beq.n	8000ca6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <HAL_Delay+0x24>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ca6:	f7ff ffed 	bl	8000c84 <HAL_GetTick>
 8000caa:	1b40      	subs	r0, r0, r5
 8000cac:	42a0      	cmp	r0, r4
 8000cae:	d3fa      	bcc.n	8000ca6 <HAL_Delay+0x16>
  {
  }
}
 8000cb0:	bd38      	pop	{r3, r4, r5, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <ADC_Init+0x12c>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000cc0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	6841      	ldr	r1, [r0, #4]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000cca:	6802      	ldr	r2, [r0, #0]
 8000ccc:	6853      	ldr	r3, [r2, #4]
 8000cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cd2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000cd4:	6802      	ldr	r2, [r0, #0]
 8000cd6:	6853      	ldr	r3, [r2, #4]
 8000cd8:	6901      	ldr	r1, [r0, #16]
 8000cda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000cde:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ce0:	6802      	ldr	r2, [r0, #0]
 8000ce2:	6853      	ldr	r3, [r2, #4]
 8000ce4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ce8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000cea:	6802      	ldr	r2, [r0, #0]
 8000cec:	6853      	ldr	r3, [r2, #4]
 8000cee:	6881      	ldr	r1, [r0, #8]
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000cf4:	6802      	ldr	r2, [r0, #0]
 8000cf6:	6893      	ldr	r3, [r2, #8]
 8000cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cfc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000cfe:	6802      	ldr	r2, [r0, #0]
 8000d00:	6893      	ldr	r3, [r2, #8]
 8000d02:	68c1      	ldr	r1, [r0, #12]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d08:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000d0a:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <ADC_Init+0x130>)
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d04b      	beq.n	8000da8 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d10:	6802      	ldr	r2, [r0, #0]
 8000d12:	6893      	ldr	r3, [r2, #8]
 8000d14:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000d18:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000d1a:	6802      	ldr	r2, [r0, #0]
 8000d1c:	6893      	ldr	r3, [r2, #8]
 8000d1e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d24:	6802      	ldr	r2, [r0, #0]
 8000d26:	6893      	ldr	r3, [r2, #8]
 8000d28:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000d2c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000d2e:	6802      	ldr	r2, [r0, #0]
 8000d30:	6893      	ldr	r3, [r2, #8]
 8000d32:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d38:	6802      	ldr	r2, [r0, #0]
 8000d3a:	6893      	ldr	r3, [r2, #8]
 8000d3c:	f023 0302 	bic.w	r3, r3, #2
 8000d40:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d42:	6802      	ldr	r2, [r0, #0]
 8000d44:	6893      	ldr	r3, [r2, #8]
 8000d46:	7e01      	ldrb	r1, [r0, #24]
 8000d48:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000d4c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d4e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d133      	bne.n	8000dbe <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d56:	6802      	ldr	r2, [r0, #0]
 8000d58:	6853      	ldr	r3, [r2, #4]
 8000d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d5e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d60:	6802      	ldr	r2, [r0, #0]
 8000d62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000d68:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d6a:	6801      	ldr	r1, [r0, #0]
 8000d6c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000d6e:	69c2      	ldr	r2, [r0, #28]
 8000d70:	3a01      	subs	r2, #1
 8000d72:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000d76:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d78:	6802      	ldr	r2, [r0, #0]
 8000d7a:	6893      	ldr	r3, [r2, #8]
 8000d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d80:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d82:	6802      	ldr	r2, [r0, #0]
 8000d84:	6893      	ldr	r3, [r2, #8]
 8000d86:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000d8a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000d8e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d90:	6802      	ldr	r2, [r0, #0]
 8000d92:	6893      	ldr	r3, [r2, #8]
 8000d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d98:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d9a:	6802      	ldr	r2, [r0, #0]
 8000d9c:	6893      	ldr	r3, [r2, #8]
 8000d9e:	6941      	ldr	r1, [r0, #20]
 8000da0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000da4:	6093      	str	r3, [r2, #8]
}
 8000da6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000da8:	6802      	ldr	r2, [r0, #0]
 8000daa:	6893      	ldr	r3, [r2, #8]
 8000dac:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000db0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000db2:	6802      	ldr	r2, [r0, #0]
 8000db4:	6893      	ldr	r3, [r2, #8]
 8000db6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000dba:	6093      	str	r3, [r2, #8]
 8000dbc:	e7bc      	b.n	8000d38 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000dbe:	6802      	ldr	r2, [r0, #0]
 8000dc0:	6853      	ldr	r3, [r2, #4]
 8000dc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc6:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000dc8:	6802      	ldr	r2, [r0, #0]
 8000dca:	6853      	ldr	r3, [r2, #4]
 8000dcc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000dd0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dd2:	6801      	ldr	r1, [r0, #0]
 8000dd4:	684b      	ldr	r3, [r1, #4]
 8000dd6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000dde:	604b      	str	r3, [r1, #4]
 8000de0:	e7be      	b.n	8000d60 <ADC_Init+0xa8>
 8000de2:	bf00      	nop
 8000de4:	40012300 	.word	0x40012300
 8000de8:	0f000001 	.word	0x0f000001

08000dec <HAL_ADC_Init>:
  if(hadc == NULL)
 8000dec:	b338      	cbz	r0, 8000e3e <HAL_ADC_Init+0x52>
{
 8000dee:	b510      	push	{r4, lr}
 8000df0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000df2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000df4:	b143      	cbz	r3, 8000e08 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000df8:	f013 0f10 	tst.w	r3, #16
 8000dfc:	d00b      	beq.n	8000e16 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000e00:	2300      	movs	r3, #0
 8000e02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000e06:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8000e08:	f7ff fd4e 	bl	80008a8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8000e10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000e14:	e7ef      	b.n	8000df6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e1c:	f023 0302 	bic.w	r3, r3, #2
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8000e26:	4620      	mov	r0, r4
 8000e28:	f7ff ff46 	bl	8000cb8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e32:	f023 0303 	bic.w	r3, r3, #3
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6423      	str	r3, [r4, #64]	; 0x40
 8000e3c:	e7e0      	b.n	8000e00 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
}
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_ADC_Start_DMA>:
{
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000e4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	f000 809b 	beq.w	8000f8c <HAL_ADC_Start_DMA+0x148>
 8000e56:	2301      	movs	r3, #1
 8000e58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e5c:	6804      	ldr	r4, [r0, #0]
 8000e5e:	68a3      	ldr	r3, [r4, #8]
 8000e60:	f013 0f01 	tst.w	r3, #1
 8000e64:	d113      	bne.n	8000e8e <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 8000e66:	68a3      	ldr	r3, [r4, #8]
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e6e:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <HAL_ADC_Start_DMA+0x160>)
 8000e70:	681c      	ldr	r4, [r3, #0]
 8000e72:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <HAL_ADC_Start_DMA+0x164>)
 8000e74:	fba3 3404 	umull	r3, r4, r3, r4
 8000e78:	0ca4      	lsrs	r4, r4, #18
 8000e7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e7e:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8000e80:	e002      	b.n	8000e88 <HAL_ADC_Start_DMA+0x44>
      counter--;
 8000e82:	9c01      	ldr	r4, [sp, #4]
 8000e84:	3c01      	subs	r4, #1
 8000e86:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8000e88:	9c01      	ldr	r4, [sp, #4]
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d1f9      	bne.n	8000e82 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e8e:	6803      	ldr	r3, [r0, #0]
 8000e90:	689c      	ldr	r4, [r3, #8]
 8000e92:	f014 0f01 	tst.w	r4, #1
 8000e96:	d07b      	beq.n	8000f90 <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 8000e98:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000e9a:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8000e9e:	f024 0401 	bic.w	r4, r4, #1
 8000ea2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000ea6:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000eae:	d005      	beq.n	8000ebc <HAL_ADC_Start_DMA+0x78>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000eb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eba:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ebc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ebe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ec2:	d038      	beq.n	8000f36 <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ec4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000ec6:	f023 0306 	bic.w	r3, r3, #6
 8000eca:	6443      	str	r3, [r0, #68]	; 0x44
 8000ecc:	4613      	mov	r3, r2
 8000ece:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ed6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000ed8:	4834      	ldr	r0, [pc, #208]	; (8000fac <HAL_ADC_Start_DMA+0x168>)
 8000eda:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000edc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ede:	4834      	ldr	r0, [pc, #208]	; (8000fb0 <HAL_ADC_Start_DMA+0x16c>)
 8000ee0:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ee2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ee4:	4833      	ldr	r0, [pc, #204]	; (8000fb4 <HAL_ADC_Start_DMA+0x170>)
 8000ee6:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000eee:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ef0:	6825      	ldr	r5, [r4, #0]
 8000ef2:	6868      	ldr	r0, [r5, #4]
 8000ef4:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8000ef8:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000efa:	6825      	ldr	r5, [r4, #0]
 8000efc:	68a8      	ldr	r0, [r5, #8]
 8000efe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000f02:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f04:	6820      	ldr	r0, [r4, #0]
 8000f06:	460a      	mov	r2, r1
 8000f08:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8000f0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000f0e:	f000 fab9 	bl	8001484 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_ADC_Start_DMA+0x174>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f013 0f1f 	tst.w	r3, #31
 8000f1a:	d127      	bne.n	8000f6c <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <HAL_ADC_Start_DMA+0x178>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d019      	beq.n	8000f58 <HAL_ADC_Start_DMA+0x114>
 8000f24:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d007      	beq.n	8000f3c <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f2c:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <HAL_ADC_Start_DMA+0x17c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00b      	beq.n	8000f4a <HAL_ADC_Start_DMA+0x106>
  return HAL_OK;
 8000f32:	2000      	movs	r0, #0
 8000f34:	e02d      	b.n	8000f92 <HAL_ADC_Start_DMA+0x14e>
      ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	2300      	movs	r3, #0
 8000f38:	6443      	str	r3, [r0, #68]	; 0x44
 8000f3a:	e7c7      	b.n	8000ecc <HAL_ADC_Start_DMA+0x88>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f3c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000f40:	6852      	ldr	r2, [r2, #4]
 8000f42:	f012 0f1f 	tst.w	r2, #31
 8000f46:	d007      	beq.n	8000f58 <HAL_ADC_Start_DMA+0x114>
 8000f48:	e7f0      	b.n	8000f2c <HAL_ADC_Start_DMA+0xe8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f4a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000f4e:	6852      	ldr	r2, [r2, #4]
 8000f50:	f002 021f 	and.w	r2, r2, #31
 8000f54:	2a0f      	cmp	r2, #15
 8000f56:	d81e      	bhi.n	8000f96 <HAL_ADC_Start_DMA+0x152>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000f5e:	d11c      	bne.n	8000f9a <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000f68:	2000      	movs	r0, #0
 8000f6a:	e012      	b.n	8000f92 <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <HAL_ADC_Start_DMA+0x178>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d001      	beq.n	8000f78 <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 8000f74:	2000      	movs	r0, #0
 8000f76:	e00c      	b.n	8000f92 <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000f7e:	d10e      	bne.n	8000f9e <HAL_ADC_Start_DMA+0x15a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000f88:	2000      	movs	r0, #0
 8000f8a:	e002      	b.n	8000f92 <HAL_ADC_Start_DMA+0x14e>
  __HAL_LOCK(hadc);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	e000      	b.n	8000f92 <HAL_ADC_Start_DMA+0x14e>
  return HAL_OK;
 8000f90:	2000      	movs	r0, #0
}
 8000f92:	b003      	add	sp, #12
 8000f94:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8000f96:	2000      	movs	r0, #0
 8000f98:	e7fb      	b.n	8000f92 <HAL_ADC_Start_DMA+0x14e>
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	e7f9      	b.n	8000f92 <HAL_ADC_Start_DMA+0x14e>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	e7f7      	b.n	8000f92 <HAL_ADC_Start_DMA+0x14e>
 8000fa2:	bf00      	nop
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	08000feb 	.word	0x08000feb
 8000fb0:	08000fc9 	.word	0x08000fc9
 8000fb4:	08000fd5 	.word	0x08000fd5
 8000fb8:	40012300 	.word	0x40012300
 8000fbc:	40012000 	.word	0x40012000
 8000fc0:	40012200 	.word	0x40012200

08000fc4 <HAL_ADC_ConvCpltCallback>:
}
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_ADC_ConvHalfCpltCallback>:
}
 8000fc6:	4770      	bx	lr

08000fc8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fc8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000fcc:	f7ff fffb 	bl	8000fc6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fd0:	bd08      	pop	{r3, pc}

08000fd2 <HAL_ADC_ErrorCallback>:
}
 8000fd2:	4770      	bx	lr

08000fd4 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000fd4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000fd8:	2340      	movs	r3, #64	; 0x40
 8000fda:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000fdc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000fe4:	f7ff fff5 	bl	8000fd2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fe8:	bd08      	pop	{r3, pc}

08000fea <ADC_DMAConvCplt>:
{
 8000fea:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff0:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000ff4:	d126      	bne.n	8001044 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	6891      	ldr	r1, [r2, #8]
 8001002:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001006:	d119      	bne.n	800103c <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001008:	7e19      	ldrb	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800100a:	b9b9      	cbnz	r1, 800103c <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800100c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800100e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001012:	d003      	beq.n	800101c <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001014:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001016:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800101a:	d10f      	bne.n	800103c <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800101c:	6851      	ldr	r1, [r2, #4]
 800101e:	f021 0120 	bic.w	r1, r1, #32
 8001022:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001032:	d103      	bne.n	800103c <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffc1 	bl	8000fc4 <HAL_ADC_ConvCpltCallback>
}
 8001042:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001046:	f012 0f10 	tst.w	r2, #16
 800104a:	d103      	bne.n	8001054 <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	4798      	blx	r3
}
 8001052:	e7f6      	b.n	8001042 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffbc 	bl	8000fd2 <HAL_ADC_ErrorCallback>
 800105a:	e7f2      	b.n	8001042 <ADC_DMAConvCplt+0x58>

0800105c <HAL_ADC_ConfigChannel>:
{
 800105c:	b430      	push	{r4, r5}
 800105e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001064:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001068:	2b01      	cmp	r3, #1
 800106a:	f000 80b7 	beq.w	80011dc <HAL_ADC_ConfigChannel+0x180>
 800106e:	2301      	movs	r3, #1
 8001070:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001074:	680b      	ldr	r3, [r1, #0]
 8001076:	2b09      	cmp	r3, #9
 8001078:	d93e      	bls.n	80010f8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800107a:	6805      	ldr	r5, [r0, #0]
 800107c:	68ea      	ldr	r2, [r5, #12]
 800107e:	b29b      	uxth	r3, r3
 8001080:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001084:	3b1e      	subs	r3, #30
 8001086:	2407      	movs	r4, #7
 8001088:	fa04 f303 	lsl.w	r3, r4, r3
 800108c:	ea22 0303 	bic.w	r3, r2, r3
 8001090:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001092:	6805      	ldr	r5, [r0, #0]
 8001094:	68ea      	ldr	r2, [r5, #12]
 8001096:	688c      	ldr	r4, [r1, #8]
 8001098:	880b      	ldrh	r3, [r1, #0]
 800109a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800109e:	3b1e      	subs	r3, #30
 80010a0:	fa04 f303 	lsl.w	r3, r4, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80010a8:	684b      	ldr	r3, [r1, #4]
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d83a      	bhi.n	8001124 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010ae:	6805      	ldr	r5, [r0, #0]
 80010b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80010b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010b6:	3b05      	subs	r3, #5
 80010b8:	241f      	movs	r4, #31
 80010ba:	fa04 f303 	lsl.w	r3, r4, r3
 80010be:	ea22 0303 	bic.w	r3, r2, r3
 80010c2:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010c4:	6805      	ldr	r5, [r0, #0]
 80010c6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80010c8:	684b      	ldr	r3, [r1, #4]
 80010ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010ce:	3b05      	subs	r3, #5
 80010d0:	880c      	ldrh	r4, [r1, #0]
 80010d2:	fa04 f303 	lsl.w	r3, r4, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010da:	6802      	ldr	r2, [r0, #0]
 80010dc:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <HAL_ADC_ConfigChannel+0x184>)
 80010de:	429a      	cmp	r2, r3
 80010e0:	d050      	beq.n	8001184 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010e2:	6802      	ldr	r2, [r0, #0]
 80010e4:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <HAL_ADC_ConfigChannel+0x184>)
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d055      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 80010ea:	2300      	movs	r3, #0
 80010ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80010f0:	4618      	mov	r0, r3
}
 80010f2:	b002      	add	sp, #8
 80010f4:	bc30      	pop	{r4, r5}
 80010f6:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010f8:	6805      	ldr	r5, [r0, #0]
 80010fa:	692a      	ldr	r2, [r5, #16]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001102:	2407      	movs	r4, #7
 8001104:	fa04 f303 	lsl.w	r3, r4, r3
 8001108:	ea22 0303 	bic.w	r3, r2, r3
 800110c:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800110e:	6805      	ldr	r5, [r0, #0]
 8001110:	692a      	ldr	r2, [r5, #16]
 8001112:	688c      	ldr	r4, [r1, #8]
 8001114:	880b      	ldrh	r3, [r1, #0]
 8001116:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800111a:	fa04 f303 	lsl.w	r3, r4, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	612b      	str	r3, [r5, #16]
 8001122:	e7c1      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8001124:	2b0c      	cmp	r3, #12
 8001126:	d816      	bhi.n	8001156 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001128:	6805      	ldr	r5, [r0, #0]
 800112a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800112c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001130:	3b23      	subs	r3, #35	; 0x23
 8001132:	241f      	movs	r4, #31
 8001134:	fa04 f303 	lsl.w	r3, r4, r3
 8001138:	ea22 0303 	bic.w	r3, r2, r3
 800113c:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800113e:	6805      	ldr	r5, [r0, #0]
 8001140:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001142:	684b      	ldr	r3, [r1, #4]
 8001144:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001148:	3b23      	subs	r3, #35	; 0x23
 800114a:	880c      	ldrh	r4, [r1, #0]
 800114c:	fa04 f303 	lsl.w	r3, r4, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	632b      	str	r3, [r5, #48]	; 0x30
 8001154:	e7c1      	b.n	80010da <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001156:	6805      	ldr	r5, [r0, #0]
 8001158:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800115a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800115e:	3b41      	subs	r3, #65	; 0x41
 8001160:	241f      	movs	r4, #31
 8001162:	fa04 f303 	lsl.w	r3, r4, r3
 8001166:	ea22 0303 	bic.w	r3, r2, r3
 800116a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800116c:	6805      	ldr	r5, [r0, #0]
 800116e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001170:	684b      	ldr	r3, [r1, #4]
 8001172:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001176:	3b41      	subs	r3, #65	; 0x41
 8001178:	880c      	ldrh	r4, [r1, #0]
 800117a:	fa04 f303 	lsl.w	r3, r4, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001182:	e7aa      	b.n	80010da <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001184:	680b      	ldr	r3, [r1, #0]
 8001186:	2b12      	cmp	r3, #18
 8001188:	d1ab      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800118a:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <HAL_ADC_ConfigChannel+0x188>)
 800118c:	6853      	ldr	r3, [r2, #4]
 800118e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001192:	6053      	str	r3, [r2, #4]
 8001194:	e7a5      	b.n	80010e2 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001196:	680b      	ldr	r3, [r1, #0]
 8001198:	3b10      	subs	r3, #16
 800119a:	2b01      	cmp	r3, #1
 800119c:	d8a5      	bhi.n	80010ea <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_ADC_ConfigChannel+0x188>)
 80011a0:	6853      	ldr	r3, [r2, #4]
 80011a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011a6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011a8:	680b      	ldr	r3, [r1, #0]
 80011aa:	2b10      	cmp	r3, #16
 80011ac:	d19d      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_ADC_ConfigChannel+0x18c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80011b6:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80011ba:	f202 3283 	addw	r2, r2, #899	; 0x383
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9b      	lsrs	r3, r3, #18
 80011c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011c8:	005a      	lsls	r2, r3, #1
 80011ca:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 80011cc:	e002      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 80011ce:	9b01      	ldr	r3, [sp, #4]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80011d4:	9b01      	ldr	r3, [sp, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f9      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x172>
 80011da:	e786      	b.n	80010ea <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80011dc:	2002      	movs	r0, #2
 80011de:	e788      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x96>
 80011e0:	40012000 	.word	0x40012000
 80011e4:	40012300 	.word	0x40012300
 80011e8:	20000000 	.word	0x20000000

080011ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	0200      	lsls	r0, r0, #8
 80011fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fe:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001200:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001204:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001208:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001210:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_NVIC_SetPriority+0x60>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121a:	f1c3 0407 	rsb	r4, r3, #7
 800121e:	2c04      	cmp	r4, #4
 8001220:	bf28      	it	cs
 8001222:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001224:	1d1d      	adds	r5, r3, #4
 8001226:	2d06      	cmp	r5, #6
 8001228:	d918      	bls.n	800125c <HAL_NVIC_SetPriority+0x4c>
 800122a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001230:	fa05 f404 	lsl.w	r4, r5, r4
 8001234:	ea21 0104 	bic.w	r1, r1, r4
 8001238:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123a:	fa05 f303 	lsl.w	r3, r5, r3
 800123e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001242:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001244:	2800      	cmp	r0, #0
 8001246:	db0b      	blt.n	8001260 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	0109      	lsls	r1, r1, #4
 800124a:	b2c9      	uxtb	r1, r1
 800124c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001250:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001254:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001258:	bc30      	pop	{r4, r5}
 800125a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125c:	2300      	movs	r3, #0
 800125e:	e7e5      	b.n	800122c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	f000 000f 	and.w	r0, r0, #15
 8001264:	0109      	lsls	r1, r1, #4
 8001266:	b2c9      	uxtb	r1, r1
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <HAL_NVIC_SetPriority+0x64>)
 800126a:	5419      	strb	r1, [r3, r0]
 800126c:	e7f4      	b.n	8001258 <HAL_NVIC_SetPriority+0x48>
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00
 8001274:	e000ed14 	.word	0xe000ed14

08001278 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001278:	2800      	cmp	r0, #0
 800127a:	db07      	blt.n	800128c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127c:	f000 021f 	and.w	r2, r0, #31
 8001280:	0940      	lsrs	r0, r0, #5
 8001282:	2301      	movs	r3, #1
 8001284:	4093      	lsls	r3, r2
 8001286:	4a02      	ldr	r2, [pc, #8]	; (8001290 <HAL_NVIC_EnableIRQ+0x18>)
 8001288:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	3801      	subs	r0, #1
 8001296:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800129a:	d20a      	bcs.n	80012b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_SYSTICK_Config+0x24>)
 800129e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_SYSTICK_Config+0x28>)
 80012a2:	21f0      	movs	r1, #240	; 0xf0
 80012a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	2000      	movs	r0, #0
 80012aa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80012c2:	6805      	ldr	r5, [r0, #0]
 80012c4:	682c      	ldr	r4, [r5, #0]
 80012c6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80012ca:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80012cc:	6804      	ldr	r4, [r0, #0]
 80012ce:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012d0:	6883      	ldr	r3, [r0, #8]
 80012d2:	2b40      	cmp	r3, #64	; 0x40
 80012d4:	d005      	beq.n	80012e2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80012d6:	6803      	ldr	r3, [r0, #0]
 80012d8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80012da:	6803      	ldr	r3, [r0, #0]
 80012dc:	60da      	str	r2, [r3, #12]
  }
}
 80012de:	bc30      	pop	{r4, r5}
 80012e0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80012e2:	6803      	ldr	r3, [r0, #0]
 80012e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80012e6:	6803      	ldr	r3, [r0, #0]
 80012e8:	60d9      	str	r1, [r3, #12]
 80012ea:	e7f8      	b.n	80012de <DMA_SetConfig+0x1e>

080012ec <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012ec:	6802      	ldr	r2, [r0, #0]
 80012ee:	b2d3      	uxtb	r3, r2
 80012f0:	3b10      	subs	r3, #16
 80012f2:	490b      	ldr	r1, [pc, #44]	; (8001320 <DMA_CalcBaseAndBitshift+0x34>)
 80012f4:	fba1 1303 	umull	r1, r3, r1, r3
 80012f8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012fa:	490a      	ldr	r1, [pc, #40]	; (8001324 <DMA_CalcBaseAndBitshift+0x38>)
 80012fc:	5cc9      	ldrb	r1, [r1, r3]
 80012fe:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001300:	2b03      	cmp	r3, #3
 8001302:	d806      	bhi.n	8001312 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001304:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001308:	f022 0203 	bic.w	r2, r2, #3
 800130c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800130e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001310:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001312:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001316:	f022 0203 	bic.w	r2, r2, #3
 800131a:	3204      	adds	r2, #4
 800131c:	6582      	str	r2, [r0, #88]	; 0x58
 800131e:	e7f6      	b.n	800130e <DMA_CalcBaseAndBitshift+0x22>
 8001320:	aaaaaaab 	.word	0xaaaaaaab
 8001324:	080030b4 	.word	0x080030b4

08001328 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001328:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800132a:	6982      	ldr	r2, [r0, #24]
 800132c:	b992      	cbnz	r2, 8001354 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800132e:	2b01      	cmp	r3, #1
 8001330:	d00a      	beq.n	8001348 <DMA_CheckFifoParam+0x20>
 8001332:	b11b      	cbz	r3, 800133c <DMA_CheckFifoParam+0x14>
 8001334:	2b02      	cmp	r3, #2
 8001336:	d001      	beq.n	800133c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001338:	2000      	movs	r0, #0
 800133a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800133c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800133e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001342:	d12c      	bne.n	800139e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001344:	2000      	movs	r0, #0
 8001346:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001348:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800134a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800134e:	d028      	beq.n	80013a2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001350:	2000      	movs	r0, #0
 8001352:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001354:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001358:	d005      	beq.n	8001366 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800135a:	2b02      	cmp	r3, #2
 800135c:	d929      	bls.n	80013b2 <DMA_CheckFifoParam+0x8a>
 800135e:	2b03      	cmp	r3, #3
 8001360:	d015      	beq.n	800138e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001362:	2000      	movs	r0, #0
 8001364:	4770      	bx	lr
    switch (tmp)
 8001366:	2b03      	cmp	r3, #3
 8001368:	d803      	bhi.n	8001372 <DMA_CheckFifoParam+0x4a>
 800136a:	e8df f003 	tbb	[pc, r3]
 800136e:	041c      	.short	0x041c
 8001370:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2000      	movs	r0, #0
 8001374:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001376:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001378:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800137c:	d115      	bne.n	80013aa <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800137e:	2000      	movs	r0, #0
 8001380:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001382:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001388:	d011      	beq.n	80013ae <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800138a:	2000      	movs	r0, #0
 800138c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800138e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001390:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001394:	d001      	beq.n	800139a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8001396:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001398:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800139a:	2000      	movs	r0, #0
 800139c:	4770      	bx	lr
        status = HAL_ERROR;
 800139e:	2001      	movs	r0, #1
 80013a0:	4770      	bx	lr
        status = HAL_ERROR;
 80013a2:	2001      	movs	r0, #1
 80013a4:	4770      	bx	lr
      status = HAL_ERROR;
 80013a6:	2001      	movs	r0, #1
 80013a8:	4770      	bx	lr
        status = HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
 80013ac:	4770      	bx	lr
        status = HAL_ERROR;
 80013ae:	2001      	movs	r0, #1
 80013b0:	4770      	bx	lr
      status = HAL_ERROR;
 80013b2:	2001      	movs	r0, #1
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_DMA_Init>:
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff fc62 	bl	8000c84 <HAL_GetTick>
  if(hdma == NULL)
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d05b      	beq.n	800147c <HAL_DMA_Init+0xc4>
 80013c4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80013c6:	2300      	movs	r3, #0
 80013c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80013cc:	2302      	movs	r3, #2
 80013ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f012 0f01 	tst.w	r2, #1
 80013e4:	d00a      	beq.n	80013fc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e6:	f7ff fc4d 	bl	8000c84 <HAL_GetTick>
 80013ea:	1b40      	subs	r0, r0, r5
 80013ec:	2805      	cmp	r0, #5
 80013ee:	d9f5      	bls.n	80013dc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f0:	2320      	movs	r3, #32
 80013f2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013f4:	2003      	movs	r0, #3
 80013f6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80013fc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013fe:	4820      	ldr	r0, [pc, #128]	; (8001480 <HAL_DMA_Init+0xc8>)
 8001400:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001402:	6861      	ldr	r1, [r4, #4]
 8001404:	68a2      	ldr	r2, [r4, #8]
 8001406:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140c:	6921      	ldr	r1, [r4, #16]
 800140e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001410:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	69a1      	ldr	r1, [r4, #24]
 8001416:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001418:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800141c:	6a21      	ldr	r1, [r4, #32]
 800141e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001420:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001422:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001424:	2904      	cmp	r1, #4
 8001426:	d01e      	beq.n	8001466 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001428:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800142a:	6826      	ldr	r6, [r4, #0]
 800142c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800142e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001434:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001436:	2b04      	cmp	r3, #4
 8001438:	d107      	bne.n	800144a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800143a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800143c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800143e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001440:	b11b      	cbz	r3, 800144a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff ff70 	bl	8001328 <DMA_CheckFifoParam>
 8001448:	b990      	cbnz	r0, 8001470 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800144a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff ff4d 	bl	80012ec <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001452:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001454:	233f      	movs	r3, #63	; 0x3f
 8001456:	4093      	lsls	r3, r2
 8001458:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800145a:	2000      	movs	r0, #0
 800145c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800145e:	2301      	movs	r3, #1
 8001460:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001464:	e7c9      	b.n	80013fa <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001466:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001468:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800146a:	4301      	orrs	r1, r0
 800146c:	430a      	orrs	r2, r1
 800146e:	e7db      	b.n	8001428 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001474:	2001      	movs	r0, #1
 8001476:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800147a:	e7be      	b.n	80013fa <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800147c:	2001      	movs	r0, #1
 800147e:	e7bc      	b.n	80013fa <HAL_DMA_Init+0x42>
 8001480:	f010803f 	.word	0xf010803f

08001484 <HAL_DMA_Start_IT>:
{
 8001484:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001486:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001488:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800148c:	2c01      	cmp	r4, #1
 800148e:	d02c      	beq.n	80014ea <HAL_DMA_Start_IT+0x66>
 8001490:	2401      	movs	r4, #1
 8001492:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001496:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800149a:	b2e4      	uxtb	r4, r4
 800149c:	2c01      	cmp	r4, #1
 800149e:	d004      	beq.n	80014aa <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80014a0:	2300      	movs	r3, #0
 80014a2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80014a6:	2002      	movs	r0, #2
}
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
 80014aa:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ac:	2002      	movs	r0, #2
 80014ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b2:	2000      	movs	r0, #0
 80014b4:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff ff02 	bl	80012c0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014bc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80014be:	233f      	movs	r3, #63	; 0x3f
 80014c0:	4093      	lsls	r3, r2
 80014c2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	6813      	ldr	r3, [r2, #0]
 80014c8:	f043 0316 	orr.w	r3, r3, #22
 80014cc:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80014ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014d0:	b123      	cbz	r3, 80014dc <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80014dc:	6822      	ldr	r2, [r4, #0]
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014e6:	2000      	movs	r0, #0
 80014e8:	e7de      	b.n	80014a8 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80014ea:	2002      	movs	r0, #2
 80014ec:	e7dc      	b.n	80014a8 <HAL_DMA_Start_IT+0x24>
	...

080014f0 <HAL_DMA_IRQHandler>:
{
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014fa:	4b72      	ldr	r3, [pc, #456]	; (80016c4 <HAL_DMA_IRQHandler+0x1d4>)
 80014fc:	681d      	ldr	r5, [r3, #0]
 80014fe:	4b72      	ldr	r3, [pc, #456]	; (80016c8 <HAL_DMA_IRQHandler+0x1d8>)
 8001500:	fba3 3505 	umull	r3, r5, r3, r5
 8001504:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001506:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001508:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800150a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800150c:	2308      	movs	r3, #8
 800150e:	4093      	lsls	r3, r2
 8001510:	4233      	tst	r3, r6
 8001512:	d010      	beq.n	8001536 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001514:	6803      	ldr	r3, [r0, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	f012 0f04 	tst.w	r2, #4
 800151c:	d00b      	beq.n	8001536 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	f022 0204 	bic.w	r2, r2, #4
 8001524:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001526:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001528:	2308      	movs	r3, #8
 800152a:	4093      	lsls	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800152e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001536:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001538:	2301      	movs	r3, #1
 800153a:	4093      	lsls	r3, r2
 800153c:	4233      	tst	r3, r6
 800153e:	d009      	beq.n	8001554 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	6952      	ldr	r2, [r2, #20]
 8001544:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001548:	d004      	beq.n	8001554 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800154a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800154c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001554:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001556:	2304      	movs	r3, #4
 8001558:	4093      	lsls	r3, r2
 800155a:	4233      	tst	r3, r6
 800155c:	d009      	beq.n	8001572 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f012 0f02 	tst.w	r2, #2
 8001566:	d004      	beq.n	8001572 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001568:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800156a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001572:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001574:	2310      	movs	r3, #16
 8001576:	4093      	lsls	r3, r2
 8001578:	4233      	tst	r3, r6
 800157a:	d024      	beq.n	80015c6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800157c:	6822      	ldr	r2, [r4, #0]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	f012 0f08 	tst.w	r2, #8
 8001584:	d01f      	beq.n	80015c6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001586:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001590:	d00d      	beq.n	80015ae <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001598:	d104      	bne.n	80015a4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800159a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800159c:	b19b      	cbz	r3, 80015c6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800159e:	4620      	mov	r0, r4
 80015a0:	4798      	blx	r3
 80015a2:	e010      	b.n	80015c6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80015a6:	b173      	cbz	r3, 80015c6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80015a8:	4620      	mov	r0, r4
 80015aa:	4798      	blx	r3
 80015ac:	e00b      	b.n	80015c6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80015b4:	d103      	bne.n	80015be <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	f022 0208 	bic.w	r2, r2, #8
 80015bc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80015be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015c0:	b10b      	cbz	r3, 80015c6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80015c2:	4620      	mov	r0, r4
 80015c4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015c8:	2320      	movs	r3, #32
 80015ca:	4093      	lsls	r3, r2
 80015cc:	4233      	tst	r3, r6
 80015ce:	d055      	beq.n	800167c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015d0:	6822      	ldr	r2, [r4, #0]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	f012 0f10 	tst.w	r2, #16
 80015d8:	d050      	beq.n	800167c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015da:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015dc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d00e      	beq.n	8001604 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80015ee:	d033      	beq.n	8001658 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80015f6:	d12a      	bne.n	800164e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80015f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03e      	beq.n	800167c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80015fe:	4620      	mov	r0, r4
 8001600:	4798      	blx	r3
 8001602:	e03b      	b.n	800167c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001604:	6822      	ldr	r2, [r4, #0]
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	f023 0316 	bic.w	r3, r3, #22
 800160c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800160e:	6822      	ldr	r2, [r4, #0]
 8001610:	6953      	ldr	r3, [r2, #20]
 8001612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001616:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800161a:	b1a3      	cbz	r3, 8001646 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	f023 0308 	bic.w	r3, r3, #8
 8001624:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001626:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001628:	233f      	movs	r3, #63	; 0x3f
 800162a:	4093      	lsls	r3, r2
 800162c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800162e:	2300      	movs	r3, #0
 8001630:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001634:	2301      	movs	r3, #1
 8001636:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800163a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800163c:	2b00      	cmp	r3, #0
 800163e:	d03f      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001640:	4620      	mov	r0, r4
 8001642:	4798      	blx	r3
 8001644:	e03c      	b.n	80016c0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001646:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e7      	bne.n	800161c <HAL_DMA_IRQHandler+0x12c>
 800164c:	e7eb      	b.n	8001626 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800164e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001650:	b1a3      	cbz	r3, 800167c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001652:	4620      	mov	r0, r4
 8001654:	4798      	blx	r3
 8001656:	e011      	b.n	800167c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800165e:	d109      	bne.n	8001674 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f022 0210 	bic.w	r2, r2, #16
 8001666:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001668:	2300      	movs	r3, #0
 800166a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800166e:	2301      	movs	r3, #1
 8001670:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001676:	b10b      	cbz	r3, 800167c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001678:	4620      	mov	r0, r4
 800167a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800167c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800167e:	b1fb      	cbz	r3, 80016c0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001680:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001682:	f013 0f01 	tst.w	r3, #1
 8001686:	d017      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001688:	2305      	movs	r3, #5
 800168a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	6813      	ldr	r3, [r2, #0]
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001698:	9b01      	ldr	r3, [sp, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	42ab      	cmp	r3, r5
 80016a0:	d804      	bhi.n	80016ac <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f013 0f01 	tst.w	r3, #1
 80016aa:	d1f5      	bne.n	8001698 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80016ac:	2300      	movs	r3, #0
 80016ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80016b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016ba:	b10b      	cbz	r3, 80016c0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80016bc:	4620      	mov	r0, r4
 80016be:	4798      	blx	r3
}
 80016c0:	b003      	add	sp, #12
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	20000000 	.word	0x20000000
 80016c8:	1b4e81b5 	.word	0x1b4e81b5

080016cc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f200 80d7 	bhi.w	8001882 <HAL_GPIO_Init+0x1b6>
{
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d6:	b083      	sub	sp, #12
 80016d8:	e039      	b.n	800174e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	2207      	movs	r2, #7
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x14>
 80016de:	2200      	movs	r2, #0
 80016e0:	40aa      	lsls	r2, r5
 80016e2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	3402      	adds	r4, #2
 80016e6:	4d67      	ldr	r5, [pc, #412]	; (8001884 <HAL_GPIO_Init+0x1b8>)
 80016e8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ec:	4a66      	ldr	r2, [pc, #408]	; (8001888 <HAL_GPIO_Init+0x1bc>)
 80016ee:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	43f2      	mvns	r2, r6
 80016f2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f6:	684f      	ldr	r7, [r1, #4]
 80016f8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80016fc:	d001      	beq.n	8001702 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80016fe:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8001702:	4c61      	ldr	r4, [pc, #388]	; (8001888 <HAL_GPIO_Init+0x1bc>)
 8001704:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8001706:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001708:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170c:	684f      	ldr	r7, [r1, #4]
 800170e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001712:	d001      	beq.n	8001718 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001714:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8001718:	4c5b      	ldr	r4, [pc, #364]	; (8001888 <HAL_GPIO_Init+0x1bc>)
 800171a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800171e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001722:	684f      	ldr	r7, [r1, #4]
 8001724:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001728:	d001      	beq.n	800172e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800172a:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 800172e:	4c56      	ldr	r4, [pc, #344]	; (8001888 <HAL_GPIO_Init+0x1bc>)
 8001730:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001732:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001734:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001736:	684d      	ldr	r5, [r1, #4]
 8001738:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 800173c:	d001      	beq.n	8001742 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800173e:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8001742:	4c51      	ldr	r4, [pc, #324]	; (8001888 <HAL_GPIO_Init+0x1bc>)
 8001744:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	3301      	adds	r3, #1
 8001748:	2b0f      	cmp	r3, #15
 800174a:	f200 8098 	bhi.w	800187e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 800174e:	2201      	movs	r2, #1
 8001750:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	680c      	ldr	r4, [r1, #0]
 8001754:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8001758:	42b2      	cmp	r2, r6
 800175a:	d1f4      	bne.n	8001746 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800175c:	684c      	ldr	r4, [r1, #4]
 800175e:	1e65      	subs	r5, r4, #1
 8001760:	2d01      	cmp	r5, #1
 8001762:	d903      	bls.n	800176c <HAL_GPIO_Init+0xa0>
 8001764:	2c11      	cmp	r4, #17
 8001766:	d001      	beq.n	800176c <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	2c12      	cmp	r4, #18
 800176a:	d112      	bne.n	8001792 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 800176c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176e:	005f      	lsls	r7, r3, #1
 8001770:	2403      	movs	r4, #3
 8001772:	40bc      	lsls	r4, r7
 8001774:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001778:	68cc      	ldr	r4, [r1, #12]
 800177a:	40bc      	lsls	r4, r7
 800177c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800177e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001780:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001782:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001786:	684c      	ldr	r4, [r1, #4]
 8001788:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001790:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001792:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001794:	005f      	lsls	r7, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	40ba      	lsls	r2, r7
 800179a:	43d2      	mvns	r2, r2
 800179c:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179e:	688d      	ldr	r5, [r1, #8]
 80017a0:	40bd      	lsls	r5, r7
 80017a2:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 80017a4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a6:	684c      	ldr	r4, [r1, #4]
 80017a8:	2c02      	cmp	r4, #2
 80017aa:	d001      	beq.n	80017b0 <HAL_GPIO_Init+0xe4>
 80017ac:	2c12      	cmp	r4, #18
 80017ae:	d113      	bne.n	80017d8 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 80017b0:	08dd      	lsrs	r5, r3, #3
 80017b2:	3508      	adds	r5, #8
 80017b4:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b8:	f003 0407 	and.w	r4, r3, #7
 80017bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80017c0:	240f      	movs	r4, #15
 80017c2:	fa04 f40c 	lsl.w	r4, r4, ip
 80017c6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ca:	690c      	ldr	r4, [r1, #16]
 80017cc:	fa04 f40c 	lsl.w	r4, r4, ip
 80017d0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80017d4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80017d8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017da:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017dc:	684c      	ldr	r4, [r1, #4]
 80017de:	f004 0403 	and.w	r4, r4, #3
 80017e2:	40bc      	lsls	r4, r7
 80017e4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80017e6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e8:	684a      	ldr	r2, [r1, #4]
 80017ea:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80017ee:	d0aa      	beq.n	8001746 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f0:	2200      	movs	r2, #0
 80017f2:	9201      	str	r2, [sp, #4]
 80017f4:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_GPIO_Init+0x1c0>)
 80017f6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80017f8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80017fc:	6454      	str	r4, [r2, #68]	; 0x44
 80017fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001800:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001804:	9201      	str	r2, [sp, #4]
 8001806:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001808:	089c      	lsrs	r4, r3, #2
 800180a:	1ca5      	adds	r5, r4, #2
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_GPIO_Init+0x1b8>)
 800180e:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	0095      	lsls	r5, r2, #2
 8001818:	220f      	movs	r2, #15
 800181a:	40aa      	lsls	r2, r5
 800181c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <HAL_GPIO_Init+0x1c4>)
 8001822:	4290      	cmp	r0, r2
 8001824:	f43f af5b 	beq.w	80016de <HAL_GPIO_Init+0x12>
 8001828:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800182c:	4290      	cmp	r0, r2
 800182e:	d01a      	beq.n	8001866 <HAL_GPIO_Init+0x19a>
 8001830:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001834:	4290      	cmp	r0, r2
 8001836:	d018      	beq.n	800186a <HAL_GPIO_Init+0x19e>
 8001838:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800183c:	4290      	cmp	r0, r2
 800183e:	d016      	beq.n	800186e <HAL_GPIO_Init+0x1a2>
 8001840:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001844:	4290      	cmp	r0, r2
 8001846:	d014      	beq.n	8001872 <HAL_GPIO_Init+0x1a6>
 8001848:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800184c:	4290      	cmp	r0, r2
 800184e:	d012      	beq.n	8001876 <HAL_GPIO_Init+0x1aa>
 8001850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001854:	4290      	cmp	r0, r2
 8001856:	d010      	beq.n	800187a <HAL_GPIO_Init+0x1ae>
 8001858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800185c:	4290      	cmp	r0, r2
 800185e:	f43f af3c 	beq.w	80016da <HAL_GPIO_Init+0xe>
 8001862:	2208      	movs	r2, #8
 8001864:	e73c      	b.n	80016e0 <HAL_GPIO_Init+0x14>
 8001866:	2201      	movs	r2, #1
 8001868:	e73a      	b.n	80016e0 <HAL_GPIO_Init+0x14>
 800186a:	2202      	movs	r2, #2
 800186c:	e738      	b.n	80016e0 <HAL_GPIO_Init+0x14>
 800186e:	2203      	movs	r2, #3
 8001870:	e736      	b.n	80016e0 <HAL_GPIO_Init+0x14>
 8001872:	2204      	movs	r2, #4
 8001874:	e734      	b.n	80016e0 <HAL_GPIO_Init+0x14>
 8001876:	2205      	movs	r2, #5
 8001878:	e732      	b.n	80016e0 <HAL_GPIO_Init+0x14>
 800187a:	2206      	movs	r2, #6
 800187c:	e730      	b.n	80016e0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800187e:	b003      	add	sp, #12
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001882:	4770      	bx	lr
 8001884:	40013800 	.word	0x40013800
 8001888:	40013c00 	.word	0x40013c00
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	b912      	cbnz	r2, 800189c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001896:	0409      	lsls	r1, r1, #16
 8001898:	6181      	str	r1, [r0, #24]
  }
}
 800189a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800189c:	6181      	str	r1, [r0, #24]
 800189e:	4770      	bx	lr

080018a0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80018a8:	d011      	beq.n	80018ce <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80018b4:	2220      	movs	r2, #32
 80018b6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018ba:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80018c0:	f042 0204 	orr.w	r2, r2, #4
 80018c4:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
 80018cc:	4770      	bx	lr
  }
  return HAL_OK;
 80018ce:	2000      	movs	r0, #0
}
 80018d0:	4770      	bx	lr

080018d2 <I2C_WaitOnFlagUntilTimeout>:
{
 80018d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d4:	4606      	mov	r6, r0
 80018d6:	460c      	mov	r4, r1
 80018d8:	4617      	mov	r7, r2
 80018da:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018dc:	e022      	b.n	8001924 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018de:	f7ff f9d1 	bl	8000c84 <HAL_GetTick>
 80018e2:	9b06      	ldr	r3, [sp, #24]
 80018e4:	1ac0      	subs	r0, r0, r3
 80018e6:	42a8      	cmp	r0, r5
 80018e8:	d800      	bhi.n	80018ec <I2C_WaitOnFlagUntilTimeout+0x1a>
 80018ea:	b9dd      	cbnz	r5, 8001924 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80018f0:	2220      	movs	r2, #32
 80018f2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018f6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018fa:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80018fc:	f042 0220 	orr.w	r2, r2, #32
 8001900:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001902:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8001906:	2001      	movs	r0, #1
 8001908:	e01a      	b.n	8001940 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800190a:	6833      	ldr	r3, [r6, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	ea24 0303 	bic.w	r3, r4, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	095b      	lsrs	r3, r3, #5
 800191a:	429f      	cmp	r7, r3
 800191c:	d10f      	bne.n	800193e <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800191e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001922:	d1dc      	bne.n	80018de <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001924:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8001928:	2b01      	cmp	r3, #1
 800192a:	d0ee      	beq.n	800190a <I2C_WaitOnFlagUntilTimeout+0x38>
 800192c:	6833      	ldr	r3, [r6, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	ea24 0303 	bic.w	r3, r4, r3
 8001934:	b29b      	uxth	r3, r3
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	e7ed      	b.n	800191a <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 800193e:	2000      	movs	r0, #0
}
 8001940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001944:	4604      	mov	r4, r0
 8001946:	460d      	mov	r5, r1
 8001948:	4616      	mov	r6, r2
 800194a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800194c:	e03c      	b.n	80019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001954:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800195c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800195e:	2300      	movs	r3, #0
 8001960:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001962:	2220      	movs	r2, #32
 8001964:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001968:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800196c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800196e:	f042 0204 	orr.w	r2, r2, #4
 8001972:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001974:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001978:	2001      	movs	r0, #1
 800197a:	e033      	b.n	80019e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197c:	f7ff f982 	bl	8000c84 <HAL_GetTick>
 8001980:	1bc0      	subs	r0, r0, r7
 8001982:	42b0      	cmp	r0, r6
 8001984:	d800      	bhi.n	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8001986:	b9fe      	cbnz	r6, 80019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800198c:	2220      	movs	r2, #32
 800198e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001992:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001996:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001998:	f042 0220 	orr.w	r2, r2, #32
 800199c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800199e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
 80019a4:	e01e      	b.n	80019e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	ea25 0303 	bic.w	r3, r5, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3300      	adds	r3, #0
 80019b2:	bf18      	it	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	b1a3      	cbz	r3, 80019e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80019c0:	d1c5      	bne.n	800194e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80019c2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80019c6:	d1d9      	bne.n	800197c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019c8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d0ea      	beq.n	80019a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	ea25 0303 	bic.w	r3, r5, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3300      	adds	r3, #0
 80019dc:	bf18      	it	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	e7e9      	b.n	80019b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80019e2:	2000      	movs	r0, #0
}
 80019e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080019e8 <I2C_MasterRequestWrite>:
{
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ea:	b083      	sub	sp, #12
 80019ec:	4604      	mov	r4, r0
 80019ee:	460f      	mov	r7, r1
 80019f0:	4615      	mov	r5, r2
 80019f2:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d00d      	beq.n	8001a16 <I2C_MasterRequestWrite+0x2e>
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d00b      	beq.n	8001a16 <I2C_MasterRequestWrite+0x2e>
 80019fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a02:	d008      	beq.n	8001a16 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d10a      	bne.n	8001a20 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a0a:	6802      	ldr	r2, [r0, #0]
 8001a0c:	6813      	ldr	r3, [r2, #0]
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e004      	b.n	8001a20 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a16:	6822      	ldr	r2, [r4, #0]
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a20:	9600      	str	r6, [sp, #0]
 8001a22:	462b      	mov	r3, r5
 8001a24:	2200      	movs	r2, #0
 8001a26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff ff51 	bl	80018d2 <I2C_WaitOnFlagUntilTimeout>
 8001a30:	b158      	cbz	r0, 8001a4a <I2C_MasterRequestWrite+0x62>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a3a:	d02b      	beq.n	8001a94 <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a40:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	b003      	add	sp, #12
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a4a:	6923      	ldr	r3, [r4, #16]
 8001a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a50:	d10e      	bne.n	8001a70 <I2C_MasterRequestWrite+0x88>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001a58:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a5a:	4633      	mov	r3, r6
 8001a5c:	462a      	mov	r2, r5
 8001a5e:	490f      	ldr	r1, [pc, #60]	; (8001a9c <I2C_MasterRequestWrite+0xb4>)
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff ff6e 	bl	8001942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d0eb      	beq.n	8001a44 <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e7e9      	b.n	8001a44 <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a70:	11fb      	asrs	r3, r7, #7
 8001a72:	6822      	ldr	r2, [r4, #0]
 8001a74:	f003 0306 	and.w	r3, r3, #6
 8001a78:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001a7c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a7e:	4633      	mov	r3, r6
 8001a80:	462a      	mov	r2, r5
 8001a82:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <I2C_MasterRequestWrite+0xb8>)
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff ff5c 	bl	8001942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a8a:	b928      	cbnz	r0, 8001a98 <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	b2ff      	uxtb	r7, r7
 8001a90:	611f      	str	r7, [r3, #16]
 8001a92:	e7e2      	b.n	8001a5a <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e7d5      	b.n	8001a44 <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e7d3      	b.n	8001a44 <I2C_MasterRequestWrite+0x5c>
 8001a9c:	00010002 	.word	0x00010002
 8001aa0:	00010008 	.word	0x00010008

08001aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ab4:	d11c      	bne.n	8001af0 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff fef2 	bl	80018a0 <I2C_IsAcknowledgeFailed>
 8001abc:	b9d0      	cbnz	r0, 8001af4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001abe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001ac2:	d0f3      	beq.n	8001aac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac4:	f7ff f8de 	bl	8000c84 <HAL_GetTick>
 8001ac8:	1b80      	subs	r0, r0, r6
 8001aca:	42a8      	cmp	r0, r5
 8001acc:	d801      	bhi.n	8001ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	d1ec      	bne.n	8001aac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001adc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001ae8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001aec:	2001      	movs	r0, #1
 8001aee:	e000      	b.n	8001af2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001af0:	2000      	movs	r0, #0
}
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001af4:	2001      	movs	r0, #1
 8001af6:	e7fc      	b.n	8001af2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001af8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	4604      	mov	r4, r0
 8001afc:	460d      	mov	r5, r1
 8001afe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f013 0f04 	tst.w	r3, #4
 8001b08:	d11c      	bne.n	8001b44 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fec8 	bl	80018a0 <I2C_IsAcknowledgeFailed>
 8001b10:	b9d0      	cbnz	r0, 8001b48 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001b12:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001b16:	d0f3      	beq.n	8001b00 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b18:	f7ff f8b4 	bl	8000c84 <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	42a8      	cmp	r0, r5
 8001b20:	d801      	bhi.n	8001b26 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001b22:	2d00      	cmp	r5, #0
 8001b24:	d1ec      	bne.n	8001b00 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001b3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001b40:	2001      	movs	r0, #1
 8001b42:	e000      	b.n	8001b46 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001b44:	2000      	movs	r0, #0
}
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
 8001b4a:	e7fc      	b.n	8001b46 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001b4c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	f000 80c8 	beq.w	8001ce2 <HAL_I2C_Init+0x196>
{
 8001b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b54:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d075      	beq.n	8001c4a <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5e:	2324      	movs	r3, #36	; 0x24
 8001b60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	6813      	ldr	r3, [r2, #0]
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b76:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b78:	6822      	ldr	r2, [r4, #0]
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b80:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b82:	f001 f809 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b86:	6862      	ldr	r2, [r4, #4]
 8001b88:	4b58      	ldr	r3, [pc, #352]	; (8001cec <HAL_I2C_Init+0x1a0>)
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d862      	bhi.n	8001c54 <HAL_I2C_Init+0x108>
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <HAL_I2C_Init+0x1a4>)
 8001b90:	4298      	cmp	r0, r3
 8001b92:	bf8c      	ite	hi
 8001b94:	2300      	movhi	r3, #0
 8001b96:	2301      	movls	r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f040 80a4 	bne.w	8001ce6 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8001b9e:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <HAL_I2C_Init+0x1a8>)
 8001ba0:	fba3 2300 	umull	r2, r3, r3, r0
 8001ba4:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ba6:	6821      	ldr	r1, [r4, #0]
 8001ba8:	684a      	ldr	r2, [r1, #4]
 8001baa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bb2:	6825      	ldr	r5, [r4, #0]
 8001bb4:	6a2a      	ldr	r2, [r5, #32]
 8001bb6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001bba:	6866      	ldr	r6, [r4, #4]
 8001bbc:	494b      	ldr	r1, [pc, #300]	; (8001cec <HAL_I2C_Init+0x1a0>)
 8001bbe:	428e      	cmp	r6, r1
 8001bc0:	d84e      	bhi.n	8001c60 <HAL_I2C_Init+0x114>
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bc8:	6825      	ldr	r5, [r4, #0]
 8001bca:	69e9      	ldr	r1, [r5, #28]
 8001bcc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001bd0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001bd4:	6863      	ldr	r3, [r4, #4]
 8001bd6:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_I2C_Init+0x1a0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d84b      	bhi.n	8001c74 <HAL_I2C_Init+0x128>
 8001bdc:	3801      	subs	r0, #1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf38      	it	cc
 8001bee:	2304      	movcc	r3, #4
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bf4:	6821      	ldr	r1, [r4, #0]
 8001bf6:	680b      	ldr	r3, [r1, #0]
 8001bf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001bfc:	69e2      	ldr	r2, [r4, #28]
 8001bfe:	6a20      	ldr	r0, [r4, #32]
 8001c00:	4302      	orrs	r2, r0
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c06:	6821      	ldr	r1, [r4, #0]
 8001c08:	688b      	ldr	r3, [r1, #8]
 8001c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c12:	6922      	ldr	r2, [r4, #16]
 8001c14:	68e0      	ldr	r0, [r4, #12]
 8001c16:	4302      	orrs	r2, r0
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c1c:	6821      	ldr	r1, [r4, #0]
 8001c1e:	68cb      	ldr	r3, [r1, #12]
 8001c20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c24:	6962      	ldr	r2, [r4, #20]
 8001c26:	69a0      	ldr	r0, [r4, #24]
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001c2e:	6822      	ldr	r2, [r4, #0]
 8001c30:	6813      	ldr	r3, [r2, #0]
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c38:	2000      	movs	r0, #0
 8001c3a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c42:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001c4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c4e:	f7fe fe81 	bl	8000954 <HAL_I2C_MspInit>
 8001c52:	e784      	b.n	8001b5e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <HAL_I2C_Init+0x1ac>)
 8001c56:	4298      	cmp	r0, r3
 8001c58:	bf8c      	ite	hi
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	e79b      	b.n	8001b98 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c60:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4924      	ldr	r1, [pc, #144]	; (8001cfc <HAL_I2C_Init+0x1b0>)
 8001c6a:	fba1 1303 	umull	r1, r3, r1, r3
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	3301      	adds	r3, #1
 8001c72:	e7a7      	b.n	8001bc4 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c74:	68a2      	ldr	r2, [r4, #8]
 8001c76:	b9ba      	cbnz	r2, 8001ca8 <HAL_I2C_Init+0x15c>
 8001c78:	1e46      	subs	r6, r0, #1
 8001c7a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001c7e:	fbb6 f6f7 	udiv	r6, r6, r7
 8001c82:	3601      	adds	r6, #1
 8001c84:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001c88:	fab6 f686 	clz	r6, r6
 8001c8c:	0976      	lsrs	r6, r6, #5
 8001c8e:	bb36      	cbnz	r6, 8001cde <HAL_I2C_Init+0x192>
 8001c90:	b9c2      	cbnz	r2, 8001cc4 <HAL_I2C_Init+0x178>
 8001c92:	3801      	subs	r0, #1
 8001c94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001ca2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001ca6:	e7a3      	b.n	8001bf0 <HAL_I2C_Init+0xa4>
 8001ca8:	1e46      	subs	r6, r0, #1
 8001caa:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001cae:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001cb2:	fbb6 f6f7 	udiv	r6, r6, r7
 8001cb6:	3601      	adds	r6, #1
 8001cb8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001cbc:	fab6 f686 	clz	r6, r6
 8001cc0:	0976      	lsrs	r6, r6, #5
 8001cc2:	e7e4      	b.n	8001c8e <HAL_I2C_Init+0x142>
 8001cc4:	3801      	subs	r0, #1
 8001cc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cce:	fbb0 f2f3 	udiv	r2, r0, r3
 8001cd2:	3201      	adds	r2, #1
 8001cd4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001cd8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001cdc:	e788      	b.n	8001bf0 <HAL_I2C_Init+0xa4>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e786      	b.n	8001bf0 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8001ce2:	2001      	movs	r0, #1
}
 8001ce4:	4770      	bx	lr
    return HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e7ae      	b.n	8001c48 <HAL_I2C_Init+0xfc>
 8001cea:	bf00      	nop
 8001cec:	000186a0 	.word	0x000186a0
 8001cf0:	001e847f 	.word	0x001e847f
 8001cf4:	431bde83 	.word	0x431bde83
 8001cf8:	003d08ff 	.word	0x003d08ff
 8001cfc:	10624dd3 	.word	0x10624dd3

08001d00 <HAL_I2C_Master_Transmit>:
{
 8001d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	4604      	mov	r4, r0
 8001d08:	460e      	mov	r6, r1
 8001d0a:	4690      	mov	r8, r2
 8001d0c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8001d0e:	f7fe ffb9 	bl	8000c84 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d12:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	d004      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8001d1c:	2602      	movs	r6, #2
}
 8001d1e:	4630      	mov	r0, r6
 8001d20:	b004      	add	sp, #16
 8001d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d26:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d28:	9000      	str	r0, [sp, #0]
 8001d2a:	2319      	movs	r3, #25
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	494f      	ldr	r1, [pc, #316]	; (8001e6c <HAL_I2C_Master_Transmit+0x16c>)
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7ff fdce 	bl	80018d2 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	f040 8091 	bne.w	8001e5e <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8001d3c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	f000 808e 	beq.w	8001e62 <HAL_I2C_Master_Transmit+0x162>
 8001d46:	2301      	movs	r3, #1
 8001d48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f012 0f01 	tst.w	r2, #1
 8001d54:	d103      	bne.n	8001d5e <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	6813      	ldr	r3, [r2, #0]
 8001d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d66:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d68:	2321      	movs	r3, #33	; 0x21
 8001d6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d6e:	2310      	movs	r3, #16
 8001d70:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001d78:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d7c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d80:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_I2C_Master_Transmit+0x170>)
 8001d84:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d86:	462b      	mov	r3, r5
 8001d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d8a:	4631      	mov	r1, r6
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fe2b 	bl	80019e8 <I2C_MasterRequestWrite>
 8001d92:	4606      	mov	r6, r0
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d166      	bne.n	8001e66 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9303      	str	r3, [sp, #12]
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	9203      	str	r2, [sp, #12]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	9303      	str	r3, [sp, #12]
 8001da6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001da8:	e012      	b.n	8001dd0 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8001db0:	2601      	movs	r6, #1
 8001db2:	e7b4      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	6822      	ldr	r2, [r4, #0]
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dbc:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8001dbe:	2601      	movs	r6, #1
 8001dc0:	e7ad      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc2:	462a      	mov	r2, r5
 8001dc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff fe96 	bl	8001af8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d12c      	bne.n	8001e2a <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8001dd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d035      	beq.n	8001e42 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	462a      	mov	r2, r5
 8001dd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff fe62 	bl	8001aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d1e2      	bne.n	8001daa <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001dec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dee:	1c4b      	adds	r3, r1, #1
 8001df0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001df2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001dfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6950      	ldr	r0, [r2, #20]
 8001e06:	f010 0f04 	tst.w	r0, #4
 8001e0a:	d0da      	beq.n	8001dc2 <HAL_I2C_Master_Transmit+0xc2>
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0d8      	beq.n	8001dc2 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e10:	784b      	ldrb	r3, [r1, #1]
 8001e12:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e16:	3301      	adds	r3, #1
 8001e18:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001e1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001e22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e24:	3b01      	subs	r3, #1
 8001e26:	8523      	strh	r3, [r4, #40]	; 0x28
 8001e28:	e7cb      	b.n	8001dc2 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d001      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8001e30:	2601      	movs	r6, #1
 8001e32:	e774      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8001e3e:	2601      	movs	r6, #1
 8001e40:	e76d      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	6813      	ldr	r3, [r2, #0]
 8001e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001e58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001e5c:	e75f      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8001e5e:	2602      	movs	r6, #2
 8001e60:	e75d      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001e62:	2602      	movs	r6, #2
 8001e64:	e75b      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8001e66:	2601      	movs	r6, #1
 8001e68:	e759      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1e>
 8001e6a:	bf00      	nop
 8001e6c:	00100002 	.word	0x00100002
 8001e70:	ffff0000 	.word	0xffff0000

08001e74 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001e74:	2800      	cmp	r0, #0
 8001e76:	f000 80bf 	beq.w	8001ff8 <HAL_I2S_Init+0x184>
{
 8001e7a:	b570      	push	{r4, r5, r6, lr}
 8001e7c:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d051      	beq.n	8001f2a <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e86:	2202      	movs	r2, #2
 8001e88:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e8c:	6821      	ldr	r1, [r4, #0]
 8001e8e:	69cb      	ldr	r3, [r1, #28]
 8001e90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e94:	f023 030f 	bic.w	r3, r3, #15
 8001e98:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e9e:	6963      	ldr	r3, [r4, #20]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d063      	beq.n	8001f6c <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ea4:	68e3      	ldr	r3, [r4, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d146      	bne.n	8001f38 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001eaa:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001eac:	68a3      	ldr	r3, [r4, #8]
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d800      	bhi.n	8001eb4 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001eb2:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f000 ff39 	bl	8002d2c <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001eba:	6923      	ldr	r3, [r4, #16]
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec0:	d03c      	beq.n	8001f3c <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ec2:	fbb0 f0f5 	udiv	r0, r0, r5
 8001ec6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001eca:	0043      	lsls	r3, r0, #1
 8001ecc:	6962      	ldr	r2, [r4, #20]
 8001ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ed2:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ed4:	4a49      	ldr	r2, [pc, #292]	; (8001ffc <HAL_I2S_Init+0x188>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001edc:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ee4:	0212      	lsls	r2, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ee6:	1e99      	subs	r1, r3, #2
 8001ee8:	29fd      	cmp	r1, #253	; 0xfd
 8001eea:	d841      	bhi.n	8001f70 <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001eec:	6921      	ldr	r1, [r4, #16]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	6821      	ldr	r1, [r4, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ef6:	6821      	ldr	r1, [r4, #0]
 8001ef8:	69cb      	ldr	r3, [r1, #28]
 8001efa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001efe:	f023 030f 	bic.w	r3, r3, #15
 8001f02:	6862      	ldr	r2, [r4, #4]
 8001f04:	68a0      	ldr	r0, [r4, #8]
 8001f06:	4302      	orrs	r2, r0
 8001f08:	68e0      	ldr	r0, [r4, #12]
 8001f0a:	4302      	orrs	r2, r0
 8001f0c:	69a0      	ldr	r0, [r4, #24]
 8001f0e:	4302      	orrs	r2, r0
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f16:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f18:	6a23      	ldr	r3, [r4, #32]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d02e      	beq.n	8001f7c <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f1e:	2000      	movs	r0, #0
 8001f20:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8001f2a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_I2S_Init+0x18c>)
 8001f30:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8001f32:	f7fe fd49 	bl	80009c8 <HAL_I2S_MspInit>
 8001f36:	e7a6      	b.n	8001e86 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8001f38:	2520      	movs	r5, #32
 8001f3a:	e7b7      	b.n	8001eac <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f3c:	68e3      	ldr	r3, [r4, #12]
 8001f3e:	b153      	cbz	r3, 8001f56 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f40:	00ad      	lsls	r5, r5, #2
 8001f42:	fbb0 f0f5 	udiv	r0, r0, r5
 8001f46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f4a:	0043      	lsls	r3, r0, #1
 8001f4c:	6962      	ldr	r2, [r4, #20]
 8001f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f52:	3305      	adds	r3, #5
 8001f54:	e7be      	b.n	8001ed4 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f56:	00ed      	lsls	r5, r5, #3
 8001f58:	fbb0 f0f5 	udiv	r0, r0, r5
 8001f5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f60:	0043      	lsls	r3, r0, #1
 8001f62:	6962      	ldr	r2, [r4, #20]
 8001f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f68:	3305      	adds	r3, #5
 8001f6a:	e7b3      	b.n	8001ed4 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	e7ba      	b.n	8001ee6 <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8001f78:	2001      	movs	r0, #1
 8001f7a:	e7d5      	b.n	8001f28 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_I2S_Init+0x190>)
 8001f7e:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_I2S_Init+0x194>)
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d01f      	beq.n	8001fc8 <HAL_I2S_Init+0x154>
 8001f88:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f8c:	69d3      	ldr	r3, [r2, #28]
 8001f8e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f92:	f023 030f 	bic.w	r3, r3, #15
 8001f96:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_I2S_Init+0x194>)
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d015      	beq.n	8001fcc <HAL_I2S_Init+0x158>
 8001fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_I2S_Init+0x194>)
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d010      	beq.n	8001fd2 <HAL_I2S_Init+0x15e>
 8001fb0:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8001fb4:	69ca      	ldr	r2, [r1, #28]
 8001fb6:	b292      	uxth	r2, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fb8:	6863      	ldr	r3, [r4, #4]
 8001fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_I2S_Init+0x162>
 8001fc0:	b9c3      	cbnz	r3, 8001ff4 <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 8001fc2:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001fc6:	e008      	b.n	8001fda <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fc8:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_I2S_Init+0x198>)
 8001fca:	e7df      	b.n	8001f8c <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001fcc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001fd0:	e7e8      	b.n	8001fa4 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <HAL_I2S_Init+0x198>)
 8001fd4:	e7ee      	b.n	8001fb4 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8001fd6:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fda:	68a0      	ldr	r0, [r4, #8]
 8001fdc:	68e5      	ldr	r5, [r4, #12]
                                    (uint16_t)hi2s->Init.CPOL))));
 8001fde:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fe0:	432b      	orrs	r3, r5
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4303      	orrs	r3, r0
 8001fe6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fe8:	4333      	orrs	r3, r6
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ff0:	61cb      	str	r3, [r1, #28]
 8001ff2:	e794      	b.n	8001f1e <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	e7f0      	b.n	8001fda <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8001ff8:	2001      	movs	r0, #1
}
 8001ffa:	4770      	bx	lr
 8001ffc:	cccccccd 	.word	0xcccccccd
 8002000:	0800218f 	.word	0x0800218f
 8002004:	080023c1 	.word	0x080023c1
 8002008:	40003800 	.word	0x40003800
 800200c:	40003400 	.word	0x40003400

08002010 <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002010:	2900      	cmp	r1, #0
 8002012:	d05d      	beq.n	80020d0 <HAL_I2S_Transmit_DMA+0xc0>
{
 8002014:	b510      	push	{r4, lr}
  if ((pData == NULL) || (Size == 0U))
 8002016:	2a00      	cmp	r2, #0
 8002018:	d05d      	beq.n	80020d6 <HAL_I2S_Transmit_DMA+0xc6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800201a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d05b      	beq.n	80020dc <HAL_I2S_Transmit_DMA+0xcc>
 8002024:	2301      	movs	r3, #1
 8002026:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800202a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d110      	bne.n	8002056 <HAL_I2S_Transmit_DMA+0x46>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002034:	2303      	movs	r3, #3
 8002036:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800203a:	2300      	movs	r3, #0
 800203c:	6443      	str	r3, [r0, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800203e:	6241      	str	r1, [r0, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002040:	6803      	ldr	r3, [r0, #0]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002048:	2b03      	cmp	r3, #3
 800204a:	d009      	beq.n	8002060 <HAL_I2S_Transmit_DMA+0x50>
 800204c:	2b05      	cmp	r3, #5
 800204e:	d007      	beq.n	8002060 <HAL_I2S_Transmit_DMA+0x50>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002050:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002052:	8542      	strh	r2, [r0, #42]	; 0x2a
 8002054:	e008      	b.n	8002068 <HAL_I2S_Transmit_DMA+0x58>
    __HAL_UNLOCK(hi2s);
 8002056:	2300      	movs	r3, #0
 8002058:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
 800205e:	e03b      	b.n	80020d8 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 8002060:	0052      	lsls	r2, r2, #1
 8002062:	b292      	uxth	r2, r2
 8002064:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002066:	8542      	strh	r2, [r0, #42]	; 0x2a
 8002068:	4604      	mov	r4, r0
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800206a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_I2S_Transmit_DMA+0xd0>)
 800206e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002070:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_I2S_Transmit_DMA+0xd4>)
 8002074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002076:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_I2S_Transmit_DMA+0xd8>)
 800207a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
 800207c:	6802      	ldr	r2, [r0, #0]
                                 hi2s->TxXferSize))
 800207e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002080:	320c      	adds	r2, #12
 8002082:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002084:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002086:	f7ff f9fd 	bl	8001484 <HAL_DMA_Start_IT>
 800208a:	4603      	mov	r3, r0
 800208c:	b9a8      	cbnz	r0, 80020ba <HAL_I2S_Transmit_DMA+0xaa>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800208e:	6822      	ldr	r2, [r4, #0]
 8002090:	69d1      	ldr	r1, [r2, #28]
 8002092:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8002096:	d103      	bne.n	80020a0 <HAL_I2S_Transmit_DMA+0x90>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002098:	69d1      	ldr	r1, [r2, #28]
 800209a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800209e:	61d1      	str	r1, [r2, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80020a0:	6822      	ldr	r2, [r4, #0]
 80020a2:	6851      	ldr	r1, [r2, #4]
 80020a4:	f011 0f02 	tst.w	r1, #2
 80020a8:	d103      	bne.n	80020b2 <HAL_I2S_Transmit_DMA+0xa2>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80020aa:	6851      	ldr	r1, [r2, #4]
 80020ac:	f041 0102 	orr.w	r1, r1, #2
 80020b0:	6051      	str	r1, [r2, #4]
  }

  __HAL_UNLOCK(hi2s);
 80020b2:	2200      	movs	r2, #0
 80020b4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  return HAL_OK;
 80020b8:	e00e      	b.n	80020d8 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80020ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80020c8:	2200      	movs	r2, #0
 80020ca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_ERROR;
 80020ce:	e003      	b.n	80020d8 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	4770      	bx	lr
    return  HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hi2s);
 80020dc:	2302      	movs	r3, #2
 80020de:	e7fb      	b.n	80020d8 <HAL_I2S_Transmit_DMA+0xc8>
 80020e0:	080020ef 	.word	0x080020ef
 80020e4:	08002131 	.word	0x08002131
 80020e8:	0800225f 	.word	0x0800225f

080020ec <HAL_I2S_TxHalfCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80020ec:	4770      	bx	lr

080020ee <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80020ee:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80020f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80020f2:	f7ff fffb 	bl	80020ec <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80020f6:	bd08      	pop	{r3, pc}

080020f8 <HAL_I2S_TxCpltCallback>:
}
 80020f8:	4770      	bx	lr

080020fa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80020fa:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80020fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80020fe:	6803      	ldr	r3, [r0, #0]
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002104:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002106:	3302      	adds	r3, #2
 8002108:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 800210a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800210c:	3b01      	subs	r3, #1
 800210e:	b29b      	uxth	r3, r3
 8002110:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002112:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	b103      	cbz	r3, 800211a <I2S_Transmit_IT+0x20>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002118:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800211a:	6802      	ldr	r2, [r0, #0]
 800211c:	6853      	ldr	r3, [r2, #4]
 800211e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002122:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002124:	2301      	movs	r3, #1
 8002126:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800212a:	f7ff ffe5 	bl	80020f8 <HAL_I2S_TxCpltCallback>
}
 800212e:	e7f3      	b.n	8002118 <I2S_Transmit_IT+0x1e>

08002130 <I2S_DMATxCplt>:
{
 8002130:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002132:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002134:	69c2      	ldr	r2, [r0, #28]
 8002136:	b94a      	cbnz	r2, 800214c <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	684a      	ldr	r2, [r1, #4]
 800213c:	f022 0202 	bic.w	r2, r2, #2
 8002140:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 8002142:	2200      	movs	r2, #0
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ffd3 	bl	80020f8 <HAL_I2S_TxCpltCallback>
}
 8002152:	bd08      	pop	{r3, pc}

08002154 <HAL_I2S_RxCpltCallback>:
}
 8002154:	4770      	bx	lr

08002156 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002156:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002158:	6803      	ldr	r3, [r0, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800215e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002160:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002162:	3302      	adds	r3, #2
 8002164:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002166:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002168:	3b01      	subs	r3, #1
 800216a:	b29b      	uxth	r3, r3
 800216c:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800216e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002170:	b29b      	uxth	r3, r3
 8002172:	b103      	cbz	r3, 8002176 <I2S_Receive_IT+0x20>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002174:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002176:	6802      	ldr	r2, [r0, #0]
 8002178:	6853      	ldr	r3, [r2, #4]
 800217a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800217e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002180:	2301      	movs	r3, #1
 8002182:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002186:	f7ff ffe5 	bl	8002154 <HAL_I2S_RxCpltCallback>
}
 800218a:	e7f3      	b.n	8002174 <I2S_Receive_IT+0x1e>

0800218c <HAL_I2S_ErrorCallback>:
}
 800218c:	4770      	bx	lr

0800218e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800218e:	b510      	push	{r4, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002194:	6802      	ldr	r2, [r0, #0]
 8002196:	6893      	ldr	r3, [r2, #8]
 8002198:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800219a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d006      	beq.n	80021b2 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80021a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d02c      	beq.n	8002208 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021ae:	b004      	add	sp, #16
 80021b0:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80021b2:	9b03      	ldr	r3, [sp, #12]
 80021b4:	f013 0f01 	tst.w	r3, #1
 80021b8:	d003      	beq.n	80021c2 <I2S_IRQHandler+0x34>
 80021ba:	6853      	ldr	r3, [r2, #4]
 80021bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80021c0:	d11f      	bne.n	8002202 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80021c8:	d0ec      	beq.n	80021a4 <I2S_IRQHandler+0x16>
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	f012 0f20 	tst.w	r2, #32
 80021d2:	d0e7      	beq.n	80021a4 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021da:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021dc:	2300      	movs	r3, #0
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	9201      	str	r2, [sp, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff ffc6 	bl	800218c <HAL_I2S_ErrorCallback>
 8002200:	e7d0      	b.n	80021a4 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8002202:	f7ff ffa8 	bl	8002156 <I2S_Receive_IT>
 8002206:	e7dc      	b.n	80021c2 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002208:	9b03      	ldr	r3, [sp, #12]
 800220a:	f013 0f02 	tst.w	r3, #2
 800220e:	d004      	beq.n	800221a <I2S_IRQHandler+0x8c>
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002218:	d11d      	bne.n	8002256 <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800221a:	9b03      	ldr	r3, [sp, #12]
 800221c:	f013 0f08 	tst.w	r3, #8
 8002220:	d0c5      	beq.n	80021ae <I2S_IRQHandler+0x20>
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	f012 0f20 	tst.w	r2, #32
 800222a:	d0c0      	beq.n	80021ae <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002232:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002234:	2300      	movs	r3, #0
 8002236:	9302      	str	r3, [sp, #8]
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002240:	2301      	movs	r3, #1
 8002242:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002246:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ff9c 	bl	800218c <HAL_I2S_ErrorCallback>
}
 8002254:	e7ab      	b.n	80021ae <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff ff4f 	bl	80020fa <I2S_Transmit_IT>
 800225c:	e7dd      	b.n	800221a <I2S_IRQHandler+0x8c>

0800225e <I2S_DMAError>:
{
 800225e:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002260:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002262:	6802      	ldr	r2, [r0, #0]
 8002264:	6853      	ldr	r3, [r2, #4]
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002270:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8002272:	2301      	movs	r3, #1
 8002274:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002278:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800227a:	f043 0308 	orr.w	r3, r3, #8
 800227e:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8002280:	f7ff ff84 	bl	800218c <HAL_I2S_ErrorCallback>
}
 8002284:	bd08      	pop	{r3, pc}

08002286 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002286:	4770      	bx	lr

08002288 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002288:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800228a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800228c:	1c9a      	adds	r2, r3, #2
 800228e:	6242      	str	r2, [r0, #36]	; 0x24
 8002290:	6802      	ldr	r2, [r0, #0]
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002296:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002298:	3b01      	subs	r3, #1
 800229a:	b29b      	uxth	r3, r3
 800229c:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800229e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	b93b      	cbnz	r3, 80022b4 <I2SEx_TxISR_I2S+0x2c>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022a4:	6802      	ldr	r2, [r0, #0]
 80022a6:	6853      	ldr	r3, [r2, #4]
 80022a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022ac:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80022ae:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b103      	cbz	r3, 80022b6 <I2SEx_TxISR_I2S+0x2e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022b4:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022bc:	f7ff ffe3 	bl	8002286 <HAL_I2SEx_TxRxCpltCallback>
}
 80022c0:	e7f8      	b.n	80022b4 <I2SEx_TxISR_I2S+0x2c>
	...

080022c4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022c4:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80022c6:	6802      	ldr	r2, [r0, #0]
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <I2SEx_RxISR_I2SExt+0x58>)
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d01b      	beq.n	8002306 <I2SEx_RxISR_I2SExt+0x42>
 80022ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80022d6:	1c99      	adds	r1, r3, #2
 80022d8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80022da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022dc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022e4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	b963      	cbnz	r3, 8002304 <I2SEx_RxISR_I2SExt+0x40>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022ea:	6802      	ldr	r2, [r0, #0]
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <I2SEx_RxISR_I2SExt+0x58>)
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d00c      	beq.n	800230c <I2SEx_RxISR_I2SExt+0x48>
 80022f2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80022f6:	6853      	ldr	r3, [r2, #4]
 80022f8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80022fc:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80022fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	b12b      	cbz	r3, 8002310 <I2SEx_RxISR_I2SExt+0x4c>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002304:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002306:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800230a:	e7e2      	b.n	80022d2 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <I2SEx_RxISR_I2SExt+0x5c>)
 800230e:	e7f2      	b.n	80022f6 <I2SEx_RxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8002310:	2301      	movs	r3, #1
 8002312:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002316:	f7ff ffb6 	bl	8002286 <HAL_I2SEx_TxRxCpltCallback>
}
 800231a:	e7f3      	b.n	8002304 <I2SEx_RxISR_I2SExt+0x40>
 800231c:	40003800 	.word	0x40003800
 8002320:	40003400 	.word	0x40003400

08002324 <I2SEx_TxISR_I2SExt>:
{
 8002324:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002326:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002328:	1c9a      	adds	r2, r3, #2
 800232a:	6242      	str	r2, [r0, #36]	; 0x24
 800232c:	881a      	ldrh	r2, [r3, #0]
 800232e:	6801      	ldr	r1, [r0, #0]
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <I2SEx_TxISR_I2SExt+0x58>)
 8002332:	4299      	cmp	r1, r3
 8002334:	d017      	beq.n	8002366 <I2SEx_TxISR_I2SExt+0x42>
 8002336:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800233a:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800233c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800233e:	3b01      	subs	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002344:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	b963      	cbnz	r3, 8002364 <I2SEx_TxISR_I2SExt+0x40>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800234a:	6802      	ldr	r2, [r0, #0]
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <I2SEx_TxISR_I2SExt+0x58>)
 800234e:	429a      	cmp	r2, r3
 8002350:	d00c      	beq.n	800236c <I2SEx_TxISR_I2SExt+0x48>
 8002352:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002356:	6853      	ldr	r3, [r2, #4]
 8002358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800235c:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 800235e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002360:	b29b      	uxth	r3, r3
 8002362:	b12b      	cbz	r3, 8002370 <I2SEx_TxISR_I2SExt+0x4c>
}
 8002364:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002366:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800236a:	e7e6      	b.n	800233a <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <I2SEx_TxISR_I2SExt+0x5c>)
 800236e:	e7f2      	b.n	8002356 <I2SEx_TxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8002370:	2301      	movs	r3, #1
 8002372:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002376:	f7ff ff86 	bl	8002286 <HAL_I2SEx_TxRxCpltCallback>
}
 800237a:	e7f3      	b.n	8002364 <I2SEx_TxISR_I2SExt+0x40>
 800237c:	40003800 	.word	0x40003800
 8002380:	40003400 	.word	0x40003400

08002384 <I2SEx_RxISR_I2S>:
{
 8002384:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002386:	6803      	ldr	r3, [r0, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800238c:	1c99      	adds	r1, r3, #2
 800238e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002390:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002392:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002394:	3b01      	subs	r3, #1
 8002396:	b29b      	uxth	r3, r3
 8002398:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800239a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800239c:	b29b      	uxth	r3, r3
 800239e:	b93b      	cbnz	r3, 80023b0 <I2SEx_RxISR_I2S+0x2c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023a0:	6802      	ldr	r2, [r0, #0]
 80023a2:	6853      	ldr	r3, [r2, #4]
 80023a4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80023a8:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80023aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b103      	cbz	r3, 80023b2 <I2SEx_RxISR_I2S+0x2e>
}
 80023b0:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023b8:	f7ff ff65 	bl	8002286 <HAL_I2SEx_TxRxCpltCallback>
}
 80023bc:	e7f8      	b.n	80023b0 <I2SEx_RxISR_I2S+0x2c>
	...

080023c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80023c0:	b510      	push	{r4, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80023c6:	6803      	ldr	r3, [r0, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80023cc:	4a70      	ldr	r2, [pc, #448]	; (8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d06f      	beq.n	80024b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80023d2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80023d6:	6891      	ldr	r1, [r2, #8]
 80023d8:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80023de:	6853      	ldr	r3, [r2, #4]
 80023e0:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023e2:	6863      	ldr	r3, [r4, #4]
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e8:	d001      	beq.n	80023ee <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d170      	bne.n	80024d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80023ee:	9b05      	ldr	r3, [sp, #20]
 80023f0:	f013 0f02 	tst.w	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80023f6:	9b03      	ldr	r3, [sp, #12]
 80023f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80023fc:	d15c      	bne.n	80024b8 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80023fe:	9b04      	ldr	r3, [sp, #16]
 8002400:	f013 0f01 	tst.w	r3, #1
 8002404:	d003      	beq.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8002406:	9b02      	ldr	r3, [sp, #8]
 8002408:	f013 0f40 	tst.w	r3, #64	; 0x40
 800240c:	d158      	bne.n	80024c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800240e:	9b04      	ldr	r3, [sp, #16]
 8002410:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002414:	d024      	beq.n	8002460 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 8002416:	9b02      	ldr	r3, [sp, #8]
 8002418:	f013 0f20 	tst.w	r3, #32
 800241c:	d020      	beq.n	8002460 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	4b5b      	ldr	r3, [pc, #364]	; (8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002422:	429a      	cmp	r2, r3
 8002424:	d050      	beq.n	80024c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8002426:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800242a:	6853      	ldr	r3, [r2, #4]
 800242c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002430:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002432:	6822      	ldr	r2, [r4, #0]
 8002434:	6853      	ldr	r3, [r2, #4]
 8002436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800243a:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800243c:	2300      	movs	r3, #0
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	9200      	str	r2, [sp, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 800244c:	2301      	movs	r3, #1
 800244e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002452:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff fe96 	bl	800218c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002460:	9b05      	ldr	r3, [sp, #20]
 8002462:	f013 0f08 	tst.w	r3, #8
 8002466:	d022      	beq.n	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8002468:	9b03      	ldr	r3, [sp, #12]
 800246a:	f013 0f20 	tst.w	r3, #32
 800246e:	d01e      	beq.n	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002470:	6822      	ldr	r2, [r4, #0]
 8002472:	6853      	ldr	r3, [r2, #4]
 8002474:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002478:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800247a:	6822      	ldr	r2, [r4, #0]
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800247e:	429a      	cmp	r2, r3
 8002480:	d024      	beq.n	80024cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002482:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002486:	6853      	ldr	r3, [r2, #4]
 8002488:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800248c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800248e:	2300      	movs	r3, #0
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800249a:	2301      	movs	r3, #1
 800249c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff fe6f 	bl	800218c <HAL_I2S_ErrorCallback>
}
 80024ae:	b006      	add	sp, #24
 80024b0:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80024b2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80024b6:	e78e      	b.n	80023d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 80024b8:	4620      	mov	r0, r4
 80024ba:	f7ff fee5 	bl	8002288 <I2SEx_TxISR_I2S>
 80024be:	e79e      	b.n	80023fe <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff feff 	bl	80022c4 <I2SEx_RxISR_I2SExt>
 80024c6:	e7a2      	b.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024c8:	4a32      	ldr	r2, [pc, #200]	; (8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80024ca:	e7ae      	b.n	800242a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80024ce:	e7da      	b.n	8002486 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80024d0:	9b04      	ldr	r3, [sp, #16]
 80024d2:	f013 0f02 	tst.w	r3, #2
 80024d6:	d003      	beq.n	80024e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 80024d8:	9b02      	ldr	r3, [sp, #8]
 80024da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80024de:	d14a      	bne.n	8002576 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80024e0:	9b05      	ldr	r3, [sp, #20]
 80024e2:	f013 0f01 	tst.w	r3, #1
 80024e6:	d003      	beq.n	80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80024e8:	9b03      	ldr	r3, [sp, #12]
 80024ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024ee:	d146      	bne.n	800257e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024f0:	9b05      	ldr	r3, [sp, #20]
 80024f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024f6:	d01c      	beq.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 80024f8:	9b03      	ldr	r3, [sp, #12]
 80024fa:	f013 0f20 	tst.w	r3, #32
 80024fe:	d018      	beq.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002500:	6822      	ldr	r2, [r4, #0]
 8002502:	6853      	ldr	r3, [r2, #4]
 8002504:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002508:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800250a:	6822      	ldr	r2, [r4, #0]
 800250c:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800250e:	429a      	cmp	r2, r3
 8002510:	d039      	beq.n	8002586 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8002512:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002516:	6853      	ldr	r3, [r2, #4]
 8002518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800251c:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800251e:	2301      	movs	r3, #1
 8002520:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002524:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800252c:	4620      	mov	r0, r4
 800252e:	f7ff fe2d 	bl	800218c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002532:	9b04      	ldr	r3, [sp, #16]
 8002534:	f013 0f08 	tst.w	r3, #8
 8002538:	d0b9      	beq.n	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 800253a:	9b02      	ldr	r3, [sp, #8]
 800253c:	f013 0f20 	tst.w	r3, #32
 8002540:	d0b5      	beq.n	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002542:	6822      	ldr	r2, [r4, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002546:	429a      	cmp	r2, r3
 8002548:	d01f      	beq.n	800258a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 800254a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800254e:	6853      	ldr	r3, [r2, #4]
 8002550:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002554:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002556:	6822      	ldr	r2, [r4, #0]
 8002558:	6853      	ldr	r3, [r2, #4]
 800255a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800255e:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002560:	2301      	movs	r3, #1
 8002562:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002566:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff fe0c 	bl	800218c <HAL_I2S_ErrorCallback>
}
 8002574:	e79b      	b.n	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8002576:	4620      	mov	r0, r4
 8002578:	f7ff fed4 	bl	8002324 <I2SEx_TxISR_I2SExt>
 800257c:	e7b0      	b.n	80024e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 800257e:	4620      	mov	r0, r4
 8002580:	f7ff ff00 	bl	8002384 <I2SEx_RxISR_I2S>
 8002584:	e7b4      	b.n	80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002586:	4a03      	ldr	r2, [pc, #12]	; (8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002588:	e7c5      	b.n	8002516 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800258a:	4a02      	ldr	r2, [pc, #8]	; (8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800258c:	e7df      	b.n	800254e <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 800258e:	bf00      	nop
 8002590:	40003800 	.word	0x40003800
 8002594:	40003400 	.word	0x40003400

08002598 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	2800      	cmp	r0, #0
 800259a:	f000 81e4 	beq.w	8002966 <HAL_RCC_OscConfig+0x3ce>
{
 800259e:	b570      	push	{r4, r5, r6, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a4:	6803      	ldr	r3, [r0, #0]
 80025a6:	f013 0f01 	tst.w	r3, #1
 80025aa:	d03b      	beq.n	8002624 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ac:	4ba7      	ldr	r3, [pc, #668]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d02c      	beq.n	8002612 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b8:	4ba4      	ldr	r3, [pc, #656]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d021      	beq.n	8002608 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c4:	6863      	ldr	r3, [r4, #4]
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ca:	d04f      	beq.n	800266c <HAL_RCC_OscConfig+0xd4>
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d0:	d052      	beq.n	8002678 <HAL_RCC_OscConfig+0xe0>
 80025d2:	4b9e      	ldr	r3, [pc, #632]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d050      	beq.n	800268c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe fb4b 	bl	8000c84 <HAL_GetTick>
 80025ee:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f0:	4b96      	ldr	r3, [pc, #600]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025f8:	d114      	bne.n	8002624 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fa:	f7fe fb43 	bl	8000c84 <HAL_GetTick>
 80025fe:	1b40      	subs	r0, r0, r5
 8002600:	2864      	cmp	r0, #100	; 0x64
 8002602:	d9f5      	bls.n	80025f0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002604:	2003      	movs	r0, #3
 8002606:	e1b3      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002608:	4b90      	ldr	r3, [pc, #576]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002610:	d0d8      	beq.n	80025c4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800261a:	d003      	beq.n	8002624 <HAL_RCC_OscConfig+0x8c>
 800261c:	6863      	ldr	r3, [r4, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 81a3 	beq.w	800296a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	f013 0f02 	tst.w	r3, #2
 800262a:	d055      	beq.n	80026d8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262c:	4b87      	ldr	r3, [pc, #540]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f013 0f0c 	tst.w	r3, #12
 8002634:	d03e      	beq.n	80026b4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002636:	4b85      	ldr	r3, [pc, #532]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263e:	2b08      	cmp	r3, #8
 8002640:	d033      	beq.n	80026aa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002642:	68e3      	ldr	r3, [r4, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d068      	beq.n	800271a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002648:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x2b8>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fb19 	bl	8000c84 <HAL_GetTick>
 8002652:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	4b7d      	ldr	r3, [pc, #500]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f013 0f02 	tst.w	r3, #2
 800265c:	d154      	bne.n	8002708 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe fb11 	bl	8000c84 <HAL_GetTick>
 8002662:	1b40      	subs	r0, r0, r5
 8002664:	2802      	cmp	r0, #2
 8002666:	d9f5      	bls.n	8002654 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002668:	2003      	movs	r0, #3
 800266a:	e181      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	4a77      	ldr	r2, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e7b5      	b.n	80025e4 <HAL_RCC_OscConfig+0x4c>
 8002678:	4b74      	ldr	r3, [pc, #464]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e7ab      	b.n	80025e4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800268c:	f7fe fafa 	bl	8000c84 <HAL_GetTick>
 8002690:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800269a:	d0c3      	beq.n	8002624 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe faf2 	bl	8000c84 <HAL_GetTick>
 80026a0:	1b40      	subs	r0, r0, r5
 80026a2:	2864      	cmp	r0, #100	; 0x64
 80026a4:	d9f5      	bls.n	8002692 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80026a6:	2003      	movs	r0, #3
 80026a8:	e162      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026aa:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80026b2:	d1c6      	bne.n	8002642 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b4:	4b65      	ldr	r3, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f013 0f02 	tst.w	r3, #2
 80026bc:	d004      	beq.n	80026c8 <HAL_RCC_OscConfig+0x130>
 80026be:	68e3      	ldr	r3, [r4, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80026c4:	2001      	movs	r0, #1
 80026c6:	e153      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4a60      	ldr	r2, [pc, #384]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80026ca:	6813      	ldr	r3, [r2, #0]
 80026cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026d0:	6921      	ldr	r1, [r4, #16]
 80026d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026d6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	f013 0f08 	tst.w	r3, #8
 80026de:	d040      	beq.n	8002762 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026e0:	6963      	ldr	r3, [r4, #20]
 80026e2:	b363      	cbz	r3, 800273e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e4:	4b5b      	ldr	r3, [pc, #364]	; (8002854 <HAL_RCC_OscConfig+0x2bc>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe facb 	bl	8000c84 <HAL_GetTick>
 80026ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f013 0f02 	tst.w	r3, #2
 80026f8:	d133      	bne.n	8002762 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fa:	f7fe fac3 	bl	8000c84 <HAL_GetTick>
 80026fe:	1b40      	subs	r0, r0, r5
 8002700:	2802      	cmp	r0, #2
 8002702:	d9f5      	bls.n	80026f0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002704:	2003      	movs	r0, #3
 8002706:	e133      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4a50      	ldr	r2, [pc, #320]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002710:	6921      	ldr	r1, [r4, #16]
 8002712:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	e7de      	b.n	80026d8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <HAL_RCC_OscConfig+0x2b8>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002720:	f7fe fab0 	bl	8000c84 <HAL_GetTick>
 8002724:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f013 0f02 	tst.w	r3, #2
 800272e:	d0d3      	beq.n	80026d8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002730:	f7fe faa8 	bl	8000c84 <HAL_GetTick>
 8002734:	1b40      	subs	r0, r0, r5
 8002736:	2802      	cmp	r0, #2
 8002738:	d9f5      	bls.n	8002726 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800273a:	2003      	movs	r0, #3
 800273c:	e118      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273e:	4b45      	ldr	r3, [pc, #276]	; (8002854 <HAL_RCC_OscConfig+0x2bc>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7fe fa9e 	bl	8000c84 <HAL_GetTick>
 8002748:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	f013 0f02 	tst.w	r3, #2
 8002752:	d006      	beq.n	8002762 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002754:	f7fe fa96 	bl	8000c84 <HAL_GetTick>
 8002758:	1b40      	subs	r0, r0, r5
 800275a:	2802      	cmp	r0, #2
 800275c:	d9f5      	bls.n	800274a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800275e:	2003      	movs	r0, #3
 8002760:	e106      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	f013 0f04 	tst.w	r3, #4
 8002768:	d079      	beq.n	800285e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002772:	d133      	bne.n	80027dc <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	2300      	movs	r3, #0
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800277a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800278c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b32      	ldr	r3, [pc, #200]	; (8002858 <HAL_RCC_OscConfig+0x2c0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002796:	d023      	beq.n	80027e0 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002798:	68a3      	ldr	r3, [r4, #8]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d034      	beq.n	8002808 <HAL_RCC_OscConfig+0x270>
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d038      	beq.n	8002814 <HAL_RCC_OscConfig+0x27c>
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80027a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	671a      	str	r2, [r3, #112]	; 0x70
 80027ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027ae:	f022 0204 	bic.w	r2, r2, #4
 80027b2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b4:	68a3      	ldr	r3, [r4, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d036      	beq.n	8002828 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7fe fa63 	bl	8000c84 <HAL_GetTick>
 80027be:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	f013 0f02 	tst.w	r3, #2
 80027c8:	d148      	bne.n	800285c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe fa5b 	bl	8000c84 <HAL_GetTick>
 80027ce:	1b80      	subs	r0, r0, r6
 80027d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80027d4:	4298      	cmp	r0, r3
 80027d6:	d9f3      	bls.n	80027c0 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80027d8:	2003      	movs	r0, #3
 80027da:	e0c9      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 80027dc:	2500      	movs	r5, #0
 80027de:	e7d6      	b.n	800278e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_RCC_OscConfig+0x2c0>)
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027ea:	f7fe fa4b 	bl	8000c84 <HAL_GetTick>
 80027ee:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_RCC_OscConfig+0x2c0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027f8:	d1ce      	bne.n	8002798 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7fe fa43 	bl	8000c84 <HAL_GetTick>
 80027fe:	1b80      	subs	r0, r0, r6
 8002800:	2802      	cmp	r0, #2
 8002802:	d9f5      	bls.n	80027f0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002804:	2003      	movs	r0, #3
 8002806:	e0b3      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	4a10      	ldr	r2, [pc, #64]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 800280a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	e7cf      	b.n	80027b4 <HAL_RCC_OscConfig+0x21c>
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 8002816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002818:	f042 0204 	orr.w	r2, r2, #4
 800281c:	671a      	str	r2, [r3, #112]	; 0x70
 800281e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	671a      	str	r2, [r3, #112]	; 0x70
 8002826:	e7c5      	b.n	80027b4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7fe fa2c 	bl	8000c84 <HAL_GetTick>
 800282c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <HAL_RCC_OscConfig+0x2b4>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	f013 0f02 	tst.w	r3, #2
 8002836:	d011      	beq.n	800285c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe fa24 	bl	8000c84 <HAL_GetTick>
 800283c:	1b80      	subs	r0, r0, r6
 800283e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002842:	4298      	cmp	r0, r3
 8002844:	d9f3      	bls.n	800282e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002846:	2003      	movs	r0, #3
 8002848:	e092      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	42470e80 	.word	0x42470e80
 8002858:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	b9ed      	cbnz	r5, 800289a <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285e:	69a3      	ldr	r3, [r4, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8084 	beq.w	800296e <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4a45      	ldr	r2, [pc, #276]	; (800297c <HAL_RCC_OscConfig+0x3e4>)
 8002868:	6892      	ldr	r2, [r2, #8]
 800286a:	f002 020c 	and.w	r2, r2, #12
 800286e:	2a08      	cmp	r2, #8
 8002870:	d051      	beq.n	8002916 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	2b02      	cmp	r3, #2
 8002874:	d017      	beq.n	80028a6 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b42      	ldr	r3, [pc, #264]	; (8002980 <HAL_RCC_OscConfig+0x3e8>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe fa02 	bl	8000c84 <HAL_GetTick>
 8002880:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	4b3e      	ldr	r3, [pc, #248]	; (800297c <HAL_RCC_OscConfig+0x3e4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800288a:	d042      	beq.n	8002912 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f9fa 	bl	8000c84 <HAL_GetTick>
 8002890:	1b00      	subs	r0, r0, r4
 8002892:	2802      	cmp	r0, #2
 8002894:	d9f5      	bls.n	8002882 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002896:	2003      	movs	r0, #3
 8002898:	e06a      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4a38      	ldr	r2, [pc, #224]	; (800297c <HAL_RCC_OscConfig+0x3e4>)
 800289c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6413      	str	r3, [r2, #64]	; 0x40
 80028a4:	e7db      	b.n	800285e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_OscConfig+0x3e8>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028ac:	f7fe f9ea 	bl	8000c84 <HAL_GetTick>
 80028b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_RCC_OscConfig+0x3e4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028ba:	d006      	beq.n	80028ca <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe f9e2 	bl	8000c84 <HAL_GetTick>
 80028c0:	1b40      	subs	r0, r0, r5
 80028c2:	2802      	cmp	r0, #2
 80028c4:	d9f5      	bls.n	80028b2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80028c6:	2003      	movs	r0, #3
 80028c8:	e052      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ca:	69e3      	ldr	r3, [r4, #28]
 80028cc:	6a22      	ldr	r2, [r4, #32]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028d2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028d8:	0852      	lsrs	r2, r2, #1
 80028da:	3a01      	subs	r2, #1
 80028dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028e6:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_RCC_OscConfig+0x3e4>)
 80028e8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80028ea:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_OscConfig+0x3e8>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028f0:	f7fe f9c8 	bl	8000c84 <HAL_GetTick>
 80028f4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_RCC_OscConfig+0x3e4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe f9c0 	bl	8000c84 <HAL_GetTick>
 8002904:	1b00      	subs	r0, r0, r4
 8002906:	2802      	cmp	r0, #2
 8002908:	d9f5      	bls.n	80028f6 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800290a:	2003      	movs	r0, #3
 800290c:	e030      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800290e:	2000      	movs	r0, #0
 8002910:	e02e      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
 8002912:	2000      	movs	r0, #0
 8002914:	e02c      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002916:	2b01      	cmp	r3, #1
 8002918:	d02c      	beq.n	8002974 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_RCC_OscConfig+0x3e4>)
 800291c:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002922:	69e2      	ldr	r2, [r4, #28]
 8002924:	4291      	cmp	r1, r2
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8002928:	2001      	movs	r0, #1
 800292a:	e021      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800292c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002930:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	428a      	cmp	r2, r1
 8002934:	d001      	beq.n	800293a <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8002936:	2001      	movs	r0, #1
 8002938:	e01a      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800293a:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800293c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002940:	401a      	ands	r2, r3
 8002942:	428a      	cmp	r2, r1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8002946:	2001      	movs	r0, #1
 8002948:	e012      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800294a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002950:	428a      	cmp	r2, r1
 8002952:	d001      	beq.n	8002958 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8002954:	2001      	movs	r0, #1
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002958:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800295c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800295e:	4293      	cmp	r3, r2
 8002960:	d00a      	beq.n	8002978 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8002962:	2001      	movs	r0, #1
 8002964:	e004      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8002966:	2001      	movs	r0, #1
}
 8002968:	4770      	bx	lr
        return HAL_ERROR;
 800296a:	2001      	movs	r0, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 800296e:	2000      	movs	r0, #0
}
 8002970:	b002      	add	sp, #8
 8002972:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002974:	2001      	movs	r0, #1
 8002976:	e7fb      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8002978:	2000      	movs	r0, #0
 800297a:	e7f9      	b.n	8002970 <HAL_RCC_OscConfig+0x3d8>
 800297c:	40023800 	.word	0x40023800
 8002980:	42470060 	.word	0x42470060

08002984 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b04      	cmp	r3, #4
 800298e:	d044      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x96>
 8002990:	2b08      	cmp	r3, #8
 8002992:	d001      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4823      	ldr	r0, [pc, #140]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002996:	4770      	bx	lr
{
 8002998:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800299c:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80029aa:	d013      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80029b4:	2300      	movs	r3, #0
 80029b6:	481c      	ldr	r0, [pc, #112]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029b8:	fba1 0100 	umull	r0, r1, r1, r0
 80029bc:	f7fd fc04 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029c8:	3301      	adds	r3, #1
 80029ca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80029cc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80029d0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80029dc:	461e      	mov	r6, r3
 80029de:	2700      	movs	r7, #0
 80029e0:	015c      	lsls	r4, r3, #5
 80029e2:	2500      	movs	r5, #0
 80029e4:	1ae4      	subs	r4, r4, r3
 80029e6:	eb65 0507 	sbc.w	r5, r5, r7
 80029ea:	01a9      	lsls	r1, r5, #6
 80029ec:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80029f0:	01a0      	lsls	r0, r4, #6
 80029f2:	1b00      	subs	r0, r0, r4
 80029f4:	eb61 0105 	sbc.w	r1, r1, r5
 80029f8:	00cb      	lsls	r3, r1, #3
 80029fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029fe:	00c4      	lsls	r4, r0, #3
 8002a00:	19a0      	adds	r0, r4, r6
 8002a02:	eb43 0107 	adc.w	r1, r3, r7
 8002a06:	028b      	lsls	r3, r1, #10
 8002a08:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002a0c:	0284      	lsls	r4, r0, #10
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4619      	mov	r1, r3
 8002a12:	2300      	movs	r3, #0
 8002a14:	f7fd fbd8 	bl	80001c8 <__aeabi_uldivmod>
 8002a18:	e7d2      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8002a1a:	4803      	ldr	r0, [pc, #12]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	017d7840 	.word	0x017d7840

08002a2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	f000 809e 	beq.w	8002b6e <HAL_RCC_ClockConfig+0x142>
{
 8002a32:	b570      	push	{r4, r5, r6, lr}
 8002a34:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a36:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x14c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	428b      	cmp	r3, r1
 8002a40:	d209      	bcs.n	8002a56 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	b2cb      	uxtb	r3, r1
 8002a44:	4a4c      	ldr	r2, [pc, #304]	; (8002b78 <HAL_RCC_ClockConfig+0x14c>)
 8002a46:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	428b      	cmp	r3, r1
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
}
 8002a54:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	f013 0f02 	tst.w	r3, #2
 8002a5c:	d017      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5e:	f013 0f04 	tst.w	r3, #4
 8002a62:	d004      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4a45      	ldr	r2, [pc, #276]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002a66:	6893      	ldr	r3, [r2, #8]
 8002a68:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f013 0f08 	tst.w	r3, #8
 8002a74:	d004      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a76:	4a41      	ldr	r2, [pc, #260]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002a78:	6893      	ldr	r3, [r2, #8]
 8002a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a7e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4a3e      	ldr	r2, [pc, #248]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002a82:	6893      	ldr	r3, [r2, #8]
 8002a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a88:	68a0      	ldr	r0, [r4, #8]
 8002a8a:	4303      	orrs	r3, r0
 8002a8c:	6093      	str	r3, [r2, #8]
 8002a8e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	f013 0f01 	tst.w	r3, #1
 8002a96:	d032      	beq.n	8002afe <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a98:	6863      	ldr	r3, [r4, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d021      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	1e9a      	subs	r2, r3, #2
 8002aa0:	2a01      	cmp	r2, #1
 8002aa2:	d925      	bls.n	8002af0 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	f012 0f02 	tst.w	r2, #2
 8002aac:	d061      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4933      	ldr	r1, [pc, #204]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002ab0:	688a      	ldr	r2, [r1, #8]
 8002ab2:	f022 0203 	bic.w	r2, r2, #3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002aba:	f7fe f8e3 	bl	8000c84 <HAL_GetTick>
 8002abe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	6862      	ldr	r2, [r4, #4]
 8002aca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ace:	d016      	beq.n	8002afe <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7fe f8d8 	bl	8000c84 <HAL_GetTick>
 8002ad4:	1b80      	subs	r0, r0, r6
 8002ad6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ada:	4298      	cmp	r0, r3
 8002adc:	d9f0      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8002ade:	2003      	movs	r0, #3
 8002ae0:	e7b8      	b.n	8002a54 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4a26      	ldr	r2, [pc, #152]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002aea:	d1e0      	bne.n	8002aae <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002aec:	2001      	movs	r0, #1
 8002aee:	e7b1      	b.n	8002a54 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002af8:	d1d9      	bne.n	8002aae <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002afa:	2001      	movs	r0, #1
 8002afc:	e7aa      	b.n	8002a54 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_ClockConfig+0x14c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	42ab      	cmp	r3, r5
 8002b08:	d909      	bls.n	8002b1e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	b2ea      	uxtb	r2, r5
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_RCC_ClockConfig+0x14c>)
 8002b0e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	42ab      	cmp	r3, r5
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	e79a      	b.n	8002a54 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	f013 0f04 	tst.w	r3, #4
 8002b24:	d006      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b26:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002b28:	6893      	ldr	r3, [r2, #8]
 8002b2a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002b2e:	68e1      	ldr	r1, [r4, #12]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	f013 0f08 	tst.w	r3, #8
 8002b3a:	d007      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002b3e:	6893      	ldr	r3, [r2, #8]
 8002b40:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b44:	6921      	ldr	r1, [r4, #16]
 8002b46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b4c:	f7ff ff1a 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x150>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b58:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x154>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	40d8      	lsrs	r0, r3
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x158>)
 8002b60:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x15c>)
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	f7fe f841 	bl	8000bec <HAL_InitTick>
  return HAL_OK;
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	e772      	b.n	8002a54 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
}
 8002b70:	4770      	bx	lr
        return HAL_ERROR;
 8002b72:	2001      	movs	r0, #1
 8002b74:	e76e      	b.n	8002a54 <HAL_RCC_ClockConfig+0x28>
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	0800309c 	.word	0x0800309c
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000008 	.word	0x20000008

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002b8c:	4b01      	ldr	r3, [pc, #4]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x8>)
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b9a:	f7ff fff7 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002ba6:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ba8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002baa:	40d8      	lsrs	r0, r3
 8002bac:	bd08      	pop	{r3, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	080030ac 	.word	0x080030ac

08002bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bba:	f7ff ffe7 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002bc6:	4a03      	ldr	r2, [pc, #12]	; (8002bd4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002bca:	40d8      	lsrs	r0, r3
 8002bcc:	bd08      	pop	{r3, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	080030ac 	.word	0x080030ac

08002bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd8:	b530      	push	{r4, r5, lr}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002bde:	6803      	ldr	r3, [r0, #0]
 8002be0:	f013 0f05 	tst.w	r3, #5
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	f013 0f02 	tst.w	r3, #2
 8002bec:	d12e      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002bee:	2000      	movs	r0, #0
}
 8002bf0:	b003      	add	sp, #12
 8002bf2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002bf4:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002bfa:	f7fe f843 	bl	8000c84 <HAL_GetTick>
 8002bfe:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c00:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002c08:	d006      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c0a:	f7fe f83b 	bl	8000c84 <HAL_GetTick>
 8002c0e:	1b40      	subs	r0, r0, r5
 8002c10:	2802      	cmp	r0, #2
 8002c12:	d9f5      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8002c14:	2003      	movs	r0, #3
 8002c16:	e7eb      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002c18:	6862      	ldr	r2, [r4, #4]
 8002c1a:	68a3      	ldr	r3, [r4, #8]
 8002c1c:	071b      	lsls	r3, r3, #28
 8002c1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c22:	4a3f      	ldr	r2, [pc, #252]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002c24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002c28:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002c2e:	f7fe f829 	bl	8000c84 <HAL_GetTick>
 8002c32:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c34:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002c3c:	d1d3      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c3e:	f7fe f821 	bl	8000c84 <HAL_GetTick>
 8002c42:	1b40      	subs	r0, r0, r5
 8002c44:	2802      	cmp	r0, #2
 8002c46:	d9f5      	bls.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002c48:	2003      	movs	r0, #3
 8002c4a:	e7d1      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002c64:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c66:	6813      	ldr	r3, [r2, #0]
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c6e:	f7fe f809 	bl	8000c84 <HAL_GetTick>
 8002c72:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c7e:	f7fe f801 	bl	8000c84 <HAL_GetTick>
 8002c82:	1b40      	subs	r0, r0, r5
 8002c84:	2802      	cmp	r0, #2
 8002c86:	d9f5      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002c88:	2003      	movs	r0, #3
 8002c8a:	e7b1      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c90:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c94:	d012      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8002c96:	68e2      	ldr	r2, [r4, #12]
 8002c98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d00d      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ca8:	491f      	ldr	r1, [pc, #124]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002caa:	2001      	movs	r0, #1
 8002cac:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cae:	2000      	movs	r0, #0
 8002cb0:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8002cb2:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	f013 0f01 	tst.w	r3, #1
 8002cba:	d113      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cbc:	68e3      	ldr	r3, [r4, #12]
 8002cbe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002cc2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002cc6:	d01e      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8002cc8:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002cca:	6893      	ldr	r3, [r2, #8]
 8002ccc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cd0:	6093      	str	r3, [r2, #8]
 8002cd2:	4913      	ldr	r1, [pc, #76]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002cd4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002cd6:	68e2      	ldr	r2, [r4, #12]
 8002cd8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	e785      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8002ce4:	f7fd ffce 	bl	8000c84 <HAL_GetTick>
 8002ce8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f013 0f02 	tst.w	r3, #2
 8002cf2:	d1e3      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fd ffc6 	bl	8000c84 <HAL_GetTick>
 8002cf8:	1b40      	subs	r0, r0, r5
 8002cfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	d9f3      	bls.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 8002d02:	2003      	movs	r0, #3
 8002d04:	e774      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d06:	4906      	ldr	r1, [pc, #24]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002d08:	688a      	ldr	r2, [r1, #8]
 8002d0a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002d0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
 8002d1a:	e7da      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002d1c:	42470068 	.word	0x42470068
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42470e40 	.word	0x42470e40

08002d2c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002d2c:	2801      	cmp	r0, #1
 8002d2e:	d12a      	bne.n	8002d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002d32:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8002d34:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8002d38:	d003      	beq.n	8002d42 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d125      	bne.n	8002d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d3e:	4815      	ldr	r0, [pc, #84]	; (8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002d40:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d4a:	d014      	beq.n	8002d76 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d54:	4810      	ldr	r0, [pc, #64]	; (8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8002d56:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002d5a:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002d5c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002d60:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002d64:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002d68:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002d6c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002d70:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002d74:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7e:	4807      	ldr	r0, [pc, #28]	; (8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8002d80:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d84:	e7e9      	b.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t frequency = 0U;
 8002d86:	2000      	movs	r0, #0
 8002d88:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002d8a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00bb8000 	.word	0x00bb8000
 8002d98:	017d7840 	.word	0x017d7840
 8002d9c:	00f42400 	.word	0x00f42400

08002da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002da4:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da6:	6802      	ldr	r2, [r0, #0]
 8002da8:	6913      	ldr	r3, [r2, #16]
 8002daa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dae:	68c1      	ldr	r1, [r0, #12]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002db4:	6883      	ldr	r3, [r0, #8]
 8002db6:	6902      	ldr	r2, [r0, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	6942      	ldr	r2, [r0, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	69c2      	ldr	r2, [r0, #28]
 8002dc0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002dc2:	6801      	ldr	r1, [r0, #0]
 8002dc4:	68cb      	ldr	r3, [r1, #12]
 8002dc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002dca:	f023 030c 	bic.w	r3, r3, #12
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dd2:	6802      	ldr	r2, [r0, #0]
 8002dd4:	6953      	ldr	r3, [r2, #20]
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	6981      	ldr	r1, [r0, #24]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de0:	69c3      	ldr	r3, [r0, #28]
 8002de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de6:	d03b      	beq.n	8002e60 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002de8:	6803      	ldr	r3, [r0, #0]
 8002dea:	4a71      	ldr	r2, [pc, #452]	; (8002fb0 <UART_SetConfig+0x210>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	f000 80ab 	beq.w	8002f48 <UART_SetConfig+0x1a8>
 8002df2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002df6:	4293      	cmp	r3, r2
 8002df8:	f000 80a6 	beq.w	8002f48 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7ff fecc 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e00:	f04f 0900 	mov.w	r9, #0
 8002e04:	1806      	adds	r6, r0, r0
 8002e06:	eb49 0709 	adc.w	r7, r9, r9
 8002e0a:	eb16 0b00 	adds.w	fp, r6, r0
 8002e0e:	eb47 0c09 	adc.w	ip, r7, r9
 8002e12:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8002e16:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8002e1a:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8002e1e:	4693      	mov	fp, r2
 8002e20:	469c      	mov	ip, r3
 8002e22:	6863      	ldr	r3, [r4, #4]
 8002e24:	009a      	lsls	r2, r3, #2
 8002e26:	0f9b      	lsrs	r3, r3, #30
 8002e28:	eb10 000b 	adds.w	r0, r0, fp
 8002e2c:	eb49 010c 	adc.w	r1, r9, ip
 8002e30:	f7fd f9ca 	bl	80001c8 <__aeabi_uldivmod>
 8002e34:	4d5f      	ldr	r5, [pc, #380]	; (8002fb4 <UART_SetConfig+0x214>)
 8002e36:	fba5 3200 	umull	r3, r2, r5, r0
 8002e3a:	0951      	lsrs	r1, r2, #5
 8002e3c:	2264      	movs	r2, #100	; 0x64
 8002e3e:	fb02 0211 	mls	r2, r2, r1, r0
 8002e42:	0113      	lsls	r3, r2, #4
 8002e44:	3332      	adds	r3, #50	; 0x32
 8002e46:	fba5 2303 	umull	r2, r3, r5, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e50:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
    }
  }
}
 8002e5e:	e0a4      	b.n	8002faa <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e60:	6803      	ldr	r3, [r0, #0]
 8002e62:	4a53      	ldr	r2, [pc, #332]	; (8002fb0 <UART_SetConfig+0x210>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d039      	beq.n	8002edc <UART_SetConfig+0x13c>
 8002e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d035      	beq.n	8002edc <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e70:	f7ff fe92 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e74:	4683      	mov	fp, r0
 8002e76:	f04f 0c00 	mov.w	ip, #0
 8002e7a:	1806      	adds	r6, r0, r0
 8002e7c:	eb4c 070c 	adc.w	r7, ip, ip
 8002e80:	eb16 0800 	adds.w	r8, r6, r0
 8002e84:	eb47 090c 	adc.w	r9, r7, ip
 8002e88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e94:	4690      	mov	r8, r2
 8002e96:	4699      	mov	r9, r3
 8002e98:	6862      	ldr	r2, [r4, #4]
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	1892      	adds	r2, r2, r2
 8002e9e:	eb41 0301 	adc.w	r3, r1, r1
 8002ea2:	eb1b 0008 	adds.w	r0, fp, r8
 8002ea6:	eb4c 0109 	adc.w	r1, ip, r9
 8002eaa:	f7fd f98d 	bl	80001c8 <__aeabi_uldivmod>
 8002eae:	4d41      	ldr	r5, [pc, #260]	; (8002fb4 <UART_SetConfig+0x214>)
 8002eb0:	fba5 3200 	umull	r3, r2, r5, r0
 8002eb4:	0951      	lsrs	r1, r2, #5
 8002eb6:	2264      	movs	r2, #100	; 0x64
 8002eb8:	fb02 0211 	mls	r2, r2, r1, r0
 8002ebc:	00d3      	lsls	r3, r2, #3
 8002ebe:	3332      	adds	r3, #50	; 0x32
 8002ec0:	fba5 2303 	umull	r2, r3, r5, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	005a      	lsls	r2, r3, #1
 8002ec8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002ecc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	6821      	ldr	r1, [r4, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
 8002eda:	e066      	b.n	8002faa <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7ff fe6c 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee0:	4680      	mov	r8, r0
 8002ee2:	f04f 0900 	mov.w	r9, #0
 8002ee6:	1806      	adds	r6, r0, r0
 8002ee8:	eb49 0709 	adc.w	r7, r9, r9
 8002eec:	eb16 0b00 	adds.w	fp, r6, r0
 8002ef0:	eb47 0c09 	adc.w	ip, r7, r9
 8002ef4:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8002ef8:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8002efc:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8002f00:	4693      	mov	fp, r2
 8002f02:	469c      	mov	ip, r3
 8002f04:	6862      	ldr	r2, [r4, #4]
 8002f06:	2100      	movs	r1, #0
 8002f08:	1892      	adds	r2, r2, r2
 8002f0a:	eb41 0301 	adc.w	r3, r1, r1
 8002f0e:	eb18 000b 	adds.w	r0, r8, fp
 8002f12:	eb49 010c 	adc.w	r1, r9, ip
 8002f16:	f7fd f957 	bl	80001c8 <__aeabi_uldivmod>
 8002f1a:	4d26      	ldr	r5, [pc, #152]	; (8002fb4 <UART_SetConfig+0x214>)
 8002f1c:	fba5 3200 	umull	r3, r2, r5, r0
 8002f20:	0951      	lsrs	r1, r2, #5
 8002f22:	2264      	movs	r2, #100	; 0x64
 8002f24:	fb02 0211 	mls	r2, r2, r1, r0
 8002f28:	00d3      	lsls	r3, r2, #3
 8002f2a:	3332      	adds	r3, #50	; 0x32
 8002f2c:	fba5 2303 	umull	r2, r3, r5, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	005a      	lsls	r2, r3, #1
 8002f34:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002f38:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	6821      	ldr	r1, [r4, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	e030      	b.n	8002faa <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f48:	f7ff fe36 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f4c:	f04f 0900 	mov.w	r9, #0
 8002f50:	1806      	adds	r6, r0, r0
 8002f52:	eb49 0709 	adc.w	r7, r9, r9
 8002f56:	eb16 0b00 	adds.w	fp, r6, r0
 8002f5a:	eb47 0c09 	adc.w	ip, r7, r9
 8002f5e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8002f62:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8002f66:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8002f6a:	4693      	mov	fp, r2
 8002f6c:	469c      	mov	ip, r3
 8002f6e:	6863      	ldr	r3, [r4, #4]
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	0f9b      	lsrs	r3, r3, #30
 8002f74:	eb10 000b 	adds.w	r0, r0, fp
 8002f78:	eb49 010c 	adc.w	r1, r9, ip
 8002f7c:	f7fd f924 	bl	80001c8 <__aeabi_uldivmod>
 8002f80:	4d0c      	ldr	r5, [pc, #48]	; (8002fb4 <UART_SetConfig+0x214>)
 8002f82:	fba5 3200 	umull	r3, r2, r5, r0
 8002f86:	0951      	lsrs	r1, r2, #5
 8002f88:	2264      	movs	r2, #100	; 0x64
 8002f8a:	fb02 0211 	mls	r2, r2, r1, r0
 8002f8e:	0113      	lsls	r3, r2, #4
 8002f90:	3332      	adds	r3, #50	; 0x32
 8002f92:	fba5 2303 	umull	r2, r3, r5, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f9c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	6821      	ldr	r1, [r4, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
}
 8002faa:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002fae:	bf00      	nop
 8002fb0:	40011000 	.word	0x40011000
 8002fb4:	51eb851f 	.word	0x51eb851f

08002fb8 <HAL_UART_Init>:
  if (huart == NULL)
 8002fb8:	b358      	cbz	r0, 8003012 <HAL_UART_Init+0x5a>
{
 8002fba:	b510      	push	{r4, lr}
 8002fbc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fc2:	b30b      	cbz	r3, 8003008 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002fc4:	2324      	movs	r3, #36	; 0x24
 8002fc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	68d3      	ldr	r3, [r2, #12]
 8002fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fd2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7ff fee3 	bl	8002da0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fda:	6822      	ldr	r2, [r4, #0]
 8002fdc:	6913      	ldr	r3, [r2, #16]
 8002fde:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002fe2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	6953      	ldr	r3, [r2, #20]
 8002fe8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002fec:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	68d3      	ldr	r3, [r2, #12]
 8002ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ff6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003002:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003006:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003008:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800300c:	f7fd fd62 	bl	8000ad4 <HAL_UART_MspInit>
 8003010:	e7d8      	b.n	8002fc4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003012:	2001      	movs	r0, #1
}
 8003014:	4770      	bx	lr
	...

08003018 <__libc_init_array>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	4e0d      	ldr	r6, [pc, #52]	; (8003050 <__libc_init_array+0x38>)
 800301c:	4c0d      	ldr	r4, [pc, #52]	; (8003054 <__libc_init_array+0x3c>)
 800301e:	1ba4      	subs	r4, r4, r6
 8003020:	10a4      	asrs	r4, r4, #2
 8003022:	2500      	movs	r5, #0
 8003024:	42a5      	cmp	r5, r4
 8003026:	d109      	bne.n	800303c <__libc_init_array+0x24>
 8003028:	4e0b      	ldr	r6, [pc, #44]	; (8003058 <__libc_init_array+0x40>)
 800302a:	4c0c      	ldr	r4, [pc, #48]	; (800305c <__libc_init_array+0x44>)
 800302c:	f000 f820 	bl	8003070 <_init>
 8003030:	1ba4      	subs	r4, r4, r6
 8003032:	10a4      	asrs	r4, r4, #2
 8003034:	2500      	movs	r5, #0
 8003036:	42a5      	cmp	r5, r4
 8003038:	d105      	bne.n	8003046 <__libc_init_array+0x2e>
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003040:	4798      	blx	r3
 8003042:	3501      	adds	r5, #1
 8003044:	e7ee      	b.n	8003024 <__libc_init_array+0xc>
 8003046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800304a:	4798      	blx	r3
 800304c:	3501      	adds	r5, #1
 800304e:	e7f2      	b.n	8003036 <__libc_init_array+0x1e>
 8003050:	080030c4 	.word	0x080030c4
 8003054:	080030c4 	.word	0x080030c4
 8003058:	080030c4 	.word	0x080030c4
 800305c:	080030c8 	.word	0x080030c8

08003060 <memset>:
 8003060:	4402      	add	r2, r0
 8003062:	4603      	mov	r3, r0
 8003064:	4293      	cmp	r3, r2
 8003066:	d100      	bne.n	800306a <memset+0xa>
 8003068:	4770      	bx	lr
 800306a:	f803 1b01 	strb.w	r1, [r3], #1
 800306e:	e7f9      	b.n	8003064 <memset+0x4>

08003070 <_init>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	bf00      	nop
 8003074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003076:	bc08      	pop	{r3}
 8003078:	469e      	mov	lr, r3
 800307a:	4770      	bx	lr

0800307c <_fini>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	bf00      	nop
 8003080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003082:	bc08      	pop	{r3}
 8003084:	469e      	mov	lr, r3
 8003086:	4770      	bx	lr
